00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ===========================================================================
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b   (v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 23FC 4000 0010 00C0 0004           move.l	#$40000010,(vdp_control_port).l
00000AD2 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000ADA 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000ADE 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AE4 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AEA 0240 003E                  		andi.w	#$3E,d0
00000AEE 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AF2 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000AF6                            
00000AF6                            VBla_Music:
00000AF6 46FC 2300                  		enable_ints		; enable interrupts (we can accept horizontal interrupts from now on)
00000AFA 08F8 0000 F64F                     bset    #0,(f_wtr_state+$1).w    ; set "SMPS running flag"
00000B00 6600                       		bne.s   VBla_Exit       ; if it was set already, don't call another instance of SMPS
00000B02 4EB9 0000 0000                     jsr UpdateMusic     ; run SMPS
00000B08 4238 F64F                          clr.b   (f_wtr_state+$1).w       ; reset "SMPS running flag"
00000B0C                            
00000B0C                            VBla_Exit:
00000B0C 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B10 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B14 4E73                       		rte
00000B16                            ; ===========================================================================
00000B16 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B1A 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B1E 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B22 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B26 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B2A 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B2E 0000                       		dc.w VBla_0C-VBla_Index
00000B30                            ; ===========================================================================
00000B30                            
00000B30                            VBla_00:
00000B30 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B36 6700                       		beq.s	@islevel
00000B38 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B3E 66B6                       		bne.s	VBla_Music	; if not, branch
00000B40                            
00000B40                            	@islevel:
00000B40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B46 66AE                       		bne.s	VBla_Music	; if not, branch
00000B48                            
00000B48 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4E 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B54 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B58 6600                       		bne.s	@waterabove 	; if yes, branch
00000B5A                            
00000B5A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B7E 6000                       		bra.s	@waterbelow
00000B80                            
00000B80                            @waterabove:
00000B80 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BA4                            
00000BA4                            	@waterbelow:
00000BA4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BA8 6000 FF4C                  		bra.w	VBla_Music
00000BAC                            ; ===========================================================================
00000BAC                            
00000BAC                            VBla_10:
00000BAC 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000BB2 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000BB6                            
00000BB6                            VBla_08:
00000BB6 6100 0000                  		bsr.w   VBla_06
00000BBA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BBE 4EBA 0000                  		jsr     ProcessDMAQueue(pc)
00000BC2                            
00000BC2                            	@nochg:		
00000BC2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000BC8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000BCE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000BD4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA                            ; Subroutine to	run a demo for an amount of time
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA                            
00000BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000BDA                            
00000BDA                            
00000BDA                            Demo_Time:
00000BDA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000BDE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000BE4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000BEA 6100 0000                  		bsr.w	ProcessDPLC2
00000BEE                            
00000BEE                            VBla_14:
00000BEE 4A78 F614                  		tst.w	(v_demolength).w
00000BF2 6700                       		beq.s	@end
00000BF4 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF8                            
00000BF8                            	@end:
00000BF8 4E75                       		rts
00000BFA                            ; ===========================================================================
00000BFA                            
00000BFA                            VBla_04:
00000BFA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFE 6100 0000                  		bsr.w	sub_1642
00000C02                            ; ===========================================================================
00000C02                            
00000C02                            VBla_02:
00000C02 6100                       		bsr.s	VBla_06
00000C04 60E8                       		bra.s	VBla_14
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_0C:
00000C06 61AE                       		bsr.s   VBla_08
00000C08 6000 0000                  		bra.w	sub_1642
00000C0C                            ; ===========================================================================
00000C0C                            
00000C0C                            VBla_0E:
00000C0C 6100                       		bsr.s	VBla_06
00000C0E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000C12 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000C18 4E75                       		rts
00000C1A                            ; ===========================================================================
00000C1A                            
00000C1A                            VBla_12:
00000C1A 6100                       		bsr.s	VBla_06
00000C1C 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C20 6000 0000                  		bra.w	sub_1642
00000C24                            ; ===========================================================================
00000C24                            
00000C24                            VBla_0A:
00000C24 6100 0000                  		bsr.w	PalCycle_SS
00000C28                            
00000C28                            VBla_16:
00000C28 6100                       		bsr.s   CRAMWriteDry
00000C2A 4EBA 0000                  		jsr     ProcessDMAQueue(pc)
00000C2E                            		
00000C2E                            	@nochg:			
00000C2E 61BE                       		bsr.s	VBla_14
00000C30                            
00000C30                            ; ---------------------------------------------------------------------------
00000C30                            ; Subroutine to	read joypad input, and send it to the RAM
00000C30                            ; ---------------------------------------------------------------------------
00000C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C30                            
00000C30                            
00000C30                            ReadJoypads:
00000C30 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
00000C34 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000C3A 6100                       		bsr.s	@read		; do the first joypad
00000C3C 5449                       		addq.w	#2,a1		; do the second	joypad
00000C3E                            
00000C3E                            	@read:
00000C3E 12BC 0000                  		move.b	#0,(a1)
00000C42 1011                       		move.b	(a1),d0
00000C44 E508                       		lsl.b	#2,d0
00000C46 0200 00C0                  		andi.b	#$C0,d0
00000C4A 12BC 0040                  		move.b	#$40,(a1)
00000C4E 1211                       		move.b	(a1),d1
00000C50 0201 003F                  		andi.b	#$3F,d1
00000C54 8001                       		or.b	d1,d0
00000C56 4600                       		not.b	d0
00000C58 1210                       		move.b	(a0),d1
00000C5A B101                       		eor.b	d0,d1
00000C5C 10C0                       		move.b	d0,(a0)+
00000C5E C200                       		and.b	d0,d1
00000C60 10C1                       		move.b	d1,(a0)+
00000C62 4E75                       		rts
00000C64                            ; End of function ReadJoypads
00000C64                            
00000C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C64                            
00000C64                            
00000C64                            VBla_06:
00000C64 61CA                       		bsr.s	ReadJoypads
00000C66 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000C6A 6600                       		bne.s	AboveWater1	; if yes, branch
00000C6C                            	CRAMWriteDry:
00000C6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C90 6000                       		bra.s	BelowWater
00000C92                            
00000C92                            	AboveWater1:
00000C92 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000CB6                            
00000CB6                            	BelowWater:
00000CB6 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CDA 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CFE 4E75                       		rts
00000D00                            ; End of function VBla_06
00000D00                            
00000D00                            
00000D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D00                            
00000D00                            
00000D00                            sub_106E:
00000D00 33FC 0100 00A1 1100        		stopZ80
00000D08 0839 0000 00A1 1100 66F6   		waitZ80
00000D12 6100 FF1C                  		bsr.w	ReadJoypads
00000D16 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000D1A 6600                       		bne.s	@waterabove	; if yes, branch
00000D1C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D40 6000                       		bra.s	@waterbelow
00000D42                            
00000D42                            	@waterabove:
00000D42 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000D66                            
00000D66                            	@waterbelow:
00000D66 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DAE 33FC 0000 00A1 1100        		startZ80
00000DB6 4E75                       		rts	
00000DB8                            ; End of function sub_106E
00000DB8                            
00000DB8                            ; ---------------------------------------------------------------------------
00000DB8                            ; Horizontal interrupt
00000DB8                            ; ---------------------------------------------------------------------------
00000DB8                            
00000DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000DB8                            
00000DB8                            
00000DB8                            HBlank:
00000DB8 46FC 2700                  		disable_ints
00000DBC 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000DC0 6700                       		beq.s	@nochg		; if not, branch
00000DC2 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000DC8 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000DCC 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000DD2 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00000DD6 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00000DDE 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
00000DE0 2298                       		move.l	(a0)+,(a1)
00000DE2 2298                       		move.l	(a0)+,(a1)
00000DE4 2298                       		move.l	(a0)+,(a1)
00000DE6 2298                       		move.l	(a0)+,(a1)
00000DE8 2298                       		move.l	(a0)+,(a1)
00000DEA 2298                       		move.l	(a0)+,(a1)
00000DEC 2298                       		move.l	(a0)+,(a1)
00000DEE 2298                       		move.l	(a0)+,(a1)
00000DF0 2298                       		move.l	(a0)+,(a1)
00000DF2 2298                       		move.l	(a0)+,(a1)
00000DF4 2298                       		move.l	(a0)+,(a1)
00000DF6 2298                       		move.l	(a0)+,(a1)
00000DF8 2298                       		move.l	(a0)+,(a1)
00000DFA 2298                       		move.l	(a0)+,(a1)
00000DFC 2298                       		move.l	(a0)+,(a1)
00000DFE 2298                       		move.l	(a0)+,(a1)
00000E00 2298                       		move.l	(a0)+,(a1)
00000E02 2298                       		move.l	(a0)+,(a1)
00000E04 2298                       		move.l	(a0)+,(a1)
00000E06 2298                       		move.l	(a0)+,(a1)
00000E08 2298                       		move.l	(a0)+,(a1)
00000E0A 2298                       		move.l	(a0)+,(a1)
00000E0C 2298                       		move.l	(a0)+,(a1)
00000E0E 2298                       		move.l	(a0)+,(a1)
00000E10 2298                       		move.l	(a0)+,(a1)
00000E12 2298                       		move.l	(a0)+,(a1)
00000E14 2298                       		move.l	(a0)+,(a1)
00000E16 2298                       		move.l	(a0)+,(a1)
00000E18 2298                       		move.l	(a0)+,(a1)
00000E1A 2298                       		move.l	(a0)+,(a1)
00000E1C 2298                       		move.l	(a0)+,(a1)
00000E1E 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
00000E24 4CDF 0300                  		movem.l	(sp)+,a0-a1
00000E28                            
00000E28                            	@nochg:
00000E28 4E73                       		rte	
00000E2A                            ; ===========================================================================
00000E2A                            ; End of function HBlank
00000E2A                            
00000E2A                            ; ---------------------------------------------------------------------------
00000E2A                            ; Subroutine to	initialise joypads
00000E2A                            ; ---------------------------------------------------------------------------
00000E2A                            
00000E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E2A                            
00000E2A                            
00000E2A                            JoypadInit:
00000E2A 33FC 0100 00A1 1100        		stopZ80
00000E32 0839 0000 00A1 1100 66F6   		waitZ80
00000E3C 7040                       		moveq	#$40,d0
00000E3E 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000E44 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000E4A 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00000E50 33FC 0000 00A1 1100        		startZ80
00000E58 4E75                       		rts	
00000E5A                            ; End of function JoypadInit
00000E5A                            
00000E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E5A                            
00000E5A                            
00000E5A                            VDPSetupGame:
00000E5A 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00000E60 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000E66 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00000E6C 7E12                       		moveq	#$12,d7
00000E6E                            
00000E6E                            	@setreg:
00000E6E 309A                       		move.w	(a2)+,(a0)
00000E70 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00000E74                            
00000E74 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00000E7A 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00000E7E 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00000E84 7000                       		moveq	#0,d0
00000E86 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00000E90 3E3C 003F                  		move.w	#$3F,d7
00000E94                            
00000E94                            	@clrCRAM:
00000E94 3280                       		move.w	d0,(a1)
00000E96 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
00000E9A                            
00000E9A 42B8 F616                  		clr.l	(v_scrposy_dup).w
00000E9E 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00000EA2 2F01                       		move.l	d1,-(sp)
00000EA4 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
00000EC6                            
00000EC6                            	@waitforDMA:
00000EC6 3215                       		move.w	(a5),d1
00000EC8 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00000ECC 66F8                       		bne.s	@waitforDMA	; if yes, branch
00000ECE                            
00000ECE 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00000ED2 221F                       		move.l	(sp)+,d1
00000ED4 4E75                       		rts	
00000ED6                            ; End of function VDPSetupGame
00000ED6                            
00000ED6                            ; ===========================================================================
00000ED6 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00000ED8 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00000EDA 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00000EDC 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00000EDE 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00000EE0 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00000EE2 8600                       		dc.w $8600		; unused
00000EE4 8700                       		dc.w $8700		; set background colour (palette entry 0)
00000EE6 8800                       		dc.w $8800		; unused
00000EE8 8900                       		dc.w $8900		; unused
00000EEA 8A00                       		dc.w $8A00		; default H.interrupt register
00000EEC 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00000EEE 8C81                       		dc.w $8C81		; 40-cell display mode
00000EF0 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00000EF2 8E00                       		dc.w $8E00		; unused
00000EF4 8F02                       		dc.w $8F02		; set VDP increment size
00000EF6 9001                       		dc.w $9001		; 64-cell hscroll size
00000EF8 9100                       		dc.w $9100		; window horizontal position
00000EFA 9200                       		dc.w $9200		; window vertical position
00000EFC                            
00000EFC                            ; ---------------------------------------------------------------------------
00000EFC                            ; Subroutine to	clear the screen
00000EFC                            ; ---------------------------------------------------------------------------
00000EFC                            
00000EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000EFC                            
00000EFC                            
00000EFC                            ClearScreen:
00000EFC 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
00000F1E                            
00000F1E                            	@wait1:
00000F1E 3215                       		move.w	(a5),d1
00000F20 0801 0001                  		btst	#1,d1
00000F24 66F8                       		bne.s	@wait1
00000F26                            
00000F26 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F2A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00000F4C                            
00000F4C                            	@wait2:
00000F4C 3215                       		move.w	(a5),d1
00000F4E 0801 0001                  		btst	#1,d1
00000F52 66F8                       		bne.s	@wait2
00000F54                            
00000F54 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F58 42B8 F616                  		clr.l	(v_scrposy_dup).w
00000F5C 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00000F60                            
00000F60 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00000F64 7000                       		moveq	#0,d0
00000F66 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
00000F6A                            
00000F6A                            	@clearsprites:
00000F6A 22C0                       		move.l	d0,(a1)+
00000F6C 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00000F70                            
00000F70 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00000F74 7000                       		moveq	#0,d0
00000F76 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
00000F7A                            
00000F7A                            	@clearhscroll:
00000F7A 22C0                       		move.l	d0,(a1)+
00000F7C 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00000F80 4E75                       		rts	
00000F82                            ; End of function ClearScreen
00000F82                            
00000F82                            ; ---------------------------------------------------------------------------
00000F82                            ; Subroutine to	load the sound driver
00000F82                            ; ---------------------------------------------------------------------------
00000F82                            
00000F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F82                            
00000F82                            
00000F82                            SoundDriverLoad:
00000F82 4E71                       		nop	
00000F84 33FC 0100 00A1 1100        		stopZ80
00000F8C 33FC 0100 00A1 1200        		resetZ80
00000F94 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00000F9A 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00000FA0 6100 0000                  		bsr.w	KosDec		; decompress
00000FA4 33FC 0000 00A1 1200        		resetZ80a
00000FAC 4E71                       		nop	
00000FAE 4E71                       		nop	
00000FB0 4E71                       		nop	
00000FB2 4E71                       		nop	
00000FB4 33FC 0100 00A1 1200        		resetZ80
00000FBC 33FC 0000 00A1 1100        		startZ80
00000FC4 4E75                       		rts	
00000FC6                            ; End of function SoundDriverLoad
00000FC6                            
00000FC6                            		include	"_incObj\sub PlaySound.asm"
00000FC6                            ; ---------------------------------------------------------------------------
00000FC6                            ; Subroutine to	play a music track
00000FC6                            
00000FC6                            ; input:
00000FC6                            ;	d0 = track to play
00000FC6                            ; ---------------------------------------------------------------------------
00000FC6                            
00000FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FC6                            
00000FC6                            
00000FC6                            PlaySound:
00000FC6 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
00000FCA 4E75                       		rts	
00000FCC                            ; End of function PlaySound
00000FCC                            
00000FCC                            ; ---------------------------------------------------------------------------
00000FCC                            ; Subroutine to	play a sound effect
00000FCC                            ; ---------------------------------------------------------------------------
00000FCC                            
00000FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FCC                            
00000FCC                            
00000FCC                            PlaySound_Special:
00000FCC 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00000FD0 4E75                       		rts	
00000FD2                            ; End of function PlaySound_Special
00000FD2                            
00000FD2                            ; ===========================================================================
00000FD2                            ; ---------------------------------------------------------------------------
00000FD2                            ; Unused sound/music subroutine
00000FD2                            ; ---------------------------------------------------------------------------
00000FD2                            
00000FD2                            PlaySound_Unused:
00000FD2 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
00000FD6 4E75                       		rts	
00000FD6 4E75                       		rts	
00000FD8                            		include	"_inc\PauseGame.asm"
00000FD8                            ; ---------------------------------------------------------------------------
00000FD8                            ; Subroutine to	pause the game
00000FD8                            ; ---------------------------------------------------------------------------
00000FD8                            
00000FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FD8                            
00000FD8                            
00000FD8                            PauseGame:
00000FD8 4E71                       		nop	
00000FDA 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00000FDE 6700                       		beq.s	Unpause		; if not, branch
00000FE0 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00000FE4 6600                       		bne.s	Pause_StopGame	; if yes, branch
00000FE6 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00000FEC 6700                       		beq.s	Pause_DoNothing	; if not, branch
00000FEE                            
00000FEE                            Pause_StopGame:
00000FEE 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00000FF4 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
00000FFA                            
00000FFA                            Pause_Loop:
00000FFA 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001000 6100 0000                  		bsr.w	WaitForVBla
00001004 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
00001008 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000100A 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001010 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001012 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
00001018 4E71                       		nop	
0000101A 6000                       		bra.s	Pause_EndMusic
0000101C                            ; ===========================================================================
0000101C                            
0000101C                            Pause_ChkBC:
0000101C 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
00001022 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001024 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0000102A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000102C                            
0000102C                            Pause_ChkStart:
0000102C 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001032 67C6                       		beq.s	Pause_Loop	; if not, branch
00001034                            
00001034                            Pause_EndMusic:
00001034 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000103A                            
0000103A                            Unpause:
0000103A 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001040                            
00001040                            Pause_DoNothing:
00001040 4E75                       		rts	
00001042                            ; ===========================================================================
00001042                            
00001042                            Pause_SlowMo:
00001042 31FC 0001 F63A             		move.w	#1,(f_pause).w
00001048 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
0000104E 4E75                       		rts	
00001050                            ; End of function PauseGame
00001050                            ; End of function PauseGame
00001050                            
00001050                            ; ---------------------------------------------------------------------------
00001050                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001050                            
00001050                            ; input:
00001050                            ;	a1 = tile map address
00001050                            ;	d0 = VRAM address
00001050                            ;	d1 = width (cells)
00001050                            ;	d2 = height (cells)
00001050                            ; ---------------------------------------------------------------------------
00001050                            
00001050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001050                            
00001050                            
00001050                            TilemapToVRAM:
00001050 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00001056 283C 0080 0000             		move.l	#$800000,d4
0000105C                            
0000105C                            	Tilemap_Line:
0000105C 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001060 3601                       		move.w	d1,d3
00001062                            
00001062                            	Tilemap_Cell:
00001062 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001064 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
00001068 D084                       		add.l	d4,d0		; goto next line
0000106A 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
0000106E 4E75                       		rts	
00001070                            ; End of function TilemapToVRAM
00001070                            
00001070                            		include	"_inc\Nemesis Decompression.asm"
00001070                            ; ==============================================================================
00001070                            ; ------------------------------------------------------------------------------
00001070                            ; Nemesis decompression routine
00001070                            ; ------------------------------------------------------------------------------
00001070                            ; Optimized by vladikcomper
00001070                            ; ------------------------------------------------------------------------------
00001070                             
00001070                            NemDec_RAM:
00001070 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001074 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001078 6000                           bra.s   NemDec_Main
0000107A                             
0000107A                            ; ------------------------------------------------------------------------------
0000107A                            NemDec:
0000107A 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
0000107E 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001084 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
00001088                             
00001088                            NemDec_Main:
00001088 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
0000108C 3418                           move.w  (a0)+,d2        ; get number of patterns
0000108E 6A00                           bpl.s   @0          ; are we in Mode 0?
00001090 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001094 E74A                       @0  lsl.w   #3,d2
00001096 3A42                           movea.w d2,a5
00001098 7607                           moveq   #7,d3
0000109A 7400                           moveq   #0,d2
0000109C 7800                           moveq   #0,d4
0000109E 6100 0000                      bsr.w   NemDec_BuildCodeTable
000010A2 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
000010A4 E145                           asl.w   #8,d5           ; shift up by a byte
000010A6 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
000010A8 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
000010AC 6100                           bsr.s   NemDec2
000010AE 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
000010B2 4E75                           rts
000010B4                             
000010B4                            ; ---------------------------------------------------------------------------
000010B4                            ; Part of the Nemesis decompressor, processes the actual compressed data
000010B4                            ; ---------------------------------------------------------------------------
000010B4                             
000010B4                            NemDec2:
000010B4 3E06                           move.w  d6,d7
000010B6 5147                           subq.w  #8,d7           ; get shift value
000010B8 3205                           move.w  d5,d1
000010BA EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
000010BC 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
000010C0 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
000010C2 0241 00FF                      andi.w  #$FF,d1
000010C6 D241                           add.w   d1,d1
000010C8 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000010CC 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000010D0 6400                           bcc.s   @0          ; if not, branch
000010D2 5046                           addq.w  #8,d6
000010D4 E145                           asl.w   #8,d5
000010D6 1A18                           move.b  (a0)+,d5        ; read next byte
000010D8 1231 1001                  @0  move.b  1(a1,d1.w),d1
000010DC 3001                           move.w  d1,d0
000010DE 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000010E2 0240 00F0                      andi.w  #$F0,d0
000010E6                             
000010E6                            NemDec_GetRepeatCount:
000010E6 E848                           lsr.w   #4,d0           ; get repeat count
000010E8                             
000010E8                            NemDec_WritePixel:
000010E8 E98C                           lsl.l   #4,d4           ; shift up by a nybble
000010EA 8801                           or.b    d1,d4           ; write pixel
000010EC 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000010F0 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000010F2                            ; ---------------------------------------------------------------------------
000010F2                             
000010F2                            NemPCD_NewRow:
000010F2 7800                           moveq   #0,d4           ; reset row
000010F4 7607                           moveq   #7,d3           ; reset nybble counter
000010F6                             
000010F6                            NemDec_WritePixelLoop:
000010F6 51C8 FFF0                      dbf d0,NemDec_WritePixel
000010FA 60B8                           bra.s   NemDec2
000010FC                            ; ---------------------------------------------------------------------------
000010FC                             
000010FC                            NemDec_InlineData:
000010FC 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000010FE 0C46 0009                      cmpi.w  #9,d6
00001102 6400                           bcc.s   @0
00001104 5046                           addq.w  #8,d6
00001106 E145                           asl.w   #8,d5
00001108 1A18                           move.b  (a0)+,d5
0000110A 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000110C 3205                           move.w  d5,d1
0000110E EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001110 3001                           move.w  d1,d0
00001112 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001116 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000111A 0C46 0009                      cmpi.w  #9,d6
0000111E 64C6                           bcc.s   NemDec_GetRepeatCount
00001120 5046                           addq.w  #8,d6
00001122 E145                           asl.w   #8,d5
00001124 1A18                           move.b  (a0)+,d5
00001126 60BE                           bra.s   NemDec_GetRepeatCount
00001128                             
00001128                            ; ---------------------------------------------------------------------------
00001128                            ; Subroutines to output decompressed entry
00001128                            ; Selected depending on current decompression mode
00001128                            ; ---------------------------------------------------------------------------
00001128                             
00001128                            NemPCD_WriteRowToVDP:
00001128                            loc_1502:
00001128 2884                           move.l  d4,(a4)         ; write 8-pixel row
0000112A 534D                           subq.w  #1,a5
0000112C 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
0000112E 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001130 4E75                           rts
00001132                            ; ---------------------------------------------------------------------------
00001132                             
00001132                            NemPCD_WriteRowToVDP_XOR:
00001132 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001134 2882                           move.l  d2,(a4)         ; and write the result
00001136 534D                           subq.w  #1,a5
00001138 380D                           move.w  a5,d4
0000113A 66B6                           bne.s   NemPCD_NewRow
0000113C 4E75                           rts
0000113E                            ; ---------------------------------------------------------------------------
0000113E                             
0000113E                            NemDec_WriteRowToRAM:
0000113E 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001140 534D                           subq.w  #1,a5
00001142 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001144 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
00001146 4E75                           rts
00001148                            ; ---------------------------------------------------------------------------
00001148                             
00001148                            NemDec_WriteRowToRAM_XOR:
00001148 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000114A 28C2                           move.l  d2,(a4)+        ; and write the result
0000114C 534D                           subq.w  #1,a5
0000114E 380D                           move.w  a5,d4
00001150 66A0                           bne.s   NemPCD_NewRow
00001152 4E75                           rts
00001154                             
00001154                            ; ---------------------------------------------------------------------------
00001154                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001154                            ; ---------------------------------------------------------------------------
00001154                             
00001154                            NemDec_BuildCodeTable:
00001154 1018                           move.b  (a0)+,d0        ; read first byte
00001156                             
00001156                            @ChkEnd:
00001156 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000115A 6600                           bne.s   @NewPalIndex        ; if not, branch
0000115C 4E75                           rts
0000115E                            ; ---------------------------------------------------------------------------
0000115E                             
0000115E                            @NewPalIndex:
0000115E 3E00                           move.w  d0,d7
00001160                             
00001160                            @ItemLoop:
00001160 1018                           move.b  (a0)+,d0        ; read next byte
00001162 6BF2                           bmi.s   @ChkEnd         ; ~~
00001164 1200                           move.b  d0,d1
00001166 0247 000F                      andi.w  #$F,d7          ; get palette index
0000116A 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
0000116E 8E41                           or.w    d1,d7           ; combine the two
00001170 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001174 1200                           move.b  d0,d1
00001176 E149                           lsl.w   #8,d1
00001178 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000117A 7208                           moveq   #8,d1
0000117C 9240                           sub.w   d0,d1           ; is the code 8 bits long?
0000117E 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001180 1018                           move.b  (a0)+,d0        ; get code
00001182 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001184 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001188 60D6                           bra.s   @ItemLoop       ; repeat
0000118A                            ; ---------------------------------------------------------------------------
0000118A                             
0000118A                            @ItemShortCode:
0000118A 1018                           move.b  (a0)+,d0        ; get code
0000118C E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
0000118E D040                           add.w   d0,d0           ; get index into code table
00001190 7A01                           moveq   #1,d5
00001192 E36D                           lsl.w   d1,d5
00001194 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
00001196 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000119A                             
0000119A                            @ItemShortCodeLoop:
0000119A 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
0000119C 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
000011A0 60BE                           bra.s   @ItemLoop
000011A0 60BE                           bra.s   @ItemLoop
000011A2                            
000011A2                              
000011A2                                pusho	; buffer local label symbol config
000011A2                                opt ws+  ; change local label symbol to '.'
000011A2                            
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; MACRO ResetDMAQueue
000011A2                            ; Clears the DMA queue, discarding all previously-queued DMAs.
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
000011A2                            ; Performs all queued DMA transfers and clears the DMA queue.
000011A2                            ;
000011A2                            ; Output:
000011A2                            ; 	a1,a5	trashed
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE InitDMAQueue
000011A2                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
000011A2                            ; Must be called before the queue is used, and the queue expects that only it
000011A2                            ; write to this region of RAM.
000011A2                            ;
000011A2                            ; Output:
000011A2                            ; 	a0,d0,d1	trashed
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
000011A2                            ; Queues a DMA with parameters given in registers.
000011A2                            ;
000011A2                            ; Options:
000011A2                            ; 	AssumeSourceAddressInBytes (default 1)
000011A2                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
000011A2                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
000011A2                            ; 	Use128kbSafeDMA (default 0)
000011A2                            ; 	UseVIntSafeDMA (default 0)
000011A2                            ; Input:
000011A2                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
000011A2                            ; 		set to 0)
000011A2                            ; 	d2	Destination address
000011A2                            ; 	d3	Transfer length (in words)
000011A2                            ; Output:
000011A2                            ; 	d0,d1,d2,d3,a1	trashed
000011A2                            ;
000011A2                            ; With the default settings, runs in:
000011A2                            ; * 48(11/0) cycles if queue is full (DMA discarded)
000011A2                            ; * 184(29/9) cycles otherwise (DMA queued)
000011A2                            ;
000011A2                            ; With Use128kbSafeDMA = 1, runs in:
000011A2                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
000011A2                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
000011A2                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
000011A2                            ;   fills the queue (second piece is discarded)
000011A2                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
000011A2                            ;   space for both pieces (both pieces queued)
000011A2                            ;
000011A2                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
000011A2                            ;
000011A2                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
000011A2                            ; but only if the DMA is not entirely discarded. However, all callers must be
000011A2                            ; edited to make sure the adresss given is correct.
000011A2                            ;
000011A2                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
000011A2                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
000011A2                            ; discarded. However, all callers must be edited to make sure the adresss given
000011A2                            ; in the correct form. You can use the dmaSource function for that.
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; MACRO QueueStaticDMA
000011A2                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
000011A2                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
000011A2                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
000011A2                            ;
000011A2                            ; Options:
000011A2                            ; 	UseVIntSafeDMA (default 0)
000011A2                            ; Input:
000011A2                            ; 	Source address (in bytes), transfer length (in bytes), destination address
000011A2                            ; Output:
000011A2                            ; 	d0,a1	trashed
000011A2                            ;
000011A2                            ; With the default settings, runs in:
000011A2                            ; * 32(7/0) cycles if queue is full (DMA discarded)
000011A2                            ; * 122(21/8) cycles otherwise (DMA queued)
000011A2                            ;
000011A2                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
000011A2                            ; ===========================================================================
000011A2                            ; option: AssumeSourceAddressInBytes
000011A2                            ;
000011A2                            ; This option makes the function work as a drop-in replacement of the original
000011A2                            ; functions. If you modify all callers to supply a position in words instead of
000011A2                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
000011A2 =00000001                  AssumeSourceAddressInBytes = 1
000011A2                            ; ===========================================================================
000011A2                            ; option: AssumeSourceAddressIsRAMSafe
000011A2                            ;
000011A2                            ; This option (which is disabled by default) makes the DMA queue assume that the
000011A2                            ; source address is given to the function in a way that makes them safe to use
000011A2                            ; with RAM sources. You need to edit all callers to ensure this.
000011A2                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
000011A2 =00000000                  AssumeSourceAddressIsRAMSafe = 0
000011A2                            ; ===========================================================================
000011A2                            ; option: UseRAMSourceSafeDMA
000011A2                            ;
000011A2                            ; This option (which is enabled by default) makes source addresses in RAM safe
000011A2                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
000011A2                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
000011A2 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
000011A2                            ; ===========================================================================
000011A2                            ; option: Use128kbSafeDMA
000011A2                            ;
000011A2                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
000011A2                            ; disabled by default because you can simply align the art in ROM and avoid the
000011A2                            ; issue altogether. It is here so that you have a high-performance routine to do
000011A2                            ; the job in situations where you can't align it in ROM.
000011A2 =00000001                  Use128kbSafeDMA = 1
000011A2                            ; ===========================================================================
000011A2                            ; option UseVIntSafeDMA
000011A2                            ;
000011A2                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
000011A2                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
000011A2                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
000011A2                            ; KosM decoder) prevent these by masking off interrupts before calling and then
000011A2                            ; restore interrupts after.
000011A2 =00000000                  UseVIntSafeDMA = 0
000011A2                            ; ===========================================================================
000011A2                            
000011A2                            
000011A2                            ; Convenience macros, for increased maintainability of the code.
000011A2 =00000027                  DMA = %100111
000011A2 =00000021                  VRAM = %100001
000011A2                            ; Like vdpComm, but starting from an address contained in a register
000011A2 =00000001                  vdpCommReg_defined = 1
000011A2                            vdpCommReg macro reg,type,rwd,clr
000011A2                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
000011A2                            	if ((\type&\rwd)&3)<>0
000011A2                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
000011A2                            	endif
000011A2                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
000011A2                            	swap	\reg								; Put all bits in proper places
000011A2                            	if \clr <> 0
000011A2                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
000011A2                            	endif
000011A2                            	if ((\type&\rwd)&$FC)=$20
000011A2                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
000011A2                            	elseif ((\type&\rwd)&$FC)<>0
000011A2                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
000011A2                            	endif
000011A2                            	endm
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000001                  intMacros_defined = 1
000011A2                            enableInts macro
000011A2                            	move	#$2300,sr
000011A2                            	endm
000011A2                            
000011A2                            disableInts macro
000011A2                            	move	#$2700,sr
000011A2                            	endm
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000001                  DMAEntry_defined = 1
000011A2                                    rsreset
000011A2 =00000000                  DMAEntry.Reg94:		rs.b	1
000011A2                            			  
000011A2 =00000001                  DMAEntry.Size:      rs.b    0
000011A2 =00000001                  DMAEntry.SizeH:		rs.b	1
000011A2 =00000002                  DMAEntry.Reg93:		rs.b	1
000011A2 =00000003                  DMAEntry.Source:    rs.b    0
000011A2 =00000003                  DMAEntry.SizeL:		rs.b	1
000011A2 =00000004                  DMAEntry.Reg97:		rs.b	1
000011A2 =00000005                  DMAEntry.SrcH:		rs.b	1
000011A2 =00000006                  DMAEntry.Reg96:		rs.b	1
000011A2 =00000007                  DMAEntry.SrcM:		rs.b	1
000011A2 =00000008                  DMAEntry.Reg95:		rs.b	1
000011A2 =00000009                  DMAEntry.SrcL:		rs.b	1
000011A2 =0000000A                  DMAEntry.Command:	rs.l	1
000011A2 =0000000E                  DMAEntry.len:   rs.w    0
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            						
000011A2                            										   
000011A2                            									   
000011A2                            	  
000011A2                            																			 
000011A2                            							  
000011A2 =00000001                  QueueStaticDMA_defined = 1
000011A2                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
000011A2                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
000011A2                            ; crosses a 128kB boundary, or has size 0.
000011A2                            QueueStaticDMA macro src,length,dest
000011A2                                local   len
000011A2                            		if ((\src)&1)<>0
000011A2                            			inform 3,"DMA queued from odd source \1!"
000011A2                            		endif
000011A2                            		if ((\length)&1)<>0
000011A2                            			inform 3,"DMA an odd number of bytes \2!"
000011A2                            		endif
000011A2                            		if (\length)=0
000011A2                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
000011A2                            		endif
000011A2                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
000011A2                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
000011A2                            		endif
000011A2                            	  
000011A2                            	if UseVIntSafeDMA=1
000011A2                            		move.w	sr,-(sp)										; Save current interrupt mask
000011A2                            		disableInts												; Mask off interrupts
000011A2                            	endif ; UseVIntSafeDMA=1
000011A2                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
000011A2                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
000011A2                            	beq.s	.done												; Return if there's no more room in the buffer
000011A2                            	len: = ((length>>1)&$7FFF)
000011A2                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
000011A2                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
000011A2                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
000011A2                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
000011A2                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
000011A2                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
000011A2                            .done:
000011A2                            	if UseVIntSafeDMA=1
000011A2                            		move.w	(sp)+,sr										; Restore interrupts to previous state
000011A2                            	endif ;UseVIntSafeDMA=1
000011A2                            	endm
000011A2                            
000011A2                                
000011A2                            
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ResetDMAQueue: macro
000011A2                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
000011A2                            	endm
000011A2                            ; ===========================================================================
000011A2                            
000011A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000011A2                            
000011A2                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
000011A2                            Add_To_DMA_Queue:
000011A2                            QueueDMATransfer:
000011A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000011A6 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
000011AA 6700                       	beq.s	.done											; Return if there's no more room in the buffer
000011AC                            
000011AC E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
000011AE 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
000011B2 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
000011B6 7000                       	moveq	#0,d0											; We need a zero on d0
000011B8                            
000011B8                            		; Detect if transfer crosses 128KB boundary
000011B8                            		; Using sub+sub instead of move+add handles the following edge cases:
000011B8                            		; (1) d3.w = 0 => 128kB transfer
000011B8                            		;   (a) d1.w = 0 => no carry, don't split the DMA
000011B8                            		;   (b) d1.w != 0 => carry, need to split the DMA
000011B8                            		; (2) d3.w != 0
000011B8                            		;   (a) if there is carry on d1.w + d3.w
000011B8                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
000011B8                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
000011B8                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
000011B8                            		; The reason this works is that carry on d1.w + d3.w means that
000011B8                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
000011B8                            		; d1.w + d3.w > $10000.
000011B8 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
000011BA 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
000011BC 6500                       		bcs.s	.doubletransfer								; Branch if yes
000011BE                            	; It does not cross a 128kB boundary. So just finish writing it.
000011BE 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
000011C2                            
000011C2                            .finishxfer:
000011C2                            	; Command to specify destination address and begin DMA
000011C2 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000011CE 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000011D2 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000011D4 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000011D8                            
000011D8                            .done:
000011D8 4E75                       	rts
000011DA                            ; ---------------------------------------------------------------------------
000011DA                            .doubletransfer:
000011DA                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000011DA D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000011DC 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000011E0                            
000011E0 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000011E4 67DC                       		beq.s	.finishxfer									; Branch if not
000011E6                            
000011E6                            		; Get second transfer's source, destination, and length
000011E6 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000011E8 D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000011EA D040                       		add.w	d0,d0										; Convert to number of bytes
000011EC D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000011EE                            
000011EE                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000011EE                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000011FC 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001200                            
00001200                            		; Do second transfer
00001200 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001204 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
00001208                            
00001208                            		; Command to specify destination address and begin DMA
00001212 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
00001216 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
00001218                            
00001218 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
0000121C 4E75                       		rts
0000121E                            ; End of function QueueDMATransfer
0000121E                            ; ===========================================================================
0000121E                            
0000121E                            ; ---------------------------------------------------------------------------
0000121E                            ; Subroutine for issuing all VDP commands that were queued
0000121E                            ; (by earlier calls to QueueDMATransfer)
0000121E                            ; Resets the queue when it's done
0000121E                            ; ---------------------------------------------------------------------------
0000121E                            
0000121E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000121E                            
0000121E                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
0000121E                            Process_DMA_Queue:
0000121E                            ProcessDMAQueue:
0000121E 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001222 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
00001226                            ; ---------------------------------------------------------------------------
00001226                            .jump_table:
00001226 4E75                       	rts
00001228                            	rept 6
00001228                            		trap	#0											; Just in case
00001228 4E40 4E40 4E40 4E40 4E40+  	endr
00001234                            ; ---------------------------------------------------------------------------
00001234 =00000001                      c: = 1
00001234                            	rept QueueSlotCount
00001234                            		lea	(vdp_control_port).l,a5
00001234                            		lea	(VDP_Command_Buffer).w,a1
00001234                            		if c<>QueueSlotCount
00001234                            			bra.w	.jump0 - c*8
00001234                            		endif
00001234                                c: = c + 1
0000132C                            ; ---------------------------------------------------------------------------
0000132C                            	rept QueueSlotCount
0000132C                            		move.l	(a1)+,(a5)									; Transfer length
0000132C                            		move.l	(a1)+,(a5)									; Source address high
0000132C                            		move.l	(a1)+,(a5)									; Source address low + destination high
0000132C                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
0000132C 2A99 2A99 2A99 3A99 2A99+  	endr
000013BC                            
000013BC                            .jump0:
000013BC 31FC C800 C8FC             	ResetDMAQueue
000013C2 4E75                       	rts
000013C4                            ; End of function ProcessDMAQueue
000013C4                            ; ===========================================================================
000013C4                            
000013C4                            ; ---------------------------------------------------------------------------
000013C4                            ; Subroutine for initializing the DMA queue.
000013C4                            ; ---------------------------------------------------------------------------
000013C4                            
000013C4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000013C4                            
000013C4                            InitDMAQueue:
000013C4 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
000013C8 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
000013CA 223C 9397 9695             	move.l	#$93979695,d1
000013D0 =00000000                      c: = 0
000013D0                            	rept QueueSlotCount
000013D0                            		move.b	d0,c + DMAEntry.Reg94(a0)
000013D0                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000013D0                                c: = c + DMAEntry.len
000013D0 1080 03C8 0002 1140 000E+  	endr
0000145E                            
0000145E 31FC C800 C8FC             	ResetDMAQueue
00001464 4E75                       	rts
00001466                            ; End of function ProcessDMAQueue
00001466                            ; ===========================================================================
00001466                            
00001466                            
00001466                                popo	; buffer local label symbol config
00001466                            
00001466                            
00001466                            ; ---------------------------------------------------------------------------
00001466                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
00001466                            ; ---------------------------------------------------------------------------
00001466                            
00001466                            ; ARGUMENTS
00001466                            ; d0 = index of PLC list
00001466                            ; ---------------------------------------------------------------------------
00001466                            
00001466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001466                            
00001466                            ; LoadPLC:
00001466                            AddPLC:
00001466 48E7 0060                  		movem.l	a1-a2,-(sp)
0000146A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001470 D040                       		add.w	d0,d0
00001472 3031 0000                  		move.w	(a1,d0.w),d0
00001476 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000147A 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
0000147E                            
0000147E                            	@findspace:
0000147E 4A92                       		tst.l	(a2)		; is space available in RAM?
00001480 6700                       		beq.s	@copytoRAM	; if yes, branch
00001482 5C4A                       		addq.w	#6,a2		; if not, try next space
00001484 60F8                       		bra.s	@findspace
00001486                            ; ===========================================================================
00001486                            
00001486                            @copytoRAM:
00001486 3019                       		move.w	(a1)+,d0	; get length of PLC
00001488 6B00                       		bmi.s	@skip
0000148A                            
0000148A                            	@loop:
0000148A 24D9                       		move.l	(a1)+,(a2)+
0000148C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000148E 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001492                            
00001492                            	@skip:
00001492 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
00001496 4E75                       		rts	
00001498                            ; End of function AddPLC
00001498                            
00001498                            
00001498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001498                            ; Queue pattern load requests, but clear the PLQ first
00001498                            
00001498                            ; ARGUMENTS
00001498                            ; d0 = index of PLC list (see ArtLoadCues)
00001498                            
00001498                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
00001498                            ;	  (or hacker) is responsible for making sure that no more than
00001498                            ;	  16 load requests are copied into the buffer.
00001498                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
00001498                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
00001498                            
00001498                            ; LoadPLC2:
00001498                            NewPLC:
00001498 48E7 0060                  		movem.l	a1-a2,-(sp)
0000149C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000014A2 D040                       		add.w	d0,d0
000014A4 3031 0000                  		move.w	(a1,d0.w),d0
000014A8 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
000014AC 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
000014AE 45F8 F680                  		lea	(v_plc_buffer).w,a2
000014B2 3019                       		move.w	(a1)+,d0	; get length of PLC
000014B4 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
000014B6                            
000014B6                            	@loop:
000014B6 24D9                       		move.l	(a1)+,(a2)+
000014B8 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000014BA 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
000014BE                            
000014BE                            	@skip:
000014BE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014C2 4E75                       		rts	
000014C4                            ; End of function NewPLC
000014C4                            
000014C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014C4                            
000014C4                            ; ---------------------------------------------------------------------------
000014C4                            ; Subroutine to	clear the pattern load cues
000014C4                            ; ---------------------------------------------------------------------------
000014C4                            
000014C4                            ; Clear the pattern load queue ($FFF680 - $FFF700)
000014C4                            
000014C4                            
000014C4                            ClearPLC:
000014C4 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
000014C8 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
000014CA                            
000014CA                            	@loop:
000014CA 429A                       		clr.l	(a2)+
000014CC 51C8 FFFC                  		dbf	d0,@loop
000014D0 4E75                       		rts	
000014D2                            ; End of function ClearPLC
000014D2                            
000014D2                            ; ---------------------------------------------------------------------------
000014D2                            ; Subroutine to	use graphics listed in a pattern load cue
000014D2                            ; ---------------------------------------------------------------------------
000014D2                            
000014D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014D2                            
000014D2                            
000014D2                            RunPLC:
000014D2 4AB8 F680                  		tst.l	(v_plc_buffer).w
000014D6 6700                       		beq.s	Rplc_Exit
000014D8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000014DC 6600                       		bne.s	Rplc_Exit
000014DE 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000014E2 47F9 0000 1128             		lea	(NemPCD_WriteRowToVDP).l,a3
000014E8 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000014EC 3418                       		move.w	(a0)+,d2
000014EE 6A00                       		bpl.s	loc_160E
000014F0 D6FC 000A                  		adda.w	#$A,a3
000014F4                            
000014F4                            loc_160E:
000014F4 0242 7FFF                  		andi.w	#$7FFF,d2
000014F8 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000014FC 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001500 1A18                       		move.b	(a0)+,d5
00001502 E145                       		asl.w	#8,d5
00001504 1A18                       		move.b	(a0)+,d5
00001506 7C10                       		moveq	#$10,d6
00001508 7000                       		moveq	#0,d0
0000150A 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000150E 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001512 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001516 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000151A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000151E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001522 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001526                            
00001526                            Rplc_Exit:
00001526 4E75                       		rts	
00001528                            ; End of function RunPLC
00001528                            
00001528                            
00001528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001528                            
00001528                            
00001528                            sub_1642:
00001528 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000152C 6700 0000                  		beq.w	locret_16DA
00001530 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001536 7000                       		moveq	#0,d0
00001538 3038 F684                  		move.w	($FFFFF684).w,d0
0000153C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001542 6000                       		bra.s	loc_1676
00001544                            ; End of function sub_1642
00001544                            
00001544                            
00001544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001544                            
00001544                            
00001544                            ; sub_165E:
00001544                            ProcessDPLC2:
00001544 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001548 6700                       		beq.s	locret_16DA
0000154A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001550 7000                       		moveq	#0,d0
00001552 3038 F684                  		move.w	($FFFFF684).w,d0
00001556 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000155C                            
0000155C                            loc_1676:
0000155C 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001562 E588                       		lsl.l	#2,d0
00001564 E448                       		lsr.w	#2,d0
00001566 0040 4000                  		ori.w	#$4000,d0
0000156A 4840                       		swap	d0
0000156C 2880                       		move.l	d0,(a4)
0000156E 594C                       		subq.w	#4,a4
00001570 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001574 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
00001578 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000157C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001580 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001584 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001588 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000158C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001590                            
00001590                            loc_16AA:
00001590 3A7C 0008                  		movea.w	#8,a5
00001594 6100 FB5C                  		bsr.w	NemPCD_NewRow
00001598 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
0000159C 6700                       		beq.s	loc_16DC
0000159E 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000015A2 66EC                       		bne.s	loc_16AA
000015A4 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000015A8 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000015AC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015B0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015B4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015B8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015BC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015C0                            
000015C0                            locret_16DA:
000015C0 4E75                       		rts	
000015C2                            ; ===========================================================================
000015C2                            
000015C2                            loc_16DC:
000015C2 41F8 F680                  		lea	(v_plc_buffer).w,a0
000015C6 7015                       		moveq	#$15,d0
000015C8                            
000015C8                            loc_16E2:
000015C8 20E8 0006                  		move.l	6(a0),(a0)+
000015CC 51C8 FFFA                  		dbf	d0,loc_16E2
000015D0 4E75                       		rts	
000015D2                            ; End of function ProcessDPLC2
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	execute	the pattern load cue
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            QuickPLC:
000015D2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015D8 D040                       		add.w	d0,d0
000015DA 3031 0000                  		move.w	(a1,d0.w),d0
000015DE 43F1 0000                  		lea	(a1,d0.w),a1
000015E2 3219                       		move.w	(a1)+,d1	; get length of PLC
000015E4                            
000015E4                            	Qplc_Loop:
000015E4 2059                       		movea.l	(a1)+,a0	; get art pointer
000015E6 7000                       		moveq	#0,d0
000015E8 3019                       		move.w	(a1)+,d0	; get VRAM address
000015EA E588                       		lsl.l	#2,d0
000015EC E448                       		lsr.w	#2,d0
000015EE 0040 4000                  		ori.w	#$4000,d0
000015F2 4840                       		swap	d0
000015F4 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000015FA 6100 FA7E                  		bsr.w	NemDec		; decompress
000015FE 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001602 4E75                       		rts	
00001604                            ; End of function QuickPLC
00001604                            
00001604                            		include	"_inc\Enigma Decompression.asm"
00001604                            ; ---------------------------------------------------------------------------
00001604                            ; Enigma decompression algorithm
00001604                            
00001604                            ; input:
00001604                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001604                            ;	a0 = source address
00001604                            ;	a1 = destination address
00001604                            
00001604                            ; usage:
00001604                            ;	lea	(source).l,a0
00001604                            ;	lea	(destination).l,a1
00001604                            ;	move.w	#arttile,d0
00001604                            ;	bsr.w	EniDec
00001604                            
00001604                            ; See http://www.segaretro.org/Enigma_compression for format description
00001604                            ; ---------------------------------------------------------------------------
00001604                            
00001604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001604                            
00001604                            
00001604                            EniDec:
00001604 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001608 3640                       		movea.w	d0,a3		; store starting art tile
0000160A 1018                       		move.b	(a0)+,d0
0000160C 4880                       		ext.w	d0
0000160E 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001610 1818                       		move.b	(a0)+,d4
00001612 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001614 3458                       		movea.w	(a0)+,a2
00001616 D4CB                       		adda.w	a3,a2		; store incremental copy word
00001618 3858                       		movea.w	(a0)+,a4
0000161A D8CB                       		adda.w	a3,a4		; store literal copy word
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5	; get first word in format list
00001622 7C10                       		moveq	#16,d6		; initial shift value
00001624                            ; loc_173E:
00001624                            Eni_Loop:
00001624 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
00001626 3E06                       		move.w	d6,d7
00001628 9E40                       		sub.w	d0,d7
0000162A 3205                       		move.w	d5,d1
0000162C EE69                       		lsr.w	d7,d1
0000162E 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001632 3401                       		move.w	d1,d2		; and copy it
00001634 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
00001638 6400                       		bhs.s	@sevenbitentry
0000163A 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
0000163C E24A                       		lsr.w	#1,d2
0000163E                            ; loc_1758:
0000163E                            @sevenbitentry:
0000163E 6100 0000                  		bsr.w	EniDec_FetchByte
00001642 0242 000F                  		andi.w	#$F,d2		; get repeat count
00001646 E849                       		lsr.w	#4,d1
00001648 D241                       		add.w	d1,d1
0000164A 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
0000164E                            ; End of function EniDec
0000164E                            
0000164E                            ; ===========================================================================
0000164E                            ; loc_1768:
0000164E                            EniDec_00:
0000164E 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001650 524A                       		addq.w	#1,a2		; increment it
00001652 51CA FFFA                  		dbf	d2,@loop	; repeat
00001656 60CC                       		bra.s	Eni_Loop
00001658                            ; ===========================================================================
00001658                            ; loc_1772:
00001658                            EniDec_01:
00001658 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000165A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000165E 60C4                       		bra.s	Eni_Loop
00001660                            ; ===========================================================================
00001660                            ; loc_177A:
00001660                            EniDec_100:
00001660 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001664                            ; loc_177E:
00001664 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001666 51CA FFFC                  		dbf	d2,@loop	; repeat
0000166A                            
0000166A 60B8                       		bra.s	Eni_Loop
0000166C                            ; ===========================================================================
0000166C                            ; loc_1786:
0000166C                            EniDec_101:
0000166C 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001670                            ; loc_178A:
00001670 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001672 5241                       		addq.w	#1,d1		; increment
00001674 51CA FFFA                  		dbf	d2,@loop	; repeat
00001678                            
00001678 60AA                       		bra.s	Eni_Loop
0000167A                            ; ===========================================================================
0000167A                            ; loc_1794:
0000167A                            EniDec_110:
0000167A 6100 0000                  		bsr.w	EniDec_FetchInlineValue
0000167E                            ; loc_1798:
0000167E 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001680 5341                       		subq.w	#1,d1		; decrement
00001682 51CA FFFA                  		dbf	d2,@loop	; repeat
00001686                            
00001686 609C                       		bra.s	Eni_Loop
00001688                            ; ===========================================================================
00001688                            ; loc_17A2:
00001688                            EniDec_111:
00001688 0C42 000F                  		cmpi.w	#$F,d2
0000168C 6700                       		beq.s	EniDec_Done
0000168E                            ; loc_17A8:
0000168E 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001692 32C1                       		move.w	d1,(a1)+	; copy it
00001694 51CA FFF8                  		dbf	d2,@loop	; and repeat
00001698                            
00001698 608A                       		bra.s	Eni_Loop
0000169A                            ; ===========================================================================
0000169A                            ; loc_17B4:
0000169A                            EniDec_Index:
0000169A 60B2                       		bra.s	EniDec_00
0000169C 60B0                       		bra.s	EniDec_00
0000169E 60B8                       		bra.s	EniDec_01
000016A0 60B6                       		bra.s	EniDec_01
000016A2 60BC                       		bra.s	EniDec_100
000016A4 60C6                       		bra.s	EniDec_101
000016A6 60D2                       		bra.s	EniDec_110
000016A8 60DE                       		bra.s	EniDec_111
000016AA                            ; ===========================================================================
000016AA                            ; loc_17C4:
000016AA                            EniDec_Done:
000016AA 5348                       		subq.w	#1,a0		; go back by one byte
000016AC 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
000016B0 6600                       		bne.s	@notnewbyte	; if not, branch
000016B2 5348                       		subq.w	#1,a0		; and another one if needed
000016B4                            ; loc_17CE:
000016B4                            @notnewbyte:
000016B4 3008                       		move.w	a0,d0
000016B6 E248                       		lsr.w	#1,d0		; are we on an odd byte?
000016B8 6400                       		bcc.s	@evenbyte	; if not, branch
000016BA 5248                       		addq.w	#1,a0		; ensure we're on an even byte
000016BC                            ; loc_17D6:
000016BC                            @evenbyte:
000016BC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016C0 4E75                       		rts	
000016C2                            
000016C2                            ; ---------------------------------------------------------------------------
000016C2                            ; Part of the Enigma decompressor
000016C2                            ; Fetches an inline copy value and stores it in d1
000016C2                            ; ---------------------------------------------------------------------------
000016C2                            
000016C2                            ; =============== S U B R O U T I N E =======================================
000016C2                            
000016C2                            ; loc_17DC:
000016C2                            EniDec_FetchInlineValue:
000016C2 360B                       		move.w	a3,d3		; copy starting art tile
000016C4 1204                       		move.b	d4,d1		; copy PCCVH bitfield
000016C6 D201                       		add.b	d1,d1		; is the priority bit set?
000016C8 6400                       		bcc.s	@skippriority	; if not, branch
000016CA 5346                       		subq.w	#1,d6
000016CC 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000016CE 6700                       		beq.s	@skippriority	; if not, branch
000016D0 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000016D4                            ; loc_17EE:
000016D4                            @skippriority:
000016D4 D201                       		add.b	d1,d1		; is the high palette line bit set?
000016D6 6400                       		bcc.s	@skiphighpal	; if not, branch
000016D8 5346                       		subq.w	#1,d6
000016DA 0D05                       		btst	d6,d5
000016DC 6700                       		beq.s	@skiphighpal
000016DE 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000016E2                            ; loc_17FC:
000016E2                            @skiphighpal:
000016E2 D201                       		add.b	d1,d1		; is the low palette line bit set?
000016E4 6400                       		bcc.s	@skiplowpal	; if not, branch
000016E6 5346                       		subq.w	#1,d6
000016E8 0D05                       		btst	d6,d5
000016EA 6700                       		beq.s	@skiplowpal
000016EC 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000016F0                            ; loc_180A:
000016F0                            @skiplowpal:
000016F0 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000016F2 6400                       		bcc.s	@skipyflip	; if not, branch
000016F4 5346                       		subq.w	#1,d6
000016F6 0D05                       		btst	d6,d5
000016F8 6700                       		beq.s	@skipyflip
000016FA 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000016FE                            ; loc_1818:
000016FE                            @skipyflip:
000016FE D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001700 6400                       		bcc.s	@skipxflip	; if not, branch
00001702 5346                       		subq.w	#1,d6
00001704 0D05                       		btst	d6,d5
00001706 6700                       		beq.s	@skipxflip
00001708 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
0000170C                            ; loc_1826:
0000170C                            @skipxflip:
0000170C 3205                       		move.w	d5,d1
0000170E 3E06                       		move.w	d6,d7
00001710 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001712 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001714 3C07                       		move.w	d7,d6
00001716 0646 0010                  		addi.w	#16,d6
0000171A 4447                       		neg.w	d7		; calculate bit deficit
0000171C EF69                       		lsl.w	d7,d1		; and make space for that many bits
0000171E 1A10                       		move.b	(a0),d5		; get next byte
00001720 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
00001722 DE47                       		add.w	d7,d7
00001724 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
00001728 D245                       		add.w	d5,d1		; combine upper bits with lower bits
0000172A                            ; loc_1844:
0000172A                            @maskvalue:
0000172A 300D                       		move.w	a5,d0		; get length in bits of inline copy value
0000172C D040                       		add.w	d0,d0
0000172E C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001732 D243                       		add.w	d3,d1		; add starting art tile
00001734 1A18                       		move.b	(a0)+,d5
00001736 E14D                       		lsl.w	#8,d5
00001738 1A18                       		move.b	(a0)+,d5	; get next word
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            ; loc_1856:
0000173C                            @enoughbits:
0000173C 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
0000173E EE69                       		lsr.w	d7,d1	; get inline copy value
00001740 300D                       		move.w	a5,d0
00001742 D040                       		add.w	d0,d0
00001744 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001748 D243                       		add.w	d3,d1	; add starting art tile
0000174A 300D                       		move.w	a5,d0
0000174C 6000                       		bra.s	EniDec_FetchByte
0000174E                            ; ===========================================================================
0000174E                            ; loc_1868:
0000174E                            @justenough:
0000174E 7C10                       		moveq	#16,d6	; reset shift value
00001750 60D8                       		bra.s	@maskvalue
00001752                            ; ===========================================================================
00001752                            ; word_186C:
00001752                            EniDec_Masks:
00001752 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
0000175A 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001762 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
0000176A 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001772                            
00001772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001772                            
00001772                            ; sub_188C:
00001772                            EniDec_FetchByte:
00001772 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001774 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001778 6400                       		bhs.s	@locret	; if not, branch
0000177A 5046                       		addq.w	#8,d6
0000177C E145                       		asl.w	#8,d5
0000177E 1A18                       		move.b	(a0)+,d5
00001780                            @locret:
00001780 4E75                       		rts	
00001782                            ; End of function EniDec_FetchByte
00001782                            ; End of function EniDec_FetchByte
00001782                            		include	"_inc\Kosinski Decompression.asm"
00001782                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001782                            ; ---------------------------------------------------------------------------
00001782                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001782                            ; (sometimes called KOZINSKI decompression)
00001782                            ;
00001782                            ; ARGUMENTS:
00001782                            ; a0 = source address
00001782                            ; a1 = destination address
00001782                            ;
00001782                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001782                            ; New faster version by written by vladikcomper, with additional improvements by
00001782                            ; MarkeyJester and Flamewing
00001782                            ; Converted to ASM68K by Beta Filter.
00001782                            ; ---------------------------------------------------------------------------
00001782 =00000001                  Kos_UseLUT: equ 1
00001782 =00000003                  Kos_LoopUnroll: equ 3
00001782 =00000001                  Kos_ExtremeUnrolling: equ 1
00001782                            
00001782                            Kos_RunBitStream macro
00001782                                dbra    d2,@skip\@
00001782                                moveq   #7,d2                   ; Set repeat count to 8.
00001782                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001782                                not.w   d3                      ; Have all 16 bits been used up?
00001782                                bne.s   @skip\@                   ; Branch if not.
00001782                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001782                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001782                                if Kos_UseLUT=1
00001782                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001782                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001782                                endif
00001782                            @skip\@
00001782                                endm
00001782                            
00001782                            Kos_ReadBit macro
00001782                                if Kos_UseLUT=1
00001782                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001782                                else
00001782                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001782                                endif
00001782                                endm
00001782                            ; ===========================================================================
00001782                            ; KozDec@193A:
00001782                            KosDec:
00001782 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001784 7000                           moveq   #0,d0
00001786 7200                           moveq   #0,d1
00001788 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
0000178C 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
0000178E 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001790 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001794 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001798 7407                           moveq   #7,d2                   ; Set repeat count to 8.
0000179A 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
0000179C 6000                           bra.s   @FetchNewCode
0000179E                            ; ---------------------------------------------------------------------------
0000179E                            @FetchCodeLoop:
0000179E                                ; Code 1 (Uncompressed byte).
000017B6 12D8                           move.b  (a0)+,(a1)+
000017B8                            
000017B8                            @FetchNewCode:
000017BA 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
000017BC                            
000017BC                                ; Codes 00 and 01.
000017BC 7AFF                           moveq   #-1,d5
000017BE 4BD1                           lea (a1),a5
000017DA 6500 0000                      bcs.w   @Code_01
000017DE                            
000017DE                                ; Code 00 (Dictionary ref. short).
000017F8 6500                           bcs.s   @Copy45
00001814 6500                           bcs.s   @Copy3
0000182E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001830 DAC5                           adda.w  d5,a5
00001832 12DD                           move.b  (a5)+,(a1)+
00001834 12DD                           move.b  (a5)+,(a1)+
00001836 6080                           bra.s   @FetchNewCode
00001838                            ; ---------------------------------------------------------------------------
00001838                            @Copy3:
00001850 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001852 DAC5                           adda.w  d5,a5
00001854 12DD                           move.b  (a5)+,(a1)+
00001856 12DD                           move.b  (a5)+,(a1)+
00001858 12DD                           move.b  (a5)+,(a1)+
0000185A 6000 FF5C                      bra.w   @FetchNewCode
0000185E                            ; ---------------------------------------------------------------------------
0000185E                            @Copy45:
00001878 6500                           bcs.s   @Copy5
00001892 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001894 DAC5                           adda.w  d5,a5
00001896 12DD                           move.b  (a5)+,(a1)+
00001898 12DD                           move.b  (a5)+,(a1)+
0000189A 12DD                           move.b  (a5)+,(a1)+
0000189C 12DD                           move.b  (a5)+,(a1)+
0000189E 6000 FF18                      bra.w   @FetchNewCode
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            @Copy5:
000018BA 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
000018BC DAC5                           adda.w  d5,a5
000018BE 12DD                           move.b  (a5)+,(a1)+
000018C0 12DD                           move.b  (a5)+,(a1)+
000018C2 12DD                           move.b  (a5)+,(a1)+
000018C4 12DD                           move.b  (a5)+,(a1)+
000018C6 12DD                           move.b  (a5)+,(a1)+
000018C8 6000 FEEE                      bra.w   @FetchNewCode
000018CC                            ; ---------------------------------------------------------------------------
000018CC                            ; ---------------------------------------------------------------------------
000018CC                            @Code_01:
000018CC 7800                           moveq   #0,d4                   ; d4 will contain copy count.
000018CE                                ; Code 01 (Dictionary ref. long / special).
000018E6 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
000018E8 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
000018EA 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
000018EC EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
000018EE 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
000018F0 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
000018F2 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
000018F4                            
000018F4                                ; special mode (extended counter)
000018F4 1818                           move.b  (a0)+,d4                ; Read cnt
000018F6 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
000018F8 5304                           subq.b  #1,d4
000018FA 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
000018FE                            
000018FE DAC5                           adda.w  d5,a5
00001900 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001902 3C04                           move.w  d4,d6
00001904 4646                           not.w   d6
00001906 CC47                           and.w   d7,d6
00001908 DC46                           add.w   d6,d6
0000190A E64C                           lsr.w   #Kos_LoopUnroll,d4
0000190C 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001910                            ; ---------------------------------------------------------------------------
00001910                            @largecopy:
00001910                                rept (1<<Kos_LoopUnroll)
00001910                                move.b  (a5)+,(a1)+
00001910 12DD 12DD 12DD 12DD 12DD+      endr
00001920 51CC FFEE                      dbra    d4,@largecopy
00001924 6000 FE92                      bra.w   @FetchNewCode
00001928                            ; ---------------------------------------------------------------------------
00001928                            @StreamCopy:
00001928 DAC5                           adda.w  d5,a5
0000192A 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
0000192C BF44                           eor.w   d7,d4
0000192E D844                           add.w   d4,d4
00001930 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001934                            ; ---------------------------------------------------------------------------
00001934                            @mediumcopy:
00001934                                rept 8
00001934                                move.b  (a5)+,(a1)+
00001934 12DD 12DD 12DD 12DD 12DD+      endr
00001944 6000 FE72                      bra.w   @FetchNewCode
00001948                            ; ---------------------------------------------------------------------------
00001948                            @Quit:
00001948 4E75                           rts                             ; End of function KosDec.
0000194A                            ; ===========================================================================
0000194A                            KosDec_ByteMap:
0000194A 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000195A 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000196A 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000197A 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
0000198A 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
0000199A 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000019AA 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000019BA 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000019CA 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000019DA 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
000019EA 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
000019FA 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A0A 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A1A 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001A2A 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001A3A 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001A4A                            ; ===========================================================================
00001A4A                            ; ===========================================================================
00001A4A                            
00001A4A                            		include	"_inc\PaletteCycle.asm"
00001A4A                            ; ---------------------------------------------------------------------------
00001A4A                            ; Palette cycling routine loading subroutine
00001A4A                            ; ---------------------------------------------------------------------------
00001A4A                            
00001A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A4A                            
00001A4A                            
00001A4A                            PaletteCycle:
00001A4A 7400                       		moveq	#0,d2
00001A4C 7000                       		moveq	#0,d0
00001A4E 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001A52 D040                       		add.w	d0,d0
00001A54 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001A58 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001A5C                            ; End of function PaletteCycle
00001A5C                            
00001A5C                            ; ===========================================================================
00001A5C                            ; ---------------------------------------------------------------------------
00001A5C                            ; Palette cycling routines
00001A5C                            ; ---------------------------------------------------------------------------
00001A5C 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001A5E 0000                       		dc.w PCycle_LZ-PCycle_Index
00001A60 0000                       		dc.w PCycle_MZ-PCycle_Index
00001A62 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001A64 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001A66 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001A68 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001A6A                            
00001A6A                            
00001A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A6A                            
00001A6A                            
00001A6A                            PCycle_Title:
00001A6A 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001A70 6000                       		bra.s	PCycGHZ_Go
00001A72                            ; ===========================================================================
00001A72                            
00001A72                            PCycle_GHZ:
00001A72 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001A78                            
00001A78                            PCycGHZ_Go:
00001A78 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001A7C 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001A7E                            
00001A7E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001A84 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001A88 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001A8C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001A90 E748                       		lsl.w	#3,d0
00001A92 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001A96 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A9A 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001A9E                            
00001A9E                            PCycGHZ_Skip:
00001A9E 4E75                       		rts	
00001AA0                            ; End of function PCycle_GHZ
00001AA0                            
00001AA0                            
00001AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA0                            
00001AA0                            
00001AA0                            PCycle_LZ:
00001AA0                            ; Waterfalls
00001AA0 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001AA4 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001AA6                            
00001AA6 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001AAC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001AB0 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001AB4 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001AB8 E748                       		lsl.w	#3,d0
00001ABA 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001AC0 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001AC6 6600                       		bne.s	PCycLZ_NotSBZ3
00001AC8 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001ACE                            
00001ACE                            	PCycLZ_NotSBZ3:
00001ACE 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001AD2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AD6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001ADA 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001ADE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AE6                            
00001AE6                            PCycLZ_Skip1:
00001AE6                            ; Conveyor belts
00001AE6                            		;move.w	(v_framecount).w,d0
00001AE6                            		;andi.w	#7,d0
00001AE6                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001AE6                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001AE6                            		;moveq	#1,d1
00001AE6                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001AE6                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001AE6                            		;neg.w	d1
00001AE6                            
00001AE6                            	;PCycLZ_NoRev:
00001AE6                            		;move.w	(v_pal_buffer).w,d0
00001AE6                            		;andi.w	#3,d0
00001AE6                            		;add.w	d1,d0
00001AE6                            		;cmpi.w	#3,d0
00001AE6                            		;bcs.s	loc_1A0A
00001AE6                            		;move.w	d0,d1
00001AE6                            		;moveq	#0,d0
00001AE6                            		;tst.w	d1
00001AE6                            		;bpl.s	loc_1A0A
00001AE6                            		;moveq	#2,d0
00001AE6                            
00001AE6                            ;loc_1A0A:
00001AE6                            		;move.w	d0,(v_pal_buffer).w
00001AE6                            		;add.w	d0,d0
00001AE6                            		;move.w	d0,d1
00001AE6                            		;add.w	d0,d0
00001AE6                            		;add.w	d1,d0
00001AE6                            		;lea	(Pal_LZCyc2).l,a0
00001AE6                            		;lea	(v_pal_dry+$76).w,a1
00001AE6                            		;move.l	(a0,d0.w),(a1)+
00001AE6                            		;move.w	4(a0,d0.w),(a1)
00001AE6                            		;lea	(Pal_LZCyc3).l,a0
00001AE6                            		;lea	(v_pal_water+$76).w,a1
00001AE6                            		;move.l	(a0,d0.w),(a1)+
00001AE6                            		;move.w	4(a0,d0.w),(a1)
00001AE6                            
00001AE6                            ;PCycLZ_Skip2:
00001AE6 4E75                       		rts	
00001AE8                            ; End of function PCycle_LZ
00001AE8                            
00001AE8                            ; ===========================================================================
00001AE8 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001AF0                            ; ===========================================================================
00001AF0                            
00001AF0                            PCycle_MZ:
00001AF0 4E75                       		rts	
00001AF2                            
00001AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AF2                            
00001AF2                            
00001AF2                            PalCycle_SLZ:
00001AF2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001AF6 6A00                       		bpl.s	locret_1A80
00001AF8 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001AFE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001B02 5240                       		addq.w	#1,d0
00001B04 0C40 0006                  		cmpi.w	#6,d0
00001B08 6500                       		bcs.s	loc_1A60
00001B0A 7000                       		moveq	#0,d0
00001B0C                            
00001B0C                            loc_1A60:
00001B0C 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001B10 3200                       		move.w	d0,d1
00001B12 D241                       		add.w	d1,d1
00001B14 D041                       		add.w	d1,d0
00001B16 D040                       		add.w	d0,d0
00001B18 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001B1E 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001B22 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001B26 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001B2C                            
00001B2C                            locret_1A80:
00001B2C 4E75                       		rts	
00001B2E                            ; End of function PalCycle_SLZ
00001B2E                            
00001B2E                            
00001B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B2E                            
00001B2E                            
00001B2E                            PalCycle_SYZ:
00001B2E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001B32 6A00                       		bpl.s	locret_1AC6
00001B34 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001B3A 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001B3E 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001B42 0240 0003                  		andi.w	#3,d0
00001B46 E548                       		lsl.w	#2,d0
00001B48 3200                       		move.w	d0,d1
00001B4A D040                       		add.w	d0,d0
00001B4C 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001B52 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001B56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B5E 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001B64 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001B68 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001B6C 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001B72                            
00001B72                            locret_1AC6:
00001B72 4E75                       		rts	
00001B74                            ; End of function PalCycle_SYZ
00001B74                            
00001B74                            
00001B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B74                            
00001B74                            
00001B74                            PalCycle_SBZ:
00001B74 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B7A 4A38 FE11                  		tst.b	(v_act).w
00001B7E 6700                       		beq.s	loc_1ADA
00001B80 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B86                            
00001B86                            loc_1ADA:
00001B86 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001B8A 321A                       		move.w	(a2)+,d1
00001B8C                            
00001B8C                            loc_1AE0:
00001B8C 5311                       		subq.b	#1,(a1)
00001B8E 6B00                       		bmi.s	loc_1AEA
00001B90 5489                       		addq.l	#2,a1
00001B92 5C8A                       		addq.l	#6,a2
00001B94 6000                       		bra.s	loc_1B06
00001B96                            ; ===========================================================================
00001B96                            
00001B96                            loc_1AEA:
00001B96 12DA                       		move.b	(a2)+,(a1)+
00001B98 1011                       		move.b	(a1),d0
00001B9A 5200                       		addq.b	#1,d0
00001B9C B01A                       		cmp.b	(a2)+,d0
00001B9E 6500                       		bcs.s	loc_1AF6
00001BA0 7000                       		moveq	#0,d0
00001BA2                            
00001BA2                            loc_1AF6:
00001BA2 12C0                       		move.b	d0,(a1)+
00001BA4 0240 000F                  		andi.w	#$F,d0
00001BA8 D040                       		add.w	d0,d0
00001BAA 305A                       		movea.w	(a2)+,a0
00001BAC 365A                       		movea.w	(a2)+,a3
00001BAE 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001BB2                            
00001BB2                            loc_1B06:
00001BB2 51C9 FFD8                  		dbf	d1,loc_1AE0
00001BB6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001BBA 6A00                       		bpl.s	locret_1B64
00001BBC 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001BC2 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001BC8 4A38 FE11                  		tst.b	(v_act).w
00001BCC 6700                       		beq.s	loc_1B2E
00001BCE 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001BD4 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001BDA                            
00001BDA                            loc_1B2E:
00001BDA 72FF                       		moveq	#-1,d1
00001BDC 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001BE0 6700                       		beq.s	loc_1B38
00001BE2 4441                       		neg.w	d1
00001BE4                            
00001BE4                            loc_1B38:
00001BE4 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001BE8 0240 0003                  		andi.w	#3,d0
00001BEC D041                       		add.w	d1,d0
00001BEE 0C40 0003                  		cmpi.w	#3,d0
00001BF2 6500                       		bcs.s	loc_1B52
00001BF4 3200                       		move.w	d0,d1
00001BF6 7000                       		moveq	#0,d0
00001BF8 4A41                       		tst.w	d1
00001BFA 6A00                       		bpl.s	loc_1B52
00001BFC 7002                       		moveq	#2,d0
00001BFE                            
00001BFE                            loc_1B52:
00001BFE 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001C02 D040                       		add.w	d0,d0
00001C04 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001C08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C10                            
00001C10                            locret_1B64:
00001C10 4E75                       		rts	
00001C12                            ; End of function PalCycle_SBZ
00001C12                            ; End of function PalCycle_SBZ
00001C12                            
00001C12                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001C32                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001C52                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001C72                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001C84                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001C96                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001CFE                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001D22                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001D42                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001D52                            
00001D52                            		include	"_inc\SBZ Palette Scripts.asm"
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            ; Scrap Brain Zone palette cycling script
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            
00001D52                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001D52                            	dc.b duration, colors
00001D52                            	dc.w paladdress, ramaddress
00001D52                            	endm
00001D52                            
00001D52                            ; duration in frames, number of colors, palette address, RAM address
00001D52                            
00001D52                            Pal_SBZCycList1:
00001D52 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001D54 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001D5A 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001D60 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001D66 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001D6C 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001D72 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001D78 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001D7E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001D84 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001D8A                            end_SBZCycList1:
00001D8A                            	even
00001D8A                            
00001D8A                            Pal_SBZCycList2:
00001D8A 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00001D8C 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001D92 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001D98 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00001D9E 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001DA4 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001DAA 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001DB0 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001DB6                            end_SBZCycList2:
00001DB6                            	even
00001DB6                            	even
00001DB6                            
00001DB6                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00001DC6                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00001DD6                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00001DE6                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00001DF2                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00001E02                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00001E12                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00001E32                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00001E3C                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00001E4C                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            ; Subroutine to	fade in from black
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            
00001E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E58                            
00001E58                            
00001E58                            PaletteFadeIn:
00001E58 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00001E5E                            
00001E5E                            PalFadeIn_Alt:				; start position and size are already set
00001E5E 7000                       		moveq	#0,d0
00001E60 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001E64 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E68 D0C0                       		adda.w	d0,a0
00001E6A 7200                       		moveq	#cBlack,d1
00001E6C 1038 F627                  		move.b	(v_pfade_size).w,d0
00001E70                            
00001E70                            	@fill:
00001E70 30C1                       		move.w	d1,(a0)+
00001E72 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
00001E76                            
00001E76 383C 0015                  		move.w	#$15,d4
00001E7A                            
00001E7A                            	@mainloop:
00001E7A 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001E80 6100 0000                  		bsr.w	WaitForVBla
00001E84 6100                       		bsr.s	FadeIn_FromBlack
00001E86 6100 F64A                  		bsr.w	RunPLC
00001E8A 51CC FFEE                  		dbf	d4,@mainloop
00001E8E 4E75                       		rts	
00001E90                            ; End of function PaletteFadeIn
00001E90                            
00001E90                            
00001E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E90                            
00001E90                            
00001E90                            FadeIn_FromBlack:
00001E90 7000                       		moveq	#0,d0
00001E92 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001E96 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001E9A 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E9E D0C0                       		adda.w	d0,a0
00001EA0 D2C0                       		adda.w	d0,a1
00001EA2 1038 F627                  		move.b	(v_pfade_size).w,d0
00001EA6                            
00001EA6                            	@addcolour:
00001EA6 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00001EA8 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00001EAC                            
00001EAC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001EB2 6600                       		bne.s	@exit		; if not, branch
00001EB4                            
00001EB4 7000                       		moveq	#0,d0
00001EB6 41F8 FA80                  		lea	(v_pal_water).w,a0
00001EBA 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001EBE 1038 F626                  		move.b	(v_pfade_start).w,d0
00001EC2 D0C0                       		adda.w	d0,a0
00001EC4 D2C0                       		adda.w	d0,a1
00001EC6 1038 F627                  		move.b	(v_pfade_size).w,d0
00001ECA                            
00001ECA                            	@addcolour2:
00001ECA 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00001ECC 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00001ED0                            
00001ED0                            @exit:
00001ED0 4E75                       		rts	
00001ED2                            ; End of function FadeIn_FromBlack
00001ED2                            
00001ED2                            
00001ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED2                            
00001ED2                            
00001ED2                            FadeIn_AddColour:
00001ED2                            @addblue:
00001ED2 3419                       		move.w	(a1)+,d2
00001ED4 3610                       		move.w	(a0),d3
00001ED6 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00001ED8 6700                       		beq.s	@next		; if yes, branch
00001EDA 3203                       		move.w	d3,d1
00001EDC 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001EE0 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001EE2 6200                       		bhi.s	@addgreen	; if yes, branch
00001EE4 30C1                       		move.w	d1,(a0)+	; update palette
00001EE6 4E75                       		rts	
00001EE8                            ; ===========================================================================
00001EE8                            
00001EE8                            @addgreen:
00001EE8 3203                       		move.w	d3,d1
00001EEA 0641 0020                  		addi.w	#$20,d1		; increase green value
00001EEE B242                       		cmp.w	d2,d1
00001EF0 6200                       		bhi.s	@addred
00001EF2 30C1                       		move.w	d1,(a0)+	; update palette
00001EF4 4E75                       		rts	
00001EF6                            ; ===========================================================================
00001EF6                            
00001EF6                            @addred:
00001EF6 5458                       		addq.w	#2,(a0)+	; increase red value
00001EF8 4E75                       		rts	
00001EFA                            ; ===========================================================================
00001EFA                            
00001EFA                            @next:
00001EFA 5448                       		addq.w	#2,a0		; next colour
00001EFC 4E75                       		rts	
00001EFE                            ; End of function FadeIn_AddColour
00001EFE                            
00001EFE                            
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Subroutine to fade out to black
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            
00001EFE                            
00001EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EFE                            
00001EFE                            
00001EFE                            PaletteFadeOut:
00001EFE 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001F04 383C 0015                  		move.w	#$15,d4
00001F08                            
00001F08                            	@mainloop:
00001F08 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001F0E 6100 0000                  		bsr.w	WaitForVBla
00001F12 6100                       		bsr.s	FadeOut_ToBlack
00001F14 6100 F5BC                  		bsr.w	RunPLC
00001F18 51CC FFEE                  		dbf	d4,@mainloop
00001F1C 4E75                       		rts	
00001F1E                            ; End of function PaletteFadeOut
00001F1E                            
00001F1E                            
00001F1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F1E                            
00001F1E                            
00001F1E                            FadeOut_ToBlack:
00001F1E 7000                       		moveq	#0,d0
00001F20 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001F24 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F28 D0C0                       		adda.w	d0,a0
00001F2A 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F2E                            
00001F2E                            	@decolour:
00001F2E 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00001F30 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001F34                            
00001F34 7000                       		moveq	#0,d0
00001F36 41F8 FA80                  		lea	(v_pal_water).w,a0
00001F3A 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F3E D0C0                       		adda.w	d0,a0
00001F40 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F44                            
00001F44                            	@decolour2:
00001F44 6100                       		bsr.s	FadeOut_DecColour
00001F46 51C8 FFFC                  		dbf	d0,@decolour2
00001F4A 4E75                       		rts	
00001F4C                            ; End of function FadeOut_ToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            FadeOut_DecColour:
00001F4C                            @dered:
00001F4C 3410                       		move.w	(a0),d2
00001F4E 6700                       		beq.s	@next
00001F50 3202                       		move.w	d2,d1
00001F52 0241 000E                  		andi.w	#$E,d1
00001F56 6700                       		beq.s	@degreen
00001F58 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F5A 4E75                       		rts	
00001F5C                            ; ===========================================================================
00001F5C                            
00001F5C                            @degreen:
00001F5C 3202                       		move.w	d2,d1
00001F5E 0241 00E0                  		andi.w	#$E0,d1
00001F62 6700                       		beq.s	@deblue
00001F64 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001F68 4E75                       		rts	
00001F6A                            ; ===========================================================================
00001F6A                            
00001F6A                            @deblue:
00001F6A 3202                       		move.w	d2,d1
00001F6C 0241 0E00                  		andi.w	#$E00,d1
00001F70 6700                       		beq.s	@next
00001F72 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            @next:
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function FadeOut_DecColour
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	fade in from white (Special Stage)
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            PaletteWhiteIn:
00001F7C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001F82 7000                       		moveq	#0,d0
00001F84 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001F88 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F8C D0C0                       		adda.w	d0,a0
00001F8E 323C 0EEE                  		move.w	#cWhite,d1
00001F92 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F96                            
00001F96                            	@fill:
00001F96 30C1                       		move.w	d1,(a0)+
00001F98 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00001F9C                            
00001F9C 383C 0015                  		move.w	#$15,d4
00001FA0                            
00001FA0                            	@mainloop:
00001FA0 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001FA6 6100 0000                  		bsr.w	WaitForVBla
00001FAA 6100                       		bsr.s	WhiteIn_FromWhite
00001FAC 6100 F524                  		bsr.w	RunPLC
00001FB0 51CC FFEE                  		dbf	d4,@mainloop
00001FB4 4E75                       		rts	
00001FB6                            ; End of function PaletteWhiteIn
00001FB6                            
00001FB6                            
00001FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB6                            
00001FB6                            
00001FB6                            WhiteIn_FromWhite:
00001FB6 7000                       		moveq	#0,d0
00001FB8 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001FBC 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001FC0 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FC4 D0C0                       		adda.w	d0,a0
00001FC6 D2C0                       		adda.w	d0,a1
00001FC8 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FCC                            
00001FCC                            	@decolour:
00001FCC 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00001FCE 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001FD2                            
00001FD2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001FD8 6600                       		bne.s	@exit		; if not, branch
00001FDA 7000                       		moveq	#0,d0
00001FDC 41F8 FA80                  		lea	(v_pal_water).w,a0
00001FE0 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001FE4 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FE8 D0C0                       		adda.w	d0,a0
00001FEA D2C0                       		adda.w	d0,a1
00001FEC 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FF0                            
00001FF0                            	@decolour2:
00001FF0 6100                       		bsr.s	WhiteIn_DecColour
00001FF2 51C8 FFFC                  		dbf	d0,@decolour2
00001FF6                            
00001FF6                            	@exit:
00001FF6 4E75                       		rts	
00001FF8                            ; End of function WhiteIn_FromWhite
00001FF8                            
00001FF8                            
00001FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF8                            
00001FF8                            
00001FF8                            WhiteIn_DecColour:
00001FF8                            @deblue:
00001FF8 3419                       		move.w	(a1)+,d2
00001FFA 3610                       		move.w	(a0),d3
00001FFC B642                       		cmp.w	d2,d3
00001FFE 6700                       		beq.s	@next
00002000 3203                       		move.w	d3,d1
00002002 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002006 6500                       		blo.s	@degreen
00002008 B242                       		cmp.w	d2,d1
0000200A 6500                       		blo.s	@degreen
0000200C 30C1                       		move.w	d1,(a0)+
0000200E 4E75                       		rts	
00002010                            ; ===========================================================================
00002010                            
00002010                            @degreen:
00002010 3203                       		move.w	d3,d1
00002012 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002016 6500                       		blo.s	@dered
00002018 B242                       		cmp.w	d2,d1
0000201A 6500                       		blo.s	@dered
0000201C 30C1                       		move.w	d1,(a0)+
0000201E 4E75                       		rts	
00002020                            ; ===========================================================================
00002020                            
00002020                            @dered:
00002020 5558                       		subq.w	#2,(a0)+	; decrease red value
00002022 4E75                       		rts	
00002024                            ; ===========================================================================
00002024                            
00002024                            @next:
00002024 5448                       		addq.w	#2,a0
00002026 4E75                       		rts	
00002028                            ; End of function WhiteIn_DecColour
00002028                            
00002028                            ; ---------------------------------------------------------------------------
00002028                            ; Subroutine to fade to white (Special Stage)
00002028                            ; ---------------------------------------------------------------------------
00002028                            
00002028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002028                            
00002028                            
00002028                            PaletteWhiteOut:
00002028 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000202E 383C 0015                  		move.w	#$15,d4
00002032                            
00002032                            	@mainloop:
00002032 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002038 6100 0000                  		bsr.w	WaitForVBla
0000203C 6100                       		bsr.s	WhiteOut_ToWhite
0000203E 6100 F492                  		bsr.w	RunPLC
00002042 51CC FFEE                  		dbf	d4,@mainloop
00002046 4E75                       		rts	
00002048                            ; End of function PaletteWhiteOut
00002048                            
00002048                            
00002048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002048                            
00002048                            
00002048                            WhiteOut_ToWhite:
00002048 7000                       		moveq	#0,d0
0000204A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000204E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002052 D0C0                       		adda.w	d0,a0
00002054 1038 F627                  		move.b	(v_pfade_size).w,d0
00002058                            
00002058                            	@addcolour:
00002058 6100                       		bsr.s	WhiteOut_AddColour
0000205A 51C8 FFFC                  		dbf	d0,@addcolour
0000205E                            
0000205E 7000                       		moveq	#0,d0
00002060 41F8 FA80                  		lea	(v_pal_water).w,a0
00002064 1038 F626                  		move.b	(v_pfade_start).w,d0
00002068 D0C0                       		adda.w	d0,a0
0000206A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000206E                            
0000206E                            	@addcolour2:
0000206E 6100                       		bsr.s	WhiteOut_AddColour
00002070 51C8 FFFC                  		dbf	d0,@addcolour2
00002074 4E75                       		rts	
00002076                            ; End of function WhiteOut_ToWhite
00002076                            
00002076                            
00002076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002076                            
00002076                            
00002076                            WhiteOut_AddColour:
00002076                            @addred:
00002076 3410                       		move.w	(a0),d2
00002078 0C42 0EEE                  		cmpi.w	#cWhite,d2
0000207C 6700                       		beq.s	@next
0000207E 3202                       		move.w	d2,d1
00002080 0241 000E                  		andi.w	#$E,d1
00002084 0C41 000E                  		cmpi.w	#cRed,d1
00002088 6700                       		beq.s	@addgreen
0000208A 5458                       		addq.w	#2,(a0)+	; increase red value
0000208C 4E75                       		rts	
0000208E                            ; ===========================================================================
0000208E                            
0000208E                            @addgreen:
0000208E 3202                       		move.w	d2,d1
00002090 0241 00E0                  		andi.w	#$E0,d1
00002094 0C41 00E0                  		cmpi.w	#cGreen,d1
00002098 6700                       		beq.s	@addblue
0000209A 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000209E 4E75                       		rts	
000020A0                            ; ===========================================================================
000020A0                            
000020A0                            @addblue:
000020A0 3202                       		move.w	d2,d1
000020A2 0241 0E00                  		andi.w	#$E00,d1
000020A6 0C41 0E00                  		cmpi.w	#cBlue,d1
000020AA 6700                       		beq.s	@next
000020AC 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            @next:
000020B2 5448                       		addq.w	#2,a0
000020B4 4E75                       		rts	
000020B6                            ; End of function WhiteOut_AddColour
000020B6                            
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            ; Palette cycling routine - Sega logo
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            
000020B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020B6                            
000020B6                            
000020B6                            PalCycle_Sega:
000020B6 4A38 F635                  		tst.b	(v_pcyc_time+1).w
000020BA 6600                       		bne.s	loc_206A
000020BC 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000020C0 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000020C6 7205                       		moveq	#5,d1
000020C8 3038 F632                  		move.w	(v_pcyc_num).w,d0
000020CC                            
000020CC                            loc_2020:
000020CC 6A00                       		bpl.s	loc_202A
000020CE 5448                       		addq.w	#2,a0
000020D0 5341                       		subq.w	#1,d1
000020D2 5440                       		addq.w	#2,d0
000020D4 60F6                       		bra.s	loc_2020
000020D6                            ; ===========================================================================
000020D6                            
000020D6                            loc_202A:
000020D6 3400                       		move.w	d0,d2
000020D8 0242 001E                  		andi.w	#$1E,d2
000020DC 6600                       		bne.s	loc_2034
000020DE 5440                       		addq.w	#2,d0
000020E0                            
000020E0                            loc_2034:
000020E0 0C40 0060                  		cmpi.w	#$60,d0
000020E4 6400                       		bhs.s	loc_203E
000020E6 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000020EA                            
000020EA                            loc_203E:
000020EA 5440                       		addq.w	#2,d0
000020EC 51C9 FFE8                  		dbf	d1,loc_202A
000020F0                            
000020F0 3038 F632                  		move.w	(v_pcyc_num).w,d0
000020F4 5440                       		addq.w	#2,d0
000020F6 3400                       		move.w	d0,d2
000020F8 0242 001E                  		andi.w	#$1E,d2
000020FC 6600                       		bne.s	loc_2054
000020FE 5440                       		addq.w	#2,d0
00002100                            
00002100                            loc_2054:
00002100 0C40 0064                  		cmpi.w	#$64,d0
00002104 6D00                       		blt.s	loc_2062
00002106 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
0000210C 70F4                       		moveq	#-$C,d0
0000210E                            
0000210E                            loc_2062:
0000210E 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002112 7001                       		moveq	#1,d0
00002114 4E75                       		rts	
00002116                            ; ===========================================================================
00002116                            
00002116                            loc_206A:
00002116 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000211A 6A00                       		bpl.s	loc_20BC
0000211C 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
00002122 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002126 0640 000C                  		addi.w	#$C,d0
0000212A 0C40 0030                  		cmpi.w	#$30,d0
0000212E 6500                       		blo.s	loc_2088
00002130 7000                       		moveq	#0,d0
00002132 4E75                       		rts	
00002134                            ; ===========================================================================
00002134                            
00002134                            loc_2088:
00002134 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002138 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000213E 41F0 0000                  		lea	(a0,d0.w),a0
00002142 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
00002146 22D8                       		move.l	(a0)+,(a1)+
00002148 22D8                       		move.l	(a0)+,(a1)+
0000214A 3298                       		move.w	(a0)+,(a1)
0000214C 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002150 7000                       		moveq	#0,d0
00002152 722C                       		moveq	#$2C,d1
00002154                            
00002154                            loc_20A8:
00002154 3400                       		move.w	d0,d2
00002156 0242 001E                  		andi.w	#$1E,d2
0000215A 6600                       		bne.s	loc_20B2
0000215C 5440                       		addq.w	#2,d0
0000215E                            
0000215E                            loc_20B2:
0000215E 3390 0000                  		move.w	(a0),(a1,d0.w)
00002162 5440                       		addq.w	#2,d0
00002164 51C9 FFEE                  		dbf	d1,loc_20A8
00002168                            
00002168                            loc_20BC:
00002168 7001                       		moveq	#1,d0
0000216A 4E75                       		rts	
0000216C                            ; End of function PalCycle_Sega
0000216C                            
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002178                            Pal_Sega2:	incbin	"palette\Sega2.bin"
000021A8                            
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            ; Subroutines to load palettes
000021A8                            
000021A8                            ; input:
000021A8                            ;	d0 = index number for palette
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            
000021A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A8                            
000021A8                            
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            ; Subroutines to load pallets
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            
000021A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000021A8                            
000021A8                            PalLoad1:
000021A8 1238 FE11                  		move.b ($FFFFFE11),d1
000021AC 43F9 0000 0000             		lea (PalPointers).l,a1
000021B2 0C01 0000                  		cmp.b #0,d1
000021B6 6700 0000                  		beq.w PalLoad1_Continue
000021BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000021C0 0C01 0001                  		cmp.b #1,d1
000021C4 6700 0000                  		beq.w PalLoad1_Continue
000021C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000021CE                            
000021CE                            PalLoad1_Continue:
000021CE E748                       		lsl.w #3,d0
000021D0 D2C0                       		adda.w d0,a1
000021D2 2459                       		movea.l (a1)+,a2
000021D4 3659                       		movea.w (a1)+,a3
000021D6 D6FC 0080                  		adda.w #$80,a3
000021DA 3E19                       		move.w (a1)+,d7
000021DC                            
000021DC                            loc_2110:
000021DC 26DA                       		move.l (a2)+,(a3)+
000021DE 51CF FFFC                  		dbf d7,loc_2110
000021E2 4E75                       		rts
000021E4                             ; End of function PalLoad1
000021E4                            
000021E4                            
000021E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000021E4                            
000021E4                            PalLoad2:
000021E4 1238 FE11                  		move.b ($FFFFFE11),d1
000021E8 43F9 0000 0000             		lea (PalPointers).l,a1
000021EE 0C01 0000                  		cmp.b #0,d1
000021F2 6700 0000                  		beq.w PalLoad2_Continue
000021F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000021FC 0C01 0001                  		cmp.b #1,d1
00002200 6700 0000                  		beq.w PalLoad2_Continue
00002204 43F9 0000 0000             		lea (PalPointers3).l,a1
0000220A                            
0000220A                            
0000220A                            PalLoad2_Continue:
0000220A E748                       		lsl.w #3,d0
0000220C D2C0                       		adda.w d0,a1
0000220E 2459                       		movea.l (a1)+,a2
00002210 3659                       		movea.w (a1)+,a3
00002212 3E19                       		move.w (a1)+,d7
00002214                            
00002214                            loc_2128:
00002214 26DA                       		move.l (a2)+,(a3)+
00002216 51CF FFFC                  		dbf d7,loc_2128
0000221A 4E75                       		rts
0000221C                            ; End of function PalLoad2
0000221C                            
0000221C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000221C                            
0000221C                            
0000221C                            PalLoad_Loop: ;Quick load - TIS
0000221C                                    
0000221C 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
0000221E 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
00002222 4E75                               rts
00002224                            
00002224                            ; ---------------------------------------------------------------------------
00002224                            ; Underwater pallet loading subroutine
00002224                            ; ---------------------------------------------------------------------------
00002224                            
00002224                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002224                            
00002224                            PalLoad3_Water:
00002224 1238 FE11                  		move.b ($FFFFFE11),d1
00002228 43F9 0000 0000             		lea (PalPointers).l,a1
0000222E 0C01 0000                  		cmp.b #0,d1
00002232 6700 0000                  		beq.w PalLoad3_Continue
00002236 43F9 0000 0000             		lea (PalPointers2).l,a1
0000223C 0C01 0001                  		cmp.b #1,d1
00002240 6700 0000                  		beq.w PalLoad3_Continue
00002244 43F9 0000 0000             		lea (PalPointers3).l,a1
0000224A                            
0000224A                            PalLoad3_Continue:
0000224A E748                       		lsl.w #3,d0
0000224C D2C0                       		adda.w d0,a1
0000224E 2459                       		movea.l (a1)+,a2
00002250 3659                       		movea.w (a1)+,a3
00002252 96FC 0080                  		suba.w #$80,a3
00002256 3E19                       		move.w (a1)+,d7
00002258                            
00002258                            loc_2144:
00002258 26DA                       		move.l (a2)+,(a3)+
0000225A 51CF FFFC                  		dbf d7,loc_2144
0000225E 4E75                       		rts
00002260                            ; End of function PalLoad3_Water
00002260                            
00002260                            
00002260                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002260                            
00002260                            
00002260                            PalLoad4_Water:
00002260 1238 FE11                  		move.b ($FFFFFE11),d1
00002264 43F9 0000 0000             		lea (PalPointers).l,a1
0000226A 0C01 0000                  		cmp.b #0,d1
0000226E 6700 0000                  		beq.w PalLoad4_Continue
00002272 43F9 0000 0000             		lea (PalPointers2).l,a1
00002278 0C01 0001                  		cmp.b #1,d1
0000227C 6700 0000                  		beq.w PalLoad4_Continue
00002280 43F9 0000 0000             		lea (PalPointers3).l,a1
00002286                            
00002286                            PalLoad4_Continue:
00002286 E748                       		lsl.w #3,d0
00002288 D2C0                       		adda.w d0,a1
0000228A 2459                       		movea.l (a1)+,a2
0000228C 3659                       		movea.w (a1)+,a3
0000228E 96FC 0100                  		suba.w #$100,a3
00002292 3E19                       		move.w (a1)+,d7
00002294                            loc_2160:
00002294 26DA                       		move.l (a2)+,(a3)+
00002296 51CF FFFC                  		dbf d7,loc_2160
0000229A 4E75                       		rts
0000229C                             ; End of function PalLoad4_Water
0000229C                            
0000229C                            ; ===========================================================================
0000229C                            
0000229C                            		include	"_inc\Palette Pointers.asm"
0000229C                            ; ---------------------------------------------------------------------------
0000229C                            ; Palette pointers
0000229C                            ; ---------------------------------------------------------------------------
0000229C                            
0000229C                            palp:	macro paladdress,ramaddress,colors
0000229C                            	dc.l paladdress
0000229C                            	dc.w ramaddress, (colors>>1)-1
0000229C                            	endm
0000229C                            
0000229C                            PalPointers:
0000229C                            
0000229C                            ; palette address, RAM address, colors
0000229C                            
0000229C 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000022A4 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000022AC 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000022B4 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000022BC                            Pal_Levels:
000022BC 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
000022C4 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
000022CC 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000022D4 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000022DC 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000022E4 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000022EC 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000022F4 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000022FC 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002304 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000230C 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002314 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000231C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002324 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
0000232C 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002334 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
0000233C 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002344 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
0000234C 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002354 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
0000235C 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002364 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
0000236C 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002374 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
0000237C 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002384 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
0000238C 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002394 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
0000239C 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
000023A4 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
000023AC 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
000023B4 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
000023BC 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
000023C4 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
000023CC 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
000023D4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
000023DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
000023E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
000023EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
000023F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
000023FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002404 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
0000240C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002414 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
0000241C                            			even
0000241C                            
0000241C                            PalPointers2:
0000241C                            
0000241C                            ; palette address, RAM address, colors
0000241C                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
0000241C 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002424 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
0000242C 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002434 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
0000243C                            Pal_Levels_2:
0000243C 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002444 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
0000244C 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
00002454 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
0000245C 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
00002464 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
0000246C 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002474 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
0000247C 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002484 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000248C 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002494 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000249C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000024A4 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000024AC 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000024B4 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
000024BC 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000024C4 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000024CC 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000024D4 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000024DC 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000024E4 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000024EC 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000024F4 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000024FC 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002504 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
0000250C 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002514 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
0000251C 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002524 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
0000252C 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002534 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
0000253C 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002544 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
0000254C 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002554 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
0000255C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002564 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
0000256C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002574 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
0000257C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002584 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
0000258C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002594 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
0000259C                            			even
0000259C                            			
0000259C                            PalPointers3:
0000259C                            			
0000259C                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
0000259C 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000025A4 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000025AC 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000025B4 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000025BC                            Pal_Levels_3:
000025BC 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
000025C4 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
000025CC 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
000025D4 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
000025DC 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
000025E4 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000025EC 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000025F4 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
000025FC 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002604 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000260C 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002614 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000261C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002624 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
0000262C 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002634 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
0000263C 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002644 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
0000264C 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002654 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
0000265C 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002664 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
0000266C 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002674 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
0000267C 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002684 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
0000268C 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002694 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
0000269C 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000026A4 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000026AC 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000026B4 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000026BC 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000026C4 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000026CC 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000026D4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000026DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000026E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000026EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000026F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
000026FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002704 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
0000270C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002714 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
0000271C                            			even
0000271C                            
0000271C                            
0000271C =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
0000271C =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
0000271C =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
0000271C =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
0000271C =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
0000271C =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
0000271C =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
0000271C =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
0000271C =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
0000271C =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
0000271C =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
0000271C =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
0000271C =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
0000271C =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
0000271C =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
0000271C =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
0000271C =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
0000271C =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
0000271C =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
0000271C =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
0000271C =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
0000271C =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
0000271C =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
0000271C =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
0000271C =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
0000271C =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
0000271C =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
0000271C =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
0000271C =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
0000271C =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
0000271C =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
0000271C =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
0000271C =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
0000271C =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
0000271C =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
0000271C =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
0000271C =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
0000271C =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
0000271C =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
0000271C =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
0000271C =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
0000271C =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
0000271C =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
0000271C =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
0000271C =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
0000271C =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
0000271C =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
0000271C =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
0000271C =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
0000271C =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
0000271C =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
0000271C =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
0000271C =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
0000271C =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
0000271C =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
0000271C =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
0000271C =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
0000271C =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
0000271C =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
0000271C =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
0000271C                            		
0000271C                            		;include	"_inc\Palette Pointers2.asm"
0000271C                            		
0000271C                            		;include	"_inc\Palette Pointers3.asm"
0000271C                            		
0000271C                            
0000271C                            ; ---------------------------------------------------------------------------
0000271C                            ; Palette data
0000271C                            ; ---------------------------------------------------------------------------
0000271C                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
0000279C                            Pal_Title:	incbin	"palette\Title Screen.bin"
0000281C                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
0000289C                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
000028BC                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
0000291C                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
0000297C                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
000029DC                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002A3C                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002A9C                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002AFC                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002B7C                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002BFC                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002C7C                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002CDC                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002D3C                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00002D9C                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00002DFC                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00002E5C                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00002EBC                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
00002F1C                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00002F7C                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00002FDC                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
0000303C                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
0000309C                            Pal_Special:	incbin	"palette\Special Stage.bin"
0000311C                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
0000317C                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000031FC                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
0000321C                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
0000323C                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
0000325C                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000032DC                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
0000331C                            Pal_Ending:	incbin	"palette\Ending.bin"
0000339C                            Pal_Options:	incbin	"palette\Options.bin"
0000341C                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
0000343C                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
0000345C                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
0000347C                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
0000349C                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
000034BC                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
000034DC                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000034FC                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
0000351C                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
0000353C                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
0000355C                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
0000357C                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
0000359C                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
000035BC                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
000035DC                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
000035FC                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
0000361C                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
0000363C                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
0000365C                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
0000367C                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
0000369C                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
000036BC                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
000036DC                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
000036FC                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
0000371C                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
0000373C                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
0000375C                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
0000377C                            ; ---------------------------------------------------------------------------
0000377C                            ; Subroutine to	wait for VBlank routines to complete
0000377C                            ; ---------------------------------------------------------------------------
0000377C                            
0000377C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000377C                            
0000377C                            
0000377C                            WaitForVBla:
0000377C 46FC 2300                  		enable_ints
00003780                            
00003780                            	@wait:
00003780 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003784 66FA                       		bne.s	@wait		; if not, branch
00003786 4E75                       		rts	
00003788                            ; End of function WaitForVBla
00003788                            
00003788                            		include	"_incObj\sub RandomNumber.asm"
00003788                            ; ---------------------------------------------------------------------------
00003788                            ; Subroutine to	generate a pseudo-random number	in d0
00003788                            ; ---------------------------------------------------------------------------
00003788                            
00003788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003788                            
00003788                            
00003788                            RandomNumber:
00003788 2238 F636                  		move.l	(v_random).w,d1
0000378C 6600                       		bne.s	@scramble	; if d1 is not 0, branch
0000378E 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003794                            
00003794                            	@scramble:
00003794 2001                       		move.l	d1,d0
00003796 E581                       		asl.l	#2,d1
00003798 D280                       		add.l	d0,d1
0000379A E781                       		asl.l	#3,d1
0000379C D280                       		add.l	d0,d1
0000379E 3001                       		move.w	d1,d0
000037A0 4841                       		swap	d1
000037A2 D041                       		add.w	d1,d0
000037A4 3200                       		move.w	d0,d1
000037A6 4841                       		swap	d1
000037A8 21C1 F636                  		move.l	d1,(v_random).w
000037AC 4E75                       		rts	
000037AC 4E75                       		rts	
000037AE                            		include	"_incObj\sub CalcSine.asm"
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            ; Subroutine calculate a sine
000037AE                            
000037AE                            ; input:
000037AE                            ;	d0 = angle
000037AE                            
000037AE                            ; output:
000037AE                            ;	d0 = sine
000037AE                            ;	d1 = cosine
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            
000037AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037AE                            
000037AE                            
000037AE                            CalcSine:
000037AE 0240 00FF                          andi.w  #$FF,d0
000037B2 5040                               addq.w  #8,d0
000037B4 D040                               add.w   d0,d0
000037B6 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
000037BA 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
000037BE 4E75                               rts
000037C0                            ; End of function CalcSine
000037C0                            
000037C0                            ; ===========================================================================
000037C0                            
000037C0                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003A40                            
00003A40                            ; ===========================================================================
00003A40                            ; ===========================================================================
00003A40                            		include	"_incObj\sub CalcAngle.asm"
00003A40                            ; ---------------------------------------------------------------------------
00003A40                            ; Subroutine calculate an angle
00003A40                            
00003A40                            ; input:
00003A40                            ;	d1 = x-axis distance
00003A40                            ;	d2 = y-axis distance
00003A40                            
00003A40                            ; output:
00003A40                            ;	d0 = angle
00003A40                            ; ---------------------------------------------------------------------------
00003A40                            
00003A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A40                            
00003A40                            
00003A40                            CalcAngle:
00003A40 48E7 1800                  		movem.l	d3-d4,-(sp)
00003A44 7600                       		moveq	#0,d3
00003A46 7800                       		moveq	#0,d4
00003A48 3601                       		move.w	d1,d3
00003A4A 3802                       		move.w	d2,d4
00003A4C 8843                       		or.w	d3,d4
00003A4E 6700                       		beq.s	loc_2D04
00003A50 3802                       		move.w	d2,d4
00003A52 4A43                       		tst.w	d3
00003A54 6A00 0000                  		bpl.w	loc_2CC2
00003A58 4443                       		neg.w	d3
00003A5A                            
00003A5A                            loc_2CC2:
00003A5A 4A44                       		tst.w	d4
00003A5C 6A00 0000                  		bpl.w	loc_2CCA
00003A60 4444                       		neg.w	d4
00003A62                            
00003A62                            loc_2CCA:
00003A62 B843                       		cmp.w	d3,d4
00003A64 6400 0000                  		bcc.w	loc_2CDC
00003A68 E18C                       		lsl.l	#8,d4
00003A6A 88C3                       		divu.w	d3,d4
00003A6C 7000                       		moveq	#0,d0
00003A6E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003A72 6000                       		bra.s	loc_2CE6
00003A74                            ; ===========================================================================
00003A74                            
00003A74                            loc_2CDC:
00003A74 E18B                       		lsl.l	#8,d3
00003A76 86C4                       		divu.w	d4,d3
00003A78 7040                       		moveq	#$40,d0
00003A7A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003A7E                            
00003A7E                            loc_2CE6:
00003A7E 4A41                       		tst.w	d1
00003A80 6A00 0000                  		bpl.w	loc_2CF2
00003A84 4440                       		neg.w	d0
00003A86 0640 0080                  		addi.w	#$80,d0
00003A8A                            
00003A8A                            loc_2CF2:
00003A8A 4A42                       		tst.w	d2
00003A8C 6A00 0000                  		bpl.w	loc_2CFE
00003A90 4440                       		neg.w	d0
00003A92 0640 0100                  		addi.w	#$100,d0
00003A96                            
00003A96                            loc_2CFE:
00003A96 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003A9A 4E75                       		rts	
00003A9C                            ; ===========================================================================
00003A9C                            
00003A9C                            loc_2D04:
00003A9C 303C 0040                  		move.w	#$40,d0
00003AA0 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003AA4 4E75                       		rts	
00003AA6                            ; End of function CalcAngle
00003AA6                            
00003AA6                            ; ===========================================================================
00003AA6                            
00003AA6                            Angle_Data:	incbin	"misc\angles.bin"
00003BA8                            
00003BA8                            ; ===========================================================================
00003BA8                            ; ===========================================================================
00003BA8                            
00003BA8                            ; ---------------------------------------------------------------------------
00003BA8                            ; Sega screen
00003BA8                            ; ---------------------------------------------------------------------------
00003BA8                            
00003BA8                            GM_Sega:
00003BB0 6100 D912                  		bsr.w	ClearPLC
00003BB4 6100 E348                  		bsr.w	PaletteFadeOut
00003BB8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003BBE 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003BC2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003BC6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003BCA 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003BCE 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003BD2 4238 F64E                  		clr.b	(f_wtr_state).w
00003BD6 46FC 2700                  		disable_ints
00003BDA 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003BDE 0200 00BF                  		andi.b	#$BF,d0
00003BE2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003BE8 6100 D312                  		bsr.w	ClearScreen
00003BF6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003BFC 6100 D47C                  		bsr.w	NemDec
00003C00 43F9 00FF 0000             		lea	($FF0000).l,a1
00003C06 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003C0C 303C 0000                  		move.w	#0,d0
00003C10 6100 D9F2                  		bsr.w	EniDec
00003C14                            
00003C14 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003C28 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003C3C                            
00003C3C 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003C40 6B00                       			bmi.s   @loadpal
00003C42 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003C56                            
00003C56                            	@loadpal:
00003C56 7000                       		moveq	#palid_SegaBG,d0
00003C58 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003C5C 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003C62 7E3F                               moveq    #$3F,d7
00003C64                             
00003C64                                .loop:
00003C64 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003C68 51CF FFFA                          dbf        d7,.loop
00003C6C 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003C70 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003C76 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003C7C 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003C82 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003C88 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003C8C 0000 0040                  		ori.b	#$40,d0
00003C90 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003C96                            
00003C96                            Sega_WaitPal:
00003C96 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003C9C 6100 FADE                  		bsr.w	WaitForVBla
00003CA0 6100 E414                  		bsr.w	PalCycle_Sega
00003CA4 66F0                       		bne.s	Sega_WaitPal
00003CA6                            
00003CAE 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003CB4 6100 FAC6                  		bsr.w	WaitForVBla
00003CB8 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003CBE                            
00003CBE                            Sega_WaitEnd:
00003CBE 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003CC4 6100 FAB6                  		bsr.w	WaitForVBla
00003CC8 4A78 F614                  		tst.w	(v_demolength).w
00003CCC 6700                       		beq.s	Sega_GotoTitle
00003CCE 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003CD4 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003CD6                            
00003CD6                            Sega_GotoTitle:
00003CD6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003CDC 4E75                       		rts	
00003CDE                            ; ===========================================================================
00003CDE                            
00003CDE                            ; ---------------------------------------------------------------------------
00003CDE                            ; Title	screen
00003CDE                            ; ---------------------------------------------------------------------------
00003CDE                            
00003CDE                            GM_Title:
00003CE6 6100 D7DC                  		bsr.w	ClearPLC
00003CEA 6100 E212                  		bsr.w	PaletteFadeOut
00003CEE 46FC 2700                  		disable_ints
00003CF2 6100 D28E                  		bsr.w	SoundDriverLoad
00003CF6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003CFC 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003D00 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003D04 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003D08 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003D0C 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003D10 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D14 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003D18 4238 F64E                  		clr.b	(f_wtr_state).w
00003D1C 6100 D1DE                  		bsr.w	ClearScreen
00003D20 4EB9 0000 0000             		jsr		SHC2022 
00003D26                            
00003D26 43F8 D000                  		lea	(v_objspace).w,a1
00003D2A 7000                       		moveq	#0,d0
00003D2C 323C 07FF                  		move.w	#$7FF,d1
00003D30                            
00003D30                            	Tit_ClrObj1:
00003D30 22C0                       		move.l	d0,(a1)+
00003D32 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003D36                            
00003D40 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003D46 6100 D332                  		bsr.w	NemDec
00003D54 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003D5A 6100 D31E                  		bsr.w	NemDec
00003D5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003D64 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003D6A 303C 0000                  		move.w	#0,d0
00003D6E 6100 D894                  		bsr.w	EniDec
00003D72                            
00003D72 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
00003D86                            
00003D86 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00003D8A 7000                       		moveq	#cBlack,d0
00003D8C 323C 001F                  		move.w	#$1F,d1
00003D90                            
00003D90                            	Tit_ClrPal:
00003D90 22C0                       		move.l	d0,(a1)+
00003D92 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
00003D96                            
00003D96 4EB9 0000 0000             		jsr		LoadPlayerPal
00003D9C 6100 E40A                  		bsr.w	PalLoad1
00003DA0 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
00003DA6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003DAC 4EB9 0000 0000             		jsr	(BuildSprites).l
00003DB2 6100 E0A4                  		bsr.w	PaletteFadeIn
00003DB6 46FC 2700                  		disable_ints
00003DC4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003DCA 6100 D2AE                  		bsr.w	NemDec
00003DD8 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003DDE 6100 D29A                  		bsr.w	NemDec
00003DEC 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
00003DF2 6100 D286                  		bsr.w 	NemDec
00003DF6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003E04 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
00003E0A 323C 028F                  		move.w	#$28F,d1
00003E0E                            
00003E0E                            	Tit_LoadText:
00003E0E 3C9D                       		move.w	(a5)+,(a6)
00003E10 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00003E14                            
00003E14 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
00003E1A 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00003E20 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00003E26 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00003E2C 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
00003E32 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
00003E38 6100 0000                  		bsr.w	LevelSizeLoad
00003E3C 6100 0000                  		bsr.w	DeformLayers
00003E40 43F8 B000                  		lea	(v_16x16).w,a1
00003E44 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
00003E4A 303C 0000                  		move.w	#0,d0
00003E4E 6100 D7B4                  		bsr.w	EniDec
00003E52 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
00003E58 43F9 00FF 0000             		lea	(v_256x256).l,a1
00003E5E 6100 D922                  		bsr.w	KosDec
00003E62 6100 0000                  		bsr.w	LevelLayoutLoad
00003E66 6100 E096                  		bsr.w	PaletteFadeOut
00003E6A 46FC 2700                  		disable_ints
00003E6E 6100 D08C                  		bsr.w	ClearScreen
00003E72 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00003E78 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003E7E 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00003E82 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00003E86 343C 6000                  		move.w	#$6000,d2
00003E8A 6100 0000                  		bsr.w	DrawChunks
00003E8E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E94 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003E9A 303C 0000                  		move.w	#0,d0
00003E9E 6100 D764                  		bsr.w	EniDec
00003EA2                            
00003EA2 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00003EB6                            
00003EC0 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00003EC6 6100 D1B2                  		bsr.w	NemDec
00003ECA 7001                       		moveq	#palid_Title,d0	; load title screen palette
00003ECC 6100 E2DA                  		bsr.w	PalLoad1
00003ED8 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00003EDE 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00003EE4 43F8 D080                  		lea	(v_objspace+$80).w,a1
00003EE8 7000                       		moveq	#0,d0
00003EEA 323C 0007                  		move.w	#7,d1
00003EEE                            
00003EEE                            	Tit_ClrObj2:
00003EEE 22C0                       		move.l	d0,(a1)+
00003EF0 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00003EF4                            
00003EF4 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00003EFA 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00003F00 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00003F04                            
00003F04 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003F08 6A00                       			bpl.s   @isjap		; if yes, branch
00003F0A                            
00003F0A 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00003F10 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00003F16                            	@isjap:
00003F16 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
00003F1C 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00003F22 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003F28 6100 0000                  		bsr.w	DeformLayers
00003F2C 4EB9 0000 0000             		jsr	(BuildSprites).l
00003F32 7000                       		moveq	#plcid_Main,d0
00003F34 6100 D562                  		bsr.w	NewPLC
00003F38 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00003F3E 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
00003F44 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F48 0000 0040                  		ori.b	#$40,d0
00003F4C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F52 6100 DF04                  		bsr.w	PaletteFadeIn
00003F56                            
00003F56                            Tit_MainLoop:
00003F56 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00003F5C 6100 F81E                  		bsr.w	WaitForVBla
00003F60 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003F66 6100 0000                  		bsr.w	DeformLayers
00003F6A 4EB9 0000 0000             		jsr	(BuildSprites).l
00003F70 6100 DAF8                  		bsr.w	PCycle_Title
00003F74 6100 D55C                  		bsr.w	RunPLC
00003F78 3038 D008                  		move.w	(v_objspace+obX).w,d0
00003F7C 5440                       		addq.w	#2,d0
00003F7E 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00003F82 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00003F86 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00003F88                            
00003F88 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00003F8E 4E75                       		rts	
00003F90                            ; ===========================================================================
00003F90                            
00003F90                            Tit_ChkRegion:
00003F90 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00003F94 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00003F96                            
00003F96 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00003F9C 6000                       		bra.s	Tit_EnterCheat
00003F9E                            
00003F9E                            	Tit_RegionJap:
00003F9E 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00003FA4                            
00003FA4                            Tit_EnterCheat:
00003FA4 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00003FA8 D0C0                       		adda.w	d0,a0
00003FAA 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00003FAE 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00003FB2 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003FB4 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00003FB6 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00003FBA 4A00                       		tst.b	d0
00003FBC 6600                       		bne.s	Tit_CountC
00003FBE 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00003FC2 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00003FC6 E249                       		lsr.w	#1,d1
00003FC8 0241 0003                  		andi.w	#3,d1
00003FCC 6700                       		beq.s	Tit_PlayRing
00003FCE 4A38 FFF8                  		tst.b	(v_megadrive).w
00003FD2 6A00                       		bpl.s	Tit_PlayRing
00003FD4 7201                       		moveq	#1,d1
00003FD6 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00003FDA                            
00003FDA                            	Tit_PlayRing:
00003FDA 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003FE8 6000                       		bra.s	Tit_CountC
00003FEA                            ; ===========================================================================
00003FEA                            
00003FEA                            Tit_ResetCheat:
00003FEA 4A00                       		tst.b	d0
00003FEC 6700                       		beq.s	Tit_CountC
00003FEE 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00003FF4 6700                       		beq.s	Tit_CountC
00003FF6 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00003FFC                            
00003FFC                            Tit_CountC:
00003FFC 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004000 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004004                            
00004004                            loc_3230:
00004004 4A78 F614                  		tst.w	(v_demolength).w
00004008 6700 0000                  		beq.w	GotoDemo
0000400C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
00004012 6700 FF42                  		beq.w	Tit_MainLoop	; if not, branch
00004016                            
00004016                            Tit_ChkLevSel:
00004016 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
0000401A 6700 0000                  		beq.w	@cont	; if not, play level
0000401E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
00004024 6700 0000                  		beq.w	@cont	; if not, play level
00004028 6000 0000                  		bra.w	Tit_LevelSelect
0000402C                            
0000402C                            	@cont:		
0000402C 7400                       		moveq   #0,d2
0000402E 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
00004032 D442                       		add.w   d2,d2            ; multiply by 2
00004034 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
00004038 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
0000403C                            
0000403C                            ; ===========================================================================
0000403C                            Tit_Menu_Choice:
0000403C 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
0000403E 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
00004040                            ; ===========================================================================
00004040                            
00004040                            Menu_Options:
00004040 11FC 0020 F600             	move.b	#$20,(v_gamemode).w
00004046 4E75                       	rts
00004048                            
00004048                            Tit_LevelSelect:	
00004048 7002                       		moveq	#palid_LevelSel,d0
0000404A 6100 E198                  		bsr.w	PalLoad2	; load level select palette
0000404E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00004052 7000                       		moveq	#0,d0
00004054 323C 00DF                  		move.w	#$DF,d1
00004058                            
00004058                            	Tit_ClrScroll1:
00004058 22C0                       		move.l	d0,(a1)+
0000405A 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
0000405E                            
0000405E 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
00004062 46FC 2700                  		disable_ints
00004066 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004076 323C 03FF                  		move.w	#$3FF,d1
0000407A                            
0000407A                            	Tit_ClrScroll2:
0000407A 2C80                       		move.l	d0,(a6)
0000407C 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004080                            
00004080 6100 0000                  		bsr.w	LevSelTextLoad
00004084                            
00004084                            ; ---------------------------------------------------------------------------
00004084                            ; Level	Select
00004084                            ; ---------------------------------------------------------------------------
00004084                            
00004084                            LevelSelect:
00004084 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000408A 6100 F6F0                  		bsr.w	WaitForVBla
0000408E 6100 0000                  		bsr.w	LevSelControls
00004092 6100 D43E                  		bsr.w	RunPLC
00004096 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000409A 66E8                       		bne.s	LevelSelect
0000409C 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000040A2 67E0                       		beq.s	LevelSelect	; if not, branch
000040A4 3038 FF82                  		move.w	(v_levselitem).w,d0
000040A8 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000040AC 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000040AE 3038 FF84                  		move.w	(v_levselsound).w,d0
000040B2 0640 0080                  		addi.w	#$80,d0
000040B6 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000040BA 6700                       		beq.s	LevSel_Ending	; if yes, branch
000040BC 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000040C0 6700                       		beq.s	LevSel_Credits	; if yes, branch
000040C2                            
000040C2                            LevSel_PlaySnd:
000040C2 6100 CF08                  		bsr.w	PlaySound_Special
000040C6 60BC                       		bra.s	LevelSelect
000040C8                            ; ===========================================================================
000040C8                            
000040C8                            LevSel_Ending:
000040C8 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000040CE 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000040D4 4E75                       		rts	
000040D6                            ; ===========================================================================
000040D6                            
000040D6                            LevSel_Credits:
000040D6 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000040E4 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000040EA 4E75                       		rts	
000040EC                            ; ===========================================================================
000040EC                            
000040EC                            LevSel_Level_SS:
000040EC D040                       		add.w	d0,d0
000040EE 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000040F2 6B00 FF90                  		bmi.w	LevelSelect
000040F6 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000040FA 6600                       		bne.s	LevSel_Level	; if not, branch
000040FC 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004102 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00004106 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000410C 7000                       		moveq	#0,d0
0000410E 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004112 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004116 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000411A 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004122 4E75                       		rts	
00004124                            ; ===========================================================================
00004124                            
00004124                            LevSel_Level:
00004124 0240 3FFF                  		andi.w	#$3FFF,d0
00004128 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000412C                            
0000412C                            PlayLevel:
0000412C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00004132 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004138 7000                       		moveq	#0,d0
0000413A 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000413E 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004142 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004146 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
0000414A 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
0000414E 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
00004152 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00004156 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
0000415C 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000416C 4E75                       		rts	
0000416E                            ; ===========================================================================
0000416E                            ; ---------------------------------------------------------------------------
0000416E                            ; Level	select - level pointers
0000416E                            ; ---------------------------------------------------------------------------
0000416E                            		; correct level order
0000416E 0000                       		dc.b id_GHZ, 0
00004170 0001                       		dc.b id_GHZ, 1
00004172 0002                       		dc.b id_GHZ, 2
00004174 0200                       		dc.b id_MZ, 0
00004176 0201                       		dc.b id_MZ, 1
00004178 0202                       		dc.b id_MZ, 2
0000417A 0400                       		dc.b id_SYZ, 0
0000417C 0401                       		dc.b id_SYZ, 1
0000417E 0402                       		dc.b id_SYZ, 2
00004180 0100                       		dc.b id_LZ, 0
00004182 0101                       		dc.b id_LZ, 1
00004184 0102                       		dc.b id_LZ, 2
00004186 0300                       		dc.b id_SLZ, 0
00004188 0301                       		dc.b id_SLZ, 1
0000418A 0302                       		dc.b id_SLZ, 2
0000418C 0500                       		dc.b id_SBZ, 0
0000418E 0501                       		dc.b id_SBZ, 1
00004190 0103                       		dc.b id_LZ, 3
00004192 0502                       		dc.b id_SBZ, 2
00004194 0700                       		dc.b id_SS, 0		; Special Stage
00004196 8000                       		dc.w $8000		; Sound Test
00004198                            		even
00004198                            ; ---------------------------------------------------------------------------
00004198                            ; Level	select codes
00004198                            ; ---------------------------------------------------------------------------
00004198 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000041A0                            		even
000041A0                            
000041A0 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000041A6                            		even
000041A6                            ; ===========================================================================
000041A6                            
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            ; Demo mode
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            
000041A6                            GotoDemo:
000041A6 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000041AC                            
000041AC                            loc_33B6:
000041AC 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041B2 6100 F5C8                  		bsr.w	WaitForVBla
000041B6 6100 0000                  		bsr.w	DeformLayers
000041BA 6100 D88E                  		bsr.w	PaletteCycle
000041BE 6100 D312                  		bsr.w	RunPLC
000041C2 3038 D008                  		move.w	(v_objspace+obX).w,d0
000041C6 5440                       		addq.w	#2,d0
000041C8 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000041CC 0C40 1C00                  		cmpi.w	#$1C00,d0
000041D0 6500                       		blo.s	loc_33E4
000041D2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000041D8 4E75                       		rts	
000041DA                            ; ===========================================================================
000041DA                            
000041DA                            loc_33E4:
000041DA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000041E0 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
000041E4 4A78 F614                  		tst.w	(v_demolength).w
000041E8 6600 FFC2                  		bne.w	loc_33B6
000041F4 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000041F8 0240 0007                  		andi.w	#7,d0
000041FC D040                       		add.w	d0,d0
000041FE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004202 31C0 FE10                  		move.w	d0,(v_zone).w
00004206 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
0000420A 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004210 6500                       		blo.s	loc_3422	; if yes, branch
00004212 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004218                            
00004218                            loc_3422:
00004218 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
0000421E 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00004224 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004228 6600                       		bne.s	Demo_Level	; if not, branch
0000422A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004230 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00004234 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004238                            
00004238                            Demo_Level:
00004238 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000423E 7000                       		moveq	#0,d0
00004240 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004244 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004248 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000424C 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004254 4E75                       		rts	
00004256                            ; ===========================================================================
00004256                            ; ---------------------------------------------------------------------------
00004256                            ; Levels used in demos
00004256                            ; ---------------------------------------------------------------------------
00004256                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
0000425E                            		even
0000425E                            
0000425E                            ; ---------------------------------------------------------------------------
0000425E                            ; Subroutine to	change what you're selecting in the level select
0000425E                            ; ---------------------------------------------------------------------------
0000425E                            
0000425E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000425E                            
0000425E                            
0000425E                            LevSelControls:
0000425E 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004262 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004266 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004268 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000426C 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000426E                            
0000426E                            LevSel_UpDown:
0000426E 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004274 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004278 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000427C 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000427E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004282 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004286 6700                       		beq.s	LevSel_Down	; if not, branch
00004288 5340                       		subq.w	#1,d0		; move up 1 selection
0000428A 6400                       		bhs.s	LevSel_Down
0000428C 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000428E                            
0000428E                            LevSel_Down:
0000428E 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004292 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004294 5240                       		addq.w	#1,d0		; move down 1 selection
00004296 0C40 0015                  		cmpi.w	#$15,d0
0000429A 6500                       		blo.s	LevSel_Refresh
0000429C 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000429E                            
0000429E                            LevSel_Refresh:
0000429E 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000042A2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000042A6 4E75                       		rts	
000042A8                            ; ===========================================================================
000042A8                            
000042A8                            LevSel_SndTest:
000042A8 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
000042AE 6600                       		bne.s	LevSel_NoMove	; if not, branch
000042B0 1238 F605                  		move.b	(v_jpadpress1).w,d1
000042B4 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
000042B8 6700                       		beq.s	LevSel_NoMove	; if not, branch
000042BA 3038 FF84                  		move.w	(v_levselsound).w,d0
000042BE 0801 0002                  		btst	#bitL,d1	; is left pressed?
000042C2 6700                       		beq.s	LevSel_Right	; if not, branch
000042C4 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000042C6 6400                       		bhs.s	LevSel_Right
000042C8 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
000042CA                            
000042CA                            LevSel_Right:
000042CA 0801 0003                  		btst	#bitR,d1	; is right pressed?
000042CE 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000042D0 5240                       		addq.w	#1,d0		; add 1	to sound test
000042D2 0C40 0050                  		cmpi.w	#$50,d0
000042D6 6500                       		blo.s	LevSel_Refresh2
000042D8 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000042DA                            
000042DA                            LevSel_Refresh2:
000042DA 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000042DE 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000042E2                            
000042E2                            LevSel_NoMove:
000042E2 4E75                       		rts	
000042E4                            ; End of function LevSelControls
000042E4                            
000042E4                            ; ---------------------------------------------------------------------------
000042E4                            ; Subroutine to load level select text
000042E4                            ; ---------------------------------------------------------------------------
000042E4                            
000042E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042E4                            
000042E4                            
000042E4                            LevSelTextLoad:
000042E4                            
000042E4 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000042E4                            					; $E210 is a VRAM address
000042E4                            
000042E4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000042EA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042F0 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000042F6 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000042FA 7214                       		moveq	#$14,d1		; number of lines of text
000042FC                            
000042FC                            	LevSel_DrawAll:
000042FC 2D44 0004                  		move.l	d4,4(a6)
00004300 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004304 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
0000430A 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
0000430E                            
0000430E 7000                       		moveq	#0,d0
00004310 3038 FF82                  		move.w	(v_levselitem).w,d0
00004314 3200                       		move.w	d0,d1
00004316 283C 6210 0003             		move.l	#textpos,d4
0000431C EF48                       		lsl.w	#7,d0
0000431E 4840                       		swap	d0
00004320 D880                       		add.l	d0,d4
00004322 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004328 E749                       		lsl.w	#3,d1
0000432A 3001                       		move.w	d1,d0
0000432C D241                       		add.w	d1,d1
0000432E D240                       		add.w	d0,d1
00004330 D2C1                       		adda.w	d1,a1
00004332 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00004336 2D44 0004                  		move.l	d4,4(a6)
0000433A 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
0000433E 363C E680                  		move.w	#$E680,d3
00004342 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
00004348 6600                       		bne.s	LevSel_DrawSnd
0000434A 363C C680                  		move.w	#$C680,d3
0000434E                            
0000434E                            LevSel_DrawSnd:
00004358 3038 FF84                  		move.w	(v_levselsound).w,d0
0000435C 0640 0080                  		addi.w	#$80,d0
00004360 1400                       		move.b	d0,d2
00004362 E808                       		lsr.b	#4,d0
00004364 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004368 1002                       		move.b	d2,d0
0000436A 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000436E 4E75                       		rts	
00004370                            ; End of function LevSelTextLoad
00004370                            
00004370                            
00004370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004370                            
00004370                            
00004370                            LevSel_ChgSnd:
00004370 0240 000F                  		andi.w	#$F,d0
00004374 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004378 6500                       		blo.s	LevSel_Numb	; if not, branch
0000437A 5E00                       		addi.b	#7,d0		; use alpha characters
0000437C                            
0000437C                            	LevSel_Numb:
0000437C D043                       		add.w	d3,d0
0000437E 3C80                       		move.w	d0,(a6)
00004380 4E75                       		rts	
00004382                            ; End of function LevSel_ChgSnd
00004382                            
00004382                            
00004382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004382                            
00004382                            
00004382                            LevSel_ChgLine:
00004382 7417                       		moveq	#$17,d2		; number of characters per line
00004384                            
00004384                            	LevSel_LineLoop:
00004384 7000                       		moveq	#0,d0
00004386 1019                       		move.b	(a1)+,d0	; get character
00004388 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000438A 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000438E 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004392 4E75                       		rts	
00004394                            
00004394                            
00004394                            	LevSel_CharOk:
00004394 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004396 3C80                       		move.w	d0,(a6)		; send to VRAM
00004398 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000439C 4E75                       		rts	
0000439E                            ; End of function LevSel_ChgLine
0000439E                            
0000439E                            ; ===========================================================================
0000439E                            ; ---------------------------------------------------------------------------
0000439E                            ; Level	select menu text
0000439E                            ; ---------------------------------------------------------------------------
0000439E                            		incbin	"misc\Level Select Text (JP1).bin"
00004596                            		even
00004596                            ; ---------------------------------------------------------------------------
00004596                            ; Music	playlist
00004596                            ; ---------------------------------------------------------------------------
00004596                            MusicList:
00004596 00                         			dc.b bgm_GHZ    ; GHZ1
00004597 00                                 	dc.b bgm_LZ    ; GHZ2
00004598 00                                 	dc.b bgm_Seaside   ; GHZ3
00004599 00                                 	dc.b bgm_LZ    ; GHZ4
0000459A 00                                 	dc.b bgm_Stop    ; LZ1
0000459B 00                                 	dc.b bgm_Stop   ; LZ2
0000459C 00                                 	dc.b bgm_Stop    ; LZ3
0000459D 00                                 	dc.b bgm_SBZ3    ; LZ4
0000459E 00                                 	dc.b bgm_MZ    ; MZ1
0000459F 00                                 	dc.b bgm_SBZ    ; MZ2
000045A0 00                                 	dc.b bgm_MZ    ; MZ3
000045A1 00                                 	dc.b bgm_SBZ    ; MZ4
000045A2 00                                 	dc.b bgm_LZ    ; SLZ1
000045A3 00                                 	dc.b bgm_LZ    ; SLZ2
000045A4 00                                 	dc.b bgm_LZ    ; SLZ3
000045A5 00                                 	dc.b bgm_LZ    ; SLZ4
000045A6 00                                 	dc.b bgm_SYZ    ; SYZ1
000045A7 00                                 	dc.b bgm_SLZ    ; SYZ2
000045A8 00                                 	dc.b bgm_SLZ    ; SYZ3
000045A9 00                                 	dc.b bgm_SLZ    ; SYZ4
000045AA 00                                 	dc.b bgm_SBZ    ; SBZ1
000045AB 00                                 	dc.b bgm_SBZ    ; SBZ2
000045AC 00                                 	dc.b bgm_FZ		; SBZ3
000045AD 00                                 	dc.b bgm_SBZ    ; SBZ4
000045AE 00                                 	dc.b bgm_GHZ    ; GHZ1
000045AF 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B0 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B1 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B2                                    	even
000045B2                            ; ===========================================================================
000045B2                            
000045B2                            ; ---------------------------------------------------------------------------
000045B2                            ; Level
000045B2                            ; ---------------------------------------------------------------------------
000045B2                            
000045B2                            GM_Level:
000045B2 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
000045B8 4A78 FFF0                  		tst.w	(f_demo).w
000045BC 6B00                       		bmi.s	Level_NoMusicFade
000045C6                            
000045C6                            	Level_NoMusicFade:
000045C6 6100 CEFC                  		bsr.w	ClearPLC
000045CA 6100 D932                  		bsr.w	PaletteFadeOut
000045CE 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000045D2 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
000045D4 46FC 2700                  		disable_ints
000045E2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000045E8 6100 CA90                  		bsr.w	NemDec
000045EC 46FC 2300                  		enable_ints
000045F0 7000                       		moveq	#0,d0
000045F2 1038 FE10                  		move.b	(v_zone).w,d0
000045F6 E948                       		lsl.w	#4,d0
000045F8 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000045FE 45F2 0000                  		lea	(a2,d0.w),a2
00004602 7000                       		moveq	#0,d0
00004604 1012                       		move.b	(a2),d0
00004606 6700                       		beq.s	loc_37FC
00004608 6100 CE5C                  		bsr.w	AddPLC		; load level patterns
0000460C                            
0000460C                            loc_37FC:
0000460C 7000                       		moveq	#plcid_Main2,d0
0000460E 6100 CE56                  		bsr.w	AddPLC		; load standard	patterns
00004612                            
00004612                            Level_ClrRam:
00004612 43F8 D000                  		lea	(v_objspace).w,a1
00004616 7000                       		moveq	#0,d0
00004618 323C 07FF                  		move.w	#$7FF,d1
0000461C                            
0000461C                            	Level_ClrObjRam:
0000461C 22C0                       		move.l	d0,(a1)+
0000461E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004622                            
00004622 43F8 F628                  		lea	($FFFFF628).w,a1
00004626 7000                       		moveq	#0,d0
00004628 323C 0015                  		move.w	#$15,d1
0000462C                            
0000462C                            	Level_ClrVars1:
0000462C 22C0                       		move.l	d0,(a1)+
0000462E 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004632                            
00004632 43F8 F700                  		lea	(v_screenposx).w,a1
00004636 7000                       		moveq	#0,d0
00004638 323C 003F                  		move.w	#$3F,d1
0000463C                            
0000463C                            	Level_ClrVars2:
0000463C 22C0                       		move.l	d0,(a1)+
0000463E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004642                            
00004642 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004646 7000                       		moveq	#0,d0
00004648 323C 0047                  		move.w	#$47,d1
0000464C                            
0000464C                            	Level_ClrVars3:
0000464C 22C0                       		move.l	d0,(a1)+
0000464E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004652                            
00004652 46FC 2700                  		disable_ints
00004656 6100 C8A4                  		bsr.w	ClearScreen
0000465A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004660 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004664 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004668 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000466C 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004670 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004674 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004678 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000467C 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004682 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004686 31FC C800 C8FC             		ResetDMAQueue	
0000468C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004692 6600                       		bne.s	Level_LoadPal	; if not, branch
00004694                            
00004694 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004698 7000                       		moveq	#0,d0
0000469A 1038 FE11                  		move.b	(v_act).w,d0
0000469E D040                       		add.w	d0,d0
000046A0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000046A6 3031 0000                  		move.w	(a1,d0.w),d0
000046AA 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
000046AE 31C0 F648                  		move.w	d0,(v_waterpos2).w
000046B2 31C0 F64A                  		move.w	d0,(v_waterpos3).w
000046B6 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
000046BA 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
000046BE 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
000046C4                            
000046C4                            Level_LoadPal:
000046C4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000046CA 46FC 2300                  		move	#$2300,sr
000046CE 4EB9 0000 0000             		jsr		LoadPlayerPal
000046D4 6100 DB0E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000046D8 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
000046DE 6600                       		bne.s	Level_GetBgm	; if not, branch
000046E0 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
000046E6 6100 DB3C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000046EA 4A38 FE30                  		tst.b	($FFFFFE30).w
000046EE 6700                       		beq.s	Level_GetBgm
000046F0 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000046F6                            
000046F6                            	Level_GetBgm:
000046F6 4A78 FFF0                  		tst.w	(f_demo).w
000046FA 6B00                               	bmi.s	Level_SkipTtlCard
000046FC 7000                               	moveq	#0,d0
000046FE 3038 FE10                  		move.w	(v_zone).w,d0
00004702 E418                       		ror.b	#2,d0
00004704 EC48                       		lsr.w   #6,d0
00004706 43F9 0000 4596                     	lea	(MusicList).l,a1 ; load    music playlist
0000470C 1031 0000                          	move.b	(a1,d0.w),d0
00004710 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004714 6100 C8B0                          	bsr.w	PlaySound    ; play music
00004718 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
0000471E                            
0000471E                            
0000471E                            Level_TtlCardLoop:
0000471E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004724 6100 F056                  		bsr.w	WaitForVBla
00004728 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000472E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004734 6100 CD9C                  		bsr.w	RunPLC
00004738 3038 D108                  		move.w	(v_objspace+$108).w,d0
0000473C B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004740 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004742 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004746 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004748 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
0000474E                            
0000474E                            	Level_SkipTtlCard:
0000474E 4EB9 0000 0000             		jsr		LoadPlayerPal
00004754 6100 DA52                  		bsr.w	PalLoad1	; load Sonic's palette
00004758 6100 0000                  		bsr.w	LevelSizeLoad
0000475C 6100 0000                  		bsr.w	DeformLayers
00004760 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004766 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
0000476A 6100 0000                  		bsr.w	LoadTilesFromStart
0000476E 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004774 6100 0000                  		bsr.w	ColIndexLoad
00004778 6100 0000                  		bsr.w	LZWaterFeatures
0000477C 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004782 4A78 FFF0                  		tst.w	(f_demo).w
00004786 6B00                       		bmi.s	Level_ChkDebug
00004788 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000478E                            
0000478E                            Level_ChkDebug:
0000478E 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004792 6700                       		beq.s	Level_ChkWater	; if not, branch
00004794 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
0000479A 6700                       		beq.s	Level_ChkWater	; if not, branch
0000479C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000047A2                            
000047A2                            Level_ChkWater:
000047A2 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
000047A8 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
000047AE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000047B4 6600                       		bne.s	Level_LoadObj	; if not, branch
000047B6 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
000047BC 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
000047C2 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
000047C8 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
000047CE                            
000047CE                            Level_LoadObj:
000047CE 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000047D4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000047DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000047E0 7000                       		moveq	#0,d0
000047E2 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
000047E6 6600                       		bne.s	Level_SkipClr	; if yes, branch
000047E8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000047EC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000047F0 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
000047F4                            
000047F4                            	Level_SkipClr:
000047F4 11C0 FE1A                  		move.b	d0,(f_timeover).w
000047F8 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
000047FC 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004800 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004804 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004808 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
0000480C 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004810 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004814 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004818 31C0 FE02                  		move.w	d0,(f_restart).w
0000481C 31C0 FE04                  		move.w	d0,(v_framecount).w
00004820 6100 0000                  		bsr.w	OscillateNumInit
00004824 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
0000482A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004830 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004836 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
0000483C 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004842 7000                       		moveq	#0,d0
00004844 1038 FE10                  		move.b	(v_zone).w,d0
00004848 E548                       		lsl.w	#2,d0
0000484A 2271 0000                  		movea.l	(a1,d0.w),a1
0000484E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004852 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004854 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
0000485A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000485E 5340                       		subq.w	#1,d0
00004860 E548                       		lsl.w	#2,d0
00004862 2271 0000                  		movea.l	(a1,d0.w),a1
00004866                            
00004866                            Level_Demo:
00004866 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
0000486C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004870 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004876 4A78 FFF0                  		tst.w	(f_demo).w
0000487A 6A00                       		bpl.s	Level_ChkWaterPal
0000487C 31FC 021C F614             		move.w	#540,(v_demolength).w
00004882 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004888 6600                       		bne.s	Level_ChkWaterPal
0000488A 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004890                            
00004890                            Level_ChkWaterPal:
00004890 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004896 6600                       		bne.s	Level_Delay	; if not, branch
00004898 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
0000489A 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
000048A0 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
000048A2 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
000048A4                            
000048A4                            	Level_WtrNotSbz:
000048A4 6100 D9BA                  		bsr.w	PalLoad4_Water
000048A8                            
000048A8                            Level_Delay:
000048A8 323C 0003                  		move.w	#3,d1
000048AC                            
000048AC                            	Level_DelayLoop:
000048AC 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
000048B2 6100 EEC8                  		bsr.w	WaitForVBla
000048B6 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000048BA                            
000048BA 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
000048C0 6100 D59C                  		bsr.w	PalFadeIn_Alt
000048C4 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000048C8 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
000048CA 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
000048CE 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
000048D2 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
000048D6 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
000048DA 6000                       		bra.s	Level_StartGame
000048DC                            ; ===========================================================================
000048DC                            
000048DC                            Level_ClrCardArt:
000048DC 7000                       		moveq	#plcid_Explode,d0
000048DE 4EB9 0000 1466             		jsr	(AddPLC).l	; load explosion gfx
000048E4 7000                       		moveq	#0,d0
000048E6 1038 FE10                  		move.b	(v_zone).w,d0
000048EA 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
000048EE 4EB9 0000 1466             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
000048F4                            
000048F4                            Level_StartGame:
000048F4 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
000048FA                            
000048FA                            ; ---------------------------------------------------------------------------
000048FA                            ; Main level loop (when	all title card and loading sequences are finished)
000048FA                            ; ---------------------------------------------------------------------------
000048FA                            
000048FA                            Level_MainLoop:
000048FA 6100 C6DC                  		bsr.w	PauseGame
000048FE 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004904 6100 EE76                  		bsr.w	WaitForVBla
00004908 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
0000490C 6100 0000                  		bsr.w	MoveSonicInDemo
00004910 6100 0000                  		bsr.w	LZWaterFeatures
00004914 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000491A 4A78 FE02                  			tst.w   (f_restart).w
0000491E 6600 FC92                  			bne     GM_Level
00004922 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004926 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004928 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
0000492E 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004930                            
00004930                            	Level_DoScroll:
00004930 6100 0000                  		bsr.w	DeformLayers
00004934                            
00004934                            	Level_SkipScroll:
00004934 4EB9 0000 0000             		jsr	(BuildSprites).l
0000493A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004940 6100 D108                  		bsr.w	PaletteCycle
00004944 6100 CB8C                  		bsr.w	RunPLC
00004948 6100 0000                  		bsr.w	OscillateNumDo
0000494C 6100 0000                  		bsr.w	SynchroAnimate
00004950 6100 0000                  		bsr.w	SignpostArtLoad
00004954                            
00004954 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000495A 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
0000495C 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004962 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004966 4E75                       		rts	
00004968                            ; ===========================================================================
00004968                            
00004968                            Level_ChkDemo:
00004968 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
0000496C 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000496E 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004972 6700                       		beq.s	Level_EndDemo	; if not, branch
00004974 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000497A 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
0000497E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004984 4E75                       		rts	
00004986                            ; ===========================================================================
00004986                            
00004986                            Level_EndDemo:
00004986 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000498C 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
0000498E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004994 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004998 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
0000499A 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
000049A0                            
000049A0                            Level_FadeDemo:
000049A0 31FC 003C F614             		move.w	#$3C,(v_demolength).w
000049A6 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000049AC 4278 F794                  		clr.w	(v_palchgspeed).w
000049B0                            
000049B0                            	Level_FDLoop:
000049B0 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
000049B6 6100 EDC4                  		bsr.w	WaitForVBla
000049BA 6100 0000                  		bsr.w	MoveSonicInDemo
000049BE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000049C4 4EB9 0000 0000             		jsr	(BuildSprites).l
000049CA 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000049D0 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000049D4 6A00                       		bpl.s	loc_3BC8
000049D6 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000049DC 6100 D540                  		bsr.w	FadeOut_ToBlack
000049E0                            
000049E0                            loc_3BC8:
000049E0 4A78 F614                  		tst.w	(v_demolength).w
000049E4 66CA                       		bne.s	Level_FDLoop
000049E6 4E75                       		rts	
000049E8                            ; ===========================================================================
000049E8                            
000049E8                            		include	"_inc\LZWaterFeatures.asm"
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            ; Subroutine to	do special water effects in Labyrinth Zone
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            
000049E8                            LZWaterFeatures:
000049E8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000049EE 6600                       		bne.s	@notlabyrinth	; if not, branch
000049F0 4A38 F744                  			tst.b   (f_nobgscroll).w
000049F4 6600                       			bne.s	@setheight
000049F6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
000049FC 6400                       		bcc.s	@setheight	; if yes, skip other effects
000049FE                            
000049FE 6100 0000                  		bsr.w	LZWindTunnels
00004A02 6100 0000                  		bsr.w	LZWaterSlides
00004A06 6100 0000                  		bsr.w	LZDynamicWater
00004A0A                            
00004A0A                            @setheight:
00004A0A 4238 F64E                  		clr.b	(f_wtr_state).w
00004A0E 7000                       		moveq	#0,d0
00004A10 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004A14 E248                       		lsr.w	#1,d0
00004A16 D078 F648                  		add.w	(v_waterpos2).w,d0
00004A1A 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004A1E 3038 F646                  		move.w	(v_waterpos1).w,d0
00004A22 9078 F704                  		sub.w	(v_screenposy).w,d0
00004A26 6400                       		bcc.s	@isbelow
00004A28 4A40                       		tst.w	d0
00004A2A 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004A2C                            
00004A2C 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004A32 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004A38                            
00004A38                            	@isbelow:
00004A38 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004A3C 6500                       		bcs.s	@isvisible	; if yes, branch
00004A3E 303C 00DF                  		move.w	#223,d0
00004A42                            
00004A42                            	@isvisible:
00004A42 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004A46                            
00004A46                            @notlabyrinth:
00004A46 4E75                       		rts	
00004A48                            ; ===========================================================================
00004A48                            ; ---------------------------------------------------------------------------
00004A48                            ; Initial water heights
00004A48                            ; ---------------------------------------------------------------------------
00004A48 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004A4A 0328                       		dc.w $328	; Labyrinth 2
00004A4C 0900                       		dc.w $900	; Labyrinth 3
00004A4E 0228                       		dc.w $228	; Scrap Brain 3
00004A50                            		even
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            ; Labyrinth dynamic water routines
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            
00004A50                            LZDynamicWater:
00004A50 7000                       		moveq	#0,d0
00004A52 1038 FE11                  		move.b	(v_act).w,d0
00004A56 D040                       		add.w	d0,d0
00004A58 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004A5C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004A60 7200                       		moveq	#0,d1
00004A62 1238 F64C                  		move.b	(f_water).w,d1
00004A66 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004A6A 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004A6E 6700                       		beq.s	@exit		; if water level is correct, branch
00004A70 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004A72 4441                       		neg.w	d1		; set water to move up instead
00004A74                            
00004A74                            	@movewater:
00004A74 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004A78                            
00004A78                            	@exit:
00004A78 4E75                       		rts	
00004A7A                            ; ===========================================================================
00004A7A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004A7C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004A7E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004A80 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004A82                            ; ===========================================================================
00004A82                            
00004A82                            DynWater_LZ1:
00004A82 4E75                       		rts	
00004A84                            ; ===========================================================================
00004A84                            
00004A84                            DynWater_LZ2:
00004A84 3038 F700                  		move.w	(v_screenposx).w,d0
00004A88 323C 0328                  		move.w	#$328,d1
00004A8C 0C40 0500                  		cmpi.w	#$500,d0
00004A90 6500                       		bcs.s	@setwater
00004A92 323C 03C8                  		move.w	#$3C8,d1
00004A96 0C40 0B00                  		cmpi.w	#$B00,d0
00004A9A 6500                       		bcs.s	@setwater
00004A9C 323C 0428                  		move.w	#$428,d1
00004AA0                            
00004AA0                            	@setwater:
00004AA0 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004AA4 4E75                       		rts	
00004AA6                            ; ===========================================================================
00004AA6                            
00004AA6                            DynWater_LZ3:
00004AA6 3038 F700                  		move.w	(v_screenposx).w,d0
00004AAA 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004AAE 6600                       		bne.s	@routine2
00004AB0                            
00004AB0 323C 0900                  		move.w	#$900,d1
00004AB4 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004AB8 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004ABA 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004AC0 6500                       		bcs.s	@setwaterlz3
00004AC2 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004AC8 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004ACA                            
00004ACA 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004ACE 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004AD4 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004AE2                            
00004AE2                            	@setwaterlz3:
00004AE2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004AE6 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004AEA 4E75                       		rts	
00004AEC                            ; ===========================================================================
00004AEC                            
00004AEC                            @routine2:
00004AEC 5302                       		subq.b	#1,d2
00004AEE 6600                       		bne.s	@routine3
00004AF0 323C 04C8                  		move.w	#$4C8,d1
00004AF4 0C40 0770                  		cmpi.w	#$770,d0
00004AF8 6500                       		bcs.s	@setwater2
00004AFA 323C 0308                  		move.w	#$308,d1
00004AFE 0C40 1400                  		cmpi.w	#$1400,d0
00004B02 6500                       		bcs.s	@setwater2
00004B04 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004B0A 6700                       		beq.s	@sonicislow
00004B0C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004B12 6400                       		bcc.s	@sonicislow	; if yes, branch
00004B14 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004B1A 6400                       		bcc.s	@setwater2
00004B1C                            
00004B1C                            @sonicislow:
00004B1C 323C 0508                  		move.w	#$508,d1
00004B20 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004B24 0C40 1770                  		cmpi.w	#$1770,d0
00004B28 6500                       		bcs.s	@setwater2
00004B2A 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004B30                            
00004B30                            	@setwater2:
00004B30 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B34 4E75                       		rts	
00004B36                            ; ===========================================================================
00004B36                            
00004B36                            @routine3:
00004B36 5302                       		subq.b	#1,d2
00004B38 6600                       		bne.s	@routine4
00004B3A 323C 0508                  		move.w	#$508,d1
00004B3E 0C40 1860                  		cmpi.w	#$1860,d0
00004B42 6500                       		bcs.s	@setwater3
00004B44 323C 0188                  		move.w	#$188,d1
00004B48 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B4C 6400                       		bcc.s	@loc_3DC6
00004B4E B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004B52 6600                       		bne.s	@setwater3
00004B54                            
00004B54                            	@loc_3DC6:
00004B54 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004B5A                            
00004B5A                            	@setwater3:
00004B5A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B5E 4E75                       		rts	
00004B60                            ; ===========================================================================
00004B60                            
00004B60                            @routine4:
00004B60 5302                       		subq.b	#1,d2
00004B62 6600                       		bne.s	@routine5
00004B64 323C 0188                  		move.w	#$188,d1
00004B68 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B6C 6500                       		bcs.s	@setwater4
00004B6E 323C 0900                  		move.w	#$900,d1
00004B72 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004B76 6500                       		bcs.s	@setwater4
00004B78 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004B7E 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004B84 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004B8A 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004B90 4E75                       		rts	
00004B92                            ; ===========================================================================
00004B92                            
00004B92                            @setwater4:
00004B92 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B96 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004B9A 4E75                       		rts	
00004B9C                            ; ===========================================================================
00004B9C                            
00004B9C                            @routine5:
00004B9C 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004BA0 6500                       		bcs.s	@dontset	; if not, branch
00004BA2 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004BA8                            
00004BA8                            	@dontset:
00004BA8 4E75                       		rts	
00004BAA                            ; ===========================================================================
00004BAA                            
00004BAA                            DynWater_SBZ3:
00004BAA 323C 0228                  		move.w	#$228,d1
00004BAE 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004BB4 6500                       		bcs.s	@setwater
00004BB6 323C 04C8                  		move.w	#$4C8,d1
00004BBA                            
00004BBA                            	@setwater:
00004BBA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004BBE 4E75                       		rts
00004BC0                            
00004BC0                            ; ---------------------------------------------------------------------------
00004BC0                            ; Labyrinth Zone "wind tunnels"	subroutine
00004BC0                            ; ---------------------------------------------------------------------------
00004BC0                            
00004BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BC0                            
00004BC0                            
00004BC0                            LZWindTunnels:
00004BC0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004BC4 6600 0000                  		bne.w	@quit	; if yes, branch
00004BC8 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004BCE 7000                       		moveq	#0,d0
00004BD0 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004BD4 E748                       		lsl.w	#3,d0		; multiply by 8
00004BD6 D4C0                       		adda.w	d0,a2		; add to address for data
00004BD8 7200                       		moveq	#0,d1
00004BDA 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004BDE 6600                       		bne.s	@notact1	; if not, branch
00004BE0 7201                       		moveq	#1,d1
00004BE2 514A                       		subq.w	#8,a2		; use different data for act 1
00004BE4                            
00004BE4                            	@notact1:
00004BE4 43F8 D000                  		lea	(v_player).w,a1
00004BE8                            
00004BE8                            @chksonic:
00004BE8 3029 0008                  		move.w	obX(a1),d0
00004BEC B052                       		cmp.w	(a2),d0
00004BEE 6500 0000                  		bcs.w	@chknext
00004BF2 B06A 0004                  		cmp.w	4(a2),d0
00004BF6 6400 0000                  		bcc.w	@chknext
00004BFA 3429 000C                  		move.w	obY(a1),d2
00004BFE B46A 0002                  		cmp.w	2(a2),d2
00004C02 6500                       		bcs.s	@chknext
00004C04 B46A 0006                  		cmp.w	6(a2),d2
00004C08 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004C0A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004C0E 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004C12 6600                       		bne.s	@skipsound	; if not, branch
00004C1E                            
00004C1E                            	@skipsound:
00004C1E 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004C22 6600 0000                  		bne.w	@quit	; if yes, branch
00004C26 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004C2C 6400                       		bcc.s	@clrquit	; if yes, branch
00004C2E 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004C34 0440 0080                  		subi.w	#$80,d0
00004C38 B052                       		cmp.w	(a2),d0
00004C3A 6400                       		bcc.s	@movesonic
00004C3C 7002                       		moveq	#2,d0
00004C3E 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004C44 6600                       		bne.s	@notact2	; if not, branch
00004C46 4440                       		neg.w	d0
00004C48                            
00004C48                            	@notact2:
00004C48 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004C4C                            
00004C4C                            @movesonic:
00004C4C 5869 0008                  		addq.w	#4,obX(a1)
00004C50 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004C56 337C 0000 0012             		move.w	#0,obVelY(a1)
00004C5C 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004C62 08E9 0001 0022             		bset	#1,obStatus(a1)
00004C68 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004C6E 6700                       		beq.s	@down		; if not, branch
00004C70 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004C74                            
00004C74                            	@down:
00004C74 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004C7A 6700                       		beq.s	@end		; if not, branch
00004C7C 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004C80                            
00004C80                            	@end:
00004C80 4E75                       		rts	
00004C82                            ; ===========================================================================
00004C82                            
00004C82                            @chknext:
00004C82 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004C84 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004C88 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004C8C 6700                       		beq.s	@quit		; if yes, branch
00004C8E 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004C94                            
00004C94                            @clrquit:
00004C94 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004C98                            
00004C98                            @quit:
00004C98 4E75                       		rts	
00004C9A                            ; End of function LZWindTunnels
00004C9A                            
00004C9A                            ; ===========================================================================
00004C9A                            
00004C9A                            		;    left, top,  right, bottom boundaries
00004C9A 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004CA2 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004CAA 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004CB2 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004CBA 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004CC2                            		even
00004CC2                            
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            ; Labyrinth Zone water slide subroutine
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            
00004CC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CC2                            
00004CC2                            
00004CC2                            LZWaterSlides:
00004CC2 43F8 D000                  		lea	(v_player).w,a1
00004CC6 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004CCC 6600                       		bne.s	loc_3F6A	; if not, branch
00004CCE 3029 000C                  		move.w	obY(a1),d0
00004CD2 E248                       		lsr.w	#1,d0
00004CD4 0240 0380                  		andi.w	#$380,d0
00004CD8 1229 0008                  		move.b	obX(a1),d1
00004CDC 0241 007F                  		andi.w	#$7F,d1
00004CE0 D041                       		add.w	d1,d0
00004CE2 45F8 A400                  		lea	(v_lvllayout).w,a2
00004CE6 1032 0000                  		move.b	(a2,d0.w),d0
00004CEA 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004CEE 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004CF0                            
00004CF0                            loc_3F62:
00004CF0 B022                       		cmp.b	-(a2),d0
00004CF2 57C9 FFFC                  		dbeq	d1,loc_3F62
00004CF6 6700                       		beq.s	LZSlide_Move
00004CF8                            
00004CF8                            loc_3F6A:
00004CF8 4A38 F7CA                  		tst.b	(f_jumponly).w
00004CFC 6700                       		beq.s	locret_3F7A
00004CFE 337C 0005 003E             		move.w	#5,$3E(a1)
00004D04 4238 F7CA                  		clr.b	(f_jumponly).w
00004D08                            
00004D08                            locret_3F7A:
00004D08 4E75                       		rts	
00004D0A                            ; ===========================================================================
00004D0A                            
00004D0A                            LZSlide_Move:
00004D0A 0C41 0003                  		cmpi.w	#3,d1
00004D0E 6400                       		bcc.s	loc_3F84
00004D10 4E71                       		nop	
00004D12                            
00004D12                            loc_3F84:
00004D12 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004D18 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004D1C 1340 0020                  		move.b	d0,obInertia(a1)
00004D20 6A00                       		bpl.s	loc_3F9A
00004D22 08E9 0000 0022             		bset	#0,obStatus(a1)
00004D28                            
00004D28                            loc_3F9A:
00004D28 4229 0021                  		clr.b	obInertia+1(a1)
00004D2C 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004D32 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004D38 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004D3C 0200 001F                  		andi.b	#$1F,d0
00004D40 6600                       		bne.s	locret_3FBE
00004D4C                            
00004D4C                            locret_3FBE:
00004D4C 4E75                       		rts	
00004D4E                            ; End of function LZWaterSlides
00004D4E                            
00004D4E                            ; ===========================================================================
00004D4E                            ; byte_3FC0:
00004D4E                            Slide_Speeds:
00004D4E 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004D56 00                         		even
00004D56                            
00004D56                            Slide_Chunks:
00004D56 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004D57                            ; byte_3FCF
00004D57                            Slide_Chunks_End
00004D58 00                         		even
00004D58 00                         		even
00004D58                            		include	"_inc\MoveSonicInDemo.asm"
00004D58                            ; ---------------------------------------------------------------------------
00004D58                            ; Subroutine to	move Sonic in demo mode
00004D58                            ; ---------------------------------------------------------------------------
00004D58                            
00004D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D58                            
00004D58                            
00004D58                            MoveSonicInDemo:
00004D58 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004D5C 6600                       		bne.s	MDemo_On	; if yes, branch
00004D5E 4E75                       		rts	
00004D60                            ; ===========================================================================
00004D60                            
00004D60                            ; This is an unused subroutine for recording a demo
00004D60                            
00004D60                            DemoRecorder:
00004D60 43F9 0008 0000             		lea	($80000).l,a1
00004D66 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004D6A D2C0                       		adda.w	d0,a1
00004D6C 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004D70 B011                       		cmp.b	(a1),d0
00004D72 6600                       		bne.s	@next
00004D74 5229 0001                  		addq.b	#1,1(a1)
00004D78 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004D7E 6700                       		beq.s	@next
00004D80 4E75                       		rts	
00004D82                            
00004D82                            	@next:
00004D82 1340 0002                  		move.b	d0,2(a1)
00004D86 137C 0000 0003             		move.b	#0,3(a1)
00004D8C 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004D90 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00004D96 4E75                       		rts	
00004D98                            ; ===========================================================================
00004D98                            
00004D98                            MDemo_On:
00004D98 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004D9C 6A00                       		bpl.s	@dontquit	; if not, branch
00004D9E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004DA2 6B00                       		bmi.s	@dontquit	; if yes, branch
00004DA4 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004DAA                            
00004DAA                            	@dontquit:
00004DAA 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00004DB0 7000                       		moveq	#0,d0
00004DB2 1038 FE10                  		move.b	(v_zone).w,d0
00004DB6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00004DBC 6600                       		bne.s	@notspecial	; if not, branch
00004DBE 7006                       		moveq	#6,d0		; use demo #6
00004DC0                            
00004DC0                            	@notspecial:
00004DC0 E548                       		lsl.w	#2,d0
00004DC2 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
00004DC6 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004DCA 6A00                       		bpl.s	@notcredits	; if not, branch
00004DCC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00004DD2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004DD6 5340                       		subq.w	#1,d0
00004DD8 E548                       		lsl.w	#2,d0
00004DDA 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00004DDE                            
00004DDE                            	@notcredits:
00004DDE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004DE2 D2C0                       		adda.w	d0,a1
00004DE4 1011                       		move.b	(a1),d0
00004DE6 41F8 F604                  		lea	(v_jpadhold1).w,a0
00004DEA 1200                       		move.b	d0,d1
00004DEC 7400                       			moveq	#0,d2
00004DEE B500                       		eor.b	d2,d0
00004DF0 10C1                       		move.b	d1,(a0)+
00004DF2 C001                       		and.b	d1,d0
00004DF4 10C0                       		move.b	d0,(a0)+
00004DF6 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00004DFA 6400                       		bcc.s	@end
00004DFC 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00004E02 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004E06                            
00004E06                            	@end:
00004E06 4E75                       		rts	
00004E08                            ; End of function MoveSonicInDemo
00004E08                            
00004E08                            ; ===========================================================================
00004E08                            ; ---------------------------------------------------------------------------
00004E08                            ; Demo sequence	pointers
00004E08                            ; ---------------------------------------------------------------------------
00004E08 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00004E0C 0000 0000                  		dc.l Demo_GHZ
00004E10 0000 0000                  		dc.l Demo_MZ
00004E14 0000 0000                  		dc.l Demo_MZ
00004E18 0000 0000                  		dc.l Demo_SYZ
00004E1C 0000 0000                  		dc.l Demo_SYZ
00004E20 0000 0000                  		dc.l Demo_SS
00004E24 0000 0000                  		dc.l Demo_SS
00004E28                            
00004E28 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00004E2C 0000 0000                  		dc.l Demo_EndMZ
00004E30 0000 0000                  		dc.l Demo_EndSYZ
00004E34 0000 0000                  		dc.l Demo_EndLZ
00004E38 0000 0000                  		dc.l Demo_EndSLZ
00004E3C 0000 0000                  		dc.l Demo_EndSBZ1
00004E40 0000 0000                  		dc.l Demo_EndSBZ2
00004E44 0000 0000                  		dc.l Demo_EndGHZ2
00004E48                            
00004E48 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004E58 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004E68 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004E78                            		even
00004E78                            		even
00004E78                            
00004E78                            ; ---------------------------------------------------------------------------
00004E78                            ; Collision index pointer loading subroutine
00004E78                            ; ---------------------------------------------------------------------------
00004E78                            
00004E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E78                            
00004E78                            
00004E78                            ColIndexLoad:
00004E78 7000                       		moveq	#0,d0
00004E7A 1038 FE10                  		move.b	(v_zone).w,d0
00004E7E E548                       		lsl.w	#2,d0
00004E80 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
00004E86 4E75                       		rts	
00004E88                            ; End of function ColIndexLoad
00004E88                            
00004E88                            ; ===========================================================================
00004E88                            ; ---------------------------------------------------------------------------
00004E88                            ; Collision index pointers
00004E88                            ; ---------------------------------------------------------------------------
00004E88 0000 0000                  ColPointers:	dc.l Col_GHZ
00004E8C 0000 0000                  		dc.l Col_LZ
00004E90 0000 0000                  		dc.l Col_MZ
00004E94 0000 0000                  		dc.l Col_SLZ
00004E98 0000 0000                  		dc.l Col_SYZ
00004E9C 0000 0000                  		dc.l Col_SBZ
00004EA0                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00004EA0                            
00004EA0                            		include	"_inc\Oscillatory Routines.asm"
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            ; Oscillating number subroutines
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            
00004EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EA0                            
00004EA0                            ; Initialise the values
00004EA0                            
00004EA0                            OscillateNumInit:
00004EA0 43F8 FE5E                  		lea	(v_oscillate).w,a1
00004EA4 45F9 0000 0000             		lea	(@baselines).l,a2
00004EAA 7220                       		moveq	#$20,d1
00004EAC                            
00004EAC                            	@loop:
00004EAC 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00004EAE 51C9 FFFC                  		dbf	d1,@loop
00004EB2 4E75                       		rts	
00004EB4                            
00004EB4                            
00004EB4                            ; ===========================================================================
00004EB4 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
00004EB6 0080 0000                  		dc.w $80, 0
00004EBA 0080 0000                  		dc.w $80, 0
00004EBE 0080 0000                  		dc.w $80, 0
00004EC2 0080 0000                  		dc.w $80, 0
00004EC6 0080 0000                  		dc.w $80, 0
00004ECA 0080 0000                  		dc.w $80, 0
00004ECE 0080 0000                  		dc.w $80, 0
00004ED2 0080 0000                  		dc.w $80, 0
00004ED6 0080 0000                  		dc.w $80, 0
00004EDA 50F0 011E                  		dc.w $50F0, $11E
00004EDE 2080 00B4                  		dc.w $2080, $B4
00004EE2 3080 010E                  		dc.w $3080, $10E
00004EE6 5080 01C2                  		dc.w $5080, $1C2
00004EEA 7080 0276                  		dc.w $7080, $276
00004EEE 0080 0000                  		dc.w $80, 0
00004EF2 0080 0000                  		dc.w $80, 0
00004EF6                            		even
00004EF6                            
00004EF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EF6                            
00004EF6                            ; Oscillate values
00004EF6                            
00004EF6                            OscillateNumDo:
00004EF6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004EFC 6400                       		bcc.s	@end		; if yes, branch
00004EFE 43F8 FE5E                  		lea	(v_oscillate).w,a1
00004F02 45F9 0000 0000             		lea	(@settings).l,a2
00004F08 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00004F0A 720F                       		moveq	#$F,d1
00004F0C                            
00004F0C                            @loop:
00004F0C 341A                       		move.w	(a2)+,d2	; get frequency
00004F0E 381A                       		move.w	(a2)+,d4	; get amplitude
00004F10 0303                       		btst	d1,d3		; check oscillation direction
00004F12 6600                       		bne.s	@down		; branch if 1
00004F14                            
00004F14                            	@up:
00004F14 3029 0002                  		move.w	2(a1),d0	; get current rate
00004F18 D042                       		add.w	d2,d0		; add frequency
00004F1A 3340 0002                  		move.w	d0,2(a1)
00004F1E D151                       		add.w	d0,0(a1)	; add rate to value
00004F20 B811                       		cmp.b	0(a1),d4
00004F22 6200                       		bhi.s	@next
00004F24 03C3                       		bset	d1,d3
00004F26 6000                       		bra.s	@next
00004F28                            
00004F28                            	@down:
00004F28 3029 0002                  		move.w	2(a1),d0
00004F2C 9042                       		sub.w	d2,d0
00004F2E 3340 0002                  		move.w	d0,2(a1)
00004F32 D151                       		add.w	d0,0(a1)
00004F34 B811                       		cmp.b	0(a1),d4
00004F36 6300                       		bls.s	@next
00004F38 0383                       		bclr	d1,d3
00004F3A                            
00004F3A                            	@next:
00004F3A 5849                       		addq.w	#4,a1
00004F3C 51C9 FFCE                  		dbf	d1,@loop
00004F40 31C3 FE5E                  		move.w	d3,(v_oscillate).w
00004F44                            
00004F44                            @end:
00004F44 4E75                       		rts	
00004F46                            ; End of function OscillateNumDo
00004F46                            
00004F46                            ; ===========================================================================
00004F46 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
00004F4A 0002 0018                  		dc.w 2,	$18
00004F4E 0002 0020                  		dc.w 2,	$20
00004F52 0002 0030                  		dc.w 2,	$30
00004F56 0004 0020                  		dc.w 4,	$20
00004F5A 0008 0008                  		dc.w 8,	8
00004F5E 0008 0040                  		dc.w 8,	$40
00004F62 0004 0040                  		dc.w 4,	$40
00004F66 0002 0050                  		dc.w 2,	$50
00004F6A 0002 0050                  		dc.w 2,	$50
00004F6E 0002 0020                  		dc.w 2,	$20
00004F72 0003 0030                  		dc.w 3,	$30
00004F76 0005 0050                  		dc.w 5,	$50
00004F7A 0007 0070                  		dc.w 7,	$70
00004F7E 0002 0010                  		dc.w 2,	$10
00004F82 0002 0010                  		dc.w 2,	$10
00004F86                            		even
00004F86                            		even
00004F86                            
00004F86                            ; ---------------------------------------------------------------------------
00004F86                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
00004F86                            ; ---------------------------------------------------------------------------
00004F86                            
00004F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F86                            
00004F86                            
00004F86                            SynchroAnimate:
00004F86                            
00004F86                            ; Used for GHZ spiked log
00004F86                            Sync1:
00004F86 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00004F8A 6A00                       		bpl.s	Sync2		; if not, branch
00004F8C 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00004F92 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00004F96 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00004F9C                            
00004F9C                            ; Used for rings and giant rings
00004F9C                            Sync2:
00004F9C 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00004FA0 6A00                       		bpl.s	Sync3
00004FA2 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00004FA8 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00004FAC 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00004FB2                            
00004FB2                            ; Used for nothing
00004FB2                            Sync3:
00004FB2 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
00004FB6 6A00                       		bpl.s	Sync4
00004FB8 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00004FBE 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00004FC2 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00004FC8 6500                       		blo.s	Sync4
00004FCA 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00004FD0                            
00004FD0                            ; Used for bouncing rings
00004FD0                            Sync4:
00004FD0 4A38 FEC6                  		tst.b	(v_ani3_time).w
00004FD4 6700                       		beq.s	SyncEnd
00004FD6 7000                       		moveq	#0,d0
00004FD8 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00004FDC D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00004FE0 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00004FE4 EF58                       		rol.w	#7,d0
00004FE6 0240 0003                  		andi.w	#3,d0
00004FEA 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00004FEE 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00004FF2                            
00004FF2                            SyncEnd:
00004FF2 4E75                       		rts	
00004FF4                            ; End of function SynchroAnimate
00004FF4                            
00004FF4                            ; ---------------------------------------------------------------------------
00004FF4                            ; End-of-act signpost pattern loading subroutine
00004FF4                            ; ---------------------------------------------------------------------------
00004FF4                            
00004FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FF4                            
00004FF4                            
00004FF4                            SignpostArtLoad:
00004FF4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004FF8 6600 0000                  		bne.w	@exit		; if yes, branch
00004FFC 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005002 6700                       		beq.s	@exit		; if yes, branch
00005004                            
00005004 3038 F700                  		move.w	(v_screenposx).w,d0
00005008 3238 F72A                  		move.w	(v_limitright2).w,d1
0000500C 0441 0100                  		subi.w	#$100,d1
00005010 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005012 6D00                       		blt.s	@exit		; if not, branch
00005014 4A38 FE1E                  		tst.b	(f_timecount).w
00005018 6700                       		beq.s	@exit
0000501A B278 F728                  		cmp.w	(v_limitleft2).w,d1
0000501E 6700                       		beq.s	@exit
00005020 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
00005024 7000                       		moveq	#plcid_Signpost,d0
00005026 6000 C470                  		bra.w	NewPLC		; load signpost	patterns
0000502A                            
0000502A                            	@exit:
0000502A 4E75                       		rts	
0000502C                            ; End of function SignpostArtLoad
0000502C                            
0000502C                            ; ===========================================================================
0000502C                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
000050AC                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000051DC                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
0000525C                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
0000535C                            ; ===========================================================================
0000535C                            
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            ; Special Stage
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            
0000535C                            GM_Special:
00005364 6100 CCC2                  		bsr.w	PaletteWhiteOut
00005368 46FC 2700                  		disable_ints
0000536C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005372 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005376 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000537A 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005380 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00005384 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005388 0200 00BF                  		andi.b	#$BF,d0
0000538C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005392 6100 BB68                  		bsr.w	ClearScreen
00005396 46FC 2300                  		enable_ints
0000539A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
000053BC                            
000053BC                            	SS_WaitForDMA:
000053BC 3215                       		move.w	(a5),d1		; read control port ($C00004)
000053BE 0801 0001                  		btst	#1,d1		; is DMA running?
000053C2 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
000053C4 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000053C8 6100 0000                  		bsr.w	SS_BGLoad
000053CC 7000                       		moveq	#plcid_SpecialStage,d0
000053CE 6100 C202                  		bsr.w	QuickPLC	; load special stage patterns
000053D2                            
000053D2 43F8 D000                  		lea	(v_objspace).w,a1
000053D6 7000                       		moveq	#0,d0
000053D8 323C 07FF                  		move.w	#$7FF,d1
000053DC                            	SS_ClrObjRam:
000053DC 22C0                       		move.l	d0,(a1)+
000053DE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000053E2                            
000053E2 43F8 F700                  		lea	(v_screenposx).w,a1
000053E6 7000                       		moveq	#0,d0
000053E8 323C 003F                  		move.w	#$3F,d1
000053EC                            	SS_ClrRam1:
000053EC 22C0                       		move.l	d0,(a1)+
000053EE 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
000053F2                            
000053F2 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000053F6 7000                       		moveq	#0,d0
000053F8 323C 0027                  		move.w	#$27,d1
000053FC                            	SS_ClrRam2:
000053FC 22C0                       		move.l	d0,(a1)+
000053FE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005402                            
00005402 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00005406 7000                       		moveq	#0,d0
00005408 323C 007F                  		move.w	#$7F,d1
0000540C                            	SS_ClrNemRam:
0000540C 22C0                       		move.l	d0,(a1)+
0000540E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005412                            
00005412 4238 F64E                  		clr.b	(f_wtr_state).w
00005416 4278 FE02                  		clr.w	(f_restart).w
0000541A 700A                       		moveq	#palid_Special,d0
0000541C 6100 CD8A                  		bsr.w	PalLoad1	; load special stage palette
00005420 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005426 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
0000542E 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
00005436 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
0000543C 6100 0000                  		bsr.w	PalCycle_SS
00005440 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
00005444 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
00005452 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00005458 43F9 0000 4E08             		lea	(DemoDataPtr).l,a1
0000545E 7006                       		moveq	#6,d0
00005460 E548                       		lsl.w	#2,d0
00005462 2271 0000                  		movea.l	(a1,d0.w),a1
00005466 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
0000546C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005470 4278 FE20                  		clr.w	(v_rings).w
00005474 4238 FE1B                  		clr.b	(v_lifecount).w
00005478 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
0000547E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005484 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005488 6700                       		beq.s	SS_NoDebug	; if not, branch
0000548A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005490 6700                       		beq.s	SS_NoDebug	; if not, branch
00005492 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005498                            
00005498                            	SS_NoDebug:
00005498 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000549C 0000 0040                  		ori.b	#$40,d0
000054A0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000054A6 6100 CAD4                  		bsr.w	PaletteWhiteIn
000054AA                            
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            ; Main Special Stage loop
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            
000054AA                            SS_MainLoop:
000054AA 6100 BB2C                  		bsr.w	PauseGame
000054AE 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
000054B4 6100 E2C6                  		bsr.w	WaitForVBla
000054B8 6100 F89E                  		bsr.w	MoveSonicInDemo
000054BC 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000054C2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000054C8 4EB9 0000 0000             		jsr	(BuildSprites).l
000054CE 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000054D4 6100 0000                  		bsr.w	SS_BGAnimate
000054D8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000054DC 6700                       		beq.s	SS_ChkEnd	; if not, branch
000054DE 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
000054E2 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000054E6                            
000054E6                            	SS_ChkEnd:
000054E6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000054EC 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000054F0                            
000054F0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000054F4 6600 0000                  		bne.w	SS_ToLevel
000054F8 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000054FE 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005504 6500                       		blo.s	SS_Finish	; if not, branch
00005506 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000550A                            
0000550A                            SS_Finish:
0000550A 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005516 4278 F794                  		clr.w	(v_palchgspeed).w
0000551A                            
0000551A                            	SS_FinLoop:
0000551A 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005520 6100 E25A                  		bsr.w	WaitForVBla
00005524 6100 F832                  		bsr.w	MoveSonicInDemo
00005528 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000552E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005534 4EB9 0000 0000             		jsr	(BuildSprites).l
0000553A 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005540 6100 0000                  		bsr.w	SS_BGAnimate
00005544 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005548 6A00                       		bpl.s	loc_47D4
0000554A 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00005550 6100 CAF6                  		bsr.w	WhiteOut_ToWhite
00005554                            
00005554                            loc_47D4:
00005554 4A78 F614                  		tst.w	(v_demolength).w
00005558 66C0                       		bne.s	SS_FinLoop
0000555A                            
0000555A 46FC 2700                  		disable_ints
0000555E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005564 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005568 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000556C 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005570 6100 B98A                  		bsr.w	ClearScreen
0000557E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005584 6100 BAF4                  		bsr.w	NemDec
00005588 4EB9 0000 0000             		jsr	(Hud_Base).l
0000558E 31FC C800 C8FC             		ResetDMAQueue	
00005594 46FC 2300                  		enable_ints
00005598 7011                       		moveq	#palid_SSResult,d0
0000559A 6100 CC48                  		bsr.w	PalLoad2	; load results screen palette
0000559E 7000                       		moveq	#plcid_Main,d0
000055A0 6100 BEF6                  		bsr.w	NewPLC
000055A4 7000                       		moveq	#plcid_SSResult,d0
000055A6 6100 BEBE                  		bsr.w	AddPLC		; load results screen patterns
000055AA 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
000055B0 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
000055B6 3038 FE20                  		move.w	(v_rings).w,d0
000055BA C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000055BE 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
000055CC                            
000055CC 43F8 D000                  		lea	(v_objspace).w,a1
000055D0 7000                       		moveq	#0,d0
000055D2 323C 07FF                  		move.w	#$7FF,d1
000055D6                            	SS_EndClrObjRam:
000055D6 22C0                       		move.l	d0,(a1)+
000055D8 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000055DC                            
000055DC 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
000055E2                            
000055E2                            SS_NormalExit:
000055E2 6100 B9F4                  		bsr.w	PauseGame
000055E6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000055EC 6100 E18E                  		bsr.w	WaitForVBla
000055F0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000055F6 4EB9 0000 0000             		jsr	(BuildSprites).l
000055FC 6100 BED4                  		bsr.w	RunPLC
00005600 4A78 FE02                  		tst.w	(f_restart).w
00005604 67DC                       		beq.s	SS_NormalExit
00005606 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000560A 66D6                       		bne.s	SS_NormalExit
00005614 6100 CA12                  		bsr.w	PaletteWhiteOut
00005618 4E75                       		rts	
0000561A                            ; ===========================================================================
0000561A                            
0000561A                            SS_ToSegaScreen:
0000561A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005620 4E75                       		rts
00005622                            
00005622 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005628 67F0                       		beq.s	SS_ToSegaScreen
0000562A 4E75                       		rts
0000562C                            
0000562C                            ; ---------------------------------------------------------------------------
0000562C                            ; Special stage	background loading subroutine
0000562C                            ; ---------------------------------------------------------------------------
0000562C                            
0000562C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000562C                            
0000562C                            
0000562C                            SS_BGLoad:
0000562C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005632 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005638 303C 4051                  		move.w	#$4051,d0
0000563C 6100 BFC6                  		bsr.w	EniDec
00005640 263C 5000 0001             		move.l	#$50000001,d3
00005646 45F9 00FF 0080             		lea	($FF0080).l,a2
0000564C 7E06                       		moveq	#6,d7
0000564E                            
0000564E                            loc_48BE:
0000564E 2003                       		move.l	d3,d0
00005650 7C03                       		moveq	#3,d6
00005652 7800                       		moveq	#0,d4
00005654 0C47 0003                  		cmpi.w	#3,d7
00005658 6400                       		bhs.s	loc_48CC
0000565A 7801                       		moveq	#1,d4
0000565C                            
0000565C                            loc_48CC:
0000565C 7A07                       		moveq	#7,d5
0000565E                            
0000565E                            loc_48CE:
0000565E 224A                       		movea.l	a2,a1
00005660 0A04 0001                  		eori.b	#1,d4
00005664 6600                       		bne.s	loc_48E2
00005666 0C47 0006                  		cmpi.w	#6,d7
0000566A 6600                       		bne.s	loc_48F2
0000566C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005672                            
00005672                            loc_48E2:
00005672 48E7 F800                  		movem.l	d0-d4,-(sp)
00005676 7207                       		moveq	#7,d1
00005678 7407                       		moveq	#7,d2
0000567A 6100 B9D4                  		bsr.w	TilemapToVRAM
0000567E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005682                            
00005682                            loc_48F2:
00005682 0680 0010 0000             		addi.l	#$100000,d0
00005688 51CD FFD4                  		dbf	d5,loc_48CE
0000568C 0680 0380 0000             		addi.l	#$3800000,d0
00005692 0A04 0001                  		eori.b	#1,d4
00005696 51CE FFC4                  		dbf	d6,loc_48CC
0000569A 0683 1000 0000             		addi.l	#$10000000,d3
000056A0 6A00                       		bpl.s	loc_491C
000056A2 4843                       		swap	d3
000056A4 0683 0000 C000             		addi.l	#$C000,d3
000056AA 4843                       		swap	d3
000056AC                            
000056AC                            loc_491C:
000056AC D4FC 0080                  		adda.w	#$80,a2
000056B0 51CF FF9C                  		dbf	d7,loc_48BE
000056B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000056BA 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000056C0 303C 4000                  		move.w	#$4000,d0
000056C4 6100 BF3E                  		bsr.w	EniDec
000056C8 43F9 00FF 0000             		lea	($FF0000).l,a1
000056CE 203C 4000 0003             		move.l	#$40000003,d0
000056D4 723F                       		moveq	#$3F,d1
000056D6 741F                       		moveq	#$1F,d2
000056D8 6100 B976                  		bsr.w	TilemapToVRAM
000056DC 43F9 00FF 0000             		lea	($FF0000).l,a1
000056E2 203C 5000 0003             		move.l	#$50000003,d0
000056E8 723F                       		moveq	#$3F,d1
000056EA 743F                       		moveq	#$3F,d2
000056EC 6100 B962                  		bsr.w	TilemapToVRAM
000056F0 4E75                       		rts	
000056F2                            ; End of function SS_BGLoad
000056F2                            
000056F2                            ; ---------------------------------------------------------------------------
000056F2                            ; Palette cycling routine - special stage
000056F2                            ; ---------------------------------------------------------------------------
000056F2                            
000056F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056F2                            
000056F2                            
000056F2                            PalCycle_SS:
000056F2 4A78 F63A                  		tst.w	(f_pause).w
000056F6 6600                       		bne.s	locret_49E6
000056F8 5378 F79C                  		subq.w	#1,(v_palss_time).w
000056FC 6A00                       		bpl.s	locret_49E6
000056FE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005704 3038 F79A                  		move.w	(v_palss_num).w,d0
00005708 5278 F79A                  		addq.w	#1,(v_palss_num).w
0000570C 0240 001F                  		andi.w	#$1F,d0
00005710 E548                       		lsl.w	#2,d0
00005712 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005718 D0C0                       		adda.w	d0,a0
0000571A 1018                       		move.b	(a0)+,d0
0000571C 6A00                       		bpl.s	loc_4992
0000571E 303C 01FF                  		move.w	#$1FF,d0
00005722                            
00005722                            loc_4992:
00005722 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005726 7000                       		moveq	#0,d0
00005728 1018                       		move.b	(a0)+,d0
0000572A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000572E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005734 43F1 0000                  		lea	(a1,d0.w),a1
00005738 303C 8200                  		move.w	#-$7E00,d0
0000573C 1019                       		move.b	(a1)+,d0
0000573E 3C80                       		move.w	d0,(a6)
00005740 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005744 303C 8400                  		move.w	#-$7C00,d0
00005748 1018                       		move.b	(a0)+,d0
0000574A 3C80                       		move.w	d0,(a6)
0000574C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005756 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
0000575E 7000                       		moveq	#0,d0
00005760 1018                       		move.b	(a0)+,d0
00005762 6B00                       		bmi.s	loc_49E8
00005764 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000576A D2C0                       		adda.w	d0,a1
0000576C 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005770 24D9                       		move.l	(a1)+,(a2)+
00005772 24D9                       		move.l	(a1)+,(a2)+
00005774 24D9                       		move.l	(a1)+,(a2)+
00005776                            
00005776                            locret_49E6:
00005776 4E75                       		rts	
00005778                            ; ===========================================================================
00005778                            
00005778                            loc_49E8:
00005778 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000577C 0C40 008A                  		cmpi.w	#$8A,d0
00005780 6500                       		blo.s	loc_49F4
00005782 5241                       		addq.w	#1,d1
00005784                            
00005784                            loc_49F4:
00005784 C2FC 002A                  		mulu.w	#$2A,d1
00005788 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000578E D2C1                       		adda.w	d1,a1
00005790 0240 007F                  		andi.w	#$7F,d0
00005794 0880 0000                  		bclr	#0,d0
00005798 6700                       		beq.s	loc_4A18
0000579A 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
0000579E 24D1                       		move.l	(a1),(a2)+
000057A0 24E9 0004                  		move.l	4(a1),(a2)+
000057A4 24E9 0008                  		move.l	8(a1),(a2)+
000057A8                            
000057A8                            loc_4A18:
000057A8 D2FC 000C                  		adda.w	#$C,a1
000057AC 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
000057B0 0C40 000A                  		cmpi.w	#$A,d0
000057B4 6500                       		blo.s	loc_4A2E
000057B6 0440 000A                  		subi.w	#$A,d0
000057BA 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
000057BE                            
000057BE                            loc_4A2E:
000057BE 3200                       		move.w	d0,d1
000057C0 D040                       		add.w	d0,d0
000057C2 D041                       		add.w	d1,d0
000057C4 D2C0                       		adda.w	d0,a1
000057C6 24D9                       		move.l	(a1)+,(a2)+
000057C8 34D9                       		move.w	(a1)+,(a2)+
000057CA 4E75                       		rts	
000057CC                            ; End of function PalCycle_SS
000057CC                            
000057CC                            ; ===========================================================================
000057CC 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000057DC                            
000057DC 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000057EC 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000057FC FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000580C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000581C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000582C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000583C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000584C                            		even
0000584C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000585A                            		even
0000585A                            
0000585A                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
000058A2                            		even
000058A2                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005974                            		even
00005974                            
00005974                            ; ---------------------------------------------------------------------------
00005974                            ; Subroutine to	make the special stage background animated
00005974                            ; ---------------------------------------------------------------------------
00005974                            
00005974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005974                            
00005974                            
00005974                            SS_BGAnimate:
00005974 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005978 6600                       		bne.s	loc_4BF6
0000597A 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005980 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005986                            
00005986                            loc_4BF6:
00005986 0C40 0008                  		cmpi.w	#8,d0
0000598A 6400                       		bhs.s	loc_4C4E
0000598C 0C40 0006                  		cmpi.w	#6,d0
00005990 6600                       		bne.s	loc_4C10
00005992 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005996 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
0000599A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000059A0                            
000059A0                            loc_4C10:
000059A0 7000                       		moveq	#0,d0
000059A2 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000059A6 4440                       		neg.w	d0
000059A8 4840                       		swap	d0
000059AA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000059B0 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
000059B4 7609                       		moveq	#9,d3
000059B6                            
000059B6                            loc_4C26:
000059B6 302B 0002                  		move.w	2(a3),d0
000059BA 6100 DDF2                  		bsr.w	CalcSine
000059BE 7400                       		moveq	#0,d2
000059C0 1419                       		move.b	(a1)+,d2
000059C2 C1C2                       		muls.w	d2,d0
000059C4 E080                       		asr.l	#8,d0
000059C6 36C0                       		move.w	d0,(a3)+
000059C8 1419                       		move.b	(a1)+,d2
000059CA 4882                       		ext.w	d2
000059CC D55B                       		add.w	d2,(a3)+
000059CE 51CB FFE6                  		dbf	d3,loc_4C26
000059D2 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
000059D6 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000059DC 6000                       		bra.s	loc_4C7E
000059DE                            ; ===========================================================================
000059DE                            
000059DE                            loc_4C4E:
000059DE 0C40 000C                  		cmpi.w	#$C,d0
000059E2 6600                       		bne.s	loc_4C74
000059E4 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
000059E8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000059EC 243C 0001 8000             		move.l	#$18000,d2
000059F2 7206                       		moveq	#6,d1
000059F4                            
000059F4                            loc_4C64:
000059F4 2013                       		move.l	(a3),d0
000059F6 9082                       		sub.l	d2,d0
000059F8 26C0                       		move.l	d0,(a3)+
000059FA 0482 0000 2000             		subi.l	#$2000,d2
00005A00 51C9 FFF2                  		dbf	d1,loc_4C64
00005A04                            
00005A04                            loc_4C74:
00005A04 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005A08 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005A0E                            
00005A0E                            loc_4C7E:
00005A0E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005A12 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005A16 4440                       		neg.w	d0
00005A18 4840                       		swap	d0
00005A1A 7600                       		moveq	#0,d3
00005A1C 161A                       		move.b	(a2)+,d3
00005A1E 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005A22 4442                       		neg.w	d2
00005A24 0242 00FF                  		andi.w	#$FF,d2
00005A28 E54A                       		lsl.w	#2,d2
00005A2A                            
00005A2A                            loc_4C9A:
00005A2A 301B                       		move.w	(a3)+,d0
00005A2C 544B                       		addq.w	#2,a3
00005A2E 7200                       		moveq	#0,d1
00005A30 121A                       		move.b	(a2)+,d1
00005A32 5341                       		subq.w	#1,d1
00005A34                            
00005A34                            loc_4CA4:
00005A34 2380 2000                  		move.l	d0,(a1,d2.w)
00005A38 5842                       		addq.w	#4,d2
00005A3A 0242 03FC                  		andi.w	#$3FC,d2
00005A3E 51C9 FFF4                  		dbf	d1,loc_4CA4
00005A42 51CB FFE6                  		dbf	d3,loc_4C9A
00005A46 4E75                       		rts	
00005A48                            ; End of function SS_BGAnimate
00005A48                            
00005A48                            ; ===========================================================================
00005A48 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005A54                            		even
00005A54 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005A5C                            		even
00005A5C 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005A70                            		even
00005A70                            
00005A70                            ; ===========================================================================
00005A70                            
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            ; Continue screen
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            
00005A70                            GM_Continue:
00005A70 6100 C48C                  		bsr.w	PaletteFadeOut
00005A74 46FC 2700                  		disable_ints
00005A78 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005A7C 0200 00BF                  		andi.b	#$BF,d0
00005A80 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005A86 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A8C 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005A90 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005A94 6100 B466                  		bsr.w	ClearScreen
00005A98 31FC C800 C8FC             		ResetDMAQueue
00005A9E 43F8 D000                  		lea	(v_objspace).w,a1
00005AA2 7000                       		moveq	#0,d0
00005AA4 323C 07FF                  		move.w	#$7FF,d1
00005AA8                            	Cont_ClrObjRam:
00005AA8 22C0                       		move.l	d0,(a1)+
00005AAA 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005AAE                            
00005AB8 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005ABE 6100 B5BA                  		bsr.w	NemDec
00005ACC 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005AD2 6100 B5A6                  		bsr.w	NemDec
00005AE0 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005AE6 6100 B592                  		bsr.w	NemDec
00005AEA 720A                       		moveq	#10,d1
00005AEC 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005AF2 7012                       		moveq	#palid_Continue,d0
00005AF4 6100 C6B2                  		bsr.w	PalLoad1	; load continue	screen palette
00005B00 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005B06 42B8 F700                  		clr.l	(v_screenposx).w
00005B0A 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005B12 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005B18 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005B1E 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005B24 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005B2A 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005B30 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005B36 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005B3C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005B42 4EB9 0000 0000             		jsr	(BuildSprites).l
00005B48 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005B4C 0000 0040                  		ori.b	#$40,d0
00005B50 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005B56 6100 C300                  		bsr.w	PaletteFadeIn
00005B5A                            
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            ; Continue screen main loop
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            
00005B5A                            Cont_MainLoop:
00005B5A 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005B60 6100 DC1A                  		bsr.w	WaitForVBla
00005B64 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005B6A 6400                       		bhs.s	loc_4DF2
00005B6C 46FC 2700                  		disable_ints
00005B70 3238 F614                  		move.w	(v_demolength).w,d1
00005B74 82FC 003C                  		divu.w	#$3C,d1
00005B78 0281 0000 000F             		andi.l	#$F,d1
00005B7E 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005B84 46FC 2300                  		enable_ints
00005B88                            
00005B88                            loc_4DF2:
00005B88 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005B8E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005B94 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005B9A 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005B9C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005BA2 64B6                       		bhs.s	Cont_MainLoop
00005BA4 4A78 F614                  		tst.w	(v_demolength).w
00005BA8 6600 FFB0                  		bne.w	Cont_MainLoop
00005BAC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005BB2 4E75                       		rts	
00005BB4                            ; ===========================================================================
00005BB4                            
00005BB4                            Cont_GotoLevel:
00005BB4 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005BBA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005BC0 7000                       		moveq	#0,d0
00005BC2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005BC6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005BCA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005BCE 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005BD2 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005BD6 4E75                       		rts	
00005BD8                            ; ===========================================================================
00005BD8                            
00005BD8                            		include	"_incObj\80 Continue Screen Elements.asm"
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            ; Object 80 - Continue screen elements
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            
00005BD8                            ContScrItem:
00005BD8 7000                       		moveq	#0,d0
00005BDA 1028 0024                  		move.b	$24(a0),d0
00005BDE 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005BE2 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005BE6                            ; ===========================================================================
00005BE6 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005BE8 0000                       		dc.w CSI_Display-CSI_Index
00005BEA 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005BEC 0000                       		dc.w CSI_ChkDel-CSI_Index
00005BEE                            ; ===========================================================================
00005BEE                            
00005BEE                            CSI_Main:	; Routine 0
00005BEE 5428 0024                  		addq.b	#2,obRoutine(a0)
00005BF2 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005BFA 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005C00 117C 0000 0001             		move.b	#0,obRender(a0)
00005C06 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005C0C 317C 0120 0008             		move.w	#$120,obX(a0)
00005C12 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005C18 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005C1E                            
00005C1E                            CSI_Display:	; Routine 2
00005C1E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005C24                            ; ===========================================================================
00005C24                            
00005C24                            	CSI_MiniSonicPos:
00005C24 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005C36 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005C42                            
00005C42                            CSI_MakeMiniSonic:
00005C42                            		; Routine 4
00005C42 2248                       		movea.l	a0,a1
00005C44 45F9 0000 5C24             		lea	(CSI_MiniSonicPos).l,a2
00005C4A 7200                       		moveq	#0,d1
00005C4C 1238 FE18                  		move.b	(v_continues).w,d1
00005C50 5501                       		subq.b	#2,d1
00005C52 6400                       		bcc.s	CSI_MoreThan1
00005C54 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005C5A                            
00005C5A                            	CSI_MoreThan1:
00005C5A 7601                       		moveq	#1,d3
00005C5C 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005C60 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005C62                            
00005C62 7600                       		moveq	#0,d3
00005C64 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005C66                            
00005C66                            	CSI_FewerThan16:
00005C66 1401                       		move.b	d1,d2
00005C68 0202 0001                  		andi.b	#1,d2
00005C6C                            
00005C6C                            CSI_MiniSonicLoop:
00005C6C 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005C70 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005C74 4A02                       		tst.b	d2		; do you have an even number of continues?
00005C76 6700                       		beq.s	CSI_Even	; if yes, branch
00005C78 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005C7E                            
00005C7E                            	CSI_Even:
00005C7E 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005C84 137C 0006 001A             		move.b	#6,obFrame(a1)
00005C8A 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005C90 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005C98 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005C9E 137C 0000 0001             		move.b	#0,obRender(a1)
00005CA4 43E9 0040                  		lea	$40(a1),a1
00005CA8 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005CAC                            
00005CAC 43E9 FFC0                  		lea	-$40(a1),a1
00005CB0 1343 0028                  		move.b	d3,obSubtype(a1)
00005CB4                            
00005CB4                            CSI_ChkDel:	; Routine 6
00005CB4 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005CB8 6700                       		beq.s	CSI_Animate	; if yes, branch
00005CBA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005CC0 6500                       		bcs.s	CSI_Animate	; if not, branch
00005CC2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005CC6 0200 0001                  		andi.b	#1,d0
00005CCA 6600                       		bne.s	CSI_Animate
00005CCC 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005CD0 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005CD2 4E75                       		rts	
00005CD4                            
00005CD4                            CSI_Animate:
00005CD4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005CD8 0200 000F                  		andi.b	#$F,d0
00005CDC 6600                       		bne.s	CSI_Display2
00005CDE 0868 0000 001A             		bchg	#0,obFrame(a0)
00005CE4                            
00005CE4                            	CSI_Display2:
00005CE4 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005CEA                            ; ===========================================================================
00005CEA                            
00005CEA                            CSI_Delete:
00005CEA 4EF9 0000 0000             		jmp	(DeleteObject).l
00005CEA 4EF9 0000 0000             		jmp	(DeleteObject).l
00005CF0                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; Object 81 - Sonic on the continue screen
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            
00005CF0                            ContSonic:
00005CF0 7000                       		moveq	#0,d0
00005CF2 1028 0024                  		move.b	obRoutine(a0),d0
00005CF6 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005CFA 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005CFE 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005D04                            ; ===========================================================================
00005D04 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005D06 0000                       		dc.w CSon_ChkLand-CSon_Index
00005D08 0000                       		dc.w CSon_Animate-CSon_Index
00005D0A 0000                       		dc.w CSon_Run-CSon_Index
00005D0C                            ; ===========================================================================
00005D0C                            
00005D0C                            CSon_Main:	; Routine 0
00005D0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D10 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005D16 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005D1C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005D24 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005D2A 117C 0004 0001             		move.b	#4,obRender(a0)
00005D30 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005D36 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005D3C 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005D42                            
00005D42                            CSon_ChkLand:	; Routine 2
00005D42 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005D48 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005D4A                            
00005D4A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D4E 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005D52 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005D5A 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005D60 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005D66 6000                       		bra.s	CSon_Animate
00005D68                            
00005D68                            CSon_ShowFall:
00005D68 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005D6E 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005D74 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005D7A                            ; ===========================================================================
00005D7A                            
00005D7A                            CSon_Animate:	; Routine 4
00005D7A 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005D7E 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005D80 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00005D86 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005D8C                            
00005D8C                            CSon_GetUp:
00005D8C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D90 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005D98 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005D9E 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00005DA4 4268 0020                  		clr.w	obInertia(a0)
00005DA8 5168 000C                  		subq.w	#8,obY(a0)
00005DB4                            
00005DB4                            CSon_Run:	; Routine 6
00005DB4 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00005DBA 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00005DBC 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00005DC2 6000                       		bra.s	CSon_ShowRun
00005DC4                            
00005DC4                            CSon_AddInertia:
00005DC4 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00005DCA                            
00005DCA                            CSon_ShowRun:
00005DCA 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005DD0 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005DD6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005DD6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005DDC                            		include	"_anim\Continue Screen Sonic.asm"
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            ; Animation script - Sonic on the continue screen
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00005DDE 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
00005DE8                            		even
00005DE8                            		even
00005DE8                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00005DE8                            ; --------------------------------------------------------------------------------
00005DE8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00005DE8                            ; --------------------------------------------------------------------------------
00005DE8                            
00005DE8                            SME_phED7:	
00005DE8 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00005DEC 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00005DF0 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
00005DF4 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
00005DF8 0B                         SME_phED7_10:	dc.b $B	
00005DF9 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00005DFE F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00005E03 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
00005E08 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
00005E0D F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
00005E12 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
00005E17 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
00005E1C F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
00005E21 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
00005E26 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
00005E2B 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
00005E30 03                         SME_phED7_48:	dc.b 3	
00005E31 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
00005E36 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00005E3B F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00005E40 03                         SME_phED7_58:	dc.b 3	
00005E41 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
00005E46 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00005E4B F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00005E50 03                         SME_phED7_68:	dc.b 3	
00005E51 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
00005E56 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00005E5B F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00005E60 02                         SME_phED7_78:	dc.b 2	
00005E61 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
00005E66 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00005E6B 01                         SME_phED7_83:	dc.b 1	
00005E6C 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00005E71 01                         SME_phED7_89:	dc.b 1	
00005E72 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00005E77 01                         SME_phED7_8F:	dc.b 1	
00005E78 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00005E7E 00                         		even
00005E7E 00                         		even
00005E7E                            
00005E7E                            ; ===========================================================================
00005E7E                            ; ---------------------------------------------------------------------------
00005E7E                            ; Ending sequence in Green Hill	Zone
00005E7E                            ; ---------------------------------------------------------------------------
00005E7E                            
00005E7E                            GM_Ending:
00005E86 6100 C076                  		bsr.w	PaletteFadeOut
00005E8A                            
00005E8A 43F8 D000                  		lea	(v_objspace).w,a1
00005E8E 7000                       		moveq	#0,d0
00005E90 323C 07FF                  		move.w	#$7FF,d1
00005E94                            	End_ClrObjRam:
00005E94 22C0                       		move.l	d0,(a1)+
00005E96 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005E9A                            
00005E9A 43F8 F628                  		lea	($FFFFF628).w,a1
00005E9E 7000                       		moveq	#0,d0
00005EA0 323C 0015                  		move.w	#$15,d1
00005EA4                            	End_ClrRam1:
00005EA4 22C0                       		move.l	d0,(a1)+
00005EA6 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00005EAA                            
00005EAA 43F8 F700                  		lea	(v_screenposx).w,a1
00005EAE 7000                       		moveq	#0,d0
00005EB0 323C 003F                  		move.w	#$3F,d1
00005EB4                            	End_ClrRam2:
00005EB4 22C0                       		move.l	d0,(a1)+
00005EB6 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005EBA                            
00005EBA 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00005EBE 7000                       		moveq	#0,d0
00005EC0 323C 0047                  		move.w	#$47,d1
00005EC4                            	End_ClrRam3:
00005EC4 22C0                       		move.l	d0,(a1)+
00005EC6 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005ECA                            
00005ECA 46FC 2700                  		disable_ints
00005ECE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005ED2 0200 00BF                  		andi.b	#$BF,d0
00005ED6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005EDC 6100 B01E                  		bsr.w	ClearScreen
00005EE0 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005EE6 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005EEA 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005EEE 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005EF2 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00005EF6 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005EFA 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00005EFE 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00005F02 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00005F08 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00005F0C 31FC 001E FE14             		move.w	#30,(v_air).w
00005F12 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00005F18 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00005F1E 6700                       		beq.s	End_LoadData	; if yes, branch
00005F20 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00005F26                            
00005F26                            End_LoadData:
00005F26 7000                       		moveq	#plcid_Ending,d0
00005F28 6100 B6A8                  		bsr.w	QuickPLC	; load ending sequence patterns
00005F2C 4EB9 0000 0000             		jsr	(Hud_Base).l
00005F32 6100 0000                  		bsr.w	LevelSizeLoad
00005F36 6100 0000                  		bsr.w	DeformLayers
00005F3A 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00005F40 6100 0000                  		bsr.w	LevelDataLoad
00005F44 6100 0000                  		bsr.w	LoadTilesFromStart
00005F48 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
00005F50 46FC 2300                  		enable_ints
00005F54 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005F5A 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005F5E 6100 B822                  		bsr.w	KosDec
00005F62 4EB9 0000 0000             		jsr		LoadPlayerPal
00005F68 6100 C23E                  		bsr.w	PalLoad1	; load Sonic's palette
00005F74 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00005F7A 6700                       		beq.s	End_LoadSonic	; if not, branch
00005F7C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005F82                            
00005F82                            End_LoadSonic:
00005F82 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00005F88 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00005F8E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00005F94 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00005F9A 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
00005FA0 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00005FA6 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00005FAC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005FB2 4EB9 0000 0000             		jsr	(BuildSprites).l
00005FB8 7000                       		moveq	#0,d0
00005FBA 31C0 FE20                  		move.w	d0,(v_rings).w
00005FBE 21C0 FE22                  		move.l	d0,(v_time).w
00005FC2 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00005FC6 11C0 FE2C                  		move.b	d0,(v_shield).w
00005FCA 11C0 FE2D                  		move.b	d0,(v_invinc).w
00005FCE 11C0 FE2E                  		move.b	d0,(v_shoes).w
00005FD2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005FD6 31C0 FE08                  		move.w	d0,(v_debuguse).w
00005FDA 31C0 FE02                  		move.w	d0,(f_restart).w
00005FDE 31C0 FE04                  		move.w	d0,(v_framecount).w
00005FE2 6100 EEBC                  		bsr.w	OscillateNumInit
00005FE6 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00005FEC 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00005FF2 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00005FF8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005FFE 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006004 6100 D776                  		bsr.w	WaitForVBla
00006008 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000600C 0000 0040                  		ori.b	#$40,d0
00006010 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006016 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000601C 6100 BE3A                  		bsr.w	PaletteFadeIn
00006020                            
00006020                            ; ---------------------------------------------------------------------------
00006020                            ; Main ending sequence loop
00006020                            ; ---------------------------------------------------------------------------
00006020                            
00006020                            End_MainLoop:
00006020 6100 AFB6                  		bsr.w	PauseGame
00006024 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000602A 6100 D750                  		bsr.w	WaitForVBla
0000602E 5278 FE04                  		addq.w	#1,(v_framecount).w
00006032 6100 0000                  		bsr.w	End_MoveSonic
00006036 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000603C 6100 0000                  		bsr.w	DeformLayers
00006040 4EB9 0000 0000             		jsr	(BuildSprites).l
00006046 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000604C 6100 B9FC                  		bsr.w	PaletteCycle
00006050 6100 EEA4                  		bsr.w	OscillateNumDo
00006054 6100 EF30                  		bsr.w	SynchroAnimate
00006058 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
0000605E 6700                       		beq.s	End_ChkEmerald	; if yes, branch
00006060                            
00006060 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
0000606E 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006074 4E75                       		rts	
00006076                            ; ===========================================================================
00006076                            
00006076                            End_ChkEmerald:
00006076 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
0000607A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000607E                            
0000607E 4278 FE02                  		clr.w	(f_restart).w
00006082 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006088 4278 F794                  		clr.w	(v_palchgspeed).w
0000608C                            
0000608C                            	End_AllEmlds:
0000608C 6100 AF4A                  		bsr.w	PauseGame
00006090 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006096 6100 D6E4                  		bsr.w	WaitForVBla
0000609A 5278 FE04                  		addq.w	#1,(v_framecount).w
0000609E 6100 0000                  		bsr.w	End_MoveSonic
000060A2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000060A8 6100 0000                  		bsr.w	DeformLayers
000060AC 4EB9 0000 0000             		jsr	(BuildSprites).l
000060B2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000060B8 6100 EE3C                  		bsr.w	OscillateNumDo
000060BC 6100 EEC8                  		bsr.w	SynchroAnimate
000060C0 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000060C4 6A00                       		bpl.s	End_SlowFade
000060C6 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000060CC 6100 BF7A                  		bsr.w	WhiteOut_ToWhite
000060D0                            
000060D0                            	End_SlowFade:
000060D0 4A78 FE02                  		tst.w	(f_restart).w
000060D4 6700 FFB6                  		beq.w	End_AllEmlds
000060D8 4278 FE02                  		clr.w	(f_restart).w
000060DC 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000060E2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000060E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000060EE 47F8 F700                  		lea	(v_screenposx).w,a3
000060F2 49F8 A400                  		lea	(v_lvllayout).w,a4
000060F6 343C 4000                  		move.w	#$4000,d2
000060FA 6100 0000                  		bsr.w	DrawChunks
000060FE 7013                       		moveq	#palid_Ending,d0
00006100 6100 C0A6                  		bsr.w	PalLoad1	; load ending palette
00006104 6100 BE76                  		bsr.w	PaletteWhiteIn
00006108 6000 FF16                  		bra.w	End_MainLoop
0000610C                            
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            ; Subroutine controlling Sonic on the ending sequence
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            
0000610C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000610C                            
0000610C                            
0000610C                            End_MoveSonic:
0000610C 1038 F7D7                  		move.b	(v_sonicend).w,d0
00006110 6600                       		bne.s	End_MoveSon2
00006112 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006118 6400                       		bhs.s	End_MoveSonExit	; if not, branch
0000611A                            
0000611A 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000611E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006124 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
0000612A 4E75                       		rts	
0000612C                            ; ===========================================================================
0000612C                            
0000612C                            End_MoveSon2:
0000612C 5500                       		subq.b	#2,d0
0000612E 6600                       		bne.s	End_MoveSon3
00006130 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006136 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006138                            
00006138 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000613C 7000                       		moveq	#0,d0
0000613E 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006142 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006146 31C0 D020                  		move.w	d0,(v_player+obInertia).w
0000614A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
00006150 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
00006156 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
0000615C 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
00006162 4E75                       		rts	
00006164                            ; ===========================================================================
00006164                            
00006164                            End_MoveSon3:
00006164 5500                       		subq.b	#2,d0
00006166 6600                       		bne.s	End_MoveSonExit
00006168 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000616C 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006172 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006178 4278 D024                  		clr.w	(v_player+obRoutine).w
0000617C                            
0000617C                            End_MoveSonExit:
0000617C 4E75                       		rts	
0000617E                            ; End of function End_MoveSonic
0000617E                            
0000617E                            ; ===========================================================================
0000617E                            
0000617E                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000617E                            ; ---------------------------------------------------------------------------
0000617E                            ; Object 87 - Sonic on ending sequence
0000617E                            ; ---------------------------------------------------------------------------
0000617E                            
0000617E                            EndSonic:
0000617E 7000                       		moveq	#0,d0
00006180 1028 0025                  		move.b	ob2ndRout(a0),d0
00006184 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006188 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000618C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006192                            ; ===========================================================================
00006192 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006196 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
0000619A 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000619E 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
000061A2 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000061A6                            
000061A6 =00000030                  eson_time:	equ $30	; time to wait between events
000061A6                            ; ===========================================================================
000061A6                            
000061A6                            ESon_Main:	; Routine 0
000061A6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000061AC 6700                       		beq.s	ESon_Main2	; if yes, branch
000061AE 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
000061B4 317C 00D8 0030             		move.w	#216,eson_time(a0)
000061BA 4E75                       		rts	
000061BC                            ; ===========================================================================
000061BC                            
000061BC                            ESon_Main2:
000061BC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000061C0 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000061C8 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000061CE 117C 0004 0001             		move.b	#4,obRender(a0)
000061D4 4228 0022                  		clr.b	obStatus(a0)
000061D8 317C 0100 0018             		move.w	#$100,obPriority(a0)
000061DE 117C 0000 001A             		move.b	#0,obFrame(a0)
000061E4 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
000061EA                            
000061EA                            ESon_MakeEmeralds:
000061EA                            		; Routine 2
000061EA 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
000061EE 6600                       		bne.s	ESon_Wait
000061F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000061F4 317C 0001 001C             		move.w	#1,obAnim(a0)
000061FA 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
00006200                            
00006200                            	ESon_Wait:
00006200 4E75                       		rts	
00006202                            ; ===========================================================================
00006202                            
00006202                            Obj87_LookUp:	; Routine 6
00006202 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
0000620A 6600                       		bne.s	locret_5480
0000620C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006212 317C 005A 0030             		move.w	#90,eson_time(a0)
00006218 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000621C                            
0000621C                            locret_5480:
0000621C 4E75                       		rts	
0000621E                            ; ===========================================================================
0000621E                            
0000621E                            Obj87_ClrObjRam:
0000621E                            		; Routine 8
0000621E 5368 0030                  		subq.w	#1,eson_time(a0)
00006222 6600                       		bne.s	ESon_Wait2
00006224 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006228 323C 00FF                  		move.w	#$FF,d1
0000622C                            
0000622C                            Obj87_ClrLoop:
0000622C 4299                       		clr.l	(a1)+
0000622E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006232 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006238 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000623C 117C 0001 001C             		move.b	#1,obAnim(a0)
00006242 317C 003C 0030             		move.w	#60,eson_time(a0)
00006248                            
00006248                            ESon_Wait2:
00006248 4E75                       		rts	
0000624A                            ; ===========================================================================
0000624A                            
0000624A                            Obj87_MakeLogo:	; Routine $C
0000624A 5368 0030                  		subq.w	#1,eson_time(a0)
0000624E 6600                       		bne.s	ESon_Wait3
00006250 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006254 317C 00B4 0030             		move.w	#180,eson_time(a0)
0000625A 117C 0002 001C             		move.b	#2,obAnim(a0)
00006260 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006266                            
00006266                            ESon_Wait3:
00006266 4E75                       		rts	
00006268                            ; ===========================================================================
00006268                            
00006268                            Obj87_Animate:	; Rountine 4, $A, $E, $12
00006268 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
0000626E 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006274                            ; ===========================================================================
00006274                            
00006274                            Obj87_Leap:	; Routine $10
00006274 5368 0030                  		subq.w	#1,eson_time(a0)
00006278 6600                       		bne.s	ESon_Wait4
0000627A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000627E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006286 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000628C 117C 0004 0001             		move.b	#4,obRender(a0)
00006292 4228 0022                  		clr.b	obStatus(a0)
00006296 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000629C 117C 0005 001A             		move.b	#5,obFrame(a0)
000062A2 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000062A8 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000062AE 60B8                       		bra.s	Obj87_Animate
000062B0                            ; ===========================================================================
000062B0                            
000062B0                            ESon_Wait4:
000062B0 4E75                       		rts	
000062B0 4E75                       		rts	
000062B2                            		include "_anim\Ending Sequence Sonic.asm"
000062B2                            ; ---------------------------------------------------------------------------
000062B2                            ; Animation script - Sonic on the ending sequence
000062B2                            ; ---------------------------------------------------------------------------
000062B2 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
000062B4 0000                       		dc.w byte_552A-AniScript_ESon
000062B6 0000                       		dc.w byte_5534-AniScript_ESon
000062B8 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000062C6 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000062D0 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000062D8                            		even
000062D8                            		even
000062D8                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000062D8                            ; ---------------------------------------------------------------------------
000062D8                            ; Object 88 - chaos emeralds on	the ending sequence
000062D8                            ; ---------------------------------------------------------------------------
000062D8                            
000062D8                            EndChaos:
000062D8 7000                       		moveq	#0,d0
000062DA 1028 0024                  		move.b	obRoutine(a0),d0
000062DE 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000062E2 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000062E6 4EF9 0000 0000             		jmp	(DisplaySprite).l
000062EC                            ; ===========================================================================
000062EC 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
000062EE 0000                       		dc.w ECha_Move-ECha_Index
000062F0                            
000062F0 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
000062F0 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
000062F0 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
000062F0 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
000062F0                            ; ===========================================================================
000062F0                            
000062F0                            ECha_Main:	; Routine 0
000062F0 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
000062F6 6700                       		beq.s	ECha_CreateEms
000062F8 588F                       		addq.l	#4,sp
000062FA 4E75                       		rts	
000062FC                            ; ===========================================================================
000062FC                            
000062FC                            ECha_CreateEms:
000062FC 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006302 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006308 2248                       		movea.l	a0,a1
0000630A 7600                       		moveq	#0,d3
0000630C 7401                       		moveq	#1,d2
0000630E 7205                       		moveq	#5,d1
00006310                            
00006310                            	ECha_LoadLoop:
00006310 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006314 5429 0024                  		addq.b	#2,obRoutine(a1)
00006318 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
00006320 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006326 137C 0004 0001             		move.b	#4,obRender(a1)
0000632C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006332 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006338 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
0000633E 1342 001C                  		move.b	d2,obAnim(a1)
00006342 1342 001A                  		move.b	d2,obFrame(a1)
00006346 5202                       		addq.b	#1,d2
00006348 1343 0026                  		move.b	d3,obAngle(a1)
0000634C 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
00006350 43E9 0040                  		lea	$40(a1),a1
00006354 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
00006358                            
00006358                            ECha_Move:	; Routine 2
00006358 3028 003E                  		move.w	echa_angle(a0),d0
0000635C D168 0026                  		add.w	d0,obAngle(a0)
00006360 1028 0026                  		move.b	obAngle(a0),d0
00006364 4EB9 0000 37AE             		jsr	(CalcSine).l
0000636A 7800                       		moveq	#0,d4
0000636C 1828 003C                  		move.b	echa_radius(a0),d4
00006370 C3C4                       		muls.w	d4,d1
00006372 E081                       		asr.l	#8,d1
00006374 C1C4                       		muls.w	d4,d0
00006376 E080                       		asr.l	#8,d0
00006378 D268 0038                  		add.w	echa_origX(a0),d1
0000637C D068 003A                  		add.w	echa_origY(a0),d0
00006380 3141 0008                  		move.w	d1,obX(a0)
00006384 3140 000C                  		move.w	d0,obY(a0)
00006388                            
00006388                            	ECha_Expand:
00006388 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000638E 6700                       		beq.s	ECha_Rotate
00006390 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006396                            
00006396                            	ECha_Rotate:
00006396 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000639C 6700                       		beq.s	ECha_Rise
0000639E 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000063A4                            
000063A4                            	ECha_Rise:
000063A4 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000063AA 6700                       		beq.s	ECha_End
000063AC 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000063B0                            
000063B0                            ECha_End:
000063B0 4E75                       		rts	
000063B0 4E75                       		rts	
000063B2                            		include	"_incObj\89 Ending Sequence STH.asm"
000063B2                            ; ---------------------------------------------------------------------------
000063B2                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000063B2                            ; ---------------------------------------------------------------------------
000063B2                            
000063B2                            EndSTH:
000063B2 7000                       		moveq	#0,d0
000063B4 1028 0024                  		move.b	$24(a0),d0
000063B8 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
000063BC 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
000063C0 4EF9 0000 0000             		jmp	(DisplaySprite).l
000063C6                            ; ===========================================================================
000063C6 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000063C8 0000                       		dc.w ESth_Move-ESth_Index
000063CA 0000                       		dc.w ESth_GotoCredits-ESth_Index
000063CC                            
000063CC =00000030                  esth_time:	equ $30		; time until exit
000063CC                            ; ===========================================================================
000063CC                            
000063CC                            ESth_Main:	; Routine 0
000063CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000063D0 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000063D6 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000063DC 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000063E4 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
000063EA 117C 0000 0001             		move.b	#0,obRender(a0)
000063F0 317C 0000 0018             		move.w	#0,obPriority(a0)
000063F6                            
000063F6                            ESth_Move:	; Routine 2
000063F6 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
000063FC 6700                       		beq.s	ESth_Delay	; if yes, branch
000063FE 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006404 4E75                       		rts
00006406                            
00006406                            ESth_Delay:
00006406 5428 0024                  		addq.b	#2,obRoutine(a0)
0000640A 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
00006410                            
00006410                            ESth_GotoCredits:
00006410                            		; Routine 4
00006410 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006414 6A00                       		bpl.s	ESth_Wait
00006416 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000641C                            
0000641C                            	ESth_Wait:
0000641C 4E75                       		rts
0000641E                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000641E                            ; ---------------------------------------------------------------------------
0000641E                            ; Sprite mappings - Sonic on the ending	sequence
0000641E                            ; ---------------------------------------------------------------------------
0000641E                            Map_ESon_internal:
0000641E 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
00006420 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
00006422 0000                       		dc.w M_ESon_Up-Map_ESon_internal
00006424 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006426 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006428 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
0000642A 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
0000642C 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
0000642E 02                         M_ESon_Hold1:	dc.b 2
0000642F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006434 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006439 03                         M_ESon_Hold2:	dc.b 3
0000643A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000643F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006444 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006449 02                         M_ESon_Up:	dc.b 2
0000644A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000644F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006454 02                         M_ESon_Conf1:	dc.b 2
00006455 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000645A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000645F 02                         M_ESon_Conf2:	dc.b 2
00006460 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006465 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000646A 03                         M_ESon_Leap1:	dc.b 3
0000646B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006470 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006475 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000647A 07                         M_ESon_Leap2:	dc.b 7
0000647B B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006480 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006485 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000648A CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000648F DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006494 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006499 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000649E 18                         M_ESon_Leap3:	dc.b $18
0000649F 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000064A4 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000064A9 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000064AE 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000064B3 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000064B8 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000064BD 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000064C2 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000064C7 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000064CC B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000064D1 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000064D6 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000064DB C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000064E0 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000064E5 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000064EA D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000064EF D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000064F4 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000064F9 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000064FE E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006503 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006508 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000650D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006512 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006518 00                         		even
00006518 00                         		even
00006518                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006518                            ; --------------------------------------------------------------------------------
00006518                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006518                            ; --------------------------------------------------------------------------------
00006518                            
00006518                            SME_0ZTmS:	
00006518 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
0000651C 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
00006520 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006524 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006526 01                         SME_0ZTmS_E:	dc.b 1	
00006527 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000652C 01                         SME_0ZTmS_14:	dc.b 1	
0000652D F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006532 01                         SME_0ZTmS_1A:	dc.b 1	
00006533 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006538 01                         SME_0ZTmS_20:	dc.b 1	
00006539 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
0000653E 01                         SME_0ZTmS_26:	dc.b 1	
0000653F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006544 01                         SME_0ZTmS_2C:	dc.b 1	
00006545 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0000654A 01                         SME_0ZTmS_32:	dc.b 1	
0000654B F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
00006550                            		even
00006550                            		even
00006550                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
00006550                            ; ---------------------------------------------------------------------------
00006550                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006550                            ; ---------------------------------------------------------------------------
00006550                            Map_ESth_internal:
00006550 0000                       		dc.w M_ESth_1-Map_ESth_internal
00006552 03                         M_ESth_1:	dc.b 3
00006553 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006558 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000655D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006562                            		even
00006562                            		even
00006562                            
00006562                            ; ===========================================================================
00006562                            ; ---------------------------------------------------------------------------
00006562                            ; Credits ending sequence
00006562                            ; ---------------------------------------------------------------------------
00006562                            
00006562                            GM_Credits:
00006562                            		
00006562 6100 AF60                  		bsr.w	ClearPLC
00006566 6100 B996                  		bsr.w	PaletteFadeOut
0000656A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006570 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006574 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006578 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000657C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006580 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006584 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006588 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
0000658C 4238 F64E                  		clr.b	(f_wtr_state).w
00006590 6100 A96A                  		bsr.w	ClearScreen
00006594                            
00006594 43F8 D000                  		lea	(v_objspace).w,a1
00006598 7000                       		moveq	#0,d0
0000659A 323C 07FF                  		move.w	#$7FF,d1
0000659E                            	TryAg_ClrObjRam:
0000659E 22C0                       		move.l	d0,(a1)+
000065A0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000065A4                            
000065A4 7000                       		moveq	#plcid_TryAgain,d0
000065A6 6100 B02A                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000065AA                            
000065AA 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000065AE 7000                       		moveq	#0,d0
000065B0 323C 001F                  		move.w	#$1F,d1
000065B4                            	TryAg_ClrPal:
000065B4 22C0                       		move.l	d0,(a1)+
000065B6 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
000065BA                            
000065BA 7013                       		moveq	#palid_Ending,d0
000065BC 6100 BBEA                  		bsr.w	PalLoad1	; load ending palette
000065C0 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
000065C4 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
000065CA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000065D0 4EB9 0000 0000             		jsr	(BuildSprites).l
000065D6 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
000065DC 6100 B87A                  		bsr.w	PaletteFadeIn
000065E0                            
000065E0                            ; ---------------------------------------------------------------------------
000065E0                            ; "TRY AGAIN" and "END"	screen main loop
000065E0                            ; ---------------------------------------------------------------------------
000065E0                            TryAg_MainLoop:
000065E0 6100 A9F6                  		bsr.w	PauseGame
000065E4 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000065EA 6100 D190                  		bsr.w	WaitForVBla
000065EE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000065F4 4EB9 0000 0000             		jsr	(BuildSprites).l
000065FA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006600 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006602 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006606 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006608 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000660E 67D0                       		beq.s	TryAg_MainLoop
00006610                            
00006610                            TryAg_Exit:
00006610 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006616 4E75                       		rts	
00006618                            
00006618                            ; ===========================================================================
00006618                            
00006618                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006618                            ; ---------------------------------------------------------------------------
00006618                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006618                            ; ---------------------------------------------------------------------------
00006618                            
00006618                            EndEggman:
00006618 7000                       		moveq	#0,d0
0000661A 1028 0024                  		move.b	obRoutine(a0),d0
0000661E 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006622 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006626 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000662C                            ; ===========================================================================
0000662C 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
0000662E 0000                       		dc.w EEgg_Animate-EEgg_Index
00006630 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006632 0000                       		dc.w EEgg_Wait-EEgg_Index
00006634                            
00006634 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006634                            ; ===========================================================================
00006634                            
00006634                            EEgg_Main:	; Routine 0
00006634 5428 0024                  		addq.b	#2,obRoutine(a0)
00006638 317C 0120 0008             		move.w	#$120,obX(a0)
0000663E 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006644 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
0000664C 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006652 117C 0000 0001             		move.b	#0,obRender(a0)
00006658 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000665E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006664 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000666A 6700                       		beq.s	EEgg_Animate	; if yes, branch
0000666C                            
0000666C 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006672 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006678 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
0000667E 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006684                            
00006684                            EEgg_Animate:	; Routine 2
00006684 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
0000668A 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006690                            ; ===========================================================================
00006690                            
00006690                            EEgg_Juggle:	; Routine 4
00006690 5428 0024                  		addq.b	#2,obRoutine(a0)
00006694 7002                       		moveq	#2,d0
00006696 0828 0000 001C             		btst	#0,obAnim(a0)
0000669C 6700                       		beq.s	@noflip
0000669E 4440                       		neg.w	d0
000066A0                            
000066A0                            	@noflip:
000066A0 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
000066A4 7205                       		moveq	#5,d1
000066A6                            
000066A6                            @emeraldloop:
000066A6 1340 003E                  		move.b	d0,$3E(a1)
000066AA 3400                       		move.w	d0,d2
000066AC E742                       		asl.w	#3,d2
000066AE D529 0026                  		add.b	d2,obAngle(a1)
000066B2 43E9 0040                  		lea	$40(a1),a1
000066B6 51C9 FFEE                  		dbf	d1,@emeraldloop
000066BA 5228 001A                  		addq.b	#1,obFrame(a0)
000066BE 317C 0070 0030             		move.w	#112,eegg_time(a0)
000066C4                            
000066C4                            EEgg_Wait:	; Routine 6
000066C4 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
000066C8 6A00                       		bpl.s	@nochg		; branch if time remains
000066CA 0868 0000 001C             		bchg	#0,obAnim(a0)
000066D0 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
000066D6                            
000066D6                            	@nochg:
000066D6 4E75                       		rts	
000066D6 4E75                       		rts	
000066D8                            		include "_anim\Try Again & End Eggman.asm"
000066D8                            ; ---------------------------------------------------------------------------
000066D8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000066D8                            ; ---------------------------------------------------------------------------
000066D8 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
000066DA 0000                       		dc.w @tryagain2-Ani_EEgg
000066DC 0000                       		dc.w @end-Ani_EEgg
000066DE 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
000066E2 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
000066E6 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
000066F8                            		even
000066F8                            		even
000066F8                            		include	"_incObj\8C Try Again Emeralds.asm"
000066F8                            ; ---------------------------------------------------------------------------
000066F8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000066F8                            ; ---------------------------------------------------------------------------
000066F8                            
000066F8                            TryChaos:
000066F8 7000                       		moveq	#0,d0
000066FA 1028 0024                  		move.b	obRoutine(a0),d0
000066FE 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006702 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006706 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000670C                            ; ===========================================================================
0000670C 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000670E 0000                       		dc.w TCha_Move-TCha_Index
00006710                            ; ===========================================================================
00006710                            
00006710                            TCha_Main:	; Routine 0
00006710 2248                       		movea.l	a0,a1
00006712 7400                       		moveq	#0,d2
00006714 7600                       		moveq	#0,d3
00006716 7205                       		moveq	#5,d1
00006718 9238 FE57                  		sub.b	(v_emeralds).w,d1
0000671C                            
0000671C                            @makeemerald:
0000671C 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006720 5429 0024                  		addq.b	#2,obRoutine(a1)
00006724 237C 0000 6518 0004        		move.l	#Map_ECha,obMap(a1)
0000672C 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006732 137C 0000 0001             		move.b	#0,obRender(a1)
00006738 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000673E 337C 0104 0008             		move.w	#$104,obX(a1)
00006744 337C 0120 0038             		move.w	#$120,$38(a1)
0000674A 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006750 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006756 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000675C 47F8 FE58                  		lea	(v_emldlist).w,a3
00006760                            
00006760                            	@chkemerald:
00006760 7000                       		moveq	#0,d0
00006762 1038 FE57                  		move.b	(v_emeralds).w,d0
00006766 5340                       		subq.w	#1,d0
00006768 6500                       		bcs.s	@loc_5B42
0000676A                            
0000676A                            	@chkloop:
0000676A B433 0000                  		cmp.b	(a3,d0.w),d2
0000676E 6600                       		bne.s	@notgot
00006770 5202                       		addq.b	#1,d2
00006772 60EC                       		bra.s	@chkemerald
00006774                            ; ===========================================================================
00006774                            
00006774                            	@notgot:
00006774 51C8 FFF4                  		dbf	d0,@chkloop
00006778                            
00006778                            @loc_5B42:
00006778 1342 001A                  		move.b	d2,obFrame(a1)
0000677C 5229 001A                  		addq.b	#1,obFrame(a1)
00006780 5202                       		addq.b	#1,d2
00006782 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006788 1343 001E                  		move.b	d3,obTimeFrame(a1)
0000678C 1343 001F                  		move.b	d3,obDelayAni(a1)
00006790 0643 000A                  		addi.w	#10,d3
00006794 43E9 0040                  		lea	$40(a1),a1
00006798 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
0000679C                            
0000679C                            TCha_Move:	; Routine 2
0000679C 4A68 003E                  		tst.w	$3E(a0)
000067A0 6700                       		beq.s	locret_5BBA
000067A2 4A28 001E                  		tst.b	obTimeFrame(a0)
000067A6 6700                       		beq.s	loc_5B78
000067A8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000067AC 6600                       		bne.s	loc_5B80
000067AE                            
000067AE                            loc_5B78:
000067AE 3028 003E                  		move.w	$3E(a0),d0
000067B2 D168 0026                  		add.w	d0,obAngle(a0)
000067B6                            
000067B6                            loc_5B80:
000067B6 1028 0026                  		move.b	obAngle(a0),d0
000067BA 6700                       		beq.s	loc_5B8C
000067BC 0C00 0080                  		cmpi.b	#$80,d0
000067C0 6600                       		bne.s	loc_5B96
000067C2                            
000067C2                            loc_5B8C:
000067C2 4268 003E                  		clr.w	$3E(a0)
000067C6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000067CC                            
000067CC                            loc_5B96:
000067CC 4EB9 0000 37AE             		jsr	(CalcSine).l
000067D2 7800                       		moveq	#0,d4
000067D4 1828 003C                  		move.b	$3C(a0),d4
000067D8 C3C4                       		muls.w	d4,d1
000067DA E081                       		asr.l	#8,d1
000067DC C1C4                       		muls.w	d4,d0
000067DE E080                       		asr.l	#8,d0
000067E0 D268 0038                  		add.w	$38(a0),d1
000067E4 D068 003A                  		add.w	$3A(a0),d0
000067E8 3141 0008                  		move.w	d1,obX(a0)
000067EC 3140 000A                  		move.w	d0,obScreenY(a0)
000067F0                            
000067F0                            locret_5BBA:
000067F0 4E75                       		rts	
000067F0 4E75                       		rts	
000067F2                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
000067F2                            ; ---------------------------------------------------------------------------
000067F2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000067F2                            ; ---------------------------------------------------------------------------
000067F2                            Map_EEgg_internal:
000067F2 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
000067F4 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
000067F6 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
000067F8 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
000067FA 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
000067FC 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
000067FE 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006800 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006802 08                         M_EEgg_Try1:	dc.b 8
00006803 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006808 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000680D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006812 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006817 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000681C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006821 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006826 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000682B 08                         M_EEgg_Try2:	dc.b 8
0000682C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006831 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006836 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000683B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006840 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006845 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000684A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000684F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006854 08                         M_EEgg_Try3:	dc.b 8
00006855 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000685A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000685F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006864 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006869 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000686E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006873 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006878 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000687D 08                         M_EEgg_Try4:	dc.b 8
0000687E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006883 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006888 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000688D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006892 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006897 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000689C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000068A1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000068A6 0C                         M_EEgg_End1:	dc.b $C
000068A7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000068AC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000068B1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000068B6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000068BB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000068C0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000068C5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000068CA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000068CF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000068D4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000068D9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000068DE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000068E3 0A                         M_EEgg_End2:	dc.b $A
000068E4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000068E9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000068EE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000068F3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000068F8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000068FD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006902 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006907 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000690C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006911 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006916 0A                         M_EEgg_End3:	dc.b $A
00006917 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000691C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006921 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006926 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000692B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006930 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006935 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000693A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000693F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006944 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006949 0C                         M_EEgg_End4:	dc.b $C
0000694A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000694F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006954 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006959 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000695E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006963 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006968 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000696D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006972 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006977 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000697C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006981 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006986                            		even
00006986                            		even
00006986                            
00006986                            ; ---------------------------------------------------------------------------
00006986                            ; Ending sequence demos
00006986                            ; ---------------------------------------------------------------------------
00006986                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
000069B4                            		even
000069B4                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
000069F4                            		even
000069F4                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006A24                            		even
00006A24                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006A54                            		even
00006A54                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006A74                            		even
00006A74                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006A94                            		even
00006A94                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006AC4                            		even
00006AC4                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006AF4                            		even
00006AF4                            
00006AF4                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006AF4                            ; ---------------------------------------------------------------------------
00006AF4                            ; Subroutine to	load level boundaries and start	locations
00006AF4                            ; ---------------------------------------------------------------------------
00006AF4                            
00006AF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF4                            
00006AF4                            
00006AF4                            LevelSizeLoad:
00006AF4 7000                       		moveq	#0,d0
00006AF6 11C0 F740                  		move.b	d0,($FFFFF740).w
00006AFA 11C0 F741                  		move.b	d0,($FFFFF741).w
00006AFE 11C0 F746                  		move.b	d0,($FFFFF746).w
00006B02 11C0 F748                  		move.b	d0,($FFFFF748).w
00006B06 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006B0A 3038 FE10                  		move.w	(v_zone).w,d0
00006B0E ED08                       		lsl.b	#6,d0
00006B10 E848                       		lsr.w	#4,d0
00006B12 3200                       		move.w	d0,d1
00006B14 D040                       		add.w	d0,d0
00006B16 D041                       		add.w	d1,d0
00006B18 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006B1C 3018                       		move.w	(a0)+,d0
00006B1E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006B22 2018                       		move.l	(a0)+,d0
00006B24 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006B28 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006B2C 2018                       		move.l	(a0)+,d0
00006B2E 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006B32 21C0 F724                  		move.l	d0,(v_limittop1).w
00006B36 3038 F728                  		move.w	(v_limitleft2).w,d0
00006B3A 0640 0240                  		addi.w	#$240,d0
00006B3E 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006B42 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006B48 3018                       		move.w	(a0)+,d0
00006B4A 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006B4E 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006B54 6000 0000                  		bra.w	LevSz_ChkLamp
00006B58                            
00006B58                            ; ===========================================================================
00006B58                            ; ---------------------------------------------------------------------------
00006B58                            ; Level size array
00006B58                            ; ---------------------------------------------------------------------------
00006B58                            LevelSizeArray:
00006B58                            		; GHZ
00006B58 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006B64 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006B70 0004 0000 2960 0000 0400+  		dc.w $0004, $0000, $2960, $0000, $0400, $0060
00006B7C 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006B88                            		; LZ
00006B88 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006B94 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006BA0 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006BAC 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006BB8                            		; MZ
00006BB8 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006BC4 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006BD0 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006BDC 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006BE8                            		; SLZ
00006BE8 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006BF4 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006C00 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006C0C 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006C18                            		; SYZ
00006C18 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006C24 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006C30 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006C3C 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006C48                            		; SBZ
00006C48 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006C54 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006C60 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006C6C 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006C78                            		; Ending
00006C78 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006C84 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006C90 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006C9C 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006CA8                            
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            ; Ending start location array
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            EndingStLocArray:
00006CA8                            		include	"_inc\Start Location Array - Ending.asm"
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            ; Ending start location array
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            
00006CA8                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006CAC                            		incbin	"startpos\mz2 (Credits demo).bin"
00006CB0                            		incbin	"startpos\syz3 (Credits demo).bin"
00006CB4                            		incbin	"startpos\lz3 (Credits demo).bin"
00006CB8                            		incbin	"startpos\slz3 (Credits demo).bin"
00006CBC                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006CC0                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006CC4                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006CC8                            		even
00006CC8                            		even
00006CC8                            
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            LevSz_ChkLamp:
00006CC8 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006CCC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006CCE                            
00006CCE 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006CD4 3238 D008                  		move.w	(v_player+obX).w,d1
00006CD8 3038 D00C                  		move.w	(v_player+obY).w,d0
00006CDC 6000                       		bra.s	LevSz_SkipStartPos
00006CDE                            ; ===========================================================================
00006CDE                            
00006CDE                            LevSz_StartLoc:
00006CDE 3038 FE10                  		move.w	(v_zone).w,d0
00006CE2 ED08                       		lsl.b	#6,d0
00006CE4 E848                       		lsr.w	#4,d0
00006CE6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006CEA 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006CEE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006CF0                            
00006CF0 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006CF4 5340                       		subq.w	#1,d0
00006CF6 E548                       		lsl.w	#2,d0
00006CF8 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006CFC                            
00006CFC                            LevSz_SonicPos:
00006CFC 7200                       		moveq	#0,d1
00006CFE 3219                       		move.w	(a1)+,d1
00006D00 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006D04 7000                       		moveq	#0,d0
00006D06 3011                       		move.w	(a1),d0
00006D08 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006D0C                            
00006D0C                            SetScreen:
00006D0C                            	LevSz_SkipStartPos:
00006D0C 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006D10 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006D14 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006D16                            @looppoint: 
00006D16 34C1                       		move.w d1,(a2)+ ; fill in X 
00006D18 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006D1A 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006D1E 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006D22 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006D24 7200                       		moveq	#0,d1
00006D26                            
00006D26                            	SetScr_WithinLeft:
00006D26 3438 F72A                  		move.w	(v_limitright2).w,d2
00006D2A B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006D2C 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006D2E 3202                       		move.w	d2,d1
00006D30                            
00006D30                            	SetScr_WithinRight:
00006D30 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006D34                            
00006D34 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006D38 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006D3A 7000                       		moveq	#0,d0
00006D3C                            
00006D3C                            	SetScr_WithinTop:
00006D3C B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006D40 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006D42 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006D46                            
00006D46                            	SetScr_WithinBottom:
00006D46 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006D4A 6100 0000                  		bsr.w	BgScrollSpeed
00006D4E 7000                       		moveq	#0,d0
00006D50 1038 FE10                  		move.b	(v_zone).w,d0
00006D54 E508                       		lsl.b	#2,d0
00006D56 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006D5C 4E75                       		rts
00006D5E                            ; ===========================================================================
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            ; Sonic start location array
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            ; Sonic start location array
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            
00006D5E                            		incbin	"startpos\ghz1.bin"
00006D62                            		incbin	"startpos\ghz2.bin"
00006D66                            		incbin	"startpos\ghz3.bin"
00006D6A 0080 00A8                  		dc.w	$80,$A8
00006D6E                            
00006D6E                            		incbin	"startpos\lz1.bin"
00006D72                            		incbin	"startpos\lz2.bin"
00006D76                            		incbin	"startpos\lz3.bin"
00006D7A                            		incbin	"startpos\sbz3.bin"
00006D7E                            
00006D7E                            		incbin	"startpos\mz1.bin"
00006D82                            		incbin	"startpos\mz2.bin"
00006D86                            		incbin	"startpos\mz3.bin"
00006D8A 0080 00A8                  		dc.w	$80,$A8
00006D8E                            
00006D8E                            		incbin	"startpos\slz1.bin"
00006D92                            		incbin	"startpos\slz2.bin"
00006D96                            		incbin	"startpos\slz3.bin"
00006D9A 0080 00A8                  		dc.w	$80,$A8
00006D9E                            
00006D9E                            		incbin	"startpos\syz1.bin"
00006DA2                            		incbin	"startpos\syz2.bin"
00006DA6                            		incbin	"startpos\syz3.bin"
00006DAA 0080 00A8                  		dc.w	$80,$A8
00006DAE                            
00006DAE                            		incbin	"startpos\sbz1.bin"
00006DB2                            		incbin	"startpos\sbz2.bin"
00006DB6                            		incbin	"startpos\fz.bin"
00006DBA 0080 00A8                  		dc.w	$80,$A8
00006DBE                            
00006DBE                            
00006DBE                            		incbin	"startpos\end1.bin"
00006DC2                            		incbin	"startpos\end2.bin"
00006DC6 0080 00A8                  		dc.w	$80,$A8
00006DCA 0080 00A8                  		dc.w	$80,$A8
00006DCE                            
00006DCE                            		even
00006DCE                            		even
00006DCE                            
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE                            ; Which	256x256	tiles contain loops or roll-tunnels
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE                            
00006DCE                            LoopTileNums:
00006DCE                            
00006DCE                            ; 		loop	loop	tunnel	tunnel
00006DCE                            
00006DCE B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00006DD2 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00006DD6 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00006DDA AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00006DDE 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00006DE2 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00006DE6 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00006DEA                            
00006DEA                            		even
00006DEA                            
00006DEA                            ; ---------------------------------------------------------------------------
00006DEA                            ; Subroutine to	set scroll speed of some backgrounds
00006DEA                            ; ---------------------------------------------------------------------------
00006DEA                            
00006DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DEA                            
00006DEA                            
00006DEA                            BgScrollSpeed:
00006DEA 4A38 FE30                  		tst.b	(v_lastlamp).w
00006DEE 6600                       		bne.s	loc_6206
00006DF0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006DF4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00006DF8 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00006DFC 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
00006E00 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00006E04                            
00006E04                            loc_6206:
00006E04 7400                       		moveq	#0,d2
00006E06 1438 FE10                  		move.b	(v_zone).w,d2
00006E0A D442                       		add.w	d2,d2
00006E0C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006E10 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006E14                            ; End of function BgScrollSpeed
00006E14                            
00006E14                            ; ===========================================================================
00006E14 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006E18 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006E1C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006E20 0000                       		dc.w BgScroll_End-BgScroll_Index
00006E22                            ; ===========================================================================
00006E22                            
00006E22                            BgScroll_GHZ:
00006E22 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E26 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00006E2A 42B8 F714                  		clr.l	(v_bg2screenposy).w
00006E2E 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006E32 45F8 A800                  		lea	($FFFFA800).w,a2
00006E36 429A                       		clr.l	(a2)+
00006E38 429A                       		clr.l	(a2)+
00006E3A 429A                       		clr.l	(a2)+
00006E3C 4E75                       		rts
00006E3E                            ; ===========================================================================
00006E3E                            
00006E3E                            BgScroll_LZ:
00006E3E E280                       		asr.l	#1,d0
00006E40 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E44 4E75                       		rts	
00006E46                            ; ===========================================================================
00006E46                            
00006E46                            BgScroll_MZ:
00006E46 4E75                       		rts	
00006E48                            ; ===========================================================================
00006E48                            
00006E48                            BgScroll_SLZ:
00006E48 E280                       		asr.l	#1,d0
00006E4A 0640 00C0                  		addi.w	#$C0,d0
00006E4E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E52 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E56 4E75                       		rts	
00006E58                            ; ===========================================================================
00006E58                            
00006E58                            BgScroll_SYZ:
00006E58 E980                       		asl.l	#4,d0
00006E5A 2400                       		move.l	d0,d2
00006E5C E380                       		asl.l	#1,d0
00006E5E D082                       		add.l	d2,d0
00006E60 E080                       		asr.l	#8,d0
00006E62 5240                       		addq.w	#1,d0
00006E64 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E68 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E6C 4E75                       		rts	
00006E6E                            ; ===========================================================================
00006E6E                            
00006E6E                            BgScroll_SBZ:
00006E6E 0240 07F8                  		andi.w	#$7F8,d0
00006E72 E640                       		asr.w	#3,d0
00006E74 5240                       		addq.w	#1,d0
00006E76 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E7A 4E75                       		rts	
00006E7C                            ; ===========================================================================
00006E7C                            
00006E7C                            BgScroll_End:
00006E7C 3038 F700                  		move.w	(v_screenposx).w,d0
00006E80 E240                       		asr.w	#1,d0
00006E82 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00006E86 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00006E8A E440                       		asr.w	#2,d0
00006E8C 3200                       		move.w	d0,d1
00006E8E D040                       		add.w	d0,d0
00006E90 D041                       		add.w	d1,d0
00006E92 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00006E96 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00006E9A 42B8 F714                  		clr.l	(v_bg2screenposy).w
00006E9E 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006EA2 45F8 A800                  		lea	($FFFFA800).w,a2
00006EA6 429A                       		clr.l	(a2)+
00006EA8 429A                       		clr.l	(a2)+
00006EAA 429A                       		clr.l	(a2)+
00006EAC 4E75                       		rts
00006EAC 4E75                       		rts
00006EAE                            		include	"_inc\DeformLayers (JP1).asm"
00006EAE                            ; ---------------------------------------------------------------------------
00006EAE                            ; Background layer deformation subroutines
00006EAE                            ; ---------------------------------------------------------------------------
00006EAE                            
00006EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EAE                            
00006EAE                            
00006EAE                            DeformLayers:
00006EAE 4A38 F744                  		tst.b	(f_nobgscroll).w
00006EB2 6700                       		beq.s	@bgscroll
00006EB4 4E75                       		rts	
00006EB6                            ; ===========================================================================
00006EB6                            
00006EB6                            	@bgscroll:
00006EB6 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00006EBA 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00006EBE 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00006EC2 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00006EC6 6100 0000                  		bsr.w	ScrollHoriz
00006ECA 6100 0000                  		bsr.w	ScrollVertical
00006ECE 6100 0000                  		bsr.w	DynamicLevelEvents
00006ED2 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00006ED8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00006EDE 7000                       		moveq	#0,d0
00006EE0 1038 FE10                  		move.b	(v_zone).w,d0
00006EE4 D040                       		add.w	d0,d0
00006EE6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006EEA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006EEE                            ; End of function DeformLayers
00006EEE                            
00006EEE                            ; ===========================================================================
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            ; Offset index for background layer deformation	code
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006EF2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006EF6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006EFA 0000                       		dc.w Deform_GHZ-Deform_Index
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            ; Green	Hill Zone background layer deformation code
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            
00006EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EFC                            
00006EFC                            
00006EFC                            Deform_GHZ:
00006EFC                            	;cmpi.b    #id_Title,(v_gamemode).w
00006EFC                            	;beq.w    Deform_Title
00006EFC                            
00006EFC                            ;Deform_GHZ_Stage:
00006EFC                            	; block 3 - distant mountains
00006EFC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006F00 48C4                       		ext.l	d4
00006F02 EB84                       		asl.l	#5,d4
00006F04 2204                       		move.l	d4,d1
00006F06 E384                       		asl.l	#1,d4
00006F08 D881                       		add.l	d1,d4
00006F0A 7C00                       		moveq	#0,d6
00006F0C 6100 0000                  		bsr.w	BGScroll_Block3
00006F10                            	; block 2 - hills & waterfalls
00006F10 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006F14 48C4                       		ext.l	d4
00006F16 EF84                       		asl.l	#7,d4
00006F18 7C00                       		moveq	#0,d6
00006F1A 6100 0000                  		bsr.w	BGScroll_Block2
00006F1E                            	; calculate Y position
00006F1E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00006F22 3038 F704                  		move.w	(v_screenposy).w,d0
00006F26 0240 07FF                  		andi.w	#$7FF,d0
00006F2A EA48                       		lsr.w	#5,d0
00006F2C 4440                       		neg.w	d0
00006F2E 0640 0020                  		addi.w	#$20,d0
00006F32 6A00                       		bpl.s	@limitY
00006F34 7000                       		moveq	#0,d0
00006F36                            	@limitY:
00006F36 3800                       		move.w	d0,d4
00006F38 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00006F3C 3038 F700                  		move.w	(v_screenposx).w,d0
00006F40 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00006F46 6600                       		bne.s	@notTitle
00006F48 7000                       		moveq	#0,d0	; reset foreground position in title screen
00006F4A                            	@notTitle:
00006F4A 4440                       		neg.w	d0
00006F4C 4840                       		swap	d0
00006F4E                            	; auto-scroll clouds
00006F4E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00006F52 069A 0001 0000             		addi.l	#$10000,(a2)+
00006F58 069A 0000 C000             		addi.l	#$C000,(a2)+
00006F5E 069A 0000 8000             		addi.l	#$8000,(a2)+
00006F64                            	; calculate background scroll	
00006F64 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
00006F68 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F6C 4440                       		neg.w	d0
00006F6E 323C 001F                  		move.w	#$1F,d1
00006F72 9244                       		sub.w	d4,d1
00006F74 6500                       		bcs.s	@gotoCloud2
00006F76                            	@cloudLoop1:		; upper cloud (32px)
00006F76 22C0                       		move.l	d0,(a1)+
00006F78 51C9 FFFC                  		dbf	d1,@cloudLoop1
00006F7C                            
00006F7C                            	@gotoCloud2:
00006F7C 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00006F80 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F84 4440                       		neg.w	d0
00006F86 323C 000F                  		move.w	#$F,d1
00006F8A                            	@cloudLoop2:		; middle cloud (16px)
00006F8A 22C0                       		move.l	d0,(a1)+
00006F8C 51C9 FFFC                  		dbf	d1,@cloudLoop2
00006F90                            
00006F90 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00006F94 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F98 4440                       		neg.w	d0
00006F9A 323C 000F                  		move.w	#$F,d1
00006F9E                            	@cloudLoop3:		; lower cloud (16px)
00006F9E 22C0                       		move.l	d0,(a1)+
00006FA0 51C9 FFFC                  		dbf	d1,@cloudLoop3
00006FA4                            
00006FA4 323C 002F                  		move.w	#$2F,d1
00006FA8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00006FAC 4440                       		neg.w	d0
00006FAE                            	@mountainLoop:		; distant mountains (48px)
00006FAE 22C0                       		move.l	d0,(a1)+
00006FB0 51C9 FFFC                  		dbf	d1,@mountainLoop
00006FB4                            
00006FB4 323C 0027                  		move.w	#$27,d1
00006FB8 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00006FBC 4440                       		neg.w	d0
00006FBE                            	@hillLoop:			; hills & waterfalls (40px)
00006FBE 22C0                       		move.l	d0,(a1)+
00006FC0 51C9 FFFC                  		dbf	d1,@hillLoop
00006FC4                            
00006FC4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00006FC8 3438 F700                  		move.w	(v_screenposx).w,d2
00006FCC 9440                       		sub.w	d0,d2
00006FCE 48C2                       		ext.l	d2
00006FD0 E182                       		asl.l	#8,d2
00006FD2 85FC 0068                  		divs.w	#$68,d2
00006FD6 48C2                       		ext.l	d2
00006FD8 E182                       		asl.l	#8,d2
00006FDA 7600                       		moveq	#0,d3
00006FDC 3600                       		move.w	d0,d3
00006FDE 323C 0047                  		move.w	#$47,d1
00006FE2 D244                       		add.w	d4,d1
00006FE4                            	@waterLoop:			; water deformation
00006FE4 3003                       		move.w	d3,d0
00006FE6 4440                       		neg.w	d0
00006FE8 22C0                       		move.l	d0,(a1)+
00006FEA 4843                       		swap	d3
00006FEC D682                       		add.l	d2,d3
00006FEE 4843                       		swap	d3
00006FF0 51C9 FFF2                  		dbf	d1,@waterLoop
00006FF4 4E75                       		rts
00006FF6                            ; End of function Deform_GHZ
00006FF6                            
00006FF6                            Deform_Title:
00006FF6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006FFA 48C4                       		ext.l	d4
00006FFC EB84                       		asl.l	#5,d4
00006FFE 2204                       		move.l	d4,d1
00007000 E384                       		asl.l	#1,d4
00007002 D881                       		add.l	d1,d4
00007004 7A00                       		moveq	#0,d5
00007006 6100 0000                  		bsr.w	BGScroll_Block1
0000700A 6100 0000                  		bsr.w	BGScroll_Block3
0000700E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007012 3038 F704                  		move.w	(v_screenposy).w,d0
00007016 0240 07FF                  		andi.w	#$7FF,d0
0000701A EA48                       		lsr.w	#5,d0
0000701C 4440                       		neg.w	d0
0000701E 0640 0026                  		addi.w	#$26,d0
00007022 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007026 3800                       		move.w	d0,d4
00007028 6100 0000                  		bsr.w	BGScroll_Block3
0000702C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007032 323C 006F                  		move.w	#$6F,d1
00007036 9244                       		sub.w	d4,d1
00007038 3038 F700                  		move.w	(v_screenposx).w,d0
0000703C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007042 6600                       		bne.s	loc_633C
00007044 7000                       		moveq	#0,d0
00007046                            
00007046                            loc_633C:
00007046 4440                       		neg.w	d0
00007048 4840                       		swap	d0
0000704A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000704E 4440                       		neg.w	d0
00007050                            
00007050                            loc_6346:
00007050 22C0                       		move.l	d0,(a1)+
00007052 51C9 FFFC                  		dbf	d1,loc_6346
00007056 323C 0027                  		move.w	#$27,d1
0000705A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000705E 4440                       		neg.w	d0
00007060                            
00007060                            loc_6356:
00007060 22C0                       		move.l	d0,(a1)+
00007062 51C9 FFFC                  		dbf	d1,loc_6356
00007066 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000706A 0640 0000                  		addi.w	#0,d0
0000706E 3438 F700                  		move.w	(v_screenposx).w,d2
00007072 0642 FE00                  		addi.w	#-$200,d2
00007076 9440                       		sub.w	d0,d2
00007078 48C2                       		ext.l	d2
0000707A E182                       		asl.l	#8,d2
0000707C 85FC 0068                  		divs.w	#$68,d2
00007080 48C2                       		ext.l	d2
00007082 E182                       		asl.l	#8,d2
00007084 7600                       		moveq	#0,d3
00007086 3600                       		move.w	d0,d3
00007088 323C 0047                  		move.w	#$47,d1
0000708C D244                       		add.w	d4,d1
0000708E                            
0000708E                            loc_6384:
0000708E 3003                       		move.w	d3,d0
00007090 4440                       		neg.w	d0
00007092 22C0                       		move.l	d0,(a1)+
00007094 4843                       		swap	d3
00007096 D682                       		add.l	d2,d3
00007098 4843                       		swap	d3
0000709A 51C9 FFF2                  		dbf	d1,loc_6384
0000709E 4E75                       		rts	
000070A0                            
000070A0                            ; ===========================================================================
000070A0                            ; ---------------------------------------------------------------------------
000070A0                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000070A0                            ; ---------------------------------------------------------------------------
000070A0                             
000070A0                            Deform_LZ:
000070A0 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000070A2 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
000070A6 48C4                       		ext.l	d4					; extend to long-word signed
000070A8 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
000070AA 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
000070AE 48C5                       		ext.l	d5					; extend to long-word signed
000070B0 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
000070B2 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
000070B6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
000070BC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
000070C0 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
000070C4 4440                       		neg.w	d0					; reverse
000070C6 4840                       		swap	d0					; send to upper word
000070C8 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
000070CC 4440                       		neg.w	d0					; reverse
000070CE 7600                       		moveq	#$00,d3					; clear d3
000070D0 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
000070D4 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
000070DA 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
000070DE 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
000070E2 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
000070E6 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
000070E8 B242                       		cmp.w	d2,d1					; is the water line below the screen?
000070EA 6F00                       		ble.s	DLZ_NoWater				; if not, branch
000070EC 3202                       		move.w	d2,d1					; set at maximum
000070EE                             
000070EE                            DLZ_NoWater:
000070EE 9441                       		sub.w	d1,d2					; subtract from water-line count
000070F0 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
000070F2 5301                       		subq.b	#$01,d1					; decrease above water count
000070F4 6500                       		bcs.s	DLZ_Water				; if finished, branch
000070F6                             
000070F6                            DLZ_Above:
000070F6 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
000070F8 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
000070FC                             
000070FC                            DLZ_Water:
000070FC 5302                       		subq.b	#$01,d2					; decrease below water count
000070FE 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00007100 3200                       		move.w	d0,d1					; copy BG position back to d1
00007102 4840                       		swap	d0					; move FG position back to lower word in d0
00007104 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007106 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
0000710A D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000710E D643                       		add.w	d3,d3					; multiply by word size (2)
00007110 D844                       		add.w	d4,d4					; ''
00007112 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007118 D6C4                       		adda.w	d4,a3					; advance to correct starting point
0000711A 1813                       		move.b	(a3),d4					; get current position byte
0000711C E404                       		asr.b	#$02,d4					; get only the position bits
0000711E 4884                       		ext.w	d4					; extend to word
00007120 D244                       		add.w	d4,d1					; adjust BG's current position
00007122 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
00007126 1812                       		move.b	(a2),d4					; get current position byte
00007128 E404                       		asr.b	#$02,d4					; get only the position bits
0000712A 4884                       		ext.w	d4					; extend to word
0000712C D044                       		add.w	d4,d0					; adjust FG's current position
0000712E                             
0000712E                            DLZ_Below:
0000712E D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
00007130 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00007132 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
00007134 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
00007136 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
0000713A                             
0000713A                            DLZ_Finish:
0000713A 4E75                       		rts						; return
0000713C                             
0000713C                            ; ---------------------------------------------------------------------------
0000713C                            ; Scroll data for the FG
0000713C                            ; ---------------------------------------------------------------------------
0000713C                             
0000713C                            DLZ_WaveFG:
0000713C                            		rept	$02
0000713C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000713C 0001 0400 0401 0800 0801+  		endr
0000753C                             
0000753C                            ; ---------------------------------------------------------------------------
0000753C                            ; Scroll data for the BG
0000753C                            ; ---------------------------------------------------------------------------
0000753C                             
0000753C                            DLZ_WaveBG:	rept	$04
0000753C                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
0000753C                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
0000753C                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
0000753C                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
0000753C                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
0000753C                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
0000753C                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
0000753C                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
0000753C FC01 0000 0000 0000 0000+  		endr
0000793C                             
0000793C                            ; ===========================================================================
0000793C                            ; End of function Deform_LZ
0000793C                            
0000793C                            ; ---------------------------------------------------------------------------
0000793C                            ; Marble Zone background layer deformation code
0000793C                            ; ---------------------------------------------------------------------------
0000793C                            
0000793C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000793C                            
0000793C                            
0000793C                            Deform_MZ:
0000793C                            	; block 1 - dungeon interior
0000793C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007940 48C4                       		ext.l	d4
00007942 ED84                       		asl.l	#6,d4
00007944 2204                       		move.l	d4,d1
00007946 E384                       		asl.l	#1,d4
00007948 D881                       		add.l	d1,d4
0000794A 7C02                       		moveq	#2,d6
0000794C 6100 0000                  		bsr.w	BGScroll_Block1
00007950                            	; block 3 - mountains
00007950 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007954 48C4                       		ext.l	d4
00007956 ED84                       		asl.l	#6,d4
00007958 7C06                       		moveq	#6,d6
0000795A 6100 0000                  		bsr.w	BGScroll_Block3
0000795E                            	; block 2 - bushes & antique buildings
0000795E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007962 48C4                       		ext.l	d4
00007964 EF84                       		asl.l	#7,d4
00007966 7C04                       		moveq	#4,d6
00007968 6100 0000                  		bsr.w	BGScroll_Block2
0000796C                            	; calculate y-position of background
0000796C 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007970 3238 F704                  		move.w	(v_screenposy).w,d1
00007974 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007978 6500                       		bcs.s	@noYscroll
0000797A 3401                       		move.w	d1,d2
0000797C D241                       		add.w	d1,d1
0000797E D242                       		add.w	d2,d1
00007980 E441                       		asr.w	#2,d1
00007982 D041                       		add.w	d1,d0
00007984                            	@noYscroll:
00007984 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007988 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
0000798C 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007990 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007996                            	; do something with redraw flags
00007996 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
0000799A 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
0000799E 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
000079A2 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
000079A6 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
000079AA                            	; calculate background scroll buffer
000079AA 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000079AE 3438 F700                  		move.w	(v_screenposx).w,d2
000079B2 4442                       		neg.w	d2
000079B4 3002                       		move.w	d2,d0
000079B6 E440                       		asr.w	#2,d0
000079B8 9042                       		sub.w	d2,d0
000079BA 48C0                       		ext.l	d0
000079BC E780                       		asl.l	#3,d0
000079BE 81FC 0005                  		divs.w	#5,d0
000079C2 48C0                       		ext.l	d0
000079C4 E980                       		asl.l	#4,d0
000079C6 E180                       		asl.l	#8,d0
000079C8 7600                       		moveq	#0,d3
000079CA 3602                       		move.w	d2,d3
000079CC E243                       		asr.w	#1,d3
000079CE 323C 0004                  		move.w	#4,d1
000079D2                            	@cloudLoop:		
000079D2 32C3                       		move.w	d3,(a1)+
000079D4 4843                       		swap	d3
000079D6 D680                       		add.l	d0,d3
000079D8 4843                       		swap	d3
000079DA 51C9 FFF6                  		dbf	d1,@cloudLoop
000079DE                            
000079DE 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000079E2 4440                       		neg.w	d0
000079E4 323C 0001                  		move.w	#1,d1
000079E8                            	@mountainLoop:		
000079E8 32C0                       		move.w	d0,(a1)+
000079EA 51C9 FFFC                  		dbf	d1,@mountainLoop
000079EE                            
000079EE 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000079F2 4440                       		neg.w	d0
000079F4 323C 0008                  		move.w	#8,d1
000079F8                            	@bushLoop:		
000079F8 32C0                       		move.w	d0,(a1)+
000079FA 51C9 FFFC                  		dbf	d1,@bushLoop
000079FE                            
000079FE 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007A02 4440                       		neg.w	d0
00007A04 323C 000F                  		move.w	#$F,d1
00007A08                            	@interiorLoop:		
00007A08 32C0                       		move.w	d0,(a1)+
00007A0A 51C9 FFFC                  		dbf	d1,@interiorLoop
00007A0E                            
00007A0E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007A12 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007A16 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007A1A 3400                       		move.w	d0,d2
00007A1C 0C40 0100                  		cmpi.w	#$100,d0
00007A20 6500                       		bcs.s	@limitY
00007A22 303C 0100                  		move.w	#$100,d0
00007A26                            	@limitY:
00007A26 0240 01F0                  		andi.w	#$1F0,d0
00007A2A E648                       		lsr.w	#3,d0
00007A2C 45F2 0000                  		lea	(a2,d0),a2
00007A30 6000 0000                  		bra.w	Bg_Scroll_X
00007A34                            ; End of function Deform_MZ
00007A34                            
00007A34                            ; ---------------------------------------------------------------------------
00007A34                            ; Star Light Zone background layer deformation code
00007A34                            ; ---------------------------------------------------------------------------
00007A34                            
00007A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A34                            
00007A34                            
00007A34                            Deform_SLZ:
00007A34                            	; vertical scrolling
00007A34 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007A38 48C5                       		ext.l	d5
00007A3A EF85                       		asl.l	#7,d5
00007A3C 6100 0000                  		bsr.w	Bg_Scroll_Y
00007A40 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007A46                            	; calculate background scroll buffer
00007A46 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007A4A 3438 F700                  		move.w	(v_screenposx).w,d2
00007A4E 4442                       		neg.w	d2
00007A50 3002                       		move.w	d2,d0
00007A52 E640                       		asr.w	#3,d0
00007A54 9042                       		sub.w	d2,d0
00007A56 48C0                       		ext.l	d0
00007A58 E980                       		asl.l	#4,d0
00007A5A 81FC 001C                  		divs.w	#$1C,d0
00007A5E 48C0                       		ext.l	d0
00007A60 E980                       		asl.l	#4,d0
00007A62 E180                       		asl.l	#8,d0
00007A64 7600                       		moveq	#0,d3
00007A66 3602                       		move.w	d2,d3
00007A68 323C 001B                  		move.w	#$1B,d1
00007A6C                            	@starLoop:		
00007A6C 32C3                       		move.w	d3,(a1)+
00007A6E 4843                       		swap	d3
00007A70 D680                       		add.l	d0,d3
00007A72 4843                       		swap	d3
00007A74 51C9 FFF6                  		dbf	d1,@starLoop
00007A78                            
00007A78 3002                       		move.w	d2,d0
00007A7A E640                       		asr.w	#3,d0
00007A7C 3200                       		move.w	d0,d1
00007A7E E241                       		asr.w	#1,d1
00007A80 D041                       		add.w	d1,d0
00007A82 323C 0004                  		move.w	#4,d1
00007A86                            	@buildingLoop1:		; distant black buildings
00007A86 32C0                       		move.w	d0,(a1)+
00007A88 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007A8C                            
00007A8C 3002                       		move.w	d2,d0
00007A8E E440                       		asr.w	#2,d0
00007A90 323C 0004                  		move.w	#4,d1
00007A94                            	@buildingLoop2:		; closer buildings
00007A94 32C0                       		move.w	d0,(a1)+
00007A96 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007A9A                            
00007A9A 3002                       		move.w	d2,d0
00007A9C E240                       		asr.w	#1,d0
00007A9E 323C 001D                  		move.w	#$1D,d1
00007AA2                            	@bottomLoop:		; bottom part of background
00007AA2 32C0                       		move.w	d0,(a1)+
00007AA4 51C9 FFFC                  		dbf	d1,@bottomLoop
00007AA8                            
00007AA8 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007AAC 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007AB0 3400                       		move.w	d0,d2
00007AB2 0440 00C0                  		subi.w	#$C0,d0
00007AB6 0240 03F0                  		andi.w	#$3F0,d0
00007ABA E648                       		lsr.w	#3,d0
00007ABC 45F2 0000                  		lea	(a2,d0),a2
00007AC0                            ;-------------------------------------------------------------------------------
00007AC0                            ;-------------------------------------------------------------------------------
00007AC0                            Bg_Scroll_X:
00007AC0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007AC4 323C 000E                  		move.w	#$E,d1
00007AC8 3038 F700                  		move.w	(v_screenposx).w,d0
00007ACC 4440                       		neg.w	d0
00007ACE 4840                       		swap	d0
00007AD0 0242 000F                  		andi.w	#$F,d2
00007AD4 D442                       		add.w	d2,d2
00007AD6 301A                       		move.w	(a2)+,d0
00007AD8 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007ADC                            	@blockLoop:
00007ADC 301A                       		move.w	(a2)+,d0
00007ADE                            	@pixelJump:		
00007ADE 22C0                       		move.l	d0,(a1)+
00007AE0 22C0                       		move.l	d0,(a1)+
00007AE2 22C0                       		move.l	d0,(a1)+
00007AE4 22C0                       		move.l	d0,(a1)+
00007AE6 22C0                       		move.l	d0,(a1)+
00007AE8 22C0                       		move.l	d0,(a1)+
00007AEA 22C0                       		move.l	d0,(a1)+
00007AEC 22C0                       		move.l	d0,(a1)+
00007AEE 22C0                       		move.l	d0,(a1)+
00007AF0 22C0                       		move.l	d0,(a1)+
00007AF2 22C0                       		move.l	d0,(a1)+
00007AF4 22C0                       		move.l	d0,(a1)+
00007AF6 22C0                       		move.l	d0,(a1)+
00007AF8 22C0                       		move.l	d0,(a1)+
00007AFA 22C0                       		move.l	d0,(a1)+
00007AFC 22C0                       		move.l	d0,(a1)+
00007AFE 51C9 FFDC                  		dbf	d1,@blockLoop
00007B02 4E75                       		rts
00007B04                            
00007B04                            ; ---------------------------------------------------------------------------
00007B04                            ; Spring Yard Zone background layer deformation	code
00007B04                            ; ---------------------------------------------------------------------------
00007B04                            
00007B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B04                            
00007B04                            
00007B04                            Deform_SYZ:
00007B04                            	; vertical scrolling
00007B04 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007B08 48C5                       		ext.l	d5
00007B0A E985                       		asl.l	#4,d5
00007B0C 2205                       		move.l	d5,d1
00007B0E E385                       		asl.l	#1,d5
00007B10 DA81                       		add.l	d1,d5
00007B12 6100 0000                  		bsr.w	Bg_Scroll_Y
00007B16 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007B1C                            	; calculate background scroll buffer
00007B1C 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007B20 3438 F700                  		move.w	(v_screenposx).w,d2
00007B24 4442                       		neg.w	d2
00007B26 3002                       		move.w	d2,d0
00007B28 E640                       		asr.w	#3,d0
00007B2A 9042                       		sub.w	d2,d0
00007B2C 48C0                       		ext.l	d0
00007B2E E780                       		asl.l	#3,d0
00007B30 81FC 0008                  		divs.w	#8,d0
00007B34 48C0                       		ext.l	d0
00007B36 E980                       		asl.l	#4,d0
00007B38 E180                       		asl.l	#8,d0
00007B3A 7600                       		moveq	#0,d3
00007B3C 3602                       		move.w	d2,d3
00007B3E E243                       		asr.w	#1,d3
00007B40 323C 0007                  		move.w	#7,d1
00007B44                            	@cloudLoop:		
00007B44 32C3                       		move.w	d3,(a1)+
00007B46 4843                       		swap	d3
00007B48 D680                       		add.l	d0,d3
00007B4A 4843                       		swap	d3
00007B4C 51C9 FFF6                  		dbf	d1,@cloudLoop
00007B50                            
00007B50 3002                       		move.w	d2,d0
00007B52 E640                       		asr.w	#3,d0
00007B54 323C 0004                  		move.w	#4,d1
00007B58                            	@mountainLoop:		
00007B58 32C0                       		move.w	d0,(a1)+
00007B5A 51C9 FFFC                  		dbf	d1,@mountainLoop
00007B5E                            
00007B5E 3002                       		move.w	d2,d0
00007B60 E440                       		asr.w	#2,d0
00007B62 323C 0005                  		move.w	#5,d1
00007B66                            	@buildingLoop:		
00007B66 32C0                       		move.w	d0,(a1)+
00007B68 51C9 FFFC                  		dbf	d1,@buildingLoop
00007B6C                            
00007B6C 3002                       		move.w	d2,d0
00007B6E 3202                       		move.w	d2,d1
00007B70 E241                       		asr.w	#1,d1
00007B72 9041                       		sub.w	d1,d0
00007B74 48C0                       		ext.l	d0
00007B76 E980                       		asl.l	#4,d0
00007B78 81FC 000E                  		divs.w	#$E,d0
00007B7C 48C0                       		ext.l	d0
00007B7E E980                       		asl.l	#4,d0
00007B80 E180                       		asl.l	#8,d0
00007B82 7600                       		moveq	#0,d3
00007B84 3602                       		move.w	d2,d3
00007B86 E243                       		asr.w	#1,d3
00007B88 323C 000D                  		move.w	#$D,d1
00007B8C                            	@bushLoop:		
00007B8C 32C3                       		move.w	d3,(a1)+
00007B8E 4843                       		swap	d3
00007B90 D680                       		add.l	d0,d3
00007B92 4843                       		swap	d3
00007B94 51C9 FFF6                  		dbf	d1,@bushLoop
00007B98                            
00007B98 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007B9C 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007BA0 3400                       		move.w	d0,d2
00007BA2 0240 01F0                  		andi.w	#$1F0,d0
00007BA6 E648                       		lsr.w	#3,d0
00007BA8 45F2 0000                  		lea	(a2,d0),a2
00007BAC 6000 FF12                  		bra.w	Bg_Scroll_X
00007BB0                            ; End of function Deform_SYZ
00007BB0                            
00007BB0                            ; ---------------------------------------------------------------------------
00007BB0                            ; Scrap	Brain Zone background layer deformation	code
00007BB0                            ; ---------------------------------------------------------------------------
00007BB0                            
00007BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BB0                            
00007BB0                            
00007BB0                            Deform_SBZ:
00007BB0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BB4 48C4                       		ext.l	d4
00007BB6 ED84                       		asl.l	#6,d4
00007BB8 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007BBC 48C5                       		ext.l	d5
00007BBE E985                       		asl.l	#4,d5
00007BC0 E385                       		asl.l	#1,d5
00007BC2 6100 0000                  		bsr.w	BGScroll_XY
00007BC6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007BCC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007BD0 323C 00DF                  		move.w	#223,d1
00007BD4 3038 F700                  		move.w	(v_screenposx).w,d0
00007BD8 4440                       		neg.w	d0
00007BDA 4840                       		swap	d0
00007BDC 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007BE0 4440                       		neg.w	d0
00007BE2                            
00007BE2                            loc_6576:
00007BE2 22C0                       		move.l	d0,(a1)+
00007BE4 51C9 FFFC                  		dbf	d1,loc_6576
00007BE8 4E75                       		rts	
00007BEA                            ;-------------------------------------------------------------------------------
00007BEA                            Deform_SBZ2:;loc_68A2:
00007BEA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BEE 48C4                       		ext.l	d4
00007BF0 ED84                       		asl.l	#6,d4
00007BF2 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007BF6 48C5                       		ext.l	d5
00007BF8 E985                       		asl.l	#4,d5
00007BFA E385                       		asl.l	#1,d5
00007BFC 6100 0000                  		bsr.w	BGScroll_XY
00007C00 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C06 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007C0A 323C 00DF                  		move.w	#223,d1
00007C0E 3038 F700                  		move.w	(v_screenposx).w,d0
00007C12 4440                       		neg.w	d0
00007C14 4840                       		swap	d0
00007C16 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C1A 4440                       		neg.w	d0
00007C1C                            
00007C1C                            loc_6577:
00007C1C 22C0                       		move.l	d0,(a1)+
00007C1E 51C9 FFFC                  		dbf	d1,loc_6577
00007C22 4E75                       		rts	
00007C24                            
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            
00007C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C24                            
00007C24                            
00007C24                            ScrollHoriz:
00007C24 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007C28 6100                       		bsr.s	MoveScreenHoriz
00007C2A 3038 F700                  		move.w	(v_screenposx).w,d0
00007C2E 0240 0010                  		andi.w	#$10,d0
00007C32 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007C36 B300                       		eor.b	d1,d0
00007C38 6600                       		bne.s	@return
00007C3A 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007C40 3038 F700                  		move.w	(v_screenposx).w,d0
00007C44 9044                       		sub.w	d4,d0		; compare new with old screen position
00007C46 6A00                       		bpl.s	@scrollRight
00007C48                            
00007C48 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007C4E 4E75                       		rts	
00007C50                            
00007C50                            	@scrollRight:
00007C50 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007C56                            
00007C56                            	@return:
00007C56 4E75                       		rts	
00007C58                            ; End of function ScrollHoriz
00007C58                            
00007C58                            
00007C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C58                            
00007C58                            MoveScreenHoriz:
00007C58 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007C5C 6700 0000                  		beq.w	@cont		
00007C60 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007C66                            		
00007C66                            	@cont:		
00007C66 3238 C904                  		move.w	($FFFFC904).w,d1
00007C6A 6700                       		beq.s	@cont1
00007C6C 0441 0100                  		sub.w	#$100,d1
00007C70 31C1 C904                  		move.w	d1,($FFFFC904).w
00007C74 7200                       		moveq	#0,d1
00007C76 1238 C904                  		move.b	($FFFFC904).w,d1
00007C7A E509                       		lsl.b	#2,d1
00007C7C 5801                       		addq.b	#4,d1
00007C7E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007C82 9001                       		sub.b	d1,d0
00007C84 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007C88 3031 0000                  		move.w	(a1,d0.w),d0
00007C8C 0240 3FFF                  		and.w	#$3FFF,d0
00007C90 6000                       		bra.s	@cont2
00007C92                            		
00007C92                            @cont1:
00007C92 3038 D008                  		move.w	($FFFFD008).w,d0
00007C96                            		
00007C96                            @cont2:
00007C96 9078 F700                  		sub.w	($FFFFF700).w,d0
00007C9A 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007C9E 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007CA0 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007CA4 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007CA6 4278 F73A                          clr.w    (v_scrshiftx).w
00007CAA 4E75                               rts 
00007CAC                            ; ===========================================================================
00007CAC                            
00007CAC                            SH_AheadOfMid:
00007CAC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007CB0 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007CB2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007CB6                            
00007CB6                                SH_Ahead16:
00007CB6 D078 F700                          add.w    (v_screenposx).w,d0
00007CBA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007CBE 6D00                               blt.s    SH_SetScreen
00007CC0 3038 F72A                          move.w    (v_limitright2).w,d0
00007CC4                            
00007CC4                            SH_SetScreen:
00007CC4 3200                               move.w    d0,d1
00007CC6 9278 F700                          sub.w    (v_screenposx).w,d1
00007CCA E141                               asl.w    #8,d1
00007CCC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007CD0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007CD4 4E75                               rts 
00007CD6                            ; ===========================================================================
00007CD6                            
00007CD6                            SH_BehindMid:
00007CD6 0C40 FFF0                  		cmpi.w	#-$10,d0
00007CDA 6400                       		bcc.s	@cont
00007CDC 303C FFF0                  		move.w	#-$10,d0	
00007CE0                            
00007CE0                            @cont:
00007CE0 D078 F700                  		add.w	(v_screenposx).w,d0
00007CE4 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007CE8 6EDA                       		bgt.s	SH_SetScreen
00007CEA 3038 F728                  		move.w	(v_limitleft2).w,d0
00007CEE 60D4                       		bra.s	SH_SetScreen
00007CF0                            ; End of function MoveScreenHoriz
00007CF0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007CF0                            
00007CF0                            MoveScreenHorizEXT:
00007CF0 3238 C904                  		move.w	($FFFFC904).w,d1
00007CF4 6700                       		beq.s	@cont1
00007CF6 0441 0100                  		sub.w	#$100,d1
00007CFA 31C1 C904                  		move.w	d1,($FFFFC904).w
00007CFE 7200                       		moveq	#0,d1
00007D00 1238 C904                  		move.b	($FFFFC904).w,d1
00007D04 E509                       		lsl.b	#2,d1
00007D06 5801                       		addq.b	#4,d1
00007D08 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007D0C 9001                       		sub.b	d1,d0
00007D0E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007D12 3031 0000                  		move.w	(a1,d0.w),d0
00007D16 0240 3FFF                  		and.w	#$3FFF,d0
00007D1A 6000                       		bra.s	@cont2
00007D1C                            		
00007D1C                            @cont1:
00007D1C 3038 D008                  		move.w	($FFFFD008).w,d0
00007D20                            		
00007D20                            @cont2:
00007D20 9078 F700                  		sub.w	($FFFFF700).w,d0
00007D24 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007D28 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007D2A 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007D2C 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            SHEXT_ProperlyFramed:
00007D2E 4278 F73A                          clr.w    (v_scrshiftx).w
00007D32 4E75                               rts 
00007D34                            ; ===========================================================================
00007D34                            
00007D34                            SHEXT_AheadOfMid:
00007D34 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007D38 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007D3A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007D3E                            
00007D3E                            SHEXT_Ahead16:
00007D3E D078 F700                          add.w    (v_screenposx).w,d0
00007D42 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007D46 6D00                               blt.s    SHEXT_SetScreen
00007D48 3038 F72A                          move.w    (v_limitright2).w,d0
00007D4C                            
00007D4C                            SHEXT_SetScreen:
00007D4C 3200                               move.w    d0,d1
00007D4E 9278 F700                          sub.w    (v_screenposx).w,d1
00007D52 E141                               asl.w    #8,d1
00007D54 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007D58 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007D5C 4E75                               rts
00007D5E                            
00007D5E                            ; ===========================================================================
00007D5E                            
00007D5E                            SHEXT_BehindMid:
00007D5E 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007D62 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007D64 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007D68                            
00007D68                            SHEXT_Behind16:
00007D68 D078 F700                          add.w    (v_screenposx).w,d0
00007D6C B078 F728                          cmp.w    (v_limitleft2).w,d0
00007D70 6EDA                               bgt.s    SHEXT_SetScreen
00007D72 3038 F728                          move.w    (v_limitleft2).w,d0
00007D76 60D4                               bra.s    SHEXT_SetScreen
00007D78                                  
00007D78                            ; End of function MoveScreenHoriz
00007D78                            
00007D78                            
00007D78                            ; ---------------------------------------------------------------------------
00007D78                            ; Subroutine to	scroll the level vertically as Sonic moves
00007D78                            ; ---------------------------------------------------------------------------
00007D78                            
00007D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D78                            
00007D78                            
00007D78                            ScrollVertical:
00007D78 7200                       		moveq	#0,d1
00007D7A 3038 D00C                  		move.w	(v_player+obY).w,d0
00007D7E 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007D82 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007D88 6700                       		beq.s	SV_NotRolling	; if not, branch
00007D8A 5B40                       		subq.w	#5,d0
00007D8C                            
00007D8C                            	SV_NotRolling:
00007D8C 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007D92 6700                       		beq.s	loc_664A	; if not, branch
00007D94                            
00007D94 0640 0020                  		addi.w	#32,d0
00007D98 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007D9C 6500                       		bcs.s	loc_6696
00007D9E 0440 0040                  		subi.w	#64,d0
00007DA2 6400                       		bcc.s	loc_6696
00007DA4 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007DA8 6600                       		bne.s	loc_66A8
00007DAA 6000                       		bra.s	loc_6656
00007DAC                            ; ===========================================================================
00007DAC                            
00007DAC                            loc_664A:
00007DAC 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007DB0 6600                       		bne.s	loc_665C
00007DB2 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007DB6 6600                       		bne.s	loc_66A8
00007DB8                            
00007DB8                            loc_6656:
00007DB8 4278 F73C                  		clr.w	(v_scrshifty).w
00007DBC 4E75                       		rts	
00007DBE                            ; ===========================================================================
00007DBE                            
00007DBE                            loc_665C:
00007DBE 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007DC4 6600                       		bne.s	loc_6684
00007DC6 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007DCA 6A00                       		bpl.s	loc_666C
00007DCC 4441                       		neg.w	d1
00007DCE                            
00007DCE                            loc_666C:
00007DCE 0C41 0800                  		cmpi.w	#$800,d1
00007DD2 6400                       		bcc.s	loc_6696
00007DD4 323C 0600                  		move.w	#$600,d1
00007DD8 0C40 0006                  		cmpi.w	#6,d0
00007DDC 6E00                       		bgt.s	loc_66F6
00007DDE 0C40 FFFA                  		cmpi.w	#-6,d0
00007DE2 6D00                       		blt.s	loc_66C0
00007DE4 6000                       		bra.s	loc_66AE
00007DE6                            ; ===========================================================================
00007DE6                            
00007DE6                            loc_6684:
00007DE6 323C 0200                  		move.w	#$200,d1
00007DEA 0C40 0002                  		cmpi.w	#2,d0
00007DEE 6E00                       		bgt.s	loc_66F6
00007DF0 0C40 FFFE                  		cmpi.w	#-2,d0
00007DF4 6D00                       		blt.s	loc_66C0
00007DF6 6000                       		bra.s	loc_66AE
00007DF8                            ; ===========================================================================
00007DF8                            
00007DF8                            loc_6696:
00007DF8 323C 1000                  		move.w	#$1000,d1
00007DFC 0C40 0010                  		cmpi.w	#$10,d0
00007E00 6E00                       		bgt.s	loc_66F6
00007E02 0C40 FFF0                  		cmpi.w	#-$10,d0
00007E06 6D00                       		blt.s	loc_66C0
00007E08 6000                       		bra.s	loc_66AE
00007E0A                            ; ===========================================================================
00007E0A                            
00007E0A                            loc_66A8:
00007E0A 7000                       		moveq	#0,d0
00007E0C 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007E10                            
00007E10                            loc_66AE:
00007E10 7200                       		moveq	#0,d1
00007E12 3200                       		move.w	d0,d1
00007E14 D278 F704                  		add.w	(v_screenposy).w,d1
00007E18 4A40                       		tst.w	d0
00007E1A 6A00 0000                  		bpl.w	loc_6700
00007E1E 6000 0000                  		bra.w	loc_66CC
00007E22                            ; ===========================================================================
00007E22                            
00007E22                            loc_66C0:
00007E22 4441                       		neg.w	d1
00007E24 48C1                       		ext.l	d1
00007E26 E181                       		asl.l	#8,d1
00007E28 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007E2C 4841                       		swap	d1
00007E2E                            
00007E2E                            loc_66CC:
00007E2E B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007E32 6E00                       		bgt.s	loc_6724
00007E34 0C41 FF00                  		cmpi.w	#-$100,d1
00007E38 6E00                       		bgt.s	loc_66F0
00007E3A 0241 07FF                  		andi.w	#$7FF,d1
00007E3E 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007E44 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007E4A 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007E50 6000                       		bra.s	loc_6724
00007E52                            ; ===========================================================================
00007E52                            
00007E52                            loc_66F0:
00007E52 3238 F72C                  		move.w	(v_limittop2).w,d1
00007E56 6000                       		bra.s	loc_6724
00007E58                            ; ===========================================================================
00007E58                            
00007E58                            loc_66F6:
00007E58 48C1                       		ext.l	d1
00007E5A E181                       		asl.l	#8,d1
00007E5C D2B8 F704                  		add.l	(v_screenposy).w,d1
00007E60 4841                       		swap	d1
00007E62                            
00007E62                            loc_6700:
00007E62 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007E66 6D00                       		blt.s	loc_6724
00007E68 0441 0800                  		subi.w	#$800,d1
00007E6C 6500                       		bcs.s	loc_6720
00007E6E 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007E74 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007E7A 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007E80 6000                       		bra.s	loc_6724
00007E82                            ; ===========================================================================
00007E82                            
00007E82                            loc_6720:
00007E82 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007E86                            
00007E86                            loc_6724:
00007E86 3838 F704                  		move.w	(v_screenposy).w,d4
00007E8A 4841                       		swap	d1
00007E8C 2601                       		move.l	d1,d3
00007E8E 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007E92 E09B                       		ror.l	#8,d3
00007E94 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007E98 21C1 F704                  		move.l	d1,(v_screenposy).w
00007E9C 3038 F704                  		move.w	(v_screenposy).w,d0
00007EA0 0240 0010                  		andi.w	#$10,d0
00007EA4 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007EA8 B300                       		eor.b	d1,d0
00007EAA 6600                       		bne.s	@return
00007EAC 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007EB2 3038 F704                  		move.w	(v_screenposy).w,d0
00007EB6 9044                       		sub.w	d4,d0
00007EB8 6A00                       		bpl.s	@scrollBottom
00007EBA 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007EC0 4E75                       		rts	
00007EC2                            ; ===========================================================================
00007EC2                            
00007EC2                            	@scrollBottom:
00007EC2 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007EC8                            
00007EC8                            	@return:
00007EC8 4E75                       		rts	
00007ECA                            ; End of function ScrollVertical
00007ECA                            
00007ECA                            
00007ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ECA                            ; Scrolls background and sets redraw flags.
00007ECA                            ; d4 - background x offset * $10000
00007ECA                            ; d5 - background y offset * $10000
00007ECA                            
00007ECA                            BGScroll_XY:
00007ECA 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007ECE 2002                       		move.l	d2,d0
00007ED0 D084                       		add.l	d4,d0
00007ED2 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007ED6 2200                       		move.l	d0,d1
00007ED8 4841                       		swap	d1
00007EDA 0241 0010                  		andi.w	#$10,d1
00007EDE 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007EE2 B701                       		eor.b	d3,d1
00007EE4 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007EE6 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007EEC 9082                       		sub.l	d2,d0	; new - old
00007EEE 6A00                       		bpl.s	@scrollRight
00007EF0 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007EF6 6000                       		bra.s	BGScroll_YRelative
00007EF8                            	@scrollRight:
00007EF8 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007EFE                            BGScroll_YRelative:
00007EFE 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007F02 2003                       		move.l	d3,d0
00007F04 D085                       		add.l	d5,d0
00007F06 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007F0A 2200                       		move.l	d0,d1
00007F0C 4841                       		swap	d1
00007F0E 0241 0010                  		andi.w	#$10,d1
00007F12 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F16 B501                       		eor.b	d2,d1
00007F18 6600                       		bne.s	@return
00007F1A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F20 9083                       		sub.l	d3,d0
00007F22 6A00                       		bpl.s	@scrollBottom
00007F24 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007F2A 4E75                       		rts
00007F2C                            	@scrollBottom:
00007F2C 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007F32                            	@return:
00007F32 4E75                       		rts
00007F34                            ; End of function BGScroll_XY
00007F34                            
00007F34                            Bg_Scroll_Y:
00007F34 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007F38 2003                       		move.l	d3,d0
00007F3A D085                       		add.l	d5,d0
00007F3C 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007F40 2200                       		move.l	d0,d1
00007F42 4841                       		swap	d1
00007F44 0241 0010                  		andi.w	#$10,d1
00007F48 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F4C B501                       		eor.b	d2,d1
00007F4E 6600                       		bne.s	@return
00007F50 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F56 9083                       		sub.l	d3,d0
00007F58 6A00                       		bpl.s	@scrollBottom
00007F5A 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007F60 4E75                       		rts
00007F62                            	@scrollBottom:
00007F62 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007F68                            	@return:
00007F68 4E75                       		rts
00007F6A                            
00007F6A                            
00007F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F6A                            
00007F6A                            
00007F6A                            BGScroll_YAbsolute:
00007F6A 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007F6E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007F72 3200                       		move.w	d0,d1
00007F74 0241 0010                  		andi.w	#$10,d1
00007F78 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F7C B501                       		eor.b	d2,d1
00007F7E 6600                       		bne.s	@return
00007F80 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F86 9043                       		sub.w	d3,d0
00007F88 6A00                       		bpl.s	@scrollBottom
00007F8A 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007F90 4E75                       		rts
00007F92                            	@scrollBottom:
00007F92 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007F98                            	@return:
00007F98 4E75                       		rts
00007F9A                            ; End of function BGScroll_YAbsolute
00007F9A                            
00007F9A                            
00007F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F9A                            ; d6 - bit to set for redraw
00007F9A                            
00007F9A                            BGScroll_Block1:
00007F9A 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007F9E 2002                       		move.l	d2,d0
00007FA0 D084                       		add.l	d4,d0
00007FA2 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007FA6 2200                       		move.l	d0,d1
00007FA8 4841                       		swap	d1
00007FAA 0241 0010                  		andi.w	#$10,d1
00007FAE 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007FB2 B701                       		eor.b	d3,d1
00007FB4 6600                       		bne.s	@return
00007FB6 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007FBC 9082                       		sub.l	d2,d0
00007FBE 6A00                       		bpl.s	@scrollRight
00007FC0 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007FC4 6000                       		bra.s	@return
00007FC6                            	@scrollRight:
00007FC6 5206                       		addq.b	#1,d6
00007FC8 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007FCC                            	@return:
00007FCC 4E75                       		rts
00007FCE                            ; End of function BGScroll_Block1
00007FCE                            
00007FCE                            
00007FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FCE                            
00007FCE                            
00007FCE                            BGScroll_Block2:
00007FCE 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007FD2 2002                       		move.l	d2,d0
00007FD4 D084                       		add.l	d4,d0
00007FD6 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007FDA 2200                       		move.l	d0,d1
00007FDC 4841                       		swap	d1
00007FDE 0241 0010                  		andi.w	#$10,d1
00007FE2 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007FE6 B701                       		eor.b	d3,d1
00007FE8 6600                       		bne.s	@return
00007FEA 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007FF0 9082                       		sub.l	d2,d0
00007FF2 6A00                       		bpl.s	@scrollRight
00007FF4 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007FF8 6000                       		bra.s	@return
00007FFA                            	@scrollRight:
00007FFA 5206                       		addq.b	#1,d6
00007FFC 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008000                            	@return:
00008000 4E75                       		rts
00008002                            ;-------------------------------------------------------------------------------
00008002                            BGScroll_Block3:
00008002 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008006 2002                       		move.l	d2,d0
00008008 D084                       		add.l	d4,d0
0000800A 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
0000800E 2200                       		move.l	d0,d1
00008010 4841                       		swap	d1
00008012 0241 0010                  		andi.w	#$10,d1
00008016 1638 F750                  		move.b	(v_bg3_xblock).w,d3
0000801A B701                       		eor.b	d3,d1
0000801C 6600                       		bne.s	@return
0000801E 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00008024 9082                       		sub.l	d2,d0
00008026 6A00                       		bpl.s	@scrollRight
00008028 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
0000802C 6000                       		bra.s	@return
0000802E                            	@scrollRight:
0000802E 5206                       		addq.b	#1,d6
00008030 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008034                            	@return:
00008034 4E75                       		rts
00008034 4E75                       		rts
00008036                            
00008036                            
00008036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008036                            
00008036                            ; sub_6886:
00008036                            LoadTilesAsYouMove_BGOnly:
00008036 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000803C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008042 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00008046 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000804A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000804E 343C 6000                  		move.w	#$6000,d2
00008052 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008056 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
0000805A 47F8 F710                  		lea	(v_bg2screenposx).w,a3
0000805E 6000 0000                  		bra.w	DrawBGScrollBlock2
00008062                            ; End of function sub_6886
00008062                            
00008062                            ; ---------------------------------------------------------------------------
00008062                            ; Subroutine to	display	correct	tiles as you move
00008062                            ; ---------------------------------------------------------------------------
00008062                            
00008062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008062                            
00008062                            
00008062                            LoadTilesAsYouMove:
00008062 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008068 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000806E                            		; First, update the background
0000806E 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00008072 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00008076 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000807A 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
0000807E 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008082 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008086 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
0000808A 6100 0000                  		bsr.w	DrawBGScrollBlock2
0000808E                            		; REV01 added a third scroll block, though, technically,
0000808E                            		; the RAM for it was already there in REV00
0000808E 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00008092 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008096 6100 0000                  		bsr.w	DrawBGScrollBlock3
0000809A                            		; Then, update the foreground
0000809A 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
0000809E 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
000080A2 49F8 A400                  		lea	(v_lvllayout).w,a4
000080A6 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
000080AA                            		; The FG's update function is inlined here
000080AA 4A12                       		tst.b	(a2)
000080AC 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
000080AE 0892 0000                  		bclr	#0,(a2)
000080B2 6700                       		beq.s	loc_6908
000080B4                            		; Draw new tiles at the top
000080B4 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
000080B6 7AF0                       		moveq	#-16,d5 ; X coordinate
000080B8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080BC 78F0                       		moveq	#-16,d4 ; Y coordinate
000080BE 7AF0                       		moveq	#-16,d5 ; X coordinate
000080C0 6100 0000                  		bsr.w	DrawBlocks_LR
000080C4                            
000080C4                            loc_6908:
000080C4 0892 0001                  		bclr	#1,(a2)
000080C8 6700                       		beq.s	loc_6922
000080CA                            		; Draw new tiles at the bottom
000080CA 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
000080CE 7AF0                       		moveq	#-16,d5
000080D0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080D4 383C 00E0                  		move.w	#224,d4
000080D8 7AF0                       		moveq	#-16,d5
000080DA 6100 0000                  		bsr.w	DrawBlocks_LR
000080DE                            
000080DE                            loc_6922:
000080DE 0892 0002                  		bclr	#2,(a2)
000080E2 6700                       		beq.s	loc_6938
000080E4                            		; Draw new tiles on the left
000080E4 78F0                       		moveq	#-16,d4
000080E6 7AF0                       		moveq	#-16,d5
000080E8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080EC 78F0                       		moveq	#-16,d4
000080EE 7AF0                       		moveq	#-16,d5
000080F0 6100 0000                  		bsr.w	DrawBlocks_TB
000080F4                            
000080F4                            loc_6938:
000080F4 0892 0003                  		bclr	#3,(a2)
000080F8 6700                       		beq.s	locret_6952
000080FA                            		; Draw new tiles on the right
000080FA 78F0                       		moveq	#-16,d4
000080FC 3A3C 0140                  		move.w	#320,d5
00008100 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008104 78F0                       		moveq	#-16,d4
00008106 3A3C 0140                  		move.w	#320,d5
0000810A 6100 0000                  		bsr.w	DrawBlocks_TB
0000810E                            
0000810E                            locret_6952:
0000810E 4E75                       		rts	
00008110                            ; End of function LoadTilesAsYouMove
00008110                            
00008110                            
00008110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008110                            
00008110                            ; sub_6954:
00008110                            DrawBGScrollBlock1:
00008110 4A12                       		tst.b	(a2)
00008112 6700 0000                  		beq.w	locret_69F2
00008116 0892 0000                  		bclr	#0,(a2)
0000811A 6700                       		beq.s	loc_6972
0000811C                            		; Draw new tiles at the top
0000811C 78F0                       		moveq	#-16,d4
0000811E 7AF0                       		moveq	#-16,d5
00008120 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008124 78F0                       		moveq	#-16,d4
00008126 7AF0                       		moveq	#-16,d5
00008128 6100 0000                  			bsr.w	DrawBlocks_LR
0000812C                            
0000812C                            loc_6972:
0000812C 0892 0001                  		bclr	#1,(a2)
00008130 6700                       		beq.s	loc_698E
00008132                            		; Draw new tiles at the top
00008132 383C 00E0                  		move.w	#224,d4
00008136 7AF0                       		moveq	#-16,d5
00008138 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000813C 383C 00E0                  		move.w	#224,d4
00008140 7AF0                       		moveq	#-16,d5
00008142 6100 0000                  			bsr.w	DrawBlocks_LR
00008146                            
00008146                            loc_698E:
00008146 0892 0002                  		bclr	#2,(a2)
0000814A                            
0000814A                            
0000814A 6700                       			beq.s	locj_6D56
0000814C                            			; Draw new tiles on the left
0000814C 78F0                       			moveq	#-16,d4
0000814E 7AF0                       			moveq	#-16,d5
00008150 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008154 78F0                       			moveq	#-16,d4
00008156 7AF0                       			moveq	#-16,d5
00008158 6100 0000                  			bsr.w	DrawBlocks_TB
0000815C                            	locj_6D56:
0000815C                            
0000815C 0892 0003                  			bclr	#3,(a2)
00008160 6700                       			beq.s	locj_6D70
00008162                            			; Draw new tiles on the right
00008162 78F0                       			moveq	#-16,d4
00008164 3A3C 0140                  			move.w	#320,d5
00008168 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000816C 78F0                       			moveq	#-16,d4
0000816E 3A3C 0140                  			move.w	#320,d5
00008172 6100 0000                  			bsr.w	DrawBlocks_TB
00008176                            	locj_6D70:
00008176                            
00008176 0892 0004                  			bclr	#4,(a2)
0000817A 6700                       			beq.s	locj_6D88
0000817C                            			; Draw entire row at the top
0000817C 78F0                       			moveq	#-16,d4
0000817E 7A00                       			moveq	#0,d5
00008180 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008184 78F0                       			moveq	#-16,d4
00008186 7A00                       			moveq	#0,d5
00008188 7C1F                       			moveq	#(512/16)-1,d6
0000818A 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000818E                            	locj_6D88:
0000818E                            
0000818E 0892 0005                  			bclr	#5,(a2)
00008192 6700                       			beq.s	locret_69F2
00008194                            			; Draw entire row at the bottom
00008194 383C 00E0                  			move.w	#224,d4
00008198 7A00                       			moveq	#0,d5
0000819A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000819E 383C 00E0                  			move.w	#224,d4
000081A2 7A00                       			moveq	#0,d5
000081A4 7C1F                       			moveq	#(512/16)-1,d6
000081A6 6100 0000                  			bsr.w	DrawBlocks_LR_3
000081AA                            
000081AA                            locret_69F2:
000081AA 4E75                       		rts	
000081AC                            ; End of function DrawBGScrollBlock1
000081AC                            
000081AC                            
000081AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081AC                            
000081AC                            ; Essentially, this draws everything that isn't scroll block 1
000081AC                            ; sub_69F4:
000081AC                            DrawBGScrollBlock2:
000081AC                            
000081AC 4A12                       			tst.b	(a2)
000081AE 6700 0000                  			beq.w	locj_6DF2
000081B2 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
000081B8 6700 0000                  			beq.w	Draw_SBz
000081BC 0892 0000                  			bclr	#0,(a2)
000081C0 6700                       			beq.s	locj_6DD2
000081C2                            			; Draw new tiles on the left
000081C2 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
000081C6 7AF0                       			moveq	#-16,d5
000081C8 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081CC 383C 0070                  			move.w	#224/2,d4
000081D0 7AF0                       			moveq	#-16,d5
000081D2 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
000081D4 6100 0000                  			bsr.w	DrawBlocks_TB_2
000081D8                            	locj_6DD2:
000081D8 0892 0001                  			bclr	#1,(a2)
000081DC 6700                       			beq.s	locj_6DF2
000081DE                            			; Draw new tiles on the right
000081DE 383C 0070                  			move.w	#224/2,d4
000081E2 3A3C 0140                  			move.w	#320,d5
000081E6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081EA 383C 0070                  			move.w	#224/2,d4
000081EE 3A3C 0140                  			move.w	#320,d5
000081F2 7C02                       			moveq	#3-1,d6
000081F4 6100 0000                  			bsr.w	DrawBlocks_TB_2
000081F8                            	locj_6DF2:
000081F8 4E75                       			rts
000081FA                            ;===============================================================================
000081FA                            	locj_6DF4:
000081FA 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
0000820A 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000821A 0200                       			dc.b $02,$00						
0000821C                            ;===============================================================================
0000821C                            	Draw_SBz:
0000821C 78F0                       			moveq	#-16,d4
0000821E 0892 0000                  			bclr	#0,(a2)
00008222 6600                       			bne.s	locj_6E28
00008224 0892 0001                  			bclr	#1,(a2)
00008228 6700                       			beq.s	locj_6E72
0000822A 383C 00E0                  			move.w	#224,d4
0000822E                            	locj_6E28:
0000822E 41F9 0000 81FB             			lea	(locj_6DF4+1).l,a0
00008234 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008238 D044                       			add.w	d4,d0
0000823A 0240 01F0                  			andi.w	#$1F0,d0
0000823E E848                       			lsr.w	#4,d0
00008240 1030 0000                  			move.b	(a0,d0.w),d0
00008244 47F9 0000 0000             			lea	(locj_6FE4).l,a3
0000824A 3673 0000                  			movea.w	(a3,d0.w),a3
0000824E 6700                       			beq.s	locj_6E5E
00008250 7AF0                       			moveq	#-16,d5
00008252 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008256 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000825A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000825E 6100 0000                  			bsr.w	DrawBlocks_LR
00008262 6000                       			bra.s	locj_6E72
00008264                            ;===============================================================================
00008264                            	locj_6E5E:
00008264 7A00                       			moveq	#0,d5
00008266 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000826A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000826E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008272 7C1F                       			moveq	#(512/16)-1,d6
00008274 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008278                            	locj_6E72:
00008278 4A12                       			tst.b	(a2)
0000827A 6600                       			bne.s	locj_6E78
0000827C 4E75                       			rts
0000827E                            ;===============================================================================			
0000827E                            	locj_6E78:
0000827E 78F0                       			moveq	#-16,d4
00008280 7AF0                       			moveq	#-16,d5
00008282 1012                       			move.b	(a2),d0
00008284 0200 00A8                  			andi.b	#$A8,d0
00008288 6700                       			beq.s	locj_6E8C
0000828A E208                       			lsr.b	#1,d0
0000828C 1480                       			move.b	d0,(a2)
0000828E 3A3C 0140                  			move.w	#320,d5
00008292                            	locj_6E8C:
00008292 41F9 0000 81FA             			lea	(locj_6DF4).l,a0
00008298 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000829C 0240 01F0                  			andi.w	#$1F0,d0
000082A0 E848                       			lsr.w	#4,d0
000082A2 41F0 0000                  			lea	(a0,d0.w),a0
000082A6 6000 0000                  			bra.w	locj_6FEC						
000082AA                            ;===============================================================================
000082AA                            
000082AA                            
000082AA                            	; locj_6EA4:
000082AA                            	DrawBGScrollBlock3:
000082AA 4A12                       			tst.b	(a2)
000082AC 6700 0000                  			beq.w	locj_6EF0
000082B0 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000082B6 6700 0000                  			beq.w	Draw_Mz
000082BA 0892 0000                  			bclr	#0,(a2)
000082BE 6700                       			beq.s	locj_6ED0
000082C0                            			; Draw new tiles on the left
000082C0 383C 0040                  			move.w	#$40,d4
000082C4 7AF0                       			moveq	#-16,d5
000082C6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000082CA 383C 0040                  			move.w	#$40,d4
000082CE 7AF0                       			moveq	#-16,d5
000082D0 7C02                       			moveq	#3-1,d6
000082D2 6100 0000                  			bsr.w	DrawBlocks_TB_2
000082D6                            	locj_6ED0:
000082D6 0892 0001                  			bclr	#1,(a2)
000082DA 6700                       			beq.s	locj_6EF0
000082DC                            			; Draw new tiles on the right
000082DC 383C 0040                  			move.w	#$40,d4
000082E0 3A3C 0140                  			move.w	#320,d5
000082E4 6100 0000                  			bsr.w	Calc_VRAM_Pos
000082E8 383C 0040                  			move.w	#$40,d4
000082EC 3A3C 0140                  			move.w	#320,d5
000082F0 7C02                       			moveq	#3-1,d6
000082F2 6100 0000                  			bsr.w	DrawBlocks_TB_2
000082F6                            	locj_6EF0:
000082F6 4E75                       			rts
000082F8                            	locj_6EF2:
000082F8 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008308 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008318 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008328 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008338 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008348 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008358 0200                       			dc.b $02,$00
0000835A                            ;===============================================================================
0000835A                            	Draw_Mz:
0000835A 78F0                       			moveq	#-16,d4
0000835C 0892 0000                  			bclr	#0,(a2)
00008360 6600                       			bne.s	locj_6F66
00008362 0892 0001                  			bclr	#1,(a2)
00008366 6700                       			beq.s	locj_6FAE
00008368 383C 00E0                  			move.w	#224,d4
0000836C                            	locj_6F66:
0000836C 41F9 0000 82F9             			lea	(locj_6EF2+1).l,a0
00008372 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008376 0440 0200                  			subi.w	#$200,d0
0000837A D044                       			add.w	d4,d0
0000837C 0240 07F0                  			andi.w	#$7F0,d0
00008380 E848                       			lsr.w	#4,d0
00008382 1030 0000                  			move.b	(a0,d0.w),d0
00008386 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
0000838A 6700                       			beq.s	locj_6F9A
0000838C 7AF0                       			moveq	#-16,d5
0000838E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008392 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008396 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000839A 6100 0000                  			bsr.w	DrawBlocks_LR
0000839E 6000                       			bra.s	locj_6FAE
000083A0                            ;===============================================================================
000083A0                            	locj_6F9A:
000083A0 7A00                       			moveq	#0,d5
000083A2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000083A6 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083AA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000083AE 7C1F                       			moveq	#(512/16)-1,d6
000083B0 6100 0000                  			bsr.w	DrawBlocks_LR_3
000083B4                            	locj_6FAE:
000083B4 4A12                       			tst.b	(a2)
000083B6 6600                       			bne.s	locj_6FB4
000083B8 4E75                       			rts
000083BA                            ;===============================================================================			
000083BA                            	locj_6FB4:
000083BA 78F0                       			moveq	#-16,d4
000083BC 7AF0                       			moveq	#-16,d5
000083BE 1012                       			move.b	(a2),d0
000083C0 0200 00A8                  			andi.b	#$A8,d0
000083C4 6700                       			beq.s	locj_6FC8
000083C6 E208                       			lsr.b	#1,d0
000083C8 1480                       			move.b	d0,(a2)
000083CA 3A3C 0140                  			move.w	#320,d5
000083CE                            	locj_6FC8:
000083CE 41F9 0000 82F8             			lea	(locj_6EF2).l,a0
000083D4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000083D8 0440 0200                  			subi.w	#$200,d0
000083DC 0240 07F0                  			andi.w	#$7F0,d0
000083E0 E848                       			lsr.w	#4,d0
000083E2 41F0 0000                  			lea	(a0,d0.w),a0
000083E6 6000 0000                  			bra.w	locj_6FEC
000083EA                            ;===============================================================================			
000083EA                            	locj_6FE4:
000083EA FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000083F2                            	locj_6FEC:
000083F2 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083F4 2E3C 0080 0000             			move.l	#$800000,d7
000083FA                            	locj_6FF4:			
000083FA 7000                       			moveq	#0,d0
000083FC 1018                       			move.b	(a0)+,d0
000083FE 0112                       			btst	d0,(a2)
00008400 6700                       			beq.s	locj_701C
00008402 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008406 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
0000840A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000840E 6100 0000                  			bsr.w	GetBlockData
00008412 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008416 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000841A 6100 0000                  			bsr.w	DrawBlock
0000841E 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008422                            	locj_701C:
00008422 0644 0010                  			addi.w	#16,d4
00008426 51CE FFD2                  			dbf	d6,locj_6FF4
0000842A 4212                       			clr.b	(a2)
0000842C 4E75                       			rts			
0000842E                            
0000842E                            
0000842E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000842E                            
0000842E                            ; Don't be fooled by the name: this function's for drawing from left to right
0000842E                            ; when the camera's moving up or down
0000842E                            ; DrawTiles_LR:
0000842E                            DrawBlocks_LR:
0000842E 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
00008430                            ; DrawTiles_LR_2:
00008430                            DrawBlocks_LR_2:
00008430 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008436 2200                       		move.l	d0,d1
00008438                            
00008438                            	@loop:
00008438 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000843C 6100 0000                  		bsr.w	GetBlockData
00008440 2001                       		move.l	d1,d0
00008442 6100 0000                  		bsr.w	DrawBlock
00008446 5801                       		addq.b	#4,d1		; Two tiles ahead
00008448 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
0000844C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008450 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
00008454 51CE FFE2                  		dbf	d6,@loop
00008458 4E75                       		rts
0000845A                            ; End of function DrawBlocks_LR
0000845A                            
0000845A                            ; DrawTiles_LR_3:
0000845A                            DrawBlocks_LR_3:
0000845A 2E3C 0080 0000             		move.l	#$800000,d7
00008460 2200                       		move.l	d0,d1
00008462                            
00008462                            	@loop:
00008462 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008466 6100 0000                  		bsr.w	GetBlockData_2
0000846A 2001                       		move.l	d1,d0
0000846C 6100 0000                  		bsr.w	DrawBlock
00008470 5801                       		addq.b	#4,d1
00008472 0201 007F                  		andi.b	#$7F,d1
00008476 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000847A 0645 0010                  		addi.w	#16,d5
0000847E 51CE FFE2                  		dbf	d6,@loop
00008482 4E75                       		rts	
00008484                            ; End of function DrawBlocks_LR_3
00008484                            
00008484                            
00008484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008484                            
00008484                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008484                            ; when the camera's moving left or right
00008484                            ; DrawTiles_TB:
00008484                            DrawBlocks_TB:
00008484 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008486                            ; DrawTiles_TB_2:
00008486                            DrawBlocks_TB_2:
00008486 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
0000848C 2200                       		move.l	d0,d1
0000848E                            
0000848E                            	@loop:
0000848E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008492 6100 0000                  		bsr.w	GetBlockData
00008496 2001                       		move.l	d1,d0
00008498 6100 0000                  		bsr.w	DrawBlock
0000849C 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
000084A0 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000084A4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000084A8 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000084AC 51CE FFE0                  		dbf	d6,@loop
000084B0 4E75                       		rts	
000084B2                            ; End of function DrawBlocks_TB_2
000084B2                            
000084B2                            
000084B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084B2                            
000084B2                            ; Draws a block's worth of tiles
000084B2                            ; Parameters:
000084B2                            ; a0 = Pointer to block metadata (block index and X/Y flip)
000084B2                            ; a1 = Pointer to block
000084B2                            ; a5 = Pointer to VDP command port
000084B2                            ; a6 = Pointer to VDP data port
000084B2                            ; d0 = VRAM command to access plane
000084B2                            ; d2 = VRAM plane A/B specifier
000084B2                            ; d7 = Plane row delta
000084B2                            ; DrawTiles:
000084B2                            DrawBlock:
000084B2 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
000084B4 4840                       		swap	d0
000084B6 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
000084BA 6600                       		bne.s	DrawFlipY
000084BC 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000084C0 6600                       		bne.s	DrawFlipX
000084C2 2A80                       		move.l	d0,(a5)
000084C4 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000084C6 D087                       		add.l	d7,d0		; Next row
000084C8 2A80                       		move.l	d0,(a5)
000084CA 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000084CC 4E75                       		rts	
000084CE                            ; ===========================================================================
000084CE                            
000084CE                            DrawFlipX:
000084CE 2A80                       		move.l	d0,(a5)
000084D0 2819                       		move.l	(a1)+,d4
000084D2 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000084D8 4844                       		swap	d4		; Swap the tiles around
000084DA 2C84                       		move.l	d4,(a6)		; Write top two tiles
000084DC D087                       		add.l	d7,d0		; Next row
000084DE 2A80                       		move.l	d0,(a5)
000084E0 2819                       		move.l	(a1)+,d4
000084E2 0A84 0800 0800             		eori.l	#$8000800,d4
000084E8 4844                       		swap	d4
000084EA 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000084EC 4E75                       		rts	
000084EE                            ; ===========================================================================
000084EE                            
000084EE                            DrawFlipY:
000084EE 0810 0003                  		btst	#3,(a0)
000084F2 6600                       		bne.s	DrawFlipXY
000084F4 2A80                       		move.l	d0,(a5)
000084F6 2A19                       		move.l	(a1)+,d5
000084F8 2819                       		move.l	(a1)+,d4
000084FA 0A84 1000 1000             		eori.l	#$10001000,d4
00008500 2C84                       		move.l	d4,(a6)
00008502 D087                       		add.l	d7,d0
00008504 2A80                       		move.l	d0,(a5)
00008506 0A85 1000 1000             		eori.l	#$10001000,d5
0000850C 2C85                       		move.l	d5,(a6)
0000850E 4E75                       		rts	
00008510                            ; ===========================================================================
00008510                            
00008510                            DrawFlipXY:
00008510 2A80                       		move.l	d0,(a5)
00008512 2A19                       		move.l	(a1)+,d5
00008514 2819                       		move.l	(a1)+,d4
00008516 0A84 1800 1800             		eori.l	#$18001800,d4
0000851C 4844                       		swap	d4
0000851E 2C84                       		move.l	d4,(a6)
00008520 D087                       		add.l	d7,d0
00008522 2A80                       		move.l	d0,(a5)
00008524 0A85 1800 1800             		eori.l	#$18001800,d5
0000852A 4845                       		swap	d5
0000852C 2C85                       		move.l	d5,(a6)
0000852E 4E75                       		rts	
00008530                            ; End of function DrawBlocks
00008530                            
00008530                            ; ===========================================================================
00008530                            ; unused garbage
00008530                            
00008530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008530                            
00008530                            ; Gets address of block at a certain coordinate
00008530                            ; Parameters:
00008530                            ; a4 = Pointer to level layout
00008530                            ; d4 = Relative Y coordinate
00008530                            ; d5 = Relative X coordinate
00008530                            ; Returns:
00008530                            ; a0 = Address of block metadata
00008530                            ; a1 = Address of block
00008530                            ; DrawBlocks:
00008530                            GetBlockData:
00008530 DA53                       			add.w	(a3),d5
00008532                            	GetBlockData_2:
00008532 D86B 0004                  			add.w	4(a3),d4
00008536 43F8 B000                  			lea	(v_16x16).w,a1
0000853A                            		; Turn Y coordinate into index into level layout
0000853A 3604                       		move.w	d4,d3
0000853C E24B                       		lsr.w	#1,d3
0000853E 0243 0380                  		andi.w	#$380,d3
00008542                            		; Turn X coordinate into index into level layout
00008542 E64D                       		lsr.w	#3,d5
00008544 3005                       		move.w	d5,d0
00008546 EA48                       		lsr.w	#5,d0
00008548 0240 007F                  		andi.w	#$7F,d0
0000854C                            		; Get chunk from level layout
0000854C D043                       		add.w	d3,d0
0000854E 76FF                       		moveq	#-1,d3
00008550 1634 0000                  		move.b	(a4,d0.w),d3
00008554 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008556                            		; Turn chunk ID into index into chunk table
00008556 5303                       		subq.b	#1,d3
00008558 0243 007F                  		andi.w	#$7F,d3
0000855C EE5B                       		ror.w	#7,d3
0000855E                            		; Turn Y coordinate into index into chunk
0000855E D844                       		add.w	d4,d4
00008560 0244 01E0                  		andi.w	#$1E0,d4
00008564                            		; Turn X coordinate into index into chunk
00008564 0245 001E                  		andi.w	#$1E,d5
00008568                            		; Get block metadata from chunk
00008568 D644                       		add.w	d4,d3
0000856A D645                       		add.w	d5,d3
0000856C 2043                       		movea.l	d3,a0
0000856E 3610                       		move.w	(a0),d3
00008570                            		; Turn block ID into address
00008570 0243 03FF                  		andi.w	#$3FF,d3
00008574 E74B                       		lsl.w	#3,d3
00008576 D2C3                       		adda.w	d3,a1
00008578                            
00008578                            locret_6C1E:
00008578 4E75                       		rts	
0000857A                            ; End of function GetBlockData
0000857A                            
0000857A                            
0000857A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000857A                            
0000857A                            ; Produces a VRAM plane access command from coordinates
0000857A                            ; Parameters:
0000857A                            ; d4 = Relative Y coordinate
0000857A                            ; d5 = Relative X coordinate
0000857A                            ; Returns VDP command in d0
0000857A                            Calc_VRAM_Pos:
0000857A DA53                       			add.w	(a3),d5
0000857C                            	Calc_VRAM_Pos_2:
0000857C D86B 0004                  			add.w	4(a3),d4
00008580                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008580                            		; Also note that this wraps the value to the size of the plane:
00008580                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008580 0244 00F0                  		andi.w	#$F0,d4
00008584 0245 01F0                  		andi.w	#$1F0,d5
00008588                            		; Transform the adjusted coordinates into a VDP command
00008588 E94C                       		lsl.w	#4,d4
0000858A E44D                       		lsr.w	#2,d5
0000858C D845                       		add.w	d5,d4
0000858E 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008590 4840                       		swap	d0
00008592 3004                       		move.w	d4,d0
00008594 4E75                       		rts	
00008596                            ; End of function Calc_VRAM_Pos
00008596                            
00008596                            
00008596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008596                            ; not used
00008596                            
00008596                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008596                            ; VRAM layout: the only difference is the high bits of the
00008596                            ; plane's VRAM address, which are 10 instead of 11.
00008596                            ; Both the foreground and background are at $C000 and $E000
00008596                            ; respectively, so this one starting at $8000 makes no sense.
00008596                            ; sub_6C3C:
00008596                            Calc_VRAM_Pos_Unknown:
00008596 D86B 0004                  		add.w	4(a3),d4
0000859A DA53                       		add.w	(a3),d5
0000859C 0244 00F0                  		andi.w	#$F0,d4
000085A0 0245 01F0                  		andi.w	#$1F0,d5
000085A4 E94C                       		lsl.w	#4,d4
000085A6 E44D                       		lsr.w	#2,d5
000085A8 D845                       		add.w	d5,d4
000085AA 7002                       		moveq	#2,d0
000085AC 4840                       		swap	d0
000085AE 3004                       		move.w	d4,d0
000085B0 4E75                       		rts	
000085B2                            ; End of function Calc_VRAM_Pos_Unknown
000085B2                            
000085B2                            ; ---------------------------------------------------------------------------
000085B2                            ; Subroutine to	load tiles as soon as the level	appears
000085B2                            ; ---------------------------------------------------------------------------
000085B2                            
000085B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085B2                            
000085B2                            
000085B2                            LoadTilesFromStart:
000085B2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000085B8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000085BE 47F8 F700                  		lea	(v_screenposx).w,a3
000085C2 49F8 A400                  		lea	(v_lvllayout).w,a4
000085C6 343C 4000                  		move.w	#$4000,d2
000085CA 6100                       		bsr.s	DrawChunks
000085CC 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000085D0 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000085D4 343C 6000                  		move.w	#$6000,d2
000085D8 4A38 FE10                  			tst.b	(v_zone).w
000085DC 6700 0000                  			beq.w	Draw_GHz_Bg
000085E0 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000085E6 6700 0000                  			beq.w	Draw_Mz_Bg
000085EA 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000085F0 6700 0000                  			beq.w	Draw_SBz_Bg
000085F4 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000085FA 6700 0000                  			beq.w	Draw_GHz_Bg
000085FE                            ; End of function LoadTilesFromStart
000085FE                            
000085FE                            
000085FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085FE                            
000085FE                            
000085FE                            DrawChunks:
000085FE 78F0                       		moveq	#-16,d4
00008600 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008602                            
00008602                            	@loop:
00008602 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008606 7A00                       		moveq	#0,d5
00008608 3204                       		move.w	d4,d1
0000860A 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000860E 3801                       		move.w	d1,d4
00008610 7A00                       		moveq	#0,d5
00008612 7C1F                       		moveq	#(512/16)-1,d6
00008614 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008618 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000861C 0644 0010                  		addi.w	#16,d4
00008620 51CE FFE0                  		dbf	d6,@loop
00008624 4E75                       		rts	
00008626                            ; End of function DrawChunks
00008626                            
00008626                            	Draw_GHz_Bg:
00008626 7800                       			moveq	#0,d4
00008628 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000862A                            	locj_7224:			
0000862A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000862E 41F9 0000 0000             			lea	(locj_724a),a0
00008634 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008638 D044                       			add.w	d4,d0
0000863A 0240 00F0                  			andi.w	#$F0,d0
0000863E 6100 0000                  			bsr.w	locj_72Ba
00008642 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008646 0644 0010                  			addi.w	#16,d4
0000864A 51CE FFDE                  			dbf	d6,locj_7224
0000864E 4E75                       			rts
00008650                            	locj_724a:
00008650 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
00008660                            ;-------------------------------------------------------------------------------
00008660                            	Draw_Mz_Bg:;locj_725a:
00008660 78F0                       			moveq	#-16,d4
00008662 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008664                            	locj_725E:			
00008664 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008668 41FA FC8F                  			lea	(locj_6EF2+1),a0
0000866C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008670 0440 0200                  			subi.w	#$200,d0
00008674 D044                       			add.w	d4,d0
00008676 0240 07F0                  			andi.w	#$7F0,d0
0000867A 6100 0000                  			bsr.w	locj_72Ba
0000867E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008682 0644 0010                  			addi.w	#16,d4
00008686 51CE FFDC                  			dbf	d6,locj_725E
0000868A 4E75                       			rts
0000868C                            ;-------------------------------------------------------------------------------
0000868C                            	Draw_SBz_Bg:;locj_7288:
0000868C 78F0                       			moveq	#-16,d4
0000868E 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008690                            	locj_728C:			
00008690 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008694 41FA FB65                  			lea	(locj_6DF4+1),a0
00008698 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000869C D044                       			add.w	d4,d0
0000869E 0240 01F0                  			andi.w	#$1F0,d0
000086A2 6100 0000                  			bsr.w	locj_72Ba
000086A6 4CDF 0070                  			movem.l	(sp)+,d4-d6
000086AA 0644 0010                  			addi.w	#16,d4
000086AE 51CE FFE0                  			dbf	d6,locj_728C
000086B2 4E75                       			rts
000086B4                            ;-------------------------------------------------------------------------------
000086B4                            	locj_72B2:
000086B4 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000086BC                            	locj_72Ba:
000086BC E848                       			lsr.w	#4,d0
000086BE 1030 0000                  			move.b	(a0,d0.w),d0
000086C2 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000086C6 6700                       			beq.s	locj_72da
000086C8 7AF0                       			moveq	#-16,d5
000086CA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086CE 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000086D2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086D6 6100 FD56                  			bsr.w	DrawBlocks_LR
000086DA 6000                       			bra.s	locj_72EE
000086DC                            	locj_72da:
000086DC 7A00                       			moveq	#0,d5
000086DE 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086E2 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000086E6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086EA 7C1F                       			moveq	#(512/16)-1,d6
000086EC 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000086F0                            	locj_72EE:
000086F0 4E75                       			rts
000086F2                            
000086F2                            ; ---------------------------------------------------------------------------
000086F2                            ; Subroutine to load basic level data
000086F2                            ; ---------------------------------------------------------------------------
000086F2                            
000086F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086F2                            
000086F2                            
000086F2                            LevelDataLoad:
000086F2 7000                       		moveq	#0,d0
000086F4 1038 FE10                  		move.b	(v_zone).w,d0
000086F8 E948                       		lsl.w	#4,d0
000086FA 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008700 45F2 0000                  		lea	(a2,d0.w),a2
00008704 2F0A                       		move.l	a2,-(sp)
00008706 588A                       		addq.l	#4,a2
00008708 205A                       		movea.l	(a2)+,a0
0000870A 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000870E 303C 0000                  		move.w	#0,d0
00008712 6100 8EF0                  		bsr.w	EniDec
00008716 205A                       		movea.l	(a2)+,a0
00008718 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000871E 6100 9062                  		bsr.w	KosDec
00008722 6100 0000                  		bsr.w	LevelLayoutLoad
00008726 301A                       		move.w	(a2)+,d0
00008728 3012                       		move.w	(a2),d0
0000872A 0240 00FF                  		andi.w	#$FF,d0
0000872E 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008734 6600                       		bne.s	@notSBZ3	; if not, branch
00008736 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008738                            
00008738                            	@notSBZ3:
00008738 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000873E 6700                       		beq.s	@isSBZorFZ	; if yes, branch
00008740 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008746 6600                       		bne.s	@normalpal	; if not, branch
00008748                            
00008748                            	@isSBZorFZ:
00008748 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
0000874A                            
0000874A                            	@normalpal:
0000874A 6100 9A5C                  		bsr.w	PalLoad1	; load palette (based on d0)
0000874E 245F                       		movea.l	(sp)+,a2
00008750 584A                       		addq.w	#4,a2		; read number for 2nd PLC
00008752 7000                       		moveq	#0,d0
00008754 1012                       		move.b	(a2),d0
00008756 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008758 6100 8D0C                  		bsr.w	AddPLC		; load pattern load cues
0000875C                            
0000875C                            	@skipPLC:
0000875C 4E75                       		rts	
0000875E                            ; End of function LevelDataLoad
0000875E                            
0000875E                            ; ---------------------------------------------------------------------------
0000875E                            ; Level	layout loading subroutine
0000875E                            ; ---------------------------------------------------------------------------
0000875E                            
0000875E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000875E                            
0000875E                            
0000875E                            LevelLayoutLoad:
0000875E 47F8 A400                  		lea	(v_lvllayout).w,a3
00008762 323C 01FF                  		move.w	#$1FF,d1
00008766 7000                       		moveq	#0,d0
00008768                            
00008768                            LevLoad_ClrRam:
00008768 26C0                       		move.l	d0,(a3)+
0000876A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
0000876E                            
0000876E 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
00008772 7200                       		moveq	#0,d1
00008774 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008778 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
0000877C 7202                       		moveq	#2,d1
0000877E                            ; End of function LevelLayoutLoad
0000877E                            
0000877E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000877E                            
0000877E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000877E                            
0000877E                            
0000877E                            LevelLayoutLoad2:
0000877E 3038 FE10                  		move.w	(v_zone).w,d0
00008782 ED08                       		lsl.b	#6,d0
00008784 EA48                       		lsr.w	#5,d0
00008786 3400                       		move.w	d0,d2
00008788 D040                       		add.w	d0,d0
0000878A D042                       		add.w	d2,d0
0000878C D041                       		add.w	d1,d0
0000878E 43F9 0000 0000             		lea	(Level_Index).l,a1
00008794 3031 0000                  		move.w	(a1,d0.w),d0
00008798 43F1 0000                  		lea	(a1,d0.w),a1
0000879C 7200                       		moveq	#0,d1
0000879E 3401                       		move.w	d1,d2
000087A0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000087A2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000087A4                            
000087A4                            LevLoad_NumRows:
000087A4 3001                       		move.w	d1,d0
000087A6 204B                       		movea.l	a3,a0
000087A8                            
000087A8                            LevLoad_Row:
000087A8 10D9                       		move.b	(a1)+,(a0)+
000087AA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000087AE 47EB 0080                  		lea	$80(a3),a3	; do next row
000087B2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000087B6 4E75                       		rts	
000087B8                            ; End of function LevelLayoutLoad2
000087B8                            
000087B8                            		include	"_inc\DynamicLevelEvents.asm"
000087B8                            ; ---------------------------------------------------------------------------
000087B8                            ; Dynamic level events
000087B8                            ; ---------------------------------------------------------------------------
000087B8                            
000087B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087B8                            
000087B8                            
000087B8                            DynamicLevelEvents:
000087B8 7000                       		moveq	#0,d0
000087BA 1038 FE10                  		move.b	(v_zone).w,d0
000087BE D040                       		add.w	d0,d0
000087C0 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
000087C4 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000087C8 7202                       		moveq	#2,d1
000087CA 3038 F726                  		move.w	(v_limitbtm1).w,d0
000087CE 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000087D2 6700                       		beq.s	DLE_NoChg	; if not, branch
000087D4 6400                       		bcc.s	loc_6DAC
000087D6                            
000087D6 4441                       		neg.w	d1
000087D8 3038 F704                  		move.w	(v_screenposy).w,d0
000087DC B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000087E0 6300                       		bls.s	loc_6DA0
000087E2 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000087E6 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000087EC                            
000087EC                            loc_6DA0:
000087EC D378 F72E                  		add.w	d1,(v_limitbtm2).w
000087F0 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000087F6                            
000087F6                            DLE_NoChg:
000087F6 4E75                       		rts	
000087F8                            ; ===========================================================================
000087F8                            
000087F8                            loc_6DAC:
000087F8 3038 F704                  		move.w	(v_screenposy).w,d0
000087FC 5040                       		addq.w	#8,d0
000087FE B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008802 6500                       		bcs.s	loc_6DC4
00008804 0838 0001 D022             		btst	#1,(v_player+obStatus).w
0000880A 6700                       		beq.s	loc_6DC4
0000880C D241                       		add.w	d1,d1
0000880E D241                       		add.w	d1,d1
00008810                            
00008810                            loc_6DC4:
00008810 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008814 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000881A 4E75                       		rts	
0000881C                            ; End of function DynamicLevelEvents
0000881C                            
0000881C                            ; ===========================================================================
0000881C                            ; ---------------------------------------------------------------------------
0000881C                            ; Offset index for dynamic level events
0000881C                            ; ---------------------------------------------------------------------------
0000881C 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008820 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008824 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008828 0000                       		dc.w DLE_Ending-DLE_Index
0000882A                            ; ===========================================================================
0000882A                            ; ---------------------------------------------------------------------------
0000882A                            ; Green	Hill Zone dynamic level events
0000882A                            ; ---------------------------------------------------------------------------
0000882A                            
0000882A                            DLE_GHZ:
0000882A 7000                       		moveq	#0,d0
0000882C 1038 FE11                  		move.b	(v_act).w,d0
00008830 D040                       		add.w	d0,d0
00008832 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008836 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
0000883A                            ; ===========================================================================
0000883A 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
0000883C 0000                       		dc.w DLE_GHZ2-DLE_GHZx
0000883E 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008840                            ; ===========================================================================
00008840                            
00008840                            DLE_GHZ1:
00008840 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008846 6600                       		bne.s	gohere
00008848 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
0000884E 4E75                       		rts
00008850                            gohere:
00008850 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008856 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
0000885C 6500                       		bcs.s	locret_6E08	; if not, branch
0000885E 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008864                            
00008864                            locret_6E08:
00008864 4E75                       		rts	
00008866                            ; ===========================================================================
00008866                            
00008866                            DLE_GHZ2:
00008866 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000886C 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008872 6500                       		bcs.s	locret_6E3A
00008874 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
0000887A 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008880 6500                       		bcs.s	locret_6E3A
00008882 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008888 6500                       		bcs.s	loc_6E9A
0000888A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008890 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008896 6400                       		bcc.s	loc_6E8F
00008898 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000889E 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000088A4                            
000088A4                            loc_6E8F:
000088A4 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
000088AA 6400                       		bcc.s	loc_6E9A
000088AC                            
000088AC                            locret_6E3A:
000088AC 4E75                       		rts	
000088AE                            ; ===========================================================================
000088AE                            
000088AE                            loc_6E9A:
000088AE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088B4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088B8 4E75                       		rts		
000088BA                            ; ===========================================================================
000088BA                            
000088BA                            DLE_GHZ3:
000088BA 7000                       		moveq	#0,d0
000088BC 1038 F742                  		move.b	(v_dle_routine).w,d0
000088C0 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000088C4 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000088C8                            ; ===========================================================================
000088C8 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
000088CA 0000                       		dc.w DLE_GHZ3boss-off_6E4A
000088CC 0000                       		dc.w DLE_GHZ3end-off_6E4A
000088CE                            ; ===========================================================================
000088CE                            
000088CE                            DLE_GHZ3main:
000088CE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088D4 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
000088DA 6500                       		bcs.s	locret_6E96
000088DC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088E2 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000088E8 6500                       		bcs.s	locret_6E96
000088EA 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000088F0 6500                       		bcs.s	loc_6E98
000088F2 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088F8 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
000088FE 6400                       		bcc.s	loc_6E8E
00008900 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008906 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
0000890C                            
0000890C                            loc_6E8E:
0000890C 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008912 6400                       		bcc.s	loc_6E98
00008914                            
00008914                            locret_6E96:
00008914 4E75                       		rts	
00008916                            ; ===========================================================================
00008916                            
00008916                            loc_6E98:
00008916 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000891C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008920 4E75                       		rts	
00008922                            ; ===========================================================================
00008922                            
00008922                            DLE_GHZ3boss:
00008922 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008928 6400                       		bcc.s	loc_6EB0
0000892A 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000892E                            
0000892E                            loc_6EB0:
0000892E 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008934 6500                       		bcs.s	locret_6EE8
00008936 6100 0000                  		bsr.w	FindFreeObj
0000893A 6600                       		bne.s	loc_6ED0
0000893C 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008940 337C 1460 0008             		move.w	#$1460,obX(a1)
00008946 337C 0280 000C             		move.w	#$280,obY(a1)
0000894C                            
0000894C                            loc_6ED0:
00008954 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000895A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000895E 7000                       		moveq	#plcid_Egg,d0
00008960 6000 8B04                  		bra.w	AddPLC		; load boss patterns
00008964                            		
00008964                            ; ===========================================================================
00008964                            
00008964                            locret_6EE8:
00008964 4E75                       		rts	
00008966                            ; ===========================================================================
00008966                            
00008966                            DLE_GHZ3end:
00008966 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000896C 337C 0280 000C             		move.w	#$280,obY(a1)
00008972 4E75                       		rts	
00008974                            ; ===========================================================================
00008974                            ; ---------------------------------------------------------------------------
00008974                            ; Labyrinth Zone dynamic level events
00008974                            ; ---------------------------------------------------------------------------
00008974                            
00008974                            DLE_LZ:
00008974 7000                       		moveq	#0,d0
00008976 1038 FE11                  		move.b	(v_act).w,d0
0000897A D040                       		add.w	d0,d0
0000897C 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008980 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008984                            ; ===========================================================================
00008984 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008986 0000                       		dc.w DLE_LZ12-DLE_LZx
00008988 0000                       		dc.w DLE_LZ3-DLE_LZx
0000898A 0000                       		dc.w DLE_SBZ3-DLE_LZx
0000898C                            ; ===========================================================================
0000898C                            
0000898C                            DLE_LZ12:
0000898C 4E75                       		rts	
0000898E                            ; ===========================================================================
0000898E                            
0000898E                            DLE_LZ3:
0000898E 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008992 6700                       		beq.s	loc_6F28	; if not, branch
00008994 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008998 0C11 0007                  		cmpi.b	#7,(a1)
0000899C 6700                       		beq.s	loc_6F28
0000899E 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000089AA                            
000089AA                            loc_6F28:
000089AA 4A38 F742                  		tst.b	(v_dle_routine).w
000089AE 6600                       		bne.s	locret_6F64
000089B0 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
000089B6 6500                       		bcs.s	locret_6F62
000089B8 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
000089BE 6400                       		bcc.s	locret_6F62
000089C0 6100 0000                  		bsr.w	FindFreeObj
000089C4 6600                       		bne.s	loc_6F4A
000089C6 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
000089CA                            
000089CA                            loc_6F4A:
000089D2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089D8 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089DC 7000                       		moveq	#plcid_Boss,d0
000089DE 6000 8A86                  		bra.w	AddPLC		; load boss patterns
000089E2                            ; ===========================================================================
000089E2                            
000089E2                            locret_6F62:
000089E2 4E75                       		rts	
000089E4                            ; ===========================================================================
000089E4                            
000089E4                            locret_6F64:
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            
000089E6                            DLE_SBZ3:
000089E6 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
000089EC 6500                       		bcs.s	locret_6F8C
000089EE 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000089F4 6400                       		bcc.s	locret_6F8C	; if not, branch
000089F6 4238 FE30                  		clr.b	(v_lastlamp).w
000089FA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008A00 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008A06 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008A0C                            
00008A0C                            locret_6F8C:
00008A0C 4E75                       		rts	
00008A0E                            ; ===========================================================================
00008A0E                            ; ---------------------------------------------------------------------------
00008A0E                            ; Marble Zone dynamic level events
00008A0E                            ; ---------------------------------------------------------------------------
00008A0E                            
00008A0E                            DLE_MZ:
00008A0E 7000                       		moveq	#0,d0
00008A10 1038 FE11                  		move.b	(v_act).w,d0
00008A14 D040                       		add.w	d0,d0
00008A16 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008A1A 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008A1E                            ; ===========================================================================
00008A1E 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008A20 0000                       		dc.w DLE_MZ2-DLE_MZx
00008A22 0000                       		dc.w DLE_MZ3-DLE_MZx
00008A24                            ; ===========================================================================
00008A24                            
00008A24                            DLE_MZ1:
00008A24 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008A2A 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008A30 6500                       		bcs.s	locret_6FE8
00008A32 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008A38                            
00008A38                            locret_6FE8:
00008A38 4E75                       		rts	
00008A3A                            
00008A3A                            ; ===========================================================================
00008A3A                            
00008A3A                            DLE_MZ2:
00008A3A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008A40 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008A46 6500                       		bcs.s	locret_6FE9
00008A48 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008A4E                            		
00008A4E                            locret_6FE9:
00008A4E 4E75                       		rts	
00008A50                            ; ===========================================================================
00008A50                            
00008A50                            DLE_MZ3:
00008A50 7000                       		moveq	#0,d0
00008A52 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A56 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008A5A 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008A5E                            ; ===========================================================================
00008A5E 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008A60 0000                       		dc.w DLE_MZ3end-off_7098
00008A62                            ; ===========================================================================
00008A62                            
00008A62                            DLE_MZ3boss:
00008A62 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008A68 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008A6E 6500                       		bcs.s	locret_70E8
00008A70 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008A76 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008A7C 6500                       		bcs.s	locret_70E8
00008A7E 6100 0000                  		bsr.w	FindFreeObj
00008A82 6600                       		bne.s	loc_70D0
00008A84 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008A88 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008A8E 337C 022C 000C             		move.w	#$22C,obY(a1)
00008A94                            
00008A94                            loc_70D0:
00008A9C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AA2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AA6 7000                       		moveq	#plcid_Boss,d0
00008AA8 6000 89BC                  		bra.w	AddPLC		; load boss patterns
00008AAC                            ; ===========================================================================
00008AAC                            
00008AAC                            locret_70E8:
00008AAC 4E75                       		rts	
00008AAE                            ; ===========================================================================
00008AAE                            
00008AAE                            DLE_MZ3end:
00008AAE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008AB4 4E75                       		rts	
00008AB6                            		
00008AB6                            ; ===========================================================================
00008AB6                            ; ---------------------------------------------------------------------------
00008AB6                            ; Star Light Zone dynamic level events
00008AB6                            ; ---------------------------------------------------------------------------
00008AB6                            
00008AB6                            DLE_SLZ:
00008AB6 7000                       		moveq	#0,d0
00008AB8 1038 FE11                  		move.b	(v_act).w,d0
00008ABC D040                       		add.w	d0,d0
00008ABE 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008AC2 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008AC6                            ; ===========================================================================
00008AC6 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008AC8 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008ACA 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008ACC                            ; ===========================================================================
00008ACC                            
00008ACC                            DLE_SLZ12:
00008ACC 4E75                       		rts	
00008ACE                            ; ===========================================================================
00008ACE                            
00008ACE                            DLE_SLZ3:
00008ACE 7000                       		moveq	#0,d0
00008AD0 1038 F742                  		move.b	(v_dle_routine).w,d0
00008AD4 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008AD8 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008ADC                            ; ===========================================================================
00008ADC 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008ADE 0000                       		dc.w DLE_SLZ3boss-off_7118
00008AE0 0000                       		dc.w DLE_SLZ3end-off_7118
00008AE2                            ; ===========================================================================
00008AE2                            
00008AE2                            DLE_SLZ3main:
00008AE2 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008AE8 6500                       		bcs.s	locret_7130
00008AEA 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008AF0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AF4                            
00008AF4                            locret_7130:
00008AF4 4E75                       		rts	
00008AF6                            ; ===========================================================================
00008AF6                            
00008AF6                            DLE_SLZ3boss:
00008AF6 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008AFC 6500                       		bcs.s	locret_715C
00008AFE 6100 0000                  		bsr.w	FindFreeObj
00008B02 6600                       		bne.s	loc_7144
00008B04 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008B08                            
00008B08                            loc_7144:
00008B10 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B16 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B1A 7000                       		moveq	#plcid_Boss,d0
00008B1C 6000 8948                  		bra.w	AddPLC		; load boss patterns
00008B20                            ; ===========================================================================
00008B20                            
00008B20                            locret_715C:
00008B20 4E75                       		rts	
00008B22                            ; ===========================================================================
00008B22                            
00008B22                            DLE_SLZ3end:
00008B22 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008B28 4E75                       		rts
00008B2A 4E75                       		rts
00008B2C                            ; ===========================================================================
00008B2C                            ; ---------------------------------------------------------------------------
00008B2C                            ; Spring Yard Zone dynamic level events
00008B2C                            ; ---------------------------------------------------------------------------
00008B2C                            
00008B2C                            DLE_SYZ:
00008B2C 7000                       		moveq	#0,d0
00008B2E 1038 FE11                  		move.b	(v_act).w,d0
00008B32 D040                       		add.w	d0,d0
00008B34 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008B38 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008B3C                            ; ===========================================================================
00008B3C 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008B3E 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008B40 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008B42                            ; ===========================================================================
00008B42                            
00008B42                            DLE_SYZ1:
00008B42 4E75                       		rts	
00008B44                            ; ===========================================================================
00008B44                            
00008B44                            DLE_SYZ2:
00008B44 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008B4A 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008B50 6500                       		bcs.s	locret_71A2
00008B52 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008B58 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008B5E 6500                       		bcs.s	locret_71A2
00008B60 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008B66                            
00008B66                            locret_71A2:
00008B66 4E75                       		rts	
00008B68                            ; ===========================================================================
00008B68                            
00008B68                            DLE_SYZ3:
00008B68 7000                       		moveq	#0,d0
00008B6A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B6E 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008B72 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008B76                            ; ===========================================================================
00008B76 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008B78 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008B7A 0000                       		dc.w DLE_SYZ3end-off_71B2
00008B7C                            ; ===========================================================================
00008B7C                            
00008B7C                            DLE_SYZ3main:
00008B7C 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008B82 6500                       		bcs.s	locret_71CE
00008B84 6100 0000                  		bsr.w	FindFreeObj
00008B88 6600                       		bne.s	locret_71CE
00008B8A 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008B8E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B92                            
00008B92                            locret_71CE:
00008B92 4E75                       		rts	
00008B94                            ; ===========================================================================
00008B94                            
00008B94                            DLE_SYZ3boss:
00008B94 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008B9A 6500                       		bcs.s	locret_7200
00008B9C 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008BA2 6100 0000                  		bsr.w	FindFreeObj
00008BA6 6600                       		bne.s	loc_71EC
00008BA8 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008BAC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BB0                            
00008BB0                            loc_71EC:
00008BB8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BBE 7000                       		moveq	#plcid_Boss,d0
00008BC0 6000 88A4                  		bra.w	AddPLC		; load boss patterns
00008BC4                            ; ===========================================================================
00008BC4                            
00008BC4                            locret_7200:
00008BC4 4E75                       		rts	
00008BC6                            ; ===========================================================================
00008BC6                            
00008BC6                            DLE_SYZ3end:
00008BC6 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BCC 4E75                       		rts	
00008BCE                            ; ===========================================================================
00008BCE                            ; ---------------------------------------------------------------------------
00008BCE                            ; Scrap	Brain Zone dynamic level events
00008BCE                            ; ---------------------------------------------------------------------------
00008BCE                            
00008BCE                            DLE_SBZ:
00008BCE 7000                       		moveq	#0,d0
00008BD0 1038 FE11                  		move.b	(v_act).w,d0
00008BD4 D040                       		add.w	d0,d0
00008BD6 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008BDA 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008BDE                            ; ===========================================================================
00008BDE 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008BE0 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008BE2 0000                       		dc.w DLE_FZ-DLE_SBZx
00008BE4                            ; ===========================================================================
00008BE4                            
00008BE4                            DLE_SBZ1:
00008BE4 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008BEA 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008BF0 6500                       		bcs.s	locret_7242
00008BF2 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008BF8 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008BFE 6500                       		bcs.s	locret_7242
00008C00 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008C06                            
00008C06                            locret_7242:
00008C06 4E75                       		rts	
00008C08                            ; ===========================================================================
00008C08                            
00008C08                            DLE_SBZ2:
00008C08 7000                       		moveq	#0,d0
00008C0A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008C0E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008C12 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008C16                            ; ===========================================================================
00008C16 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008C18 0000                       		dc.w DLE_SBZ2boss-off_7252
00008C1A 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008C1C 0000                       		dc.w DLE_SBZ2end-off_7252
00008C1E                            ; ===========================================================================
00008C1E                            
00008C1E                            DLE_SBZ2main:
00008C1E 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008C24 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008C2A 6500                       		bcs.s	locret_727A
00008C2C 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008C32 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008C38 6500                       		bcs.s	locret_727A
00008C3A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C3E                            
00008C3E                            locret_727A:
00008C3E 4E75                       		rts	
00008C40                            ; ===========================================================================
00008C40                            
00008C40                            DLE_SBZ2boss:
00008C40 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008C46 6500                       		bcs.s	locret_7298
00008C48 6100 0000                  		bsr.w	FindFreeObj
00008C4C 6600                       		bne.s	locret_7298
00008C4E 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008C52 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C56 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008C58 6000 880C                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008C5C                            ; ===========================================================================
00008C5C                            
00008C5C                            locret_7298:
00008C5C 4E75                       		rts	
00008C5E                            ; ===========================================================================
00008C5E                            
00008C5E                            DLE_SBZ2boss2:
00008C5E 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008C64 6500                       		bcs.s	loc_72B6
00008C66 6100 0000                  		bsr.w	FindFreeObj
00008C6A 6600                       		bne.s	loc_72B0
00008C6C 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008C70 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C74                            
00008C74                            loc_72B0:
00008C74 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C7A                            
00008C7A                            loc_72B6:
00008C7A 6000                       		bra.s	loc_72C2
00008C7C                            ; ===========================================================================
00008C7C                            
00008C7C                            DLE_SBZ2end:
00008C7C 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008C82 6500                       		bcs.s	loc_72C2
00008C84 4E75                       		rts	
00008C86                            ; ===========================================================================
00008C86                            
00008C86                            loc_72C2:
00008C86 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008C8C 4E75                       		rts	
00008C8E                            ; ===========================================================================
00008C8E                            
00008C8E                            DLE_FZ:
00008C8E 7000                       		moveq	#0,d0
00008C90 1038 F742                  		move.b	(v_dle_routine).w,d0
00008C94 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008C98 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008C9C                            ; ===========================================================================
00008C9C 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008CA0 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008CA4 0000                       		dc.w DLE_FZend2-off_72D8
00008CA6                            ; ===========================================================================
00008CA6                            
00008CA6                            DLE_FZmain:
00008CA6 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008CAC 6500                       		bcs.s	loc_72F4
00008CAE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CB2 7000                       		moveq	#plcid_FZBoss,d0
00008CB4 6100 87B0                  		bsr.w	AddPLC		; load FZ boss patterns
00008CB8                            
00008CB8                            loc_72F4:
00008CB8 60CC                       		bra.s	loc_72C2
00008CBA                            ; ===========================================================================
00008CBA                            
00008CBA                            DLE_FZboss:
00008CBA 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008CC0 6500                       		bcs.s	loc_7312
00008CC2 6100 0000                  		bsr.w	FindFreeObj
00008CC6 6600                       		bne.s	loc_7312
00008CC8 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008CCC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CD0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CD6                            
00008CD6                            loc_7312:
00008CD6 60AE                       		bra.s	loc_72C2
00008CD8                            ; ===========================================================================
00008CD8                            
00008CD8                            DLE_FZend:
00008CD8 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008CDE 6500                       		bcs.s	loc_7320
00008CE0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CE4                            
00008CE4                            loc_7320:
00008CE4 60A0                       		bra.s	loc_72C2
00008CE6                            ; ===========================================================================
00008CE6                            
00008CE6                            locret_7322:
00008CE6 4E75                       		rts	
00008CE8                            ; ===========================================================================
00008CE8                            
00008CE8                            DLE_FZend2:
00008CE8 609C                       		bra.s	loc_72C2
00008CEA                            ; ===========================================================================
00008CEA                            ; ---------------------------------------------------------------------------
00008CEA                            ; Ending sequence dynamic level events (empty)
00008CEA                            ; ---------------------------------------------------------------------------
00008CEA                            
00008CEA                            DLE_Ending:
00008CEA 4E75                       		rts	
00008CEA 4E75                       		rts	
00008CEC                            
00008CEC                            		include	"_incObj\11 Bridge (part 1).asm"
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC                            ; Object 11 - GHZ bridge
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC                            
00008CEC                            Bridge:
00008CEC 7000                       		moveq	#0,d0
00008CEE 1028 0024                  		move.b	obRoutine(a0),d0
00008CF2 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008CF6 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008CFA                            ; ===========================================================================
00008CFA 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008CFE 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008D02 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008D06                            ; ===========================================================================
00008D06                            
00008D06                            Bri_Main:	; Routine 0
00008D06 5428 0024                  		addq.b	#2,obRoutine(a0)
00008D0A 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008D12 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008D18 117C 0004 0001             		move.b	#4,obRender(a0)
00008D1E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008D24 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008D2A 3428 000C                  		move.w	obY(a0),d2
00008D2E 3628 0008                  		move.w	obX(a0),d3
00008D32 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008D34 45E8 0028                  		lea	obSubtype(a0),a2
00008D38 7200                       		moveq	#0,d1
00008D3A 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008D3C 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008D40 3001                       		move.w	d1,d0
00008D42 E248                       		lsr.w	#1,d0
00008D44 E948                       		lsl.w	#4,d0
00008D46 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008D48 5501                       		subq.b	#2,d1
00008D4A 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008D4C                            
00008D4C                            @buildloop:
00008D4C 6100 0000                  		bsr.w	FindFreeObj
00008D50 6600                       		bne.s	Bri_Action
00008D52 5228 0028                  		addq.b	#1,obSubtype(a0)
00008D56 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008D5A 6600                       		bne.s	@notleftmost	; if not, branch
00008D5C                            
00008D5C 0643 0010                  		addi.w	#$10,d3
00008D60 3142 000C                  		move.w	d2,obY(a0)
00008D64 3142 003C                  		move.w	d2,$3C(a0)
00008D68 3A08                       		move.w	a0,d5
00008D6A 0445 D000                  		subi.w	#$D000,d5
00008D6E EC4D                       		lsr.w	#6,d5
00008D70 0245 007F                  		andi.w	#$7F,d5
00008D74 14C5                       		move.b	d5,(a2)+
00008D76 5228 0028                  		addq.b	#1,obSubtype(a0)
00008D7A                            
00008D7A                            	@notleftmost:
00008D7A 3A09                       		move.w	a1,d5
00008D7C 0445 D000                  		subi.w	#$D000,d5
00008D80 EC4D                       		lsr.w	#6,d5
00008D82 0245 007F                  		andi.w	#$7F,d5
00008D86 14C5                       		move.b	d5,(a2)+
00008D88 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008D8E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008D90 3342 000C                  		move.w	d2,obY(a1)
00008D94 3342 003C                  		move.w	d2,$3C(a1)
00008D98 3343 0008                  		move.w	d3,obX(a1)
00008D9C 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008DA4 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008DAA 137C 0004 0001             		move.b	#4,obRender(a1)
00008DB0 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008DB6 137C 0008 0014             		move.b	#8,obActWid(a1)
00008DBC 0643 0010                  		addi.w	#$10,d3
00008DC0 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008DC4                            
00008DC4                            Bri_Action:	; Routine 2
00008DC4 6100                       		bsr.s	Bri_Solid
00008DC6 4A28 003E                  		tst.b	$3E(a0)
00008DCA 6700                       		beq.s	@display
00008DCC 5928 003E                  		subq.b	#4,$3E(a0)
00008DD0 6100 0000                  		bsr.w	Bri_Bend
00008DD4                            
00008DD4                            	@display:
00008DD4 6100 0000                  		bsr.w	DisplaySprite
00008DD8 6000 0000                  		bra.w	Bri_ChkDel
00008DDC                            
00008DDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DDC                            
00008DDC                            
00008DDC                            Bri_Solid:
00008DDC 7200                       		moveq	#0,d1
00008DDE 1228 0028                  		move.b	obSubtype(a0),d1
00008DE2 E749                       		lsl.w	#3,d1
00008DE4 3401                       		move.w	d1,d2
00008DE6 5041                       		addq.w	#8,d1
00008DE8 D442                       		add.w	d2,d2
00008DEA 43F8 D000                  		lea	(v_player).w,a1
00008DEE 4A69 0012                  		tst.w	obVelY(a1)
00008DF2 6B00 0000                  		bmi.w	Plat_Exit
00008DF6 3029 0008                  		move.w	obX(a1),d0
00008DFA 9068 0008                  		sub.w	obX(a0),d0
00008DFE D041                       		add.w	d1,d0
00008E00 6B00 0000                  		bmi.w	Plat_Exit
00008E04 B042                       		cmp.w	d2,d0
00008E06 6400 0000                  		bcc.w	Plat_Exit
00008E0A 6000                       		bra.s	Plat_NoXCheck
00008E0C                            ; End of function Bri_Solid
00008E0C                            ; End of function Bri_Solid
00008E0C                            
00008E0C                            ; ---------------------------------------------------------------------------
00008E0C                            ; Platform subroutine
00008E0C                            ; ---------------------------------------------------------------------------
00008E0C                            
00008E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E0C                            
00008E0C                            PlatformObject:
00008E0C 43F8 D000                  		lea	(v_player).w,a1
00008E10 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008E14 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008E18                            
00008E18                            ;		perform x-axis range check
00008E18 3029 0008                  		move.w	obX(a1),d0
00008E1C 9068 0008                  		sub.w	obX(a0),d0
00008E20 D041                       		add.w	d1,d0
00008E22 6B00 0000                  		bmi.w	Plat_Exit
00008E26 D241                       		add.w	d1,d1
00008E28 B041                       		cmp.w	d1,d0
00008E2A 6400 0000                  		bhs.w	Plat_Exit
00008E2E                            
00008E2E                            	Plat_NoXCheck:
00008E2E 3028 000C                  		move.w	obY(a0),d0
00008E32 5140                       		subq.w	#8,d0
00008E34                            
00008E34                            Platform3:
00008E34                            ;		perform y-axis range check
00008E34 3429 000C                  		move.w	obY(a1),d2
00008E38 1229 0016                  		move.b	obHeight(a1),d1
00008E3C 4881                       		ext.w	d1
00008E3E D242                       		add.w	d2,d1
00008E40 5841                       		addq.w	#4,d1
00008E42 9041                       		sub.w	d1,d0
00008E44 6200 0000                  		bhi.w	Plat_Exit
00008E48 0C40 FFF0                  		cmpi.w	#-$10,d0
00008E4C 6500 0000                  		blo.w	Plat_Exit
00008E50                            
00008E50 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008E54 6B00 0000                  		bmi.w	Plat_Exit
00008E58 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008E5E 6400 0000                  		bhs.w	Plat_Exit
00008E62 D440                       		add.w	d0,d2
00008E64 5642                       		addq.w	#3,d2
00008E66 3342 000C                  		move.w	d2,obY(a1)
00008E6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00008E6E                            
00008E6E                            loc_74AE:
00008E6E 0829 0003 0022             		btst	#3,obStatus(a1)
00008E74 6700                       		beq.s	loc_74DC
00008E76 7000                       		moveq	#0,d0
00008E78 1029 003D                  		move.b	$3D(a1),d0
00008E7C ED48                       		lsl.w	#6,d0
00008E7E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E84 2440                       		movea.l	d0,a2
00008E86 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008E8C 422A 0025                  		clr.b	ob2ndRout(a2)
00008E90 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008E96 6600                       		bne.s	loc_74DC
00008E98 552A 0024                  		subq.b	#2,obRoutine(a2)
00008E9C                            
00008E9C                            loc_74DC:
00008E9C 3008                       		move.w	a0,d0
00008E9E 0440 D000                  		subi.w	#-$3000,d0
00008EA2 EC48                       		lsr.w	#6,d0
00008EA4 0240 007F                  		andi.w	#$7F,d0
00008EA8 1340 003D                  		move.b	d0,$3D(a1)
00008EAC 137C 0000 0026             		move.b	#0,obAngle(a1)
00008EB2 337C 0000 0012             		move.w	#0,obVelY(a1)
00008EB8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008EBE 0829 0001 0022             		btst	#1,obStatus(a1)
00008EC4 6700                       		beq.s	loc_7512
00008EC6 2F08                       		move.l	a0,-(sp)
00008EC8 2049                       		movea.l	a1,a0
00008ECA 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008ED0 205F                       		movea.l	(sp)+,a0
00008ED2                            
00008ED2                            loc_7512:
00008ED2 08E9 0003 0022             		bset	#3,obStatus(a1)
00008ED8 08E8 0003 0022             		bset	#3,obStatus(a0)
00008EDE                            
00008EDE                            Plat_Exit:
00008EDE 4E75                       		rts	
00008EE0                            ; End of function PlatformObject
00008EE0                            
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            
00008EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EE0                            
00008EE0                            
00008EE0                            SlopeObject:
00008EE0 43F8 D000                  		lea	(v_player).w,a1
00008EE4 4A69 0012                  		tst.w	obVelY(a1)
00008EE8 6B00 FFF4                  		bmi.w	Plat_Exit
00008EEC 3029 0008                  		move.w	obX(a1),d0
00008EF0 9068 0008                  		sub.w	obX(a0),d0
00008EF4 D041                       		add.w	d1,d0
00008EF6 6BE6                       		bmi.s	Plat_Exit
00008EF8 D241                       		add.w	d1,d1
00008EFA B041                       		cmp.w	d1,d0
00008EFC 64E0                       		bhs.s	Plat_Exit
00008EFE 0828 0000 0001             		btst	#0,obRender(a0)
00008F04 6700                       		beq.s	loc_754A
00008F06 4640                       		not.w	d0
00008F08 D041                       		add.w	d1,d0
00008F0A                            
00008F0A                            loc_754A:
00008F0A E248                       		lsr.w	#1,d0
00008F0C 7600                       		moveq	#0,d3
00008F0E 1632 0000                  		move.b	(a2,d0.w),d3
00008F12 3028 000C                  		move.w	obY(a0),d0
00008F16 9043                       		sub.w	d3,d0
00008F18 6000 FF1A                  		bra.w	Platform3
00008F1C                            ; End of function SlopeObject
00008F1C                            
00008F1C                            
00008F1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F1C                            
00008F1C                            
00008F1C                            Swing_Solid:
00008F1C 43F8 D000                  		lea	(v_player).w,a1
00008F20 4A69 0012                  		tst.w	obVelY(a1)
00008F24 6B00 FFB8                  		bmi.w	Plat_Exit
00008F28 3029 0008                  		move.w	obX(a1),d0
00008F2C 9068 0008                  		sub.w	obX(a0),d0
00008F30 D041                       		add.w	d1,d0
00008F32 6B00 FFAA                  		bmi.w	Plat_Exit
00008F36 D241                       		add.w	d1,d1
00008F38 B041                       		cmp.w	d1,d0
00008F3A 6400 FFA2                  		bhs.w	Plat_Exit
00008F3E 3028 000C                  		move.w	obY(a0),d0
00008F42 9043                       		sub.w	d3,d0
00008F44 6000 FEEE                  		bra.w	Platform3
00008F48                            ; End of function Obj15_Solid
00008F48                            
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            		include	"_incObj\11 Bridge (part 2).asm"
00008F48                            
00008F48                            Bri_Platform:	; Routine 4
00008F48 6100                       		bsr.s	Bri_WalkOff
00008F4A 6100 0000                  		bsr.w	DisplaySprite
00008F4E 6000 0000                  		bra.w	Bri_ChkDel
00008F52                            
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            ; Subroutine allowing Sonic to walk off a bridge
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            
00008F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F52                            
00008F52                            
00008F52                            Bri_WalkOff:
00008F52 7200                       		moveq	#0,d1
00008F54 1228 0028                  		move.b	obSubtype(a0),d1
00008F58 E749                       		lsl.w	#3,d1
00008F5A 3401                       		move.w	d1,d2
00008F5C 5041                       		addq.w	#8,d1
00008F5E 6100                       		bsr.s	ExitPlatform2
00008F60 6400                       		bcc.s	locret_75BE
00008F62 E848                       		lsr.w	#4,d0
00008F64 1140 003F                  		move.b	d0,$3F(a0)
00008F68 1028 003E                  		move.b	$3E(a0),d0
00008F6C 0C00 0040                  		cmpi.b	#$40,d0
00008F70 6700                       		beq.s	loc_75B6
00008F72 5828 003E                  		addq.b	#4,$3E(a0)
00008F76                            
00008F76                            loc_75B6:
00008F76 6100 0000                  		bsr.w	Bri_Bend
00008F7A 6100 0000                  		bsr.w	Bri_MoveSonic
00008F7E                            
00008F7E                            locret_75BE:
00008F7E 4E75                       		rts	
00008F80                            ; End of function Bri_WalkOff
00008F80                            ; End of function Bri_WalkOff
00008F80                            
00008F80                            ; ---------------------------------------------------------------------------
00008F80                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008F80                            ; ---------------------------------------------------------------------------
00008F80                            
00008F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F80                            
00008F80                            
00008F80                            ExitPlatform:
00008F80 3401                       		move.w	d1,d2
00008F82                            
00008F82                            ExitPlatform2:
00008F82 D442                       		add.w	d2,d2
00008F84 43F8 D000                  		lea	(v_player).w,a1
00008F88 0829 0001 0022             		btst	#1,obStatus(a1)
00008F8E 6600                       		bne.s	loc_75E0
00008F90 3029 0008                  		move.w	obX(a1),d0
00008F94 9068 0008                  		sub.w	obX(a0),d0
00008F98 D041                       		add.w	d1,d0
00008F9A 6B00                       		bmi.s	loc_75E0
00008F9C B042                       		cmp.w	d2,d0
00008F9E 6500                       		blo.s	locret_75F2
00008FA0                            
00008FA0                            loc_75E0:
00008FA0 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008FA6 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008FAC 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008FB2                            
00008FB2                            locret_75F2:
00008FB2 4E75                       		rts	
00008FB4                            ; End of function ExitPlatform
00008FB4                            
00008FB4                            		include	"_incObj\11 Bridge (part 3).asm"
00008FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB4                            
00008FB4                            
00008FB4                            Bri_MoveSonic:
00008FB4 7000                       		moveq	#0,d0
00008FB6 1028 003F                  		move.b	$3F(a0),d0
00008FBA 1030 0029                  		move.b	$29(a0,d0.w),d0
00008FBE ED48                       		lsl.w	#6,d0
00008FC0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008FC6 2440                       		movea.l	d0,a2
00008FC8 43F8 D000                  		lea	(v_player).w,a1
00008FCC 302A 000C                  		move.w	obY(a2),d0
00008FD0 5140                       		subq.w	#8,d0
00008FD2 7200                       		moveq	#0,d1
00008FD4 1229 0016                  		move.b	obHeight(a1),d1
00008FD8 9041                       		sub.w	d1,d0
00008FDA 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008FDE 4E75                       		rts	
00008FE0                            ; End of function Bri_MoveSonic
00008FE0                            
00008FE0                            
00008FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FE0                            
00008FE0                            
00008FE0                            Bri_Bend:
00008FE0 1028 003E                  		move.b	$3E(a0),d0
00008FE4 6100 A7C8                  		bsr.w	CalcSine
00008FE8 3800                       		move.w	d0,d4
00008FEA 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008FF0 7000                       		moveq	#0,d0
00008FF2 1028 0028                  		move.b	obSubtype(a0),d0
00008FF6 E948                       		lsl.w	#4,d0
00008FF8 7600                       		moveq	#0,d3
00008FFA 1628 003F                  		move.b	$3F(a0),d3
00008FFE 3403                       		move.w	d3,d2
00009000 D640                       		add.w	d0,d3
00009002 7A00                       		moveq	#0,d5
00009004 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000900A 1A35 3000                  		move.b	(a5,d3.w),d5
0000900E 0243 000F                  		andi.w	#$F,d3
00009012 E94B                       		lsl.w	#4,d3
00009014 47F4 3000                  		lea	(a4,d3.w),a3
00009018 45E8 0029                  		lea	$29(a0),a2
0000901C                            
0000901C                            loc_765C:
0000901C 7000                       		moveq	#0,d0
0000901E 101A                       		move.b	(a2)+,d0
00009020 ED48                       		lsl.w	#6,d0
00009022 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009028 2240                       		movea.l	d0,a1
0000902A 7000                       		moveq	#0,d0
0000902C 101B                       		move.b	(a3)+,d0
0000902E 5240                       		addq.w	#1,d0
00009030 C0C5                       		mulu.w	d5,d0
00009032 C0C4                       		mulu.w	d4,d0
00009034 4840                       		swap	d0
00009036 D069 003C                  		add.w	$3C(a1),d0
0000903A 3340 000C                  		move.w	d0,obY(a1)
0000903E 51CA FFDC                  		dbf	d2,loc_765C
00009042 7000                       		moveq	#0,d0
00009044 1028 0028                  		move.b	obSubtype(a0),d0
00009048 7600                       		moveq	#0,d3
0000904A 1628 003F                  		move.b	$3F(a0),d3
0000904E 5203                       		addq.b	#1,d3
00009050 9600                       		sub.b	d0,d3
00009052 4403                       		neg.b	d3
00009054 6B00                       		bmi.s	locret_76CA
00009056 3403                       		move.w	d3,d2
00009058 E94B                       		lsl.w	#4,d3
0000905A 47F4 3000                  		lea	(a4,d3.w),a3
0000905E D6C2                       		adda.w	d2,a3
00009060 5342                       		subq.w	#1,d2
00009062 6500                       		bcs.s	locret_76CA
00009064                            
00009064                            loc_76A4:
00009064 7000                       		moveq	#0,d0
00009066 101A                       		move.b	(a2)+,d0
00009068 ED48                       		lsl.w	#6,d0
0000906A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009070 2240                       		movea.l	d0,a1
00009072 7000                       		moveq	#0,d0
00009074 1023                       		move.b	-(a3),d0
00009076 5240                       		addq.w	#1,d0
00009078 C0C5                       		mulu.w	d5,d0
0000907A C0C4                       		mulu.w	d4,d0
0000907C 4840                       		swap	d0
0000907E D069 003C                  		add.w	$3C(a1),d0
00009082 3340 000C                  		move.w	d0,obY(a1)
00009086 51CA FFDC                  		dbf	d2,loc_76A4
0000908A                            
0000908A                            locret_76CA:
0000908A 4E75                       		rts	
0000908C                            ; End of function Bri_Bend
0000908C                            
0000908C                            ; ===========================================================================
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            ; GHZ bridge-bending data
0000908C                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
0000919C                            		even
0000919C                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
0000929C                            		even
0000929C                            
0000929C                            ; ===========================================================================
0000929C                            
0000929C                            Bri_ChkDel:
000092BA 4E75                       		rts	
000092BC                            ; ===========================================================================
000092BC                            
000092BC                            @deletebridge:
000092BC 7400                       		moveq	#0,d2
000092BE 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000092C2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000092C4 5302                       		subq.b	#1,d2		; subtract 1
000092C6 6500                       		bcs.s	@delparent
000092C8                            
000092C8                            	@loop:
000092C8 7000                       		moveq	#0,d0
000092CA 101A                       		move.b	(a2)+,d0
000092CC ED48                       		lsl.w	#6,d0
000092CE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092D4 2240                       		movea.l	d0,a1
000092D6 B048                       		cmp.w	a0,d0
000092D8 6700                       		beq.s	@skipdel
000092DA 6100 0000                  		bsr.w	DeleteChild
000092DE                            
000092DE                            	@skipdel:
000092DE 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000092E2                            
000092E2                            @delparent:
000092E2 6100 0000                  		bsr.w	DeleteObject
000092E6 4E75                       		rts	
000092E8                            ; ===========================================================================
000092E8                            
000092E8                            Bri_Delete:	; Routine 6, 8
000092E8 6100 0000                  		bsr.w	DeleteObject
000092EC 4E75                       		rts	
000092EE                            ; ===========================================================================
000092EE                            
000092EE                            Bri_Display:	; Routine $A
000092EE 6100 0000                  		bsr.w	DisplaySprite
000092F2 4E75                       		rts	
000092F2 4E75                       		rts	
000092F4                            Map_Bri:	include	"_maps\Bridge.asm"
000092F4                            ; ---------------------------------------------------------------------------
000092F4                            ; Sprite mappings - GHZ	bridge
000092F4                            ; ---------------------------------------------------------------------------
000092F4                            Map_Bri_internal:
000092F4 0000                       		dc.w M_Bri_Log-Map_Bri_internal
000092F6 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
000092F8 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
000092FA 01                         M_Bri_Log:	dc.b 1
000092FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009300 02                         M_Bri_Stump:	dc.b 2
00009301 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009306 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000930B 01                         M_Bri_Rope:	dc.b 1
0000930C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00009312 00                         		even
00009312 00                         		even
00009312                            
00009312                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00009312                            ; ---------------------------------------------------------------------------
00009312                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009312                            ;	    - spiked ball on a chain (SBZ)
00009312                            ; ---------------------------------------------------------------------------
00009312                            
00009312                            SwingingPlatform:
00009312 7000                       		moveq	#0,d0
00009314 1028 0024                  		move.b	obRoutine(a0),d0
00009318 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
0000931C 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009320                            ; ===========================================================================
00009320 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00009324 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009328 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
0000932C 0000                       		dc.w Swing_Action-Swing_Index
0000932E                            
0000932E =0000003A                  swing_origX:	equ $3A		; original x-axis position
0000932E =00000038                  swing_origY:	equ $38		; original y-axis position
0000932E                            ; ===========================================================================
0000932E                            
0000932E                            Swing_Main:	; Routine 0
0000932E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009332 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
0000933A 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009340 117C 0004 0001             		move.b	#4,obRender(a0)
00009346 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000934C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009352 117C 0008 0016             		move.b	#8,obHeight(a0)
00009358 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
0000935E 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
00009364 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000936A 6600                       		bne.s	@notSLZ
0000936C                            
0000936C 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
00009374 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
0000937A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009380 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009386 117C 0099 0020             		move.b	#$99,obColType(a0)
0000938C                            
0000938C                            	@notSLZ:
0000938C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009392 6600                       		bne.s	@length
00009394                            
00009394 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
0000939C 317C 0391 0002             		move.w	#$391,obGfx(a0)
000093A2 117C 0018 0014             		move.b	#$18,obActWid(a0)
000093A8 117C 0018 0016             		move.b	#$18,obHeight(a0)
000093AE 117C 0086 0020             		move.b	#$86,obColType(a0)
000093B4 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000093BA                            
000093BA                            @length:
000093BA 1810                       		move.b	0(a0),d4
000093BC 7200                       		moveq	#0,d1
000093BE 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000093C2 1212                       		move.b	(a2),d1		; move a2 to d1
000093C4 3F01                       		move.w	d1,-(sp)
000093C6 0241 000F                  		andi.w	#$F,d1
000093CA 14FC 0000                  		move.b	#0,(a2)+
000093CE 3601                       		move.w	d1,d3
000093D0 E94B                       		lsl.w	#4,d3
000093D2 5003                       		addq.b	#8,d3
000093D4 1143 003C                  		move.b	d3,$3C(a0)
000093D8 5103                       		subq.b	#8,d3
000093DA 4A28 001A                  		tst.b	obFrame(a0)
000093DE 6700                       		beq.s	@makechain
000093E0 5003                       		addq.b	#8,d3
000093E2 5341                       		subq.w	#1,d1
000093E4                            
000093E4                            @makechain:
000093E4 6100 0000                  		bsr.w	FindFreeObj
000093E8 6600                       		bne.s	@fail
000093EA 5228 0028                  		addq.b	#1,obSubtype(a0)
000093EE 3A09                       		move.w	a1,d5
000093F0 0445 D000                  		subi.w	#$D000,d5
000093F4 EC4D                       		lsr.w	#6,d5
000093F6 0245 007F                  		andi.w	#$7F,d5
000093FA 14C5                       		move.b	d5,(a2)+
000093FC 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
00009402 1284                       		move.b	d4,0(a1)	; load swinging	object
00009404 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000940A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009410 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009416 137C 0004 0001             		move.b	#4,obRender(a1)
0000941C 337C 0200 0018             		move.w	#$200,obPriority(a1)
00009422 137C 0008 0014             		move.b	#8,obActWid(a1)
00009428 137C 0001 001A             		move.b	#1,obFrame(a1)
0000942E 1343 003C                  		move.b	d3,$3C(a1)
00009432 0403 0010                  		subi.b	#$10,d3
00009436 6400                       		bcc.s	@notanchor
00009438 137C 0002 001A             		move.b	#2,obFrame(a1)
0000943E 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009444 08E9 0006 0002             		bset	#6,obGfx(a1)
0000944A                            
0000944A                            	@notanchor:
0000944A 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000944E                            
0000944E                            	@fail:
0000944E 3A08                       		move.w	a0,d5
00009450 0445 D000                  		subi.w	#$D000,d5
00009454 EC4D                       		lsr.w	#6,d5
00009456 0245 007F                  		andi.w	#$7F,d5
0000945A 14C5                       		move.b	d5,(a2)+
0000945C 317C 4080 0026             		move.w	#$4080,obAngle(a0)
00009462 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009468 321F                       		move.w	(sp)+,d1
0000946A 0801 0004                  		btst	#4,d1		; is object type $1X ?
0000946E 6700                       		beq.s	@not1X	; if not, branch
00009470 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009478 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
0000947E 117C 0001 001A             		move.b	#1,obFrame(a0)
00009484 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000948A 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
00009490                            
00009490                            	@not1X:
00009490 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009496 6700                       		beq.s	Swing_Action	; if yes, branch
00009498                            
00009498                            Swing_SetSolid:	; Routine 2
00009498 7200                       		moveq	#0,d1
0000949A 1228 0014                  		move.b	obActWid(a0),d1
0000949E 7600                       		moveq	#0,d3
000094A0 1628 0016                  		move.b	obHeight(a0),d3
000094A4 6100 FA76                  		bsr.w	Swing_Solid
000094A8                            
000094A8                            Swing_Action:	; Routine $C
000094A8 6100 0000                  		bsr.w	Swing_Move
000094AC 6100 0000                  		bsr.w	DisplaySprite
000094B0 6000 0000                  		bra.w	Swing_ChkDel
000094B4                            ; ===========================================================================
000094B4                            
000094B4                            Swing_Action2:	; Routine 4
000094B4 7200                       		moveq	#0,d1
000094B6 1228 0014                  		move.b	obActWid(a0),d1
000094BA 6100 FAC4                  		bsr.w	ExitPlatform
000094BE 3F28 0008                  		move.w	obX(a0),-(sp)
000094C2 6100 0000                  		bsr.w	Swing_Move
000094C6 341F                       		move.w	(sp)+,d2
000094C8 7600                       		moveq	#0,d3
000094CA 1628 0016                  		move.b	obHeight(a0),d3
000094CE 5203                       		addq.b	#1,d3
000094D0 6100 0000                  		bsr.w	MvSonicOnPtfm
000094D4 6100 0000                  		bsr.w	DisplaySprite
000094D8 6000 0000                  		bra.w	Swing_ChkDel
000094DC                            
000094DC 4E75                       		rts
000094DC 4E75                       		rts
000094DE                            
000094DE                            ; ---------------------------------------------------------------------------
000094DE                            ; Subroutine to	change Sonic's position with a platform
000094DE                            ; ---------------------------------------------------------------------------
000094DE                            
000094DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094DE                            
000094DE                            
000094DE                            MvSonicOnPtfm:
000094DE 43F8 D000                  		lea	(v_player).w,a1
000094E2 3028 000C                  		move.w	obY(a0),d0
000094E6 9043                       		sub.w	d3,d0
000094E8 6000                       		bra.s	MvSonic2
000094EA                            ; End of function MvSonicOnPtfm
000094EA                            
000094EA                            ; ---------------------------------------------------------------------------
000094EA                            ; Subroutine to	change Sonic's position with a platform
000094EA                            ; ---------------------------------------------------------------------------
000094EA                            
000094EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094EA                            
000094EA                            
000094EA                            MvSonicOnPtfm2:
000094EA 43F8 D000                  		lea	(v_player).w,a1
000094EE 3028 000C                  		move.w	obY(a0),d0
000094F2 0440 0009                  		subi.w	#9,d0
000094F6                            
000094F6                            MvSonic2:
000094F6 4A38 F7C8                  		tst.b	(f_lockmulti).w
000094FA 6B00                       		bmi.s	locret_7B62
000094FC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00009502 6400                       		bhs.s	locret_7B62
00009504 4A78 FE08                  		tst.w	(v_debuguse).w
00009508 6600                       		bne.s	locret_7B62
0000950A 7200                       		moveq	#0,d1
0000950C 1229 0016                  		move.b	obHeight(a1),d1
00009510 9041                       		sub.w	d1,d0
00009512 3340 000C                  		move.w	d0,obY(a1)
00009516 9468 0008                  		sub.w	obX(a0),d2
0000951A 9569 0008                  		sub.w	d2,obX(a1)
0000951E                            
0000951E                            locret_7B62:
0000951E 4E75                       		rts	
00009520                            ; End of function MvSonicOnPtfm2
00009520                            
00009520                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009520                            
00009520                            
00009520                            Swing_Move:
00009520 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
00009524 323C 0080                  		move.w	#$80,d1
00009528 0828 0000 0022             		btst	#0,obStatus(a0)
0000952E 6700                       		beq.s	loc_7B78
00009530 4440                       		neg.w	d0
00009532 D041                       		add.w	d1,d0
00009534                            
00009534                            loc_7B78:
00009534 6000                       		bra.s	Swing_Move2
00009536                            ; End of function Swing_Move
00009536                            
00009536                            
00009536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009536                            
00009536                            
00009536                            Obj48_Move:
00009536 4A28 003D                  		tst.b	$3D(a0)
0000953A 6600                       		bne.s	loc_7B9C
0000953C 3028 003E                  		move.w	$3E(a0),d0
00009540 5040                       		addq.w	#8,d0
00009542 3140 003E                  		move.w	d0,$3E(a0)
00009546 D168 0026                  		add.w	d0,obAngle(a0)
0000954A 0C40 0200                  		cmpi.w	#$200,d0
0000954E 6600                       		bne.s	loc_7BB6
00009550 117C 0001 003D             		move.b	#1,$3D(a0)
00009556 6000                       		bra.s	loc_7BB6
00009558                            ; ===========================================================================
00009558                            
00009558                            loc_7B9C:
00009558 3028 003E                  		move.w	$3E(a0),d0
0000955C 5140                       		subq.w	#8,d0
0000955E 3140 003E                  		move.w	d0,$3E(a0)
00009562 D168 0026                  		add.w	d0,obAngle(a0)
00009566 0C40 FE00                  		cmpi.w	#-$200,d0
0000956A 6600                       		bne.s	loc_7BB6
0000956C 117C 0000 003D             		move.b	#0,$3D(a0)
00009572                            
00009572                            loc_7BB6:
00009572 1028 0026                  		move.b	obAngle(a0),d0
00009576                            ; End of function Obj48_Move
00009576                            
00009576                            
00009576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009576                            
00009576                            
00009576                            Swing_Move2:
00009576 6100 A236                  		bsr.w	CalcSine
0000957A 3428 0038                  		move.w	$38(a0),d2
0000957E 3628 003A                  		move.w	$3A(a0),d3
00009582 45E8 0028                  		lea	obSubtype(a0),a2
00009586 7C00                       		moveq	#0,d6
00009588 1C1A                       		move.b	(a2)+,d6
0000958A                            
0000958A                            loc_7BCE:
0000958A 7800                       		moveq	#0,d4
0000958C 181A                       		move.b	(a2)+,d4
0000958E ED4C                       		lsl.w	#6,d4
00009590 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009596 2244                       		movea.l	d4,a1
00009598 7800                       		moveq	#0,d4
0000959A 1829 003C                  		move.b	$3C(a1),d4
0000959E 2A04                       		move.l	d4,d5
000095A0 C9C0                       		muls.w	d0,d4
000095A2 E084                       		asr.l	#8,d4
000095A4 CBC1                       		muls.w	d1,d5
000095A6 E085                       		asr.l	#8,d5
000095A8 D842                       		add.w	d2,d4
000095AA DA43                       		add.w	d3,d5
000095AC 3344 000C                  		move.w	d4,obY(a1)
000095B0 3345 0008                  		move.w	d5,obX(a1)
000095B4 51CE FFD4                  		dbf	d6,loc_7BCE
000095B8 4E75                       		rts	
000095BA                            ; End of function Swing_Move2
000095BA                            
000095BA                            ; ===========================================================================
000095BA                            
000095BA                            Swing_ChkDel:
000095D8 4E75                       		rts	
000095DA                            ; ===========================================================================
000095DA                            
000095DA                            Swing_DelAll:
000095DA 7400                       		moveq	#0,d2
000095DC 45E8 0028                  		lea	obSubtype(a0),a2
000095E0 141A                       		move.b	(a2)+,d2
000095E2                            
000095E2                            Swing_DelLoop:
000095E2 7000                       		moveq	#0,d0
000095E4 101A                       		move.b	(a2)+,d0
000095E6 ED48                       		lsl.w	#6,d0
000095E8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095EE 2240                       		movea.l	d0,a1
000095F0 6100 0000                  		bsr.w	DeleteChild
000095F4 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000095F8 4E75                       		rts	
000095FA                            ; ===========================================================================
000095FA                            
000095FA                            Swing_Delete:	; Routine 6, 8
000095FA 6100 0000                  		bsr.w	DeleteObject
000095FE 4E75                       		rts	
00009600                            ; ===========================================================================
00009600                            
00009600                            Swing_Display:	; Routine $A
00009600 6000 0000                  		bra.w	DisplaySprite
00009600 6000 0000                  		bra.w	DisplaySprite
00009604                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009604                            ; ---------------------------------------------------------------------------
00009604                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009604                            ; ---------------------------------------------------------------------------
00009604                            Map_Swing_GHZ_internal:
00009604 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009606 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009608 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
0000960A 02                         @block:		dc.b 2
0000960B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009610 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009615 01                         @chain:		dc.b 1
00009616 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000961B 01                         @anchor:	dc.b 1
0000961C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009622 00                         		even
00009622 00                         		even
00009622                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
00009622                            ; ---------------------------------------------------------------------------
00009622                            ; Sprite mappings - SLZ	swinging platforms
00009622                            ; ---------------------------------------------------------------------------
00009622                            Map_Swing_SLZ_internal:
00009622 0000                       		dc.w @block-Map_Swing_SLZ_internal
00009624 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009626 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009628 08                         @block:		dc.b 8
00009629 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000962E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009633 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009638 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000963D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009642 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009647 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000964C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009651 01                         @chain:		dc.b 1
00009652 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009657 01                         @anchor:	dc.b 1
00009658 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000965E 00                         		even
0000965E 00                         		even
0000965E                            		include	"_incObj\17 Spiked Pole Helix.asm"
0000965E                            ; ---------------------------------------------------------------------------
0000965E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000965E                            ; ---------------------------------------------------------------------------
0000965E                            
0000965E                            Helix:
0000965E 7000                       		moveq	#0,d0
00009660 1028 0024                  		move.b	obRoutine(a0),d0
00009664 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009668 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
0000966C                            ; ===========================================================================
0000966C 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
0000966E 0000                       		dc.w Hel_Action-Hel_Index
00009670 0000                       		dc.w Hel_Action-Hel_Index
00009672 0000                       		dc.w Hel_Delete-Hel_Index
00009674 0000                       		dc.w Hel_Display-Hel_Index
00009676                            
00009676 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00009676                            
00009676                            ;		$29-38 are used for child object addresses
00009676                            ; ===========================================================================
00009676                            
00009676                            Hel_Main:	; Routine 0
00009676 5428 0024                  		addq.b	#2,obRoutine(a0)
0000967A 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
00009682 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009688 117C 0007 0022             		move.b	#7,obStatus(a0)
0000968E 117C 0004 0001             		move.b	#4,obRender(a0)
00009694 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000969A 117C 0008 0014             		move.b	#8,obActWid(a0)
000096A0 3428 000C                  		move.w	obY(a0),d2
000096A4 3628 0008                  		move.w	obX(a0),d3
000096A8 1810                       		move.b	0(a0),d4
000096AA 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000096AE 7200                       		moveq	#0,d1
000096B0 1212                       		move.b	(a2),d1		; move helix length to d1
000096B2 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000096B6 3001                       		move.w	d1,d0
000096B8 E248                       		lsr.w	#1,d0
000096BA E948                       		lsl.w	#4,d0
000096BC 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000096BE 5501                       		subq.b	#2,d1
000096C0 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000096C2 7C00                       		moveq	#0,d6
000096C4                            
000096C4                            Hel_Build:
000096C4 6100 0000                  		bsr.w	FindFreeObj
000096C8 6600                       		bne.s	Hel_Action
000096CA 5228 0028                  		addq.b	#1,obSubtype(a0)
000096CE 3A09                       		move.w	a1,d5
000096D0 0445 D000                  		subi.w	#$D000,d5
000096D4 EC4D                       		lsr.w	#6,d5
000096D6 0245 007F                  		andi.w	#$7F,d5
000096DA 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000096DC 137C 0008 0024             		move.b	#8,obRoutine(a1)
000096E2 1284                       		move.b	d4,0(a1)
000096E4 3342 000C                  		move.w	d2,ObY(a1)
000096E8 3343 0008                  		move.w	d3,obX(a1)
000096EC 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000096F2 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000096F8 137C 0004 0001             		move.b	#4,obRender(a1)
000096FE 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009704 137C 0008 0014             		move.b	#8,obActWid(a1)
0000970A 1346 003E                  		move.b	d6,hel_frame(a1)
0000970E 5206                       		addq.b	#1,d6
00009710 0206 0007                  		andi.b	#7,d6
00009714 0643 0010                  		addi.w	#$10,d3
00009718 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
0000971C 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000971E                            
0000971E 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
00009722 5206                       		addq.b	#1,d6
00009724 0206 0007                  		andi.b	#7,d6
00009728 0643 0010                  		addi.w	#$10,d3		; skip to next spike
0000972C 5228 0028                  		addq.b	#1,obSubtype(a0)
00009730                            
00009730                            	Hel_NotCentre:
00009730 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009734                            
00009734                            Hel_Action:	; Routine 2, 4
00009734 6100 0000                  		bsr.w	Hel_RotateSpikes
00009738 6100 0000                  		bsr.w	DisplaySprite
0000973C 6000 0000                  		bra.w	Hel_ChkDel
00009740                            
00009740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009740                            
00009740                            
00009740                            Hel_RotateSpikes:
00009740 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009744 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
0000974A D028 003E                  		add.b	hel_frame(a0),d0
0000974E 0200 0007                  		andi.b	#7,d0
00009752 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
00009756 6600                       		bne.s	locret_7DA6
00009758 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
0000975E                            
0000975E                            locret_7DA6:
0000975E 4E75                       		rts	
00009760                            ; End of function Hel_RotateSpikes
00009760                            
00009760                            ; ===========================================================================
00009760                            
00009760                            Hel_ChkDel:
0000977E 4E75                       		rts	
00009780                            ; ===========================================================================
00009780                            
00009780                            Hel_DelAll:
00009780 7400                       		moveq	#0,d2
00009782 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009786 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009788 5502                       		subq.b	#2,d2
0000978A 6500                       		bcs.s	Hel_Delete
0000978C                            
0000978C                            	Hel_DelLoop:
0000978C 7000                       		moveq	#0,d0
0000978E 101A                       		move.b	(a2)+,d0
00009790 ED48                       		lsl.w	#6,d0
00009792 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009798 2240                       		movea.l	d0,a1		; get child address
0000979A 6100 0000                  		bsr.w	DeleteChild	; delete object
0000979E 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000097A2                            
000097A2                            Hel_Delete:	; Routine 6
000097A2 6100 0000                  		bsr.w	DeleteObject
000097A6 4E75                       		rts	
000097A8                            ; ===========================================================================
000097A8                            
000097A8                            Hel_Display:	; Routine 8
000097A8 6100 FF96                  		bsr.w	Hel_RotateSpikes
000097AC 6000 0000                  		bra.w	DisplaySprite
000097AC 6000 0000                  		bra.w	DisplaySprite
000097B0                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000097B0                            ; ---------------------------------------------------------------------------
000097B0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097B0                            ; ---------------------------------------------------------------------------
000097B0                            Map_Hel_internal:
000097B0 0000                       		dc.w byte_7E08-Map_Hel_internal
000097B2 0000                       		dc.w byte_7E0E-Map_Hel_internal
000097B4 0000                       		dc.w byte_7E14-Map_Hel_internal
000097B6 0000                       		dc.w byte_7E1A-Map_Hel_internal
000097B8 0000                       		dc.w byte_7E20-Map_Hel_internal
000097BA 0000                       		dc.w byte_7E26-Map_Hel_internal
000097BC 0000                       		dc.w byte_7E2E-Map_Hel_internal
000097BE 0000                       		dc.w byte_7E2C-Map_Hel_internal
000097C0 01                         byte_7E08:	dc.b 1
000097C1 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000097C6 01                         byte_7E0E:	dc.b 1
000097C7 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000097CC 01                         byte_7E14:	dc.b 1
000097CD F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000097D2 01                         byte_7E1A:	dc.b 1
000097D3 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000097D8 01                         byte_7E20:	dc.b 1
000097D9 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000097DE 01                         byte_7E26:	dc.b 1
000097DF 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000097E4 01                         byte_7E2C:	dc.b 1
000097E5 F4                         		dc.b $F4
000097E6                            byte_7E2E:	; reads the 0 below	; not visible
000097E6 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000097EA                            		even
000097EA                            		even
000097EA                            		include	"_incObj\18 Platforms.asm"
000097EA                            ; ---------------------------------------------------------------------------
000097EA                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000097EA                            ; ---------------------------------------------------------------------------
000097EA                            
000097EA                            BasicPlatform:
000097EA 7000                       		moveq	#0,d0
000097EC 1028 0024                  		move.b	obRoutine(a0),d0
000097F0 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000097F4 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000097F8                            ; ===========================================================================
000097F8 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000097FA 0000                       		dc.w Plat_Solid-Plat_Index
000097FC 0000                       		dc.w Plat_Action2-Plat_Index
000097FE 0000                       		dc.w Plat_Delete-Plat_Index
00009800 0000                       		dc.w Plat_Action-Plat_Index
00009802                            ; ===========================================================================
00009802                            
00009802                            Plat_Main:	; Routine 0
00009802 5428 0024                  		addq.b	#2,obRoutine(a0)
00009806 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000980C 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009814 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000981A 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009820 6600                       		bne.s	@notSYZ
00009822                            
00009822 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
0000982A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009830                            
00009830                            	@notSYZ:
00009830 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009836 6600                       		bne.s	@notSLZ
00009838 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009840 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009846 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000984C 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009852                            
00009852                            	@notSLZ:
00009852 117C 0004 0001             		move.b	#4,obRender(a0)
00009858 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000985E 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009864 3168 000C 0034             		move.w	obY(a0),$34(a0)
0000986A 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009870 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009876 7200                       		moveq	#0,d1
00009878 1028 0028                  		move.b	obSubtype(a0),d0
0000987C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009880 6600                       		bne.s	@setframe	; if not, branch
00009882 5201                       		addq.b	#1,d1		; use frame #1
00009884 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
0000988A                            
0000988A                            	@setframe:
0000988A 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
0000988E                            
0000988E                            Plat_Solid:	; Routine 2
0000988E 4A28 0038                  		tst.b	$38(a0)
00009892 6700                       		beq.s	loc_7EE0
00009894 5928 0038                  		subq.b	#4,$38(a0)
00009898                            
00009898                            	loc_7EE0:
00009898 7200                       		moveq	#0,d1
0000989A 1228 0014                  		move.b	obActWid(a0),d1
0000989E 6100 F56C                  		bsr.w	PlatformObject
000098A2                            
000098A2                            Plat_Action:	; Routine 8
000098A2 6100 0000                  		bsr.w	Plat_Move
000098A6 6100 0000                  		bsr.w	Plat_Nudge
000098AA 6100 0000                  		bsr.w	DisplaySprite
000098AE 6000 0000                  		bra.w	Plat_ChkDel
000098B2                            ; ===========================================================================
000098B2                            
000098B2                            Plat_Action2:	; Routine 4
000098B2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000098B8 6700                       		beq.s	loc_7F06
000098BA 5828 0038                  		addq.b	#4,$38(a0)
000098BE                            
000098BE                            	loc_7F06:
000098BE 7200                       		moveq	#0,d1
000098C0 1228 0014                  		move.b	obActWid(a0),d1
000098C4 6100 F6BA                  		bsr.w	ExitPlatform
000098C8 3F28 0008                  		move.w	obX(a0),-(sp)
000098CC 6100 0000                  		bsr.w	Plat_Move
000098D0 6100 0000                  		bsr.w	Plat_Nudge
000098D4 341F                       		move.w	(sp)+,d2
000098D6 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000098DA 6100 0000                  		bsr.w	DisplaySprite
000098DE 6000 0000                  		bra.w	Plat_ChkDel
000098E2                            
000098E2 4E75                       		rts
000098E4                            
000098E4                            ; ---------------------------------------------------------------------------
000098E4                            ; Subroutine to	move platform slightly when you	stand on it
000098E4                            ; ---------------------------------------------------------------------------
000098E4                            
000098E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098E4                            
000098E4                            
000098E4                            Plat_Nudge:
000098E4 1028 0038                  		move.b	$38(a0),d0
000098E8 6100 9EC4                  		bsr.w	CalcSine
000098EC 323C 0400                  		move.w	#$400,d1
000098F0 C1C1                       		muls.w	d1,d0
000098F2 4840                       		swap	d0
000098F4 D068 002C                  		add.w	$2C(a0),d0
000098F8 3140 000C                  		move.w	d0,obY(a0)
000098FC 4E75                       		rts	
000098FE                            ; End of function Plat_Nudge
000098FE                            
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            ; Subroutine to	move platforms
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            
000098FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098FE                            
000098FE                            
000098FE                            Plat_Move:
000098FE 7000                       		moveq	#0,d0
00009900 1028 0028                  		move.b	obSubtype(a0),d0
00009904 0240 000F                  		andi.w	#$F,d0
00009908 D040                       		add.w	d0,d0
0000990A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000990E 4EFB 1000                  		jmp	@index(pc,d1.w)
00009912                            ; End of function Plat_Move
00009912                            
00009912                            ; ===========================================================================
00009912 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009916 0000 0000                  		dc.w @type02-@index, @type03-@index
0000991A 0000 0000                  		dc.w @type04-@index, @type05-@index
0000991E 0000 0000                  		dc.w @type06-@index, @type07-@index
00009922 0000 0000                  		dc.w @type08-@index, @type00-@index
00009926 0000 0000                  		dc.w @type0A-@index, @type0B-@index
0000992A 0000                       		dc.w @type0C-@index
0000992C                            ; ===========================================================================
0000992C                            
0000992C                            @type00:
0000992C 4E75                       		rts			; platform 00 doesn't move
0000992E                            ; ===========================================================================
0000992E                            
0000992E                            @type05:
0000992E 3028 0032                  		move.w	$32(a0),d0
00009932 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009936 4401                       		neg.b	d1		; reverse platform-motion
00009938 0601 0040                  		addi.b	#$40,d1
0000993C 6000                       		bra.s	@type01_move
0000993E                            ; ===========================================================================
0000993E                            
0000993E                            @type01:
0000993E 3028 0032                  		move.w	$32(a0),d0
00009942 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009946 0401 0040                  		subi.b	#$40,d1
0000994A                            
0000994A                            	@type01_move:
0000994A 4881                       		ext.w	d1
0000994C D041                       		add.w	d1,d0
0000994E 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009952 6000 0000                  		bra.w	@chgmotion
00009956                            ; ===========================================================================
00009956                            
00009956                            @type0C:
00009956 3028 0034                  		move.w	$34(a0),d0
0000995A 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000995E 4401                       		neg.b	d1		; reverse platform-motion
00009960 0601 0030                  		addi.b	#$30,d1
00009964 6000                       		bra.s	@type02_move
00009966                            ; ===========================================================================
00009966                            
00009966                            @type0B:
00009966 3028 0034                  		move.w	$34(a0),d0
0000996A 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000996E 0401 0030                  		subi.b	#$30,d1
00009972 6000                       		bra.s	@type02_move
00009974                            ; ===========================================================================
00009974                            
00009974                            @type06:
00009974 3028 0034                  		move.w	$34(a0),d0
00009978 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000997C 4401                       		neg.b	d1		; reverse platform-motion
0000997E 0601 0040                  		addi.b	#$40,d1
00009982 6000                       		bra.s	@type02_move
00009984                            ; ===========================================================================
00009984                            
00009984                            @type02:
00009984 3028 0034                  		move.w	$34(a0),d0
00009988 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000998C 0401 0040                  		subi.b	#$40,d1
00009990                            
00009990                            	@type02_move:
00009990 4881                       		ext.w	d1
00009992 D041                       		add.w	d1,d0
00009994 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009998 6000 0000                  		bra.w	@chgmotion
0000999C                            ; ===========================================================================
0000999C                            
0000999C                            @type03:
0000999C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000099A0 6600                       		bne.s	@type03_wait	; if yes, branch
000099A2 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
000099A8 6700                       		beq.s	@type03_nomove	; if not, branch
000099AA 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000099B0                            
000099B0                            	@type03_nomove:
000099B0 4E75                       		rts	
000099B2                            
000099B2                            	@type03_wait:
000099B2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000099B6 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000099B8 317C 0020 003A             		move.w	#32,$3A(a0)
000099BE 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000099C2 4E75                       		rts	
000099C4                            ; ===========================================================================
000099C4                            
000099C4                            @type04:
000099C4 4A68 003A                  		tst.w	$3A(a0)
000099C8 6700                       		beq.s	@loc_8048
000099CA 5368 003A                  		subq.w	#1,$3A(a0)
000099CE 6600                       		bne.s	@loc_8048
000099D0 0828 0003 0022             		btst	#3,obStatus(a0)
000099D6 6700                       		beq.s	@loc_8042
000099D8 08E9 0001 0022             		bset	#1,obStatus(a1)
000099DE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000099E4 137C 0002 0024             		move.b	#2,obRoutine(a1)
000099EA 08A8 0003 0022             		bclr	#3,obStatus(a0)
000099F0 4228 0025                  		clr.b	$25(a0)
000099F4 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
000099FA                            
000099FA                            	@loc_8042:
000099FA 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009A00                            
00009A00                            	@loc_8048:
00009A00 2628 002C                  		move.l	$2C(a0),d3
00009A04 3028 0012                  		move.w	obVelY(a0),d0
00009A08 48C0                       		ext.l	d0
00009A0A E180                       		asl.l	#8,d0
00009A0C D680                       		add.l	d0,d3
00009A0E 2143 002C                  		move.l	d3,$2C(a0)
00009A12 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009A18 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009A1C 0640 00E0                  		addi.w	#$E0,d0
00009A20 B068 002C                  		cmp.w	$2C(a0),d0
00009A24 6400                       		bcc.s	@locret_8074
00009A26 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009A2C                            
00009A2C                            	@locret_8074:
00009A2C 4E75                       		rts	
00009A2E                            ; ===========================================================================
00009A2E                            
00009A2E                            @type07:
00009A2E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009A32 6600                       		bne.s	@type07_wait	; if yes, branch
00009A34 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009A38 7000                       		moveq	#0,d0
00009A3A 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009A3E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009A40 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009A44 6700                       		beq.s	@type07_nomove	; if not, branch
00009A46 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009A4C                            
00009A4C                            	@type07_nomove:
00009A4C 4E75                       		rts	
00009A4E                            
00009A4E                            	@type07_wait:
00009A4E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009A52 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009A54 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009A58 4E75                       		rts	
00009A5A                            ; ===========================================================================
00009A5A                            
00009A5A                            @type08:
00009A5A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009A5E 3028 0034                  		move.w	$34(a0),d0
00009A62 0440 0200                  		subi.w	#$200,d0
00009A66 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009A6A 6600                       		bne.s	@type08_nostop	; if not, branch
00009A6C 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009A70                            
00009A70                            	@type08_nostop:
00009A70 4E75                       		rts	
00009A72                            ; ===========================================================================
00009A72                            
00009A72                            @type0A:
00009A72 3028 0034                  		move.w	$34(a0),d0
00009A76 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009A7A 0401 0040                  		subi.b	#$40,d1
00009A7E 4881                       		ext.w	d1
00009A80 E241                       		asr.w	#1,d1
00009A82 D041                       		add.w	d1,d0
00009A84 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009A88                            
00009A88                            @chgmotion:
00009A88 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009A8E 4E75                       		rts	
00009A90                            ; ===========================================================================
00009A90                            
00009A90                            Plat_ChkDel:
00009AAC 4E75                       		rts	
00009AAE                            ; ===========================================================================
00009AAE                            
00009AAE                            Plat_Delete:	; Routine 6
00009AAE 6000 0000                  		bra.w	DeleteObject
00009AAE 6000 0000                  		bra.w	DeleteObject
00009AB2                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009AB2                            ; ---------------------------------------------------------------------------
00009AB2                            ; Sprite mappings - unused
00009AB2                            ; ---------------------------------------------------------------------------
00009AB2                            Map_Plat_Unused_internal:
00009AB2 0000                       		dc.w @small-Map_Plat_Unused_internal
00009AB4 0000                       		dc.w @large-Map_Plat_Unused_internal
00009AB6 02                         @small:		dc.b 2
00009AB7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009ABC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009AC1 0A                         @large:		dc.b $A
00009AC2 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009AC7 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009ACC 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009AD1 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009AD6 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009ADB F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009AE0 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009AE5 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009AEA 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009AEF 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009AF4                            		even
00009AF4                            		even
00009AF4                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009AF4                            ; ---------------------------------------------------------------------------
00009AF4                            ; Sprite mappings - GHZ	platforms
00009AF4                            ; ---------------------------------------------------------------------------
00009AF4                            Map_Plat_GHZ_internal:
00009AF4 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009AF6 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009AF8 04                         @small:		dc.b 4
00009AF9 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009AFE F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009B03 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009B08 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009B0D 0A                         @large:		dc.b $A
00009B0E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009B13 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009B18 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009B1D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009B22 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009B27 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009B2C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009B31 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009B36 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009B3B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009B40                            		even
00009B40                            		even
00009B40                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009B40                            ; ---------------------------------------------------------------------------
00009B40                            ; Sprite mappings - SYZ	platforms
00009B40                            ; ---------------------------------------------------------------------------
00009B40                            Map_Plat_SYZ_internal:
00009B40 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009B42 03                         @platform:	dc.b 3
00009B43 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009B48 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009B4D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009B52                            		even
00009B52                            		even
00009B52                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009B52                            ; ---------------------------------------------------------------------------
00009B52                            ; Sprite mappings - SLZ	platforms
00009B52                            ; ---------------------------------------------------------------------------
00009B52                            Map_Plat_SLZ_internal:
00009B52 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009B54 02                         @platform:	dc.b 2
00009B55 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009B5A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009B60 00                         		even
00009B60 00                         		even
00009B60                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009B60                            ; ---------------------------------------------------------------------------
00009B60                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B60                            ; ---------------------------------------------------------------------------
00009B60                            Map_GBall_internal:
00009B60 0000                       		dc.w @shiny-Map_GBall_internal
00009B62 0000                       		dc.w @check1-Map_GBall_internal
00009B64 0000                       		dc.w @check2-Map_GBall_internal
00009B66 0000                       		dc.w @check3-Map_GBall_internal
00009B68 06                         @shiny:		dc.b 6
00009B69 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009B6E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009B73 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009B78 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009B7D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009B82 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009B87 04                         @check1:	dc.b 4
00009B88 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009B8D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009B92 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009B97 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009B9C 04                         @check2:	dc.b 4
00009B9D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009BA2 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009BA7 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009BAC 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009BB1 04                         @check3:	dc.b 4
00009BB2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009BB7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009BBC 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009BC1 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009BC6                            		even
00009BC6                            		even
00009BC6                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009BC6                            ; ---------------------------------------------------------------------------
00009BC6                            ; Object 1A - GHZ collapsing ledge
00009BC6                            ; ---------------------------------------------------------------------------
00009BC6                            
00009BC6                            CollapseLedge:
00009BC6 7000                       		moveq	#0,d0
00009BC8 1028 0024                  		move.b	obRoutine(a0),d0
00009BCC 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009BD0 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009BD4                            ; ===========================================================================
00009BD4 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009BD8 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009BDC 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009BE0                            
00009BE0 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009BE0 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009BE0                            ; ===========================================================================
00009BE0                            
00009BE0                            Ledge_Main:	; Routine 0
00009BE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00009BE4 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009BEC 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009BF2 0028 0004 0001             		ori.b	#4,obRender(a0)
00009BF8 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009BFE 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009C04 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009C0A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009C10 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009C16 08E8 0004 0001             		bset	#4,obRender(a0)
00009C1C                            
00009C1C                            Ledge_Touch:	; Routine 2
00009C1C 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009C20 6700                       		beq.s	@slope		; if not, branch
00009C22 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009C26 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009C2A 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009C2E                            
00009C2E                            	@slope:
00009C2E 323C 0030                  		move.w	#$30,d1
00009C32 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009C38 6100 F2A6                  		bsr.w	SlopeObject
00009C3C 6000 0000                  		bra.w	RememberState
00009C40                            ; ===========================================================================
00009C40                            
00009C40                            Ledge_Collapse:	; Routine 4
00009C40 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009C44 6700 0000                  		beq.w	loc_847A
00009C48 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009C4E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009C52                            
00009C52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C52                            
00009C52                            
00009C52                            Ledge_WalkOff:	; Routine $A
00009C52 323C 0030                  		move.w	#$30,d1
00009C56 6100 F328                  		bsr.w	ExitPlatform
00009C5A 323C 0030                  		move.w	#$30,d1
00009C5E 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009C64 3428 0008                  		move.w	obX(a0),d2
00009C68 6100 0000                  		bsr.w	SlopeObject2
00009C6C 6000 0000                  		bra.w	RememberState
00009C70                            ; End of function Ledge_WalkOff
00009C70                            
00009C70                            ; ===========================================================================
00009C70                            
00009C70                            Ledge_Display:	; Routine 6
00009C70 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009C74 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009C76 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009C7A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009C7E 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009C82 6000 0000                  		bra.w	DisplaySprite
00009C86                            ; ===========================================================================
00009C86                            
00009C86                            loc_82D0:
00009C86 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009C8A 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009C8E 43F8 D000                  		lea	(v_player).w,a1
00009C92 0829 0003 0022             		btst	#3,obStatus(a1)
00009C98 6700                       		beq.s	loc_82FC
00009C9A 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009C9E 6600                       		bne.s	locret_8308
00009CA0 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009CA6 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009CAC 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009CB2                            
00009CB2                            loc_82FC:
00009CB2 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009CB8 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009CBE                            
00009CBE                            locret_8308:
00009CBE 4E75                       		rts	
00009CC0                            ; ===========================================================================
00009CC0                            
00009CC0                            Ledge_TimeZero:
00009CC0 6100 0000                  		bsr.w	ObjectFall
00009CC4 6100 0000                  		bsr.w	DisplaySprite
00009CC8 4A28 0001                  		tst.b	obRender(a0)
00009CCC 6A00                       		bpl.s	Ledge_Delete
00009CCE 4E75                       		rts	
00009CD0                            ; ===========================================================================
00009CD0                            
00009CD0                            Ledge_Delete:	; Routine 8
00009CD0 6100 0000                  		bsr.w	DeleteObject
00009CD4 4E75                       		rts	
00009CD4 4E75                       		rts	
00009CD6                            		include	"_incObj\53 Collapsing Floors.asm"
00009CD6                            ; ---------------------------------------------------------------------------
00009CD6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009CD6                            ; ---------------------------------------------------------------------------
00009CD6                            
00009CD6                            CollapseFloor:
00009CD6 7000                       		moveq	#0,d0
00009CD8 1028 0024                  		move.b	obRoutine(a0),d0
00009CDC 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009CE0 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009CE4                            ; ===========================================================================
00009CE4 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009CE8 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009CEC 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009CF0                            
00009CF0 =00000038                  cflo_timedelay:		equ $38
00009CF0 =0000003A                  cflo_collapse_flag:	equ $3A
00009CF0                            ; ===========================================================================
00009CF0                            
00009CF0                            CFlo_Main:	; Routine 0
00009CF0 5428 0024                  		addq.b	#2,obRoutine(a0)
00009CF4 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009CFC 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009D02 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009D08 6600                       		bne.s	@notSLZ
00009D0A                            
00009D0A 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009D10 5428 001A                  		addq.b	#2,obFrame(a0)
00009D14                            
00009D14                            	@notSLZ:
00009D14 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009D1A 6600                       		bne.s	@notSBZ
00009D1C 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009D22                            
00009D22                            	@notSBZ:
00009D22 0028 0004 0001             		ori.b	#4,obRender(a0)
00009D28 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009D2E 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009D34 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009D3A                            
00009D3A                            CFlo_Touch:	; Routine 2
00009D3A 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009D3E 6700                       		beq.s	@solid		; if not, branch
00009D40 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009D44 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009D48 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009D4C                            
00009D4C                            	@solid:
00009D4C 323C 0020                  		move.w	#$20,d1
00009D50 6100 F0BA                  		bsr.w	PlatformObject
00009D54 4A28 0028                  		tst.b	obSubtype(a0)
00009D58 6A00                       		bpl.s	@remstate
00009D5A 0829 0003 0022             		btst	#3,obStatus(a1)
00009D60 6700                       		beq.s	@remstate
00009D62 08A8 0000 0001             		bclr	#0,obRender(a0)
00009D68 3029 0008                  		move.w	obX(a1),d0
00009D6C 9068 0008                  		sub.w	obX(a0),d0
00009D70 6400                       		bcc.s	@remstate
00009D72 08E8 0000 0001             		bset	#0,obRender(a0)
00009D78                            
00009D78                            	@remstate:
00009D78 6000 0000                  		bra.w	RememberState
00009D7C                            ; ===========================================================================
00009D7C                            
00009D7C                            CFlo_Collapse:	; Routine 4
00009D7C 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009D80 6700 0000                  		beq.w	loc_8458
00009D84 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009D8A 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009D8E                            
00009D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D8E                            
00009D8E                            
00009D8E                            CFlo_WalkOff:	; Routine $A
00009D8E 323C 0020                  		move.w	#$20,d1
00009D92 6100 F1EC                  		bsr.w	ExitPlatform
00009D96 3428 0008                  		move.w	obX(a0),d2
00009D9A 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009D9E 6000 0000                  		bra.w	RememberState
00009DA2                            ; End of function CFlo_WalkOff
00009DA2                            
00009DA2                            ; ===========================================================================
00009DA2                            
00009DA2                            CFlo_Display:	; Routine 6
00009DA2 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009DA6 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009DA8 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009DAC 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009DB0 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009DB4 6000 0000                  		bra.w	DisplaySprite
00009DB8                            ; ===========================================================================
00009DB8                            
00009DB8                            loc_8402:
00009DB8 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009DBC 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009DC0 43F8 D000                  		lea	(v_player).w,a1
00009DC4 0829 0003 0022             		btst	#3,obStatus(a1)
00009DCA 6700                       		beq.s	loc_842E
00009DCC 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009DD0 6600                       		bne.s	locret_843A
00009DD2 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009DD8 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009DDE 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009DE4                            
00009DE4                            loc_842E:
00009DE4 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009DEA 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009DF0                            
00009DF0                            locret_843A:
00009DF0 4E75                       		rts	
00009DF2                            ; ===========================================================================
00009DF2                            
00009DF2                            CFlo_TimeZero:
00009DF2 6100 0000                  		bsr.w	ObjectFall
00009DF6 6100 0000                  		bsr.w	DisplaySprite
00009DFA 4A28 0001                  		tst.b	obRender(a0)
00009DFE 6A00                       		bpl.s	CFlo_Delete
00009E00 4E75                       		rts	
00009E02                            ; ===========================================================================
00009E02                            
00009E02                            CFlo_Delete:	; Routine 8
00009E02 6100 0000                  		bsr.w	DeleteObject
00009E06 4E75                       		rts	
00009E08                            ; ===========================================================================
00009E08                            
00009E08                            CFlo_Fragment:
00009E08 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009E0E                            
00009E0E                            loc_8458:
00009E0E 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009E14 0828 0000 0028             		btst	#0,obSubtype(a0)
00009E1A 6700                       		beq.s	loc_846C
00009E1C 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009E22                            
00009E22                            loc_846C:
00009E22 7207                       		moveq	#7,d1
00009E24 5228 001A                  		addq.b	#1,obFrame(a0)
00009E28 6000                       		bra.s	loc_8486
00009E28 6000                       		bra.s	loc_8486
00009E2A                            
00009E2A                            ; ===========================================================================
00009E2A                            
00009E2A                            Ledge_Fragment:
00009E2A 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009E30                            
00009E30                            loc_847A:
00009E30 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009E36 7218                       		moveq	#$18,d1
00009E38 5428 001A                  		addq.b	#2,obFrame(a0)
00009E3C                            
00009E3C                            loc_8486:
00009E3C 7000                       		moveq	#0,d0
00009E3E 1028 001A                  		move.b	obFrame(a0),d0
00009E42 D040                       		add.w	d0,d0
00009E44 2668 0004                  		movea.l	obMap(a0),a3
00009E48 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009E4C 524B                       		addq.w	#1,a3
00009E4E 08E8 0005 0001             		bset	#5,obRender(a0)
00009E54 1810                       		move.b	0(a0),d4
00009E56 1A28 0001                  		move.b	obRender(a0),d5
00009E5A 2248                       		movea.l	a0,a1
00009E5C 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009E62 1284                       		move.b	d4,0(a1)
00009E64 234B 0004                  		move.l	a3,obMap(a1)
00009E68 1345 0001                  		move.b	d5,obRender(a1)
00009E6C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009E72 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009E78 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009E7E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009E84 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009E8A 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009E8E 5341                       		subq.w	#1,d1
00009E90 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009E94 303C 005F                  		move.w	#$5F,d0
00009E98                            ; ===========================================================================
00009E98                            
00009E98                            loc_84AA:
00009E98 4A11                       		tst.b	(a1)
00009E9A 6700                       		beq.s	@cont		
00009E9C 43E9 0040                  		lea		$40(a1),a1
00009EA0 51C8 FFF6                  		dbf		d0,loc_84AA	
00009EA4 6600                       		bne.s	loc_84F2	
00009EA6                            	@cont:
00009EA6 5A4B                       		addq.w	#5,a3
00009EA8                            
00009EA8                            loc_84B2:
00009EA8 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009EAE 1284                       		move.b	d4,0(a1)
00009EB0 234B 0004                  		move.l	a3,obMap(a1)
00009EB4 1345 0001                  		move.b	d5,obRender(a1)
00009EB8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009EBE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009EC4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009ECA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009ED0 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009ED6 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009EDA 6100 0000                  		bsr.w	DisplaySprite1
00009EDE                            
00009EDE                            loc_84EE:
00009EDE 51C9 FFB8                  		dbf	d1,loc_84AA
00009EE2                            
00009EE2                            loc_84F2:
00009EE2 6100 0000                  		bsr.w	DisplaySprite
00009EF0                            ; ===========================================================================
00009EF0                            ; ---------------------------------------------------------------------------
00009EF0                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009EF0                            ; ---------------------------------------------------------------------------
00009EF0 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009F00 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009F0A 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009F12 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009F1A                            
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            
00009F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F1A                            
00009F1A                            
00009F1A                            SlopeObject2:
00009F1A 43F8 D000                  		lea	(v_player).w,a1
00009F1E 0829 0003 0022             		btst	#3,obStatus(a1)
00009F24 6700                       		beq.s	locret_856E
00009F26 3029 0008                  		move.w	obX(a1),d0
00009F2A 9068 0008                  		sub.w	obX(a0),d0
00009F2E D041                       		add.w	d1,d0
00009F30 E248                       		lsr.w	#1,d0
00009F32 0828 0000 0001             		btst	#0,obRender(a0)
00009F38 6700                       		beq.s	loc_854E
00009F3A 4640                       		not.w	d0
00009F3C D041                       		add.w	d1,d0
00009F3E                            
00009F3E                            loc_854E:
00009F3E 7200                       		moveq	#0,d1
00009F40 1232 0000                  		move.b	(a2,d0.w),d1
00009F44 3028 000C                  		move.w	obY(a0),d0
00009F48 9041                       		sub.w	d1,d0
00009F4A 7200                       		moveq	#0,d1
00009F4C 1229 0016                  		move.b	obHeight(a1),d1
00009F50 9041                       		sub.w	d1,d0
00009F52 3340 000C                  		move.w	d0,obY(a1)
00009F56 9468 0008                  		sub.w	obX(a0),d2
00009F5A 9569 0008                  		sub.w	d2,obX(a1)
00009F5E                            
00009F5E                            locret_856E:
00009F5E 4E75                       		rts	
00009F60                            ; End of function SlopeObject2
00009F60                            
00009F60                            ; ===========================================================================
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            ; Collision data for GHZ collapsing ledge
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            Ledge_SlopeData:
00009F60                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009F90                            		even
00009F90                            
00009F90                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009F90                            ; ---------------------------------------------------------------------------
00009F90                            ; Sprite mappings - GHZ	collapsing ledge
00009F90                            ; ---------------------------------------------------------------------------
00009F90                            Map_Ledge_internal:
00009F90 0000                       		dc.w @left-Map_Ledge_internal
00009F92 0000                       		dc.w @right-Map_Ledge_internal
00009F94 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009F96 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009F98 10                         @left:		dc.b $10
00009F99 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009F9E D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FA3 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FA8 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FAD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FB2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009FB7 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009FBC F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009FC1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009FC6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009FCB 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009FD0 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009FD5 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009FDA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009FDF 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009FE4 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009FE9 10                         @right:		dc.b $10
00009FEA C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009FEF D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FF4 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FF9 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FFE D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A003 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A008 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A00D F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A012 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A017 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A01C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A021 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A026 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A02B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A030 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A035 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A03A 19                         @leftsmash:	dc.b $19
0000A03B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A040 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A045 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A04A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A04F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A054 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A059 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A05E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A063 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A068 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A06D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A072 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A077 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A07C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A081 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A086 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A08B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A090 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A095 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A09A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A09F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A0A4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A0A9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A0AE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A0B3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0B8 19                         @rightsmash:	dc.b $19
0000A0B9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A0BE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A0C3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A0C8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A0CD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A0D2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A0D7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A0DC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A0E1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A0E6 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A0EB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A0F0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A0F5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A0FA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A0FF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A104 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A109 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A10E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A113 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A118 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A11D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A122 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A127 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A12C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A131 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A136                            		even
0000A136                            		even
0000A136                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A136                            ; ---------------------------------------------------------------------------
0000A136                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A136                            ; ---------------------------------------------------------------------------
0000A136                            Map_CFlo_internal:
0000A136 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A138 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A13A 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A13C 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A13E 04                         byte_874E:	dc.b 4
0000A13F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A144 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A149 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A14E 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A153 08                         byte_8763:	dc.b 8
0000A154 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A159 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A15E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A163 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A168 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A16D 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A172 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A177 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A17C 04                         byte_878C:	dc.b 4
0000A17D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A182 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A187 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A18C 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A191 08                         byte_87A1:	dc.b 8
0000A192 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A197 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A19C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A1A1 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A1A6 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A1AB 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A1B0 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A1B5 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A1BA                            		even
0000A1BA                            		even
0000A1BA                            
0000A1BA                            		include	"_incObj\1C Scenery.asm"
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA                            
0000A1BA                            Scenery:
0000A1BA 7000                       		moveq	#0,d0
0000A1BC 1028 0024                  		move.b	obRoutine(a0),d0
0000A1C0 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A1C4 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A1C8                            ; ===========================================================================
0000A1C8 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A1CA 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A1CC                            ; ===========================================================================
0000A1CC                            
0000A1CC                            Scen_Main:	; Routine 0
0000A1CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A1D0 7000                       		moveq	#0,d0
0000A1D2 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A1D6 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A1DA 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A1DE 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A1E2 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A1E6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A1EC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A1F0 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A1F4 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A1F8 3028 0018                  		move.w obPriority(a0),d0 
0000A1FC E248                       		lsr.w #1,d0 
0000A1FE 0240 0380                  		andi.w #$380,d0 
0000A202 3140 0018                  		move.w d0,obPriority(a0)		
0000A206 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A20A                            
0000A20A                            Scen_ChkDel:	; Routine 2
0000A228 6000 0000                  		bra.w	DisplaySprite
0000A22C                            ; ===========================================================================
0000A22C                            ; ---------------------------------------------------------------------------
0000A22C                            ; Variables for	object $1C are stored in an array
0000A22C                            ; ---------------------------------------------------------------------------
0000A22C 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A230 44D8                       		dc.w $44D8		; VRAM setting
0000A232 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A236 0000 0000                  		dc.l Map_Scen
0000A23A 44D8                       		dc.w $44D8
0000A23C 0008 0200                  		dc.b 0,	8, 2, 0
0000A240 0000 0000                  		dc.l Map_Scen
0000A244 44D8                       		dc.w $44D8
0000A246 0008 0200                  		dc.b 0,	8, 2, 0
0000A24A 0000 92F4                  		dc.l Map_Bri
0000A24E 438E                       		dc.w $438E
0000A250 0110 0100                  		dc.b 1,	$10, 1,	0
0000A254                            		even
0000A254                            		even
0000A254                            Map_Scen:	include	"_maps\Scenery.asm"
0000A254                            ; ---------------------------------------------------------------------------
0000A254                            ; Sprite mappings - SLZ	lava thrower
0000A254                            ; ---------------------------------------------------------------------------
0000A254                            Map_Scen_internal:
0000A254 0000                       		dc.w byte_8858-Map_Scen_internal
0000A256 01                         byte_8858:	dc.b 1
0000A257 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A25C                            		even
0000A25C                            		even
0000A25C                            
0000A25C                            		include	"_incObj\1D Unused Switch.asm"
0000A25C                            ; ---------------------------------------------------------------------------
0000A25C                            ; Object 1D - switch that activates when Sonic touches it
0000A25C                            ; (this	is not used anywhere in	the game)
0000A25C                            ; ---------------------------------------------------------------------------
0000A25C                            
0000A25C                            MagicSwitch:
0000A25C 7000                       		moveq	#0,d0
0000A25E 1028 0024                  		move.b	obRoutine(a0),d0
0000A262 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A266 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A26A                            ; ===========================================================================
0000A26A 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A26C 0000                       		dc.w Swi_Action-Swi_Index
0000A26E 0000                       		dc.w Swi_Delete-Swi_Index
0000A270                            
0000A270 =00000030                  swi_origY:	equ $30		; original y-axis position
0000A270                            ; ===========================================================================
0000A270                            
0000A270                            Swi_Main:	; Routine 0
0000A270 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A274 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A27C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A282 117C 0004 0001             		move.b	#4,obRender(a0)
0000A288 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A28E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A294 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A29A                            
0000A29A                            Swi_Action:	; Routine 2
0000A29A 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A2A0 323C 0010                  		move.w	#$10,d1
0000A2A4 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A2A8 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A2AA                            
0000A2AA 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A2AE 7001                       		moveq	#1,d0
0000A2B0 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A2B4                            
0000A2B4                            Swi_ChkDel:
0000A2B4 6100 0000                  		bsr.w	DisplaySprite
0000A2D6 4E75                       		rts	
0000A2D8                            ; ===========================================================================
0000A2D8                            
0000A2D8                            Swi_Delete:	; Routine 4
0000A2D8 6100 0000                  		bsr.w	DeleteObject
0000A2DC 4E75                       		rts	
0000A2DE                            
0000A2DE                            ; ---------------------------------------------------------------------------
0000A2DE                            ; Subroutine to	check if Sonic touches the object
0000A2DE                            ; ---------------------------------------------------------------------------
0000A2DE                            
0000A2DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2DE                            
0000A2DE                            
0000A2DE                            Swi_ChkTouch:
0000A2DE 43F8 D000                  		lea	(v_player).w,a1
0000A2E2 3029 0008                  		move.w	obX(a1),d0
0000A2E6 9068 0008                  		sub.w	obX(a0),d0
0000A2EA D041                       		add.w	d1,d0
0000A2EC 6B00                       		bmi.s	Swi_NoTouch
0000A2EE D241                       		add.w	d1,d1
0000A2F0 B041                       		cmp.w	d1,d0
0000A2F2 6400                       		bcc.s	Swi_NoTouch
0000A2F4 3429 000C                  		move.w	obY(a1),d2
0000A2F8 1229 0016                  		move.b	obHeight(a1),d1
0000A2FC 4881                       		ext.w	d1
0000A2FE D242                       		add.w	d2,d1
0000A300 3028 000C                  		move.w	obY(a0),d0
0000A304 0440 0010                  		subi.w	#$10,d0
0000A308 9041                       		sub.w	d1,d0
0000A30A 6200                       		bhi.s	Swi_NoTouch
0000A30C 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A310 6500                       		bcs.s	Swi_NoTouch
0000A312 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A314 4E75                       		rts	
0000A316                            ; ===========================================================================
0000A316                            
0000A316                            Swi_NoTouch:
0000A316 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A318 4E75                       		rts	
0000A31A                            ; End of function Swi_ChkTouch
0000A31A                            ; End of function Swi_ChkTouch
0000A31A                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A31A                            ; ---------------------------------------------------------------------------
0000A31A                            ; Sprite mappings - Unused switch thingy
0000A31A                            ; ---------------------------------------------------------------------------
0000A31A                            Map_Swi_internal:
0000A31A 0000                       		dc.w byte_891E-Map_Swi_internal
0000A31C 04                         byte_891E:	dc.b 4
0000A31D E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A322 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A327 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A32C 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A332 00                         		even
0000A332 00                         		even
0000A332                            
0000A332                            		include	"_incObj\2A SBZ Small Door.asm"
0000A332                            ; ---------------------------------------------------------------------------
0000A332                            ; Object 2A - small vertical door (SBZ)
0000A332                            ; ---------------------------------------------------------------------------
0000A332                            
0000A332                            AutoDoor:
0000A332 7000                       		moveq	#0,d0
0000A334 1028 0024                  		move.b	obRoutine(a0),d0
0000A338 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A33C 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A340                            ; ===========================================================================
0000A340 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A342 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A344                            ; ===========================================================================
0000A344                            
0000A344                            ADoor_Main:	; Routine 0
0000A344 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A348 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A350 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A356 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A35C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A362                            		;move.b	#4,obPriority(a0)
0000A362                            
0000A362                            ADoor_OpenShut:	; Routine 2
0000A362 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A366 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A36A 3038 D008                  		move.w	(v_player+obX).w,d0
0000A36E D041                       		add.w	d1,d0
0000A370 B068 0008                  		cmp.w	obX(a0),d0
0000A374 6500                       		bcs.s	ADoor_Animate
0000A376 9041                       		sub.w	d1,d0
0000A378 9041                       		sub.w	d1,d0
0000A37A B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A37E 6400                       		bcc.s	ADoor_Animate	; close door
0000A380 D041                       		add.w	d1,d0
0000A382 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A386 6400                       		bcc.s	loc_899A	; if yes, branch
0000A388 0828 0000 0022             		btst	#0,obStatus(a0)
0000A38E 6600                       		bne.s	ADoor_Animate
0000A390 6000                       		bra.s	ADoor_Open
0000A392                            ; ===========================================================================
0000A392                            
0000A392                            loc_899A:
0000A392 0828 0000 0022             		btst	#0,obStatus(a0)
0000A398 6700                       		beq.s	ADoor_Animate
0000A39A                            
0000A39A                            ADoor_Open:
0000A39A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A3A0                            
0000A3A0                            ADoor_Animate:
0000A3A0 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A3A6 6100 0000                  		bsr.w	AnimateSprite
0000A3AA 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A3AE 6600                       		bne.s	@remember	; if yes, branch
0000A3B0 323C 0011                  		move.w	#$11,d1
0000A3B4 343C 0020                  		move.w	#$20,d2
0000A3B8 3602                       		move.w	d2,d3
0000A3BA 5243                       		addq.w	#1,d3
0000A3BC 3828 0008                  		move.w	obX(a0),d4
0000A3C0 6100 0000                  		bsr.w	SolidObject
0000A3C4                            
0000A3C4                            	@remember:
0000A3C4 6000 0000                  		bra.w	RememberState
0000A3C4 6000 0000                  		bra.w	RememberState
0000A3C8                            		include	"_anim\SBZ Small Door.asm"
0000A3C8                            ; ---------------------------------------------------------------------------
0000A3C8                            ; Animation script - doors (SBZ)
0000A3C8                            ; ---------------------------------------------------------------------------
0000A3C8 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A3CA 0000                       		dc.w @open-Ani_ADoor
0000A3CC 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A3D8 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A3E4                            		even
0000A3E4                            		even
0000A3E4                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A3E4                            ; --------------------------------------------------------------------------------
0000A3E4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A3E4                            ; --------------------------------------------------------------------------------
0000A3E4                            
0000A3E4                            SME_YnmwF:	
0000A3E4 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A3E8 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A3EC 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A3F0 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A3F4 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A3F6 02                         SME_YnmwF_12:	dc.b 2	
0000A3F7 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A3FC 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A401 02                         SME_YnmwF_1D:	dc.b 2	
0000A402 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A407 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A40C 02                         SME_YnmwF_28:	dc.b 2	
0000A40D D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A412 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A417 02                         SME_YnmwF_33:	dc.b 2	
0000A418 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A41D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A422 02                         SME_YnmwF_3E:	dc.b 2	
0000A423 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A428 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A42D 02                         SME_YnmwF_49:	dc.b 2	
0000A42E CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A433 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A438 02                         SME_YnmwF_54:	dc.b 2	
0000A439 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A43E 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A443 02                         SME_YnmwF_5F:	dc.b 2	
0000A444 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A449 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A44E 02                         SME_YnmwF_6A:	dc.b 2	
0000A44F C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A454 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A45A 00                         		even
0000A45A 00                         		even
0000A45A                            
0000A45A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A45A                            
0000A45A                            
0000A45A                            Obj44_SolidWall:
0000A45A 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A45E 6700                       		beq.s	loc_8AA8
0000A460 6B00 0000                  		bmi.w	loc_8AC4
0000A464 4A40                       		tst.w	d0
0000A466 6700 0000                  		beq.w	loc_8A92
0000A46A 6B00                       		bmi.s	loc_8A7C
0000A46C 4A69 0010                  		tst.w	obVelX(a1)
0000A470 6B00                       		bmi.s	loc_8A92
0000A472 6000                       		bra.s	loc_8A82
0000A474                            ; ===========================================================================
0000A474                            
0000A474                            loc_8A7C:
0000A474 4A69 0010                  		tst.w	obVelX(a1)
0000A478 6A00                       		bpl.s	loc_8A92
0000A47A                            
0000A47A                            loc_8A82:
0000A47A 9169 0008                  		sub.w	d0,obX(a1)
0000A47E 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A484 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A48A                            
0000A48A                            loc_8A92:
0000A48A 0829 0001 0022             		btst	#1,obStatus(a1)
0000A490 6600                       		bne.s	loc_8AB6
0000A492 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A498 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A49E 4E75                       		rts	
0000A4A0                            ; ===========================================================================
0000A4A0                            
0000A4A0                            loc_8AA8:
0000A4A0 0828 0005 0022             		btst	#5,obStatus(a0)
0000A4A6 6700                       		beq.s	locret_8AC2
0000A4A8 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A4AE                            
0000A4AE                            loc_8AB6:
0000A4AE 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A4B4 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A4BA                            
0000A4BA                            locret_8AC2:
0000A4BA 4E75                       		rts	
0000A4BC                            ; ===========================================================================
0000A4BC                            
0000A4BC                            loc_8AC4:
0000A4BC 4A69 0012                  		tst.w	obVelY(a1)
0000A4C0 6A00                       		bpl.s	locret_8AD8
0000A4C2 4A43                       		tst.w	d3
0000A4C4 6A00                       		bpl.s	locret_8AD8
0000A4C6 9769 000C                  		sub.w	d3,obY(a1)
0000A4CA 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A4D0                            
0000A4D0                            locret_8AD8:
0000A4D0 4E75                       		rts	
0000A4D2                            ; End of function Obj44_SolidWall
0000A4D2                            
0000A4D2                            
0000A4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4D2                            
0000A4D2                            
0000A4D2                            Obj44_SolidWall2:
0000A4D2 43F8 D000                  		lea	(v_player).w,a1
0000A4D6 3029 0008                  		move.w	obX(a1),d0
0000A4DA 9068 0008                  		sub.w	obX(a0),d0
0000A4DE D041                       		add.w	d1,d0
0000A4E0 6B00                       		bmi.s	loc_8B48
0000A4E2 3601                       		move.w	d1,d3
0000A4E4 D643                       		add.w	d3,d3
0000A4E6 B043                       		cmp.w	d3,d0
0000A4E8 6200                       		bhi.s	loc_8B48
0000A4EA 1629 0016                  		move.b	obHeight(a1),d3
0000A4EE 4883                       		ext.w	d3
0000A4F0 D443                       		add.w	d3,d2
0000A4F2 3629 000C                  		move.w	obY(a1),d3
0000A4F6 9668 000C                  		sub.w	obY(a0),d3
0000A4FA D642                       		add.w	d2,d3
0000A4FC 6B00                       		bmi.s	loc_8B48
0000A4FE 3802                       		move.w	d2,d4
0000A500 D844                       		add.w	d4,d4
0000A502 B644                       		cmp.w	d4,d3
0000A504 6400                       		bhs.s	loc_8B48
0000A506 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A50A 6B00                       		bmi.s	loc_8B48
0000A50C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A512 6400                       		bhs.s	loc_8B48
0000A514 4A78 FE08                  		tst.w	(v_debuguse).w
0000A518 6600                       		bne.s	loc_8B48
0000A51A 3A00                       		move.w	d0,d5
0000A51C B240                       		cmp.w	d0,d1
0000A51E 6400                       		bhs.s	loc_8B30
0000A520 D241                       		add.w	d1,d1
0000A522 9041                       		sub.w	d1,d0
0000A524 3A00                       		move.w	d0,d5
0000A526 4445                       		neg.w	d5
0000A528                            
0000A528                            loc_8B30:
0000A528 3203                       		move.w	d3,d1
0000A52A B443                       		cmp.w	d3,d2
0000A52C 6400                       		bhs.s	loc_8B3C
0000A52E 9644                       		sub.w	d4,d3
0000A530 3203                       		move.w	d3,d1
0000A532 4441                       		neg.w	d1
0000A534                            
0000A534                            loc_8B3C:
0000A534 BA41                       		cmp.w	d1,d5
0000A536 6200                       		bhi.s	loc_8B44
0000A538 7801                       		moveq	#1,d4
0000A53A 4E75                       		rts	
0000A53C                            ; ===========================================================================
0000A53C                            
0000A53C                            loc_8B44:
0000A53C 78FF                       		moveq	#-1,d4
0000A53E 4E75                       		rts	
0000A540                            ; ===========================================================================
0000A540                            
0000A540                            loc_8B48:
0000A540 7800                       		moveq	#0,d4
0000A542 4E75                       		rts	
0000A544                            ; End of function Obj44_SolidWall2
0000A544                            
0000A544                            ; ===========================================================================
0000A544                            
0000A544                            		include	"_incObj\1E Ball Hog.asm"
0000A544                            ; ---------------------------------------------------------------------------
0000A544                            ; Object 1E - Ball Hog enemy (SBZ)
0000A544                            ; ---------------------------------------------------------------------------
0000A544                            
0000A544                            BallHog:
0000A544 7000                       		moveq	#0,d0
0000A546 1028 0024                  		move.b	obRoutine(a0),d0
0000A54A 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A54E 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A552                            ; ===========================================================================
0000A552 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A554 0000                       		dc.w Hog_Action-Hog_Index
0000A556                            
0000A556 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A556                            ; ===========================================================================
0000A556                            
0000A556                            Hog_Main:	; Routine 0
0000A556 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A55C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A562 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A56A 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A570 117C 0004 0001             		move.b	#4,obRender(a0)
0000A576 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A57C 117C 0005 0020             		move.b	#5,obColType(a0)
0000A582 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A588 6100 0000                  		bsr.w	ObjectFall
0000A58C 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A592 4A41                       		tst.w	d1
0000A594 6A00                       		bpl.s	@floornotfound
0000A596 D368 000C                  		add.w	d1,obY(a0)
0000A59A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A5A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5A4                            
0000A5A4                            	@floornotfound:
0000A5A4 4E75                       		rts	
0000A5A6                            ; ===========================================================================
0000A5A6                            
0000A5A6                            Hog_Action:	; Routine 2
0000A5A6 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A5AC 6100 0000                  		bsr.w	AnimateSprite
0000A5B0 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A5B6 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A5B8 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A5BC 6700                       		beq.s	@makeball	; if yes, branch
0000A5BE 6000                       		bra.s	@remember
0000A5C0                            ; ===========================================================================
0000A5C0                            
0000A5C0                            @setlaunchflag:
0000A5C0 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A5C4                            
0000A5C4                            @remember:
0000A5C4 6000 0000                  		bra.w	RememberState
0000A5C8                            ; ===========================================================================
0000A5C8                            
0000A5C8                            @makeball:
0000A5C8 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A5CE 6100 0000                  		bsr.w	FindFreeObj
0000A5D2 6600                       		bne.s	@fail
0000A5D4 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A5D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A5DE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A5E4 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A5EA 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A5F0 70FC                       		moveq	#-4,d0
0000A5F2 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A5F8 6700                       		beq.s	@noflip		; if not, branch
0000A5FA 4440                       		neg.w	d0
0000A5FC 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A600                            
0000A600                            	@noflip:
0000A600 D169 0008                  		add.w	d0,obX(a1)
0000A604 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A60A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A610                            
0000A610                            	@fail:
0000A610 60B2                       		bra.s	@remember
0000A610 60B2                       		bra.s	@remember
0000A612                            		include	"_incObj\20 Cannonball.asm"
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            
0000A612                            Cannonball:
0000A612 7000                       		moveq	#0,d0
0000A614 1028 0024                  		move.b	obRoutine(a0),d0
0000A618 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A61C 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A620                            ; ===========================================================================
0000A620 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A622 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A624                            
0000A624 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A624                            ; ===========================================================================
0000A624                            
0000A624                            Cbal_Main:	; Routine 0
0000A624 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A628 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A62E 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A636 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A63C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A642 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A648 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A64E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A654 7000                       		moveq	#0,d0
0000A656 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A65A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A65E 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A662 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A668                            
0000A668                            Cbal_Bounce:	; Routine 2
0000A668 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A66E 4A68 0012                  		tst.w	obVelY(a0)
0000A672 6B00                       		bmi.s	Cbal_ChkExplode
0000A674 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A67A 4A41                       		tst.w	d1		; has ball hit the floor?
0000A67C 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A67E                            
0000A67E D368 000C                  		add.w	d1,obY(a0)
0000A682 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A688 4A03                       		tst.b	d3
0000A68A 6700                       		beq.s	Cbal_ChkExplode
0000A68C 6B00                       		bmi.s	loc_8CA4
0000A68E 4A68 0010                  		tst.w	obVelX(a0)
0000A692 6A00                       		bpl.s	Cbal_ChkExplode
0000A694 4468 0010                  		neg.w	obVelX(a0)
0000A698 6000                       		bra.s	Cbal_ChkExplode
0000A69A                            ; ===========================================================================
0000A69A                            
0000A69A                            loc_8CA4:
0000A69A 4A68 0010                  		tst.w	obVelX(a0)
0000A69E 6B00                       		bmi.s	Cbal_ChkExplode
0000A6A0 4468 0010                  		neg.w	obVelX(a0)
0000A6A4                            
0000A6A4                            Cbal_ChkExplode:
0000A6A4 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A6A8 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A6AA                            
0000A6AA                            	Cbal_Explode:
0000A6AA 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A6AE 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A6B2 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A6B8 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A6BC                            ; ===========================================================================
0000A6BC                            
0000A6BC                            Cbal_Animate:
0000A6BC 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A6C0 6A00                       		bpl.s	Cbal_Display
0000A6C2 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A6C8 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A6CE                            
0000A6CE                            Cbal_Display:
0000A6CE 6100 0000                  		bsr.w	DisplaySprite
0000A6D2 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A6D6 0640 00E0                  		addi.w	#$E0,d0
0000A6DA B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A6DE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A6E2 4E75                       		rts	
0000A6E2 4E75                       		rts	
0000A6E4                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A6E4                            ; ---------------------------------------------------------------------------
0000A6E4                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A6E4                            ; ---------------------------------------------------------------------------
0000A6E4                            
0000A6E4                            MissileDissolve:
0000A6E4 7000                       		moveq	#0,d0
0000A6E6 1028 0024                  		move.b	obRoutine(a0),d0
0000A6EA 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A6EE 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A6F2                            ; ===========================================================================
0000A6F2 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A6F4 0000                       		dc.w MDis_Animate-MDis_Index
0000A6F6                            ; ===========================================================================
0000A6F6                            
0000A6F6                            MDis_Main:	; Routine 0
0000A6F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A6FA 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A702 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A708 117C 0004 0001             		move.b	#4,obRender(a0)
0000A70E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A714 117C 0000 0020             		move.b	#0,obColType(a0)
0000A71A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A720 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A726 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A736                            
0000A736                            MDis_Animate:	; Routine 2
0000A736 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A73A 6A00                       		bpl.s	@display
0000A73C 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A742 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A746 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A74C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A750                            
0000A750                            	@display:
0000A750 6000 0000                  		bra.w	DisplaySprite
0000A754                            ; ===========================================================================
0000A754                            
0000A754                            ; ---------------------------------------------------------------------------
0000A754                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A754                            ; ---------------------------------------------------------------------------
0000A754                            
0000A754                            ExplosionItem:
0000A754 7000                       		moveq	#0,d0
0000A756 1028 0024                  		move.b	obRoutine(a0),d0
0000A75A 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A75E 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A762                            ; ===========================================================================
0000A762 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A764 0000                       		dc.w ExItem_Main-ExItem_Index
0000A766 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A768                            ; ===========================================================================
0000A768                            
0000A768                            ExItem_Animal:	; Routine 0
0000A768 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A76C 6100 0000                  		bsr.w	FindFreeObj
0000A770 6600                       		bne.s	ExItem_Main
0000A772 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A776 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A77C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A782 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A788                            
0000A788                            ExItem_Main:	; Routine 2
0000A788 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A78C 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A794 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A79A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7A0 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A7A6 117C 0000 0020             		move.b	#0,obColType(a0)
0000A7AC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A7B2 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A7B8 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A7C8                            
0000A7C8                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A7C8 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A7CC 6A00                       		bpl.s	@display
0000A7CE 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A7D4 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A7D8 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A7DE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7E2                            
0000A7E2                            	@display:
0000A7E2 6000 0000                  		bra.w	DisplaySprite
0000A7E6                            ; ===========================================================================
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6                            
0000A7E6                            ExplosionBomb:
0000A7E6 7000                       		moveq	#0,d0
0000A7E8 1028 0024                  		move.b	obRoutine(a0),d0
0000A7EC 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A7F0 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A7F4                            ; ===========================================================================
0000A7F4 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A7F6 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A7F8                            ; ===========================================================================
0000A7F8                            
0000A7F8                            ExBom_Main:	; Routine 0
0000A7F8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7FC 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A804 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A80A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A810 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A816 117C 0000 0020             		move.b	#0,obColType(a0)
0000A81C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A822 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A828 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A838                            		include	"_anim\Ball Hog.asm"
0000A838                            ; ---------------------------------------------------------------------------
0000A838                            ; Animation script - doors (SBZ)
0000A838                            ; ---------------------------------------------------------------------------
0000A838 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A83A 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A852 00                         		even
0000A852 00                         		even
0000A852                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A852                            ; --------------------------------------------------------------------------------
0000A852                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A852                            ; --------------------------------------------------------------------------------
0000A852                            
0000A852                            SME_ZER01:	
0000A852 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A856 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A85A 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A85E 02                         SME_ZER01_C:	dc.b 2	
0000A85F EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A864 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A869 02                         SME_ZER01_17:	dc.b 2	
0000A86A EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A86F FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A874 02                         SME_ZER01_22:	dc.b 2	
0000A875 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A87A 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A87F 02                         SME_ZER01_2D:	dc.b 2	
0000A880 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A885 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A88A 01                         SME_ZER01_38:	dc.b 1	
0000A88B F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A890 01                         SME_ZER01_3E:	dc.b 1	
0000A891 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A896                            		even
0000A896                            		even
0000A896                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A896                            ; ---------------------------------------------------------------------------
0000A896                            ; Sprite mappings - buzz bomber missile vanishing
0000A896                            ; ---------------------------------------------------------------------------
0000A896                            Map_MisDissolve_internal:
0000A896 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A898 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A89A 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A89C 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A89E 01                         byte_8EAE:	dc.b 1
0000A89F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A8A4 01                         byte_8EB4:	dc.b 1
0000A8A5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A8AA 01                         byte_8EBA:	dc.b 1
0000A8AB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A8B0 01                         byte_8EC0:	dc.b 1
0000A8B1 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A8B6                            		even
0000A8B6                            		even
0000A8B6                            		include	"_maps\Explosions.asm"
0000A8B6                            ; ---------------------------------------------------------------------------
0000A8B6                            ; Sprite mappings - explosion from a badnik or monitor
0000A8B6                            ; ---------------------------------------------------------------------------
0000A8B6 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A8BA 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A8BE 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A8C0 01                         byte_8ED0:	dc.b 1
0000A8C1 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A8C6 01                         byte_8ED6:	dc.b 1
0000A8C7 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A8CC 01                         byte_8EDC:	dc.b 1
0000A8CD F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A8D2 04                         byte_8EE2:	dc.b 4
0000A8D3 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A8D8 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A8DD 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A8E2 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A8E7 04                         byte_8EF7:	dc.b 4
0000A8E8 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A8ED EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A8F2 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A8F7 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A8FC                            		even
0000A8FC                            ; ---------------------------------------------------------------------------
0000A8FC                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A8FC                            ; ---------------------------------------------------------------------------
0000A8FC FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A8FE 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A900 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A902 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A904 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A906 01                         byte_8F16:	dc.b 1
0000A907 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A90C 01                         byte_8F1C:	dc.b 1
0000A90D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A912                            		even
0000A912                            		even
0000A912                            
0000A912                            		include	"_incObj\28 Animals.asm"
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            ; Object 28 - animals
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            
0000A912                            Animals:
0000A912 7000                       		moveq	#0,d0
0000A914 1028 0024                  		move.b	obRoutine(a0),d0
0000A918 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A91C 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A920                            ; ===========================================================================
0000A920 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A924 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A928 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A92C 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A930 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A934 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A938 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A93C 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A940 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A944 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A948 0000                       		dc.w loc_92D6-Anml_Index
0000A94A                            
0000A94A 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A956                            
0000A956 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A95A 0000 0000                  		dc.l Map_Animal1
0000A95E FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A962 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A966 FE80 FD00                  		dc.w $FE80, $FD00
0000A96A 0000 0000                  		dc.l Map_Animal1
0000A96E FEC0 FE80                  		dc.w $FEC0, $FE80
0000A972 0000 0000                  		dc.l Map_Animal2
0000A976 FE40 FD00                  		dc.w $FE40, $FD00
0000A97A 0000 0000                  		dc.l Map_Animal3
0000A97E FD00 FC00                  		dc.w $FD00, $FC00
0000A982 0000 0000                  		dc.l Map_Animal2
0000A986 FD80 FC80                  		dc.w $FD80, $FC80
0000A98A 0000 0000                  		dc.l Map_Animal3
0000A98E                            
0000A98E FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A99E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A9AE FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A9BA                            
0000A9BA 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000A9CE 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000A9E2 0000 0000                  		dc.l Map_Animal3
0000A9E6                            
0000A9E6 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A9F8 0565 05B3                  		dc.w $565, $5B3
0000A9FC                            ; ===========================================================================
0000A9FC                            
0000A9FC                            Anml_Ending:	; Routine 0
0000A9FC 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AA00 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AA04 7000                       		moveq	#0,d0
0000AA06 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AA0A D040                       		add.w	d0,d0		; multiply d0 by 2
0000AA0C 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AA10 0440 0014                  		subi.w	#$14,d0
0000AA14 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AA1A D040                       		add.w	d0,d0
0000AA1C 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AA22 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AA26 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA2C 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AA32 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA38 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AA3E 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AA44 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA4A 08E8 0000 0001             		bset	#0,obRender(a0)
0000AA50 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AA56 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AA5C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AA62 6000 0000                  		bra.w	DisplaySprite
0000AA66                            ; ===========================================================================
0000AA66                            
0000AA66                            Anml_FromEnemy:
0000AA66 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA6A 6100 8D1C                  		bsr.w	RandomNumber
0000AA6E 0240 0001                  		andi.w	#1,d0
0000AA72 7200                       		moveq	#0,d1
0000AA74 1238 FE10                  		move.b	(v_zone).w,d1
0000AA78 D241                       		add.w	d1,d1
0000AA7A D240                       		add.w	d0,d1
0000AA7C 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AA80 1031 1000                  		move.b	(a1,d1.w),d0
0000AA84 1140 0030                  		move.b	d0,$30(a0)
0000AA88 E748                       		lsl.w	#3,d0
0000AA8A 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AA8E D2C0                       		adda.w	d0,a1
0000AA90 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AA94 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AA98 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AA9C 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AAA2 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AAA8 6700                       		beq.s	loc_90C0	; if yes, branch
0000AAAA 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AAB0                            
0000AAB0                            loc_90C0:
0000AAB0 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AAB6 117C 0004 0001             		move.b	#4,obRender(a0)
0000AABC 08E8 0000 0001             		bset	#0,obRender(a0)
0000AAC2 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AAC8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AACE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AAD4 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AADA 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AAE0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AAE4 6600                       		bne.s	loc_911C
0000AAE6 6100 0000                  		bsr.w	FindFreeObj
0000AAEA 6600                       		bne.s	Anml_Display
0000AAEC 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AAF0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AAF6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AAFC 3028 003E                  		move.w	$3E(a0),d0
0000AB00 E248                       		lsr.w	#1,d0
0000AB02 1340 001A                  		move.b	d0,obFrame(a1)
0000AB06                            
0000AB06                            Anml_Display:
0000AB06 6000 0000                  		bra.w	DisplaySprite
0000AB0A                            ; ===========================================================================
0000AB0A                            
0000AB0A                            loc_911C:
0000AB0A 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AB10 4268 0010                  		clr.w	obVelX(a0)
0000AB14 6000 0000                  		bra.w	DisplaySprite
0000AB18                            ; ===========================================================================
0000AB18                            
0000AB18                            loc_912A:
0000AB18 4A28 0001                  		tst.b	obRender(a0)
0000AB1C 6A00 0000                  		bpl.w	DeleteObject
0000AB20 6100 0000                  		bsr.w	ObjectFall
0000AB24 4A68 0012                  		tst.w	obVelY(a0)
0000AB28 6B00                       		bmi.s	loc_9180
0000AB2A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB30 4A41                       		tst.w	d1
0000AB32 6A00                       		bpl.s	loc_9180
0000AB34 D368 000C                  		add.w	d1,obY(a0)
0000AB38 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AB3E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB44 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AB4A 1028 0030                  		move.b	$30(a0),d0
0000AB4E D000                       		add.b	d0,d0
0000AB50 5800                       		addq.b	#4,d0
0000AB52 1140 0024                  		move.b	d0,obRoutine(a0)
0000AB56 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AB5A 6700                       		beq.s	loc_9180
0000AB5C 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000AB62 6700                       		beq.s	loc_9180
0000AB64 4468 0010                  		neg.w	obVelX(a0)
0000AB68 0868 0000 0001             		bchg	#0,obRender(a0)
0000AB6E                            
0000AB6E                            loc_9180:
0000AB6E 6000 0000                  		bra.w	DisplaySprite
0000AB72                            ; ===========================================================================
0000AB72                            
0000AB72                            loc_9184:
0000AB72 6100 0000                  		bsr.w	ObjectFall
0000AB76 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AB7C 4A68 0012                  		tst.w	obVelY(a0)
0000AB80 6B00                       		bmi.s	loc_91AE
0000AB82 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB88 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB8E 4A41                       		tst.w	d1
0000AB90 6A00                       		bpl.s	loc_91AE
0000AB92 D368 000C                  		add.w	d1,obY(a0)
0000AB96 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB9C                            
0000AB9C                            loc_91AE:
0000AB9C 4A28 0028                  		tst.b	obSubtype(a0)
0000ABA0 6600                       		bne.s	loc_9224
0000ABA2 4A28 0001                  		tst.b	obRender(a0)
0000ABA6 6A00 0000                  		bpl.w	DeleteObject
0000ABAA 6000 0000                  		bra.w	DisplaySprite
0000ABAE                            ; ===========================================================================
0000ABAE                            
0000ABAE                            loc_91C0:
0000ABAE 6100 0000                  		bsr.w	SpeedToPos
0000ABB2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ABB8 4A68 0012                  		tst.w	obVelY(a0)
0000ABBC 6B00                       		bmi.s	loc_91FC
0000ABBE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABC4 4A41                       		tst.w	d1
0000ABC6 6A00                       		bpl.s	loc_91FC
0000ABC8 D368 000C                  		add.w	d1,obY(a0)
0000ABCC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ABD2 4A28 0028                  		tst.b	obSubtype(a0)
0000ABD6 6700                       		beq.s	loc_91FC
0000ABD8 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000ABDE 6700                       		beq.s	loc_91FC
0000ABE0 4468 0010                  		neg.w	obVelX(a0)
0000ABE4 0868 0000 0001             		bchg	#0,obRender(a0)
0000ABEA                            
0000ABEA                            loc_91FC:
0000ABEA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ABEE 6A00                       		bpl.s	loc_9212
0000ABF0 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ABF6 5228 001A                  		addq.b	#1,obFrame(a0)
0000ABFA 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AC00                            
0000AC00                            loc_9212:
0000AC00 4A28 0028                  		tst.b	obSubtype(a0)
0000AC04 6600                       		bne.s	loc_9224
0000AC06 4A28 0001                  		tst.b	obRender(a0)
0000AC0A 6A00 0000                  		bpl.w	DeleteObject
0000AC0E 6000 0000                  		bra.w	DisplaySprite
0000AC12                            ; ===========================================================================
0000AC12                            
0000AC12                            loc_9224:
0000AC12 3028 0008                  		move.w	obX(a0),d0
0000AC16 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AC1A 6500                       		bcs.s	loc_923C
0000AC1C 0440 0180                  		subi.w	#$180,d0
0000AC20 6A00                       		bpl.s	loc_923C
0000AC22 4A28 0001                  		tst.b	obRender(a0)
0000AC26 6A00 0000                  		bpl.w	DeleteObject
0000AC2A                            
0000AC2A                            loc_923C:
0000AC2A 6000 0000                  		bra.w	DisplaySprite
0000AC2E                            ; ===========================================================================
0000AC2E                            
0000AC2E                            loc_9240:
0000AC2E 4A28 0001                  		tst.b	obRender(a0)
0000AC32 6A00 0000                  		bpl.w	DeleteObject
0000AC36 5368 0036                  		subq.w	#1,$36(a0)
0000AC3A 6600 0000                  		bne.w	loc_925C
0000AC3E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AC44 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AC4A                            
0000AC4A                            loc_925C:
0000AC4A 6000 0000                  		bra.w	DisplaySprite
0000AC4E                            ; ===========================================================================
0000AC4E                            
0000AC4E                            loc_9260:
0000AC4E 6100 0000                  		bsr.w	sub_9404
0000AC52 6400                       		bcc.s	loc_927C
0000AC54 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AC5A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC60 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AC66 6000 FF46                  		bra.w	loc_91C0
0000AC6A                            ; ===========================================================================
0000AC6A                            
0000AC6A                            loc_927C:
0000AC6A 6000 FFA6                  		bra.w	loc_9224
0000AC6E                            ; ===========================================================================
0000AC6E                            
0000AC6E                            loc_9280:
0000AC6E 6100 0000                  		bsr.w	sub_9404
0000AC72 6A00                       		bpl.s	loc_92B6
0000AC74 4268 0010                  		clr.w	obVelX(a0)
0000AC78 4268 0032                  		clr.w	$32(a0)
0000AC7C 6100 0000                  		bsr.w	SpeedToPos
0000AC80 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC86 6100 0000                  		bsr.w	loc_93C4
0000AC8A 6100 0000                  		bsr.w	loc_93EC
0000AC8E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AC92 6A00                       		bpl.s	loc_92B6
0000AC94 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AC9A 5228 001A                  		addq.b	#1,obFrame(a0)
0000AC9E 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACA4                            
0000ACA4                            loc_92B6:
0000ACA4 6000 FF6C                  		bra.w	loc_9224
0000ACA8                            ; ===========================================================================
0000ACA8                            
0000ACA8                            loc_92BA:
0000ACA8 6100 0000                  		bsr.w	sub_9404
0000ACAC 6A00                       		bpl.s	loc_9310
0000ACAE 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACB4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACBA 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000ACC0 6000 FEB0                  		bra.w	loc_9184
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            loc_92D6:
0000ACC4 6100 0000                  		bsr.w	ObjectFall
0000ACC8 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ACCE 4A68 0012                  		tst.w	obVelY(a0)
0000ACD2 6B00                       		bmi.s	loc_9310
0000ACD4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ACDA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ACE0 4A41                       		tst.w	d1
0000ACE2 6A00                       		bpl.s	loc_9310
0000ACE4 4628 0029                  		not.b	$29(a0)
0000ACE8 6600                       		bne.s	loc_9306
0000ACEA 4468 0010                  		neg.w	obVelX(a0)
0000ACEE 0868 0000 0001             		bchg	#0,obRender(a0)
0000ACF4                            
0000ACF4                            loc_9306:
0000ACF4 D368 000C                  		add.w	d1,obY(a0)
0000ACF8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACFE                            
0000ACFE                            loc_9310:
0000ACFE 6000 FF12                  		bra.w	loc_9224
0000AD02                            ; ===========================================================================
0000AD02                            
0000AD02                            loc_9314:
0000AD02 6100 0000                  		bsr.w	sub_9404
0000AD06 6A00                       		bpl.s	loc_932E
0000AD08 4268 0010                  		clr.w	obVelX(a0)
0000AD0C 4268 0032                  		clr.w	$32(a0)
0000AD10 6100 0000                  		bsr.w	ObjectFall
0000AD14 6100 0000                  		bsr.w	loc_93C4
0000AD18 6100 0000                  		bsr.w	loc_93EC
0000AD1C                            
0000AD1C                            loc_932E:
0000AD1C 6000 FEF4                  		bra.w	loc_9224
0000AD20                            ; ===========================================================================
0000AD20                            
0000AD20                            loc_9332:
0000AD20 6100 0000                  		bsr.w	sub_9404
0000AD24 6A00                       		bpl.s	loc_936C
0000AD26 6100 0000                  		bsr.w	ObjectFall
0000AD2A 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD30 4A68 0012                  		tst.w	obVelY(a0)
0000AD34 6B00                       		bmi.s	loc_936C
0000AD36 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD3C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD42 4A41                       		tst.w	d1
0000AD44 6A00                       		bpl.s	loc_936C
0000AD46 4468 0010                  		neg.w	obVelX(a0)
0000AD4A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD50 D368 000C                  		add.w	d1,obY(a0)
0000AD54 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD5A                            
0000AD5A                            loc_936C:
0000AD5A 6000 FEB6                  		bra.w	loc_9224
0000AD5E                            ; ===========================================================================
0000AD5E                            
0000AD5E                            loc_9370:
0000AD5E 6100 0000                  		bsr.w	sub_9404
0000AD62 6A00                       		bpl.s	loc_93C0
0000AD64 6100 0000                  		bsr.w	SpeedToPos
0000AD68 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AD6E 4A68 0012                  		tst.w	obVelY(a0)
0000AD72 6B00                       		bmi.s	loc_93AA
0000AD74 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD7A 4A41                       		tst.w	d1
0000AD7C 6A00                       		bpl.s	loc_93AA
0000AD7E 4628 0029                  		not.b	$29(a0)
0000AD82 6600                       		bne.s	loc_93A0
0000AD84 4468 0010                  		neg.w	obVelX(a0)
0000AD88 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD8E                            
0000AD8E                            loc_93A0:
0000AD8E D368 000C                  		add.w	d1,obY(a0)
0000AD92 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD98                            
0000AD98                            loc_93AA:
0000AD98 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AD9C 6A00                       		bpl.s	loc_93C0
0000AD9E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ADA4 5228 001A                  		addq.b	#1,obFrame(a0)
0000ADA8 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ADAE                            
0000ADAE                            loc_93C0:
0000ADAE 6000 FE62                  		bra.w	loc_9224
0000ADB2                            ; ===========================================================================
0000ADB2                            
0000ADB2                            loc_93C4:
0000ADB2 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADB8 4A68 0012                  		tst.w	obVelY(a0)
0000ADBC 6B00                       		bmi.s	locret_93EA
0000ADBE 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ADC4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADCA 4A41                       		tst.w	d1
0000ADCC 6A00                       		bpl.s	locret_93EA
0000ADCE D368 000C                  		add.w	d1,obY(a0)
0000ADD2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADD8                            
0000ADD8                            locret_93EA:
0000ADD8 4E75                       		rts	
0000ADDA                            ; ===========================================================================
0000ADDA                            
0000ADDA                            loc_93EC:
0000ADDA 08E8 0000 0001             		bset	#0,obRender(a0)
0000ADE0 3028 0008                  		move.w	obX(a0),d0
0000ADE4 9078 D008                  		sub.w	(v_player+obX).w,d0
0000ADE8 6400                       		bcc.s	locret_9402
0000ADEA 08A8 0000 0001             		bclr	#0,obRender(a0)
0000ADF0                            
0000ADF0                            locret_9402:
0000ADF0 4E75                       		rts	
0000ADF2                            
0000ADF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADF2                            
0000ADF2                            
0000ADF2                            sub_9404:
0000ADF2 3038 D008                  		move.w	(v_player+obX).w,d0
0000ADF6 9068 0008                  		sub.w	obX(a0),d0
0000ADFA 0440 00B8                  		subi.w	#$B8,d0
0000ADFE 4E75                       		rts	
0000AE00                            ; End of function sub_9404
0000AE00                            ; End of function sub_9404
0000AE00                            		include	"_incObj\29 Points.asm"
0000AE00                            ; ---------------------------------------------------------------------------
0000AE00                            ; Object 29 - points that appear when you destroy something
0000AE00                            ; ---------------------------------------------------------------------------
0000AE00                            
0000AE00                            Points:
0000AE00 7000                       		moveq	#0,d0
0000AE02 1028 0024                  		move.b	obRoutine(a0),d0
0000AE06 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AE0A 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AE0E 6000 0000                  		bra.w	DisplaySprite
0000AE12                            ; ===========================================================================
0000AE12 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AE14 0000                       		dc.w Poi_Slower-Poi_Index
0000AE16                            ; ===========================================================================
0000AE16                            
0000AE16                            Poi_Main:	; Routine 0
0000AE16 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AE1A 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AE22 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000AE28 117C 0004 0001             		move.b	#4,obRender(a0)
0000AE2E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AE34 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE3A 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AE40                            
0000AE40                            Poi_Slower:	; Routine 2
0000AE40 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AE44 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AE48 6100 0000                  		bsr.w	SpeedToPos
0000AE4C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AE52 4E75                       		rts	
0000AE52 4E75                       		rts	
0000AE54                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AE54                            ; ---------------------------------------------------------------------------
0000AE54                            ; Sprite mappings - animals
0000AE54                            ; ---------------------------------------------------------------------------
0000AE54                            Map_Animal1_internal:
0000AE54 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AE56 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AE58 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AE5A 01                         byte_946C:	dc.b 1
0000AE5B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE60 01                         byte_9472:	dc.b 1
0000AE61 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AE66 01                         byte_9478:	dc.b 1
0000AE67 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AE6C                            		even
0000AE6C                            		even
0000AE6C                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AE6C                            ; ---------------------------------------------------------------------------
0000AE6C                            ; Sprite mappings - animals
0000AE6C                            ; ---------------------------------------------------------------------------
0000AE6C                            Map_Animal2_internal:
0000AE6C 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AE6E 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AE70 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AE72 01                         byte_9484:	dc.b 1
0000AE73 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE78 01                         byte_948A:	dc.b 1
0000AE79 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AE7E 01                         byte_9490:	dc.b 1
0000AE7F FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AE84                            		even
0000AE84                            		even
0000AE84                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            ; Sprite mappings - animals
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            Map_Animal3_internal:
0000AE84 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AE86 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AE88 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AE8A 01                         byte_949C:	dc.b 1
0000AE8B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE90 01                         byte_94A2:	dc.b 1
0000AE91 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AE96 01                         byte_94A8:	dc.b 1
0000AE97 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AE9C                            		even
0000AE9C                            		even
0000AE9C                            Map_Poi:	include	"_maps\Points.asm"
0000AE9C                            ; --------------------------------------------------------------------------------
0000AE9C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AE9C                            ; --------------------------------------------------------------------------------
0000AE9C                            
0000AE9C                            SME_qLvsg:	
0000AE9C 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000AEA0 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000AEA4 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000AEA8 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000AEAA 01                         SME_qLvsg_E:	dc.b 1	
0000AEAB FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000AEB0 01                         SME_qLvsg_14:	dc.b 1	
0000AEB1 FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000AEB6 01                         SME_qLvsg_1A:	dc.b 1	
0000AEB7 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000AEBC 01                         SME_qLvsg_20:	dc.b 1	
0000AEBD FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000AEC2 01                         SME_qLvsg_26:	dc.b 1	
0000AEC3 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000AEC8 02                         SME_qLvsg_2C:	dc.b 2	
0000AEC9 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AECE FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000AED3 02                         SME_qLvsg_37:	dc.b 2	
0000AED4 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AED9 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AEDE                            		even
0000AEDE                            		even
0000AEDE                            
0000AEDE                            		include	"_incObj\1F Crabmeat.asm"
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            
0000AEDE                            Crabmeat:
0000AEDE 7000                       		moveq	#0,d0
0000AEE0 1028 0024                  		move.b	obRoutine(a0),d0
0000AEE4 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AEE8 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AEEC                            ; ===========================================================================
0000AEEC                            Crab_Index:
0000AEEC 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AEEE 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AEF0 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AEF2 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AEF4 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AEF6                            
0000AEF6 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AEF6 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AEF6 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AEF6 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AEF6 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AEF6                            
0000AEF6 =00000030                  crab_timedelay:	equ $30
0000AEF6 =00000032                  crab_mode:	equ $32
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            Crab_Main:	; Routine 0
0000AEF6 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AEFC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AF02 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AF0A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AF10 117C 0004 0001             		move.b	#4,obRender(a0)
0000AF16 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF1C 117C 0006 0020             		move.b	#6,obColType(a0)
0000AF22 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AF28 6100 0000                  		bsr.w	ObjectFall
0000AF2C 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AF32 4A41                       		tst.w	d1
0000AF34 6A00                       		bpl.s	@floornotfound
0000AF36 D368 000C                  		add.w	d1,obY(a0)
0000AF3A 1143 0026                  		move.b	d3,obAngle(a0)
0000AF3E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AF44 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AF48                            
0000AF48                            	@floornotfound:
0000AF48 4E75                       		rts	
0000AF4A                            ; ===========================================================================
0000AF4A                            
0000AF4A                            Crab_Action:	; Routine 2
0000AF4A 7000                       		moveq	#0,d0
0000AF4C 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AF50 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AF54 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AF58 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AF5E 6100 0000                  		bsr.w	AnimateSprite
0000AF62 6000 0000                  		bra.w	RememberState
0000AF66                            ; ===========================================================================
0000AF66 0000                       @index:		dc.w @waittofire-@index
0000AF68 0000                       		dc.w @walkonfloor-@index
0000AF6A                            ; ===========================================================================
0000AF6A                            
0000AF6A                            @waittofire:
0000AF6A 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AF6E 6A00                       		bpl.s	@dontmove
0000AF70 4A28 0001                  		tst.b	obRender(a0)
0000AF74 6A00                       		bpl.s	@movecrab
0000AF76 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AF7C 6600                       		bne.s	@fire
0000AF7E                            
0000AF7E                            	@movecrab:
0000AF7E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AF82 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AF88 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AF8E 6100 0000                  		bsr.w	Crab_SetAni
0000AF92 5600                       		addq.b	#3,d0
0000AF94 1140 001C                  		move.b	d0,obAnim(a0)
0000AF98 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AF9E 6600                       		bne.s	@noflip
0000AFA0 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000AFA4                            
0000AFA4                            	@dontmove:
0000AFA4                            	@noflip:
0000AFA4 4E75                       		rts	
0000AFA6                            ; ===========================================================================
0000AFA6                            
0000AFA6                            @fire:
0000AFA6 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AFAC 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000AFB2 6100 0000                  		bsr.w	FindFreeObj
0000AFB6 6600                       		bne.s	@failleft
0000AFB8 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000AFBC 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000AFC2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AFC8 0469 0010 0008             		subi.w	#$10,obX(a1)
0000AFCE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AFD4 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000AFDA                            
0000AFDA                            	@failleft:
0000AFDA 6100 0000                  		bsr.w	FindFreeObj
0000AFDE 6600                       		bne.s	@failright
0000AFE0 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000AFE4 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000AFEA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AFF0 0669 0010 0008             		addi.w	#$10,obX(a1)
0000AFF6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AFFC 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B002                            
0000B002                            	@failright:
0000B002 4E75                       		rts	
0000B004                            ; ===========================================================================
0000B004                            
0000B004                            @walkonfloor:
0000B004 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B008 6B00                       		bmi.s	loc_966E
0000B00A 6100 0000                  		bsr.w	SpeedToPos
0000B00E 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B014 6600                       		bne.s	loc_9654
0000B016 3628 0008                  		move.w	obX(a0),d3
0000B01A 0643 0010                  		addi.w	#$10,d3
0000B01E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B024 6700                       		beq.s	loc_9640
0000B026 0443 0020                  		subi.w	#$20,d3
0000B02A                            
0000B02A                            loc_9640:
0000B02A 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B030 0C41 FFF8                  		cmpi.w	#-8,d1
0000B034 6D00                       		blt.s	loc_966E
0000B036 0C41 000C                  		cmpi.w	#$C,d1
0000B03A 6C00                       		bge.s	loc_966E
0000B03C 4E75                       		rts	
0000B03E                            ; ===========================================================================
0000B03E                            
0000B03E                            loc_9654:
0000B03E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B044 D368 000C                  		add.w	d1,obY(a0)
0000B048 1143 0026                  		move.b	d3,obAngle(a0)
0000B04C 6100 0000                  		bsr.w	Crab_SetAni
0000B050 5600                       		addq.b	#3,d0
0000B052 1140 001C                  		move.b	d0,obAnim(a0)
0000B056 4E75                       		rts	
0000B058                            ; ===========================================================================
0000B058                            
0000B058                            loc_966E:
0000B058 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B05C 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B062 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B068 6100 0000                  		bsr.w	Crab_SetAni
0000B06C 1140 001C                  		move.b	d0,obAnim(a0)
0000B070 4E75                       		rts	
0000B072                            ; ---------------------------------------------------------------------------
0000B072                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B072                            ; ---------------------------------------------------------------------------
0000B072                            
0000B072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B072                            
0000B072                            
0000B072                            Crab_SetAni:
0000B072 7000                       		moveq	#0,d0
0000B074 1628 0026                  		move.b	obAngle(a0),d3
0000B078 6B00                       		bmi.s	loc_96A4
0000B07A 0C03 0006                  		cmpi.b	#6,d3
0000B07E 6500                       		bcs.s	locret_96A2
0000B080 7001                       		moveq	#1,d0
0000B082 0828 0000 0022             		btst	#0,obStatus(a0)
0000B088 6600                       		bne.s	locret_96A2
0000B08A 7002                       		moveq	#2,d0
0000B08C                            
0000B08C                            locret_96A2:
0000B08C 4E75                       		rts	
0000B08E                            ; ===========================================================================
0000B08E                            
0000B08E                            loc_96A4:
0000B08E 0C03 00FA                  		cmpi.b	#-6,d3
0000B092 6200                       		bhi.s	locret_96B6
0000B094 7002                       		moveq	#2,d0
0000B096 0828 0000 0022             		btst	#0,obStatus(a0)
0000B09C 6600                       		bne.s	locret_96B6
0000B09E 7001                       		moveq	#1,d0
0000B0A0                            
0000B0A0                            locret_96B6:
0000B0A0 4E75                       		rts	
0000B0A2                            ; End of function Crab_SetAni
0000B0A2                            
0000B0A2                            ; ===========================================================================
0000B0A2                            
0000B0A2                            Crab_Delete:	; Routine 4
0000B0A2 6100 0000                  		bsr.w	DeleteObject
0000B0A6 4E75                       		rts	
0000B0A8                            ; ===========================================================================
0000B0A8                            ; ---------------------------------------------------------------------------
0000B0A8                            ; Sub-object - missile that the	Crabmeat throws
0000B0A8                            ; ---------------------------------------------------------------------------
0000B0A8                            
0000B0A8                            Crab_BallMain:	; Routine 6
0000B0A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B0AC 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B0B4 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B0BA 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0C0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B0C6 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B0CC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B0D2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B0D8 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B0DE                            
0000B0DE                            Crab_BallMove:	; Routine 8
0000B0DE 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B0E4 6100 0000                  		bsr.w	AnimateSprite
0000B0E8 6100 0000                  		bsr.w	ObjectFall
0000B0EC 6100 0000                  		bsr.w	DisplaySprite
0000B0F0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B0F4 0640 00E0                  		addi.w	#$E0,d0
0000B0F8 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B0FC 6500                       		bcs.s	@delete		; if yes, branch
0000B0FE 4E75                       		rts	
0000B100                            
0000B100                            	@delete:
0000B100 6000 0000                  		bra.w	DeleteObject
0000B100 6000 0000                  		bra.w	DeleteObject
0000B104                            		include	"_anim\Crabmeat.asm"
0000B104                            ; ---------------------------------------------------------------------------
0000B104                            ; Animation script - Crabmeat enemy
0000B104                            ; ---------------------------------------------------------------------------
0000B104 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B10A 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B110 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B114 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B118 00                         		even
0000B118 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B11C 00                         		even
0000B11C 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B120 00                         		even
0000B120 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B126 00                         		even
0000B126 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B12C 00                         		even
0000B12C 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B132 00                         		even
0000B132 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B136 00                         		even
0000B136 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B13A                            		even
0000B13A                            		even
0000B13A                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B13A                            ; ---------------------------------------------------------------------------
0000B13A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B13A                            ; ---------------------------------------------------------------------------
0000B13A                            Map_Crab_internal:
0000B13A 0000                       		dc.w @stand-Map_Crab_internal
0000B13C 0000                       		dc.w @walk-Map_Crab_internal
0000B13E 0000                       		dc.w @slope1-Map_Crab_internal
0000B140 0000                       		dc.w @slope2-Map_Crab_internal
0000B142 0000                       		dc.w @firing-Map_Crab_internal
0000B144 0000                       		dc.w @ball1-Map_Crab_internal
0000B146 0000                       		dc.w @ball2-Map_Crab_internal
0000B148 04                         @stand:		dc.b 4
0000B149 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B14E F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B153 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B158 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B15D 04                         @walk:		dc.b 4
0000B15E F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B163 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B168 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B16D 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B172 04                         @slope1:	dc.b 4
0000B173 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B178 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B17D FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B182 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B187 04                         @slope2:	dc.b 4
0000B188 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B18D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B192 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B197 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B19C 06                         @firing:	dc.b 6
0000B19D F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B1A2 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B1A7 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B1AC F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B1B1 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B1B6 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B1BB 01                         @ball1:		dc.b 1
0000B1BC F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B1C1 01                         @ball2:		dc.b 1
0000B1C2 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B1C8 00                         		even
0000B1C8 00                         		even
0000B1C8                            		include	"_incObj\06 Mozzietron.asm"
0000B1C8                            ; ===========================================================================
0000B1C8                            ; ---------------------------------------------------------------------------
0000B1C8                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B1C8                            ; ---------------------------------------------------------------------------
0000B1C8                            
0000B1C8                            Mozzietron:					; XREF: Obj_Index
0000B1C8 7000                       		moveq	#0,d0
0000B1CA 1028 0024                  		move.b	$24(a0),d0
0000B1CE 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B1D2 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B1D6                            ; ===========================================================================
0000B1D6 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B1D8 0000                       		dc.w MozAction-MozIndex
0000B1DA 0000                       		dc.w MozDelete-MozIndex
0000B1DC                            ; ===========================================================================
0000B1DC                            
0000B1DC                            MozMain:				; XREF: MozIndex
0000B1DC 5428 0024                  		addq.b	#2,$24(a0)
0000B1E0 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B1E8 317C 0444 0002             		move.w	#$444,2(a0)
0000B1EE 117C 0004 0001             		move.b	#4,1(a0)
0000B1F4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B1FA 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B200 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B206                            MozAction:				; XREF: MozIndex
0000B206 7000                       		moveq	#0,d0
0000B208 1028 0025                  		move.b	$25(a0),d0
0000B20C 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B210 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B214 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B21A 6100 0000                  		bsr.w	AnimateSprite
0000B21E 6000 0000                  		bra.w	RememberState
0000B222                            ; ===========================================================================
0000B222 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B224 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B226 0000                       		dc.w MozPinned-MozIndex2
0000B228                            ; ===========================================================================
0000B228                            
0000B228                            MozMove:				; XREF: MozIndex2
0000B228 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B22C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B22E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B234 6600                       		bne.s	MozFire	; if yes, branch
0000B236 5428 0025                  		addq.b	#2,$25(a0)
0000B23A 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B240 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B246 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B24C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B252 6600                       		bne.s	locret_986C	; if not, branch
0000B254 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B258                            
0000B258                            locret_986C:
0000B258 4E75                       		rts	
0000B25A                            ; ===========================================================================
0000B25A                            
0000B25A                            MozFire:				; XREF: MozMove
0000B25A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B260 6100 0000                  		bsr.w	ObjectFall
0000B264 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B26A 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B26C 6A00                       		bpl.s   @return ; if yes, branch 
0000B26E 303C 00B6                  		move.w    #$B6,d0
0000B272 4EB9 0000 0FCC             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B278 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B27E D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B282 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B286 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B28A                            		@return:
0000B28A 4E75                       	    		rts
0000B28C                            		
0000B28C                            
0000B28C                            ; ===========================================================================
0000B28C                            
0000B28C                            MozPinned:
0000B28C 4E75                               rts
0000B28E                                    
0000B28E                            ; ===========================================================================
0000B28E                            
0000B28E                            MozChkDel:				; XREF: Obj55_DropFly
0000B28E 4A28 0001                  		tst.b	1(a0)
0000B292 6A00 0000                  		bpl.w	DeleteObject
0000B296 4E75                       		rts	
0000B298                            ; ===========================================================================
0000B298                            
0000B298                            MozChkNrSonic:			; XREF: MozIndex2
0000B298                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B298 6B00                       		bmi.s	MozChgDir
0000B29A 6100 0000                  		bsr.w	SpeedToPos
0000B29E 4A28 0034                  		tst.b	$34(a0)
0000B2A2 6600                       		bne.s	locret_992A
0000B2A4 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2A8 9068 0008                  		sub.w	8(a0),d0
0000B2AC 6A00                       		bpl.s	MozSetNrSonic
0000B2AE 4440                       		neg.w	d0
0000B2B0                            
0000B2B0                            MozSetNrSonic:
0000B2B0 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B2B4 6400                       		bcc.s	locret_992A	; if not, branch
0000B2B6 4A28 0001                  		tst.b	1(a0)
0000B2BA 6A00                       		bpl.s	locret_992A
0000B2BC 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B2C2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B2C8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B2CE 6000                       		bra.s	MozStop
0000B2D0                            ; ===========================================================================
0000B2D0                            
0000B2D0                            MozChgDir:				; XREF: MozChkNrSonic
0000B2D0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B2D6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B2DC 317C 003B 0032             		move.w	#59,$32(a0)
0000B2E2                            
0000B2E2                            MozStop:				; XREF: MozSetNrSonic
0000B2E2 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B2E6 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B2EC 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B2F2                            
0000B2F2                            locret_992A:
0000B2F2 4E75                       		rts	
0000B2F4                            ; ===========================================================================
0000B2F4                            
0000B2F4                            MozDelete:				; XREF: MozIndex
0000B2F4 6100 0000                  		bsr.w	DeleteObject
0000B2F8 4E75                       		rts	
0000B2F8 4E75                       		rts	
0000B2FA                            		include	"_incObj\22 Buzz Bomber.asm"
0000B2FA                            ; ===========================================================================
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            
0000B2FA                            BuzzBomber:
0000B2FA 7000                       		moveq	#0,d0
0000B2FC 1028 0024                  		move.b	obRoutine(a0),d0
0000B300 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B304 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B308                            ; ===========================================================================
0000B308 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B30A 0000                       		dc.w Buzz_Action-Buzz_Index
0000B30C 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B30E                            
0000B30E =00000032                  buzz_timedelay:	equ $32
0000B30E =00000034                  buzz_buzzstatus:	equ $34
0000B30E =0000003C                  buzz_parent:	equ $3C
0000B30E                            ; ===========================================================================
0000B30E                            
0000B30E                            Buzz_Main:	; Routine 0
0000B30E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B312 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B31A 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B320 117C 0004 0001             		move.b	#4,obRender(a0)
0000B326 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B32C 117C 0008 0020             		move.b	#8,obColType(a0)
0000B332 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B338                            
0000B338                            Buzz_Action:	; Routine 2
0000B338 7000                       		moveq	#0,d0
0000B33A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B33E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B342 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B346 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B34C 6100 0000                  		bsr.w	AnimateSprite
0000B350 6000 0000                  		bra.w	RememberState
0000B354                            ; ===========================================================================
0000B354 0000                       @index:		dc.w @move-@index
0000B356 0000                       		dc.w @chknearsonic-@index
0000B358                            ; ===========================================================================
0000B358                            
0000B358                            @move:
0000B358 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B35C 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B35E 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B364 6600                       		bne.s	@fire		; if yes, branch
0000B366 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B36A 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B370 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B376 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B37C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B382 6600                       		bne.s	@noflip		; if not, branch
0000B384 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B388                            
0000B388                            	@noflip:
0000B388 4E75                       		rts	
0000B38A                            ; ===========================================================================
0000B38A                            
0000B38A                            	@fire:
0000B38A 6100 0000                  		bsr.w	FindFreeObj
0000B38E 6600                       		bne.s	@fail
0000B390 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B394 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B39A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B3A0 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B3A6 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B3AC 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B3B2 303C 0018                  		move.w	#$18,d0
0000B3B6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B3BC 6600                       		bne.s	@noflip2	; if not, branch
0000B3BE 4440                       		neg.w	d0
0000B3C0 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B3C4                            
0000B3C4                            	@noflip2:
0000B3C4 D169 0008                  		add.w	d0,obX(a1)
0000B3C8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B3CE 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B3D4 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B3D8 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B3DE 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B3E4 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B3EA                            
0000B3EA                            	@fail:
0000B3EA 4E75                       		rts	
0000B3EC                            ; ===========================================================================
0000B3EC                            
0000B3EC                            @chknearsonic:
0000B3EC 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B3F0 6B00                       		bmi.s	@chgdirection
0000B3F2 6100 0000                  		bsr.w	SpeedToPos
0000B3F6 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B3FA 6600                       		bne.s	@keepgoing
0000B3FC 3038 D008                  		move.w	(v_player+obX).w,d0
0000B400 9068 0008                  		sub.w	obX(a0),d0
0000B404 6A00                       		bpl.s	@isleft
0000B406 4440                       		neg.w	d0
0000B408                            
0000B408                            	@isleft:
0000B408 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B40C 6400                       		bcc.s	@keepgoing	; if not, branch
0000B40E 4A28 0001                  		tst.b	obRender(a0)
0000B412 6A00                       		bpl.s	@keepgoing
0000B414 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B41A 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B420 6000                       		bra.s	@stop
0000B422                            ; ===========================================================================
0000B422                            
0000B422                            	@chgdirection:
0000B422 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B428 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B42E 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B434                            
0000B434                            	@stop:
0000B434 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B438 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B43E 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B444                            
0000B444                            @keepgoing:
0000B444 4E75                       		rts	
0000B446                            ; ===========================================================================
0000B446                            
0000B446                            Buzz_Delete:	; Routine 4
0000B446 6100 0000                  		bsr.w	DeleteObject
0000B44A 4E75                       		rts	
0000B44A 4E75                       		rts	
0000B44C                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B44C                            ; ---------------------------------------------------------------------------
0000B44C                            ; Object 23 - missile that Buzz	Bomber throws
0000B44C                            ; ---------------------------------------------------------------------------
0000B44C                            
0000B44C                            Missile:
0000B44C 7000                       		moveq	#0,d0
0000B44E 1028 0024                  		move.b	obRoutine(a0),d0
0000B452 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B456 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B45A                            ; ===========================================================================
0000B45A 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B45C 0000                       		dc.w Msl_Animate-Msl_Index
0000B45E 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B460 0000                       		dc.w Msl_Delete-Msl_Index
0000B462 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B464                            
0000B464 =0000003C                  msl_parent:	equ $3C
0000B464                            ; ===========================================================================
0000B464                            
0000B464                            Msl_Main:	; Routine 0
0000B464 5368 0032                  		subq.w	#1,$32(a0)
0000B468 6A00                       		bpl.s	Msl_ChkCancel
0000B46A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B46E 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B476 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B47C 117C 0004 0001             		move.b	#4,obRender(a0)
0000B482 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B488 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B48E 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B494 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B498 6700                       		beq.s	Msl_Animate	; if not, branch
0000B49A                            
0000B49A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B4A0 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B4A6 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B4AC 6000                       		bra.s	Msl_Animate2
0000B4AE                            ; ===========================================================================
0000B4AE                            
0000B4AE                            Msl_Animate:	; Routine 2
0000B4AE 6100                       		bsr.s	Msl_ChkCancel
0000B4B0 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B4B6 6100 0000                  		bsr.w	AnimateSprite
0000B4BA 6000 0000                  		bra.w	DisplaySprite
0000B4BE                            
0000B4BE                            ; ---------------------------------------------------------------------------
0000B4BE                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B4BE                            ; destroyed, and if it has, then cancel	the missile
0000B4BE                            ; ---------------------------------------------------------------------------
0000B4BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4BE                            
0000B4BE                            
0000B4BE                            Msl_ChkCancel:
0000B4BE 2268 003C                  		movea.l	msl_parent(a0),a1
0000B4C2 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B4C6 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B4C8 4E75                       		rts	
0000B4CA                            ; End of function Msl_ChkCancel
0000B4CA                            
0000B4CA                            ; ===========================================================================
0000B4CA                            
0000B4CA                            Msl_FromBuzz:	; Routine 4
0000B4CA 0828 0007 0022             		btst	#7,obStatus(a0)
0000B4D0 6600                       		bne.s	@explode
0000B4D2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B4D8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B4DE 6100 0000                  		bsr.w	SpeedToPos
0000B4E2 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B4E8 6100 0000                  		bsr.w	AnimateSprite
0000B4EC 6100 0000                  		bsr.w	DisplaySprite
0000B4F0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B4F4 0640 00E0                  		addi.w	#$E0,d0
0000B4F8 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B4FC 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B4FE 4E75                       		rts	
0000B500                            ; ===========================================================================
0000B500                            
0000B500                            	@explode:
0000B500 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B504 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B50A 6000 F1D8                  		bra.w	MissileDissolve
0000B50E                            ; ===========================================================================
0000B50E                            
0000B50E                            Msl_Delete:	; Routine 6
0000B50E 6100 0000                  		bsr.w	DeleteObject
0000B512 4E75                       		rts	
0000B514                            ; ===========================================================================
0000B514                            
0000B514                            Msl_FromNewt:	; Routine 8
0000B514 4A28 0001                  		tst.b	obRender(a0)
0000B518 6AF4                       		bpl.s	Msl_Delete
0000B51A 6100 0000                  		bsr.w	SpeedToPos
0000B51E                            
0000B51E                            Msl_Animate2:
0000B51E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B524 6100 0000                  		bsr.w	AnimateSprite
0000B528 6100 0000                  		bsr.w	DisplaySprite
0000B52C 4E75                       		rts	
0000B52C 4E75                       		rts	
0000B52E                            		include	"_anim\Mozzietron.asm"
0000B52E                            ; ---------------------------------------------------------------------------
0000B52E                            ; Animation script - Buzz Bomber enemy
0000B52E                            ; ---------------------------------------------------------------------------
0000B52E 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B530 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B532 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B534 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B538 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B53C 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B544 00                         		even
0000B544 00                         		even
0000B544                            		include	"_anim\Buzz Bomber.asm"
0000B544                            ; ---------------------------------------------------------------------------
0000B544                            ; Animation script - Buzz Bomber enemy
0000B544                            ; ---------------------------------------------------------------------------
0000B544 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B546 0000                       		dc.w @fly2-Ani_Buzz
0000B548 0000                       		dc.w @fires-Ani_Buzz
0000B54A 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B54E 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B552 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B556                            		even
0000B556                            		even
0000B556                            		include	"_anim\Buzz Bomber Missile.asm"
0000B556                            ; ---------------------------------------------------------------------------
0000B556                            ; Animation script - missile that Buzz Bomber throws
0000B556                            ; ---------------------------------------------------------------------------
0000B556 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B558 0000                       		dc.w @missile-Ani_Missile
0000B55A 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B55E 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B562                            		even
0000B562                            		even
0000B562                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B562                            ; --------------------------------------------------------------------------------
0000B562                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B562                            ; --------------------------------------------------------------------------------
0000B562                            
0000B562                            SME_qvHIs:	
0000B562 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B566 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B56A 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B56E 02                         SME_qvHIs_C:	dc.b 2	
0000B56F FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B574 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B579 01                         SME_qvHIs_17:	dc.b 1	
0000B57A F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B57F 02                         SME_qvHIs_1D:	dc.b 2	
0000B580 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B585 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B58A 03                         SME_qvHIs_28:	dc.b 3	
0000B58B DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B590 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B595 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B59A 04                         SME_qvHIs_38:	dc.b 4	
0000B59B E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B5A0 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B5A5 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B5AA F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B5AF 04                         SME_qvHIs_4D:	dc.b 4	
0000B5B0 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B5B5 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B5BA F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B5BF F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B5C4                            		even
0000B5C4                            		even
0000B5C4                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B5C4                            ; --------------------------------------------------------------------------------
0000B5C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B5C4                            ; --------------------------------------------------------------------------------
0000B5C4                            
0000B5C4                            SME_yccqJ:	
0000B5C4 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B5C8 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B5CC 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B5D0 06                         SME_yccqJ_C:	dc.b 6	
0000B5D1 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B5D6 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B5DB 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B5E0 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B5E5 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B5EA EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B5EF 06                         SME_yccqJ_2B:	dc.b 6	
0000B5F0 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B5F5 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B5FA 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B5FF 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B604 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B609 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B60E 06                         SME_yccqJ_4A:	dc.b 6	
0000B60F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B614 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B619 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B61E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B623 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B628 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B62D 06                         SME_yccqJ_69:	dc.b 6	
0000B62E F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B633 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B638 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B63D 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B642 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B647 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B64C 07                         SME_yccqJ_88:	dc.b 7	
0000B64D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B652 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B657 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B65C EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B661 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B666 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B66B EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B670 04                         SME_yccqJ_AC:	dc.b 4	
0000B671 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B676 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B67B 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B680 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B686 00                         		even
0000B686 00                         		even
0000B686                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B686                            ; ---------------------------------------------------------------------------
0000B686                            ; Sprite mappings - missile that Buzz Bomber throws
0000B686                            ; ---------------------------------------------------------------------------
0000B686                            Map_Missile_internal:
0000B686 0000                       		dc.w @Flare1-Map_Missile_internal
0000B688 0000                       		dc.w @Flare2-Map_Missile_internal
0000B68A 0000                       		dc.w @Ball1-Map_Missile_internal
0000B68C 0000                       		dc.w @Ball2-Map_Missile_internal
0000B68E 01                         @Flare1:	dc.b 1
0000B68F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B694 01                         @Flare2:	dc.b 1
0000B695 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B69A 01                         @Ball1:		dc.b 1
0000B69B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B6A0 01                         @Ball2:		dc.b 1
0000B6A1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B6A6                            		even
0000B6A6                            		even
0000B6A6                            
0000B6A6                            		include	"_incObj\25 & 37 Rings.asm"
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6                            ; Object 25 - rings
0000B6A6                            ; ---------------------------------------------------------------------------
0000B6A6                            
0000B6A6                            Rings:
0000B6A6 7000                       		moveq	#0,d0
0000B6A8 1028 0024                  		move.b	obRoutine(a0),d0
0000B6AC 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B6B0 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B6B4                            ; ===========================================================================
0000B6B4                            Ring_Index:
0000B6B4 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B6B6 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B6B8 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B6BA 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B6BC 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B6BE 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B6C0 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B6C2 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B6C4 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B6C6                            
0000B6C6 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B6C6 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B6C6 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B6C6 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B6C6 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B6C6 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B6C6 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B6C6 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B6C6 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B6C6                            ; ---------------------------------------------------------------------------
0000B6C6                            ; Distances between rings (format: horizontal, vertical)
0000B6C6                            ; ---------------------------------------------------------------------------
0000B6C6 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B6C8 1800                       		dc.b $18, 0		; horizontal normal
0000B6CA 2000                       		dc.b $20, 0		; horizontal wide
0000B6CC 0010                       		dc.b 0,	$10		; vertical tight
0000B6CE 0018                       		dc.b 0,	$18		; vertical normal
0000B6D0 0020                       		dc.b 0,	$20		; vertical wide
0000B6D2 1010                       		dc.b $10, $10		; diagonal
0000B6D4 1818                       		dc.b $18, $18
0000B6D6 2020                       		dc.b $20, $20
0000B6D8 F010                       		dc.b $F0, $10
0000B6DA E818                       		dc.b $E8, $18
0000B6DC E020                       		dc.b $E0, $20
0000B6DE 1008                       		dc.b $10, 8
0000B6E0 1810                       		dc.b $18, $10
0000B6E2 F008                       		dc.b $F0, 8
0000B6E4 E810                       		dc.b $E8, $10
0000B6E6                            ; ===========================================================================
0000B6E6                            
0000B6E6                            Ring_Main:	; Routine 0
0000B6E6 45F8 FC00                  		lea	(v_objstate).w,a2
0000B6EA 7000                       		moveq	#0,d0
0000B6EC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B6F0 45F2 0002                  		lea	2(a2,d0.w),a2
0000B6F4 1812                       		move.b	(a2),d4
0000B6F6 1228 0028                  		move.b	obSubtype(a0),d1
0000B6FA 1001                       		move.b	d1,d0
0000B6FC 0241 0007                  		andi.w	#7,d1
0000B700 0C41 0007                  		cmpi.w	#7,d1
0000B704 6600                       		bne.s	loc_9B80
0000B706 7206                       		moveq	#6,d1
0000B708                            
0000B708                            	loc_9B80:
0000B708 4841                       		swap	d1
0000B70A 323C 0000                  		move.w	#0,d1
0000B70E E808                       		lsr.b	#4,d0
0000B710 D040                       		add.w	d0,d0
0000B712 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B716 4885                       		ext.w	d5
0000B718 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B71C 4886                       		ext.w	d6
0000B71E 2248                       		movea.l	a0,a1
0000B720 3428 0008                  		move.w	obX(a0),d2
0000B724 3628 000C                  		move.w	obY(a0),d3
0000B728 E20C                       		lsr.b	#1,d4
0000B72A 6500                       		bcs.s	loc_9C02
0000B72C 0892 0007                  		bclr	#7,(a2)
0000B730 6000                       		bra.s	loc_9BBA
0000B732                            ; ===========================================================================
0000B732                            
0000B732                            Ring_MakeRings:
0000B732 4841                       		swap	d1
0000B734 E20C                       		lsr.b	#1,d4
0000B736 6500                       		bcs.s	loc_9C02
0000B738 0892 0007                  		bclr	#7,(a2)
0000B73C 6100 0000                  		bsr.w	FindFreeObj
0000B740 6600                       		bne.s	loc_9C0E
0000B742                            
0000B742                            loc_9BBA:
0000B742 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B746 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B74A 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B74E 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B754 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B758 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B760 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B766 137C 0004 0001             		move.b	#4,obRender(a1)
0000B76C 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B772 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B778 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B77E 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B784 1341 0034                  		move.b	d1,$34(a1)
0000B788                            
0000B788                            loc_9C02:
0000B788 5241                       		addq.w	#1,d1
0000B78A D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B78C D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B78E 4841                       		swap	d1
0000B790 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B794                            
0000B794                            loc_9C0E:
0000B794 0812 0000                  		btst	#0,(a2)
0000B798 6600 0000                  		bne.w	DeleteObject
0000B79C                            
0000B79C                            Ring_Animate:	; Routine 2
0000B79C 4A38 F5C9                  		tst.b	(v_gshield).w
0000B7A0 6700                       		beq.s	@skip
0000B7A2 4A28 0001                  		tst.b	obRender(a0)
0000B7A6 6A00                       		bpl.s	@skip
0000B7A8                            		
0000B7A8 43F8 D000                  		lea (v_player).w,a1
0000B7AC                            		
0000B7AC 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B7B0 9068 0008                  		sub.w	obX(a0),d0
0000B7B4 6A00                       		bpl.s	@a1
0000B7B6 4440                       		neg.w	d0
0000B7B8                            		
0000B7B8                            	@a1:
0000B7B8 0C40 0040                  		cmpi.w	#$40,d0
0000B7BC 6200                       		bhi.s	@skip
0000B7BE                            		
0000B7BE 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B7C2 9068 000C                  		sub.w	obY(a0),d0
0000B7C6 6A00                       		bpl.s	@a2
0000B7C8 4440                       		neg.w	d0
0000B7CA                            		
0000B7CA                            	@a2:
0000B7CA 0C40 0040                  		cmpi.w	#$40,d0
0000B7CE 6200                       		bhi.s	@skip
0000B7D0                            		
0000B7D0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B7D6 45F8 FC00                  		lea	(v_objstate).w,a2
0000B7DA 7000                       		moveq	#0,d0
0000B7DC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B7E0 1228 0034                  		move.b	$34(a0),d1
0000B7E4 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B7E8                            		
0000B7E8                            	@skip:
0000B7E8 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B7EE 6100 0000                  		bsr.w	DisplaySprite
0000B80E 4E75                       		rts	
0000B810                            ; ===========================================================================
0000B810                            
0000B810                            Ring_Collect:	; Routine 4
0000B810 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B814 117C 0000 0020             		move.b	#0,obColType(a0)
0000B81A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B820 6100 0000                  		bsr.w	CollectRing
0000B824 45F8 FC00                  		lea	(v_objstate).w,a2
0000B828 7000                       		moveq	#0,d0
0000B82A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B82E 1228 0034                  		move.b	$34(a0),d1
0000B832 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B836                            
0000B836                            Ring_Sparkle:	; Routine 6
0000B836 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B83C 6100 0000                  		bsr.w	AnimateSprite
0000B840 6000 0000                  		bra.w	DisplaySprite
0000B844                            ; ===========================================================================
0000B844                            
0000B844                            Ring_Delete:	; Routine 8
0000B844 6000 0000                  		bra.w	DeleteObject
0000B848                            
0000B848                            Ring_Attract:	; Routine $A
0000B848 4A38 F5C9                  		tst.b	(v_gshield).w
0000B84C 6600                       		bne.s	@skip
0000B84E 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B852 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B858 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B85E 6000                       		bra.s	@display
0000B860                            		
0000B860                            	@skip:
0000B860 323C 0030                  		move.w	#$30,d1	; horizontal
0000B864 3038 D008                  		move.w	(v_player+obX).w,d0
0000B868 B068 0008                  		cmp.w	obX(a0),d0
0000B86C 6400                       		bcc.s	@a1
0000B86E 4441                       		neg.w	d1
0000B870 4A68 0010                  		tst.w	obVelX(a0)
0000B874 6B00                       		bmi.s	@a2
0000B876 D241                       		add.w	d1,d1
0000B878 D241                       		add.w	d1,d1
0000B87A 6000                       		bra.s	@a2
0000B87C                            
0000B87C                            	@a1:
0000B87C 4A68 0010                  		tst.w	obVelX(a0)
0000B880 6A00                       		bpl.s	@a2
0000B882 D241                       		add.w	d1,d1
0000B884 D241                       		add.w	d1,d1
0000B886                            
0000B886                            	@a2:
0000B886 D368 0010                  		add.w	d1,obVelX(a0)
0000B88A 323C 0030                  		move.w	#$30,d1	; vertical
0000B88E 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B892 B068 000C                  		cmp.w	obY(a0),d0
0000B896 6400                       		bcc.s	@a3
0000B898 4441                       		neg.w	d1
0000B89A 4A68 0012                  		tst.w	obVelY(a0)
0000B89E 6B00                       		bmi.s	@a4
0000B8A0 D241                       		add.w	d1,d1
0000B8A2 D241                       		add.w	d1,d1
0000B8A4 6000                       		bra.s	@a4
0000B8A6                            
0000B8A6                            	@a3:
0000B8A6 4A68 0012                  		tst.w	obVelY(a0)
0000B8AA 6A00                       		bpl.s	@a4
0000B8AC D241                       		add.w	d1,d1
0000B8AE D241                       		add.w	d1,d1
0000B8B0                            
0000B8B0                            	@a4:
0000B8B0 D368 0012                  		add.w	d1,obVelY(a0)
0000B8B4 6100 0000                  		bsr.w	SpeedToPos
0000B8B8                            		
0000B8B8                            	@display:
0000B8B8 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B8BE 6000 0000                  		bra.w	DisplaySprite
0000B8C2                            
0000B8C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B8C2                            
0000B8C2                            
0000B8C2                            CollectRing:
0000B8C2 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B8C6 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B8CC 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B8D0 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B8D6 6500                       		bcs.s	@playsnd	; if yes, branch
0000B8D8 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B8DE 6700                       		beq.s	@got100
0000B8E0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B8E6 6500                       		bcs.s	@playsnd	; if yes, branch
0000B8E8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B8EE 6600                       		bne.s	@playsnd
0000B8F0                            
0000B8F0                            	@got100:
0000B8F0 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B8F4 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B8F8 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B8FC                            		
0000B8FC                            
0000B8FC                            	@playsnd:
0000B8FC 4EF9 0000 0FCC             		jmp	(PlaySound_Special).l
0000B902                            ; End of function CollectRing
0000B902                            
0000B902                            ; ===========================================================================
0000B902                            ; ---------------------------------------------------------------------------
0000B902                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B902                            ; ---------------------------------------------------------------------------
0000B902                            
0000B902                            RingLoss:
0000B902 7000                       		moveq	#0,d0
0000B904 1028 0024                  		move.b	obRoutine(a0),d0
0000B908 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B90C 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B910                            ; ===========================================================================
0000B910 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B912 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B914 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B916 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B918 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B91A                            ; ===========================================================================
0000B91A                            
0000B91A                            RLoss_Count:	; Routine 0
0000B91A 2248                       		movea.l	a0,a1
0000B91C 7A00                       		moveq	#0,d5
0000B91E 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B922 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B928 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B92A 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B92E 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B934 6700                               beq.s   @cont                       ; if not, branch
0000B936 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B93C 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B93E                            @cont:
0000B93E BA40                               cmp.w   d0,d5
0000B940 6500                               bcs.s   @belowmax
0000B942 3A00                               move.w  d0,d5
0000B944                            
0000B944                            @belowmax:
0000B944 5345                               subq.w  #1,d5
0000B946 383C 0288                          move.w  #$288,d4
0000B94A 6000                       		bra.s	@makerings
0000B94C                            ; ===========================================================================
0000B94C                            
0000B94C                            	@loop:
0000B94C 6100 0000                  		bsr.w	FindFreeObj
0000B950 6600 0000                  		bne.w	@resetcounter
0000B954                            
0000B954                            @makerings:
0000B954 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B958 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B95C 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B962 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B968 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B96E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B974 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B97C 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B982 137C 0004 0001             		move.b	#4,obRender(a1)
0000B988 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B98E 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B994 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B998 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B99A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B99E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B9A2 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B9A4 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B9A6 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B9A8                            @skiphalvingvel:
0000B9A8 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000B9AC 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000B9B0 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000B9B4                            
0000B9B4                            @resetcounter:
0000B9B4 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000B9BA 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000B9C0 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000B9C6 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B9C8 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000B9CC 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000B9DA                            
0000B9DA                            RLoss_Bounce:	; Routine 2
0000B9DA 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000B9E0 6100 0000                  		bsr.w	SpeedToPos
0000B9E4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B9EA 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B9EE 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B9F0 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B9F4 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B9F8 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B9FA 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BA00                            	@skipbounceslow:
0000BA00 6B00                       		bmi.s	@chkdel
0000BA02 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BA06 D007                       		add.b	d7,d0
0000BA08 0200 0003                  		andi.b	#3,d0
0000BA0C 6600                       		bne.s	@chkdel
0000BA0E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BA14 4A41                       		tst.w	d1
0000BA16 6A00                       		bpl.s	@chkdel
0000BA18 D368 000C                  		add.w	d1,obY(a0)
0000BA1C 3028 0012                  		move.w	obVelY(a0),d0
0000BA20 E440                       		asr.w	#2,d0
0000BA22 9168 0012                  		sub.w	d0,obVelY(a0)
0000BA26 4468 0012                  		neg.w	obVelY(a0)
0000BA2A                            
0000BA2A                            	@chkdel:
0000BA2A 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BA2E 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BA32 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BA36 0640 00E0                  		addi.w	#$E0,d0
0000BA3A B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BA3E 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BA42 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA46 6700                       		beq.s	@skip
0000BA48 4A28 0001                  		tst.b	obRender(a0)
0000BA4C 6A00                       		bpl.s	@skip
0000BA4E                            		
0000BA4E 43F8 D000                  		lea (v_player).w,a1
0000BA52                            		
0000BA52 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BA56 9068 0008                  		sub.w	obX(a0),d0
0000BA5A 6A00                       		bpl.s	@a1
0000BA5C 4440                       		neg.w	d0
0000BA5E                            		
0000BA5E                            	@a1:
0000BA5E 0C40 00A0                  		cmpi.w	#$A0,d0
0000BA62 6200                       		bhi.s	@skip
0000BA64                            		
0000BA64 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA68 9068 000C                  		sub.w	obY(a0),d0
0000BA6C 6A00                       		bpl.s	@a2
0000BA6E 4440                       		neg.w	d0
0000BA70                            		
0000BA70                            	@a2:
0000BA70 0C40 00A0                  		cmpi.w	#$A0,d0
0000BA74 6200                       		bhi.s	@skip
0000BA76                            		
0000BA76 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA7C 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BA80                            		
0000BA80                            	@skip:		
0000BA80 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BA84 D2FC 0080                          adda.w  #$80,a1
0000BA88 0C51 007E                          cmpi.w  #$7E,(a1)
0000BA8C 6400                               bcc.s   @cont
0000BA8E 5451                               addq.w  #2,(a1)
0000BA90 D2D1                               adda.w  (a1),a1
0000BA92 3288                               move.w  a0,(a1)
0000BA94                            		
0000BA94                            	@cont:
0000BA94 4E75                               rts		
0000BA96                            ; ===========================================================================
0000BA96                            
0000BA96                            RLoss_Collect:	; Routine 4
0000BA96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA9A 117C 0000 0020             		move.b	#0,obColType(a0)
0000BAA0 6100 FE20                  		bsr.w	CollectRing
0000BAA4                            
0000BAA4                            RLoss_Sparkle:	; Routine 6
0000BAA4 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BAAA 6100 0000                  		bsr.w	AnimateSprite
0000BAAE 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BAB2 0C51 007E                          cmpi.w  #$7E,(a1)
0000BAB6 6400                               bcc.s   @cont
0000BAB8 5451                               addq.w  #2,(a1)
0000BABA D2D1                               adda.w  (a1),a1
0000BABC 3288                               move.w  a0,(a1)
0000BABE                            			
0000BABE                            	@cont:
0000BABE 4E75                               rts
0000BAC0                            ; ===========================================================================
0000BAC0                            
0000BAC0                            RLoss_Delete:	; Routine 8
0000BAC0 6000 0000                  		bra.w	DeleteObject
0000BAC4                            
0000BAC4                            ; ----------------------------------------------------------------------------------------------
0000BAC4                            ; Ring Spawn Array 
0000BAC4                            ; ----------------------------------------------------------------------------------------------
0000BAC4                            
0000BAC4 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BAD4 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BAE4 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BAF4 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BB04 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BB14 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BB24 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BB34 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BB44                                            even
0000BB44                            ; ===========================================================================
0000BB44                            ; -------------------------------------------------------------------------------------
0000BB44                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BB44                            ; -------------------------------------------------------------------------------------
0000BB44                            
0000BB44                            SpillRingData_Water:
0000BB44 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BB54 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BB64 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BB74 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BB84 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BB94 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BBA4 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BBB4 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BBC4                                            even
0000BBC4                            ; ===========================================================================				
0000BBC4                            ; ===========================================================================				
0000BBC4                            		include	"_incObj\4B Giant Ring.asm"
0000BBC4                            ; ---------------------------------------------------------------------------
0000BBC4                            ; Object 4B - giant ring for entry to special stage
0000BBC4                            ; ---------------------------------------------------------------------------
0000BBC4                            
0000BBC4                            GiantRing:
0000BBC4 7000                       		moveq	#0,d0
0000BBC6 1028 0024                  		move.b	obRoutine(a0),d0
0000BBCA 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BBCE 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BBD2                            ; ===========================================================================
0000BBD2 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BBD4 0000                       		dc.w GRing_Animate-GRing_Index
0000BBD6 0000                       		dc.w GRing_Collect-GRing_Index
0000BBD8 0000                       		dc.w GRing_Delete-GRing_Index
0000BBDA                            ; ===========================================================================
0000BBDA                            
0000BBDA                            GRing_Main:    ; Routine 0
0000BBDA 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BBE2 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BBE8 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BBEE 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BBF4 4A28 0001                  		tst.b	obRender(a0)
0000BBF8 6A00                       		bpl.s	GRing_Animate
0000BBFA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BC00 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BC04 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BC0A 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BC0C                            
0000BC0C 4E75                       		rts    
0000BC0E                            ; ===========================================================================
0000BC0E                            
0000BC0E                            GRing_Okay:
0000BC0E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC12 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BC18 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BC1E 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BC24                            
0000BC24                            GRing_Animate:	; Routine 2
0000BC24 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BC48 6000 0000                  		bra.w	DisplaySprite
0000BC4C                            ; ===========================================================================
0000BC4C                            
0000BC4C                            GRing_Collect:	; Routine 4
0000BC4C 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BC50 117C 0000 0020             		move.b	#0,obColType(a0)
0000BC56 6100 0000                  		bsr.w	FindFreeObj
0000BC5A 6600 0000                  		bne.w	GRing_PlaySnd
0000BC5E 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BC62 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BC68 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BC6E 2348 003C                  		move.l	a0,$3C(a1)
0000BC72 3038 D008                  		move.w	(v_player+obX).w,d0
0000BC76 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BC7A 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BC7C 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BC82 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BC88 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BC8E                            		
0000BC8E                            GRing_PlaySnd:
0000BC98 608A                       		bra.s	GRing_Animate
0000BC9A                            ; ===========================================================================
0000BC9A                            
0000BC9A                            GRing_Delete:	; Routine 6
0000BC9A 6000 0000                  		bra.w	DeleteObject
0000BC9A 6000 0000                  		bra.w	DeleteObject
0000BC9E                            		include	"_incObj\7C Ring Flash.asm"
0000BC9E                            ; ---------------------------------------------------------------------------
0000BC9E                            ; Object 7C - flash effect when	you collect the	giant ring
0000BC9E                            ; ---------------------------------------------------------------------------
0000BC9E                            
0000BC9E                            RingFlash:
0000BC9E 7000                       		moveq	#0,d0
0000BCA0 1028 0024                  		move.b	obRoutine(a0),d0
0000BCA4 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BCA8 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BCAC                            ; ===========================================================================
0000BCAC 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BCAE 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BCB0 0000                       		dc.w Flash_Delete-Flash_Index
0000BCB2                            ; ===========================================================================
0000BCB2                            
0000BCB2                            Flash_Main:	; Routine 0
0000BCB2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BCB6 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BCBE 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BCC4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BCCA 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BCD0 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BCD6 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BCDC                            
0000BCDC                            Flash_ChkDel:	; Routine 2
0000BCDC 6100                       		bsr.s	Flash_Collect
0000BCFC 6000 0000                  		bra.w	DisplaySprite
0000BD00                            
0000BD00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BD00                            
0000BD00                            
0000BD00                            Flash_Collect:
0000BD00 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BD04 6A00                       		bpl.s	locret_9F76
0000BD06 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BD0C 5228 001A                  		addq.b	#1,obFrame(a0)
0000BD10 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BD16 6400                       		bcc.s	Flash_End	; if yes, branch
0000BD18 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BD1E 6600                       		bne.s	locret_9F76	; if not, branch
0000BD20 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BD24 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BD2A 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BD30 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BD36 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BD3A 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BD3E                            
0000BD3E                            locret_9F76:
0000BD3E 4E75                       		rts	
0000BD40                            ; ===========================================================================
0000BD40                            
0000BD40                            Flash_End:
0000BD40 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD44 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BD4A 588F                       		addq.l	#4,sp
0000BD4C 4E75                       		rts	
0000BD4E                            ; End of function Flash_Collect
0000BD4E                            
0000BD4E                            ; ===========================================================================
0000BD4E                            
0000BD4E                            Flash_Delete:	; Routine 4
0000BD4E 6000 0000                  		bra.w	DeleteObject
0000BD4E 6000 0000                  		bra.w	DeleteObject
0000BD52                            
0000BD52                            		include	"_anim\Rings.asm"
0000BD52                            ; ---------------------------------------------------------------------------
0000BD52                            ; Animation script - ring
0000BD52                            ; ---------------------------------------------------------------------------
0000BD52 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BD54 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BD5A                            		even
0000BD5A                            		even
0000BD5A                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BD5A                            ; --------------------------------------------------------------------------------
0000BD5A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BD5A                            ; --------------------------------------------------------------------------------
0000BD5A                            
0000BD5A                            SME_aSMQh:	
0000BD5A 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BD5E 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BD62 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BD66 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BD6A 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BD6E 01                         SME_aSMQh_14:	dc.b 1	
0000BD6F F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BD74 01                         SME_aSMQh_1A:	dc.b 1	
0000BD75 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BD7A 01                         SME_aSMQh_20:	dc.b 1	
0000BD7B F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BD80 01                         SME_aSMQh_26:	dc.b 1	
0000BD81 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BD86 01                         SME_aSMQh_2C:	dc.b 1	
0000BD87 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BD8C 01                         SME_aSMQh_32:	dc.b 1	
0000BD8D F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BD92 01                         SME_aSMQh_38:	dc.b 1	
0000BD93 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BD98 01                         SME_aSMQh_3E:	dc.b 1	
0000BD99 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BD9E 01                         SME_aSMQh_44:	dc.b 1	
0000BD9F F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BDA4 01                         SME_aSMQh_4A:	dc.b 1	
0000BDA5 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BDAA                            		even
0000BDAA                            		even
0000BDAA                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BDAA                            ; ---------------------------------------------------------------------------
0000BDAA                            ; Sprite mappings - giant ring
0000BDAA                            ; ---------------------------------------------------------------------------
0000BDAA                            Map_GRing_internal:
0000BDAA 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BDAC 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BDAE 0000                       		dc.w byte_A036-Map_GRing_internal
0000BDB0 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BDB2 0A                         byte_9FDA:	dc.b $A
0000BDB3 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BDB8 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BDBD E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BDC2 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BDC7 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BDCC F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BDD1 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BDD6 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BDDB 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BDE0 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BDE5 08                         byte_A00D:	dc.b 8
0000BDE6 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BDEB E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BDF0 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BDF5 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BDFA F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BDFF 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BE04 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BE09 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BE0E 04                         byte_A036:	dc.b 4
0000BE0F E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BE14 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BE19 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BE1E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BE23 08                         byte_A04B:	dc.b 8
0000BE24 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BE29 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BE2E E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BE33 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BE38 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BE3D 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BE42 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BE47 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BE4C                            		even
0000BE4C                            		even
0000BE4C                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BE4C                            ; ---------------------------------------------------------------------------
0000BE4C                            ; Sprite mappings - flash effect when you collect the giant ring
0000BE4C                            ; ---------------------------------------------------------------------------
0000BE4C                            Map_Flash_internal:
0000BE4C 0000                       		dc.w byte_A084-Map_Flash_internal
0000BE4E 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BE50 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BE52 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BE54 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BE56 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BE58 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BE5A 0000                       		dc.w byte_A103-Map_Flash_internal
0000BE5C 02                         byte_A084:	dc.b 2
0000BE5D E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BE62 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BE67 04                         byte_A08F:	dc.b 4
0000BE68 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BE6D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BE72 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BE77 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BE7C 04                         byte_A0A4:	dc.b 4
0000BE7D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BE82 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BE87 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BE8C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BE91 04                         byte_A0B9:	dc.b 4
0000BE92 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BE97 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BE9C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BEA1 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BEA6 04                         byte_A0CE:	dc.b 4
0000BEA7 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BEAC E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BEB1 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BEB6 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BEBB 04                         byte_A0E3:	dc.b 4
0000BEBC E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BEC1 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BEC6 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BECB 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BED0 02                         byte_A0F8:	dc.b 2
0000BED1 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BED6 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BEDB 04                         byte_A103:	dc.b 4
0000BEDC E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BEE1 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BEE6 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BEEB 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BEF0                            		even
0000BEF0                            		even
0000BEF0                            		include	"_incObj\26 Monitor.asm"
0000BEF0                            ; ---------------------------------------------------------------------------
0000BEF0                            ; Object 26 - monitors
0000BEF0                            ; ---------------------------------------------------------------------------
0000BEF0                            
0000BEF0                            Monitor:
0000BEF0 7000                       		moveq	#0,d0
0000BEF2 1028 0024                  		move.b	obRoutine(a0),d0
0000BEF6 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BEFA 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BEFE                            ; ===========================================================================
0000BEFE 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BF00 0000                       		dc.w Mon_Solid-Mon_Index
0000BF02 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BF04 0000                       		dc.w Mon_Animate-Mon_Index
0000BF06 0000                       		dc.w Mon_Display-Mon_Index
0000BF08                            ; ===========================================================================
0000BF08                            
0000BF08                            Mon_Main:	; Routine 0
0000BF08 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF0C 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BF12 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BF18 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BF20 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BF26 117C 0004 0001             		move.b	#4,obRender(a0)
0000BF2C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BF32 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BF38 45F8 FC00                  		lea	(v_objstate).w,a2
0000BF3C 7000                       		moveq	#0,d0
0000BF3E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BF42 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BF48 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BF4E 6700                       		beq.s	@notbroken	; if not, branch
0000BF50 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BF56 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BF5C 4E75                       		rts	
0000BF5E                            ; ===========================================================================
0000BF5E                            
0000BF5E                            	@notbroken:
0000BF5E 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BF64 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BF6A                            
0000BF6A                            Mon_Solid:	; Routine 2
0000BF6A 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BF6E 6700                       		beq.s	@normal		; if not, branch
0000BF70 5500                       		subq.b	#2,d0
0000BF72 6600                       		bne.s	@fall
0000BF74                            
0000BF74                            		; 2nd Routine 2
0000BF74 7200                       		moveq	#0,d1
0000BF76 1228 0014                  		move.b	obActWid(a0),d1
0000BF7A 0641 000B                  		addi.w	#$B,d1
0000BF7E 6100 D000                  		bsr.w	ExitPlatform
0000BF82 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BF88 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BF8C 4228 0025                  		clr.b	ob2ndRout(a0)
0000BF90 6000 0000                  		bra.w	Mon_Animate
0000BF94                            ; ===========================================================================
0000BF94                            
0000BF94                            	@ontop:
0000BF94 363C 0010                  		move.w	#$10,d3
0000BF98 3428 0008                  		move.w	obX(a0),d2
0000BF9C 6100 D540                  		bsr.w	MvSonicOnPtfm
0000BFA0 6000 0000                  		bra.w	Mon_Animate
0000BFA4                            ; ===========================================================================
0000BFA4                            
0000BFA4                            @fall:		; 2nd Routine 4
0000BFA4 6100 0000                  		bsr.w	ObjectFall
0000BFA8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BFAE 4A41                       		tst.w	d1
0000BFB0 6A00 0000                  		bpl.w	Mon_Animate
0000BFB4 D368 000C                  		add.w	d1,obY(a0)
0000BFB8 4268 0012                  		clr.w	obVelY(a0)
0000BFBC 4228 0025                  		clr.b	ob2ndRout(a0)
0000BFC0 6000 0000                  		bra.w	Mon_Animate
0000BFC4                            ; ===========================================================================
0000BFC4                            
0000BFC4                            @normal:	; 2nd Routine 0
0000BFC4 323C 001A                  		move.w	#$1A,d1
0000BFC8 343C 000F                  		move.w	#$F,d2
0000BFCC 6100 0000                  		bsr.w	Mon_SolidSides
0000BFD0 6700 0000                  		beq.w	loc_A25C
0000BFD4 4A69 0012                  		tst.w	obVelY(a1)
0000BFD8 6B00                       		bmi.s	loc_A20A
0000BFDA 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000BFE0 6700                       		beq.s	loc_A25C	; if yes, branch
0000BFE2 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000BFE8 6700                       		beq.s	loc_A25C	; if yes, branch
0000BFEA 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000BFF0 6700                       		beq.s	loc_A25C	; if yes, branch
0000BFF2                            
0000BFF2                            loc_A20A:
0000BFF2 4A41                       		tst.w	d1
0000BFF4 6A00                       		bpl.s	loc_A220
0000BFF6 9769 000C                  		sub.w	d3,obY(a1)
0000BFFA 6100 CE72                  		bsr.w	loc_74AE
0000BFFE 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C004 6000 0000                  		bra.w	Mon_Animate
0000C008                            ; ===========================================================================
0000C008                            
0000C008                            loc_A220:
0000C008 4A40                       		tst.w	d0
0000C00A 6700 0000                  		beq.w	loc_A246
0000C00E 6B00                       		bmi.s	loc_A230
0000C010 4A69 0010                  		tst.w	obVelX(a1)
0000C014 6B00                       		bmi.s	loc_A246
0000C016 6000                       		bra.s	loc_A236
0000C018                            ; ===========================================================================
0000C018                            
0000C018                            loc_A230:
0000C018 4A69 0010                  		tst.w	obVelX(a1)
0000C01C 6A00                       		bpl.s	loc_A246
0000C01E                            
0000C01E                            loc_A236:
0000C01E 9169 0008                  		sub.w	d0,obX(a1)
0000C022 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C028 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C02E                            
0000C02E                            loc_A246:
0000C02E 0829 0001 0022             		btst	#1,obStatus(a1)
0000C034 6600                       		bne.s	loc_A26A
0000C036 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C03C 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C042 6000                       		bra.s	Mon_Animate
0000C044                            ; ===========================================================================
0000C044                            
0000C044                            loc_A25C:
0000C044 0828 0005 0022             		btst	#5,obStatus(a0)
0000C04A 6700                       		beq.s	Mon_Animate
0000C04C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C052 6700                       		beq.s	loc_A26A	; if so, branch
0000C054 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C05A                            
0000C05A                            loc_A26A:
0000C05A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C060 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C066                            
0000C066                            Mon_Animate:	; Routine 6
0000C066 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C06C 6100 0000                  		bsr.w	AnimateSprite
0000C070                            
0000C070                            Mon_Display:	; Routine 8
0000C070 6100 0000                  		bsr.w	DisplaySprite
0000C092 4E75                       		rts	
0000C094                            ; ===========================================================================
0000C094                            
0000C094                            Mon_BreakOpen:	; Routine 4
0000C094 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C098 117C 0000 0020             		move.b	#0,obColType(a0)
0000C09E 6100 0000                  		bsr.w	FindFreeObj
0000C0A2 6600                       		bne.s	Mon_Explode
0000C0A4 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C0A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C0AE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C0B4 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C0BA                            
0000C0BA                            Mon_Explode:
0000C0BA 6100 0000                  		bsr.w	FindFreeObj
0000C0BE 6600                       		bne.s	@fail
0000C0C0 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C0C4 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C0C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C0CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C0D4                            
0000C0D4                            	@fail:
0000C0D4 45F8 FC00                  		lea	(v_objstate).w,a2
0000C0D8 7000                       		moveq	#0,d0
0000C0DA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C0DE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C0E4 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C0EA 6000 0000                  		bra.w	DisplaySprite
0000C0EA 6000 0000                  		bra.w	DisplaySprite
0000C0EE                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C0EE                            ; ---------------------------------------------------------------------------
0000C0EE                            ; Object 2E - contents of monitors
0000C0EE                            ; ---------------------------------------------------------------------------
0000C0EE                            
0000C0EE                            PowerUp:
0000C0EE 7000                       		moveq	#0,d0
0000C0F0 1028 0024                  		move.b	obRoutine(a0),d0
0000C0F4 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C0F8 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C0FC 6000 0000                  		bra.w	DisplaySprite
0000C100                            ; ===========================================================================
0000C100 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C102 0000                       		dc.w Pow_Move-Pow_Index
0000C104 0000                       		dc.w Pow_Delete-Pow_Index
0000C106                            ; ===========================================================================
0000C106                            
0000C106                            Pow_Main:	; Routine 0
0000C106 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C10A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C110 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C116 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C11C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C122 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C128 7000                       		moveq	#0,d0
0000C12A 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C12E 5400                       		addq.b	#2,d0
0000C130 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C134 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C13A D000                       		add.b	d0,d0
0000C13C D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C140 5249                       		addq.w	#1,a1
0000C142 2149 0004                  		move.l	a1,obMap(a0)
0000C146                            
0000C146                            Pow_Move:	; Routine 2
0000C146 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C14A 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C14E 6100 0000                  		bsr.w	SpeedToPos
0000C152 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C158 4E75                       		rts	
0000C15A                            ; ===========================================================================
0000C15A                            
0000C15A                            Pow_Checks:
0000C15A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C15E 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C164                            
0000C164                            Pow_ChkEggman:
0000C164 1028 001C                  		move.b	obAnim(a0),d0
0000C168 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C16C 6600                       		bne.s	Pow_ChkSonic
0000C16E                            		
0000C16E 4EF9 0000 0000             		jmp	Spik_Hurt
0000C174                            		
0000C174 4E75                       		rts
0000C176                            ; ===========================================================================
0000C176                            
0000C176                            Pow_ChkSonic:
0000C176 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C17A 6600                       		bne.s	Pow_ChkShoes
0000C17C                            
0000C17C                            	ExtraLife:
0000C17C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C180 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C18E                            
0000C18E                            ; ===========================================================================
0000C18E                            
0000C18E                            Pow_ChkShoes:
0000C18E 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C192 6600                       		bne.s	Pow_ChkShield
0000C194                            
0000C194 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C19A 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C1A0 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C1A6 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C1AC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C1B2 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C1B6 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C1B8 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C1BE 6300                       			bls.s	Pow_NoMus
0000C1CA                            ; ===========================================================================
0000C1CA                            
0000C1CA                            Pow_NoMus:
0000C1CA 4E75                       		rts	
0000C1CC                            ; ===========================================================================
0000C1CC                            
0000C1CC                            Pow_ChkShield:
0000C1CC 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C1D0 6600                       		bne.s	Pow_ChkInvinc
0000C1D2                            
0000C1D2 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C1D8 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C1DE 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C1E4 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C1EA 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C1FA                            ; ===========================================================================
0000C1FA                            
0000C1FA                            Pow_ChkInvinc:
0000C1FA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C1FE 6600                       		bne.s	Pow_ChkRings
0000C200                            
0000C200 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C206 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C20C 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C212 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C218 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C21E 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C224 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C22A 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C230 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C236 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C23C 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C240 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C242 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C248 6300                       			bls.s	Pow_NoMusic
0000C254                            ; ===========================================================================
0000C254                            
0000C254                            Pow_NoMusic:
0000C254 4E75                       		rts	
0000C256                            ; ===========================================================================
0000C256                            
0000C256                            Pow_ChkRings:
0000C256 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C25A 6600                       		bne.s	Pow_ChkS
0000C25C                            
0000C25C 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C262 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C268 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C26E 6500                       		bcs.s	Pow_RingSound
0000C270 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C276 6700 FF04                  		beq.w	ExtraLife
0000C27A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C280 6500                       		bcs.s	Pow_RingSound
0000C282 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C288 6700 FEF2                  		beq.w	ExtraLife
0000C28C                            
0000C28C                            	Pow_RingSound:
0000C296                            ; ===========================================================================
0000C296                            
0000C296                            Pow_ChkS:
0000C296 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C29A 6600                       		bne.s	Pow_ChkSRing
0000C29C                            		
0000C29C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C2A2 6700                       		beq.s	PowS2	; if yes, branch
0000C2A4 0404 003B                  		subi.b	#$3B,d4
0000C2A8 7000                       		moveq	#0,d0
0000C2AA 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C2B0 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C2B6 6000                       		bra.s	PowSPlay
0000C2B8                            
0000C2B8                            PowS2:
0000C2B8 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C2BE 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C2C4 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C2CA 6500                       		bcs.s	PowSPlay
0000C2CC 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C2D2 6700 FEA8                  		beq.w	ExtraLife
0000C2D6 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C2DC 6500                       		bcs.s	PowSPlay
0000C2DE 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C2E4 6700 FE96                  		beq.w	ExtraLife	
0000C2E8                            
0000C2E8                            PowSPlay:
0000C2F2                            
0000C2F2                            		
0000C2F2                            
0000C2F2                            
0000C2F2                            Pow_ChkSRing:
0000C2F2 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C2F6 6600                       		bne.s	Pow_ChkRShield
0000C2F8                            
0000C2F8                            		
0000C2F8 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C2FE 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C304 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C30A 6500                       		bcs.s	Pow_ChkSRingSound
0000C30C 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C312 6700 FE68                  		beq.w	ExtraLife
0000C316 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C31C 6500                       		bcs.s	Pow_ChkSRingSound
0000C31E 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C324 6700 FE56                  		beq.w	ExtraLife	
0000C328                            
0000C328                            Pow_ChkSRingSound:
0000C332                            
0000C332                            
0000C332                            Pow_ChkRShield:
0000C332 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C336 6600                       		bne.s	Pow_ChkGShield
0000C338                            
0000C338 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C33E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C344 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C34A 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C350 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C360                            
0000C360                            Pow_ChkGShield:
0000C360 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C364 6600                       		bne.s	Pow_ChkSpShield
0000C366                            
0000C366                            
0000C366 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C36C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C372 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C378 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C37E 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C384                            		
0000C384 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C38A 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C390 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C396 6500                       		bcs.s	Pow_ChkGSound
0000C398 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C39E 6700 FDDC                  		beq.w	ExtraLife
0000C3A2 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C3A8 6500                       		bcs.s	Pow_ChkGSound
0000C3AA 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C3B0 6700 FDCA                  		beq.w	ExtraLife	
0000C3B4                            
0000C3B4                            Pow_ChkGSound:		
0000C3BE                            
0000C3BE                            Pow_ChkSpShield:
0000C3BE 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C3C2 6600                       		bne.s	Pow_ChkEnd
0000C3C4                            
0000C3C4 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C3CA 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C3D0 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C3D6 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C3DC 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C3EC 4E71                       		nop
0000C3EE                            
0000C3EE                            Pow_ChkEnd:
0000C3EE 4E75                       		rts
0000C3F0                            ; ===========================================================================
0000C3F0                            
0000C3F0                            Pow_Delete:	; Routine 4
0000C3F0 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C3F4 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C3F8 4E75                       		rts	
0000C3F8 4E75                       		rts	
0000C3FA                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            ; Subroutine to	make the sides of a monitor solid
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            
0000C3FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3FA                            
0000C3FA                            
0000C3FA                            Mon_SolidSides:
0000C3FA 43F8 D000                  		lea	(v_player).w,a1
0000C3FE 3029 0008                  		move.w	obX(a1),d0
0000C402 9068 0008                  		sub.w	obX(a0),d0
0000C406 D041                       		add.w	d1,d0
0000C408 6B00                       		bmi.s	loc_A4E6
0000C40A 3601                       		move.w	d1,d3
0000C40C D643                       		add.w	d3,d3
0000C40E B043                       		cmp.w	d3,d0
0000C410 6200                       		bhi.s	loc_A4E6
0000C412 1629 0016                  		move.b	obHeight(a1),d3
0000C416 4883                       		ext.w	d3
0000C418 D443                       		add.w	d3,d2
0000C41A 3629 000C                  		move.w	obY(a1),d3
0000C41E 9668 000C                  		sub.w	obY(a0),d3
0000C422 D642                       		add.w	d2,d3
0000C424 6B00                       		bmi.s	loc_A4E6
0000C426 D442                       		add.w	d2,d2
0000C428 B642                       		cmp.w	d2,d3
0000C42A 6400                       		bcc.s	loc_A4E6
0000C42C 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C430 6B00                       		bmi.s	loc_A4E6
0000C432 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C438 6400                       		bcc.s	loc_A4E6
0000C43A 4A78 FE08                  		tst.w	(v_debuguse).w
0000C43E 6600                       		bne.s	loc_A4E6
0000C440 B240                       		cmp.w	d0,d1
0000C442 6400                       		bcc.s	loc_A4DC
0000C444 D241                       		add.w	d1,d1
0000C446 9041                       		sub.w	d1,d0
0000C448                            
0000C448                            loc_A4DC:
0000C448 0C43 0010                  		cmpi.w	#$10,d3
0000C44C 6500                       		bcs.s	loc_A4EA
0000C44E                            
0000C44E                            loc_A4E2:
0000C44E 7201                       		moveq	#1,d1
0000C450 4E75                       		rts	
0000C452                            ; ===========================================================================
0000C452                            
0000C452                            loc_A4E6:
0000C452 7200                       		moveq	#0,d1
0000C454 4E75                       		rts	
0000C456                            ; ===========================================================================
0000C456                            
0000C456                            loc_A4EA:
0000C456 7200                       		moveq	#0,d1
0000C458 1228 0014                  		move.b	obActWid(a0),d1
0000C45C 5841                       		addq.w	#4,d1
0000C45E 3401                       		move.w	d1,d2
0000C460 D442                       		add.w	d2,d2
0000C462 D269 0008                  		add.w	obX(a1),d1
0000C466 9268 0008                  		sub.w	obX(a0),d1
0000C46A 6BE2                       		bmi.s	loc_A4E2
0000C46C B242                       		cmp.w	d2,d1
0000C46E 64DE                       		bcc.s	loc_A4E2
0000C470 72FF                       		moveq	#-1,d1
0000C472 4E75                       		rts	
0000C474                            ; End of function Obj26_SolidSides
0000C474                            ; End of function Obj26_SolidSides
0000C474                            		include	"_anim\Monitor.asm"
0000C474                            ; ---------------------------------------------------------------------------
0000C474                            ; Animation script - monitors
0000C474                            ; ---------------------------------------------------------------------------
0000C474 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C47A 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C480 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C486 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C48C 0000                       		dc.w @spshield-Ani_Monitor
0000C48E                            		
0000C48E 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C494 00                         		even
0000C494 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C4A0 00                         		even
0000C4A0 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C4AC 00                         		even
0000C4AC 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C4B8 00                         		even
0000C4B8 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C4C4 00                         		even
0000C4C4 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C4D0 00                         		even
0000C4D0 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C4DC 00                         		even
0000C4DC 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C4E8 00                         		even
0000C4E8 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C4F4 00                         		even
0000C4F4 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C4FC 00                         		even
0000C4FC 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C508 00                         		even
0000C508 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C514 00                         		even
0000C514 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C520 00                         		even
0000C520 00                         		even
0000C520                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C520                            ; --------------------------------------------------------------------------------
0000C520                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C520                            ; --------------------------------------------------------------------------------
0000C520                            
0000C520                            SME_YYb7z:	
0000C520 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C524 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C528 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C52C 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C530 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C534 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C538 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C53C 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C53E 01                         SME_YYb7z_1E:	dc.b 1	
0000C53F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C544 02                         SME_YYb7z_24:	dc.b 2	
0000C545 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C54A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C54F 02                         SME_YYb7z_2F:	dc.b 2	
0000C550 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C555 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C55A 02                         SME_YYb7z_3A:	dc.b 2	
0000C55B F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C560 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C565 02                         SME_YYb7z_45:	dc.b 2	
0000C566 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C56B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C570 02                         SME_YYb7z_50:	dc.b 2	
0000C571 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C576 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C57B 02                         SME_YYb7z_5B:	dc.b 2	
0000C57C F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C581 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C586 02                         SME_YYb7z_66:	dc.b 2	
0000C587 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C58C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C591 02                         SME_YYb7z_71:	dc.b 2	
0000C592 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C597 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C59C 02                         SME_YYb7z_7C:	dc.b 2	
0000C59D F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C5A2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5A7 02                         SME_YYb7z_87:	dc.b 2	
0000C5A8 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C5AD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5B2 05                         SME_YYb7z_92:	dc.b 5	
0000C5B3 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C5B8 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C5BD 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C5C2 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C5C7 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C5CC 02                         SME_YYb7z_AC:	dc.b 2	
0000C5CD F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C5D2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5D7 02                         SME_YYb7z_B7:	dc.b 2	
0000C5D8 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C5DD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5E2 02                         SME_YYb7z_C2:	dc.b 2	
0000C5E3 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C5E8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5EE 00                         		even
0000C5EE 00                         		even
0000C5EE                            
0000C5EE                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C5EE                            ; ---------------------------------------------------------------------------
0000C5EE                            ; Object 0E - Sonic on the title screen
0000C5EE                            ; ---------------------------------------------------------------------------
0000C5EE                            
0000C5EE                            TitleSonic:
0000C5EE 7000                       		moveq	#0,d0
0000C5F0 1028 0024                  		move.b	obRoutine(a0),d0
0000C5F4 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C5F8 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C5FC                            ; ===========================================================================
0000C5FC 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C5FE 0000                       		dc.w TSon_Delay-TSon_Index
0000C600 0000                       		dc.w TSon_Move-TSon_Index
0000C602 0000                       		dc.w TSon_Animate-TSon_Index
0000C604                            ; ===========================================================================
0000C604                            
0000C604                            TSon_Main:	; Routine 0
0000C604 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C608 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C60E 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C614 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C61C 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C622 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C628 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C62E 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C634 6100 0000                  		bsr.w	AnimateSprite
0000C638                            
0000C638                            TSon_Delay:	;Routine 2
0000C638 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C63C 6A00                       		bpl.s	@wait		; if time remains, branch
0000C63E 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C642 6000 0000                  		bra.w	DisplaySprite
0000C646                            
0000C646                            	@wait:
0000C646 4E75                       		rts	
0000C648                            ; ===========================================================================
0000C648                            
0000C648                            TSon_Move:	; Routine 4
0000C648 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C64C 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C652 6600                       		bne.s	@display	; if not, branch
0000C654 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C658                            
0000C658                            	@display:
0000C658 6000 0000                  		bra.w	DisplaySprite
0000C65C                            
0000C65C 4E75                       		rts	
0000C65E                            ; ===========================================================================
0000C65E                            
0000C65E                            TSon_Animate:	; Routine 6
0000C65E 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C664 6100 0000                  		bsr.w	AnimateSprite
0000C668 6000 0000                  		bra.w	DisplaySprite
0000C66C                            
0000C66C 4E75                       		rts	
0000C66C 4E75                       		rts	
0000C66E                            		include	"_incObj\0F Press Start and TM.asm"
0000C66E                            ; ---------------------------------------------------------------------------
0000C66E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C66E                            ; ---------------------------------------------------------------------------
0000C66E                            
0000C66E                            PSBTM:
0000C66E 7000                       		moveq	#0,d0
0000C670 1028 0024                  		move.b	obRoutine(a0),d0
0000C674 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C678 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C67C 6000 0000                  		bra.w	DisplaySprite
0000C680                            ; ===========================================================================
0000C680 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C682 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C684 0000                       		dc.w MENURTS-Obj0F_Index	
0000C686                            ; ===========================================================================
0000C686                            Obj0F_Init:
0000C686 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C68A 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C692 317C 0101 0008                 move.w   #$101,8(a0)
0000C698 317C 0151 000A                 move.w   #$151,$A(a0)
0000C69E 317C 056F 0002             	move.w	#$56F,2(a0)
0000C6A4 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C6AA 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C6B0                            
0000C6B0                            
0000C6B0                            Obj0F_Main:
0000C6B0 7400                             moveq   #0,d2
0000C6B2 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C6B6 1038 F605                        move.b   ($FFFFF605).w,d0
0000C6BA 0800 0000                        btst   #0,d0
0000C6BE 6700                             beq.s   MAIN2
0000C6C0 5302                             subq.b   #1,d2
0000C6C2 6400                             bcc.s   MAIN2
0000C6C4 143C 0001                        move.b   #1,d2
0000C6C8                            
0000C6C8                            MAIN2:
0000C6C8 0800 0001                        btst   #1,d0
0000C6CC 6700                             beq.s   MAIN3
0000C6CE 5202                             addq.b   #1,d2
0000C6D0 0C02 0002                        cmpi.b   #2,d2
0000C6D4 6500                             blo.s   MAIN3
0000C6D6 7400                             moveq   #0,d2
0000C6D8                            
0000C6D8                            MAIN3:
0000C6D8 1142 001A                        move.b   d2,$1A(a0)
0000C6DC 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C6E0 0200 0003                        andi.b   #3,d0
0000C6E4 6700                             beq.s   MENURTS   ; rts
0000C6E6 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C6EA 4EB8 0FCC                        jsr   PlaySound_Special
0000C6EE                            
0000C6EE                            MENURTS:
0000C6EE 4E75                             rts															 
0000C6F0                            ; ===========================================================================
0000C6F0                            
0000C6F0                            Map_TitleMenu:
0000C6F0                            		include "_maps\Title Screen Menu.asm"		
0000C6F0                            ; --------------------------------------------------------------------------------
0000C6F0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C6F0                            ; --------------------------------------------------------------------------------
0000C6F0                            
0000C6F0                            SME_g2Qfx:	
0000C6F0 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C6F4 10                         SME_g2Qfx_6:	dc.b $10	
0000C6F5 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C6FA E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C6FF E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C704 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C709 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C70E E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C713 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C718 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C71D F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C722 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C727 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C72C F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C731 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C736 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C73B F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C740 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C745 10                         SME_g2Qfx_6B:	dc.b $10	
0000C746 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C74B E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C750 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C755 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C75A E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C75F E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C764 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C769 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C76E F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C773 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C778 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C77D F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C782 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C787 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C78C F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C791 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C796                            		even
0000C796                            		even
0000C796                            		even
0000C796                            
0000C796                            		include	"_anim\Title Screen Sonic.asm"
0000C796                            ; ---------------------------------------------------------------------------
0000C796                            ; Animation script - Sonic on the title screen
0000C796                            ; ---------------------------------------------------------------------------
0000C796 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C798 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C7A4 00                         		even
0000C7A4 00                         		even
0000C7A4                            		include	"_anim\Press Start and TM.asm"
0000C7A4                            ; ---------------------------------------------------------------------------
0000C7A4                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C7A4                            ; ---------------------------------------------------------------------------
0000C7A4 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C7A6 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C7AA                            		even
0000C7AA                            		even
0000C7AA                            
0000C7AA                            		include	"_incObj\sub AnimateSprite.asm"
0000C7AA                            ; ---------------------------------------------------------------------------
0000C7AA                            ; Subroutine to	animate	a sprite using an animation script
0000C7AA                            ; ---------------------------------------------------------------------------
0000C7AA                            
0000C7AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C7AA                            
0000C7AA                            
0000C7AA                            AnimateSprite:
0000C7AA 7000                       		moveq	#0,d0
0000C7AC 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C7B0 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C7B4 6700                       		beq.s	Anim_Run	; if not, branch
0000C7B6                            
0000C7B6 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C7BA 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C7C0 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C7C6                            
0000C7C6                            Anim_Run:
0000C7C6 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C7CA 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C7CC D040                       		add.w	d0,d0
0000C7CE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C7D2 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C7D6 7200                       		moveq	#0,d1
0000C7D8 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C7DC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C7E0 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C7E2                            
0000C7E2                            Anim_Next:
0000C7E2 1200                       		move.b	d0,d1
0000C7E4 0200 001F                  		andi.b	#$1F,d0
0000C7E8 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C7EC 1028 0022                  		move.b	obStatus(a0),d0
0000C7F0 E719                       		rol.b	#3,d1
0000C7F2 B101                       		eor.b	d0,d1
0000C7F4 0201 0003                  		andi.b	#3,d1
0000C7F8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C7FE 8328 0001                  		or.b	d1,obRender(a0)
0000C802 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C806                            
0000C806                            Anim_Wait:
0000C806 4E75                       		rts	
0000C808                            ; ===========================================================================
0000C808                            
0000C808                            Anim_End_FF:
0000C808 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C80A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C80C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C812 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C816 60CA                       		bra.s	Anim_Next
0000C818                            ; ===========================================================================
0000C818                            
0000C818                            Anim_End_FE:
0000C818 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C81A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C81C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C820 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C824 9200                       		sub.b	d0,d1
0000C826 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C82A 60B6                       		bra.s	Anim_Next
0000C82C                            ; ===========================================================================
0000C82C                            
0000C82C                            Anim_End_FD:
0000C82C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C82E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C830 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C836                            
0000C836                            Anim_End_FC:
0000C836 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C838 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C83A 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C83E                            
0000C83E                            Anim_End_FB:
0000C83E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C840 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C842 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C848 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C84C                            
0000C84C                            Anim_End_FA:
0000C84C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C84E 6600                       		bne.s	Anim_End	; if not, branch
0000C850 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C854                            
0000C854                            Anim_End:
0000C854 4E75                       		rts	
0000C856                            ; End of function AnimateSprite
0000C856                            ; End of function AnimateSprite
0000C856                            
0000C856                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C856                            ; ---------------------------------------------------------------------------
0000C856                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C856                            ; ---------------------------------------------------------------------------
0000C856                            Map_PSB_internal:
0000C856 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C858 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C85A 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C85C 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C85E 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C85F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C864 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C869 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C86E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C873 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C878 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C87D 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C87E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C883 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C888 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C88D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C892 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C897 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C89C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8A1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8A6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8AB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8B0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8B5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8BA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8BF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8C4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8C9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8CE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8D3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8D8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8DD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8E2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8E7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8EC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8F1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8F6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8FB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C900 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C905 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C90A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C90F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C914 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C915 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C91A                            		even
0000C91A                            		even
0000C91A                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C91A                            ; ---------------------------------------------------------------------------
0000C91A                            ; Sprite mappings - Sonic on the title screen
0000C91A                            ; ---------------------------------------------------------------------------
0000C91A                            Map_TSon_internal:
0000C91A 0000                       		dc.w byte_A898-Map_TSon_internal
0000C91C 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C91E 0000                       		dc.w byte_A917-Map_TSon_internal
0000C920 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C922 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C924 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C926 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C928 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C92A 0A                         byte_A898:	dc.b $A
0000C92B 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C930 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C935 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C93A 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C93F 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C944 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C949 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C94E 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C953 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C958 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C95D 0F                         byte_A8CB:	dc.b $F
0000C95E 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C963 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C968 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C96D 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C972 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C977 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C97C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C981 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C986 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C98B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C990 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C995 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C99A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C99F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C9A4 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C9A9 11                         byte_A917:	dc.b $11
0000C9AA 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C9AF 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C9B4 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C9B9 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C9BE 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C9C3 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C9C8 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C9CD 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C9D2 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C9D7 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C9DC 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C9E1 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C9E6 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C9EB 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C9F0 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C9F5 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C9FA 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C9FF 0D                         byte_A96D:	dc.b $D
0000CA00 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CA05 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CA0A 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CA0F 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CA14 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CA19 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CA1E 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CA23 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CA28 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CA2D 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CA32 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CA37 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CA3C 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CA41 0B                         byte_A9AF:	dc.b $B
0000CA42 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CA47 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CA4C 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CA51 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CA56 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CA5B 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CA60 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CA65 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CA6A 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CA6F 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CA74 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CA79 13                         byte_A9E7:	dc.b $13
0000CA7A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CA7F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CA84 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CA89 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CA8E 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CA93 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CA98 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CA9D 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CAA2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CAA7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CAAC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CAB1 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CAB6 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CABB 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CAC0 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CAC5 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CACA 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CACF 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CAD4 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CAD9 15                         byte_AA47:	dc.b $15
0000CADA 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CADF 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CAE4 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CAE9 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CAEE 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CAF3 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CAF8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CAFD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB02 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB07 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB0C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB11 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB16 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB1B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB20 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB25 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB2A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB2F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB34 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB39 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB3E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB43 16                         byte_AAB1:	dc.b $16
0000CB44 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CB49 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CB4E 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CB53 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CB58 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CB5D 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CB62 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CB67 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB6C 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB71 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB76 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB7B 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB80 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB85 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB8A 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB8F 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB94 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB99 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB9E 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CBA3 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CBA8 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CBAD 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CBB2                            		even
0000CBB2                            		even
0000CBB2                            
0000CBB2                            		include	"_incObj\2B Chopper.asm"
0000CBB2                            ; ---------------------------------------------------------------------------
0000CBB2                            ; Object 2B - Chopper enemy (GHZ)
0000CBB2                            ; ---------------------------------------------------------------------------
0000CBB2                            
0000CBB2                            Chopper:
0000CBB2 7000                       		moveq	#0,d0
0000CBB4 1028 0024                  		move.b	obRoutine(a0),d0
0000CBB8 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CBBC 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CBC0 6000 0000                  		bra.w	RememberState
0000CBC4                            ; ===========================================================================
0000CBC4 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CBC6 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CBC8                            
0000CBC8 =00000030                  chop_origY:	equ $30
0000CBC8                            ; ===========================================================================
0000CBC8                            
0000CBC8                            Chop_Main:	; Routine 0
0000CBC8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CBCC 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CBD4 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CBDA 117C 0004 0001             		move.b	#4,obRender(a0)
0000CBE0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CBE6 117C 0009 0020             		move.b	#9,obColType(a0)
0000CBEC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CBF2 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CBF8 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CBFE                            
0000CBFE                            Chop_ChgSpeed:	; Routine 2
0000CBFE 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CC04 6100 FBA4                  		bsr.w	AnimateSprite
0000CC08 6100 0000                  		bsr.w	SpeedToPos
0000CC0C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CC12 3028 0030                  		move.w	chop_origY(a0),d0
0000CC16 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CC1A 6400                       		bcc.s	@chganimation	; if not, branch
0000CC1C 3140 000C                  		move.w	d0,obY(a0)
0000CC20 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CC26                            
0000CC26                            	@chganimation:
0000CC26 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CC2C 0440 00C0                  		subi.w	#$C0,d0
0000CC30 B068 000C                  		cmp.w	obY(a0),d0
0000CC34 6400                       		bcc.s	@nochg
0000CC36 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CC3C 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CC40 6B00                       		bmi.s	@nochg		; if not, branch
0000CC42 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CC48                            
0000CC48                            	@nochg:
0000CC48 4E75                       		rts	
0000CC48 4E75                       		rts	
0000CC4A                            		include	"_anim\Chopper.asm"
0000CC4A                            ; ---------------------------------------------------------------------------
0000CC4A                            ; Animation script - Chopper enemy
0000CC4A                            ; ---------------------------------------------------------------------------
0000CC4A 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CC4C 0000                       		dc.w @fast-Ani_Chop
0000CC4E 0000                       		dc.w @still-Ani_Chop
0000CC50 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CC54 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CC58 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CC5C 00                         		even
0000CC5C 00                         		even
0000CC5C                            Map_Chop:	include	"_maps\Chopper.asm"
0000CC5C                            ; ---------------------------------------------------------------------------
0000CC5C                            ; Sprite mappings - Chopper enemy (GHZ)
0000CC5C                            ; ---------------------------------------------------------------------------
0000CC5C                            Map_Chop_internal:
0000CC5C 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CC5E 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CC60 01                         @mouthshut:	dc.b 1
0000CC61 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CC66 01                         @mouthopen:	dc.b 1
0000CC67 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CC6C                            		even
0000CC6C                            		even
0000CC6C                            		include	"_incObj\2C Jaws.asm"
0000CC6C                            ; ---------------------------------------------------------------------------
0000CC6C                            ; Object 2C - Jaws enemy (LZ)
0000CC6C                            ; ---------------------------------------------------------------------------
0000CC6C                            
0000CC6C                            Jaws:
0000CC6C 7000                       		moveq	#0,d0
0000CC6E 1028 0024                  		move.b	obRoutine(a0),d0
0000CC72 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CC76 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CC7A                            ; ===========================================================================
0000CC7A 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CC7C 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CC7E                            
0000CC7E =00000030                  jaws_timecount:	equ $30
0000CC7E =00000032                  jaws_timedelay:	equ $32
0000CC7E                            ; ===========================================================================
0000CC7E                            
0000CC7E                            Jaws_Main:	; Routine 0
0000CC7E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CC82 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CC8A 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CC90 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CC96 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CC9C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CCA2 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CCA8 7000                       		moveq	#0,d0
0000CCAA 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CCAE ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CCB0 5340                       		subq.w	#1,d0
0000CCB2 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CCB6 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CCBA 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CCC0 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CCC6 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CCC8 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CCCC                            
0000CCCC                            Jaws_Turn:	; Routine 2
0000CCCC 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CCD0 6A00                       		bpl.s	@animate	; if time remains, branch
0000CCD2 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CCD8 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CCDC 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CCE2 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CCE8                            
0000CCE8                            	@animate:
0000CCE8 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CCEE 6100 FABA                  		bsr.w	AnimateSprite
0000CCF2 6100 0000                  		bsr.w	SpeedToPos
0000CCF6 6000 0000                  		bra.w	RememberState
0000CCF6 6000 0000                  		bra.w	RememberState
0000CCFA                            		include	"_anim\Jaws.asm"
0000CCFA                            ; ---------------------------------------------------------------------------
0000CCFA                            ; Animation script - Jaws enemy
0000CCFA                            ; ---------------------------------------------------------------------------
0000CCFA 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CCFC 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CD02                            		even
0000CD02                            		even
0000CD02                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CD02                            ; --------------------------------------------------------------------------------
0000CD02                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CD02                            ; --------------------------------------------------------------------------------
0000CD02                            
0000CD02                            SME_O5C0c:	
0000CD02 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CD06 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CD0A 02                         SME_O5C0c_8:	dc.b 2	
0000CD0B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD10 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD15 02                         SME_O5C0c_13:	dc.b 2	
0000CD16 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD1B F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD20 02                         SME_O5C0c_1E:	dc.b 2	
0000CD21 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD26 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD2B 02                         SME_O5C0c_29:	dc.b 2	
0000CD2C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD31 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD36                            		even
0000CD36                            		even
0000CD36                            		include	"_incObj\2D Burrobot.asm"
0000CD36                            ; ---------------------------------------------------------------------------
0000CD36                            ; Object 2D - Burrobot enemy (LZ)
0000CD36                            ; ---------------------------------------------------------------------------
0000CD36                            
0000CD36                            Burrobot:
0000CD36 7000                       		moveq	#0,d0
0000CD38 1028 0024                  		move.b	obRoutine(a0),d0
0000CD3C 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CD40 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CD44                            ; ===========================================================================
0000CD44 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CD46 0000                       		dc.w Burro_Action-Burro_Index
0000CD48                            
0000CD48 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CD48                            ; ===========================================================================
0000CD48                            
0000CD48                            Burro_Main:	; Routine 0
0000CD48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD4C 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CD52 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CD58 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CD60 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CD66 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CD6C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD72 117C 0005 0020             		move.b	#5,obColType(a0)
0000CD78 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CD7E 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CD82 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CD88                            
0000CD88                            Burro_Action:	; Routine 2
0000CD88 7000                       		moveq	#0,d0
0000CD8A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CD8E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CD92 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CD96 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CD9C 6100 FA0C                  		bsr.w	AnimateSprite
0000CDA0 6000 0000                  		bra.w	RememberState
0000CDA4                            ; ===========================================================================
0000CDA4 0000                       @index:		dc.w @changedir-@index
0000CDA6 0000                       		dc.w Burro_Move-@index
0000CDA8 0000                       		dc.w Burro_Jump-@index
0000CDAA 0000                       		dc.w Burro_ChkSonic-@index
0000CDAC                            ; ===========================================================================
0000CDAC                            
0000CDAC                            @changedir:
0000CDAC 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CDB0 6A00                       		bpl.s	@nochg
0000CDB2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CDB6 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CDBC 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CDC2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CDC8 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CDCE 6700                       		beq.s	@nochg
0000CDD0 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CDD4                            
0000CDD4                            	@nochg:
0000CDD4 4E75                       		rts	
0000CDD6                            ; ===========================================================================
0000CDD6                            
0000CDD6                            Burro_Move:
0000CDD6 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CDDA 6B00                       		bmi.s	loc_AD84
0000CDDC 6100 0000                  		bsr.w	SpeedToPos
0000CDE0 0868 0000 0032             		bchg	#0,$32(a0)
0000CDE6 6600                       		bne.s	loc_AD78
0000CDE8 3628 0008                  		move.w	obX(a0),d3
0000CDEC 0643 000C                  		addi.w	#$C,d3
0000CDF0 0828 0000 0022             		btst	#0,obStatus(a0)
0000CDF6 6600                       		bne.s	loc_AD6A
0000CDF8 0443 0018                  		subi.w	#$18,d3
0000CDFC                            
0000CDFC                            loc_AD6A:
0000CDFC 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CE02 0C41 000C                  		cmpi.w	#$C,d1
0000CE06 6C00                       		bge.s	loc_AD84
0000CE08 4E75                       		rts	
0000CE0A                            ; ===========================================================================
0000CE0A                            
0000CE0A                            loc_AD78:
0000CE0A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CE10 D368 000C                  		add.w	d1,obY(a0)
0000CE14 4E75                       		rts	
0000CE16                            ; ===========================================================================
0000CE16                            
0000CE16                            loc_AD84:
0000CE16 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CE1C 6700                       		beq.s	loc_ADA4
0000CE1E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CE22 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CE28 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CE2E 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CE34 4E75                       		rts	
0000CE36                            ; ===========================================================================
0000CE36                            
0000CE36                            loc_ADA4:
0000CE36 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE3A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CE40 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CE46 4E75                       		rts	
0000CE48                            ; ===========================================================================
0000CE48                            
0000CE48                            Burro_Jump:
0000CE48 6100 0000                  		bsr.w	SpeedToPos
0000CE4C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CE52 6B00                       		bmi.s	locret_ADF0
0000CE54 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CE5A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CE60 4A41                       		tst.w	d1
0000CE62 6A00                       		bpl.s	locret_ADF0
0000CE64 D368 000C                  		add.w	d1,obY(a0)
0000CE68 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CE6E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE74 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE7A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CE7E 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CE82                            
0000CE82                            locret_ADF0:
0000CE82 4E75                       		rts	
0000CE84                            ; ===========================================================================
0000CE84                            
0000CE84                            Burro_ChkSonic:
0000CE84 343C 0060                  		move.w	#$60,d2
0000CE88 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CE8C 6400                       		bcc.s	locret_AE20
0000CE8E 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CE92 9068 000C                  		sub.w	obY(a0),d0
0000CE96 6400                       		bcc.s	locret_AE20
0000CE98 0C40 FF80                  		cmpi.w	#-$80,d0
0000CE9C 6500                       		bcs.s	locret_AE20
0000CE9E 4A78 FE08                  		tst.w	(v_debuguse).w
0000CEA2 6600                       		bne.s	locret_AE20
0000CEA4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CEA8 3141 0010                  		move.w	d1,obVelX(a0)
0000CEAC 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CEB2                            
0000CEB2                            locret_AE20:
0000CEB2 4E75                       		rts	
0000CEB4                            
0000CEB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEB4                            
0000CEB4                            
0000CEB4                            Burro_ChkSonic2:
0000CEB4 323C 0080                  		move.w	#$80,d1
0000CEB8 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CEBE 3038 D008                  		move.w	(v_player+obX).w,d0
0000CEC2 9068 0008                  		sub.w	obX(a0),d0
0000CEC6 6400                       		bcc.s	loc_AE40
0000CEC8 4440                       		neg.w	d0
0000CECA 4441                       		neg.w	d1
0000CECC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CED2                            
0000CED2                            loc_AE40:
0000CED2 B042                       		cmp.w	d2,d0
0000CED4 4E75                       		rts	
0000CED6                            ; End of function Burro_ChkSonic2
0000CED6                            ; End of function Burro_ChkSonic2
0000CED6                            		include	"_anim\Burrobot.asm"
0000CED6                            ; ---------------------------------------------------------------------------
0000CED6                            ; Animation script - Burrobot enemy
0000CED6                            ; ---------------------------------------------------------------------------
0000CED6 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CED8 0000                       		dc.w @walk2-Ani_Burro
0000CEDA 0000                       		dc.w @digging-Ani_Burro
0000CEDC 0000                       		dc.w @fall-Ani_Burro
0000CEDE 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CEE2 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CEE6 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CEEA 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CEEE 00                         		even
0000CEEE 00                         		even
0000CEEE                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CEEE                            ; --------------------------------------------------------------------------------
0000CEEE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CEEE                            ; --------------------------------------------------------------------------------
0000CEEE                            
0000CEEE                            SME_Ag_86:	
0000CEEE 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CEF2 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CEF6 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CEFA 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CEFC 02                         SME_Ag_86_E:	dc.b 2	
0000CEFD EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CF02 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CF07 02                         SME_Ag_86_19:	dc.b 2	
0000CF08 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF0D 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CF12 02                         SME_Ag_86_24:	dc.b 2	
0000CF13 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CF18 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CF1D 02                         SME_Ag_86_2F:	dc.b 2	
0000CF1E E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CF23 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CF28 02                         SME_Ag_86_3A:	dc.b 2	
0000CF29 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CF2E 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CF33 02                         SME_Ag_86_45:	dc.b 2	
0000CF34 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CF39 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CF3E 02                         SME_Ag_86_50:	dc.b 2	
0000CF3F EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF44 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CF4A 00                         		even
0000CF4A 00                         		even
0000CF4A                            
0000CF4A                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CF4A                            ; ---------------------------------------------------------------------------
0000CF4A                            ; Object 2F - large grass-covered platforms (MZ)
0000CF4A                            ; ---------------------------------------------------------------------------
0000CF4A                            
0000CF4A                            LargeGrass:
0000CF4A 7000                       		moveq	#0,d0
0000CF4C 1028 0024                  		move.b	obRoutine(a0),d0
0000CF50 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CF54 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CF58                            ; ===========================================================================
0000CF58 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CF5A 0000                       		dc.w LGrass_Action-LGrass_Index
0000CF5C                            
0000CF5C =0000002A                  lgrass_origX:	equ $2A
0000CF5C =0000002C                  lgrass_origY:	equ $2C
0000CF5C                            
0000CF5C 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CF5E 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CF60 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CF62 0140                       		dc.b 1,	$40
0000CF64 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CF66 0220                       		dc.b 2,	$20
0000CF68                            ; ===========================================================================
0000CF68                            
0000CF68                            LGrass_Main:	; Routine 0
0000CF68 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF6C 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CF74 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CF7A 117C 0004 0001             		move.b	#4,obRender(a0)
0000CF80 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF86 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CF8C 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CF92 7000                       		moveq	#0,d0
0000CF94 1028 0028                  		move.b	obSubtype(a0),d0
0000CF98 E448                       		lsr.w	#2,d0
0000CF9A 0240 001C                  		andi.w	#$1C,d0
0000CF9E 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CFA2 3019                       		move.w	(a1)+,d0
0000CFA4 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CFA8 214A 0030                  		move.l	a2,$30(a0)
0000CFAC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CFB0 1151 0014                  		move.b	(a1),obActWid(a0)
0000CFB4 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000CFBA 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000CFC0 08E8 0004 0001             		bset	#4,1(a0)
0000CFC6                            
0000CFC6                            LGrass_Action:	; Routine 2
0000CFC6 6100 0000                  		bsr.w	LGrass_Types
0000CFCA 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CFCE 6700                       		beq.s	LGrass_Solid
0000CFD0 7200                       		moveq	#0,d1
0000CFD2 1228 0014                  		move.b	obActWid(a0),d1
0000CFD6 0641 000B                  		addi.w	#$B,d1
0000CFDA 6100 BFA4                  		bsr.w	ExitPlatform
0000CFDE 0829 0003 0022             		btst	#3,obStatus(a1)
0000CFE4 6600 0000                  		bne.w	LGrass_Slope
0000CFE8 4228 0025                  		clr.b	ob2ndRout(a0)
0000CFEC 6000                       		bra.s	LGrass_Display
0000CFEE                            ; ===========================================================================
0000CFEE                            
0000CFEE                            LGrass_Slope:
0000CFEE 7200                       		moveq	#0,d1
0000CFF0 1228 0014                  		move.b	obActWid(a0),d1
0000CFF4 0641 000B                  		addi.w	#$B,d1
0000CFF8 2468 0030                  		movea.l	$30(a0),a2
0000CFFC 3428 0008                  		move.w	obX(a0),d2
0000D000 6100 CF18                  		bsr.w	SlopeObject2
0000D004 6000                       		bra.s	LGrass_Display
0000D006                            ; ===========================================================================
0000D006                            
0000D006                            LGrass_Solid:
0000D006 7200                       		moveq	#0,d1
0000D008 1228 0014                  		move.b	obActWid(a0),d1
0000D00C 0641 000B                  		addi.w	#$B,d1
0000D010 343C 0020                  		move.w	#$20,d2
0000D014 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D01A 6600                       		bne.s	loc_AF8E
0000D01C 343C 0030                  		move.w	#$30,d2
0000D020                            
0000D020                            loc_AF8E:
0000D020 2468 0030                  		movea.l	$30(a0),a2
0000D024 6100 0000                  		bsr.w	SolidObject2F
0000D028                            
0000D028                            LGrass_Display:
0000D028 6100 0000                  		bsr.w	DisplaySprite
0000D02C 6000 0000                  		bra.w	LGrass_ChkDel
0000D030                            
0000D030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D030                            
0000D030                            
0000D030                            LGrass_Types:
0000D030 7000                       		moveq	#0,d0
0000D032 1028 0028                  		move.b	obSubtype(a0),d0
0000D036 0240 0007                  		andi.w	#7,d0
0000D03A D040                       		add.w	d0,d0
0000D03C 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D040 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D044                            ; End of function LGrass_Types
0000D044                            
0000D044                            ; ===========================================================================
0000D044 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D046 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D048 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D04A 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D04C 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D04E 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D050                            ; ===========================================================================
0000D050                            
0000D050                            LGrass_Type00:
0000D050 4E75                       		rts			; type 00 platform doesn't move
0000D052                            ; ===========================================================================
0000D052                            
0000D052                            LGrass_Type01:
0000D052 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D056 323C 0020                  		move.w	#$20,d1
0000D05A 6000                       		bra.s	LGrass_Move
0000D05C                            ; ===========================================================================
0000D05C                            
0000D05C                            LGrass_Type02:
0000D05C 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D060 323C 0030                  		move.w	#$30,d1
0000D064 6000                       		bra.s	LGrass_Move
0000D066                            ; ===========================================================================
0000D066                            
0000D066                            LGrass_Type03:
0000D066 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D06A 323C 0040                  		move.w	#$40,d1
0000D06E 6000                       		bra.s	LGrass_Move
0000D070                            ; ===========================================================================
0000D070                            
0000D070                            LGrass_Type04:
0000D070 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D074 323C 0060                  		move.w	#$60,d1
0000D078                            
0000D078                            LGrass_Move:
0000D078 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D07E 6700                       		beq.s	loc_AFF2
0000D080 4440                       		neg.w	d0
0000D082 D041                       		add.w	d1,d0
0000D084                            
0000D084                            loc_AFF2:
0000D084 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D088 9240                       		sub.w	d0,d1
0000D08A 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D08E 4E75                       		rts	
0000D090                            ; ===========================================================================
0000D090                            
0000D090                            LGrass_Type05:
0000D090 1028 0034                  		move.b	$34(a0),d0
0000D094 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D098 6600                       		bne.s	loc_B010
0000D09A 5500                       		subq.b	#2,d0
0000D09C 6400                       		bcc.s	loc_B01C
0000D09E 7000                       		moveq	#0,d0
0000D0A0 6000                       		bra.s	loc_B01C
0000D0A2                            ; ===========================================================================
0000D0A2                            
0000D0A2                            loc_B010:
0000D0A2 5800                       		addq.b	#4,d0
0000D0A4 0C00 0040                  		cmpi.b	#$40,d0
0000D0A8 6500                       		bcs.s	loc_B01C
0000D0AA 103C 0040                  		move.b	#$40,d0
0000D0AE                            
0000D0AE                            loc_B01C:
0000D0AE 1140 0034                  		move.b	d0,$34(a0)
0000D0B2 4EB9 0000 37AE             		jsr	(CalcSine).l
0000D0B8 E848                       		lsr.w	#4,d0
0000D0BA 3200                       		move.w	d0,d1
0000D0BC D068 002C                  		add.w	lgrass_origY(a0),d0
0000D0C0 3140 000C                  		move.w	d0,obY(a0)
0000D0C4 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D0CA 6600                       		bne.s	loc_B07A
0000D0CC 4A28 0035                  		tst.b	$35(a0)
0000D0D0 6600                       		bne.s	loc_B07A
0000D0D2 117C 0001 0035             		move.b	#1,$35(a0)
0000D0D8 6100 0000                  		bsr.w	FindNextFreeObj
0000D0DC 6600                       		bne.s	loc_B07A
0000D0DE 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D0E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D0E8 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D0EE 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D0F2 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D0F6 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D0FC 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D102 2348 0038                  		move.l	a0,$38(a1)
0000D106 2448                       		movea.l	a0,a2
0000D108 6100                       		bsr.s	sub_B09C
0000D10A                            
0000D10A                            loc_B07A:
0000D10A 7400                       		moveq	#0,d2
0000D10C 45E8 0036                  		lea	$36(a0),a2
0000D110 141A                       		move.b	(a2)+,d2
0000D112 5302                       		subq.b	#1,d2
0000D114 6500                       		bcs.s	locret_B09A
0000D116                            
0000D116                            loc_B086:
0000D116 7000                       		moveq	#0,d0
0000D118 101A                       		move.b	(a2)+,d0
0000D11A ED48                       		lsl.w	#6,d0
0000D11C 0640 D000                  		addi.w	#$D000,d0
0000D120 3240                       		movea.w	d0,a1
0000D122 3341 003C                  		move.w	d1,$3C(a1)
0000D126 51CA FFEE                  		dbf	d2,loc_B086
0000D12A                            
0000D12A                            locret_B09A:
0000D12A 4E75                       		rts	
0000D12C                            
0000D12C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D12C                            
0000D12C                            
0000D12C                            sub_B09C:
0000D12C 45EA 0036                  		lea	$36(a2),a2
0000D130 7000                       		moveq	#0,d0
0000D132 1012                       		move.b	(a2),d0
0000D134 5212                       		addq.b	#1,(a2)
0000D136 45F2 0001                  		lea	1(a2,d0.w),a2
0000D13A 3009                       		move.w	a1,d0
0000D13C 0440 D000                  		subi.w	#$D000,d0
0000D140 EC48                       		lsr.w	#6,d0
0000D142 0240 007F                  		andi.w	#$7F,d0
0000D146 1480                       		move.b	d0,(a2)
0000D148 4E75                       		rts	
0000D14A                            ; End of function sub_B09C
0000D14A                            
0000D14A                            ; ===========================================================================
0000D14A                            
0000D14A                            LGrass_ChkDel:
0000D14A 4A28 0035                  		tst.b	$35(a0)
0000D14E 6700                       		beq.s	loc_B0C6
0000D150 4A28 0001                  		tst.b	obRender(a0)
0000D154 6A00                       		bpl.s	LGrass_DelFlames
0000D156                            
0000D156                            loc_B0C6:
0000D174 4E75                       		rts	
0000D176                            ; ===========================================================================
0000D176                            
0000D176                            LGrass_DelFlames:
0000D176 7400                       		moveq	#0,d2
0000D178                            
0000D178                            loc_B0E8:
0000D178 45E8 0036                  		lea	$36(a0),a2
0000D17C 1412                       		move.b	(a2),d2
0000D17E 421A                       		clr.b	(a2)+
0000D180 5302                       		subq.b	#1,d2
0000D182 6500                       		bcs.s	locret_B116
0000D184                            
0000D184                            loc_B0F4:
0000D184 7000                       		moveq	#0,d0
0000D186 1012                       		move.b	(a2),d0
0000D188 421A                       		clr.b	(a2)+
0000D18A ED48                       		lsl.w	#6,d0
0000D18C 0640 D000                  		addi.w	#$D000,d0
0000D190 3240                       		movea.w	d0,a1
0000D192 6100 0000                  		bsr.w	DeleteChild
0000D196 51CA FFEC                  		dbf	d2,loc_B0F4
0000D19A 117C 0000 0035             		move.b	#0,$35(a0)
0000D1A0 117C 0000 0034             		move.b	#0,$34(a0)
0000D1A6                            
0000D1A6                            locret_B116:
0000D1A6 4E75                       		rts	
0000D1A8                            ; ===========================================================================
0000D1A8                            ; ---------------------------------------------------------------------------
0000D1A8                            ; Collision data for large moving platforms (MZ)
0000D1A8                            ; ---------------------------------------------------------------------------
0000D1A8                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D1F4                            		even
0000D1F4                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D220                            		even
0000D220                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D26C                            		even
0000D26C                            		even
0000D26C                            		include	"_incObj\35 Burning Grass.asm"
0000D26C                            ; ---------------------------------------------------------------------------
0000D26C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D26C                            ; (appears when	you walk on sinking platforms)
0000D26C                            ; ---------------------------------------------------------------------------
0000D26C                            
0000D26C                            GrassFire:
0000D26C 7000                       		moveq	#0,d0
0000D26E 1028 0024                  		move.b	obRoutine(a0),d0
0000D272 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D276 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D27A                            ; ===========================================================================
0000D27A 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D27C 0000                       		dc.w loc_B238-GFire_Index
0000D27E 0000                       		dc.w GFire_Move-GFire_Index
0000D280                            
0000D280 =0000002A                  gfire_origX:	equ $2A
0000D280                            ; ===========================================================================
0000D280                            
0000D280                            GFire_Main:	; Routine 0
0000D280 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D284 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D28C 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D292 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D298 117C 0004 0001             		move.b	#4,obRender(a0)
0000D29E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D2A4 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D2AA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D2BA 4A28 0028                  		tst.b	obSubtype(a0)
0000D2BE 6700                       		beq.s	loc_B238
0000D2C0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D2C4 6000 0000                  		bra.w	GFire_Move
0000D2C8                            ; ===========================================================================
0000D2C8                            
0000D2C8                            loc_B238:	; Routine 2
0000D2C8 2268 0030                  		movea.l	$30(a0),a1
0000D2CC 3228 0008                  		move.w	obX(a0),d1
0000D2D0 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D2D4 0641 000C                  		addi.w	#$C,d1
0000D2D8 3001                       		move.w	d1,d0
0000D2DA E248                       		lsr.w	#1,d0
0000D2DC 1031 0000                  		move.b	(a1,d0.w),d0
0000D2E0 4440                       		neg.w	d0
0000D2E2 D068 002C                  		add.w	$2C(a0),d0
0000D2E6 3400                       		move.w	d0,d2
0000D2E8 D068 003C                  		add.w	$3C(a0),d0
0000D2EC 3140 000C                  		move.w	d0,obY(a0)
0000D2F0 0C41 0084                  		cmpi.w	#$84,d1
0000D2F4 6400                       		bcc.s	loc_B2B0
0000D2F6 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D2FE 0C41 0080                  		cmpi.w	#$80,d1
0000D302 6400                       		bcc.s	loc_B2B0
0000D304 2028 0008                  		move.l	obX(a0),d0
0000D308 0680 0008 0000             		addi.l	#$80000,d0
0000D30E 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D314 6600                       		bne.s	loc_B2B0
0000D316 6100 0000                  		bsr.w	FindNextFreeObj
0000D31A 6600                       		bne.s	loc_B2B0
0000D31C 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D320 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D326 3342 002C                  		move.w	d2,$2C(a1)
0000D32A 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D330 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D336 2468 0038                  		movea.l	$38(a0),a2
0000D33A 6100 FDF0                  		bsr.w	sub_B09C
0000D33E                            
0000D33E                            loc_B2B0:
0000D33E 6000                       		bra.s	GFire_Animate
0000D340                            ; ===========================================================================
0000D340                            
0000D340                            GFire_Move:	; Routine 4
0000D340 3028 002C                  		move.w	$2C(a0),d0
0000D344 D068 003C                  		add.w	$3C(a0),d0
0000D348 3140 000C                  		move.w	d0,obY(a0)
0000D34C                            
0000D34C                            GFire_Animate:
0000D34C 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D352 6100 F456                  		bsr.w	AnimateSprite
0000D356 6000 0000                  		bra.w	DisplaySprite
0000D356 6000 0000                  		bra.w	DisplaySprite
0000D35A                            		include	"_anim\Burning Grass.asm"
0000D35A                            ; ---------------------------------------------------------------------------
0000D35A                            ; Animation script - burning grass that sits on the floor (MZ)
0000D35A                            ; ---------------------------------------------------------------------------
0000D35A 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D35C 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D362                            		even
0000D362                            		even
0000D362                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D362                            ; ---------------------------------------------------------------------------
0000D362                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D362                            ; ---------------------------------------------------------------------------
0000D362                            Map_LGrass_internal:
0000D362 0000                       		dc.w @wide-Map_LGrass_internal
0000D364 0000                       		dc.w @sloped-Map_LGrass_internal
0000D366 0000                       		dc.w @narrow-Map_LGrass_internal
0000D368 0D                         @wide:		dc.b $D
0000D369 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D36E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D373 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D378 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D37D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D382 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D387 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D38C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D391 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D396 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D39B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D3A0 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D3A5 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D3AA 0A                         @sloped:	dc.b $A
0000D3AB D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D3B0 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D3B5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D3BA C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D3BF E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D3C4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D3C9 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D3CE E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D3D3 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D3D8 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D3DD 06                         @narrow:	dc.b 6
0000D3DE D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D3E3 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D3E8 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D3ED D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D3F2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D3F7 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D3FC                            		even
0000D3FC                            		even
0000D3FC                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D3FC                            ; --------------------------------------------------------------------------------
0000D3FC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D3FC                            ; --------------------------------------------------------------------------------
0000D3FC                            
0000D3FC                            SME_gyvTV:	
0000D3FC 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D400 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D404 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D408 01                         SME_gyvTV_C:	dc.b 1	
0000D409 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D40E 01                         SME_gyvTV_12:	dc.b 1	
0000D40F E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D414 01                         SME_gyvTV_18:	dc.b 1	
0000D415 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D41A 01                         SME_gyvTV_1E:	dc.b 1	
0000D41B F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D420 01                         SME_gyvTV_24:	dc.b 1	
0000D421 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D426 01                         SME_gyvTV_2A:	dc.b 1	
0000D427 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D42C                            		even
0000D42C                            		even
0000D42C                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C                            ; Object 30 - large green glass blocks (MZ)
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C                            
0000D42C                            GlassBlock:
0000D42C 7000                       		moveq	#0,d0
0000D42E 1028 0024                  		move.b	obRoutine(a0),d0
0000D432 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D436 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D458 6000 0000                  		bra.w	DisplaySprite
0000D45C                            ; ===========================================================================
0000D45C                            
0000D45C                            Glass_Delete:
0000D45C 6000 0000                  		bra.w	DeleteObject
0000D460                            ; ===========================================================================
0000D460 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D462 0000                       		dc.w Glass_Block012-Glass_Index
0000D464 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D466 0000                       		dc.w Glass_Block34-Glass_Index
0000D468 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D46A                            
0000D46A =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D46A =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D46A                            
0000D46A 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D46D 0400 01                    		dc.b 4,	0, 1
0000D470 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D473 0800 01                    		dc.b 8,	0, 1
0000D476                            ; ===========================================================================
0000D476                            
0000D476                            Glass_Main:	; Routine 0
0000D476 45F9 0000 D46A             		lea	(Glass_Vars1).l,a2
0000D47C 7201                       		moveq	#1,d1
0000D47E 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D484 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D48A 6500                       		bcs.s	@IsType012	; if yes, branch
0000D48C                            
0000D48C 45F9 0000 D470             		lea	(Glass_Vars2).l,a2
0000D492 7201                       		moveq	#1,d1
0000D494 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D49A                            
0000D49A                            	@IsType012:
0000D49A 2248                       		movea.l	a0,a1
0000D49C 6000                       		bra.s	@Load		; load main object
0000D49E                            ; ===========================================================================
0000D49E                            
0000D49E                            	@Repeat:
0000D49E 6100 0000                  		bsr.w	FindNextFreeObj
0000D4A2 6600                       		bne.s	@Fail
0000D4A4                            
0000D4A4                            @Load:
0000D4A4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D4A8 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D4AC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D4B2 101A                       		move.b	(a2)+,d0
0000D4B4 4880                       		ext.w	d0
0000D4B6 D068 000C                  		add.w	obY(a0),d0
0000D4BA 3340 000C                  		move.w	d0,obY(a1)
0000D4BE 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D4C6 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D4CC 137C 0004 0001             		move.b	#4,obRender(a1)
0000D4D2 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D4D8 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D4DE 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D4E4 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D4EA 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D4EE 2348 003C                  		move.l	a0,glass_parent(a1)
0000D4F2 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D4F6                            
0000D4F6 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D4FC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D502 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D506 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D50C                            
0000D50C                            	@Fail:
0000D50C 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D512 08E8 0004 0001             		bset	#4,obRender(a0)
0000D518                            
0000D518                            Glass_Block012:	; Routine 2
0000D518 6100 0000                  		bsr.w	Glass_Types
0000D51C 323C 002B                  		move.w	#$2B,d1
0000D520 343C 0048                  		move.w	#$48,d2
0000D524 363C 0049                  		move.w	#$49,d3
0000D528 3828 0008                  		move.w	obX(a0),d4
0000D52C 6000 0000                  		bra.w	SolidObject
0000D530                            ; ===========================================================================
0000D530                            
0000D530                            Glass_Reflect012:
0000D530                            		; Routine 4
0000D530 2268 003C                  		movea.l	$3C(a0),a1
0000D534 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D53A 6000 0000                  		bra.w	Glass_Types
0000D53E                            ; ===========================================================================
0000D53E                            
0000D53E                            Glass_Block34:	; Routine 6
0000D53E 6100 0000                  		bsr.w	Glass_Types
0000D542 323C 002B                  		move.w	#$2B,d1
0000D546 343C 0038                  		move.w	#$38,d2
0000D54A 363C 0039                  		move.w	#$39,d3
0000D54E 3828 0008                  		move.w	obX(a0),d4
0000D552 6000 0000                  		bra.w	SolidObject
0000D556                            ; ===========================================================================
0000D556                            
0000D556                            Glass_Reflect34:
0000D556                            		; Routine 8
0000D556 2268 003C                  		movea.l	$3C(a0),a1
0000D55A 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D560 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D566 6000 0000                  		bra.w	Glass_Types
0000D56A                            
0000D56A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D56A                            
0000D56A                            
0000D56A                            Glass_Types:
0000D56A 7000                       		moveq	#0,d0
0000D56C 1028 0028                  		move.b	obSubtype(a0),d0
0000D570 0240 0007                  		andi.w	#7,d0
0000D574 D040                       		add.w	d0,d0
0000D576 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D57A 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D57E                            ; End of function Glass_Types
0000D57E                            
0000D57E                            ; ===========================================================================
0000D57E 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D580 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D582 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D584 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D586 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D588                            ; ===========================================================================
0000D588                            
0000D588                            Glass_Type00:
0000D588 4E75                       		rts	
0000D58A                            ; ===========================================================================
0000D58A                            
0000D58A                            Glass_Type01:
0000D58A 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D58E 323C 0040                  		move.w	#$40,d1
0000D592 6000                       		bra.s	loc_B514
0000D594                            ; ===========================================================================
0000D594                            
0000D594                            Glass_Type02:
0000D594 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D598 323C 0040                  		move.w	#$40,d1
0000D59C 4440                       		neg.w	d0
0000D59E D041                       		add.w	d1,d0
0000D5A0                            
0000D5A0                            loc_B514:
0000D5A0 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D5A6 6700                       		beq.s	loc_B526
0000D5A8 4440                       		neg.w	d0
0000D5AA D041                       		add.w	d1,d0
0000D5AC E208                       		lsr.b	#1,d0
0000D5AE 0640 0020                  		addi.w	#$20,d0
0000D5B2                            
0000D5B2                            loc_B526:
0000D5B2 6000 0000                  		bra.w	loc_B5EE
0000D5B6                            ; ===========================================================================
0000D5B6                            
0000D5B6                            Glass_Type03:
0000D5B6 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D5BC 6700                       		beq.s	loc_B53E
0000D5BE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D5C2 0440 0010                  		subi.w	#$10,d0
0000D5C6 6000 0000                  		bra.w	loc_B5EE
0000D5CA                            ; ===========================================================================
0000D5CA                            
0000D5CA                            loc_B53E:
0000D5CA 0828 0003 0022             		btst	#3,obStatus(a0)
0000D5D0 6600                       		bne.s	loc_B54E
0000D5D2 08A8 0000 0034             		bclr	#0,$34(a0)
0000D5D8 6000                       		bra.s	loc_B582
0000D5DA                            ; ===========================================================================
0000D5DA                            
0000D5DA                            loc_B54E:
0000D5DA 4A28 0034                  		tst.b	$34(a0)
0000D5DE 6600                       		bne.s	loc_B582
0000D5E0 117C 0001 0034             		move.b	#1,$34(a0)
0000D5E6 08E8 0000 0035             		bset	#0,$35(a0)
0000D5EC 6700                       		beq.s	loc_B582
0000D5EE 08E8 0007 0034             		bset	#7,$34(a0)
0000D5F4 317C 0010 0036             		move.w	#$10,$36(a0)
0000D5FA 117C 000A 0038             		move.b	#$A,$38(a0)
0000D600 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D606 6600                       		bne.s	loc_B582
0000D608 317C 0040 0036             		move.w	#$40,$36(a0)
0000D60E                            
0000D60E                            loc_B582:
0000D60E 4A28 0034                  		tst.b	$34(a0)
0000D612 6A00                       		bpl.s	loc_B5AA
0000D614 4A28 0038                  		tst.b	$38(a0)
0000D618 6700                       		beq.s	loc_B594
0000D61A 5328 0038                  		subq.b	#1,$38(a0)
0000D61E 6600                       		bne.s	loc_B5AA
0000D620                            
0000D620                            loc_B594:
0000D620 4A68 0032                  		tst.w	glass_dist(a0)
0000D624 6700                       		beq.s	loc_B5A4
0000D626 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D62A 5368 0036                  		subq.w	#1,$36(a0)
0000D62E 6600                       		bne.s	loc_B5AA
0000D630                            
0000D630                            loc_B5A4:
0000D630 08A8 0007 0034             		bclr	#7,$34(a0)
0000D636                            
0000D636                            loc_B5AA:
0000D636 3028 0032                  		move.w	glass_dist(a0),d0
0000D63A 6000                       		bra.s	loc_B5EE
0000D63C                            ; ===========================================================================
0000D63C                            
0000D63C                            Glass_Type04:
0000D63C 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D642 6700                       		beq.s	Glass_ChkSwitch
0000D644 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D648 0440 0010                  		subi.w	#$10,d0
0000D64C 6000                       		bra.s	loc_B5EE
0000D64E                            ; ===========================================================================
0000D64E                            
0000D64E                            Glass_ChkSwitch:
0000D64E 4A28 0034                  		tst.b	$34(a0)
0000D652 6600                       		bne.s	loc_B5E0
0000D654 45F8 F7E0                  		lea	(f_switch).w,a2
0000D658 7000                       		moveq	#0,d0
0000D65A 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D65E E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D660 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D664 6700                       		beq.s	loc_B5EA	; if not, branch
0000D666 117C 0001 0034             		move.b	#1,$34(a0)
0000D66C                            
0000D66C                            loc_B5E0:
0000D66C 4A68 0032                  		tst.w	glass_dist(a0)
0000D670 6700                       		beq.s	loc_B5EA
0000D672 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D676                            
0000D676                            loc_B5EA:
0000D676 3028 0032                  		move.w	glass_dist(a0),d0
0000D67A                            
0000D67A                            loc_B5EE:
0000D67A 3228 0030                  		move.w	$30(a0),d1
0000D67E 9240                       		sub.w	d0,d1
0000D680 3141 000C                  		move.w	d1,obY(a0)
0000D684 4E75                       		rts	
0000D684 4E75                       		rts	
0000D686                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D686                            ; --------------------------------------------------------------------------------
0000D686                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D686                            ; --------------------------------------------------------------------------------
0000D686                            
0000D686                            SME_NEyTf:	
0000D686 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D68A 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D68C 0C                         SME_NEyTf_6:	dc.b $C	
0000D68D B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D692 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D697 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D69C C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D6A1 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D6A6 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D6AB 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D6B0 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D6B5 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D6BA 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D6BF 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D6C4 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D6C9 02                         SME_NEyTf_43:	dc.b 2	
0000D6CA 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D6CF 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D6D4 0A                         SME_NEyTf_4E:	dc.b $A	
0000D6D5 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D6DA C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D6DF D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D6E4 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D6E9 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D6EE F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D6F3 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D6F8 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D6FD 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D702 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D708 00                         		even
0000D708 00                         		even
0000D708                            		include	"_incObj\31 Chained Stompers.asm"
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            
0000D708                            ChainStomp:
0000D708 7000                       		moveq	#0,d0
0000D70A 1028 0024                  		move.b	obRoutine(a0),d0
0000D70E 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D712 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D716                            ; ===========================================================================
0000D716 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D718 0000                       		dc.w loc_B798-CStom_Index
0000D71A 0000                       		dc.w loc_B7FE-CStom_Index
0000D71C 0000                       		dc.w CStom_Display2-CStom_Index
0000D71E 0000                       		dc.w loc_B7E2-CStom_Index
0000D720                            
0000D720 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D720                            
0000D720 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D722 0100                       		dc.b 1,	0
0000D724                            
0000D724 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D727 041C 01                    		dc.b 4,	$1C, 1
0000D72A 08CC 03                    		dc.b 8,	$CC, 3
0000D72D 06F0 02                    		dc.b 6,	$F0, 2
0000D730                            
0000D730 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D734 5000 7800                  		dc.w $5000, $7800
0000D738 3800 5800                  		dc.w $3800, $5800
0000D73C B800                       		dc.w $B800
0000D73E                            ; ===========================================================================
0000D73E                            
0000D73E                            CStom_Main:	; Routine 0
0000D73E 7000                       		moveq	#0,d0
0000D740 1028 0028                  		move.b	obSubtype(a0),d0
0000D744 6A00                       		bpl.s	loc_B6CE
0000D746 0240 007F                  		andi.w	#$7F,d0
0000D74A D040                       		add.w	d0,d0
0000D74C 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D750 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D754 101A                       		move.b	(a2)+,d0
0000D756 1140 0028                  		move.b	d0,obSubtype(a0)
0000D75A                            
0000D75A                            loc_B6CE:
0000D75A 0200 000F                  		andi.b	#$F,d0
0000D75E D040                       		add.w	d0,d0
0000D760 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D764 4A40                       		tst.w	d0
0000D766 6600                       		bne.s	loc_B6E0
0000D768 3142 0032                  		move.w	d2,$32(a0)
0000D76C                            
0000D76C                            loc_B6E0:
0000D76C 45F9 0000 D724             		lea	(CStom_Var).l,a2
0000D772 2248                       		movea.l	a0,a1
0000D774 7203                       		moveq	#3,d1
0000D776 6000                       		bra.s	CStom_MakeStomper
0000D778                            ; ===========================================================================
0000D778                            
0000D778                            CStom_Loop:
0000D778 6100 0000                  		bsr.w	FindNextFreeObj
0000D77C 6600 0000                  		bne.w	CStom_SetSize
0000D780                            
0000D780                            CStom_MakeStomper:
0000D780 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D784 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D788 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D78E 101A                       		move.b	(a2)+,d0
0000D790 4880                       		ext.w	d0
0000D792 D068 000C                  		add.w	obY(a0),d0
0000D796 3340 000C                  		move.w	d0,obY(a1)
0000D79A 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D7A2 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D7A8 137C 0004 0001             		move.b	#4,obRender(a1)
0000D7AE 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D7B4 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D7BA 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D7C0 3342 0034                  		move.w	d2,$34(a1)
0000D7C4 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D7CA 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D7CE 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D7D4 6600                       		bne.s	loc_B76A
0000D7D6 5341                       		subq.w	#1,d1
0000D7D8 1028 0028                  		move.b	obSubtype(a0),d0
0000D7DC 0240 00F0                  		andi.w	#$F0,d0
0000D7E0 0C40 0020                  		cmpi.w	#$20,d0
0000D7E4 679A                       		beq.s	CStom_MakeStomper
0000D7E6 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D7EC 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D7F2 5241                       		addq.w	#1,d1
0000D7F4                            
0000D7F4                            loc_B76A:
0000D7F4 2348 003C                  		move.l	a0,$3C(a1)
0000D7F8 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D7FC                            
0000D7FC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D802                            
0000D802                            CStom_SetSize:
0000D802 7000                       		moveq	#0,d0
0000D804 1028 0028                  		move.b	obSubtype(a0),d0
0000D808 E648                       		lsr.w	#3,d0
0000D80A 0200 000E                  		andi.b	#$E,d0
0000D80E 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D812 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D816 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D81A 6000                       		bra.s	loc_B798
0000D81C                            ; ===========================================================================
0000D81C 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D81E 3009                       		dc.b $30, 9
0000D820 100A                       		dc.b $10, $A
0000D822                            ; ===========================================================================
0000D822                            
0000D822                            loc_B798:	; Routine 2
0000D822 6100 0000                  		bsr.w	CStom_Types
0000D826 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D82C 7200                       		moveq	#0,d1
0000D82E 1228 0014                  		move.b	obActWid(a0),d1
0000D832 0641 000B                  		addi.w	#$B,d1
0000D836 343C 000C                  		move.w	#$C,d2
0000D83A 363C 000D                  		move.w	#$D,d3
0000D83E 3828 0008                  		move.w	obX(a0),d4
0000D842 6100 0000                  		bsr.w	SolidObject
0000D846 0828 0003 0022             		btst	#3,obStatus(a0)
0000D84C 6700                       		beq.s	CStom_Display
0000D84E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D854 6400                       		bcc.s	CStom_Display
0000D856 2448                       		movea.l	a0,a2
0000D858 41F8 D000                  		lea	(v_player).w,a0
0000D85C 4EB9 0000 0000             		jsr	(KillSonic).l
0000D862 204A                       		movea.l	a2,a0
0000D864                            
0000D864                            CStom_Display:
0000D864 6100 0000                  		bsr.w	DisplaySprite
0000D868 6000 0000                  		bra.w	CStom_ChkDel
0000D86C                            ; ===========================================================================
0000D86C                            
0000D86C                            loc_B7E2:	; Routine 8
0000D86C 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D872 08E8 0004 0001             		bset	#4,obRender(a0)
0000D878 2268 003C                  		movea.l	$3C(a0),a1
0000D87C 1029 0032                  		move.b	$32(a1),d0
0000D880 EA08                       		lsr.b	#5,d0
0000D882 5600                       		addq.b	#3,d0
0000D884 1140 001A                  		move.b	d0,obFrame(a0)
0000D888                            
0000D888                            loc_B7FE:	; Routine 4
0000D888 2268 003C                  		movea.l	$3C(a0),a1
0000D88C 7000                       		moveq	#0,d0
0000D88E 1029 0032                  		move.b	$32(a1),d0
0000D892 D068 0030                  		add.w	$30(a0),d0
0000D896 3140 000C                  		move.w	d0,obY(a0)
0000D89A                            
0000D89A                            CStom_Display2:	; Routine 6
0000D89A 6100 0000                  		bsr.w	DisplaySprite
0000D89E                            
0000D89E                            CStom_ChkDel:
0000D8BC 4E75                       		rts	
0000D8BE                            ; ===========================================================================
0000D8BE                            
0000D8BE                            CStom_Types:
0000D8BE 1028 0028                  		move.b	obSubtype(a0),d0
0000D8C2 0240 000F                  		andi.w	#$F,d0
0000D8C6 D040                       		add.w	d0,d0
0000D8C8 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D8CC 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D8D0                            ; ===========================================================================
0000D8D0 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D8D2 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8D4 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8D6 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D8D8 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8DA 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D8DC 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8DE                            ; ===========================================================================
0000D8DE                            
0000D8DE                            CStom_Type00:
0000D8DE 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D8E2 7000                       		moveq	#0,d0
0000D8E4 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D8E8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D8EC 6700                       		beq.s	loc_B8A8	; if not, branch
0000D8EE 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D8F2 6A00                       		bpl.s	loc_B872
0000D8F4 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D8FA 6700                       		beq.s	loc_B8A0
0000D8FC                            
0000D8FC                            loc_B872:
0000D8FC 4A68 0032                  		tst.w	$32(a0)
0000D900 6700                       		beq.s	loc_B8A0
0000D902 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D906 0200 000F                  		andi.b	#$F,d0
0000D90A 6600                       		bne.s	loc_B892
0000D90C 4A28 0001                  		tst.b	1(a0)
0000D910 6A00                       		bpl.s	loc_B892
0000D91C                            
0000D91C                            loc_B892:
0000D91C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D922 6400                       		bcc.s	CStom_Restart
0000D924 317C 0000 0032             		move.w	#0,$32(a0)
0000D92A                            
0000D92A                            loc_B8A0:
0000D92A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D930 6000                       		bra.s	CStom_Restart
0000D932                            ; ===========================================================================
0000D932                            
0000D932                            loc_B8A8:
0000D932 3228 0034                  		move.w	$34(a0),d1
0000D936 B268 0032                  		cmp.w	$32(a0),d1
0000D93A 6700                       		beq.s	CStom_Restart
0000D93C 3028 0012                  		move.w	obVelY(a0),d0
0000D940 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D946 D168 0032                  		add.w	d0,$32(a0)
0000D94A B268 0032                  		cmp.w	$32(a0),d1
0000D94E 6200                       		bhi.s	CStom_Restart
0000D950 3141 0032                  		move.w	d1,$32(a0)
0000D954 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D95A 4A28 0001                  		tst.b	obRender(a0)
0000D95E 6A00                       		bpl.s	CStom_Restart
0000D96A                            
0000D96A                            CStom_Restart:
0000D96A 7000                       		moveq	#0,d0
0000D96C 1028 0032                  		move.b	$32(a0),d0
0000D970 D068 0030                  		add.w	$30(a0),d0
0000D974 3140 000C                  		move.w	d0,obY(a0)
0000D978 4E75                       		rts	
0000D97A                            ; ===========================================================================
0000D97A                            
0000D97A                            CStom_Type01:
0000D97A 4A68 0036                  		tst.w	$36(a0)
0000D97E 6700                       		beq.s	loc_B938
0000D980 4A68 0038                  		tst.w	$38(a0)
0000D984 6700                       		beq.s	loc_B902
0000D986 5368 0038                  		subq.w	#1,$38(a0)
0000D98A 6000                       		bra.s	loc_B97C
0000D98C                            ; ===========================================================================
0000D98C                            
0000D98C                            loc_B902:
0000D98C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D990 0200 000F                  		andi.b	#$F,d0
0000D994 6600                       		bne.s	loc_B91C
0000D996 4A28 0001                  		tst.b	obRender(a0)
0000D99A 6A00                       		bpl.s	loc_B91C
0000D9A6                            
0000D9A6                            loc_B91C:
0000D9A6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D9AC 6400                       		bcc.s	loc_B97C
0000D9AE 317C 0000 0032             		move.w	#0,$32(a0)
0000D9B4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D9BA 317C 0000 0036             		move.w	#0,$36(a0)
0000D9C0 6000                       		bra.s	loc_B97C
0000D9C2                            ; ===========================================================================
0000D9C2                            
0000D9C2                            loc_B938:
0000D9C2 3228 0034                  		move.w	$34(a0),d1
0000D9C6 B268 0032                  		cmp.w	$32(a0),d1
0000D9CA 6700                       		beq.s	loc_B97C
0000D9CC 3028 0012                  		move.w	obVelY(a0),d0
0000D9D0 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D9D6 D168 0032                  		add.w	d0,$32(a0)
0000D9DA B268 0032                  		cmp.w	$32(a0),d1
0000D9DE 6200                       		bhi.s	loc_B97C
0000D9E0 3141 0032                  		move.w	d1,$32(a0)
0000D9E4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D9EA 317C 0001 0036             		move.w	#1,$36(a0)
0000D9F0 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D9F6 4A28 0001                  		tst.b	obRender(a0)
0000D9FA 6A00                       		bpl.s	loc_B97C
0000DA06                            
0000DA06                            loc_B97C:
0000DA06 6000 FF62                  		bra.w	CStom_Restart
0000DA0A                            ; ===========================================================================
0000DA0A                            
0000DA0A                            CStom_Type03:
0000DA0A 3038 D008                  		move.w	(v_player+obX).w,d0
0000DA0E 9068 0008                  		sub.w	obX(a0),d0
0000DA12 6400                       		bcc.s	loc_B98C
0000DA14 4440                       		neg.w	d0
0000DA16                            
0000DA16                            loc_B98C:
0000DA16 0C40 0090                  		cmpi.w	#$90,d0
0000DA1A 6400                       		bcc.s	loc_B996
0000DA1C 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DA20                            
0000DA20                            loc_B996:
0000DA20 6000 FF48                  		bra.w	CStom_Restart
0000DA20 6000 FF48                  		bra.w	CStom_Restart
0000DA24                            		include	"_incObj\45 Sideways Stomper.asm"
0000DA24                            ; ---------------------------------------------------------------------------
0000DA24                            ; Object 45 - spiked metal block from beta version (MZ)
0000DA24                            ; ---------------------------------------------------------------------------
0000DA24                            
0000DA24                            SideStomp:
0000DA24 7000                       		moveq	#0,d0
0000DA26 1028 0024                  		move.b	obRoutine(a0),d0
0000DA2A 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DA2E 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DA32                            ; ===========================================================================
0000DA32 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DA34 0000                       		dc.w SStom_Solid-SStom_Index
0000DA36 0000                       		dc.w loc_BA8E-SStom_Index
0000DA38 0000                       		dc.w SStom_Display-SStom_Index
0000DA3A 0000                       		dc.w SStom_Pole-SStom_Index
0000DA3C                            
0000DA3C                            		;	routine		frame
0000DA3C                            		;		 xpos
0000DA3C 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DA3F 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DA42 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DA45 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DA48                            
0000DA48                            ;word_B9BE:	; Note that this indicates three subtypes
0000DA48 3800                       SStom_Len:	dc.w $3800	; short
0000DA4A A000                       		dc.w $A000	; long
0000DA4C 5000                       		dc.w $5000	; medium
0000DA4E                            ; ===========================================================================
0000DA4E                            
0000DA4E                            SStom_Main:	; Routine 0
0000DA4E 7000                       		moveq	#0,d0
0000DA50 1028 0028                  		move.b	obSubtype(a0),d0
0000DA54 D040                       		add.w	d0,d0
0000DA56 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DA5A 45F9 0000 DA3C             		lea	(SStom_Var).l,a2
0000DA60 2248                       		movea.l	a0,a1
0000DA62 7203                       		moveq	#3,d1
0000DA64 6000                       		bra.s	@load
0000DA66                            
0000DA66                            	@loop:
0000DA66 6100 0000                  		bsr.w	FindNextFreeObj
0000DA6A 6600                       		bne.s	@fail
0000DA6C                            
0000DA6C                            	@load:
0000DA6C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DA70 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DA74 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DA7A 101A                       		move.b	(a2)+,d0
0000DA7C 4880                       		ext.w	d0
0000DA7E D068 0008                  		add.w	obX(a0),d0
0000DA82 3340 0008                  		move.w	d0,obX(a1)
0000DA86 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DA8E 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DA94 137C 0004 0001             		move.b	#4,obRender(a1)
0000DA9A 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DAA0 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DAA6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DAAC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DAB2 3342 0034                  		move.w	d2,$34(a1)
0000DAB6 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DABC 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DAC0 6600                       		bne.s	@notspikes	; if not, branch
0000DAC2 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DAC8                            
0000DAC8                            	@notspikes:
0000DAC8 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DACC 2348 003C                  		move.l	a0,$3C(a1)
0000DAD0 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DAD4                            
0000DAD4 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DADA                            
0000DADA                            	@fail:
0000DADA 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DAE0                            
0000DAE0                            SStom_Solid:	; Routine 2
0000DAE0 3F28 0008                  		move.w	obX(a0),-(sp)
0000DAE4 6100 0000                  		bsr.w	SStom_Move
0000DAE8 323C 0017                  		move.w	#$17,d1
0000DAEC 343C 0020                  		move.w	#$20,d2
0000DAF0 363C 0020                  		move.w	#$20,d3
0000DAF4 381F                       		move.w	(sp)+,d4
0000DAF6 6100 0000                  		bsr.w	SolidObject
0000DAFA 6100 0000                  		bsr.w	DisplaySprite
0000DAFE 6000 0000                  		bra.w	SStom_ChkDel
0000DB02                            ; ===========================================================================
0000DB02                            
0000DB02                            SStom_Pole:	; Routine 8
0000DB02 2268 003C                  		movea.l	$3C(a0),a1
0000DB06 1029 0032                  		move.b	$32(a1),d0
0000DB0A 0600 0010                  		addi.b	#$10,d0
0000DB0E EA08                       		lsr.b	#5,d0
0000DB10 5600                       		addq.b	#3,d0
0000DB12 1140 001A                  		move.b	d0,obFrame(a0)
0000DB16                            
0000DB16                            loc_BA8E:	; Routine 4
0000DB16 2268 003C                  		movea.l	$3C(a0),a1
0000DB1A 7000                       		moveq	#0,d0
0000DB1C 1029 0032                  		move.b	$32(a1),d0
0000DB20 4440                       		neg.w	d0
0000DB22 D068 0030                  		add.w	$30(a0),d0
0000DB26 3140 0008                  		move.w	d0,obX(a0)
0000DB2A                            
0000DB2A                            SStom_Display:	; Routine 6
0000DB2A 6100 0000                  		bsr.w	DisplaySprite
0000DB2E                            
0000DB2E                            SStom_ChkDel:
0000DB4C 4E75                       		rts	
0000DB4E                            
0000DB4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB4E                            
0000DB4E                            
0000DB4E                            SStom_Move:
0000DB4E 7000                       		moveq	#0,d0
0000DB50 1028 0028                  		move.b	obSubtype(a0),d0
0000DB54 D040                       		add.w	d0,d0
0000DB56 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DB5A 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DB5E                            ; End of function SStom_Move
0000DB5E                            
0000DB5E                            ; ===========================================================================
0000DB5E                            		; This indicates only two subtypes... that do the same thing
0000DB5E                            		; Compare to SStom_Len. This breaks subtype 02
0000DB5E 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DB60 0000                       		dc.w loc_BADA-off_BAD6
0000DB62                            ; ===========================================================================
0000DB62                            
0000DB62                            loc_BADA:
0000DB62 4A68 0036                  		tst.w	$36(a0)
0000DB66 6700                       		beq.s	loc_BB08
0000DB68 4A68 0038                  		tst.w	$38(a0)
0000DB6C 6700                       		beq.s	loc_BAEC
0000DB6E 5368 0038                  		subq.w	#1,$38(a0)
0000DB72 6000                       		bra.s	loc_BB3C
0000DB74                            ; ===========================================================================
0000DB74                            
0000DB74                            loc_BAEC:
0000DB74 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DB7A 6400                       		bcc.s	loc_BB3C
0000DB7C 317C 0000 0032             		move.w	#0,$32(a0)
0000DB82 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DB88 317C 0000 0036             		move.w	#0,$36(a0)
0000DB8E 6000                       		bra.s	loc_BB3C
0000DB90                            ; ===========================================================================
0000DB90                            
0000DB90                            loc_BB08:
0000DB90 3228 0034                  		move.w	$34(a0),d1
0000DB94 B268 0032                  		cmp.w	$32(a0),d1
0000DB98 6700                       		beq.s	loc_BB3C
0000DB9A 3028 0010                  		move.w	obVelX(a0),d0
0000DB9E 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DBA4 D168 0032                  		add.w	d0,$32(a0)
0000DBA8 B268 0032                  		cmp.w	$32(a0),d1
0000DBAC 6200                       		bhi.s	loc_BB3C
0000DBAE 3141 0032                  		move.w	d1,$32(a0)
0000DBB2 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DBB8 317C 0001 0036             		move.w	#1,$36(a0)
0000DBBE 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DBC4                            
0000DBC4                            loc_BB3C:
0000DBC4 7000                       		moveq	#0,d0
0000DBC6 1028 0032                  		move.b	$32(a0),d0
0000DBCA 4440                       		neg.w	d0
0000DBCC D068 0030                  		add.w	$30(a0),d0
0000DBD0 3140 0008                  		move.w	d0,obX(a0)
0000DBD4 4E75                       		rts	
0000DBD4 4E75                       		rts	
0000DBD6                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DBD6                            ; ---------------------------------------------------------------------------
0000DBD6                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DBD6                            ; ---------------------------------------------------------------------------
0000DBD6                            Map_CStom_internal:
0000DBD6 0000                       		dc.w @wideblock-Map_CStom_internal
0000DBD8 0000                       		dc.w @spikes-Map_CStom_internal
0000DBDA 0000                       		dc.w @ceiling-Map_CStom_internal
0000DBDC 0000                       		dc.w @chain1-Map_CStom_internal
0000DBDE 0000                       		dc.w @chain2-Map_CStom_internal
0000DBE0 0000                       		dc.w @chain3-Map_CStom_internal
0000DBE2 0000                       		dc.w @chain4-Map_CStom_internal
0000DBE4 0000                       		dc.w @chain5-Map_CStom_internal
0000DBE6 0000                       		dc.w @chain5-Map_CStom_internal
0000DBE8 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DBEA 0000                       		dc.w @smallblock-Map_CStom_internal
0000DBEC 05                         @wideblock:	dc.b 5
0000DBED F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DBF2 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DBF7 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DBFC F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DC01 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DC06 05                         @spikes:	dc.b 5
0000DC07 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DC0C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DC11 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DC16 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DC1B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DC20 01                         @ceiling:	dc.b 1
0000DC21 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DC26 02                         @chain1:	dc.b 2
0000DC27 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC2C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC31 04                         @chain2:	dc.b 4
0000DC32 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC37 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC3C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC41 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC46 06                         @chain3:	dc.b 6
0000DC47 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DC4C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DC51 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC56 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC5B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC60 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC65 08                         @chain4:	dc.b 8
0000DC66 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DC6B B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DC70 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DC75 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DC7A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC7F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC84 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC89 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC8E 0A                         @chain5:	dc.b $A
0000DC8F 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DC94 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DC99 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DC9E B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DCA3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DCA8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DCAD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCB2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCB7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCBC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCC1 05                         @mediumblock:	dc.b 5
0000DCC2 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DCC7 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DCCC F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DCD1 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DCD6 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DCDB 01                         @smallblock:	dc.b 1
0000DCDC EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DCE2 00                         		even
0000DCE2 00                         		even
0000DCE2                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DCE2                            ; ---------------------------------------------------------------------------
0000DCE2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DCE2                            ; ---------------------------------------------------------------------------
0000DCE2                            Map_SStom_internal:
0000DCE2 0000                       		dc.w @block-Map_SStom_internal
0000DCE4 0000                       		dc.w @spikes-Map_SStom_internal
0000DCE6 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DCE8 0000                       		dc.w @pole1-Map_SStom_internal
0000DCEA 0000                       		dc.w @pole2-Map_SStom_internal
0000DCEC 0000                       		dc.w @pole3-Map_SStom_internal
0000DCEE 0000                       		dc.w @pole4-Map_SStom_internal
0000DCF0 0000                       		dc.w @pole5-Map_SStom_internal
0000DCF2 0000                       		dc.w @pole5-Map_SStom_internal
0000DCF4 03                         @block:		dc.b 3
0000DCF5 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DCFA 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DCFF F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DD04 03                         @spikes:	dc.b 3
0000DD05 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DD0A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DD0F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DD14 01                         @wallbracket:	dc.b 1
0000DD15 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DD1A 02                         @pole1:		dc.b 2
0000DD1B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DD20 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD25 04                         @pole2:		dc.b 4
0000DD26 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD2B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD30 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD35 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD3A 06                         @pole3:		dc.b 6
0000DD3B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD40 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD45 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD4A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD4F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DD54 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DD59 08                         @pole4:		dc.b 8
0000DD5A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD5F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD64 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD69 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD6E F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DD73 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DD78 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DD7D F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DD82 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DD83 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD88 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD8D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD92 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD97 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DD9C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDA1 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DDA6 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DDAB F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DDB0 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DDB5                            		; @pole6 should be here, but it isn't...
0000DDB6 00                         		even
0000DDB6 00                         		even
0000DDB6                            
0000DDB6                            		include	"_incObj\32 Button.asm"
0000DDB6                            ; ---------------------------------------------------------------------------
0000DDB6                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DDB6                            ; ---------------------------------------------------------------------------
0000DDB6                            
0000DDB6                            Button:
0000DDB6 7000                       		moveq	#0,d0
0000DDB8 1028 0024                  		move.b	obRoutine(a0),d0
0000DDBC 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DDC0 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DDC4                            ; ===========================================================================
0000DDC4 0000                       But_Index:	dc.w But_Main-But_Index
0000DDC6 0000                       		dc.w But_Pressed-But_Index
0000DDC8                            ; ===========================================================================
0000DDC8                            
0000DDC8                            But_Main:	; Routine 0
0000DDC8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DDCC 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DDD4 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DDDA 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DDE0 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DDE2                            
0000DDE2 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DDE8                            
0000DDE8                            	But_IsMZ:
0000DDE8 117C 0004 0001             		move.b	#4,obRender(a0)
0000DDEE 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DDF4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DDFA 5668 000C                  		addq.w	#3,obY(a0)
0000DDFE                            
0000DDFE                            But_Pressed:	; Routine 2
0000DDFE 4A28 0001                  		tst.b	obRender(a0)
0000DE02 6A00                       		bpl.s	But_Display
0000DE04 323C 001B                  		move.w	#$1B,d1
0000DE08 343C 0005                  		move.w	#5,d2
0000DE0C 363C 0005                  		move.w	#5,d3
0000DE10 3828 0008                  		move.w	obX(a0),d4
0000DE14 6100 0000                  		bsr.w	SolidObject
0000DE18 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DE1E 1028 0028                  		move.b	obSubtype(a0),d0
0000DE22 0240 000F                  		andi.w	#$F,d0
0000DE26 47F8 F7E0                  		lea	(f_switch).w,a3
0000DE2A 47F3 0000                  		lea	(a3,d0.w),a3
0000DE2E 7600                       		moveq	#0,d3
0000DE30 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DE36 6700                       		beq.s	loc_BDB2
0000DE38 7607                       		moveq	#7,d3
0000DE3A                            
0000DE3A                            loc_BDB2:
0000DE3A 4A28 0028                  		tst.b	obSubtype(a0)
0000DE3E 6A00                       		bpl.s	loc_BDBE
0000DE40 6100 0000                  		bsr.w	But_MZBlock
0000DE44 6600                       		bne.s	loc_BDC8
0000DE46                            
0000DE46                            loc_BDBE:
0000DE46 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DE4A 6600                       		bne.s	loc_BDC8
0000DE4C 0793                       		bclr	d3,(a3)
0000DE4E 6000                       		bra.s	loc_BDDE
0000DE50                            ; ===========================================================================
0000DE50                            
0000DE50                            loc_BDC8:
0000DE50 4A13                       		tst.b	(a3)
0000DE52 6600                       		bne.s	loc_BDD6
0000DE5E                            
0000DE5E                            loc_BDD6:
0000DE5E 07D3                       		bset	d3,(a3)
0000DE60 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DE66                            
0000DE66                            loc_BDDE:
0000DE66 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DE6C 6700                       		beq.s	But_Display
0000DE6E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DE72 6A00                       		bpl.s	But_Display
0000DE74 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DE7A 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DE80                            
0000DE80                            But_Display:
0000DE80 6100 0000                  		bsr.w	DisplaySprite
0000DEA2 4E75                       		rts	
0000DEA4                            ; ===========================================================================
0000DEA4                            
0000DEA4                            But_Delete:
0000DEA4 6100 0000                  		bsr.w	DeleteObject
0000DEA8 4E75                       		rts	
0000DEAA                            
0000DEAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEAA                            
0000DEAA                            
0000DEAA                            But_MZBlock:
0000DEAA 3F03                       		move.w	d3,-(sp)
0000DEAC 3428 0008                  		move.w	obX(a0),d2
0000DEB0 3628 000C                  		move.w	obY(a0),d3
0000DEB4 0442 0010                  		subi.w	#$10,d2
0000DEB8 5143                       		subq.w	#8,d3
0000DEBA 383C 0020                  		move.w	#$20,d4
0000DEBE 3A3C 0010                  		move.w	#$10,d5
0000DEC2 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DEC6 3C3C 005F                  		move.w	#$5F,d6
0000DECA                            
0000DECA                            But_MZLoop:
0000DECA 4A29 0001                  		tst.b	obRender(a1)
0000DECE 6A00                       		bpl.s	loc_BE4E
0000DED0 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DED4 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DED6                            
0000DED6                            loc_BE4E:
0000DED6 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DEDA 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DEDE                            
0000DEDE 361F                       		move.w	(sp)+,d3
0000DEE0 7000                       		moveq	#0,d0
0000DEE2                            
0000DEE2                            locret_BE5A:
0000DEE2 4E75                       		rts	
0000DEE4                            ; ===========================================================================
0000DEE4 1010                       But_MZData:	dc.b $10, $10
0000DEE6                            ; ===========================================================================
0000DEE6                            
0000DEE6                            loc_BE5E:
0000DEE6 7001                       		moveq	#1,d0
0000DEE8 0240 003F                  		andi.w	#$3F,d0
0000DEEC D040                       		add.w	d0,d0
0000DEEE 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DEF2 121A                       		move.b	(a2)+,d1
0000DEF4 4881                       		ext.w	d1
0000DEF6 3029 0008                  		move.w	obX(a1),d0
0000DEFA 9041                       		sub.w	d1,d0
0000DEFC 9042                       		sub.w	d2,d0
0000DEFE 6400                       		bcc.s	loc_BE80
0000DF00 D241                       		add.w	d1,d1
0000DF02 D041                       		add.w	d1,d0
0000DF04 6500                       		bcs.s	loc_BE84
0000DF06 60CE                       		bra.s	loc_BE4E
0000DF08                            ; ===========================================================================
0000DF08                            
0000DF08                            loc_BE80:
0000DF08 B044                       		cmp.w	d4,d0
0000DF0A 62CA                       		bhi.s	loc_BE4E
0000DF0C                            
0000DF0C                            loc_BE84:
0000DF0C 121A                       		move.b	(a2)+,d1
0000DF0E 4881                       		ext.w	d1
0000DF10 3029 000C                  		move.w	obY(a1),d0
0000DF14 9041                       		sub.w	d1,d0
0000DF16 9043                       		sub.w	d3,d0
0000DF18 6400                       		bcc.s	loc_BE9A
0000DF1A D241                       		add.w	d1,d1
0000DF1C D041                       		add.w	d1,d0
0000DF1E 6500                       		bcs.s	loc_BE9E
0000DF20 60B4                       		bra.s	loc_BE4E
0000DF22                            ; ===========================================================================
0000DF22                            
0000DF22                            loc_BE9A:
0000DF22 B045                       		cmp.w	d5,d0
0000DF24 62B0                       		bhi.s	loc_BE4E
0000DF26                            
0000DF26                            loc_BE9E:
0000DF26 361F                       		move.w	(sp)+,d3
0000DF28 7001                       		moveq	#1,d0
0000DF2A 4E75                       		rts	
0000DF2C                            ; End of function But_MZBlock
0000DF2C                            ; End of function But_MZBlock
0000DF2C                            Map_But:	include	"_maps\Button.asm"
0000DF2C                            ; ---------------------------------------------------------------------------
0000DF2C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DF2C                            ; ---------------------------------------------------------------------------
0000DF2C                            Map_But_internal:
0000DF2C 0000                       		dc.w byte_BEAC-Map_But_internal
0000DF2E 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF30 0000                       		dc.w byte_BEC2-Map_But_internal
0000DF32 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF34 02                         byte_BEAC:	dc.b 2
0000DF35 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DF3A F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DF3F 02                         byte_BEB7:	dc.b 2
0000DF40 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DF45 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DF4A 02                         byte_BEC2:	dc.b 2
0000DF4B F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DF50 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DF55 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DF5A                            		even
0000DF5A                            		even
0000DF5A                            
0000DF5A                            		include	"_incObj\33 Pushable Blocks.asm"
0000DF5A                            ; ---------------------------------------------------------------------------
0000DF5A                            ; Object 33 - pushable blocks (MZ, LZ)
0000DF5A                            ; ---------------------------------------------------------------------------
0000DF5A                            
0000DF5A                            PushBlock:
0000DF5A 7000                       		moveq	#0,d0
0000DF5C 1028 0024                  		move.b	obRoutine(a0),d0
0000DF60 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DF64 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DF68                            ; ===========================================================================
0000DF68 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DF6A 0000                       		dc.w loc_BF6E-PushB_Index
0000DF6C 0000                       		dc.w loc_C02C-PushB_Index
0000DF6E                            
0000DF6E 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DF70 4001                       		dc.b $40, 1
0000DF72                            ; ===========================================================================
0000DF72                            
0000DF72                            PushB_Main:	; Routine 0
0000DF72 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DF76 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DF7C 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DF82 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DF8A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DF90 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DF96 6600                       		bne.s	@notLZ
0000DF98 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DF9E                            
0000DF9E                            	@notLZ:
0000DF9E 117C 0004 0001             		move.b	#4,obRender(a0)
0000DFA4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DFAA 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DFB0 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000DFB6 7000                       		moveq	#0,d0
0000DFB8 1028 0028                  		move.b	obSubtype(a0),d0
0000DFBC D040                       		add.w	d0,d0
0000DFBE 0240 000E                  		andi.w	#$E,d0
0000DFC2 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000DFC6 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DFCA 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DFCE 4A28 0028                  		tst.b	obSubtype(a0)
0000DFD2 6700                       		beq.s	@chkgone
0000DFD4 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000DFDA                            
0000DFDA                            	@chkgone:
0000DFDA 45F8 FC00                  		lea	(v_objstate).w,a2
0000DFDE 7000                       		moveq	#0,d0
0000DFE0 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DFE4 6700                       		beq.s	loc_BF6E
0000DFE6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DFEC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DFF2 6600 0000                  		bne.w	DeleteObject
0000DFF6                            
0000DFF6                            loc_BF6E:	; Routine 2
0000DFF6 4A28 0032                  		tst.b	$32(a0)
0000DFFA 6600 0000                  		bne.w	loc_C046
0000DFFE 7200                       		moveq	#0,d1
0000E000 1228 0014                  		move.b	obActWid(a0),d1
0000E004 0641 000B                  		addi.w	#$B,d1
0000E008 343C 0010                  		move.w	#$10,d2
0000E00C 363C 0011                  		move.w	#$11,d3
0000E010 3828 0008                  		move.w	obX(a0),d4
0000E014 6100 0000                  		bsr.w	loc_C186
0000E018 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E01E 6600                       		bne.s	loc_BFC6	; if not, branch
0000E020 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E026 3028 0008                  		move.w	obX(a0),d0
0000E02A 0C40 0A20                  		cmpi.w	#$A20,d0
0000E02E 6500                       		bcs.s	loc_BFC6
0000E030 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E034 6400                       		bcc.s	loc_BFC6
0000E036 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E03A 0440 001C                  		subi.w	#$1C,d0
0000E03E 3140 000C                  		move.w	d0,obY(a0)
0000E042 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E048 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E04E                            
0000E04E                            	loc_BFC6:
0000E06A 6000 0000                  		bra.w	DisplaySprite
0000E06E                            ; ===========================================================================
0000E06E                            
0000E06E                            loc_ppppp:
0000E08A 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E090 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E096 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E09C 6000                       		bra.s	loc_C02C
0000E09E                            ; ===========================================================================
0000E09E                            
0000E09E                            loc_C016:
0000E09E 45F8 FC00                  		lea	(v_objstate).w,a2
0000E0A2 7000                       		moveq	#0,d0
0000E0A4 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E0A8 6700                       		beq.s	loc_C028
0000E0AA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E0B0                            
0000E0B0                            loc_C028:
0000E0B0 6000 0000                  		bra.w	DeleteObject
0000E0B4                            ; ===========================================================================
0000E0B4                            
0000E0B4                            loc_C02C:	; Routine 4
0000E0B4 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E0B8 6700                       		beq.s	locret_C044
0000E0BA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E0C0 4228 0032                  		clr.b	$32(a0)
0000E0C4 4268 0010                  		clr.w	obVelX(a0)
0000E0C8 4268 0012                  		clr.w	obVelY(a0)
0000E0CC                            
0000E0CC                            locret_C044:
0000E0CC 4E75                       		rts	
0000E0CE                            ; ===========================================================================
0000E0CE                            
0000E0CE                            loc_C046:
0000E0CE 3F28 0008                  		move.w	obX(a0),-(sp)
0000E0D2 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E0D8 6400                       		bcc.s	loc_C056
0000E0DA 6100 0000                  		bsr.w	SpeedToPos
0000E0DE                            
0000E0DE                            loc_C056:
0000E0DE 0828 0001 0022             		btst	#1,obStatus(a0)
0000E0E4 6700                       		beq.s	loc_C0A0
0000E0E6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E0EC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E0F2 4A41                       		tst.w	d1
0000E0F4 6A00 0000                  		bpl.w	loc_C09E
0000E0F8 D368 000C                  		add.w	d1,obY(a0)
0000E0FC 4268 0012                  		clr.w	obVelY(a0)
0000E100 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E106 3011                       		move.w	(a1),d0
0000E108 0240 03FF                  		andi.w	#$3FF,d0
0000E10C 0C40 016A                  		cmpi.w	#$16A,d0
0000E110 6500                       		bcs.s	loc_C09E
0000E112 3028 0030                  		move.w	$30(a0),d0
0000E116 E640                       		asr.w	#3,d0
0000E118 3140 0010                  		move.w	d0,obVelX(a0)
0000E11C 117C 0001 0032             		move.b	#1,$32(a0)
0000E122 4268 000E                  		clr.w	$E(a0)
0000E126                            
0000E126                            loc_C09E:
0000E126 6000                       		bra.s	loc_C0E6
0000E128                            ; ===========================================================================
0000E128                            
0000E128                            loc_C0A0:
0000E128 4A68 0010                  		tst.w	obVelX(a0)
0000E12C 6700 0000                  		beq.w	loc_C0D6
0000E130 6B00                       		bmi.s	loc_C0BC
0000E132 7600                       		moveq	#0,d3
0000E134 1628 0014                  		move.b	obActWid(a0),d3
0000E138 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E13E 4A41                       		tst.w	d1		; has block touched a wall?
0000E140 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E142 6000                       		bra.s	loc_C0E6
0000E144                            ; ===========================================================================
0000E144                            
0000E144                            loc_C0BC:
0000E144 7600                       		moveq	#0,d3
0000E146 1628 0014                  		move.b	obActWid(a0),d3
0000E14A 4643                       		not.w	d3
0000E14C 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E152 4A41                       		tst.w	d1		; has block touched a wall?
0000E154 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E156 6000                       		bra.s	loc_C0E6
0000E158                            ; ===========================================================================
0000E158                            
0000E158                            PushB_StopPush:
0000E158 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E15C 6000                       		bra.s	loc_C0E6
0000E15E                            ; ===========================================================================
0000E15E                            
0000E15E                            loc_C0D6:
0000E15E 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E166 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E16C 6400                       		bcc.s	loc_C104
0000E16E                            
0000E16E                            loc_C0E6:
0000E16E 7200                       		moveq	#0,d1
0000E170 1228 0014                  		move.b	obActWid(a0),d1
0000E174 0641 000B                  		addi.w	#$B,d1
0000E178 343C 0010                  		move.w	#$10,d2
0000E17C 363C 0011                  		move.w	#$11,d3
0000E180 381F                       		move.w	(sp)+,d4
0000E182 6100 0000                  		bsr.w	loc_C186
0000E186 6100                       		bsr.s	PushB_ChkLava
0000E188 6000 FEC4                  		bra.w	loc_BFC6
0000E18C                            ; ===========================================================================
0000E18C                            
0000E18C                            loc_C104:
0000E18C 381F                       		move.w	(sp)+,d4
0000E18E 43F8 D000                  		lea	(v_player).w,a1
0000E192 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E198 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E19E 6000 FECE                  		bra.w	loc_ppppp
0000E1A2                            ; ===========================================================================
0000E1A2                            
0000E1A2                            PushB_ChkLava:
0000E1A2 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E1A8 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E1AA 343C FFE0                  		move.w	#-$20,d2
0000E1AE 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E1B4 6700                       		beq.s	PushB_LoadLava
0000E1B6 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E1BC 6700                       		beq.s	PushB_LoadLava
0000E1BE 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E1C4 6700                       		beq.s	PushB_LoadLava
0000E1C6 4E75                       		rts	
0000E1C8                            ; ===========================================================================
0000E1C8                            
0000E1C8                            PushB_ChkLava2:
0000E1C8 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E1CE 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E1D0 343C 0020                  		move.w	#$20,d2
0000E1D4 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E1DA 6700                       		beq.s	PushB_LoadLava
0000E1DC 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E1E2 6700                       		beq.s	PushB_LoadLava
0000E1E4                            
0000E1E4                            PushB_NoLava:
0000E1E4 4E75                       		rts	
0000E1E6                            ; ===========================================================================
0000E1E6                            
0000E1E6                            PushB_LoadLava:
0000E1E6 6100 0000                  		bsr.w	FindFreeObj
0000E1EA 6600                       		bne.s	locret_C184
0000E1EC 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E1F0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E1F6 D569 0008                  		add.w	d2,obX(a1)
0000E1FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E200 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E206 2348 003C                  		move.l	a0,$3C(a1)
0000E20A                            
0000E20A                            locret_C184:
0000E20A 4E75                       		rts	
0000E20C                            ; ===========================================================================
0000E20C                            
0000E20C                            loc_C186:
0000E20C 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E210 6700 0000                  		beq.w	loc_C218
0000E214 5500                       		subq.b	#2,d0
0000E216 6600                       		bne.s	loc_C1AA
0000E218 6100 AD66                  		bsr.w	ExitPlatform
0000E21C 0829 0003 0022             		btst	#3,obStatus(a1)
0000E222 6600                       		bne.s	loc_C1A4
0000E224 4228 0025                  		clr.b	ob2ndRout(a0)
0000E228 4E75                       		rts	
0000E22A                            ; ===========================================================================
0000E22A                            
0000E22A                            loc_C1A4:
0000E22A 3404                       		move.w	d4,d2
0000E22C 6000 B2B0                  		bra.w	MvSonicOnPtfm
0000E230                            ; ===========================================================================
0000E230                            
0000E230                            loc_C1AA:
0000E230 5500                       		subq.b	#2,d0
0000E232 6600                       		bne.s	loc_C1F2
0000E234 6100 0000                  		bsr.w	SpeedToPos
0000E238 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E23E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E244 4A41                       		tst.w	d1
0000E246 6A00 0000                  		bpl.w	locret_C1F0
0000E24A D368 000C                  		add.w	d1,obY(a0)
0000E24E 4268 0012                  		clr.w	obVelY(a0)
0000E252 4228 0025                  		clr.b	ob2ndRout(a0)
0000E256 3011                       		move.w	(a1),d0
0000E258 0240 03FF                  		andi.w	#$3FF,d0
0000E25C 0C40 016A                  		cmpi.w	#$16A,d0
0000E260 6500                       		bcs.s	locret_C1F0
0000E262 3028 0030                  		move.w	$30(a0),d0
0000E266 E640                       		asr.w	#3,d0
0000E268 3140 0010                  		move.w	d0,obVelX(a0)
0000E26C 117C 0001 0032             		move.b	#1,$32(a0)
0000E272 4268 000E                  		clr.w	obY+2(a0)
0000E276                            
0000E276                            locret_C1F0:
0000E276 4E75                       		rts	
0000E278                            ; ===========================================================================
0000E278                            
0000E278                            loc_C1F2:
0000E278 6100 0000                  		bsr.w	SpeedToPos
0000E27C 3028 0008                  		move.w	obX(a0),d0
0000E280 0240 000C                  		andi.w	#$C,d0
0000E284 6600 0000                  		bne.w	locret_C2E4
0000E288 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E28E 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E294 4268 0010                  		clr.w	obVelX(a0)
0000E298 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E29C 4E75                       		rts	
0000E29E                            ; ===========================================================================
0000E29E                            
0000E29E                            loc_C218:
0000E29E 6100 0000                  		bsr.w	Solid_ChkEnter
0000E2A2 4A44                       		tst.w	d4
0000E2A4 6700 0000                  		beq.w	locret_C2E4
0000E2A8 6B00 0000                  		bmi.w	locret_C2E4
0000E2AC 4A28 0032                  		tst.b	$32(a0)
0000E2B0 6700                       		beq.s	loc_C230
0000E2B2 6000 0000                  		bra.w	locret_C2E4
0000E2B6                            ; ===========================================================================
0000E2B6                            
0000E2B6                            loc_C230:
0000E2B6 4A40                       		tst.w	d0
0000E2B8 6700 0000                  		beq.w	locret_C2E4
0000E2BC 6B00                       		bmi.s	loc_C268
0000E2BE 0829 0000 0022             		btst	#0,obStatus(a1)
0000E2C4 6600 0000                  		bne.w	locret_C2E4
0000E2C8 3F00                       		move.w	d0,-(sp)
0000E2CA 7600                       		moveq	#0,d3
0000E2CC 1628 0014                  		move.b	obActWid(a0),d3
0000E2D0 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E2D6 301F                       		move.w	(sp)+,d0
0000E2D8 4A41                       		tst.w	d1
0000E2DA 6B00 0000                  		bmi.w	locret_C2E4
0000E2DE 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E2E6 7001                       		moveq	#1,d0
0000E2E8 323C 0040                  		move.w	#$40,d1
0000E2EC 6000                       		bra.s	loc_C294
0000E2EE                            ; ===========================================================================
0000E2EE                            
0000E2EE                            loc_C268:
0000E2EE 0829 0000 0022             		btst	#0,obStatus(a1)
0000E2F4 6700                       		beq.s	locret_C2E4
0000E2F6 3F00                       		move.w	d0,-(sp)
0000E2F8 7600                       		moveq	#0,d3
0000E2FA 1628 0014                  		move.b	obActWid(a0),d3
0000E2FE 4643                       		not.w	d3
0000E300 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E306 301F                       		move.w	(sp)+,d0
0000E308 4A41                       		tst.w	d1
0000E30A 6B00                       		bmi.s	locret_C2E4
0000E30C 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E314 70FF                       		moveq	#-1,d0
0000E316 323C FFC0                  		move.w	#-$40,d1
0000E31A                            
0000E31A                            loc_C294:
0000E31A 43F8 D000                  		lea	(v_player).w,a1
0000E31E D169 0008                  		add.w	d0,obX(a1)
0000E322 3341 0020                  		move.w	d1,obInertia(a1)
0000E326 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E32C 3F00                       		move.w	d0,-(sp)
0000E338 301F                       		move.w	(sp)+,d0
0000E33A 4A28 0028                  		tst.b	obSubtype(a0)
0000E33E 6B00                       		bmi.s	locret_C2E4
0000E340 3F00                       		move.w	d0,-(sp)
0000E342 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E348 301F                       		move.w	(sp)+,d0
0000E34A 0C41 0004                  		cmpi.w	#4,d1
0000E34E 6F00                       		ble.s	loc_C2E0
0000E350 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E356 4A40                       		tst.w	d0
0000E358 6A00                       		bpl.s	loc_C2D8
0000E35A 4468 0010                  		neg.w	obVelX(a0)
0000E35E                            
0000E35E                            loc_C2D8:
0000E35E 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E364 6000                       		bra.s	locret_C2E4
0000E366                            ; ===========================================================================
0000E366                            
0000E366                            loc_C2E0:
0000E366 D368 000C                  		add.w	d1,obY(a0)
0000E36A                            
0000E36A                            locret_C2E4:
0000E36A 4E75                       		rts	
0000E36A 4E75                       		rts	
0000E36C                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E36C                            ; ---------------------------------------------------------------------------
0000E36C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E36C                            ; ---------------------------------------------------------------------------
0000E36C                            Map_Push_internal:
0000E36C 0000                       		dc.w @single-Map_Push_internal
0000E36E 0000                       		dc.w @four-Map_Push_internal
0000E370 01                         @single:	dc.b 1
0000E371 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E376 04                         @four:		dc.b 4
0000E377 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E37C F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E381 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E386 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E38C 00                         		even
0000E38C 00                         		even
0000E38C                            
0000E38C                            		include	"_incObj\34 Title Cards.asm"
0000E38C                            ; ---------------------------------------------------------------------------
0000E38C                            ; Object 34 - zone title cards
0000E38C                            ; ---------------------------------------------------------------------------
0000E38C                            
0000E38C                            TitleCard:
0000E38C 7000                       		moveq	#0,d0
0000E38E 1028 0024                  		move.b	obRoutine(a0),d0
0000E392 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E396 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E39A                            ; ===========================================================================
0000E39A 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E39C 0000                       		dc.w Card_ChkPos-Card_Index
0000E39E 0000                       		dc.w Card_Wait-Card_Index
0000E3A0 0000                       		dc.w Card_Wait-Card_Index
0000E3A2                            
0000E3A2 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E3A2 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E3A2                            ; ===========================================================================
0000E3A2                            
0000E3A2                            Card_CheckSBZ3:	; Routine 0
0000E3A2 2248                       		movea.l	a0,a1
0000E3A4 7000                       		moveq	#0,d0
0000E3A6 1038 FE10                  		move.b	(v_zone).w,d0
0000E3AA 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E3B0 6600                       		bne.s	Card_CheckFZ
0000E3B2 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E3B4                            
0000E3B4                            	Card_CheckFZ:
0000E3B4 3400                       		move.w	d0,d2
0000E3B6 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E3BC 6600                       		bne.s	Card_LoadConfig
0000E3BE 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E3C0 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E3C2                            
0000E3C2                            	Card_LoadConfig:
0000E3C2 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E3C8 E948                       		lsl.w	#4,d0
0000E3CA D6C0                       		adda.w	d0,a3
0000E3CC 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E3D2 7203                       		moveq	#3,d1
0000E3D4                            
0000E3D4                            Card_Loop:
0000E3D4 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E3D8 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E3DC 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E3E0 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E3E4 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E3E8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E3EC 101A                       		move.b	(a2)+,d0
0000E3EE 6600                       		bne.s	Card_ActNumber
0000E3F0 1002                       		move.b	d2,d0
0000E3F2                            
0000E3F2                            	Card_ActNumber:
0000E3F2 0C00 0007                  		cmpi.b	#7,d0
0000E3F6 6600                       		bne.s	Card_MakeSprite
0000E3F8 D038 FE11                  		add.b	(v_act).w,d0
0000E3FC 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E402 6600                       		bne.s	Card_MakeSprite
0000E404 5300                       		subq.b	#1,d0
0000E406                            
0000E406                            	Card_MakeSprite:
0000E406 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E40A 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E412 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E418 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E41E 137C 0000 0001             		move.b	#0,obRender(a1)
0000E424 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E42A 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E430 43E9 0040                  		lea	$40(a1),a1	; next object
0000E434 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E438                            
0000E438                            Card_ChkPos:	; Routine 2
0000E438 7210                       		moveq	#$10,d1		; set horizontal speed
0000E43A 3028 0030                  		move.w	card_mainX(a0),d0
0000E43E B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E442 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E444 6C00                       		bge.s	Card_Move
0000E446 4441                       		neg.w	d1
0000E448                            
0000E448                            Card_Move:
0000E448 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E44C                            
0000E44C                            Card_NoMove:
0000E44C 3028 0008                  		move.w	obX(a0),d0
0000E450 6B00                       		bmi.s	locret_C3D8
0000E452 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E456 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E458 6000 0000                  		bra.w	DisplaySprite
0000E45C                            ; ===========================================================================
0000E45C                            
0000E45C                            locret_C3D8:
0000E45C 4E75                       		rts	
0000E45E                            ; ===========================================================================
0000E45E                            
0000E45E                            Card_Wait:	; Routine 4/6
0000E45E 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E462 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E464 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E468 6000 0000                  		bra.w	DisplaySprite
0000E46C                            ; ===========================================================================
0000E46C                            
0000E46C                            Card_ChkPos2:
0000E46C 4A28 0001                  		tst.b	obRender(a0)
0000E470 6A00                       		bpl.s	Card_ChangeArt
0000E472 7220                       		moveq	#$20,d1
0000E474 3028 0032                  		move.w	card_finalX(a0),d0
0000E478 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E47C 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E47E 6C00                       		bge.s	Card_Move2
0000E480 4441                       		neg.w	d1
0000E482                            
0000E482                            Card_Move2:
0000E482 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E486 3028 0008                  		move.w	obX(a0),d0
0000E48A 6B00                       		bmi.s	locret_C412
0000E48C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E490 6400                       		bcc.s	locret_C412	; if yes, branch
0000E492 6000 0000                  		bra.w	DisplaySprite
0000E496                            ; ===========================================================================
0000E496                            
0000E496                            locret_C412:
0000E496 4E75                       		rts	
0000E498                            ; ===========================================================================
0000E498                            
0000E498                            Card_ChangeArt:
0000E498 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E49E 6600                       		bne.s	Card_Delete
0000E4A0 7000                       		moveq	#plcid_Explode,d0
0000E4A2 4EB9 0000 1466             		jsr	(AddPLC).l	; load explosion patterns
0000E4A8 7000                       		moveq	#0,d0
0000E4AA 1038 FE10                  		move.b	(v_zone).w,d0
0000E4AE 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E4B2 4EB9 0000 1466             		jsr	(AddPLC).l	; load animal patterns
0000E4B8                            
0000E4B8                            Card_Delete:
0000E4B8 6000 0000                  		bra.w	DeleteObject
0000E4BC                            ; ===========================================================================
0000E4BC 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E4BE 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E4C0 00E4                       		dc.w $E4
0000E4C2 0206                       		dc.b 2,	6
0000E4C4 00EA                       		dc.w $EA
0000E4C6 0207                       		dc.b 2,	7
0000E4C8 00E0                       		dc.w $E0
0000E4CA 020A                       		dc.b 2,	$A
0000E4CC                            ; ---------------------------------------------------------------------------
0000E4CC                            ; Title	card configuration data
0000E4CC                            ; Format:
0000E4CC                            ; 4 bytes per item (YYYY XXXX)
0000E4CC                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E4CC                            ; ---------------------------------------------------------------------------
0000E4CC 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E4DC 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E4EC 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E4FC 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E50C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E51C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E52C 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E53C                            ; ===========================================================================
0000E53C                            ; ===========================================================================
0000E53C                            		include	"_incObj\39 Game Over.asm"
0000E53C                            ; ---------------------------------------------------------------------------
0000E53C                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E53C                            ; ---------------------------------------------------------------------------
0000E53C                            
0000E53C                            GameOverCard:
0000E53C 7000                       		moveq	#0,d0
0000E53E 1028 0024                  		move.b	obRoutine(a0),d0
0000E542 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E546 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E54A                            ; ===========================================================================
0000E54A 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E54C 0000                       		dc.w Over_Move-Over_Index
0000E54E 0000                       		dc.w Over_Wait-Over_Index
0000E550                            ; ===========================================================================
0000E550                            
0000E550                            Over_ChkPLC:	; Routine 0
0000E550 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E554 6700                       		beq.s	Over_Main	; if yes, branch
0000E556 4E75                       		rts	
0000E558                            ; ===========================================================================
0000E558                            
0000E558                            Over_Main:
0000E558 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E55C 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E562 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E568 6700                       		beq.s	Over_1stWord	; if not, branch
0000E56A 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E570                            
0000E570                            	Over_1stWord:
0000E570 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E576 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E57E 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E584 117C 0000 0001             		move.b	#0,obRender(a0)
0000E58A 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E590                            
0000E590                            Over_Move:	; Routine 2
0000E590 7210                       		moveq	#$10,d1		; set horizontal speed
0000E592 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E598 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E59A 6500                       		bcs.s	Over_UpdatePos
0000E59C 4441                       		neg.w	d1
0000E59E                            
0000E59E                            	Over_UpdatePos:
0000E59E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5A2 6000 0000                  		bra.w	DisplaySprite
0000E5A6                            ; ===========================================================================
0000E5A6                            
0000E5A6                            Over_SetWait:
0000E5A6 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E5AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E5B0 4E75                       		rts	
0000E5B2                            ; ===========================================================================
0000E5B2                            
0000E5B2                            Over_Wait:	; Routine 4
0000E5B2 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E5B6 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E5BA 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E5BC 0828 0000 001A             		btst	#0,obFrame(a0)
0000E5C2 6600                       		bne.s	Over_Display
0000E5C4 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E5C8 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E5CA 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E5CE 6000 0000                  		bra.w	DisplaySprite
0000E5D2                            ; ===========================================================================
0000E5D2                            
0000E5D2                            Over_ChgMode:
0000E5D2 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E5D6 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E5D8 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E5DE 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E5E2 6600                       		bne.s	Over_Display	; if yes, branch
0000E5E4 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E5EA 6000                       		bra.s	Over_Display
0000E5EC                            ; ===========================================================================
0000E5EC                            
0000E5EC                            Over_ResetLvl:
0000E5EC 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E5F0 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E5F6                            
0000E5F6                            Over_Display:
0000E5F6 6000 0000                  		bra.w	DisplaySprite
0000E5F6 6000 0000                  		bra.w	DisplaySprite
0000E5FA                            		include	"_incObj\3A Got Through Card.asm"
0000E5FA                            ; ---------------------------------------------------------------------------
0000E5FA                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E5FA                            ; ---------------------------------------------------------------------------
0000E5FA                            
0000E5FA                            GotThroughCard:
0000E5FA 7000                       		moveq	#0,d0
0000E5FC 1028 0024                  		move.b	obRoutine(a0),d0
0000E600 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E604 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E608                            ; ===========================================================================
0000E608 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E60A 0000                       		dc.w Got_Move-Got_Index
0000E60C 0000                       		dc.w Got_Wait-Got_Index
0000E60E 0000                       		dc.w Got_TimeBonus-Got_Index
0000E610 0000                       		dc.w Got_Wait-Got_Index
0000E612 0000                       		dc.w Got_NextLevel-Got_Index
0000E614 0000                       		dc.w Got_Wait-Got_Index
0000E616 0000                       		dc.w Got_Move2-Got_Index
0000E618 0000                       		dc.w loc_C766-Got_Index
0000E61A                            
0000E61A =00000030                  got_mainX:	equ $30		; position for card to display on
0000E61A =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E61A                            ; ===========================================================================
0000E61A                            
0000E61A                            Got_ChkPLC:	; Routine 0
0000E61A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E61E 6700                       		beq.s	Got_Main	; if yes, branch
0000E620 4E75                       		rts	
0000E622                            ; ===========================================================================
0000E622                            
0000E622                            Got_Main:
0000E622 2248                       		movea.l	a0,a1
0000E624 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E62A 7206                       		moveq	#6,d1
0000E62C                            
0000E62C                            Got_Loop:
0000E62C 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E630 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E634 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E638 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E63C 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E640 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E644 101A                       		move.b	(a2)+,d0
0000E646 0C00 0006                  		cmpi.b	#6,d0
0000E64A 6600                       		bne.s	loc_C5CA
0000E64C D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E650                            
0000E650                            	loc_C5CA:
0000E650 1340 001A                  		move.b	d0,obFrame(a1)
0000E654 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E65C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E662 137C 0000 0001             		move.b	#0,obRender(a1)
0000E668 43E9 0040                  		lea	$40(a1),a1
0000E66C 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E670                            
0000E670                            Got_Move:	; Routine 2
0000E670 7210                       		moveq	#$10,d1		; set horizontal speed
0000E672 3028 0030                  		move.w	got_mainX(a0),d0
0000E676 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E67A 6700                       		beq.s	loc_C61A	; if yes, branch
0000E67C 6C00                       		bge.s	Got_ChgPos
0000E67E 4441                       		neg.w	d1
0000E680                            
0000E680                            	Got_ChgPos:
0000E680 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E684                            
0000E684                            	loc_C5FE:
0000E684 3028 0008                  		move.w	obX(a0),d0
0000E688 6B00                       		bmi.s	locret_C60E
0000E68A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E68E 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E690 6000 0000                  		bra.w	DisplaySprite
0000E694                            ; ===========================================================================
0000E694                            
0000E694                            locret_C60E:
0000E694 4E75                       		rts	
0000E696                            ; ===========================================================================
0000E696                            
0000E696                            loc_C610:
0000E696 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E69C 6000 0000                  		bra.w	Got_Move2
0000E6A0                            ; ===========================================================================
0000E6A0                            
0000E6A0                            loc_C61A:
0000E6A0 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E6A6 67EE                       		beq.s	loc_C610
0000E6A8 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E6AE 66D4                       		bne.s	loc_C5FE
0000E6B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6B4 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E6BA                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E6BA                            
0000E6BA                            Got_Wait:	; Routine 4, 8, $C
0000E6BA 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E6BE 6600                       		bne.s	Got_Display
0000E6C0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6C4                            
0000E6C4                            Got_Display:
0000E6C4 6000 0000                  		bra.w	DisplaySprite
0000E6C8                            ; ===========================================================================
0000E6C8                            
0000E6C8                            Got_TimeBonus:	; Routine 6
0000E6C8 6100 0000                  		bsr.w	DisplaySprite
0000E6CC 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E6D2 7000                       		moveq	#0,d0
0000E6D4 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E6D8 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E6DA 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E6DE 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E6E4                            
0000E6E4                            Got_RingBonus:
0000E6E4 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E6E8 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E6EA 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E6EE 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E6F4                            
0000E6F4                            Got_ChkBonus:
0000E6F4 4A40                       		tst.w	d0		; is there any bonus?
0000E6F6 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E702 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E706 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E70C 6600                       		bne.s	Got_SetDelay
0000E70E 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E712                            
0000E712                            Got_SetDelay:
0000E712 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E718                            
0000E718                            locret_C692:
0000E718 4E75                       		rts	
0000E71A                            ; ===========================================================================
0000E71A                            
0000E71A                            Got_AddBonus:
0000E71A 4EB9 0000 0000             		jsr	(AddPoints).l
0000E720 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E724 0200 0003                  		andi.b	#3,d0
0000E728 66EE                       		bne.s	locret_C692
0000E734                            ; ===========================================================================
0000E734                            
0000E734                            Got_NextLevel:	; Routine $A
0000E734 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E73A 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E740 1038 FE10                  		move.b	(v_zone).w,d0
0000E744 0240 0007                  		andi.w	#7,d0
0000E748 E748                       		lsl.w	#3,d0
0000E74A 1238 FE11                  		move.b	(v_act).w,d1
0000E74E 0241 0003                  		andi.w	#3,d1
0000E752 D241                       		add.w	d1,d1
0000E754 D041                       		add.w	d1,d0
0000E756 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E75A 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E75E 4A40                       		tst.w	d0
0000E760 6600                       		bne.s	Got_ChkSS
0000E762 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E768 6000                       		bra.s	Got_Display2
0000E76A                            ; ===========================================================================
0000E76A                            
0000E76A                            Got_ChkSS:	
0000E76A 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E76E 4A38 F5C3                  		tst.b	(f_emeraldm).w
0000E772 6700                       		beq.s	VBla_08A
0000E774 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E782 6000                       		bra.s	Got_Display2
0000E784 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E78A                            		
0000E78A                            ; ===========================================================================
0000E78A                            
0000E78A                            VBla_08A:
0000E78A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E790                            
0000E790                            Got_Display2:
0000E790 6000 0000                  		bra.w	DisplaySprite
0000E794                            ; ===========================================================================
0000E794                            ; ---------------------------------------------------------------------------
0000E794                            ; Level	order array
0000E794                            ; ---------------------------------------------------------------------------
0000E794                            LevelOrder:
0000E794                            		; Green Hill Zone
0000E794 0001                       		dc.b id_GHZ, 1	; Act 2
0000E796 0002                       		dc.b id_GHZ, 2	; Act 2
0000E798 0200                       		dc.b id_MZ, 0	; Act 3
0000E79A 0000                       		dc.b 0, 0
0000E79C                            
0000E79C                            		; Labyrinth Zone
0000E79C 0101                       		dc.b id_LZ, 1	; Act 1
0000E79E 0102                       		dc.b id_LZ, 2	; Act 2
0000E7A0 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E7A2 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E7A4                            
0000E7A4                            		; Marble Zone
0000E7A4 0201                       		dc.b id_MZ, 1	; Act 1
0000E7A6 0202                       		dc.b id_MZ, 2	; Act 2
0000E7A8 0502                       		dc.b id_SBZ, 2	; Act 3
0000E7AA 0000                       		dc.b 0, 0
0000E7AC                            
0000E7AC                            		; Star Light Zone
0000E7AC 0301                       		dc.b id_SLZ, 1	; Act 1
0000E7AE 0302                       		dc.b id_SLZ, 2	; Act 2
0000E7B0 0500                       		dc.b id_SBZ, 0	; Act 3
0000E7B2 0000                       		dc.b 0, 0
0000E7B4                            
0000E7B4                            		; Spring Yard Zone
0000E7B4 0502                       		dc.b id_SBZ, 2	; Act 1
0000E7B6 0402                       		dc.b id_SYZ, 2	; Act 2
0000E7B8 0200                       		dc.b id_MZ,	 0	; Act 3
0000E7BA 0000                       		dc.b 0, 0
0000E7BC                            
0000E7BC                            		; Scrap Brain Zone
0000E7BC 0501                       		dc.b id_SBZ, 1	; Act 1
0000E7BE 0103                       		dc.b id_LZ, 3	; Act 2
0000E7C0 0000                       		dc.b 0, 0	; Final Zone
0000E7C2 0000                       		dc.b 0, 0
0000E7C4                            		even
0000E7C4                            ; ===========================================================================
0000E7C4                            
0000E7C4                            Got_Move2:	; Routine $E
0000E7C4 7220                       		moveq	#$20,d1		; set horizontal speed
0000E7C6 3028 0032                  		move.w	got_finalX(a0),d0
0000E7CA B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E7CE 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E7D0 6C00                       		bge.s	Got_ChgPos2
0000E7D2 4441                       		neg.w	d1
0000E7D4                            
0000E7D4                            	Got_ChgPos2:
0000E7D4 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E7D8 3028 0008                  		move.w	obX(a0),d0
0000E7DC 6B00                       		bmi.s	locret_C748
0000E7DE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E7E2 6400                       		bcc.s	locret_C748	; if yes, branch
0000E7E4 6000 0000                  		bra.w	DisplaySprite
0000E7E8                            ; ===========================================================================
0000E7E8                            
0000E7E8                            locret_C748:
0000E7E8 4E75                       		rts	
0000E7EA                            ; ===========================================================================
0000E7EA                            
0000E7EA                            Got_SBZ2:
0000E7EA 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E7F0 6600 0000                  		bne.w	DeleteObject
0000E7F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7F8 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E7FC 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E80C                            ; ===========================================================================
0000E80C                            
0000E80C                            loc_C766:	; Routine $10
0000E80C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E810 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E816 6700 0000                  		beq.w	DeleteObject
0000E81A 4E75                       		rts	
0000E81C                            ; ===========================================================================
0000E81C                            		;    x-start,	x-main,	y-main,
0000E81C                            		;				routine, frame number
0000E81C                            
0000E81C 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E822 0200                       		dc.b 				2,	0
0000E824                            
0000E824 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E82A 0201                       		dc.b 				2,	1
0000E82C                            
0000E82C 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E832 0206                       		dc.b 				2,	6
0000E834                            
0000E834 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E83A 0202                       		dc.b 				2,	2
0000E83C                            
0000E83C 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E842 0203                       		dc.b 				2,	3
0000E844                            
0000E844 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E84A 0204                       		dc.b 				2,	4
0000E84C                            
0000E84C 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E852 0205                       		dc.b 				2,	5
0000E852 0205                       		dc.b 				2,	5
0000E854                            		include	"_incObj\7E Special Stage Results.asm"
0000E854                            ; ---------------------------------------------------------------------------
0000E854                            ; Object 7E - special stage results screen
0000E854                            ; ---------------------------------------------------------------------------
0000E854                            
0000E854                            SSResult:
0000E854 7000                       		moveq	#0,d0
0000E856 1028 0024                  		move.b	obRoutine(a0),d0
0000E85A 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E85E 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E862                            ; ===========================================================================
0000E862 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E864 0000                       		dc.w SSR_Move-SSR_Index
0000E866 0000                       		dc.w SSR_Wait-SSR_Index
0000E868 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E86A 0000                       		dc.w SSR_Wait-SSR_Index
0000E86C 0000                       		dc.w SSR_Exit-SSR_Index
0000E86E 0000                       		dc.w SSR_Wait-SSR_Index
0000E870 0000                       		dc.w SSR_Continue-SSR_Index
0000E872 0000                       		dc.w SSR_Wait-SSR_Index
0000E874 0000                       		dc.w SSR_Exit-SSR_Index
0000E876 0000                       		dc.w loc_C91A-SSR_Index
0000E878                            
0000E878 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E878                            ; ===========================================================================
0000E878                            
0000E878                            SSR_ChkPLC:	; Routine 0
0000E878 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E87C 6700                       		beq.s	SSR_Main	; if yes, branch
0000E87E 4E75                       		rts	
0000E880                            ; ===========================================================================
0000E880                            
0000E880                            SSR_Main:
0000E880 2248                       		movea.l	a0,a1
0000E882 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E888 7203                       		moveq	#3,d1
0000E88A 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E890 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E892 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E894                            
0000E894                            	SSR_Loop:
0000E894 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E898 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E89C 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E8A0 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8A4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8A8 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E8AC 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E8B4 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8BA 137C 0000 0001             		move.b	#0,obRender(a1)
0000E8C0 43E9 0040                  		lea	$40(a1),a1
0000E8C4 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E8C8                            
0000E8C8 7007                       		moveq	#7,d0
0000E8CA 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E8CE 6700                       		beq.s	loc_C842
0000E8D0 7000                       		moveq	#0,d0
0000E8D2 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E8D6 6600                       		bne.s	loc_C842	; if not, branch
0000E8D8 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E8DA 317C 0018 0008             		move.w	#$18,obX(a0)
0000E8E0 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E8E6                            
0000E8E6                            loc_C842:
0000E8E6 1140 001A                  		move.b	d0,obFrame(a0)
0000E8EA                            
0000E8EA                            SSR_Move:	; Routine 2
0000E8EA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E8EC 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E8F0 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E8F4 6700                       		beq.s	loc_C86C	; if yes, branch
0000E8F6 6C00                       		bge.s	SSR_ChgPos
0000E8F8 4441                       		neg.w	d1
0000E8FA                            
0000E8FA                            SSR_ChgPos:
0000E8FA D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E8FE                            
0000E8FE                            loc_C85A:
0000E8FE 3028 0008                  		move.w	obX(a0),d0
0000E902 6B00                       		bmi.s	locret_C86A
0000E904 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E908 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E90A 6000 0000                  		bra.w	DisplaySprite
0000E90E                            ; ===========================================================================
0000E90E                            
0000E90E                            locret_C86A:
0000E90E 4E75                       		rts	
0000E910                            ; ===========================================================================
0000E910                            
0000E910                            loc_C86C:
0000E910 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E916 66E6                       		bne.s	loc_C85A
0000E918 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E91C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E922 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E928                            
0000E928                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E928 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E92C 6600                       		bne.s	SSR_Display
0000E92E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E932                            
0000E932                            SSR_Display:
0000E932 6000 0000                  		bra.w	DisplaySprite
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            SSR_RingBonus:	; Routine 6
0000E936 6100 0000                  		bsr.w	DisplaySprite
0000E93A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E940 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E944 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E946 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E94C 700A                       		moveq	#10,d0		; add 10 to score
0000E94E 4EB9 0000 0000             		jsr	(AddPoints).l
0000E954 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E958 0200 0003                  		andi.b	#3,d0
0000E95C 6600                       		bne.s	locret_C8EA
0000E968                            ; ===========================================================================
0000E968                            
0000E968                            loc_C8C4:
0000E972 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E976 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E97C 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E982 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E984 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E98A 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E98E                            
0000E98E                            locret_C8EA:
0000E98E 4E75                       		rts	
0000E990                            ; ===========================================================================
0000E990                            
0000E990                            SSR_Exit:	; Routine $A, $12
0000E990 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E996 6000 0000                  		bra.w	DisplaySprite
0000E99A                            ; ===========================================================================
0000E99A                            
0000E99A                            SSR_Continue:	; Routine $E
0000E99A 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E9A0 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E9B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9B4 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E9BA 6000 0000                  		bra.w	DisplaySprite
0000E9BE                            ; ===========================================================================
0000E9BE                            
0000E9BE                            loc_C91A:	; Routine $14
0000E9BE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9C2 0200 000F                  		andi.b	#$F,d0
0000E9C6 6600                       		bne.s	SSR_Display2
0000E9C8 0868 0000 001A             		bchg	#0,obFrame(a0)
0000E9CE                            
0000E9CE                            SSR_Display2:
0000E9CE 6000 0000                  		bra.w	DisplaySprite
0000E9D2                            ; ===========================================================================
0000E9D2 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E9D8 0200                       		dc.b 2,	0		; rountine number, frame number
0000E9DA 0320 0120 0118             		dc.w $320, $120, $118
0000E9E0 0201                       		dc.b 2,	1
0000E9E2 0360 0120 0128             		dc.w $360, $120, $128
0000E9E8 0202                       		dc.b 2,	2
0000E9EA 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E9F0 0203                       		dc.b 2,	3
0000E9F2 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E9F8 0206                       		dc.b 2,	6
0000E9F8 0206                       		dc.b 2,	6
0000E9FA                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000E9FA                            ; ---------------------------------------------------------------------------
0000E9FA                            ; Object 7F - chaos emeralds from the special stage results screen
0000E9FA                            ; ---------------------------------------------------------------------------
0000E9FA                            
0000E9FA                            SSRChaos:
0000E9FA 7000                       		moveq	#0,d0
0000E9FC 1028 0024                  		move.b	obRoutine(a0),d0
0000EA00 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EA04 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EA08                            ; ===========================================================================
0000EA08 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EA0A 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EA0C                            
0000EA0C                            ; ---------------------------------------------------------------------------
0000EA0C                            ; X-axis positions for chaos emeralds
0000EA0C                            ; ---------------------------------------------------------------------------
0000EA0C 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EA18                            ; ===========================================================================
0000EA18                            
0000EA18                            SSRC_Main:	; Routine 0
0000EA18 2248                       		movea.l	a0,a1
0000EA1A 45F9 0000 EA0C             		lea	(SSRC_PosData).l,a2
0000EA20 7400                       		moveq	#0,d2
0000EA22 7200                       		moveq	#0,d1
0000EA24 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EA28 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EA2A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EA2E                            
0000EA2E                            	SSRC_Loop:
0000EA2E 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EA32 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EA36 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EA3C 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EA40 1633 2000                  		move.b	(a3,d2.w),d3
0000EA44 1343 001A                  		move.b	d3,obFrame(a1)
0000EA48 1343 001C                  		move.b	d3,obAnim(a1)
0000EA4C 5202                       		addq.b	#1,d2
0000EA4E 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EA52 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EA5A 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EA60 137C 0000 0001             		move.b	#0,obRender(a1)
0000EA66 43E9 0040                  		lea	$40(a1),a1	; next object
0000EA6A 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EA6E                            
0000EA6E                            SSRC_Flash:	; Routine 2
0000EA6E 1028 001A                  		move.b	obFrame(a0),d0
0000EA72 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EA78 0C00 0006                  		cmpi.b	#6,d0
0000EA7C 6600                       		bne.s	SSRC_Display
0000EA7E 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EA84                            
0000EA84                            	SSRC_Display:
0000EA84 6000 0000                  		bra.w	DisplaySprite
0000EA84 6000 0000                  		bra.w	DisplaySprite
0000EA88                            
0000EA88                            ; ---------------------------------------------------------------------------
0000EA88                            ; Sprite mappings - zone title cards
0000EA88                            ; ---------------------------------------------------------------------------
0000EA88 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EA8A 0000                       		dc.w M_Card_LZ-Map_Card
0000EA8C 0000                       		dc.w M_Card_MZ-Map_Card
0000EA8E 0000                       		dc.w M_Card_SLZ-Map_Card
0000EA90 0000                       		dc.w M_Card_SYZ-Map_Card
0000EA92 0000                       		dc.w M_Card_SBZ-Map_Card
0000EA94 0000                       		dc.w M_Card_Zone-Map_Card
0000EA96 0000                       		dc.w M_Card_Act1-Map_Card
0000EA98 0000                       		dc.w M_Card_Act2-Map_Card
0000EA9A 0000                       		dc.w M_Card_Act3-Map_Card
0000EA9C 0000                       		dc.w M_Card_Oval-Map_Card
0000EA9E 0000                       		dc.w M_Card_FZ-Map_Card
0000EAA0 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EAA1 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EAA6 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EAAB F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EAB0 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EAB5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EABA F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EABF F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EAC4 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EAC9 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EACE                            		even
0000EACE 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EACF F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EAD4 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EAD9 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EADE F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EAE3 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EAE8 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EAED F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EAF2 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EAF7 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EAFC                            		even
0000EAFC 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EAFD F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EB02 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EB07 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EB0C F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EB11 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EB16 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EB1B F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EB20 F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EB25 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EB2A F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EB2F F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EB34 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EB35 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EB3A F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EB3F F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EB44 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EB49 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EB4E F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EB53 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EB58 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EB5D F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EB62                            		even
0000EB62 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EB63 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EB68 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EB6D F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EB72 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EB77 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EB7C F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EB81 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EB86 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EB8B F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EB90 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EB96 00                         		even
0000EB96 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EB97 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EB9C F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EBA1 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EBA6 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EBAB F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EBB0 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EBB5 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EBBA F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EBBF F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EBC4 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EBCA 00                         		even
0000EBCA 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EBCB F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EBD0 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EBD5 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EBDA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EBE0 00                         		even
0000EBE0 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EBE1 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EBE6 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EBEB 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EBEC 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EBF1 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EBF6 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EBF7 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EBFC F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EC01 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EC02 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EC07 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EC0C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EC11 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EC16 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EC1B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EC20 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EC25 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EC2A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EC2F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EC34 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EC39 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EC3E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EC44 00                         		even
0000EC44 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EC45 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EC4A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EC4F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EC54 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EC59 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EC5E                            		even
0000EC5E                            
0000EC5E                            Map_Over:	include	"_maps\Game Over.asm"
0000EC5E                            ; ---------------------------------------------------------------------------
0000EC5E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EC5E                            ; ---------------------------------------------------------------------------
0000EC5E                            Map_Over_internal:
0000EC5E 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EC60 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EC62 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EC64 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EC66 02                         byte_CBAC:	dc.b 2			; GAME
0000EC67 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EC6C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EC71 02                         byte_CBB7:	dc.b 2			; OVER
0000EC72 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EC77 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EC7C 02                         byte_CBC2:	dc.b 2			; TIME
0000EC7D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EC82 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EC87 02                         byte_CBCD:	dc.b 2			; OVER
0000EC88 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EC8D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EC92                            		even
0000EC92                            		even
0000EC92                            
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EC92                            ; ---------------------------------------------------------------------------
0000EC92 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EC94 0000                       		dc.w M_Got_Passed-Map_Got
0000EC96 0000                       		dc.w M_Got_Score-Map_Got
0000EC98 0000                       		dc.w M_Got_TBonus-Map_Got
0000EC9A 0000                       		dc.w M_Got_RBonus-Map_Got
0000EC9C FF6F                       		dc.w M_Card_Oval-Map_Got
0000EC9E FF4E                       		dc.w M_Card_Act1-Map_Got
0000ECA0 FF59                       		dc.w M_Card_Act2-Map_Got
0000ECA2 FF64                       		dc.w M_Card_Act3-Map_Got
0000ECA4 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ECA5 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ECAA F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ECAF F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ECB4 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ECB9 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ECBE F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ECC3 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ECC8 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ECCD 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ECCE F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ECD3 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ECD8 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ECDD F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ECE2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ECE7 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ECEC 06                         M_Got_Score:	dc.b 6			; SCORE
0000ECED F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ECF2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000ECF7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000ECFC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000ED01 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000ED06 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000ED0B 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000ED0C F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000ED11 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED16 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED1B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED20 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED25 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000ED2A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED2F 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000ED30 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000ED35 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED3A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED3F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED44 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED49 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000ED4E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED54 00                         		even
0000ED54                            ; ---------------------------------------------------------------------------
0000ED54                            ; Sprite mappings - special stage results screen
0000ED54                            ; ---------------------------------------------------------------------------
0000ED54 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000ED56 0000                       		dc.w M_SSR_Score-Map_SSR
0000ED58 0000                       		dc.w byte_CD0D-Map_SSR
0000ED5A FEAD                       		dc.w M_Card_Oval-Map_SSR
0000ED5C 0000                       		dc.w byte_CD31-Map_SSR
0000ED5E 0000                       		dc.w byte_CD46-Map_SSR
0000ED60 0000                       		dc.w byte_CD5B-Map_SSR
0000ED62 0000                       		dc.w byte_CD6B-Map_SSR
0000ED64 0000                       		dc.w byte_CDA8-Map_SSR
0000ED66 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000ED67 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000ED6C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000ED71 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000ED76 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000ED7B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000ED80 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000ED85 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000ED8A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED8F F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000ED94 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000ED99 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000ED9E F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EDA3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EDA8 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EDA9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EDAE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EDB3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EDB8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EDBD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EDC2 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EDC7 07                         byte_CD0D:	dc.b 7
0000EDC8 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EDCD F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDD2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDD7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDDC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDE1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EDE6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDEB 04                         byte_CD31:	dc.b 4
0000EDEC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EDF1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EDF6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EDFB F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EE00 04                         byte_CD46:	dc.b 4
0000EE01 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE06 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE0B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE10 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EE15 03                         byte_CD5B:	dc.b 3
0000EE16 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE1B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE20 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE25 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EE26 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EE2B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EE30 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EE35 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EE3A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EE3F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EE44 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EE49 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EE4E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EE53 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EE58 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EE5D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EE62 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EE63 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EE68 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EE6D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EE72 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EE77 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EE7C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EE81 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EE86 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EE8B F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EE90 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EE95 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EE9A F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EE9F F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EEA4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EEA9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EEAE                            		even
0000EEAE                            
0000EEAE                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            Map_SSRC_internal:
0000EEAE 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EEB0 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EEB2 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EEB4 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EEB6 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EEB8 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EEBA 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EEBC 01                         byte_CE02:	dc.b 1
0000EEBD F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EEC2 01                         byte_CE08:	dc.b 1
0000EEC3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EEC8 01                         byte_CE0E:	dc.b 1
0000EEC9 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EECE 01                         byte_CE14:	dc.b 1
0000EECF F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EED4 01                         byte_CE1A:	dc.b 1
0000EED5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EEDA 01                         byte_CE20:	dc.b 1
0000EEDB F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EEE0 00                         byte_CE26:	dc.b 0			; Blank frame
0000EEE2 00                         		even
0000EEE2 00                         		even
0000EEE2                            
0000EEE2                            		include	"_incObj\36 Spikes.asm"
0000EEE2                            ; ---------------------------------------------------------------------------
0000EEE2                            ; Object 36 - spikes
0000EEE2                            ; ---------------------------------------------------------------------------
0000EEE2                            
0000EEE2                            Spikes:
0000EEE2 7000                       		moveq	#0,d0
0000EEE4 1028 0024                  		move.b	obRoutine(a0),d0
0000EEE8 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EEEC 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EEF0                            ; ===========================================================================
0000EEF0 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EEF2 0000                       		dc.w Spik_Solid-Spik_Index
0000EEF4                            
0000EEF4 =00000030                  spik_origX:	equ $30		; start X position
0000EEF4 =00000032                  spik_origY:	equ $32		; start Y position
0000EEF4                            
0000EEF4 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EEF6 0110                       		dc.b 1,	$10
0000EEF8 0204                       		dc.b 2,	4
0000EEFA 031C                       		dc.b 3,	$1C
0000EEFC 0440                       		dc.b 4,	$40
0000EEFE 0510                       		dc.b 5,	$10
0000EF00                            ; ===========================================================================
0000EF00                            
0000EF00                            Spik_Main:	; Routine 0
0000EF00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF04 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EF0C 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EF12 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EF18 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF1E 1028 0028                  		move.b	obSubtype(a0),d0
0000EF22 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EF28 0240 00F0                  		andi.w	#$F0,d0
0000EF2C 43F9 0000 EEF4             		lea	(Spik_Var).l,a1
0000EF32 E648                       		lsr.w	#3,d0
0000EF34 D2C0                       		adda.w	d0,a1
0000EF36 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EF3A 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EF3E 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EF44 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EF4A                            
0000EF4A                            Spik_Solid:	; Routine 2
0000EF4A 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EF4E 343C 0004                  		move.w	#4,d2
0000EF52 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EF58 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EF5A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EF60 6600                       		bne.s	Spik_Upright	; if not, branch
0000EF62 343C 0014                  		move.w	#$14,d2
0000EF66                            
0000EF66                            ; Spikes types $1x and $5x face	sideways
0000EF66                            
0000EF66                            Spik_SideWays:
0000EF66 323C 001B                  		move.w	#$1B,d1
0000EF6A 3602                       		move.w	d2,d3
0000EF6C 5243                       		addq.w	#1,d3
0000EF6E 3828 0008                  		move.w	obX(a0),d4
0000EF72 6100 0000                  		bsr.w	SolidObject
0000EF76 0828 0003 0022             		btst	#3,obStatus(a0)
0000EF7C 6600                       		bne.s	Spik_Display
0000EF7E 0C44 0001                  		cmpi.w	#1,d4
0000EF82 6700                       		beq.s	Spik_Hurt
0000EF84 6000                       		bra.s	Spik_Display
0000EF86                            ; ===========================================================================
0000EF86                            
0000EF86                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000EF86                            
0000EF86                            Spik_Upright:
0000EF86 7200                       		moveq	#0,d1
0000EF88 1228 0014                  		move.b	obActWid(a0),d1
0000EF8C 0641 000B                  		addi.w	#$B,d1
0000EF90 343C 0010                  		move.w	#$10,d2
0000EF94 363C 0011                  		move.w	#$11,d3
0000EF98 3828 0008                  		move.w	obX(a0),d4
0000EF9C 6100 0000                  		bsr.w	SolidObject
0000EFA0 0828 0003 0022             		btst	#3,obStatus(a0)
0000EFA6 6600                       		bne.s	Spik_Hurt
0000EFA8 4A44                       		tst.w	d4
0000EFAA 6A00                       		bpl.s	Spik_Display
0000EFAC                            
0000EFAC                            Spik_Hurt:
0000EFAC 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000EFB0 6600                       		bne.s	Spik_Display	; if yes, branch
0000EFB2 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000EFB6 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000EFB8 2F08                       		move.l	a0,-(sp)
0000EFBA 2448                       		movea.l	a0,a2
0000EFBC 41F8 D000                  		lea	(v_player).w,a0
0000EFC0 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000EFC6 6400                       		bcc.s	loc_CF20
0000EFC8                            		; This fixes the infamous "spike bug"
0000EFC8 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000EFCC 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000EFCE 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000EFD4                            loc_D5A2:
0000EFD4 9680                       		sub.l	d0,d3
0000EFD6 2143 000C                  		move.l	d3,obY(a0)
0000EFDA 4EB9 0000 0000             		jsr	(HurtSonic).l
0000EFE0                            
0000EFE0                            loc_CF20:
0000EFE0 205F                       		movea.l	(sp)+,a0
0000EFE2                            
0000EFE2                            Spik_Display:
0000EFE2 6100 0000                  		bsr.w	DisplaySprite
0000F004 4E75                       		rts	
0000F006                            ; ===========================================================================
0000F006                            
0000F006                            Spik_Type0x:
0000F006 7000                       		moveq	#0,d0
0000F008 1028 0028                  		move.b	obSubtype(a0),d0
0000F00C D040                       		add.w	d0,d0
0000F00E 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F012 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F016                            ; ===========================================================================
0000F016 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F018 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F01A 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F01C                            ; ===========================================================================
0000F01C                            
0000F01C                            Spik_Type00:
0000F01C 4E75                       		rts			; don't move the object
0000F01E                            ; ===========================================================================
0000F01E                            
0000F01E                            Spik_Type01:
0000F01E 6100 0000                  		bsr.w	Spik_Wait
0000F022 7000                       		moveq	#0,d0
0000F024 1028 0034                  		move.b	$34(a0),d0
0000F028 D068 0032                  		add.w	spik_origY(a0),d0
0000F02C 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F030 4E75                       		rts	
0000F032                            ; ===========================================================================
0000F032                            
0000F032                            Spik_Type02:
0000F032 6100 0000                  		bsr.w	Spik_Wait
0000F036 7000                       		moveq	#0,d0
0000F038 1028 0034                  		move.b	$34(a0),d0
0000F03C D068 0030                  		add.w	spik_origX(a0),d0
0000F040 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F044 4E75                       		rts	
0000F046                            ; ===========================================================================
0000F046                            
0000F046                            Spik_Wait:
0000F046 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F04A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F04C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F050 6600                       		bne.s	locret_CFE6
0000F052 4A28 0001                  		tst.b	obRender(a0)
0000F056 6A00                       		bpl.s	locret_CFE6
0000F062 6000                       		bra.s	locret_CFE6
0000F064                            ; ===========================================================================
0000F064                            
0000F064                            loc_CFA4:
0000F064 4A68 0036                  		tst.w	$36(a0)
0000F068 6700                       		beq.s	loc_CFC6
0000F06A 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F070 6400                       		bcc.s	locret_CFE6
0000F072 317C 0000 0034             		move.w	#0,$34(a0)
0000F078 317C 0000 0036             		move.w	#0,$36(a0)
0000F07E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F084 6000                       		bra.s	locret_CFE6
0000F086                            ; ===========================================================================
0000F086                            
0000F086                            loc_CFC6:
0000F086 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F08C 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F092 6500                       		bcs.s	locret_CFE6
0000F094 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F09A 317C 0001 0036             		move.w	#1,$36(a0)
0000F0A0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F0A6                            
0000F0A6                            locret_CFE6:
0000F0A6 4E75                       		rts	
0000F0A6 4E75                       		rts	
0000F0A8                            Map_Spike:	include	"_maps\Spikes.asm"
0000F0A8                            ; --------------------------------------------------------------------------------
0000F0A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F0A8                            ; --------------------------------------------------------------------------------
0000F0A8                            
0000F0A8                            SME_XgeaQ:	
0000F0A8 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F0AC 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F0B0 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F0B4 03                         SME_XgeaQ_C:	dc.b 3	
0000F0B5 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F0BA F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F0BF F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F0C4 03                         SME_XgeaQ_1C:	dc.b 3	
0000F0C5 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F0CA FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F0CF 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F0D4 01                         SME_XgeaQ_2C:	dc.b 1	
0000F0D5 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F0DA 03                         SME_XgeaQ_32:	dc.b 3	
0000F0DB F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F0E0 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F0E5 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F0EA 06                         SME_XgeaQ_42:	dc.b 6	
0000F0EB F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F0F0 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F0F5 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F0FA F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F0FF F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F104 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F109 01                         SME_XgeaQ_61:	dc.b 1	
0000F10A FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F110 00                         		even
0000F110 00                         		even
0000F110                            		include	"_incObj\3B Purple Rock.asm"
0000F110                            ; ---------------------------------------------------------------------------
0000F110                            ; Object 3B - purple rock (GHZ)
0000F110                            ; ---------------------------------------------------------------------------
0000F110                            
0000F110                            PurpleRock:
0000F110 7000                       		moveq	#0,d0
0000F112 1028 0024                  		move.b	obRoutine(a0),d0
0000F116 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F11A 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F11E                            ; ===========================================================================
0000F11E 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F120 0000                       		dc.w Rock_Solid-Rock_Index
0000F122                            ; ===========================================================================
0000F122                            
0000F122                            Rock_Main:	; Routine 0
0000F122 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F126 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F12E 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F134 117C 0004 0001             		move.b	#4,obRender(a0)
0000F13A 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F140 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F146                            
0000F146                            Rock_Solid:	; Routine 2
0000F146 323C 001B                  		move.w	#$1B,d1
0000F14A 343C 0010                  		move.w	#$10,d2
0000F14E 363C 0010                  		move.w	#$10,d3
0000F152 3828 0008                  		move.w	obX(a0),d4
0000F156 6100 0000                  		bsr.w	SolidObject
0000F15A 6100 0000                  		bsr.w	DisplaySprite
0000F17C 4E75                       		rts	
0000F17C 4E75                       		rts	
0000F17E                            		include	"_incObj\49 Waterfall Sound.asm"
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E                            ; Object 49 - waterfall	sound effect (GHZ)
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E                            
0000F17E                            WaterSound:
0000F17E 7000                       		moveq	#0,d0
0000F180 1028 0024                  		move.b	obRoutine(a0),d0
0000F184 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F188 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F18C                            ; ===========================================================================
0000F18C 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F18E 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F190                            ; ===========================================================================
0000F190                            
0000F190                            WSnd_Main:	; Routine 0
0000F190 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F194 117C 0004 0001             		move.b	#4,obRender(a0)
0000F19A                            
0000F19A                            WSnd_PlaySnd:	; Routine 2
0000F19A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F19E 0200 003F                  		andi.b	#$3F,d0
0000F1A2 6600                       		bne.s	WSnd_ChkDel
0000F1AE                            
0000F1AE                            	WSnd_ChkDel:
0000F1CC 4E75                       		rts	
0000F1CC 4E75                       		rts	
0000F1CE                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F1CE                            ; ---------------------------------------------------------------------------
0000F1CE                            ; Sprite mappings - purple rock	(GHZ)
0000F1CE                            ; ---------------------------------------------------------------------------
0000F1CE                            Map_PRock_internal:
0000F1CE 0000                       		dc.w byte_D110-Map_PRock_internal
0000F1D0 02                         byte_D110:	dc.b 2
0000F1D1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F1D6 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F1DC 00                         		even
0000F1DC 00                         		even
0000F1DC                            		include	"_incObj\3C Smashable Wall.asm"
0000F1DC                            ; ---------------------------------------------------------------------------
0000F1DC                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F1DC                            ; ---------------------------------------------------------------------------
0000F1DC                            
0000F1DC                            SmashWall:
0000F1DC 7000                       		moveq	#0,d0
0000F1DE 1028 0024                  		move.b	obRoutine(a0),d0
0000F1E2 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F1E6 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F1EA 6000 0000                  		bra.w	RememberState
0000F1EE                            ; ===========================================================================
0000F1EE 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F1F0 0000                       		dc.w Smash_Solid-Smash_Index
0000F1F2 0000                       		dc.w Smash_FragMove-Smash_Index
0000F1F4                            
0000F1F4 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F1F4                            ; ===========================================================================
0000F1F4                            
0000F1F4                            Smash_Main:	; Routine 0
0000F1F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1F8 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F200 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F206 117C 0004 0001             		move.b	#4,obRender(a0)
0000F20C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F212 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F218 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F21E                            
0000F21E                            Smash_Solid:	; Routine 2
0000F21E 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F224 323C 001B                  		move.w	#$1B,d1
0000F228 343C 0020                  		move.w	#$20,d2
0000F22C 363C 0020                  		move.w	#$20,d3
0000F230 3828 0008                  		move.w	obX(a0),d4
0000F234 6100 0000                  		bsr.w	SolidObject	
0000F238 4A04                       		tst.b	d4
0000F23A 6E00 0000                  		bgt.w	@chkroll	
0000F23E 6700 0000                  		beq.w	@donothing								
0000F242 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F248 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F24C                            ; ===========================================================================
0000F24C                            
0000F24C                            @chkroll:
0000F24C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F252 6600                       		bne.s	@donothing	; if not, branch	
0000F254 3028 0030                  		move.w	smash_speed(a0),d0
0000F258 6A00                       		bpl.s	@chkspeed
0000F25A 4440                       		neg.w	d0
0000F25C                            
0000F25C                            	@chkspeed:
0000F25C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F260 6500                       		bcs.s	@donothing	; if not, branch	
0000F262                            		
0000F262                            	@continue:	
0000F262 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F268 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F26E 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F274 3028 0008                  		move.w	obX(a0),d0
0000F278 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F27C 6500                       		bcs.s	@smash		; if yes, branch
0000F27E 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F284                            
0000F284                            	@smash:
0000F284 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F28A 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F290 7206                       		moveq	#6,d1		; load 7 fragments
0000F292 343C 0070                  		move.w	#$70,d2
0000F296 6100                       		bsr.s	SmashObject
0000F298                            
0000F298                            @donothing:
0000F298 4E75                       		rts	
0000F29A                            
0000F29A                            Smash_FragMove:	; Routine 4
0000F29A 588F                       		addq.l	#4,sp
0000F29C 6100 0000                  		bsr.w	SpeedToPos
0000F2A0 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F2A6 4A28 0001                  		tst.b	obRender(a0)
0000F2AA 6A00 0000                  		bpl.w	DeleteObject
0000F2AE 6000 0000                  		bra.w	DisplaySprite
0000F2B2                            
0000F2B2                            
0000F2B2                            
0000F2B2                            		include	"_incObj\sub SmashObject.asm"
0000F2B2                            ; ---------------------------------------------------------------------------
0000F2B2                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F2B2                            ; ---------------------------------------------------------------------------
0000F2B2                            
0000F2B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2B2                            
0000F2B2                            
0000F2B2                            SmashObject:
0000F2B2 7000                       		moveq	#0,d0
0000F2B4 1028 001A                  		move.b	obFrame(a0),d0
0000F2B8 D040                       		add.w	d0,d0
0000F2BA 2668 0004                  		movea.l	obMap(a0),a3
0000F2BE D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F2C2 524B                       		addq.w	#1,a3
0000F2C4 08E8 0005 0001             		bset	#5,obRender(a0)
0000F2CA 1810                       		move.b	0(a0),d4
0000F2CC 1A28 0001                  		move.b	obRender(a0),d5
0000F2D0 2248                       		movea.l	a0,a1
0000F2D2 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F2D8 1284                       		move.b	d4,0(a1)
0000F2DA 234B 0004                  		move.l	a3,obMap(a1)
0000F2DE 1345 0001                  		move.b	d5,obRender(a1)
0000F2E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F2E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F2EE 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F2F4 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F2FA 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F300 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F304 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F308 5341                       		subq.w #1,d1
0000F30A 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F30E 303C 005F                  		move.w #$5F,d0
0000F312                            ; ===========================================================================
0000F312                            
0000F312                            Smash_Loop:
0000F312 4A11                       		tst.b	(a1)
0000F314 6700                       		beq.s	@cont
0000F316 43E9 0040                  		lea		$40(a1),a1
0000F31A 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F31E 6600                       		bne.s	Smash_PlaySnd
0000F320                            
0000F320                            	@cont:
0000F320 5A4B                       		addq.w #5,a3
0000F322                            
0000F322                            Smash_LoadFrag:				; XREF: SmashObject
0000F322 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F328 1284                       		move.b	d4,0(a1)
0000F32A 234B 0004                  		move.l	a3,obMap(a1)
0000F32E 1345 0001                  		move.b	d5,obRender(a1)
0000F332 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F338 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F33E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F344 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F34A 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F350 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F354 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F358 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F35C                            
0000F35C                            Smash_PlaySnd:
0000F35C 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F360 4EF9 0000 0FCC             		jmp	(PlaySound_Special).l ; play smashing sound
0000F366                            
0000F366                            ; End of function SmashObject
0000F366                            ; End of function SmashObject
0000F366                            
0000F366                            ; ===========================================================================
0000F366                            ; Smashed block	fragment speeds
0000F366                            ;
0000F366 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F36A 0600 FF00                  		dc.w $600, -$100
0000F36E 0600 0100                  		dc.w $600, $100
0000F372 0400 0500                  		dc.w $400, $500
0000F376 0600 FA00                  		dc.w $600, -$600
0000F37A 0800 FE00                  		dc.w $800, -$200
0000F37E 0800 0200                  		dc.w $800, $200
0000F382 0600 0600                  		dc.w $600, $600
0000F386                            
0000F386 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F38A F800 FE00                  		dc.w -$800, -$200
0000F38E F800 0200                  		dc.w -$800, $200
0000F392 FA00 0600                  		dc.w -$600, $600
0000F396 FC00 FB00                  		dc.w -$400, -$500
0000F39A FA00 FF00                  		dc.w -$600, -$100
0000F39E FA00 0100                  		dc.w -$600, $100
0000F3A2 FC00 0500                  		dc.w -$400, $500
0000F3A6                            
0000F3A6                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F3A6                            ; ---------------------------------------------------------------------------
0000F3A6                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F3A6                            ; ---------------------------------------------------------------------------
0000F3A6                            Map_Smash_internal:
0000F3A6 0000                       		dc.w @left-Map_Smash_internal
0000F3A8 0000                       		dc.w @middle-Map_Smash_internal
0000F3AA 0000                       		dc.w @right-Map_Smash_internal
0000F3AC 08                         @left:		dc.b 8
0000F3AD E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F3B2 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F3B7 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F3BC 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F3C1 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F3C6 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F3CB 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F3D0 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F3D5 08                         @middle:	dc.b 8
0000F3D6 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F3DB F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F3E0 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F3E5 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F3EA E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F3EF F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F3F4 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F3F9 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F3FE 08                         @right:		dc.b 8
0000F3FF E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F404 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F409 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F40E 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F413 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F418 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F41D 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F422 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F428 00                         		even
0000F428 00                         		even
0000F428                            
0000F428                            ; ---------------------------------------------------------------------------
0000F428                            ; Object code execution subroutine
0000F428                            ; ---------------------------------------------------------------------------
0000F428                            
0000F428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F428                            
0000F428                            
0000F428                            
0000F428                            ExecuteObjects: ; XREF: GM_Title; et al
0000F428 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F42C 7E7F                       		moveq #$7F,d7
0000F42E 7000                       		moveq #0,d0
0000F430 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F436 6400                       		bcc.s loc_D362
0000F438                            
0000F438                            loc_D348:
0000F438 1010                       		move.b (a0),d0 ; load object number from RAM
0000F43A 6700                       		beq.s loc_D358
0000F43C D040                       		add.w d0,d0
0000F43E D040                       		add.w d0,d0
0000F440 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F444 4E91                       		jsr (a1) ; run the object's code
0000F446 7000                       		moveq #0,d0
0000F448                            
0000F448                            loc_D358:
0000F448 41E8 0040                  		lea $40(a0),a0 ; next object
0000F44C 51CF FFEA                  		dbf d7,loc_D348
0000F450 4E75                       		rts
0000F452                            ; ===========================================================================
0000F452                            
0000F452                            loc_D362:
0000F452 7E1F                       		moveq #$1F,d7
0000F454 61E2                       		bsr.s loc_D348
0000F456 7E5F                       		moveq #$5F,d7
0000F458                            
0000F458                            loc_D368:
0000F458 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F45A 1010                       		move.b (a0),d0 ; get the object's ID
0000F45C 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F45E 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F462 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F464 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F468 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F46E 6700                       		beq.s loc_D378 ; if not, branch
0000F470 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F474                            
0000F474                            loc_D378:
0000F474 6100 0000                  		bsr.w DisplaySprite2
0000F478                            		
0000F478                            loc_D37C:
0000F478 41E8 0040                  		lea $40(a0),a0
0000F47C 51CF FFDA                  		dbf d7,loc_D368
0000F480 4E75                       		rts
0000F482                            ; End of function ExecuteObjects
0000F482                            
0000F482                            ; ===========================================================================
0000F482                            ; ---------------------------------------------------------------------------
0000F482                            ; Object pointers
0000F482                            ; ---------------------------------------------------------------------------
0000F482                            Obj_Index:
0000F482                            		include	"_inc\Object Pointers.asm"
0000F482                            ; ---------------------------------------------------------------------------
0000F482                            ; Object pointers
0000F482                            ; ---------------------------------------------------------------------------
0000F482 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F486 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F48A 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F48E 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F492 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F496 0000 B1C8                  ptr_Mozzietron:		dc.l Mozzietron
0000F49A 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F49E 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F4A2 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F4A6 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F4AA 0000 0000                  ptr_Pole:		dc.l Pole
0000F4AE 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F4B2 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F4B6 0000 C5EE                  ptr_TitleSonic:		dc.l TitleSonic
0000F4BA 0000 C66E                  ptr_PSBTM:		dc.l PSBTM
0000F4BE 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F4C2 0000 8CEC                  ptr_Bridge:		dc.l Bridge
0000F4C6 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F4CA 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F4CE 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F4D2 0000 9312                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F4D6 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F4DA 0000 965E                  ptr_Helix:		dc.l Helix
0000F4DE 0000 97EA                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F4E2 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F4E6 0000 9BC6                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F4EA 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F4EE 0000 A1BA                  ptr_Scenery:		dc.l Scenery
0000F4F2 0000 A25C                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F4F6 0000 A544                  ptr_BallHog:		dc.l BallHog
0000F4FA 0000 AEDE                  ptr_Crabmeat:		dc.l Crabmeat
0000F4FE 0000 A612                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F502 0000 0000                  ptr_HUD:		dc.l HUD
0000F506 0000 B2FA                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F50A 0000 B44C                  ptr_Missile:		dc.l Missile
0000F50E 0000 A6E4                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F512 0000 B6A6                  ptr_Rings:		dc.l Rings
0000F516 0000 BEF0                  ptr_Monitor:		dc.l Monitor
0000F51A 0000 A754                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F51E 0000 A912                  ptr_Animals:		dc.l Animals		; $28
0000F522 0000 AE00                  ptr_Points:		dc.l Points
0000F526 0000 A332                  ptr_AutoDoor:		dc.l AutoDoor
0000F52A 0000 CBB2                  ptr_Chopper:		dc.l Chopper
0000F52E 0000 CC6C                  ptr_Jaws:		dc.l Jaws
0000F532 0000 CD36                  ptr_Burrobot:		dc.l Burrobot
0000F536 0000 C0EE                  ptr_PowerUp:		dc.l PowerUp
0000F53A 0000 CF4A                  ptr_LargeGrass:		dc.l LargeGrass
0000F53E 0000 D42C                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F542 0000 D708                  ptr_ChainStomp:		dc.l ChainStomp
0000F546 0000 DDB6                  ptr_Button:		dc.l Button
0000F54A 0000 DF5A                  ptr_PushBlock:		dc.l PushBlock
0000F54E 0000 E38C                  ptr_TitleCard:		dc.l TitleCard
0000F552 0000 D26C                  ptr_GrassFire:		dc.l GrassFire
0000F556 0000 EEE2                  ptr_Spikes:		dc.l Spikes
0000F55A 0000 B902                  ptr_RingLoss:		dc.l RingLoss
0000F55E 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F562 0000 E53C                  ptr_GameOverCard:	dc.l GameOverCard
0000F566 0000 E5FA                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F56A 0000 F110                  ptr_PurpleRock:		dc.l PurpleRock
0000F56E 0000 F1DC                  ptr_SmashWall:		dc.l SmashWall
0000F572 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F576 0000 0000                  ptr_Prison:		dc.l Prison
0000F57A 0000 A7E6                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F57E 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F582 0000 0000                  ptr_Springs:		dc.l Springs
0000F586 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F58A 0000 0000                  ptr_Roller:		dc.l Roller
0000F58E 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F592 0000 DA24                  ptr_SideStomp:		dc.l SideStomp
0000F596 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F59A 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F59E 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F5A2 0000 F17E                  ptr_WaterSound:		dc.l WaterSound
0000F5A6 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F5AA 0000 BBC4                  ptr_GiantRing:		dc.l GiantRing
0000F5AE 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F5B2 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F5B6 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F5BA 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F5BE 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F5C2 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F5C6 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F5CA 0000 9CD6                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F5CE 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F5D2 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F5D6 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F5DA 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F5DE 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F5E2 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F5E6 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F5EA 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F5EE 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F5F2 0000 0000                  ptr_Fan:		dc.l Fan
0000F5F6 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F5FA 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F5FE 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F602 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F606 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F60A 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F60E 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F612 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F616 0000 0000                  ptr_Junction:		dc.l Junction
0000F61A 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F61E 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F622 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F626 0000 0000                  ptr_Saws:		dc.l Saws
0000F62A 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F62E 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F632 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F636 0000 0000                  ptr_Electro:		dc.l Electro
0000F63A 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F63E 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F642 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F646 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F64A 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F64E 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F652 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F656 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F65A 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F65E 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F662 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F666 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F66A 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F66E 0000 BC9E                  ptr_RingFlash:		dc.l RingFlash
0000F672 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F676 0000 E854                  ptr_SSResult:		dc.l SSResult
0000F67A 0000 E9FA                  ptr_SSRChaos:		dc.l SSRChaos
0000F67E 0000 5BD8                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F682 0000 5CF0                  ptr_ContSonic:		dc.l ContSonic
0000F686 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F68A 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F68E 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F692 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F696 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F69A 0000 617E                  ptr_EndSonic:		dc.l EndSonic
0000F69E 0000 62D8                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F6A2 0000 63B2                  ptr_EndSTH:		dc.l EndSTH
0000F6A6 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F6AA 0000 6618                  ptr_EndEggman:		dc.l EndEggman
0000F6AE 0000 66F8                  ptr_TryChaos:		dc.l TryChaos
0000F6B2                            
0000F6B2                            NullObject:
0000F6B2                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F6B2                            
0000F6B2 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F6B2 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F6B2 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F6B2 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F6B2 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F6B2 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F6B2 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F6B2 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F6B2 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F6B2 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F6B2 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F6B2 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F6B2 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F6B2 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F6B2 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F6B2 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F6B2 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F6B2 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F6B2 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F6B2 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F6B2 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F6B2 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F6B2 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F6B2 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F6B2 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F6B2 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F6B2 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F6B2 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F6B2 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F6B2 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F6B2 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F6B2 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F6B2 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F6B2 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F6B2 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F6B2 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F6B2 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F6B2 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F6B2 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F6B2 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F6B2 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F6B2 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F6B2 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F6B2 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F6B2 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F6B2 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F6B2 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F6B2 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F6B2 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F6B2 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F6B2 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F6B2 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F6B2 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F6B2 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F6B2 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F6B2 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F6B2 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F6B2 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F6B2 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F6B2 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F6B2 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F6B2 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F6B2 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F6B2 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F6B2 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F6B2 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F6B2 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F6B2 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F6B2 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F6B2 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F6B2 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F6B2 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F6B2 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F6B2 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F6B2 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F6B2 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F6B2 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F6B2 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F6B2 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F6B2 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F6B2 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F6B2 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F6B2 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F6B2 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F6B2 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F6B2 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F6B2 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F6B2 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F6B2 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F6B2 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F6B2 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F6B2 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F6B2 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F6B2 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F6B2 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F6B2 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F6B2 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F6B2 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F6B2 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F6B2 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F6B2 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F6B2 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F6B2 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F6B2 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F6B2 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F6B2 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F6B2 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F6B2 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F6B2 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F6B2 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F6B2 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F6B2 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F6B2 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F6B2 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F6B2 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F6B2 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F6B2 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F6B2 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F6B2 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F6B2 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F6B2 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F6B2 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F6B2 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F6B2 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F6B2 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F6B2 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F6B2 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F6B2 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F6B2 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F6B2 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F6B2 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F6B2 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F6B2 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F6B2 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F6B2 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F6B2 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F6B2 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F6B2 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F6B2 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F6B2 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6B2 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6B2                            
0000F6B2                            		include	"_incObj\sub ObjectFall.asm"
0000F6B2                            ; ---------------------------------------------------------------------------
0000F6B2                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F6B2                            ; ---------------------------------------------------------------------------
0000F6B2                            
0000F6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6B2                            
0000F6B2                            
0000F6B2                            ObjectFall:
0000F6B2 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F6B8 6700                       		beq.s	@donothing
0000F6BA 3028 0010                  		move.w	obVelX(a0),d0
0000F6BE 48C0                       		ext.l	d0
0000F6C0 E188                       		lsl.l	#8,d0
0000F6C2 D1A8 0008                  		add.l	d0,obX(a0)
0000F6C6 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F6CC 6F00                               ble.s   @skipline       ; if yes, branch
0000F6CE 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F6D4                                @skipline:		
0000F6D4 3028 0012                  		move.w	obVelY(a0),d0
0000F6D8 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F6DE 48C0                       		ext.l	d0
0000F6E0 E188                       		lsl.l	#8,d0
0000F6E2 D1A8 000C                  		add.l	d0,obY(a0)
0000F6E6 4E75                       		rts	
0000F6E8                            	
0000F6E8                            	@donothing:
0000F6E8 4E75                       		rts
0000F6EA                            
0000F6EA                            ; End of function ObjectFall
0000F6EA                            ; End of function ObjectFall
0000F6EA                            		include	"_incObj\sub SpeedToPos.asm"
0000F6EA                            ; ---------------------------------------------------------------------------
0000F6EA                            ; Subroutine translating object	speed to update	object position
0000F6EA                            ; ---------------------------------------------------------------------------
0000F6EA                            
0000F6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6EA                            
0000F6EA                            
0000F6EA                            SpeedToPos:
0000F6EA 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F6F0 E188                       		lsl.l	#8,d0
0000F6F2 D1A8 0008                  		add.l	d0,obX(a0)
0000F6F6 E18A                       		lsl.l	#8,d2
0000F6F8 D5A8 000C                  		add.l	d2,obY(a0)
0000F6FC 4E75                       		rts
0000F6FE                            ; End of function SpeedToPos
0000F6FE                            ; End of function SpeedToPos
0000F6FE                            		include	"_incObj\sub DisplaySprite.asm"
0000F6FE                            ; ---------------------------------------------------------------------------
0000F6FE                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F6FE                            ; ---------------------------------------------------------------------------
0000F6FE                            
0000F6FE                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F6FE                            
0000F6FE                            
0000F6FE                            DisplaySprite:
0000F6FE 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F702 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F706 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F70A 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F70C 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F70E D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F710 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F712                            
0000F712                                DSpr_Full:
0000F712 4E75                               rts    
0000F714                            
0000F714                            ; End of function DisplaySprite
0000F714                            
0000F714                            
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            
0000F714                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F714                            
0000F714                            
0000F714                            DisplaySprite1:
0000F714 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F718 D4E9 0018                          adda.w  obpriority(a1),a2
0000F71C 0C52 007E                          cmpi.w    #$7E,(a2)
0000F720 6400                               bcc.s    DSpr1_Full
0000F722 5452                               addq.w    #2,(a2)
0000F724 D4D2                               adda.w    (a2),a2
0000F726 3489                               move.w    a1,(a2)
0000F728                            
0000F728                                DSpr1_Full:
0000F728 4E75                               rts    
0000F72A                            
0000F72A                            ; End of function DisplaySprite1
0000F72A                            
0000F72A                            ; ---------------------------------------------------------------------------
0000F72A                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F72A                            ; and d0 is already (priority/2)&$380
0000F72A                            ; ---------------------------------------------------------------------------
0000F72A                            
0000F72A                            ; loc_16530:
0000F72A                            DisplaySprite2:
0000F72A 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F72E D2C0                           adda.w    d0,a1
0000F730 0C51 007E                      cmpi.w    #$7E,(a1)
0000F734 6400                           bhs.s    return_16542
0000F736 5451                           addq.w    #2,(a1)
0000F738 D2D1                           adda.w    (a1),a1
0000F73A 3288                           move.w    a0,(a1)
0000F73C                            
0000F73C                            return_16542:
0000F73C 4E75                           rts
0000F73C 4E75                           rts
0000F73E                            		include	"_incObj\sub DeleteObject.asm"
0000F73E                            ; ---------------------------------------------------------------------------
0000F73E                            ; Subroutine to	delete an object
0000F73E                            ; ---------------------------------------------------------------------------
0000F73E                            
0000F73E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F73E                            
0000F73E                            
0000F73E                            DeleteObject:
0000F73E 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F740                            
0000F740                            DeleteChild:				; child objects are already in (a1)
0000F740 7200                       		moveq	#0,d1
0000F742 700F                       		moveq	#$F,d0
0000F744                            
0000F744                            	DelObj_Loop:
0000F744 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F746 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F74A 4E75                       		rts	
0000F74C                            
0000F74C                            ; End of function DeleteObject
0000F74C                            ; End of function DeleteObject
0000F74C                            
0000F74C                            ; ===========================================================================
0000F74C 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F750 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F754 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F758 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            
0000F75C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F75C                            
0000F75C                            
0000F75C                            BuildSprites:
0000F75C 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F760 7A00                       		moveq	#0,d5
0000F762 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F766 7E07                       		moveq	#7,d7
0000F768                            
0000F768                            	@priorityLoop:
0000F768 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F76A 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F76E 7C02                       		moveq	#2,d6
0000F770                            
0000F770                            	@objectLoop:
0000F770 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F774 4A10                       		tst.b	(a0)		; if null, branch
0000F776 6700 0000                  		beq.w	@skipObject
0000F77A 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F780                            
0000F780 1028 0001                  		move.b	obRender(a0),d0
0000F784 1800                       		move.b	d0,d4
0000F786 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000F78A 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000F78C 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F790                            	; check object bounds
0000F790 7000                       		moveq	#0,d0
0000F792 1028 0014                  		move.b	obActWid(a0),d0
0000F796 3628 0008                  		move.w	obX(a0),d3
0000F79A 9651                       		sub.w	(a1),d3
0000F79C 3203                       		move.w	d3,d1
0000F79E D240                       		add.w	d0,d1
0000F7A0 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000F7A4 3203                       		move.w	d3,d1
0000F7A6 9240                       		sub.w	d0,d1
0000F7A8 0C41 0140                  		cmpi.w	#320,d1
0000F7AC 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000F7AE 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000F7B2                            
0000F7B2 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000F7B6 6700                       		beq.s	@assumeHeight	; if yes, branch
0000F7B8 7000                       		moveq	#0,d0
0000F7BA 1028 0016                  		move.b	obHeight(a0),d0
0000F7BE 3428 000C                  		move.w	obY(a0),d2
0000F7C2 9469 0004                  		sub.w	4(a1),d2
0000F7C6 3202                       		move.w	d2,d1
0000F7C8 D240                       		add.w	d0,d1
0000F7CA 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000F7CC 3202                       		move.w	d2,d1
0000F7CE 9240                       		sub.w	d0,d1
0000F7D0 0C41 00E0                  		cmpi.w	#224,d1
0000F7D4 6C00                       		bge.s	@skipObject
0000F7D6 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000F7DA 6000                       		bra.s	@drawObject
0000F7DC                            ; ===========================================================================
0000F7DC                            
0000F7DC                            	@screenCoords:
0000F7DC 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000F7E0 3628 0008                  		move.w	obX(a0),d3
0000F7E4 6000                       		bra.s	@drawObject
0000F7E6                            ; ===========================================================================
0000F7E6                            
0000F7E6                            	@assumeHeight:
0000F7E6 3428 000C                  		move.w	obY(a0),d2
0000F7EA 9469 0004                  		sub.w	obMap(a1),d2
0000F7EE 0642 0080                  		addi.w	#$80,d2
0000F7F2 0C42 0060                  		cmpi.w	#$60,d2
0000F7F6 6500                       		blo.s	@skipObject
0000F7F8 0C42 0180                  		cmpi.w	#$180,d2
0000F7FC 6400                       		bhs.s	@skipObject
0000F7FE                            
0000F7FE                            	@drawObject:
0000F7FE 2268 0004                  		movea.l	obMap(a0),a1
0000F802 7200                       		moveq	#0,d1
0000F804 0804 0005                  		btst	#5,d4
0000F808 6600                       		bne.s	@drawFrame
0000F80A 1228 001A                  		move.b	$1A(a0),d1
0000F80E D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F810 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F814 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F816 1219                       		move.b	(a1)+,d1
0000F818 5301                       		subq.b	#1,d1
0000F81A 6B00                       		bmi.s	@setVisible
0000F81C                            
0000F81C                            	@drawFrame:
0000F81C 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000F820                            
0000F820                            	@setVisible:
0000F820 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000F826                            
0000F826                            	@skipObject:
0000F826 5446                       		addq.w	#2,d6
0000F828 5554                       		subq.w	#2,(a4)			; number of objects left
0000F82A 6600 FF44                  		bne.w	@objectLoop
0000F82E                            
0000F82E                            	@nextPriority:
0000F82E 49EC 0080                  		lea	$80(a4),a4
0000F832 51CF FF34                  		dbf	d7,@priorityLoop
0000F836 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000F83A 0C05 0050                  		cmpi.b	#$50,d5
0000F83E 6700                       		beq.s	@spriteLimit
0000F840 24BC 0000 0000             		move.l	#0,(a2)
0000F846 4E75                       		rts	
0000F848                            ; ===========================================================================
0000F848                            
0000F848                            	@spriteLimit:
0000F848 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000F84E 4E75                       		rts	
0000F850                            ; End of function BuildSprites
0000F850                            
0000F850                            
0000F850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F850                            
0000F850                            
0000F850                            BuildSpr_Draw:
0000F850 3668 0002                  		movea.w	obGfx(a0),a3
0000F854 0804 0000                  		btst	#0,d4
0000F858 6600                       		bne.s	BuildSpr_FlipX
0000F85A 0804 0001                  		btst	#1,d4
0000F85E 6600 0000                  		bne.w	BuildSpr_FlipY
0000F862                            ; End of function BuildSpr_Draw
0000F862                            
0000F862                            
0000F862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F862                            
0000F862                            
0000F862                            BuildSpr_Normal:
0000F862 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F866 6700                       		beq.s	@return
0000F868 1019                       		move.b	(a1)+,d0	; get y-offset
0000F86A 4880                       		ext.w	d0
0000F86C D042                       		add.w	d2,d0		; add y-position
0000F86E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F870 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000F872 5205                       		addq.b	#1,d5		; increase sprite counter
0000F874 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000F876 1019                       		move.b	(a1)+,d0	; get art tile
0000F878 E148                       		lsl.w	#8,d0
0000F87A 1019                       		move.b	(a1)+,d0
0000F87C D04B                       		add.w	a3,d0		; add art tile offset
0000F87E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F880 1019                       		move.b	(a1)+,d0	; get x-offset
0000F882 4880                       		ext.w	d0
0000F884 D043                       		add.w	d3,d0		; add x-position
0000F886 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F88A 6600                       		bne.s	@writeX
0000F88C 5240                       		addq.w	#1,d0
0000F88E                            
0000F88E                            	@writeX:
0000F88E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F890 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000F894                            
0000F894                            	@return:
0000F894 4E75                       		rts	
0000F896                            ; End of function BuildSpr_Normal
0000F896                            
0000F896                            ; ===========================================================================
0000F896                            
0000F896                            BuildSpr_FlipX:
0000F896 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000F89A 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000F89E                            
0000F89E                            	@loop:
0000F89E 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8A2 6700                       		beq.s	@return
0000F8A4 1019                       		move.b	(a1)+,d0	; y position
0000F8A6 4880                       		ext.w	d0
0000F8A8 D042                       		add.w	d2,d0
0000F8AA 34C0                       		move.w	d0,(a2)+
0000F8AC 1819                       		move.b	(a1)+,d4	; size
0000F8AE 14C4                       		move.b	d4,(a2)+	
0000F8B0 5205                       		addq.b	#1,d5		; link
0000F8B2 14C5                       		move.b	d5,(a2)+
0000F8B4 1019                       		move.b	(a1)+,d0	; art tile
0000F8B6 E148                       		lsl.w	#8,d0
0000F8B8 1019                       		move.b	(a1)+,d0	
0000F8BA D04B                       		add.w	a3,d0
0000F8BC 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000F8C0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8C2 1019                       		move.b	(a1)+,d0	; get x-offset
0000F8C4 4880                       		ext.w	d0
0000F8C6 4440                       		neg.w	d0			; negate it
0000F8C8 D804                       		add.b	d4,d4		; calculate flipped position by size
0000F8CA 0244 0018                  		andi.w	#$18,d4
0000F8CE 5044                       		addq.w	#8,d4
0000F8D0 9044                       		sub.w	d4,d0
0000F8D2 D043                       		add.w	d3,d0
0000F8D4 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F8D8 6600                       		bne.s	@writeX
0000F8DA 5240                       		addq.w	#1,d0
0000F8DC                            
0000F8DC                            	@writeX:
0000F8DC 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8DE 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000F8E2                            
0000F8E2                            	@return:
0000F8E2 4E75                       		rts	
0000F8E4                            ; ===========================================================================
0000F8E4                            
0000F8E4                            BuildSpr_FlipY:
0000F8E4 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8E8 6700                       		beq.s	@return
0000F8EA 1019                       		move.b	(a1)+,d0	; get y-offset
0000F8EC 1811                       		move.b	(a1),d4		; get size
0000F8EE 4880                       		ext.w	d0
0000F8F0 4440                       		neg.w	d0		; negate y-offset
0000F8F2 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000F8F4 0244 0018                  		andi.w	#$18,d4
0000F8F8 5044                       		addq.w	#8,d4
0000F8FA 9044                       		sub.w	d4,d0
0000F8FC D042                       		add.w	d2,d0	; add y-position
0000F8FE 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F900 14D9                       		move.b	(a1)+,(a2)+	; size
0000F902 5205                       		addq.b	#1,d5
0000F904 14C5                       		move.b	d5,(a2)+	; link
0000F906 1019                       		move.b	(a1)+,d0	; art tile
0000F908 E148                       		lsl.w	#8,d0
0000F90A 1019                       		move.b	(a1)+,d0
0000F90C D04B                       		add.w	a3,d0
0000F90E 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000F912 34C0                       		move.w	d0,(a2)+
0000F914 1019                       		move.b	(a1)+,d0	; x-position
0000F916 4880                       		ext.w	d0
0000F918 D043                       		add.w	d3,d0
0000F91A 0240 01FF                  		andi.w	#$1FF,d0
0000F91E 6600                       		bne.s	@writeX
0000F920 5240                       		addq.w	#1,d0
0000F922                            
0000F922                            	@writeX:
0000F922 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F924 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000F928                            
0000F928                            	@return:
0000F928 4E75                       		rts	
0000F92A                            ; ===========================================================================
0000F92A                            
0000F92A                            BuildSpr_FlipXY:
0000F92A 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F92E 6700                       		beq.s	@return
0000F930 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000F932 1811                       		move.b	(a1),d4
0000F934 4880                       		ext.w	d0
0000F936 4440                       		neg.w	d0
0000F938 E70C                       		lsl.b	#3,d4
0000F93A 0244 0018                  		andi.w	#$18,d4
0000F93E 5044                       		addq.w	#8,d4
0000F940 9044                       		sub.w	d4,d0
0000F942 D042                       		add.w	d2,d0
0000F944 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F946 1819                       		move.b	(a1)+,d4	; size
0000F948 14C4                       		move.b	d4,(a2)+	; link
0000F94A 5205                       		addq.b	#1,d5
0000F94C 14C5                       		move.b	d5,(a2)+	; art tile
0000F94E 1019                       		move.b	(a1)+,d0
0000F950 E148                       		lsl.w	#8,d0
0000F952 1019                       		move.b	(a1)+,d0
0000F954 D04B                       		add.w	a3,d0
0000F956 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000F95A 34C0                       		move.w	d0,(a2)+
0000F95C 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000F95E 4880                       		ext.w	d0
0000F960 4440                       		neg.w	d0
0000F962 D804                       		add.b	d4,d4
0000F964 0244 0018                  		andi.w	#$18,d4
0000F968 5044                       		addq.w	#8,d4
0000F96A 9044                       		sub.w	d4,d0
0000F96C D043                       		add.w	d3,d0
0000F96E 0240 01FF                  		andi.w	#$1FF,d0
0000F972 6600                       		bne.s	@writeX
0000F974 5240                       		addq.w	#1,d0
0000F976                            
0000F976                            	@writeX:
0000F976 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F978 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000F97C                            
0000F97C                            	@return:
0000F97C 4E75                       		rts	
0000F97E                            
0000F97E                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E                            ; Subroutine to	check if an object is off screen
0000F97E                            
0000F97E                            ; output:
0000F97E                            ;	d0 = flag set if object is off screen
0000F97E                            ; ---------------------------------------------------------------------------
0000F97E                            
0000F97E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F97E                            
0000F97E                            
0000F97E                            ChkObjectVisible:
0000F97E 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F982 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F986 6B00                       		bmi.s	@offscreen
0000F988 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F98C 6C00                       		bge.s	@offscreen	; if not, branch
0000F98E                            
0000F98E 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F992 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F996 6B00                       		bmi.s	@offscreen
0000F998 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F99C 6C00                       		bge.s	@offscreen	; if not, branch
0000F99E                            
0000F99E 7000                       		moveq	#0,d0		; set flag to 0
0000F9A0 4E75                       		rts	
0000F9A2                            
0000F9A2                            	@offscreen:
0000F9A2 7001                       		moveq	#1,d0		; set flag to 1
0000F9A4 4E75                       		rts	
0000F9A6                            ; End of function ChkObjectVisible
0000F9A6                            
0000F9A6                            ; ---------------------------------------------------------------------------
0000F9A6                            ; Subroutine to	check if an object is off screen
0000F9A6                            ; More precise than above subroutine, taking width into account
0000F9A6                            
0000F9A6                            ; output:
0000F9A6                            ;	d0 = flag set if object is off screen
0000F9A6                            ; ---------------------------------------------------------------------------
0000F9A6                            
0000F9A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9A6                            
0000F9A6                            
0000F9A6                            ChkPartiallyVisible:
0000F9A6 7200                       		moveq	#0,d1
0000F9A8 1228 0014                  		move.b	obActWid(a0),d1
0000F9AC 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F9B0 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F9B4 D041                       		add.w	d1,d0		; add object width
0000F9B6 6B00                       		bmi.s	@offscreen2
0000F9B8 D241                       		add.w	d1,d1
0000F9BA 9041                       		sub.w	d1,d0
0000F9BC 0C40 0140                  		cmpi.w	#320,d0
0000F9C0 6C00                       		bge.s	@offscreen2
0000F9C2                            
0000F9C2 3228 000C                  		move.w	obY(a0),d1
0000F9C6 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F9CA 6B00                       		bmi.s	@offscreen2
0000F9CC 0C41 00E0                  		cmpi.w	#224,d1
0000F9D0 6C00                       		bge.s	@offscreen2
0000F9D2                            
0000F9D2 7000                       		moveq	#0,d0
0000F9D4 4E75                       		rts	
0000F9D6                            
0000F9D6                            	@offscreen2:
0000F9D6 7001                       		moveq	#1,d0
0000F9D8 4E75                       		rts	
0000F9DA                            ; End of function ChkPartiallyVisible
0000F9DA                            ; End of function ChkPartiallyVisible
0000F9DA                            
0000F9DA                            ; ---------------------------------------------------------------------------
0000F9DA                            ; Subroutine to	load a level's objects
0000F9DA                            ; ---------------------------------------------------------------------------
0000F9DA                            
0000F9DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9DA                            
0000F9DA                            
0000F9DA                            ObjPosLoad:
0000F9DA 7000                       		moveq	#0,d0
0000F9DC 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F9E0 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F9E4 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F9E8                            ; End of function ObjPosLoad
0000F9E8                            
0000F9E8                            ; ===========================================================================
0000F9E8 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F9EA 0000                       		dc.w OPL_Next-OPL_Index
0000F9EC                            ; ===========================================================================
0000F9EC                            
0000F9EC                            OPL_Main:
0000F9EC 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F9F0 3038 FE10                  		move.w	(v_zone).w,d0
0000F9F4 ED08                       		lsl.b	#6,d0
0000F9F6 E848                       		lsr.w	#4,d0
0000F9F8 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F9FE 2248                       		movea.l	a0,a1
0000FA00 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FA04 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA08 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA0C D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FA10 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FA14 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FA18 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA1C 34FC 0101                  		move.w	#$101,(a2)+
0000FA20 303C 005E                  		move.w	#$5E,d0
0000FA24                            
0000FA24                            OPL_ClrList:
0000FA24 429A                       		clr.l	(a2)+
0000FA26 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FA2A                            
0000FA2A 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA2E 7400                       		moveq	#0,d2
0000FA30 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA34 0446 0080                  		subi.w	#$80,d6
0000FA38 6400                       		bhs.s	loc_D93C
0000FA3A 7C00                       		moveq	#0,d6
0000FA3C                            
0000FA3C                            loc_D93C:
0000FA3C 0246 FF80                  		andi.w	#$FF80,d6
0000FA40 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FA44                            
0000FA44                            loc_D944:
0000FA44 BC50                       		cmp.w	(a0),d6
0000FA46 6300                       		bls.s	loc_D956
0000FA48 4A28 0004                  		tst.b	4(a0)
0000FA4C 6A00                       		bpl.s	loc_D952
0000FA4E 1412                       		move.b	(a2),d2
0000FA50 5212                       		addq.b	#1,(a2)
0000FA52                            
0000FA52                            loc_D952:
0000FA52 5C48                       		addq.w	#6,a0
0000FA54 60EE                       		bra.s	loc_D944
0000FA56                            ; ===========================================================================
0000FA56                            
0000FA56                            loc_D956:
0000FA56 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA5A 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FA5E 0446 0080                  		subi.w	#$80,d6
0000FA62 6500                       		blo.s	loc_D976
0000FA64                            
0000FA64                            loc_D964:
0000FA64 BC50                       		cmp.w	(a0),d6
0000FA66 6300                       		bls.s	loc_D976
0000FA68 4A28 0004                  		tst.b	4(a0)
0000FA6C 6A00                       		bpl.s	loc_D972
0000FA6E 522A 0001                  		addq.b	#1,1(a2)
0000FA72                            
0000FA72                            loc_D972:
0000FA72 5C48                       		addq.w	#6,a0
0000FA74 60EE                       		bra.s	loc_D964
0000FA76                            ; ===========================================================================
0000FA76                            
0000FA76                            loc_D976:
0000FA76 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA7A 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FA80                            
0000FA80                            OPL_Next:
0000FA80 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA84 7400                       		moveq	#0,d2
0000FA86 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA8A 0246 FF80                  		andi.w	#$FF80,d6
0000FA8E BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FA92 6700 0000                  		beq.w	locret_DA3A
0000FA96 6C00                       		bge.s	loc_D9F6
0000FA98 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FA9C 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FAA0 0446 0080                  		subi.w	#$80,d6
0000FAA4 6500                       		blo.s	loc_D9D2
0000FAA6                            
0000FAA6                            loc_D9A6:
0000FAA6 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FAAA 6C00                       		bge.s	loc_D9D2
0000FAAC 5D48                       		subq.w	#6,a0
0000FAAE 4A28 0004                  		tst.b	4(a0)
0000FAB2 6A00                       		bpl.s	loc_D9BC
0000FAB4 532A 0001                  		subq.b	#1,1(a2)
0000FAB8 142A 0001                  		move.b	1(a2),d2
0000FABC                            
0000FABC                            loc_D9BC:
0000FABC 6100 0000                  		bsr.w	loc_DA3C
0000FAC0 6600                       		bne.s	loc_D9C6
0000FAC2 5D48                       		subq.w	#6,a0
0000FAC4 60E0                       		bra.s	loc_D9A6
0000FAC6                            ; ===========================================================================
0000FAC6                            
0000FAC6                            loc_D9C6:
0000FAC6 4A28 0004                  		tst.b	4(a0)
0000FACA 6A00                       		bpl.s	loc_D9D0
0000FACC 522A 0001                  		addq.b	#1,1(a2)
0000FAD0                            
0000FAD0                            loc_D9D0:
0000FAD0 5C48                       		addq.w	#6,a0
0000FAD2                            
0000FAD2                            loc_D9D2:
0000FAD2 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FAD6 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FADA 0646 0300                  		addi.w	#$300,d6
0000FADE                            
0000FADE                            loc_D9DE:
0000FADE BC68 FFFA                  		cmp.w	-6(a0),d6
0000FAE2 6E00                       		bgt.s	loc_D9F0
0000FAE4 4A28 FFFE                  		tst.b	-2(a0)
0000FAE8 6A00                       		bpl.s	loc_D9EC
0000FAEA 5312                       		subq.b	#1,(a2)
0000FAEC                            
0000FAEC                            loc_D9EC:
0000FAEC 5D48                       		subq.w	#6,a0
0000FAEE 60EE                       		bra.s	loc_D9DE
0000FAF0                            ; ===========================================================================
0000FAF0                            
0000FAF0                            loc_D9F0:
0000FAF0 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FAF4 4E75                       		rts	
0000FAF6                            ; ===========================================================================
0000FAF6                            
0000FAF6                            loc_D9F6:
0000FAF6 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FAFA 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FAFE 0646 0280                  		addi.w	#$280,d6
0000FB02                            
0000FB02                            loc_DA02:
0000FB02 BC50                       		cmp.w	(a0),d6
0000FB04 6300                       		bls.s	loc_DA16
0000FB06 4A28 0004                  		tst.b	4(a0)
0000FB0A 6A00                       		bpl.s	loc_DA10
0000FB0C 1412                       		move.b	(a2),d2
0000FB0E 5212                       		addq.b	#1,(a2)
0000FB10                            
0000FB10                            loc_DA10:
0000FB10 6100 0000                  		bsr.w	loc_DA3C
0000FB14 67EC                       		beq.s	loc_DA02
0000FB16                            
0000FB16                            loc_DA16:
0000FB16 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB1A 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FB1E 0446 0300                  		subi.w	#$300,d6
0000FB22 6500                       		blo.s	loc_DA36
0000FB24                            
0000FB24                            loc_DA24:
0000FB24 BC50                       		cmp.w	(a0),d6
0000FB26 6300                       		bls.s	loc_DA36
0000FB28 4A28 0004                  		tst.b	4(a0)
0000FB2C 6A00                       		bpl.s	loc_DA32
0000FB2E 522A 0001                  		addq.b	#1,1(a2)
0000FB32                            
0000FB32                            loc_DA32:
0000FB32 5C48                       		addq.w	#6,a0
0000FB34 60EE                       		bra.s	loc_DA24
0000FB36                            ; ===========================================================================
0000FB36                            
0000FB36                            loc_DA36:
0000FB36 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB3A                            
0000FB3A                            locret_DA3A:
0000FB3A 4E75                       		rts	
0000FB3C                            ; ===========================================================================
0000FB3C                            
0000FB3C                            loc_DA3C:
0000FB3C 4A28 0004                  		tst.b	4(a0)
0000FB40 6A00                       		bpl.s	OPL_MakeItem
0000FB42 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FB48 6700                       		beq.s	OPL_MakeItem
0000FB4A 5C48                       		addq.w	#6,a0
0000FB4C 7000                       		moveq	#0,d0
0000FB4E 4E75                       		rts	
0000FB50                            ; ===========================================================================
0000FB50                            
0000FB50                            OPL_MakeItem:
0000FB50 6100 0000                  		bsr.w	FindFreeObj
0000FB54 6600                       		bne.s	locret_DA8A
0000FB56 3358 0008                  		move.w	(a0)+,obX(a1)
0000FB5A 3018                       		move.w	(a0)+,d0
0000FB5C 3200                       		move.w	d0,d1
0000FB5E 0240 0FFF                  		andi.w	#$FFF,d0
0000FB62 3340 000C                  		move.w	d0,obY(a1)
0000FB66 E559                       		rol.w	#2,d1
0000FB68 0201 0003                  		andi.b	#3,d1
0000FB6C 1341 0001                  		move.b	d1,obRender(a1)
0000FB70 1341 0022                  		move.b	d1,obStatus(a1)
0000FB74 1018                       		move.b	(a0)+,d0
0000FB76 6A00                       		bpl.s	loc_DA80
0000FB78 0200 007F                  		andi.b	#$7F,d0
0000FB7C 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FB80                            
0000FB80                            loc_DA80:
0000FB80 1280                       		move.b	d0,0(a1)
0000FB82 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FB86 7000                       		moveq	#0,d0
0000FB88                            
0000FB88                            locret_DA8A:
0000FB88 4E75                       		rts	
0000FB8A                            
0000FB8A                            		include	"_incObj\sub FindFreeObj.asm"
0000FB8A                            ; ---------------------------------------------------------------------------
0000FB8A                            ; Subroutine to find a free object space
0000FB8A                            
0000FB8A                            ; output:
0000FB8A                            ;	a1 = free position in object RAM
0000FB8A                            ; ---------------------------------------------------------------------------
0000FB8A                            
0000FB8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB8A                            
0000FB8A                            
0000FB8A                            FindFreeObj:
0000FB8A 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FB8E 303C 005F                  		move.w	#$5F,d0
0000FB92                            
0000FB92                            	FFree_Loop:
0000FB92 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FB94 6700                       		beq.s	FFree_Found	; if yes, branch
0000FB96 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FB9A 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FB9E                            
0000FB9E                            	FFree_Found:
0000FB9E 4E75                       		rts	
0000FBA0                            
0000FBA0                            ; End of function FindFreeObj
0000FBA0                            
0000FBA0                            
0000FBA0                            ; ---------------------------------------------------------------------------
0000FBA0                            ; Subroutine to find a free object space AFTER the current one
0000FBA0                            
0000FBA0                            ; output:
0000FBA0                            ;	a1 = free position in object RAM
0000FBA0                            ; ---------------------------------------------------------------------------
0000FBA0                            
0000FBA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBA0                            
0000FBA0                            
0000FBA0                            FindNextFreeObj:
0000FBA0 2248                       		movea.l	a0,a1
0000FBA2 303C F000                  		move.w	#$F000,d0
0000FBA6 9048                       		sub.w	a0,d0
0000FBA8 EC48                       		lsr.w	#6,d0
0000FBAA 5340                       		subq.w	#1,d0
0000FBAC 6500                       		bcs.s	NFree_Found
0000FBAE                            
0000FBAE                            	NFree_Loop:
0000FBAE 4A11                       		tst.b	(a1)
0000FBB0 6700                       		beq.s	NFree_Found
0000FBB2 43E9 0040                  		lea	$40(a1),a1
0000FBB6 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FBBA                            
0000FBBA                            	NFree_Found:
0000FBBA 4E75                       		rts	
0000FBBC                            
0000FBBC                            ; End of function FindNextFreeObj
0000FBBC                            ; End of function FindNextFreeObj
0000FBBC                            		include	"_incObj\41 Springs.asm"
0000FBBC                            ; ---------------------------------------------------------------------------
0000FBBC                            ; Object 41 - springs
0000FBBC                            ; ---------------------------------------------------------------------------
0000FBBC                            
0000FBBC                            Springs:
0000FBBC 7000                       		moveq	#0,d0
0000FBBE 1028 0024                  		move.b	obRoutine(a0),d0
0000FBC2 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FBC6 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FBCA 6100 FB32                  		bsr.w	DisplaySprite
0000FBEC 4E75                       		rts	
0000FBEE                            ; ===========================================================================
0000FBEE 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FBF0 0000                       		dc.w Spring_Up-Spring_Index
0000FBF2 0000                       		dc.w Spring_AniUp-Spring_Index
0000FBF4 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FBF6 0000                       		dc.w Spring_LR-Spring_Index
0000FBF8 0000                       		dc.w Spring_AniLR-Spring_Index
0000FBFA 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FBFC 0000                       		dc.w Spring_Dwn-Spring_Index
0000FBFE 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FC00 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FC02                            
0000FC02 =00000030                  spring_pow:	equ $30			; power of current spring
0000FC02                            
0000FC02 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FC04 F600                       		dc.w -$A00		; power	of yellow spring
0000FC06                            ; ===========================================================================
0000FC06                            
0000FC06                            Spring_Main:	; Routine 0
0000FC06 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC0A 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FC12 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FC18 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FC1E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FC24 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FC2A 1028 0028                  		move.b	obSubtype(a0),d0
0000FC2E 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FC32 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FC34                            
0000FC34 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FC3A 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FC40 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FC46 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FC4C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FC52                            
0000FC52                            	Spring_NotLR:
0000FC52 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FC56 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FC58                            
0000FC58 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FC5E 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FC64                            
0000FC64                            	Spring_NotDwn:
0000FC64 0800 0001                  		btst	#1,d0
0000FC68 6700                       		beq.s	loc_DB72
0000FC6A 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FC70                            
0000FC70                            loc_DB72:
0000FC70 0240 000F                  		andi.w	#$F,d0
0000FC74 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FC7A 4E75                       		rts	
0000FC7C                            ; ===========================================================================
0000FC7C                            
0000FC7C                            Spring_Up:	; Routine 2
0000FC7C 323C 001B                  		move.w	#$1B,d1
0000FC80 343C 0008                  		move.w	#8,d2
0000FC84 363C 0010                  		move.w	#$10,d3
0000FC88 3828 0008                  		move.w	obX(a0),d4
0000FC8C 6100 0000                  		bsr.w	SolidObject
0000FC90 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FC94 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FC96 4E75                       		rts	
0000FC98                            ; ===========================================================================
0000FC98                            
0000FC98                            Spring_BounceUp:
0000FC98 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC9C 5069 000C                  		addq.w	#8,obY(a1)
0000FCA0 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FCA6 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FCAC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FCB2 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FCB8 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FCBE 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FCC4 4228 0025                  		clr.b	obSolid(a0)
0000FCD2                            
0000FCD2                            Spring_AniUp:	; Routine 4
0000FCD2 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FCD8 6000 CAD0                  		bra.w	AnimateSprite
0000FCDC                            ; ===========================================================================
0000FCDC                            
0000FCDC                            Spring_ResetUp:	; Routine 6
0000FCDC 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FCE2 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FCE6 4E75                       		rts	
0000FCE8                            ; ===========================================================================
0000FCE8                            
0000FCE8                            Spring_LR:	; Routine 8
0000FCE8 323C 0013                  		move.w	#$13,d1
0000FCEC 343C 000E                  		move.w	#$E,d2
0000FCF0 363C 000F                  		move.w	#$F,d3
0000FCF4 3828 0008                  		move.w	obX(a0),d4
0000FCF8 6100 0000                  		bsr.w	SolidObject
0000FCFC 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FD02 6600                       		bne.s	loc_DC0C
0000FD04 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FD0A                            
0000FD0A                            loc_DC0C:
0000FD0A 0828 0005 0022             		btst	#5,obStatus(a0)
0000FD10 6600                       		bne.s	Spring_BounceLR
0000FD12 4E75                       		rts	
0000FD14                            ; ===========================================================================
0000FD14                            
0000FD14                            Spring_BounceLR:
0000FD14 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD18 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FD1E 5069 0008                  		addq.w	#8,obX(a1)
0000FD22 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FD28 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FD2A 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FD30 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FD34                            
0000FD34                            	Spring_Flipped:
0000FD34 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FD3A 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FD40 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FD46 0829 0002 0022             		btst	#2,obStatus(a1)
0000FD4C 6600                       		bne.s	loc_DC56
0000FD4E 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FD54                            
0000FD54                            loc_DC56:
0000FD54 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FD5A 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FD6A                            
0000FD6A                            Spring_AniLR:	; Routine $A
0000FD6A 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FD6E 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FD74 6000 CA34                  		bra.w	AnimateSprite
0000FD78                            ; ===========================================================================
0000FD78                            
0000FD78                            Spring_ResetLR:	; Routine $C
0000FD78 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FD7E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FD82 4E75                       		rts	
0000FD84                            ; ===========================================================================
0000FD84                            
0000FD84                            Spring_Dwn:	; Routine $E
0000FD84 323C 001B                  		move.w	#$1B,d1
0000FD88 343C 0008                  		move.w	#8,d2
0000FD8C 363C 0010                  		move.w	#$10,d3
0000FD90 3828 0008                  		move.w	obX(a0),d4
0000FD94 6100 0000                  		bsr.w	SolidObject
0000FD98 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FD9E 6600                       		bne.s	loc_DCA4
0000FDA0 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FDA6                            
0000FDA6                            loc_DCA4:
0000FDA6 4A28 0025                  		tst.b	obSolid(a0)
0000FDAA 6600                       		bne.s	locret_DCAE
0000FDAC 4A44                       		tst.w	d4
0000FDAE 6B00                       		bmi.s	Spring_BounceDwn
0000FDB0                            
0000FDB0                            locret_DCAE:
0000FDB0 4E75                       		rts	
0000FDB2                            ; ===========================================================================
0000FDB2                            
0000FDB2                            Spring_BounceDwn:
0000FDB2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDB6 5169 000C                  		subq.w	#8,obY(a1)
0000FDBA 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FDC0 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FDC4 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FDCA 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FDD0 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FDD6 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FDDC 4228 0025                  		clr.b	obSolid(a0)
0000FDEA                            
0000FDEA                            Spring_AniDwn:	; Routine $10
0000FDEA 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FDF0 6000 C9B8                  		bra.w	AnimateSprite
0000FDF4                            ; ===========================================================================
0000FDF4                            
0000FDF4                            Spring_ResetDwn:
0000FDF4                            		; Routine $12
0000FDF4 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FDFA 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FDFE 4E75                       		rts	
0000FDFE 4E75                       		rts	
0000FE00                            		include	"_anim\Springs.asm"
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00                            ; Animation script - springs
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FE02 0000                       		dc.w byte_DD0E-Ani_Spring
0000FE04 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FE10 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FE1C                            		even
0000FE1C                            		even
0000FE1C                            Map_Spring:	include	"_maps\Springs.asm"
0000FE1C                            ; ---------------------------------------------------------------------------
0000FE1C                            ; Sprite mappings - springs
0000FE1C                            ; ---------------------------------------------------------------------------
0000FE1C                            Map_Spring_internal:
0000FE1C 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FE1E 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FE20 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FE22 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FE24 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FE26 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FE28 02                         M_Spg_Up:	dc.b 2			; facing up
0000FE29 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FE2E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FE33 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FE34 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FE39 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FE3A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FE3F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FE44 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FE49 01                         M_Spg_Left:	dc.b 1			; facing left
0000FE4A F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FE4F 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FE50 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FE55 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FE56 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FE5B F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FE60 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FE65 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FE6A                            		even
0000FE6A                            		even
0000FE6A                            
0000FE6A                            		include	"_incObj\42 Newtron.asm"
0000FE6A                            ; ---------------------------------------------------------------------------
0000FE6A                            ; Object 42 - Newtron enemy (GHZ)
0000FE6A                            ; ---------------------------------------------------------------------------
0000FE6A                            
0000FE6A                            Newtron:
0000FE6A 7000                       		moveq	#0,d0
0000FE6C 1028 0024                  		move.b	obRoutine(a0),d0
0000FE70 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FE74 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FE78                            ; ===========================================================================
0000FE78 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FE7A 0000                       		dc.w Newt_Action-Newt_Index
0000FE7C 0000                       		dc.w Newt_Delete-Newt_Index
0000FE7E                            ; ===========================================================================
0000FE7E                            
0000FE7E                            Newt_Main:	; Routine 0
0000FE7E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE82 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FE8A 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FE90 117C 0004 0001             		move.b	#4,obRender(a0)
0000FE96 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FE9C 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FEA2 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FEA8 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FEAE                            
0000FEAE                            Newt_Action:	; Routine 2
0000FEAE 7000                       		moveq	#0,d0
0000FEB0 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FEB4 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FEB8 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FEBC 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FEC2 6100 C8E6                  		bsr.w	AnimateSprite
0000FEC6 6000 0000                  		bra.w	RememberState
0000FECA                            ; ===========================================================================
0000FECA 0000                       @index:		dc.w @chkdistance-@index
0000FECC 0000                       		dc.w @type00-@index
0000FECE 0000                       		dc.w @matchfloor-@index
0000FED0 0000                       		dc.w @speed-@index
0000FED2 0000                       		dc.w @type01-@index
0000FED4                            ; ===========================================================================
0000FED4                            
0000FED4                            @chkdistance:
0000FED4 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FEDA 3038 D008                  		move.w	(v_player+obX).w,d0
0000FEDE 9068 0008                  		sub.w	obX(a0),d0
0000FEE2 6400                       		bcc.s	@sonicisright
0000FEE4 4440                       		neg.w	d0
0000FEE6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FEEC                            
0000FEEC                            	@sonicisright:
0000FEEC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FEF0 6400                       		bcc.s	@outofrange	; if not, branch
0000FEF2 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FEF6 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FEFC 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FF00 6700                       		beq.s	@istype00	; if type is 00, branch
0000FF02                            
0000FF02 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FF08 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FF0E 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FF14                            
0000FF14                            	@outofrange:
0000FF14                            	@istype00:
0000FF14 4E75                       		rts	
0000FF16                            ; ===========================================================================
0000FF16                            
0000FF16                            @type00:
0000FF16 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FF1C 6400                       		bcc.s	@fall		; is yes, branch
0000FF1E 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FF24 3038 D008                  		move.w	(v_player+obX).w,d0
0000FF28 9068 0008                  		sub.w	obX(a0),d0
0000FF2C 6400                       		bcc.s	@sonicisright2
0000FF2E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FF34                            
0000FF34                            	@sonicisright2:
0000FF34 4E75                       		rts	
0000FF36                            ; ===========================================================================
0000FF36                            
0000FF36                            	@fall:
0000FF36 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FF3C 6600                       		bne.s	@loc_DE42
0000FF3E 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FF44                            
0000FF44                            	@loc_DE42:
0000FF44 6100 F76C                  		bsr.w	ObjectFall
0000FF48 6100 0000                  		bsr.w	ObjFloorDist
0000FF4C 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FF4E 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FF50                            
0000FF50 D368 000C                  		add.w	d1,obY(a0)
0000FF54 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FF5A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FF5E 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FF64 0828 0005 0002             		btst	#5,obGfx(a0)
0000FF6A 6700                       		beq.s	@pppppppp
0000FF6C 5228 001C                  		addq.b	#1,obAnim(a0)
0000FF70                            
0000FF70                            	@pppppppp:
0000FF70 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FF76 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FF7C 0828 0000 0022             		btst	#0,obStatus(a0)
0000FF82 6600                       		bne.s	@keepfalling
0000FF84 4468 0010                  		neg.w	obVelX(a0)
0000FF88                            
0000FF88                            	@keepfalling:
0000FF88 4E75                       		rts	
0000FF8A                            ; ===========================================================================
0000FF8A                            
0000FF8A                            @matchfloor:
0000FF8A 6100 F75E                  		bsr.w	SpeedToPos
0000FF8E 6100 0000                  		bsr.w	ObjFloorDist
0000FF92 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF96 6D00                       		blt.s	@nextroutine
0000FF98 0C41 000C                  		cmpi.w	#$C,d1
0000FF9C 6C00                       		bge.s	@nextroutine
0000FF9E D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FFA2 4E75                       		rts	
0000FFA4                            ; ===========================================================================
0000FFA4                            
0000FFA4                            	@nextroutine:
0000FFA4 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FFA8 4E75                       		rts	
0000FFAA                            ; ===========================================================================
0000FFAA                            
0000FFAA                            @speed:
0000FFAA 6100 F73E                  		bsr.w	SpeedToPos
0000FFAE 4E75                       		rts	
0000FFB0                            ; ===========================================================================
0000FFB0                            
0000FFB0                            @type01:
0000FFB0 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FFB6 6600                       		bne.s	@firemissile
0000FFB8 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FFBE                            
0000FFBE                            	@firemissile:
0000FFBE 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FFC4 6600                       		bne.s	@fail
0000FFC6 4A28 0032                  		tst.b	$32(a0)
0000FFCA 6600                       		bne.s	@fail
0000FFCC 117C 0001 0032             		move.b	#1,$32(a0)
0000FFD2 6100 FBB6                  		bsr.w	FindFreeObj
0000FFD6 6600                       		bne.s	@fail
0000FFD8 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FFDC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FFE2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FFE8 5169 000C                  		subq.w	#8,obY(a1)
0000FFEC 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FFF2 303C 0014                  		move.w	#$14,d0
0000FFF6 0828 0000 0022             		btst	#0,obStatus(a0)
0000FFFC 6600                       		bne.s	@noflip
0000FFFE 4440                       		neg.w	d0
00010000 4469 0010                  		neg.w	obVelX(a1)
00010004                            
00010004                            	@noflip:
00010004 D169 0008                  		add.w	d0,obX(a1)
00010008 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001000E 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010014                            
00010014                            	@fail:
00010014 4E75                       		rts	
00010016                            ; ===========================================================================
00010016                            
00010016                            Newt_Delete:	; Routine 4
00010016 6000 F726                  		bra.w	DeleteObject
00010016 6000 F726                  		bra.w	DeleteObject
0001001A                            		include	"_anim\Newtron.asm"
0001001A                            ; ---------------------------------------------------------------------------
0001001A                            ; Animation script - Newtron enemy
0001001A                            ; ---------------------------------------------------------------------------
0001001A 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0001001C 0000                       		dc.w A_Newt_Drop-Ani_Newt
0001001E 0000                       		dc.w A_Newt_Fly1-Ani_Newt
00010020 0000                       		dc.w A_Newt_Fly2-Ani_Newt
00010022 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010024 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
00010028 00                         		even
00010028 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
00010030 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
00010034 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
00010038 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
00010042 00                         		even
00010042 00                         		even
00010042                            Map_Newt:	include	"_maps\Newtron.asm"
00010042                            ; ---------------------------------------------------------------------------
00010042                            ; Sprite mappings - Newtron enemy (GHZ)
00010042                            ; ---------------------------------------------------------------------------
00010042                            Map_Newt_internal:
00010042 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010044 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
00010046 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
00010048 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0001004A 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0001004C 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0001004E 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
00010050 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
00010052 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010054 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
00010056 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
00010058 03                         M_Newt_Trans:	dc.b 3
00010059 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0001005E F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
00010063 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010068 03                         M_Newt_Norm:	dc.b 3
00010069 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0001006E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010073 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010078 03                         M_Newt_Fires:	dc.b 3
00010079 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001007E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010083 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010088 04                         M_Newt_Drop1:	dc.b 4
00010089 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001008E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010093 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010098 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001009D 03                         M_Newt_Drop2:	dc.b 3
0001009E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
000100A3 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000100A8 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000100AD 02                         M_Newt_Drop3:	dc.b 2
000100AE F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100B3 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100B8 03                         M_Newt_Fly1a:	dc.b 3
000100B9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
000100BE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100C3 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
000100C8 03                         M_Newt_Fly1b:	dc.b 3
000100C9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100CE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100D3 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
000100D8 03                         M_Newt_Fly2a:	dc.b 3
000100D9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100DE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100E3 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000100E8 03                         M_Newt_Fly2b:	dc.b 3
000100E9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100EE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100F3 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
000100F8 00                         M_Newt_Blank:	dc.b 0
000100FA 00                         		even
000100FA 00                         		even
000100FA                            		include	"_incObj\43 Roller.asm"
000100FA                            ; ---------------------------------------------------------------------------
000100FA                            ; Object 43 - Roller enemy (SYZ)
000100FA                            ; ---------------------------------------------------------------------------
000100FA                            
000100FA                            Roller:
000100FA 7000                       		moveq	#0,d0
000100FC 1028 0024                  		move.b	obRoutine(a0),d0
00010100 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010104 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010108                            ; ===========================================================================
00010108 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0001010A 0000                       		dc.w Roll_Action-Roll_Index
0001010C                            ; ===========================================================================
0001010C                            
0001010C                            Roll_Main:	; Routine 0
0001010C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00010112 117C 0008 0017             		move.b	#8,obWidth(a0)
00010118 6100 F598                  		bsr.w	ObjectFall
0001011C 6100 0000                  		bsr.w	ObjFloorDist
00010120 4A41                       		tst.w	d1
00010122 6A00                       		bpl.s	locret_E052
00010124 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
00010128 317C 0000 0012             		move.w	#0,obVelY(a0)
0001012E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010132 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0001013A 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
00010140 117C 0004 0001             		move.b	#4,obRender(a0)
00010146 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001014C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010152                            
00010152                            	locret_E052:
00010152 4E75                       		rts	
00010154                            ; ===========================================================================
00010154                            
00010154                            Roll_Action:	; Routine 2
00010154 7000                       		moveq	#0,d0
00010156 1028 0025                  		move.b	ob2ndRout(a0),d0
0001015A 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0001015E 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
00010162 43F9 0000 0000             		lea	(Ani_Roll).l,a1
00010168 6100 C640                  		bsr.w	AnimateSprite
0001016C 3028 0008                  		move.w	obX(a0),d0
00010170 0240 FF80                  		andi.w	#$FF80,d0
00010174 3238 F700                  		move.w	(v_screenposx).w,d1
00010178 0441 0080                  		subi.w	#$80,d1
0001017C 0241 FF80                  		andi.w	#$FF80,d1
00010180 9041                       		sub.w	d1,d0
00010182 0C40 0280                  		cmpi.w	#$280,d0
00010186 6E00 0000                  		bgt.w	Roll_ChkGone
0001018A 6000 F572                  		bra.w	DisplaySprite
0001018E                            ; ===========================================================================
0001018E                            
0001018E                            Roll_ChkGone:
0001018E 45F8 FC00                  		lea	(v_objstate).w,a2
00010192 7000                       		moveq	#0,d0
00010194 1028 0023                  		move.b	obRespawnNo(a0),d0
00010198 6700                       		beq.s	Roll_Delete
0001019A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101A0                            
000101A0                            Roll_Delete:
000101A0 6000 F59C                  		bra.w	DeleteObject
000101A4                            ; ===========================================================================
000101A4 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
000101A6 0000                       		dc.w Roll_RollNoChk-Roll_Index2
000101A8 0000                       		dc.w Roll_ChkJump-Roll_Index2
000101AA 0000                       		dc.w Roll_MatchFloor-Roll_Index2
000101AC                            ; ===========================================================================
000101AC                            
000101AC                            Roll_RollChk:
000101AC 3038 D008                  		move.w	(v_player+obX).w,d0
000101B0 0440 0100                  		subi.w	#$100,d0
000101B4 6500                       		bcs.s	loc_E0D2
000101B6 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
000101BA 6500                       		bcs.s	loc_E0D2
000101BC 5828 0025                  		addq.b	#4,ob2ndRout(a0)
000101C0 117C 0002 001C             		move.b	#2,obAnim(a0)
000101C6 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
000101CC 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
000101D2                            
000101D2                            loc_E0D2:
000101D2 588F                       		addq.l	#4,sp
000101D4 4E75                       		rts	
000101D6                            ; ===========================================================================
000101D6                            
000101D6                            Roll_RollNoChk:
000101D6 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
000101DC 6700                       		beq.s	loc_E0F8
000101DE 5368 0030                  		subq.w	#1,$30(a0)
000101E2 6A00                       		bpl.s	locret_E0F6
000101E4 117C 0001 001C             		move.b	#1,obAnim(a0)
000101EA 317C 0700 0010             		move.w	#$700,obVelX(a0)
000101F0 117C 008E 0020             		move.b	#$8E,obColType(a0)
000101F6                            
000101F6                            locret_E0F6:
000101F6 4E75                       		rts	
000101F8                            ; ===========================================================================
000101F8                            
000101F8                            loc_E0F8:
000101F8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101FC 4E75                       		rts	
000101FE                            ; ===========================================================================
000101FE                            
000101FE                            Roll_ChkJump:
000101FE 6100 0000                  		bsr.w	Roll_Stop
00010202 6100 F4E6                  		bsr.w	SpeedToPos
00010206 6100 0000                  		bsr.w	ObjFloorDist
0001020A 0C41 FFF8                  		cmpi.w	#-8,d1
0001020E 6D00                       		blt.s	Roll_Jump
00010210 0C41 000C                  		cmpi.w	#$C,d1
00010214 6C00                       		bge.s	Roll_Jump
00010216 D368 000C                  		add.w	d1,obY(a0)
0001021A 4E75                       		rts	
0001021C                            ; ===========================================================================
0001021C                            
0001021C                            Roll_Jump:
0001021C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010220 08E8 0000 0032             		bset	#0,$32(a0)
00010226 6700                       		beq.s	locret_E12E
00010228 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
0001022E                            
0001022E                            locret_E12E:
0001022E 4E75                       		rts	
00010230                            ; ===========================================================================
00010230                            
00010230                            Roll_MatchFloor:
00010230 6100 F480                  		bsr.w	ObjectFall
00010234 4A68 0012                  		tst.w	obVelY(a0)
00010238 6B00                       		bmi.s	locret_E150
0001023A 6100 0000                  		bsr.w	ObjFloorDist
0001023E 4A41                       		tst.w	d1
00010240 6A00                       		bpl.s	locret_E150
00010242 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
00010246 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001024A 317C 0000 0012             		move.w	#0,obVelY(a0)
00010250                            
00010250                            locret_E150:
00010250 4E75                       		rts	
00010252                            
00010252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010252                            
00010252                            
00010252                            Roll_Stop:
00010252 4A28 0032                  		tst.b	$32(a0)
00010256 6B00                       		bmi.s	locret_E188
00010258 3038 D008                  		move.w	(v_player+obX).w,d0
0001025C 0440 0030                  		subi.w	#$30,d0
00010260 9068 0008                  		sub.w	obX(a0),d0
00010264 6400                       		bcc.s	locret_E188
00010266 117C 0000 001C             		move.b	#0,obAnim(a0)
0001026C 117C 000E 0020             		move.b	#$E,obColType(a0)
00010272 4268 0010                  		clr.w	obVelX(a0)
00010276 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0001027C 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010282 08E8 0007 0032             		bset	#7,$32(a0)
00010288                            
00010288                            locret_E188:
00010288 4E75                       		rts	
0001028A                            ; End of function Roll_Stop
0001028A                            ; End of function Roll_Stop
0001028A                            		include	"_anim\Roller.asm"
0001028A                            ; ---------------------------------------------------------------------------
0001028A                            ; Animation script - Roller enemy
0001028A                            ; ---------------------------------------------------------------------------
0001028A 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
0001028C 0000                       		dc.w A_Roll_Fold-Ani_Roll
0001028E 0000                       		dc.w A_Roll_Roll-Ani_Roll
00010290 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010296 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0001029C 00                         		even
0001029C 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000102A2 00                         		even
000102A2 00                         		even
000102A2                            Map_Roll:	include	"_maps\Roller.asm"
000102A2                            ; --------------------------------------------------------------------------------
000102A2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000102A2                            ; --------------------------------------------------------------------------------
000102A2                            
000102A2                            SME_q3BmU:	
000102A2 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000102A6 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000102AA 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000102AC 02                         SME_q3BmU_A:	dc.b 2	
000102AD DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000102B2 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000102B7 02                         SME_q3BmU_15:	dc.b 2	
000102B8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
000102BD FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
000102C2 01                         SME_q3BmU_20:	dc.b 1	
000102C3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
000102C8 01                         SME_q3BmU_26:	dc.b 1	
000102C9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
000102CE 01                         SME_q3BmU_2C:	dc.b 1	
000102CF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
000102D4                            		even
000102D4                            		even
000102D4                            
000102D4                            		include	"_incObj\44 GHZ Edge Walls.asm"
000102D4                            ; ---------------------------------------------------------------------------
000102D4                            ; Object 44 - edge walls (GHZ)
000102D4                            ; ---------------------------------------------------------------------------
000102D4                            
000102D4                            EdgeWalls:
000102D4 7000                       		moveq	#0,d0
000102D6 1028 0024                  		move.b	obRoutine(a0),d0
000102DA 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
000102DE 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
000102E2                            ; ===========================================================================
000102E2 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
000102E4 0000                       		dc.w Edge_Solid-Edge_Index
000102E6 0000                       		dc.w Edge_Display-Edge_Index
000102E8                            ; ===========================================================================
000102E8                            
000102E8                            Edge_Main:	; Routine 0
000102E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000102EC 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
000102F4 317C 434C 0002             		move.w	#$434C,obGfx(a0)
000102FA 0028 0004 0001             		ori.b	#4,obRender(a0)
00010300 117C 0008 0014             		move.b	#8,obActWid(a0)
00010306 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001030C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010312 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010318 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
0001031A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001031E 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010320                            ; ===========================================================================
00010320                            
00010320                            Edge_Solid:	; Routine 2
00010320 323C 0013                  		move.w	#$13,d1
00010324 343C 0028                  		move.w	#$28,d2
00010328 6100 A130                  		bsr.w	Obj44_SolidWall
0001032C                            
0001032C                            Edge_Display:	; Routine 4
0001032C 6100 F3D0                  		bsr.w	DisplaySprite
0001034E 4E75                       		rts	
0001034E 4E75                       		rts	
00010350                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010350                            ; ---------------------------------------------------------------------------
00010350                            ; Sprite mappings - walls (GHZ)
00010350                            ; ---------------------------------------------------------------------------
00010350                            Map_Edge_internal:
00010350 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010352 0000                       		dc.w M_Edge_Light-Map_Edge_internal
00010354 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
00010356 04                         M_Edge_Shadow:	dc.b 4
00010357 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
0001035C F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010361 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010366 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001036B 04                         M_Edge_Light:	dc.b 4
0001036C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
00010371 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010376 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001037B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010380 04                         M_Edge_Dark:	dc.b 4
00010381 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010386 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0001038B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00010390 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010396 00                         		even
00010396 00                         		even
00010396                            
00010396                            		include	"_incObj\13 Lava Ball Maker.asm"
00010396                            ; ---------------------------------------------------------------------------
00010396                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010396                            ; ---------------------------------------------------------------------------
00010396                            
00010396                            LavaMaker:
00010396 7000                       		moveq	#0,d0
00010398 1028 0024                  		move.b	obRoutine(a0),d0
0001039C 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000103A0 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000103A4 6000 0000                  		bra.w	LBall_ChkDel
000103A8                            ; ===========================================================================
000103A8 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000103AA 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000103AC                            ; ---------------------------------------------------------------------------
000103AC                            ;
000103AC                            ; Lava ball production rates
000103AC                            ;
000103AC 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000103B2                            ; ===========================================================================
000103B2                            
000103B2                            LavaM_Main:	; Routine 0
000103B2 5428 0024                  		addq.b	#2,obRoutine(a0)
000103B6 1028 0028                  		move.b	obSubtype(a0),d0
000103BA E848                       		lsr.w	#4,d0
000103BC 0240 000F                  		andi.w	#$F,d0
000103C0 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
000103C6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
000103CC 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000103D2                            
000103D2                            LavaM_MakeLava:	; Routine 2
000103D2 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
000103D6 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
000103D8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
000103DE 6100 F59E                  		bsr.w	ChkObjectVisible
000103E2 6600                       		bne.s	LavaM_Wait
000103E4 6100 F7A4                  		bsr.w	FindFreeObj
000103E8 6600                       		bne.s	LavaM_Wait
000103EA 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
000103EE 3368 0008 0008             		move.w	obX(a0),obX(a1)
000103F4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000103FA 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010400                            
00010400                            	LavaM_Wait:
00010400 4E75                       		rts	
00010400 4E75                       		rts	
00010402                            		include	"_incObj\14 Lava Ball.asm"
00010402                            ; ---------------------------------------------------------------------------
00010402                            ; Object 14 - lava balls (MZ, SLZ)
00010402                            ; ---------------------------------------------------------------------------
00010402                            
00010402                            LavaBall:
00010402 7000                       		moveq	#0,d0
00010404 1028 0024                  		move.b	obRoutine(a0),d0
00010408 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0001040C 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010410 6000 F2EC                  		bra.w	DisplaySprite
00010414                            ; ===========================================================================
00010414 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010416 0000                       		dc.w LBall_Action-LBall_Index
00010418 0000                       		dc.w LBall_Delete-LBall_Index
0001041A                            
0001041A FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010424 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
0001042C                            ; ===========================================================================
0001042C                            
0001042C                            LBall_Main:	; Routine 0
0001042C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010430 117C 0008 0016             		move.b	#8,obHeight(a0)
00010436 117C 0008 0017             		move.b	#8,obWidth(a0)
0001043C 217C 0000 D3FC 0004        		move.l	#Map_Fire,obMap(a0)
00010444 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001044A 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010450 6600                       		bne.s	@notSLZ
00010452 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
00010458                            
00010458                            	@notSLZ:
00010458 117C 0004 0001             		move.b	#4,obRender(a0)
0001045E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010464 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001046A 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010470 4A28 0029                  		tst.b	$29(a0)
00010474 6700                       		beq.s	@speed
00010476 5428 0018                  		addq.b	#2,obPriority(a0)
0001047A                            
0001047A                            	@speed:
0001047A 7000                       		moveq	#0,d0
0001047C 1028 0028                  		move.b	obSubtype(a0),d0
00010480 D040                       		add.w	d0,d0
00010482 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010488 117C 0008 0014             		move.b	#8,obActWid(a0)
0001048E 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010494 6500                       		bcs.s	@sound		; if yes, branch
00010496                            
00010496 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001049C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000104A2 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000104A8 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000104AE                            
000104AE                            	@sound:
000104B8                            
000104B8                            LBall_Action:	; Routine 2
000104B8 7000                       		moveq	#0,d0
000104BA 1028 0028                  		move.b	obSubtype(a0),d0
000104BE D040                       		add.w	d0,d0
000104C0 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
000104C4 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
000104C8 6100 F220                  		bsr.w	SpeedToPos
000104CC 43F9 0000 0000             		lea	(Ani_Fire).l,a1
000104D2 6100 C2D6                  		bsr.w	AnimateSprite
000104D6                            
000104D6                            LBall_ChkDel:
000104F4 4E75                       		rts	
000104F6                            ; ===========================================================================
000104F6 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000104FA 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000104FE 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010502 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010506 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010508                            ; ===========================================================================
00010508                            ; lavaball types 00-03 fly up and fall back down
00010508                            
00010508                            LBall_Type00:
00010508 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0001050E 3028 0030                  		move.w	$30(a0),d0
00010512 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010516 6400                       		bcc.s	loc_E41E	; if not, branch
00010518 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
0001051C                            
0001051C                            loc_E41E:
0001051C 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010522 4A68 0012                  		tst.w	obVelY(a0)
00010526 6A00                       		bpl.s	locret_E430
00010528 08E8 0001 0022             		bset	#1,obStatus(a0)
0001052E                            
0001052E                            locret_E430:
0001052E 4E75                       		rts	
00010530                            ; ===========================================================================
00010530                            ; lavaball type	04 flies up until it hits the ceiling
00010530                            
00010530                            LBall_Type04:
00010530 08E8 0001 0022             		bset	#1,obStatus(a0)
00010536 6100 0000                  		bsr.w	ObjHitCeiling
0001053A 4A41                       		tst.w	d1
0001053C 6A00                       		bpl.s	locret_E452
0001053E 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010544 117C 0001 001C             		move.b	#1,obAnim(a0)
0001054A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010550                            
00010550                            locret_E452:
00010550 4E75                       		rts	
00010552                            ; ===========================================================================
00010552                            ; lavaball type	05 falls down until it hits the	floor
00010552                            
00010552                            LBall_Type05:
00010552 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010558 6100 0000                  		bsr.w	ObjFloorDist
0001055C 4A41                       		tst.w	d1
0001055E 6A00                       		bpl.s	locret_E474
00010560 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010566 117C 0001 001C             		move.b	#1,obAnim(a0)
0001056C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
00010572                            
00010572                            locret_E474:
00010572 4E75                       		rts	
00010574                            ; ===========================================================================
00010574                            ; lavaball types 06-07 move sideways
00010574                            
00010574                            LBall_Type06:
00010574 08E8 0000 0022             		bset	#0,obStatus(a0)
0001057A 76F8                       		moveq	#-8,d3
0001057C 6100 0000                  		bsr.w	ObjHitWallLeft
00010580 4A41                       		tst.w	d1
00010582 6A00                       		bpl.s	locret_E498
00010584 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001058A 117C 0003 001C             		move.b	#3,obAnim(a0)
00010590 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010596                            
00010596                            locret_E498:
00010596 4E75                       		rts	
00010598                            ; ===========================================================================
00010598                            
00010598                            LBall_Type07:
00010598 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001059E 7608                       		moveq	#8,d3
000105A0 6100 0000                  		bsr.w	ObjHitWallRight
000105A4 4A41                       		tst.w	d1
000105A6 6A00                       		bpl.s	locret_E4BC
000105A8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105AE 117C 0003 001C             		move.b	#3,obAnim(a0)
000105B4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000105BA                            
000105BA                            locret_E4BC:
000105BA 4E75                       		rts	
000105BC                            ; ===========================================================================
000105BC                            
000105BC                            LBall_Type08:
000105BC 4E75                       		rts	
000105BE                            ; ===========================================================================
000105BE                            
000105BE                            LBall_Delete:
000105BE 6000 F17E                  		bra.w	DeleteObject
000105BE 6000 F17E                  		bra.w	DeleteObject
000105C2                            		include	"_anim\Fireballs.asm"
000105C2                            ; ---------------------------------------------------------------------------
000105C2                            ; Animation script - lava balls
000105C2                            ; ---------------------------------------------------------------------------
000105C2 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
000105C4 0000                       		dc.w @vertcollide-Ani_Fire
000105C6 0000                       		dc.w @horizontal-Ani_Fire
000105C8 0000                       		dc.w @horicollide-Ani_Fire
000105CA 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
000105D0 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
000105D4 00                         		even
000105D4 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000105DA 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
000105DE 00                         		even
000105DE 00                         		even
000105DE                            
000105DE                            		include	"_incObj\6D Flamethrower.asm"
000105DE                            ; ---------------------------------------------------------------------------
000105DE                            ; Object 6D - flame thrower (SBZ)
000105DE                            ; ---------------------------------------------------------------------------
000105DE                            
000105DE                            Flamethrower:
000105DE 7000                       		moveq	#0,d0
000105E0 1028 0024                  		move.b	obRoutine(a0),d0
000105E4 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
000105E8 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
000105EC                            ; ===========================================================================
000105EC 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
000105EE 0000                       		dc.w Flame_Action-Flame_Index
000105F0                            ; ===========================================================================
000105F0                            
000105F0                            Flame_Main:	; Routine 0
000105F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000105F4 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
000105FC 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010602 0028 0004 0001             		ori.b	#4,obRender(a0)
00010608 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001060E 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010614 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001061A 1028 0028                  		move.b	obSubtype(a0),d0
0001061E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010622 D040                       		add.w	d0,d0		; multiply by 2
00010624 3140 0030                  		move.w	d0,$30(a0)
00010628 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0001062C 1028 0028                  		move.b	obSubtype(a0),d0
00010630 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010634 EB48                       		lsl.w	#5,d0		; multiply by $20
00010636 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0001063A 117C 000A 0036             		move.b	#$A,$36(a0)
00010640 0828 0001 0022             		btst	#1,obStatus(a0)
00010646 6700                       		beq.s	Flame_Action
00010648 117C 0002 001C             		move.b	#2,obAnim(a0)
0001064E 117C 0015 0036             		move.b	#$15,$36(a0)
00010654                            
00010654                            Flame_Action:	; Routine 2
00010654 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010658 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0001065A 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
00010660 0868 0000 001C             		bchg	#0,obAnim(a0)
00010666 6700                       		beq.s	loc_E57A
00010668 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010678                            
00010678                            loc_E57A:
00010678 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001067E 6100 C12A                  		bsr.w	AnimateSprite
00010682 117C 0000 0020             		move.b	#0,obColType(a0)
00010688 1028 0036                  		move.b	$36(a0),d0
0001068C B028 001A                  		cmp.b	obFrame(a0),d0
00010690 6600                       		bne.s	Flame_ChkDel
00010692 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010698                            
00010698                            Flame_ChkDel:
000106B6 6000 F046                  		bra.w	DisplaySprite
000106B6 6000 F046                  		bra.w	DisplaySprite
000106BA                            		include	"_anim\Flamethrower.asm"
000106BA                            ; ---------------------------------------------------------------------------
000106BA                            ; Animation script - flamethrower (SBZ)
000106BA                            ; ---------------------------------------------------------------------------
000106BA 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
000106BC 0000                       		dc.w @pipe2-Ani_Flame
000106BE 0000                       		dc.w @valve1-Ani_Flame
000106C0 0000                       		dc.w @valve2-Ani_Flame
000106C2 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
000106D0 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000106DA 00                         		even
000106DA 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
000106E8 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
000106F2 00                         		even
000106F2 00                         		even
000106F2                            Map_Flame:	include	"_maps\Flamethrower.asm"
000106F2                            ; ---------------------------------------------------------------------------
000106F2                            ; Sprite mappings - flame thrower (SBZ)
000106F2                            ; ---------------------------------------------------------------------------
000106F2                            Map_Flame_internal:
000106F2 0000                       		dc.w @pipe1-Map_Flame_internal
000106F4 0000                       		dc.w @pipe2-Map_Flame_internal
000106F6 0000                       		dc.w @pipe3-Map_Flame_internal
000106F8 0000                       		dc.w @pipe4-Map_Flame_internal
000106FA 0000                       		dc.w @pipe5-Map_Flame_internal
000106FC 0000                       		dc.w @pipe6-Map_Flame_internal
000106FE 0000                       		dc.w @pipe7-Map_Flame_internal
00010700 0000                       		dc.w @pipe8-Map_Flame_internal
00010702 0000                       		dc.w @pipe9-Map_Flame_internal
00010704 0000                       		dc.w @pipe10-Map_Flame_internal
00010706 0000                       		dc.w @pipe11-Map_Flame_internal
00010708 0000                       		dc.w @valve1-Map_Flame_internal
0001070A 0000                       		dc.w @valve2-Map_Flame_internal
0001070C 0000                       		dc.w @valve3-Map_Flame_internal
0001070E 0000                       		dc.w @valve4-Map_Flame_internal
00010710 0000                       		dc.w @valve5-Map_Flame_internal
00010712 0000                       		dc.w @valve6-Map_Flame_internal
00010714 0000                       		dc.w @valve7-Map_Flame_internal
00010716 0000                       		dc.w @valve8-Map_Flame_internal
00010718 0000                       		dc.w @valve9-Map_Flame_internal
0001071A 0000                       		dc.w @valve10-Map_Flame_internal
0001071C 0000                       		dc.w @valve11-Map_Flame_internal
0001071E 01                         @pipe1:		dc.b 1
0001071F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010724 02                         @pipe2:		dc.b 2
00010725 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001072A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001072F 02                         @pipe3:		dc.b 2
00010730 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010735 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001073A 03                         @pipe4:		dc.b 3
0001073B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010740 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010745 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001074A 03                         @pipe5:		dc.b 3
0001074B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010750 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010755 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001075A 04                         @pipe6:		dc.b 4
0001075B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010760 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010765 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001076A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001076F 04                         @pipe7:		dc.b 4
00010770 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010775 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001077A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001077F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010784 05                         @pipe8:		dc.b 5
00010785 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001078A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001078F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010794 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010799 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001079E 05                         @pipe9:		dc.b 5
0001079F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000107A4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000107A9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107AE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107B3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107B8 06                         @pipe10:	dc.b 6
000107B9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000107BE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000107C3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107C8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000107CD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107D2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107D7 06                         @pipe11:	dc.b 6
000107D8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000107DD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000107E2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000107E7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107EC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107F1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107F6 01                         @valve1:	dc.b 1
000107F7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
000107FC 02                         @valve2:	dc.b 2
000107FD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010802 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010807 02                         @valve3:	dc.b 2
00010808 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001080D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010812 03                         @valve4:	dc.b 3
00010813 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010818 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001081D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010822 03                         @valve5:	dc.b 3
00010823 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010828 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001082D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010832 04                         @valve6:	dc.b 4
00010833 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010838 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001083D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010842 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010847 04                         @valve7:	dc.b 4
00010848 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001084D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010852 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010857 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001085C 05                         @valve8:	dc.b 5
0001085D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010862 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010867 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001086C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010871 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010876 05                         @valve9:	dc.b 5
00010877 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001087C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010881 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010886 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001088B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010890 06                         @valve10:	dc.b 6
00010891 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010896 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001089B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108A0 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000108A5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108AA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108AF 06                         @valve11:	dc.b 6
000108B0 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000108B5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000108BA 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000108BF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108C4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108C9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108CE                            		even
000108CE                            		even
000108CE                            
000108CE                            		include	"_incObj\46 MZ Bricks.asm"
000108CE                            ; ---------------------------------------------------------------------------
000108CE                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000108CE                            ; ---------------------------------------------------------------------------
000108CE                            
000108CE                            MarbleBrick:
000108CE 7000                       		moveq	#0,d0
000108D0 1028 0024                  		move.b	obRoutine(a0),d0
000108D4 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
000108D8 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
000108DC                            ; ===========================================================================
000108DC 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
000108DE 0000                       		dc.w Brick_Action-Brick_Index
000108E0                            
000108E0 =00000030                  brick_origY:	equ $30
000108E0                            ; ===========================================================================
000108E0                            
000108E0                            Brick_Main:	; Routine 0
000108E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000108E4 117C 000F 0016             		move.b	#$F,obHeight(a0)
000108EA 117C 000F 0017             		move.b	#$F,obWidth(a0)
000108F0 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
000108F8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000108FE 117C 0004 0001             		move.b	#4,obRender(a0)
00010904 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001090A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010910 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010916 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0001091C                            
0001091C                            Brick_Action:	; Routine 2
0001091C 4A28 0001                  		tst.b	obRender(a0)
00010920 6A00                       		bpl.s	@chkdel
00010922 7000                       		moveq	#0,d0
00010924 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010928 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0001092C D040                       		add.w	d0,d0
0001092E 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010932 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010936 323C 001B                  		move.w	#$1B,d1
0001093A 343C 0010                  		move.w	#$10,d2
0001093E 363C 0011                  		move.w	#$11,d3
00010942 3828 0008                  		move.w	obX(a0),d4
00010946 6100 0000                  		bsr.w	SolidObject
0001094A                            
0001094A                            	@chkdel:
00010968 6000 ED94                  			bra.w	DisplaySprite
0001096C                            ; ===========================================================================
0001096C 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
0001096E 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010970 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010972 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010974 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010976                            ; ===========================================================================
00010976                            
00010976                            Brick_Type00:
00010976 4E75                       		rts	
00010978                            ; ===========================================================================
00010978                            
00010978                            Brick_Type02:
00010978 3038 D008                  		move.w	(v_player+obX).w,d0
0001097C 9068 0008                  		sub.w	obX(a0),d0
00010980 6400                       		bcc.s	loc_E888
00010982 4440                       		neg.w	d0
00010984                            
00010984                            loc_E888:
00010984 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010988 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
0001098A 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010990                            
00010990                            Brick_Type01:
00010990 7000                       		moveq	#0,d0
00010992 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010996 0828 0003 0028             		btst	#3,obSubtype(a0)
0001099C 6700                       		beq.s	loc_E8A8
0001099E 4440                       		neg.w	d0
000109A0 0640 0010                  		addi.w	#$10,d0
000109A4                            
000109A4                            loc_E8A8:
000109A4 3228 0030                  		move.w	brick_origY(a0),d1
000109A8 9240                       		sub.w	d0,d1
000109AA 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
000109AE 4E75                       		rts	
000109B0                            ; ===========================================================================
000109B0                            
000109B0                            Brick_Type03:
000109B0 6100 ED38                  		bsr.w	SpeedToPos
000109B4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
000109BA 6100 0000                  		bsr.w	ObjFloorDist
000109BE 4A41                       		tst.w	d1		; has the block	hit the	floor?
000109C0 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000109C4 D368 000C                  		add.w	d1,obY(a0)
000109C8 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
000109CC 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
000109D2 117C 0004 0028             		move.b	#4,obSubtype(a0)
000109D8 3011                       		move.w	(a1),d0
000109DA 0240 03FF                  		andi.w	#$3FF,d0
000109DE 0C40 016A                  			cmpi.w	#$16A,d0
000109E2 6400                       		bcc.s	locret_E8EE
000109E4 117C 0000 0028             		move.b	#0,obSubtype(a0)
000109EA                            
000109EA                            locret_E8EE:
000109EA 4E75                       		rts	
000109EC                            ; ===========================================================================
000109EC                            
000109EC                            Brick_Type04:
000109EC 7000                       		moveq	#0,d0
000109EE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
000109F2 E648                       		lsr.w	#3,d0
000109F4 3228 0030                  		move.w	brick_origY(a0),d1
000109F8 9240                       		sub.w	d0,d1
000109FA 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
000109FE 4E75                       		rts	
000109FE 4E75                       		rts	
00010A00                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010A00                            ; ---------------------------------------------------------------------------
00010A00                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010A00                            ; ---------------------------------------------------------------------------
00010A00                            Map_Brick_internal:
00010A00 0000                       		dc.w @brick-Map_Brick_internal
00010A02 01                         @brick:		dc.b 1
00010A03 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010A08                            		even
00010A08                            		even
00010A08                            
00010A08                            		include	"_incObj\12 Light.asm"
00010A08                            ; ---------------------------------------------------------------------------
00010A08                            ; Object 12 - lamp (SYZ)
00010A08                            ; ---------------------------------------------------------------------------
00010A08                            
00010A08                            SpinningLight:
00010A08 7000                       		moveq	#0,d0
00010A0A 1028 0024                  		move.b	obRoutine(a0),d0
00010A0E 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010A12 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010A16                            ; ===========================================================================
00010A16 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010A18 0000                       		dc.w Light_Animate-Light_Index
00010A1A                            ; ===========================================================================
00010A1A                            
00010A1A                            Light_Main:	; Routine 0
00010A1A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010A1E 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010A26 317C 0000 0002             		move.w	#0,obGfx(a0)
00010A2C 117C 0004 0001             		move.b	#4,obRender(a0)
00010A32 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010A38 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010A3E                            
00010A3E                            Light_Animate:	; Routine 2
00010A3E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010A42 6A00                       		bpl.s	@chkdel
00010A44 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010A4A 5228 001A                  		addq.b	#1,obFrame(a0)
00010A4E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010A54 6500                       		bcs.s	@chkdel
00010A56 117C 0000 001A             		move.b	#0,obFrame(a0)
00010A5C                            
00010A5C                            	@chkdel:
00010A7A 6000 EC82                  		bra.w	DisplaySprite
00010A7A 6000 EC82                  		bra.w	DisplaySprite
00010A7E                            Map_Light	include	"_maps\Light.asm"
00010A7E                            ; --------------------------------------------------------------------------------
00010A7E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010A7E                            ; --------------------------------------------------------------------------------
00010A7E                            
00010A7E                            SME_FBl1X:	
00010A7E 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010A82 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010A86 05                         SME_FBl1X_8:	dc.b 5	
00010A87 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010A8C E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010A91 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010A96 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010A9B F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010AA0 05                         SME_FBl1X_22:	dc.b 5	
00010AA1 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010AA6 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010AAB E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010AB0 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010AB5 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010ABA 06                         SME_FBl1X_3C:	dc.b 6	
00010ABB E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010AC0 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010AC5 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010ACA F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010ACF F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010AD4 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010AD9 05                         SME_FBl1X_5B:	dc.b 5	
00010ADA E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010ADF E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010AE4 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010AE9 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010AEE F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010AF4 00                         		even
00010AF4 00                         		even
00010AF4                            		include	"_incObj\47 Bumper.asm"
00010AF4                            ; ---------------------------------------------------------------------------
00010AF4                            ; Object 47 - pinball bumper (SYZ)
00010AF4                            ; ---------------------------------------------------------------------------
00010AF4                            
00010AF4                            Bumper:
00010AF4 7000                       		moveq	#0,d0
00010AF6 1028 0024                  		move.b	obRoutine(a0),d0
00010AFA 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010AFE 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010B02                            ; ===========================================================================
00010B02 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010B04 0000                       		dc.w Bump_Hit-Bump_Index
00010B06                            ; ===========================================================================
00010B06                            
00010B06                            Bump_Main:	; Routine 0
00010B06 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B0A 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010B12 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010B18 117C 0004 0001             		move.b	#4,obRender(a0)
00010B1E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B24 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010B2A 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010B30                            
00010B30                            Bump_Hit:	; Routine 2
00010B30 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010B34 6700 0000                  		beq.w	@display	; if not, branch
00010B38 4228 0021                  		clr.b	obColProp(a0)
00010B3C 43F8 D000                  		lea	(v_player).w,a1
00010B40 3228 0008                  		move.w	obX(a0),d1
00010B44 3428 000C                  		move.w	obY(a0),d2
00010B48 9269 0008                  		sub.w	obX(a1),d1
00010B4C 9469 000C                  		sub.w	obY(a1),d2
00010B50 4EB9 0000 3A40             		jsr	(CalcAngle).l
00010B56 4EB9 0000 37AE             		jsr	(CalcSine).l
00010B5C C3FC F900                  		muls.w	#-$700,d1
00010B60 E081                       		asr.l	#8,d1
00010B62 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010B66 C1FC F900                  		muls.w	#-$700,d0
00010B6A E080                       		asr.l	#8,d0
00010B6C 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010B70 08E9 0001 0022             		bset	#1,obStatus(a1)
00010B76 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010B7C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010B82 4229 003C                  		clr.b	$3C(a1)
00010B86 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010B96 45F8 FC00                  		lea	(v_objstate).w,a2
00010B9A 7000                       		moveq	#0,d0
00010B9C 1028 0023                  		move.b	obRespawnNo(a0),d0
00010BA0 6700                       		beq.s	@addscore
00010BA2 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010BA8 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010BAA 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010BAE                            
00010BAE                            	@addscore:
00010BAE 7001                       		moveq	#1,d0
00010BB0 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010BB6 6100 EFD2                  		bsr.w	FindFreeObj
00010BBA 6600                       		bne.s	@display
00010BBC 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010BC0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010BC6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010BCC 137C 0004 001A             		move.b	#4,obFrame(a1)
00010BD2                            
00010BD2                            	@display:
00010BD2 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010BD8 6100 BBD0                  		bsr.w	AnimateSprite
00010BF8 6000 EB04                  		bra.w	DisplaySprite
00010BFC                            ; ===========================================================================
00010BFC                            
00010BFC                            @resetcount:
00010BFC 45F8 FC00                  		lea	(v_objstate).w,a2
00010C00 7000                       		moveq	#0,d0
00010C02 1028 0023                  		move.b	obRespawnNo(a0),d0
00010C06 6700                       		beq.s	@delete
00010C08 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C0E                            
00010C0E                            	@delete:
00010C0E 6000 EB2E                  		bra.w	DeleteObject
00010C0E 6000 EB2E                  		bra.w	DeleteObject
00010C12                            		include	"_anim\Bumper.asm"
00010C12                            ; ---------------------------------------------------------------------------
00010C12                            ; Animation script - flamethrower (SBZ)
00010C12                            ; ---------------------------------------------------------------------------
00010C12 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010C14 0000                       		dc.w byte_EAF8-Ani_Bump
00010C16 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010C1A 00                         		even
00010C1A 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010C22 00                         		even
00010C22 00                         		even
00010C22                            Map_Bump:	include	"_maps\Bumper.asm"
00010C22                            ; ---------------------------------------------------------------------------
00010C22                            ; Sprite mappings - pinball bumper (SYZ)
00010C22                            ; ---------------------------------------------------------------------------
00010C22                            Map_Bump_internal:
00010C22 0000                       		dc.w @normal-Map_Bump_internal
00010C24 0000                       		dc.w @bumped1-Map_Bump_internal
00010C26 0000                       		dc.w @bumped2-Map_Bump_internal
00010C28 02                         @normal:	dc.b 2
00010C29 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010C2E F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010C33 02                         @bumped1:	dc.b 2
00010C34 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010C39 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010C3E 02                         @bumped2:	dc.b 2
00010C3F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010C44 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010C4A 00                         		even
00010C4A 00                         		even
00010C4A                            
00010C4A                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010C4A                            ; ---------------------------------------------------------------------------
00010C4A                            ; Object 0D - signpost at the end of a level
00010C4A                            ; ---------------------------------------------------------------------------
00010C4A                            
00010C4A                            Signpost:
00010C4A 7000                       		moveq	#0,d0
00010C4C 1028 0024                  		move.b	obRoutine(a0),d0
00010C50 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010C54 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010C58 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010C5E 6100 BB4A                  		bsr.w	AnimateSprite
00010C62 6100 EA9A                  		bsr.w	DisplaySprite
00010C84 4E75                       		rts	
00010C86                            ; ===========================================================================
00010C86 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010C88 0000                       		dc.w Sign_Touch-Sign_Index
00010C8A 0000                       		dc.w Sign_Spin-Sign_Index
00010C8C 0000                       		dc.w Sign_SonicRun-Sign_Index
00010C8E 0000                       		dc.w Sign_Exit-Sign_Index
00010C90                            
00010C90 =00000030                  spintime:	equ $30		; time for signpost to spin
00010C90 =00000032                  sparkletime:	equ $32		; time between sparkles
00010C90 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010C90                            ; ===========================================================================
00010C90                            
00010C90                            Sign_Main:	; Routine 0
00010C90 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C94 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010C9C 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010CA2 117C 0004 0001             		move.b	#4,obRender(a0)
00010CA8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010CAE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010CB4                            
00010CB4                            Sign_Touch:	; Routine 2
00010CB4 3038 D008                  		move.w	(v_player+obX).w,d0
00010CB8 9068 0008                  		sub.w	obX(a0),d0
00010CBC 6500                       		bcs.s	@notouch
00010CBE 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010CC2 6400                       		bcc.s	@notouch	; if not, branch
00010CC4 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010CD4 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010CD8 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010CDE 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CE2 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010CE8                            
00010CE8                            	@notouch:
00010CE8 4E75                       		rts	
00010CEA                            	
00010CEA                            ; ===========================================================================
00010CEA                            
00010CEA                            Sign_Spin:	; Routine 4
00010CEA 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010CEE 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010CF0 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010CF6 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010CFA 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010D00 6600                       		bne.s	@chksparkle	; if not, branch
00010D02 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D06                            
00010D06                            	@chksparkle:
00010D06 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010D0A 6A00                       		bpl.s	@fail		; if time remains, branch
00010D0C 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010D12 7000                       		moveq	#0,d0
00010D14 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010D18 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010D1C 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010D22 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010D26 6100 EE62                  		bsr.w	FindFreeObj
00010D2A 6600                       		bne.s	@fail
00010D2C 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010D30 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010D36 101A                       		move.b	(a2)+,d0
00010D38 4880                       		ext.w	d0
00010D3A D068 0008                  		add.w	obX(a0),d0
00010D3E 3340 0008                  		move.w	d0,obX(a1)
00010D42 101A                       		move.b	(a2)+,d0
00010D44 4880                       		ext.w	d0
00010D46 D068 000C                  		add.w	obY(a0),d0
00010D4A 3340 000C                  		move.w	d0,obY(a1)
00010D4E 237C 0000 BD5A 0004        		move.l	#Map_Ring,obMap(a1)
00010D56 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010D5C 137C 0004 0001             		move.b	#4,obRender(a1)
00010D62 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010D68 137C 0008 0014             		move.b	#8,obActWid(a1)
00010D6E                            
00010D6E                            	@fail:
00010D6E 4E75                       		rts	
00010D70                            ; ===========================================================================
00010D70 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010D72 0808                       		dc.b	8,   8
00010D74 F000                       		dc.b -$10,   0
00010D76 18F8                       		dc.b  $18,  -8
00010D78 00F8                       		dc.b	0,  -8
00010D7A 1000                       		dc.b  $10,   0
00010D7C E808                       		dc.b -$18,   8
00010D7E 1810                       		dc.b  $18, $10
00010D80                            ; ===========================================================================
00010D80                            
00010D80                            Sign_SonicRun:	; Routine 6
00010D80 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010D84 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010D88 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010D8E                            		
00010D8E                            
00010D8E                            	loc_EC86:
00010D8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D92                            
00010D92                            ; ---------------------------------------------------------------------------
00010D92                            ; Subroutine to	set up bonuses at the end of an	act
00010D92                            ; ---------------------------------------------------------------------------
00010D92                            
00010D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D92                            
00010D92                            
00010D92                            GotThroughAct:
00010D92 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010D96 6600                       		bne.s	locret_ECEE
00010D98 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010D9E 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010DA2 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010DA6 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010DAA 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010DB0 7000                       		moveq	#plcid_TitleCard,d0
00010DB2 4EB9 0000 1498             		jsr	(NewPLC).l	; load title card patterns
00010DB8 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010DBE 7000                       		moveq	#0,d0
00010DC0 1038 FE23                  		move.b	(v_timemin).w,d0
00010DC4 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010DC8 7200                       		moveq	#0,d1
00010DCA 1238 FE24                  		move.b	(v_timesec).w,d1
00010DCE D041                       		add.w	d1,d0		; add up your time
00010DD0 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010DD4 7214                       		moveq	#$14,d1
00010DD6 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010DD8 6500                       		bcs.s	hastimebonus	; if not, branch
00010DDA 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010DDC                            
00010DDC                            	hastimebonus:
00010DDC D040                       		add.w	d0,d0
00010DDE 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010DE4 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010DE8 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010DEC 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010DFA 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010E00                            
00010E00                            locret_ECEE:
00010E00 4E75                       		rts	
00010E02                            
00010E02                            ; End of function GotThroughAct
00010E02                            
00010E02                            ; ===========================================================================
00010E02 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010E16 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010E2C                            ; ===========================================================================
00010E2C                            
00010E2C                            Sign_Exit:	; Routine 8
00010E2C 4E75                       		rts	
00010E2E                            
00010E2E                            ; ---------------------------------------------------------------------------
00010E2E                            ; Subroutine to	set up bonuses at the end of an	zone
00010E2E                            ; ---------------------------------------------------------------------------
00010E2E                            
00010E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E2E                            
00010E2E                            
00010E2E                            GotThroughAct1:
00010E2E 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010E32 6600                       		bne.s	locret_ECEE1
00010E34 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010E3A 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010E3E 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010E42 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E46 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010E4C 7000                       		moveq	#plcid_TitleCard,d0
00010E4E 4EB9 0000 1498             		jsr	(NewPLC).l	; load title card patterns
00010E54 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010E5A 7000                       		moveq	#0,d0
00010E5C 1038 FE23                  		move.b	(v_timemin).w,d0
00010E60 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010E64 7200                       		moveq	#0,d1
00010E66 1238 FE24                  		move.b	(v_timesec).w,d1
00010E6A D041                       		add.w	d1,d0		; add up your time
00010E6C 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010E70 7214                       		moveq	#$14,d1
00010E72 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010E74 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010E78 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010E7A                            
00010E7A                            	hastimebonus2:
00010E7A D040                       		add.w	d0,d0
00010E7C 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010E82 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010E86 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010E8A 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010E98 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010E9E                            
00010E9E                            locret_ECEE1:
00010E9E 4E75                       		rts	
00010EA0                            
00010EA0                            ; End of function GotThroughAct		
00010EA0                            
00010EA0 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010EB4 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010EB4 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010ECA                            		include	"_anim\Signpost.asm"
00010ECA                            ; ---------------------------------------------------------------------------
00010ECA                            ; Animation script - signpost
00010ECA                            ; ---------------------------------------------------------------------------
00010ECA 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010ECC 0000                       		dc.w @spin1-Ani_Sign
00010ECE 0000                       		dc.w @spin2-Ani_Sign
00010ED0 0000                       		dc.w @sonic-Ani_Sign
00010ED2 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010ED6 00                         		even
00010ED6 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010EDC 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010EE2 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010EE6 00                         		even
00010EE6 00                         		even
00010EE6                            Map_Sign:	include	"_maps\Signpost.asm"
00010EE6                            ; --------------------------------------------------------------------------------
00010EE6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010EE6                            ; --------------------------------------------------------------------------------
00010EE6                            
00010EE6                            SME_KvSue:	
00010EE6 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010EEA 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010EEE 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010EF0 04                         SME_KvSue_A:	dc.b 4	
00010EF1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010EF6 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010EFB 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F00 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F05 03                         SME_KvSue_1F:	dc.b 3	
00010F06 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010F0B 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F10 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F15 03                         SME_KvSue_2F:	dc.b 3	
00010F16 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010F1B 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F20 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F25 03                         SME_KvSue_3F:	dc.b 3	
00010F26 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010F2B 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F30 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F35 04                         SME_KvSue_4F:	dc.b 4	
00010F36 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010F3B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010F40 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F45 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F4A                            		even
00010F4A                            		even
00010F4A                            
00010F4A                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010F4A                            ; ---------------------------------------------------------------------------
00010F4A                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010F4A                            ; ---------------------------------------------------------------------------
00010F4A                            
00010F4A                            GeyserMaker:
00010F4A 7000                       		moveq	#0,d0
00010F4C 1028 0024                  		move.b	obRoutine(a0),d0
00010F50 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010F54 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010F58 6000 0000                  		bra.w	Geyser_ChkDel
00010F5C                            ; ===========================================================================
00010F5C 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010F5E 0000                       		dc.w GMake_Wait-GMake_Index
00010F60 0000                       		dc.w GMake_ChkType-GMake_Index
00010F62 0000                       		dc.w GMake_MakeLava-GMake_Index
00010F64 0000                       		dc.w GMake_Display-GMake_Index
00010F66 0000                       		dc.w GMake_Delete-GMake_Index
00010F68                            
00010F68 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010F68 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010F68 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010F68                            ; ===========================================================================
00010F68                            
00010F68                            GMake_Main:	; Routine 0
00010F68 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F6C 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010F74 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010F7A 117C 0004 0001             		move.b	#4,obRender(a0)
00010F80 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010F86 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010F8C 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010F92                            
00010F92                            GMake_Wait:	; Routine 2
00010F92 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010F96 6A00                       		bpl.s	@cancel		; if time remains, branch
00010F98                            
00010F98 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010F9E 3038 D00C                  		move.w	(v_player+obY).w,d0
00010FA2 3228 000C                  		move.w	obY(a0),d1
00010FA6 B041                       		cmp.w	d1,d0
00010FA8 6400                       		bcc.s	@cancel
00010FAA 0441 0170                  		subi.w	#$170,d1
00010FAE B041                       		cmp.w	d1,d0
00010FB0 6500                       		bcs.s	@cancel
00010FB2 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010FB6                            
00010FB6                            	@cancel:
00010FB6 4E75                       		rts	
00010FB8                            ; ===========================================================================
00010FB8                            
00010FB8                            GMake_MakeLava:	; Routine 6
00010FB8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FBC 6100 EBE2                  		bsr.w	FindNextFreeObj
00010FC0 6600                       		bne.s	@fail
00010FC2 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010FC6 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010FCC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010FD2 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010FD8 2348 003C                  		move.l	a0,gmake_parent(a1)
00010FDC                            
00010FDC                            	@fail:
00010FDC 117C 0001 001C             		move.b	#1,obAnim(a0)
00010FE2 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010FE6 6700                       		beq.s	@isgeyser	; if yes, branch
00010FE8 117C 0004 001C             		move.b	#4,obAnim(a0)
00010FEE 6000                       		bra.s	GMake_Display
00010FF0                            ; ===========================================================================
00010FF0                            
00010FF0                            	@isgeyser:
00010FF0 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010FF4 08E9 0001 0022             		bset	#1,obStatus(a1)
00010FFA 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00011000 6000                       		bra.s	GMake_Display
00011002                            ; ===========================================================================
00011002                            
00011002                            GMake_ChkType:	; Routine 4
00011002 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011006 6700                       		beq.s	GMake_Display	; if yes, branch
00011008 5428 0024                  		addq.b	#2,obRoutine(a0)
0001100C 4E75                       		rts	
0001100E                            ; ===========================================================================
0001100E                            
0001100E                            GMake_Display:	; Routine 8
0001100E 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011014 6100 B794                  		bsr.w	AnimateSprite
00011018 6100 E6E4                  		bsr.w	DisplaySprite
0001101C 4E75                       		rts	
0001101E                            ; ===========================================================================
0001101E                            
0001101E                            GMake_Delete:	; Routine $A
0001101E 117C 0000 001C             		move.b	#0,obAnim(a0)
00011024 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001102A 4A28 0028                  		tst.b	obSubtype(a0)
0001102E 6700 E70E                  		beq.w	DeleteObject
00011032 4E75                       		rts	
00011034                            
00011034                            
00011034                            ; ---------------------------------------------------------------------------
00011034                            ; Object 4D - lava geyser / lavafall (MZ)
00011034                            ; ---------------------------------------------------------------------------
00011034                            
00011034                            LavaGeyser:
00011034 7000                       		moveq	#0,d0
00011036 1028 0024                  		move.b	obRoutine(a0),d0
0001103A 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
0001103E 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
00011042 6000 E6BA                  		bra.w	DisplaySprite
00011046                            ; ===========================================================================
00011046 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011048 0000                       		dc.w Geyser_Action-Geyser_Index
0001104A 0000                       		dc.w loc_EFFC-Geyser_Index
0001104C 0000                       		dc.w Geyser_Delete-Geyser_Index
0001104E                            
0001104E FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
00011052                            ; ===========================================================================
00011052                            
00011052                            Geyser_Main:	; Routine 0
00011052 5428 0024                  		addq.b	#2,obRoutine(a0)
00011056 3168 000C 0030             		move.w	obY(a0),$30(a0)
0001105C 4A28 0028                  		tst.b	obSubtype(a0)
00011060 6700                       		beq.s	@isgeyser
00011062 0468 0250 000C             		subi.w	#$250,obY(a0)
00011068                            
00011068                            	@isgeyser:
00011068 7000                       		moveq	#0,d0
0001106A 1028 0028                  		move.b	obSubtype(a0),d0
0001106E D040                       		add.w	d0,d0
00011070 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011076 2248                       		movea.l	a0,a1
00011078 7201                       		moveq	#1,d1
0001107A 6100                       		bsr.s	@makelava
0001107C 6000                       		bra.s	@activate
0001107E                            ; ===========================================================================
0001107E                            
0001107E                            	@loop:
0001107E 6100 EB20                  		bsr.w	FindNextFreeObj
00011082 6600                       		bne.s	@fail
00011084                            
00011084                            @makelava:
00011084 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011088 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00011090 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011096 137C 0004 0001             		move.b	#4,obRender(a1)
0001109C 137C 0020 0014             		move.b	#$20,obActWid(a1)
000110A2 3368 0008 0008             		move.w	obX(a0),obX(a1)
000110A8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000110AE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000110B4 337C 0080 0018             		move.w	#$80,obPriority(a1)
000110BA 137C 0005 001C             		move.b	#5,obAnim(a1)
000110C0 4A28 0028                  		tst.b	obSubtype(a0)
000110C4 6700                       		beq.s	@fail
000110C6 137C 0002 001C             		move.b	#2,obAnim(a1)
000110CC                            
000110CC                            	@fail:
000110CC 51C9 FFB0                  		dbf	d1,@loop
000110D0 4E75                       		rts	
000110D2                            ; ===========================================================================
000110D2                            
000110D2                            @activate:
000110D2 0669 0060 000C             		addi.w	#$60,obY(a1)
000110D8 3368 0030 0030             		move.w	$30(a0),$30(a1)
000110DE 0669 0060 0030             		addi.w	#$60,$30(a1)
000110E4 137C 0093 0020             		move.b	#$93,obColType(a1)
000110EA 137C 0080 0016             		move.b	#$80,obHeight(a1)
000110F0 08E9 0004 0001             		bset	#4,obRender(a1)
000110F6 5829 0024                  		addq.b	#4,obRoutine(a1)
000110FA 2348 003C                  		move.l	a0,$3C(a1)
000110FE 4A28 0028                  		tst.b	obSubtype(a0)
00011102 6700                       		beq.s	@sound
00011104 7200                       		moveq	#0,d1
00011106 6100 FF76                  		bsr.w	@loop
0001110A 5429 0024                  		addq.b	#2,obRoutine(a1)
0001110E 08E9 0004 0002             		bset	#4,obGfx(a1)
00011114 0669 0100 000C             		addi.w	#$100,obY(a1)
0001111A 337C 0000 0018             		move.w	#0,obPriority(a1)
00011120 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011126 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0001112C 117C 0000 0028             		move.b	#0,obSubtype(a0)
00011132                            
00011132                            	@sound:
0001113C                            
0001113C                            Geyser_Action:	; Routine 2
0001113C 7000                       		moveq	#0,d0
0001113E 1028 0028                  		move.b	obSubtype(a0),d0
00011142 D040                       		add.w	d0,d0
00011144 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011148 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
0001114C 6100 E59C                  		bsr.w	SpeedToPos
00011150 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011156 6100 B652                  		bsr.w	AnimateSprite
0001115A                            
0001115A                            Geyser_ChkDel:
00011178 4E75                       		rts	
0001117A                            ; ===========================================================================
0001117A 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
0001117C 0000                       		dc.w Geyser_Type01-Geyser_Types
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            Geyser_Type00:
0001117E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011184 3028 0030                  		move.w	$30(a0),d0
00011188 B068 000C                  		cmp.w	obY(a0),d0
0001118C 6400                       		bcc.s	locret_EFDA
0001118E 5828 0024                  		addq.b	#4,obRoutine(a0)
00011192 2268 003C                  		movea.l	$3C(a0),a1
00011196 137C 0003 001C             		move.b	#3,obAnim(a1)
0001119C                            
0001119C                            locret_EFDA:
0001119C 4E75                       		rts	
0001119E                            ; ===========================================================================
0001119E                            
0001119E                            Geyser_Type01:
0001119E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000111A4 3028 0030                  		move.w	$30(a0),d0
000111A8 B068 000C                  		cmp.w	obY(a0),d0
000111AC 6400                       		bcc.s	locret_EFFA
000111AE 5828 0024                  		addq.b	#4,obRoutine(a0)
000111B2 2268 003C                  		movea.l	$3C(a0),a1
000111B6 137C 0001 001C             		move.b	#1,obAnim(a1)
000111BC                            
000111BC                            locret_EFFA:
000111BC 4E75                       		rts	
000111BE                            ; ===========================================================================
000111BE                            
000111BE                            loc_EFFC:	; Routine 4
000111BE 2268 003C                  		movea.l	$3C(a0),a1
000111C2 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000111C8 6700 0000                  		beq.w	Geyser_Delete
000111CC 3029 000C                  		move.w	obY(a1),d0
000111D0 0640 0060                  		addi.w	#$60,d0
000111D4 3140 000C                  		move.w	d0,obY(a0)
000111D8 9068 0030                  		sub.w	$30(a0),d0
000111DC 4440                       		neg.w	d0
000111DE 7208                       		moveq	#8,d1
000111E0 0C40 0040                  		cmpi.w	#$40,d0
000111E4 6C00                       		bge.s	loc_F026
000111E6 720B                       		moveq	#$B,d1
000111E8                            
000111E8                            loc_F026:
000111E8 0C40 0080                  		cmpi.w	#$80,d0
000111EC 6F00                       		ble.s	loc_F02E
000111EE 720E                       		moveq	#$E,d1
000111F0                            
000111F0                            loc_F02E:
000111F0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000111F4 6A00                       		bpl.s	loc_F04C
000111F6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000111FC 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011200 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011206 6500                       		bcs.s	loc_F04C
00011208 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001120E                            
0001120E                            loc_F04C:
0001120E 1028 001B                  		move.b	obAniFrame(a0),d0
00011212 D001                       		add.b	d1,d0
00011214 1140 001A                  		move.b	d0,obFrame(a0)
00011218 6000 FF40                  		bra.w	Geyser_ChkDel
0001121C                            ; ===========================================================================
0001121C                            
0001121C                            Geyser_Delete:	; Routine 6
0001121C 6000 E520                  		bra.w	DeleteObject
0001121C 6000 E520                  		bra.w	DeleteObject
00011220                            		include	"_incObj\54 Lava Tag.asm"
00011220                            ; ---------------------------------------------------------------------------
00011220                            ; Object 54 - invisible	lava tag (MZ)
00011220                            ; ---------------------------------------------------------------------------
00011220                            
00011220                            LavaTag:
00011220 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011226 6E00 0000                  		bgt	WaterTag	;TIS
0001122A 7000                       		moveq	#0,d0
0001122C 1028 0024                  		move.b	obRoutine(a0),d0
00011230 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011234 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011238                            ; ===========================================================================
00011238 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
0001123A 0000                       		dc.w LTag_ChkDel-LTag_Index
0001123C                            
0001123C 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
00011240 00                         		even
00011240                            ; ===========================================================================
00011240                            
00011240                            LTag_Main:	; Routine 0
00011240 5428 0024                  		addq.b	#2,obRoutine(a0)
00011244 7000                       		moveq	#0,d0
00011246 1028 0028                  		move.b	obSubtype(a0),d0
0001124A 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
00011250 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
00011258 117C 0084 0001             		move.b	#$84,obRender(a0)
0001125E                            
0001125E                            LTag_ChkDel:	; Routine 2
0001125E 3028 0008                  		move.w	obX(a0),d0
00011262 0240 FF80                  		andi.w	#$FF80,d0
00011266 3238 F700                  		move.w	(v_screenposx).w,d1
0001126A 0441 0080                  		subi.w	#$80,d1
0001126E 0241 FF80                  		andi.w	#$FF80,d1
00011272 9041                       		sub.w	d1,d0
00011274 6B00 E4C8                  		bmi.w	DeleteObject
00011278 0C40 0280                  		cmpi.w	#$280,d0
0001127C 6200 E4C0                  		bhi.w	DeleteObject
00011280 4E75                       		rts
00011282                            
00011282                            
00011282                            ; ---------------------------------------------------------------------------
00011282                            ; Object 54a - invisible	water tag (MZ) - TIS
00011282                            ; ---------------------------------------------------------------------------
00011282                            
00011282                            WaterTag:	
00011282 7000                       		moveq	#0,d0
00011284 1028 0024                  		move.b	obRoutine(a0),d0
00011288 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
0001128C 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
00011290                            ; ===========================================================================
00011290 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
00011292 0000                       		dc.w WTag_ChkDel-WTag_Index
00011294                            
00011294 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011298 00                         		even
00011298                            ; ===========================================================================
00011298                            
00011298                            
00011298                            WTag_Main:	; Routine 0
00011298 5428 0024                  		addq.b	#2,obRoutine(a0)
0001129C 7000                       		moveq	#0,d0
0001129E                            		;move.b	obSubtype(a0),d0
0001129E                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001129E 0400 00F0                  		sub.b	#$F0,d0
000112A2 1178 0096 0020             		move.b	$96,obColType(a0)							
000112A8                            		;move.l	#Map_LTag,obMap(a0)
000112A8                            		;move.b	#$84,obRender(a0)
000112A8                            
000112A8                            WTag_ChkDel:	; Routine 2
000112A8 3028 0008                  		move.w	obX(a0),d0
000112AC 0240 FF80                  		andi.w	#$FF80,d0
000112B0 3238 F700                  		move.w	(v_screenposx).w,d1
000112B4 0441 0080                  		subi.w	#$80,d1
000112B8 0241 FF80                  		andi.w	#$FF80,d1
000112BC 9041                       		sub.w	d1,d0
000112BE 6B00 E47E                  		bmi.w	DeleteObject
000112C2 0C40 0280                  		cmpi.w	#$280,d0
000112C6 6200 E476                  		bhi.w	DeleteObject
000112CA 4E75                       		rts
000112CC                            
000112CC                            
000112CC                            Map_LTag:	include	"_maps\Lava Tag.asm"
000112CC                            ; ---------------------------------------------------------------------------
000112CC                            ; Sprite mappings - invisible lava tag (MZ)
000112CC                            ; ---------------------------------------------------------------------------
000112CC                            Map_LTag_internal:
000112CC 0000                       		dc.w @0-Map_LTag_internal
000112CE 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
000112D0 00                         		even
000112D0 00                         		even
000112D0                            		include	"_anim\Lava Geyser.asm"
000112D0                            ; ---------------------------------------------------------------------------
000112D0                            ; Animation script - geyser of lava (MZ)
000112D0                            ; ---------------------------------------------------------------------------
000112D0 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
000112D2 0000                       		dc.w @bubble2-Ani_Geyser
000112D4 0000                       		dc.w @end-Ani_Geyser
000112D6 0000                       		dc.w @bubble3-Ani_Geyser
000112D8 0000                       		dc.w @blank-Ani_Geyser
000112DA 0000                       		dc.w @bubble4-Ani_Geyser
000112DC 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
000112E6 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
000112EA 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
000112EE 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
000112F6 0F13 FF                    @blank:		dc.b $F, $13, afEnd
000112FA 00                         		even
000112FA 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
000112FE                            		even
000112FE                            		even
000112FE                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
000112FE                            ; ---------------------------------------------------------------------------
000112FE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000112FE                            ; ---------------------------------------------------------------------------
000112FE                            Map_Geyser_internal:
000112FE 0000                       		dc.w @bubble1-Map_Geyser_internal
00011300 0000                       		dc.w @bubble2-Map_Geyser_internal
00011302 0000                       		dc.w @bubble3-Map_Geyser_internal
00011304 0000                       		dc.w @bubble4-Map_Geyser_internal
00011306 0000                       		dc.w @bubble5-Map_Geyser_internal
00011308 0000                       		dc.w @bubble6-Map_Geyser_internal
0001130A 0000                       		dc.w @end1-Map_Geyser_internal
0001130C 0000                       		dc.w @end2-Map_Geyser_internal
0001130E 0000                       		dc.w @medcolumn1-Map_Geyser_internal
00011310 0000                       		dc.w @medcolumn2-Map_Geyser_internal
00011312 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011314 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011316 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011318 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
0001131A 0000                       		dc.w @longcolumn1-Map_Geyser_internal
0001131C 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001131E 0000                       		dc.w @longcolumn3-Map_Geyser_internal
00011320 0000                       		dc.w @bubble7-Map_Geyser_internal
00011322 0000                       		dc.w @bubble8-Map_Geyser_internal
00011324 0000                       		dc.w @blank-Map_Geyser_internal
00011326 02                         @bubble1:	dc.b 2
00011327 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0001132C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00011331 02                         @bubble2:	dc.b 2
00011332 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011337 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0001133C 04                         @bubble3:	dc.b 4
0001133D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011342 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011347 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001134C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011351 04                         @bubble4:	dc.b 4
00011352 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011357 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001135C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011361 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011366 06                         @bubble5:	dc.b 6
00011367 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001136C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011371 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011376 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001137B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00011380 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011385 06                         @bubble6:	dc.b 6
00011386 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0001138B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011390 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011395 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0001139A E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001139F E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000113A4 02                         @end1:		dc.b 2
000113A5 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000113AA E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000113AF 02                         @end2:		dc.b 2
000113B0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000113B5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000113BA 0A                         @medcolumn1:	dc.b $A
000113BB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000113C0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000113C5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000113CA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000113CF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000113D4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000113D9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000113DE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000113E3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000113E8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000113ED 0A                         @medcolumn2:	dc.b $A
000113EE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000113F3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000113F8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000113FD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011402 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011407 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001140C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011411 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011416 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001141B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011420 0A                         @medcolumn3:	dc.b $A
00011421 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011426 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001142B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011430 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011435 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001143A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001143F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011444 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011449 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001144E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011453 06                         @shortcolumn1:	dc.b 6
00011454 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011459 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001145E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011463 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011468 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001146D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011472 06                         @shortcolumn2:	dc.b 6
00011473 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011478 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001147D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011482 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011487 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001148C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011491 06                         @shortcolumn3:	dc.b 6
00011492 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011497 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001149C B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000114A1 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000114A6 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000114AB D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000114B0 10                         @longcolumn1:	dc.b $10
000114B1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000114B6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000114BB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000114C0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000114C5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000114CA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000114CF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000114D4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000114D9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000114DE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000114E3 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000114E8 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000114ED 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000114F2 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000114F7 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000114FC 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011501 10                         @longcolumn2:	dc.b $10
00011502 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011507 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001150C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011511 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011516 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001151B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011520 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011525 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001152A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001152F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011534 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011539 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001153E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00011543 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011548 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0001154D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00011552 10                         @longcolumn3:	dc.b $10
00011553 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011558 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001155D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011562 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011567 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001156C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011571 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011576 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001157B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011580 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011585 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0001158A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001158F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011594 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011599 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001159E 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000115A3 06                         @bubble7:	dc.b 6
000115A4 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000115A9 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000115AE E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000115B3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000115B8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000115BD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000115C2 06                         @bubble8:	dc.b 6
000115C3 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000115C8 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000115CD E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000115D2 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000115D7 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000115DC D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000115E1 00                         @blank:	dc.b 0
000115E2                            		even
000115E2                            		even
000115E2                            
000115E2                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
000115E2                            ; ---------------------------------------------------------------------------
000115E2                            ; Object 40 - Moto Bug enemy (GHZ)
000115E2                            ; ---------------------------------------------------------------------------
000115E2                            
000115E2                            MotoBug:
000115E2 7000                       		moveq	#0,d0
000115E4 1028 0024                  		move.b	obRoutine(a0),d0
000115E8 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
000115EC 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
000115F0                            ; ===========================================================================
000115F0 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
000115F2 0000                       		dc.w Moto_Action-Moto_Index
000115F4 0000                       		dc.w Moto_Animate-Moto_Index
000115F6 0000                       		dc.w Moto_Delete-Moto_Index
000115F8                            ; ===========================================================================
000115F8                            
000115F8                            Moto_Main:	; Routine 0
000115F8 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011600 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011606 117C 0004 0001             		move.b	#4,obRender(a0)
0001160C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011612 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011618 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
0001161C 6600                       		bne.s	@smoke		; if yes, branch
0001161E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011624 117C 0008 0017             		move.b	#8,obWidth(a0)
0001162A 117C 000C 0020             		move.b	#$C,obColType(a0)
00011630 6100 E080                  		bsr.w	ObjectFall
00011634 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001163A 4A41                       		tst.w	d1
0001163C 6A00                       		bpl.s	@notonfloor
0001163E D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011642 317C 0000 0012             		move.w	#0,obVelY(a0)
00011648 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
0001164C 0868 0000 0022             		bchg	#0,obStatus(a0)
00011652                            
00011652                            	@notonfloor:
00011652 4E75                       		rts	
00011654                            ; ===========================================================================
00011654                            
00011654                            @smoke:
00011654 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
00011658 6000 0000                  		bra.w	Moto_Animate
0001165C                            ; ===========================================================================
0001165C                            
0001165C                            Moto_Action:	; Routine 2
0001165C 7000                       		moveq	#0,d0
0001165E 1028 0025                  		move.b	ob2ndRout(a0),d0
00011662 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011666 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
0001166A 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011670 6100 B138                  		bsr.w	AnimateSprite
00011674                            
00011674                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011674                            ; ---------------------------------------------------------------------------
00011674                            ; Subroutine to remember whether an object is destroyed/collected
00011674                            ; ---------------------------------------------------------------------------
00011674                            
00011674                            RememberState:
00011692 6000 E06A                  		bra.w	DisplaySprite
00011696                            
00011696                            	@offscreen:
00011696 45F8 FC00                  		lea	(v_objstate).w,a2
0001169A 7000                       		moveq	#0,d0
0001169C 1028 0023                  		move.b	obRespawnNo(a0),d0
000116A0 6700                       		beq.s	@delete
000116A2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000116A8                            
000116A8                            	@delete:
000116A8 6000 E094                  		bra.w	DeleteObject
000116A8 6000 E094                  		bra.w	DeleteObject
000116AC                            
000116AC                            ; ===========================================================================
000116AC 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
000116AE 0000                       		dc.w @findfloor-Moto_ActIndex
000116B0                            
000116B0 =00000030                  @time:		equ $30
000116B0 =00000033                  @smokedelay:	equ $33
000116B0                            ; ===========================================================================
000116B0                            
000116B0                            @move:
000116B0 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
000116B4 6A00                       		bpl.s	@wait		; if time remains, branch
000116B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000116BA 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
000116C0 117C 0001 001C             		move.b	#1,obAnim(a0)
000116C6 0868 0000 0022             		bchg	#0,obStatus(a0)
000116CC 6600                       		bne.s	@wait
000116CE 4468 0010                  		neg.w	obVelX(a0)	; change direction
000116D2                            
000116D2                            	@wait:
000116D2 4E75                       		rts	
000116D4                            ; ===========================================================================
000116D4                            
000116D4                            @findfloor:
000116D4 6100 E014                  		bsr.w	SpeedToPos
000116D8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000116DE 0C41 FFF8                  		cmpi.w	#-8,d1
000116E2 6D00                       		blt.s	@pause
000116E4 0C41 000C                  		cmpi.w	#$C,d1
000116E8 6C00                       		bge.s	@pause
000116EA D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000116EE 5328 0033                  		subq.b	#1,@smokedelay(a0)
000116F2 6A00                       		bpl.s	@nosmoke
000116F4 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
000116FA 6100 E48E                  		bsr.w	FindFreeObj
000116FE 6600                       		bne.s	@nosmoke
00011700 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011704 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001170A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011710 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011716 137C 0002 001C             		move.b	#2,obAnim(a1)
0001171C                            
0001171C                            	@nosmoke:
0001171C 4E75                       		rts	
0001171E                            
0001171E                            @pause:
0001171E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011722 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011728 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0001172E 117C 0000 001C             		move.b	#0,obAnim(a0)
00011734 4E75                       		rts	
00011736                            ; ===========================================================================
00011736                            
00011736                            Moto_Animate:	; Routine 4
00011736 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001173C 6100 B06C                  		bsr.w	AnimateSprite
00011740 6000 DFBC                  		bra.w	DisplaySprite
00011744                            ; ===========================================================================
00011744                            
00011744                            Moto_Delete:	; Routine 6
00011744 6000 DFF8                  		bra.w	DeleteObject
00011744 6000 DFF8                  		bra.w	DeleteObject
00011748                            		include	"_anim\Moto Bug.asm"
00011748                            ; ---------------------------------------------------------------------------
00011748                            ; Animation script - Motobug enemy
00011748                            ; ---------------------------------------------------------------------------
00011748 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
0001174A 0000                       		dc.w @walk-Ani_Moto
0001174C 0000                       		dc.w @smoke-Ani_Moto
0001174E                            
0001174E 0F02 FF                    @stand:		dc.b $F, 2, afEnd
00011752 00                         		even
00011752 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011758 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011766 00                         		even
00011766 00                         		even
00011766                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011766                            ; --------------------------------------------------------------------------------
00011766                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011766                            ; --------------------------------------------------------------------------------
00011766                            
00011766                            SME_TTY9T:	
00011766 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
0001176A 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
0001176E 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
00011772 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011774 04                         SME_TTY9T_E:	dc.b 4	
00011775 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
0001177A 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
0001177F F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011784 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011789 04                         SME_TTY9T_23:	dc.b 4	
0001178A F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
0001178F 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011794 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011799 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
0001179E 05                         SME_TTY9T_38:	dc.b 5	
0001179F F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000117A4 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
000117A9 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000117AE 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
000117B3 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
000117B8 01                         SME_TTY9T_52:	dc.b 1	
000117B9 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
000117BE 01                         SME_TTY9T_58:	dc.b 1	
000117BF FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
000117C4 01                         SME_TTY9T_5E:	dc.b 1	
000117C5 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
000117CA 00                         SME_TTY9T_64:	dc.b 0	
000117CC 00                         		even
000117CC 00                         		even
000117CC                            		include	"_incObj\4F.asm"
000117CC                            ; ---------------------------------------------------------------------------
000117CC                            ; Object 4F - Splats
000117CC                            ; ---------------------------------------------------------------------------
000117CC                            
000117CC                            Obj4F:
000117CC 7000                                       moveq   #0,d0
000117CE 1028 0024                                  move.b  $24(a0),d0
000117D2 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
000117D6 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
000117DA                            ; ---------------------------------------------------------------------------
000117DA 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
000117DC 0000                                       dc.w loc_D246-ObjSplats_Index
000117DE 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
000117E0 0000                                       dc.w loc_D2C8-ObjSplats_Index
000117E2                            ; ---------------------------------------------------------------------------
000117E2                            
000117E2                            ObjSplats_Init:
000117E2 5428 0024                                  addq.b  #2,$24(a0)
000117E6 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
000117EE 317C 24E4 0002                             move.w  #$24E4,2(a0)
000117F4 117C 0004 0001                             move.b  #4,1(a0)
000117FA 117C 0004 0014                             move.b  #4,obActWid(a0)
00011800 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011806 117C 0014 0016                             move.b  #$14,$16(a0)
0001180C 117C 0002 0020                             move.b  #2,$20(a0)
00011812 4A28 0028                                  tst.b   $28(a0)
00011816 6700                                       beq.s   loc_D246
00011818 343C 0300                                  move.w  #$300,d2
0001181C 6000                                       bra.s   ObjSplats_FaceRight
0001181E                            ; ---------------------------------------------------------------------------
0001181E                            
0001181E                            loc_D246:
0001181E 343C 00E0                                  move.w  #$E0,d2
00011822                            
00011822                            ObjSplats_FaceRight:
00011822 323C 0100                                  move.w  #$100,d1
00011826 08E8 0000 0001                             bset    #0,1(a0)
0001182C 3038 D008                                  move.w  ($FFFFD008).w,d0
00011830 9068 0008                                  sub.w   8(a0),d0
00011834 6400                                       bcc.s   ObjSplats_Move
00011836 4440                                       neg.w   d0
00011838 4441                                       neg.w   d1
0001183A 08A8 0000 0001                             bclr    #0,1(a0)
00011840                            
00011840                            ObjSplats_Move:
00011840 B042                                       cmp.w   d2,d0
00011842 6400                                       bcc.s   ObjSplats_Bounce
00011844 3141 0010                                  move.w  d1,$10(a0)
00011848 5428 0024                                  addq.b  #2,$24(a0)
0001184C                            
0001184C                            ObjSplats_Bounce:
0001184C 6100 DE64                                  bsr.w   ObjectFall
00011850 117C 0001 001A                             move.b  #1,$1A(a0)
00011856 4A68 0012                                  tst.w   $12(a0)
0001185A 6B00                                       bmi.s   ObjSplats_Turn
0001185C 117C 0000 001A                             move.b  #0,$1A(a0)
00011862 6100 0000                                  bsr.w   ObjFloorDist
00011866 4A41                                       tst.w   d1
00011868 6A00                                       bpl.s   ObjSplats_Turn
0001186A 3011                                       move.w  (a1),d0
0001186C 0240 03FF                                  andi.w  #$3FF,d0
00011870 0C40 02D2                                  cmpi.w  #$2D2,d0
00011874 6500                                       bcs.s   ObjSplats_Fall
00011876 5428 0024                                  addq.b  #2,$24(a0)
0001187A 6000                                       bra.s   ObjSplats_Turn
0001187C                            ; ---------------------------------------------------------------------------
0001187C                            
0001187C                            ObjSplats_Fall:
0001187C D368 000C                                  add.w   d1,$C(a0)
00011880 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011886                            
00011886                            ObjSplats_Turn:
00011886 6100 0000                                  bsr.w   Yad_ChkWall
0001188A 6700                                       beq.s   loc_D2C4
0001188C 4468 0010                                  neg.w   $10(a0)
00011890 0868 0000 0001                             bchg    #0,1(a0)
00011896 0868 0000 0022                             bchg    #0,$22(a0)
0001189C                            
0001189C                            loc_D2C4:
0001189C 6000 FDD6                                  bra.w   RememberState
000118A0                            ; ---------------------------------------------------------------------------
000118A0                            
000118A0                            loc_D2C8:
000118A0 6100 DE10                                  bsr.w   ObjectFall
000118A4 6100 DE58                                  bsr.w   DisplaySprite
000118A8 4A28 0001                                  tst.b   1(a0)
000118AC 6A00 DE90                                  bpl.w   DeleteObject
000118B0 4E75                                       rts
000118B0 4E75                                       rts
000118B2                            Map_Splats:	include	"_maps\Splats.asm"
000118B2 0000                       Map_Splats_internal:     dc.w unk_D310-*
000118B4 0000                                       dc.w unk_D31B-Map_Splats_internal
000118B6 02                         unk_D310:       dc.b   2
000118B7 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
000118C1 02                         unk_D31B:       dc.b   2
000118C2 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
000118C2 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
000118CC                            
000118CC                            		include	"_incObj\50 Yadrin.asm"
000118CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000118CC                            
000118CC                            
000118CC                            Yad_ChkWall:
000118CC 3038 FE04                  		move.w	(v_framecount).w,d0
000118D0 D047                       		add.w	d7,d0
000118D2 0240 0003                  		andi.w	#3,d0
000118D6 6600                       		bne.s	loc_F836
000118D8 7600                       		moveq	#0,d3
000118DA 1628 0014                  		move.b	obActWid(a0),d3
000118DE 4A68 0010                  		tst.w	obVelX(a0)
000118E2 6B00                       		bmi.s	loc_F82C
000118E4 6100 0000                  		bsr.w	ObjHitWallRight
000118E8 4A41                       		tst.w	d1
000118EA 6A00                       		bpl.s	loc_F836
000118EC                            
000118EC                            loc_F828:
000118EC 7001                       		moveq	#1,d0
000118EE 4E75                       		rts	
000118F0                            ; ===========================================================================
000118F0                            
000118F0                            loc_F82C:
000118F0 4643                       		not.w	d3
000118F2 6100 0000                  		bsr.w	ObjHitWallLeft
000118F6 4A41                       		tst.w	d1
000118F8 6BF2                       		bmi.s	loc_F828
000118FA                            
000118FA                            loc_F836:
000118FA 7000                       		moveq	#0,d0
000118FC 4E75                       		rts	
000118FE                            ; End of function Yad_ChkWall
000118FE                            
000118FE                            ; ===========================================================================
000118FE                            ; ---------------------------------------------------------------------------
000118FE                            ; Object 50 - Yadrin enemy (SYZ)
000118FE                            ; ---------------------------------------------------------------------------
000118FE                            
000118FE                            Yadrin:
000118FE 7000                       		moveq	#0,d0
00011900 1028 0024                  		move.b	obRoutine(a0),d0
00011904 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011908 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
0001190C                            ; ===========================================================================
0001190C 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
0001190E 0000                       		dc.w Yad_Action-Yad_Index
00011910                            
00011910 =00000030                  yad_timedelay:	equ $30
00011910                            ; ===========================================================================
00011910                            
00011910                            Yad_Main:	; Routine 0
00011910 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011918 317C 247B 0002             		move.w	#$247B,obGfx(a0)
0001191E 117C 0004 0001             		move.b	#4,obRender(a0)
00011924 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001192A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011930 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011936 117C 0008 0017             		move.b	#8,obWidth(a0)
0001193C 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011942 6100 DD6E                  		bsr.w	ObjectFall
00011946 6100 0000                  		bsr.w	ObjFloorDist
0001194A 4A41                       		tst.w	d1
0001194C 6A00                       		bpl.s	locret_F89E
0001194E D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011952 317C 0000 0012             		move.w	#0,obVelY(a0)
00011958 5428 0024                  		addq.b	#2,obRoutine(a0)
0001195C 0868 0000 0022             		bchg	#0,obStatus(a0)
00011962                            
00011962                            	locret_F89E:
00011962 4E75                       		rts	
00011964                            ; ===========================================================================
00011964                            
00011964                            Yad_Action:	; Routine 2
00011964 7000                       		moveq	#0,d0
00011966 1028 0025                  		move.b	ob2ndRout(a0),d0
0001196A 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
0001196E 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011972 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011978 6100 AE30                  		bsr.w	AnimateSprite
0001197C 6000 FCF6                  		bra.w	RememberState
00011980                            ; ===========================================================================
00011980 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011982 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011984                            ; ===========================================================================
00011984                            
00011984                            Yad_Move:
00011984 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011988 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001198A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001198E 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011994 117C 0001 001C             		move.b	#1,obAnim(a0)
0001199A 0868 0000 0022             		bchg	#0,obStatus(a0)
000119A0 6600                       		bne.s	locret_F8E2
000119A2 4468 0010                  		neg.w	obVelX(a0)	; change direction
000119A6                            
000119A6                            	locret_F8E2:
000119A6 4E75                       		rts	
000119A8                            ; ===========================================================================
000119A8                            
000119A8                            Yad_FixToFloor:
000119A8 6100 DD40                  		bsr.w	SpeedToPos
000119AC 6100 0000                  		bsr.w	ObjFloorDist
000119B0 0C41 FFF8                  		cmpi.w	#-8,d1
000119B4 6D00                       		blt.s	Yad_Pause
000119B6 0C41 000C                  		cmpi.w	#$C,d1
000119BA 6C00                       		bge.s	Yad_Pause
000119BC D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
000119C0 6100 FF0A                  		bsr.w	Yad_ChkWall
000119C4 6600                       		bne.s	Yad_Pause
000119C6 4E75                       		rts	
000119C8                            ; ===========================================================================
000119C8                            
000119C8                            Yad_Pause:
000119C8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000119CC 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
000119D2 317C 0000 0010             		move.w	#0,obVelX(a0)
000119D8 117C 0000 001C             		move.b	#0,obAnim(a0)
000119DE 4E75                       		rts	
000119DE 4E75                       		rts	
000119E0                            		include	"_anim\Yadrin.asm"
000119E0                            ; ---------------------------------------------------------------------------
000119E0                            ; Animation script - Yadrin enemy
000119E0                            ; ---------------------------------------------------------------------------
000119E0 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
000119E2 0000                       		dc.w @walk-Ani_Yad
000119E4                            
000119E4 0800 FF                    @stand:		dc.b 8,	0, afEnd
000119E8 00                         		even
000119E8 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
000119F6                            		even
000119F6                            		even
000119F6                            Map_Yad:	include	"_maps\Yadrin.asm"
000119F6                            ; --------------------------------------------------------------------------------
000119F6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119F6                            ; --------------------------------------------------------------------------------
000119F6                            
000119F6                            SME_4WhIu:	
000119F6 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
000119FA 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
000119FE 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011A02 09                         SME_4WhIu_C:	dc.b 9	
00011A03 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011A08 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011A0D 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A12 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A17 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A1C FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A21 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A26 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011A2B EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A30 09                         SME_4WhIu_3A:	dc.b 9	
00011A31 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011A36 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A3B FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A40 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A45 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A4A 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A4F F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011A54 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011A59 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011A5E 0C                         SME_4WhIu_68:	dc.b $C	
00011A5F EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011A64 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011A69 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011A6E 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A73 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A78 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011A7D EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A82 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011A87 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011A8C F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011A91 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011A96 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011A9B 0C                         SME_4WhIu_A5:	dc.b $C	
00011A9C F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011AA1 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011AA6 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011AAB FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011AB0 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011AB5 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011ABA EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011ABF EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011AC4 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011AC9 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011ACE 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011AD3 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011AD8 05                         SME_4WhIu_E2:	dc.b 5	
00011AD9 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011ADE 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011AE3 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011AE8 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011AED 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011AF2 05                         SME_4WhIu_FC:	dc.b 5	
00011AF3 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011AF8 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011AFD EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011B02 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011B07 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011B0C                            		even
00011B0C                            		even
00011B0C                            
00011B0C                            		include	"_incObj\sub SolidObject.asm"
00011B0C                            ; ---------------------------------------------------------------------------
00011B0C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011B0C                            ;
00011B0C                            ; input:
00011B0C                            ;	d1 = width
00011B0C                            ;	d2 = height / 2 (when jumping)
00011B0C                            ;	d3 = height / 2 (when walking)
00011B0C                            ;	d4 = x-axis position
00011B0C                            ; ---------------------------------------------------------------------------
00011B0C                            
00011B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B0C                            
00011B0C                            
00011B0C                            SolidObject:
00011B0C 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011B10 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011B14 3401                       		move.w	d1,d2
00011B16 D442                       		add.w	d2,d2
00011B18 43F8 D000                  		lea	(v_player).w,a1
00011B1C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B22 6600                       		bne.s	@leave		; if yes, branch
00011B24 3029 0008                  		move.w	obX(a1),d0
00011B28 9068 0008                  		sub.w	obX(a0),d0
00011B2C D041                       		add.w	d1,d0
00011B2E 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011B30 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011B32 6500                       		bcs.s	@stand		; if not, branch
00011B34                            
00011B34                            	@leave:
00011B34 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011B3A 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011B40 4228 0025                  		clr.b	obSolid(a0)
00011B44 7800                       		moveq	#0,d4
00011B46 4E75                       		rts	
00011B48                            
00011B48                            	@stand:
00011B48 3404                       		move.w	d4,d2
00011B4A 4EB9 0000 94DE             		jsr	MvSonicOnPtfm
00011B50 7800                       		moveq	#0,d4
00011B52 4E75                       		rts	
00011B54                            ; ===========================================================================
00011B54                            
00011B54                            SolidObject71:
00011B54 4A28 0025                  		tst.b	obSolid(a0)
00011B58 6700 0000                  		beq.w	loc_FAD0
00011B5C 3401                       		move.w	d1,d2
00011B5E D442                       		add.w	d2,d2
00011B60 43F8 D000                  		lea	(v_player).w,a1
00011B64 0829 0001 0022             		btst	#1,obStatus(a1)
00011B6A 6600                       		bne.s	@leave
00011B6C 3029 0008                  		move.w	obX(a1),d0
00011B70 9068 0008                  		sub.w	obX(a0),d0
00011B74 D041                       		add.w	d1,d0
00011B76 6B00                       		bmi.s	@leave
00011B78 B042                       		cmp.w	d2,d0
00011B7A 6500                       		bcs.s	@stand
00011B7C                            
00011B7C                            	@leave:
00011B7C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011B82 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011B88 4228 0025                  		clr.b	obSolid(a0)
00011B8C 7800                       		moveq	#0,d4
00011B8E 4E75                       		rts	
00011B90                            
00011B90                            	@stand:
00011B90 3404                       		move.w	d4,d2
00011B92 4EB9 0000 94DE             		jsr	MvSonicOnPtfm
00011B98 7800                       		moveq	#0,d4
00011B9A 4E75                       		rts	
00011B9C                            ; ===========================================================================
00011B9C                            
00011B9C                            SolidObject2F:
00011B9C 43F8 D000                  		lea	(v_player).w,a1
00011BA0 4A28 0001                  		tst.b	obRender(a0)
00011BA4 6A00 0000                  		bpl.w	Solid_Ignore
00011BA8 3029 0008                  		move.w	obX(a1),d0
00011BAC 9068 0008                  		sub.w	obX(a0),d0
00011BB0 D041                       		add.w	d1,d0
00011BB2 6B00 0000                  		bmi.w	Solid_Ignore
00011BB6 3601                       		move.w	d1,d3
00011BB8 D643                       		add.w	d3,d3
00011BBA B043                       		cmp.w	d3,d0
00011BBC 6200 0000                  		bhi.w	Solid_Ignore
00011BC0 3A00                       		move.w	d0,d5
00011BC2 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011BC8 6700                       		beq.s	@notflipped	; if not, branch
00011BCA 4645                       		not.w	d5
00011BCC DA43                       		add.w	d3,d5
00011BCE                            
00011BCE                            	@notflipped:
00011BCE E24D                       		lsr.w	#1,d5
00011BD0 7600                       		moveq	#0,d3
00011BD2 1632 5000                  		move.b	(a2,d5.w),d3
00011BD6 9612                       		sub.b	(a2),d3
00011BD8 3A28 000C                  		move.w	obY(a0),d5
00011BDC 9A43                       		sub.w	d3,d5
00011BDE 1629 0016                  		move.b	obHeight(a1),d3
00011BE2 4883                       		ext.w	d3
00011BE4 D443                       		add.w	d3,d2
00011BE6 3629 000C                  		move.w	obY(a1),d3
00011BEA 9645                       		sub.w	d5,d3
00011BEC 5843                       		addq.w	#4,d3
00011BEE D642                       		add.w	d2,d3
00011BF0 6B00 0000                  		bmi.w	Solid_Ignore
00011BF4 3802                       		move.w	d2,d4
00011BF6 D844                       		add.w	d4,d4
00011BF8 B644                       		cmp.w	d4,d3
00011BFA 6400 0000                  		bcc.w	Solid_Ignore
00011BFE 6000 0000                  		bra.w	loc_FB0E
00011C02                            ; ===========================================================================
00011C02                            
00011C02                            Solid_ChkEnter:
00011C02 4A28 0001                  		tst.b	obRender(a0)
00011C06 6A00 0000                  		bpl.w	Solid_Ignore
00011C0A                            
00011C0A                            loc_FAD0:
00011C0A 43F8 D000                  		lea	(v_player).w,a1
00011C0E 3029 0008                  		move.w	obX(a1),d0
00011C12 9068 0008                  		sub.w	obX(a0),d0
00011C16 D041                       		add.w	d1,d0
00011C18 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011C1C 3601                       		move.w	d1,d3
00011C1E D643                       		add.w	d3,d3
00011C20 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011C22 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011C26 1629 0016                  		move.b	obHeight(a1),d3
00011C2A 4883                       		ext.w	d3
00011C2C D443                       		add.w	d3,d2
00011C2E 3629 000C                  		move.w	obY(a1),d3
00011C32 9668 000C                  		sub.w	obY(a0),d3
00011C36 5843                       		addq.w	#4,d3
00011C38 D642                       		add.w	d2,d3
00011C3A 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011C3E 3802                       		move.w	d2,d4
00011C40 D844                       		add.w	d4,d4
00011C42 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011C44 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011C48                            
00011C48                            loc_FB0E:
00011C48 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011C4C 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011C50 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011C56 6400 0000                  			bcc.w	Solid_Debug
00011C5A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011C5E 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011C62 3A00                       		move.w	d0,d5
00011C64 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011C66 6400                       		bcc.s	@isright	; if yes, branch
00011C68 D241                       		add.w	d1,d1
00011C6A 9041                       		sub.w	d1,d0
00011C6C 3A00                       		move.w	d0,d5
00011C6E 4445                       		neg.w	d5
00011C70                            
00011C70                            	@isright:
00011C70 3203                       		move.w	d3,d1
00011C72 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011C74 6400                       		bcc.s	@isbelow	; if yes, branch
00011C76                            
00011C76 5943                       		subq.w	#4,d3
00011C78 9644                       		sub.w	d4,d3
00011C7A 3203                       		move.w	d3,d1
00011C7C 4441                       		neg.w	d1
00011C7E                            
00011C7E                            	@isbelow:
00011C7E BA41                       		cmp.w	d1,d5
00011C80 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011C84 0C41 0004                  		cmpi.w	#4,d1
00011C88 6300                       		bls.s	Solid_SideAir
00011C8A 4A40                       		tst.w	d0		; where is Sonic?
00011C8C 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011C8E 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011C90 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011C94 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011C96 6000                       		bra.s	Solid_Left
00011C98                            ; ===========================================================================
00011C98                            
00011C98                            Solid_Right:
00011C98 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011C9C 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011C9E                            
00011C9E                            Solid_Left:
00011C9E 337C 0000 0020             		move.w	#0,obInertia(a1)
00011CA4 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011CAA                            
00011CAA                            Solid_Centre:
00011CAA 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011CAE 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011CB4 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011CB6 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011CBC 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011CC2 7801                       		moveq	#1,d4		; return side collision
00011CC4 4E75                       		rts	
00011CC6                            ; ===========================================================================
00011CC6                            
00011CC6                            Solid_SideAir:
00011CC6 6100                       		bsr.s	Solid_NotPushing
00011CC8 7801                       		moveq	#1,d4		; return side collision
00011CCA 4E75                       		rts	
00011CCC                            ; ===========================================================================
00011CCC                            
00011CCC                            Solid_Ignore:
00011CCC 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011CD2 6700                       		beq.s	Solid_Debug	; if not, branch
00011CD4 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011CDA 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CDC 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011CE2 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CE4 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011CEA 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CEC 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011CF2                            
00011CF2                            
00011CF2                            Solid_NotPushing:
00011CF2 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011CF8 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011CFE                            
00011CFE                            Solid_Debug:
00011CFE 7800                       		moveq	#0,d4		; return no collision
00011D00 4E75                       		rts	
00011D02                            ; ===========================================================================
00011D02                            
00011D02                            Solid_TopBottom:
00011D02 4A43                       		tst.w	d3		; is Sonic below the object?
00011D04 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011D06 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011D0A 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011D0C 60BE                       		bra.s	Solid_Ignore
00011D0E                            ; ===========================================================================
00011D0E                            
00011D0E                            Solid_Below:
00011D0E 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011D12 6700                       		beq.s	Solid_Squash	; if not, branch
00011D14 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011D16 4A43                       		tst.w	d3		; is Sonic above the object?
00011D18 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011D1A 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011D1E 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011D24                            
00011D24                            Solid_TopBtmAir:
00011D24 78FF                       		moveq	#-1,d4
00011D26 4E75                       		rts	
00011D28                            ; ===========================================================================
00011D28                            
00011D28                            Solid_Squash:
00011D28 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D2E 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011D30 2F08                       		move.l	a0,-(sp)
00011D32 2049                       		movea.l	a1,a0
00011D34 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011D3A 205F                       		movea.l	(sp)+,a0
00011D3C 78FF                       		moveq	#-1,d4
00011D3E 4E75                       		rts	
00011D40                            ; ===========================================================================
00011D40                            
00011D40                            Solid_Landed:
00011D40 5943                       		subq.w	#4,d3
00011D42 7200                       		moveq	#0,d1
00011D44 1228 0014                  		move.b	obActWid(a0),d1
00011D48 3401                       		move.w	d1,d2
00011D4A D442                       		add.w	d2,d2
00011D4C D269 0008                  		add.w	obX(a1),d1
00011D50 9268 0008                  		sub.w	obX(a0),d1
00011D54 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011D56 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011D58 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011D5A 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011D5E 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011D60 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011D64 5369 000C                  		subq.w	#1,obY(a1)
00011D68 6100                       		bsr.s	Solid_ResetFloor
00011D6A 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011D70 08E8 0003 0022             		bset	#3,obStatus(a0)
00011D76 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011D78 4E75                       		rts	
00011D7A                            ; ===========================================================================
00011D7A                            
00011D7A                            Solid_Miss:
00011D7A 7800                       		moveq	#0,d4
00011D7C 4E75                       		rts	
00011D7E                            ; End of function SolidObject
00011D7E                            
00011D7E                            
00011D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D7E                            
00011D7E                            
00011D7E                            Solid_ResetFloor:
00011D7E 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011D84 6700                       		beq.s	@notonobj	; if not, branch
00011D86                            
00011D86 7000                       		moveq	#0,d0
00011D88 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011D8C ED48                       		lsl.w	#6,d0
00011D8E 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011D94 2440                       		movea.l	d0,a2
00011D96 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011D9C 422A 0025                  		clr.b	obSolid(a2)
00011DA0                            
00011DA0                            	@notonobj:
00011DA0 3008                       		move.w	a0,d0
00011DA2 0440 D000                  		subi.w	#$D000,d0
00011DA6 EC48                       		lsr.w	#6,d0
00011DA8 0240 007F                  		andi.w	#$7F,d0
00011DAC 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011DB0 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011DB6 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011DBC 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011DC2 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011DC8 6700                       		beq.s	@notinair	; if not, branch
00011DCA 2F08                       		move.l	a0,-(sp)
00011DCC 2049                       		movea.l	a1,a0
00011DCE 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011DD4 205F                       		movea.l	(sp)+,a0
00011DD6                            
00011DD6                            	@notinair:
00011DD6 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011DDC 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011DE2 4E75                       		rts	
00011DE4                            ; End of function Solid_ResetFloor
00011DE4                            ; End of function Solid_ResetFloor
00011DE4                            
00011DE4                            		include	"_incObj\51 Smashable Green Block.asm"
00011DE4                            ; ---------------------------------------------------------------------------
00011DE4                            ; Object 51 - smashable	green block (MZ)
00011DE4                            ; ---------------------------------------------------------------------------
00011DE4                            
00011DE4                            SmashBlock:
00011DE4 7000                       		moveq	#0,d0
00011DE6 1028 0024                  		move.b	obRoutine(a0),d0
00011DEA 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011DEE 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011DF2 6000 F880                  		bra.w	RememberState
00011DF6                            ; ===========================================================================
00011DF6 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011DF8 0000                       		dc.w Smab_Solid-Smab_Index
00011DFA 0000                       		dc.w Smab_Points-Smab_Index
00011DFC                            ; ===========================================================================
00011DFC                            
00011DFC                            Smab_Main:	; Routine 0
00011DFC 5428 0024                  		addq.b	#2,obRoutine(a0)
00011E00 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011E08 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011E0E 117C 0004 0001             		move.b	#4,obRender(a0)
00011E14 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011E1A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011E20 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011E26                            
00011E26                            Smab_Solid:	; Routine 2
00011E26                            
00011E26 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011E26 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011E26                            
00011E26 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011E2C 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011E32 323C 001B                  		move.w	#$1B,d1
00011E36 343C 0010                  		move.w	#$10,d2
00011E3A 363C 0011                  		move.w	#$11,d3
00011E3E 3828 0008                  		move.w	obX(a0),d4
00011E42 6100 FCC8                  		bsr.w	SolidObject
00011E46 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011E4C 6600                       		bne.s	@smash		; if yes, branch
00011E4E                            
00011E4E                            	@notspinning:
00011E4E 4E75                       		rts	
00011E50                            ; ===========================================================================
00011E50                            
00011E50                            @smash:
00011E50 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011E56 66F6                       		bne.s	@notspinning	; if not, branch
00011E58 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011E5E 08E9 0002 0022             		bset	#2,obStatus(a1)
00011E64 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011E6A 137C 0007 0017             		move.b	#7,obWidth(a1)
00011E70 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011E76 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011E7C 08E9 0001 0022             		bset	#1,obStatus(a1)
00011E82 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011E88 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011E8E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E94 4228 0025                  		clr.b	obSolid(a0)
00011E98 117C 0001 001A             		move.b	#1,obFrame(a0)
00011E9E 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011EA4 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011EA6 343C 0038                  		move.w	#$38,d2
00011EAA 6100 D406                  		bsr.w	SmashObject
00011EAE 6100 DCDA                  		bsr.w	FindFreeObj
00011EB2 6600                       		bne.s	Smab_Points
00011EB4 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011EB8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011EBE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011EC4 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011EC8 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011ECC 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011ED0 6500                       		bcs.s	@bonus		; if yes, branch
00011ED2 7406                       		moveq	#6,d2		; set cap for points
00011ED4                            
00011ED4                            	@bonus:
00011ED4 7000                       		moveq	#0,d0
00011ED6 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011EDA 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011EE0 6500                       		bcs.s	@givepoints	; if not, branch
00011EE2 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011EE6 740A                       		moveq	#10,d2
00011EE8                            
00011EE8                            	@givepoints:
00011EE8 4EB9 0000 0000             		jsr	(AddPoints).l
00011EEE E24A                       		lsr.w	#1,d2
00011EF0 1342 001A                  		move.b	d2,obFrame(a1)
00011EF4                            
00011EF4                            Smab_Points:	; Routine 4
00011EF4 6100 D7F4                  		bsr.w	SpeedToPos
00011EF8 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011EFE 6100 D7FE                  		bsr.w	DisplaySprite
00011F02 4A28 0001                  		tst.b	obRender(a0)
00011F06 6A00 D836                  		bpl.w	DeleteObject
00011F0A 4E75                       		rts	
00011F0C                            ; ===========================================================================
00011F0C FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011F10 FF00 FF00                  		dc.w -$100, -$100
00011F14 0200 FE00                  		dc.w $200, -$200
00011F18 0100 FF00                  		dc.w $100, -$100
00011F1C                            
00011F1C 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F1C 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F24                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011F24                            ; ---------------------------------------------------------------------------
00011F24                            ; Sprite mappings - smashable green block (MZ)
00011F24                            ; ---------------------------------------------------------------------------
00011F24                            Map_Smab_internal:
00011F24 0000                       		dc.w @two-Map_Smab_internal
00011F26 0000                       		dc.w @four-Map_Smab_internal
00011F28 02                         @two:		dc.b 2
00011F29 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
00011F2E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00011F33 04                         @four:		dc.b 4
00011F34 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
00011F39 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00011F3E F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00011F43 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011F48                            		even
00011F48                            		even
00011F48                            
00011F48                            		include	"_incObj\52 Moving Blocks.asm"
00011F48                            ; ---------------------------------------------------------------------------
00011F48                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011F48                            ; ---------------------------------------------------------------------------
00011F48                            
00011F48                            MovingBlock:
00011F48 7000                       		moveq	#0,d0
00011F4A 1028 0024                  		move.b	obRoutine(a0),d0
00011F4E 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011F52 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011F56                            ; ===========================================================================
00011F56 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011F58 0000                       		dc.w MBlock_Platform-MBlock_Index
00011F5A 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011F5C                            
00011F5C =00000030                  mblock_origX:	equ $30
00011F5C =00000032                  mblock_origY:	equ $32
00011F5C                            
00011F5C 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011F5E 2001                       		dc.b $20, 1
00011F60 2002                       		dc.b $20, 2
00011F62 4003                       		dc.b $40, 3
00011F64 3004                       		dc.b $30, 4
00011F66                            ; ===========================================================================
00011F66                            
00011F66                            MBlock_Main:	; Routine 0
00011F66 5428 0024                  		addq.b	#2,obRoutine(a0)
00011F6A 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011F72 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011F78 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011F7E 6600                       		bne.s	loc_FE44
00011F80 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011F88 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011F8E 117C 0007 0016             		move.b	#7,obHeight(a0)
00011F94                            
00011F94                            loc_FE44:
00011F94 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011F9A 6600                       		bne.s	loc_FE60
00011F9C 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00011FA2 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00011FA8 6700                       		beq.s	loc_FE60	; if yes, branch
00011FAA 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00011FB0                            
00011FB0                            loc_FE60:
00011FB0 117C 0004 0001             		move.b	#4,obRender(a0)
00011FB6 7000                       		moveq	#0,d0
00011FB8 1028 0028                  		move.b	obSubtype(a0),d0
00011FBC E648                       		lsr.w	#3,d0
00011FBE 0240 001E                  		andi.w	#$1E,d0
00011FC2 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00011FC6 115A 0014                  		move.b	(a2)+,obActWid(a0)
00011FCA 115A 001A                  		move.b	(a2)+,obFrame(a0)
00011FCE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011FD4 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011FDA 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00011FE0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00011FE6                            
00011FE6                            MBlock_Platform: ; Routine 2
00011FE6 6100 0000                  		bsr.w	MBlock_Move
00011FEA 7200                       		moveq	#0,d1
00011FEC 1228 0014                  		move.b	obActWid(a0),d1
00011FF0 4EB9 0000 8E0C             		jsr	(PlatformObject).l
00011FF6 6000                       		bra.s	MBlock_ChkDel
00011FF8                            ; ===========================================================================
00011FF8                            
00011FF8                            MBlock_StandOn:	; Routine 4
00011FF8 7200                       		moveq	#0,d1
00011FFA 1228 0014                  		move.b	obActWid(a0),d1
00011FFE 4EB9 0000 8F80             		jsr	(ExitPlatform).l
00012004 3F28 0008                  		move.w	obX(a0),-(sp)
00012008 6100 0000                  		bsr.w	MBlock_Move
0001200C 341F                       		move.w	(sp)+,d2
0001200E 4EB9 0000 94EA             		jsr	(MvSonicOnPtfm2).l
00012014                            
00012014                            MBlock_ChkDel:
00012032 6000 D6CA                  		bra.w	DisplaySprite
00012036                            ; ===========================================================================
00012036                            
00012036                            MBlock_Move:
00012036 7000                       		moveq	#0,d0
00012038 1028 0028                  		move.b	obSubtype(a0),d0
0001203C 0240 000F                  		andi.w	#$F,d0
00012040 D040                       		add.w	d0,d0
00012042 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00012046 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
0001204A                            ; ===========================================================================
0001204A 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
0001204E 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00012052 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00012056 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
0001205A 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
0001205E 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00012060                            ; ===========================================================================
00012060                            
00012060                            MBlock_Type00:
00012060 4E75                       		rts	
00012062                            ; ===========================================================================
00012062                            
00012062                            MBlock_Type01:
00012062 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012066 323C 0060                  		move.w	#$60,d1
0001206A 0828 0000 0022             		btst	#0,obStatus(a0)
00012070 6700                       		beq.s	loc_FF26
00012072 4440                       		neg.w	d0
00012074 D041                       		add.w	d1,d0
00012076                            
00012076                            loc_FF26:
00012076 3228 0030                  		move.w	mblock_origX(a0),d1
0001207A 9240                       		sub.w	d0,d1
0001207C 3141 0008                  		move.w	d1,obX(a0)
00012080 4E75                       		rts	
00012082                            ; ===========================================================================
00012082                            
00012082                            MBlock_Type02:
00012082 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012088 6600                       		bne.s	MBlock_02_Wait
0001208A 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001208E                            
0001208E                            MBlock_02_Wait:
0001208E 4E75                       		rts	
00012090                            ; ===========================================================================
00012090                            
00012090                            MBlock_Type03:
00012090 7600                       		moveq	#0,d3
00012092 1628 0014                  		move.b	obActWid(a0),d3
00012096 6100 0000                  		bsr.w	ObjHitWallRight
0001209A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001209C 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001209E 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000120A2 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000120A8 4E75                       		rts	
000120AA                            ; ===========================================================================
000120AA                            
000120AA                            MBlock_03_End:
000120AA 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000120AE 4E75                       		rts	
000120B0                            ; ===========================================================================
000120B0                            
000120B0                            MBlock_Type05:
000120B0 7600                       		moveq	#0,d3
000120B2 1628 0014                  		move.b	obActWid(a0),d3
000120B6 6100 0000                  		bsr.w	ObjHitWallRight
000120BA 4A41                       		tst.w	d1		; has the platform hit a wall?
000120BC 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
000120BE 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000120C2 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000120C8 4E75                       		rts	
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            MBlock_05_End:
000120CA 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
000120CE 4E75                       		rts	
000120D0                            ; ===========================================================================
000120D0                            
000120D0                            MBlock_Type06:
000120D0 6100 D618                  		bsr.w	SpeedToPos
000120D4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
000120DA 6100 0000                  		bsr.w	ObjFloorDist
000120DE 4A41                       		tst.w	d1		; has platform hit the floor?
000120E0 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000120E4 D368 000C                  		add.w	d1,obY(a0)
000120E8 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
000120EC 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
000120F0                            
000120F0                            locret_FFA0:
000120F0 4E75                       		rts	
000120F2                            ; ===========================================================================
000120F2                            
000120F2                            MBlock_Type07:
000120F2 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
000120F6 6700                       		beq.s	MBlock_07_ChkDel
000120F8 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
000120FC                            
000120FC                            MBlock_07_ChkDel:
000120FC 588F                       		addq.l	#4,sp
0001211C 4E75                       		rts	
0001211E                            ; ===========================================================================
0001211E                            
0001211E                            MBlock_Type08:
0001211E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012122 323C 0080                  		move.w	#$80,d1
00012126 0828 0000 0022             		btst	#0,obStatus(a0)
0001212C 6700                       		beq.s	loc_FFE2
0001212E 4440                       		neg.w	d0
00012130 D041                       		add.w	d1,d0
00012132                            
00012132                            loc_FFE2:
00012132 3228 0032                  		move.w	mblock_origY(a0),d1
00012136 9240                       		sub.w	d0,d1
00012138 3141 000C                  		move.w	d1,obY(a0)
0001213C 4E75                       		rts	
0001213E                            ; ===========================================================================
0001213E                            
0001213E                            MBlock_Type0A:
0001213E 7600                       		moveq	#0,d3
00012140 1628 0014                  		move.b	obActWid(a0),d3
00012144 D643                       		add.w	d3,d3
00012146 7208                       		moveq	#8,d1
00012148 0828 0000 0022             		btst	#0,obStatus(a0)
0001214E 6700                       		beq.s	loc_10004
00012150 4441                       		neg.w	d1
00012152 4443                       		neg.w	d3
00012154                            
00012154                            loc_10004:
00012154 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012158 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
0001215A 3028 0008                  		move.w	obX(a0),d0
0001215E 9068 0030                  		sub.w	mblock_origX(a0),d0
00012162 B043                       		cmp.w	d3,d0
00012164 6700                       		beq.s	MBlock_0A_Wait
00012166 D368 0008                  		add.w	d1,obX(a0)	; move platform
0001216A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00012170 4E75                       		rts	
00012172                            ; ===========================================================================
00012172                            
00012172                            MBlock_0A_Wait:
00012172 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012176 6600                       		bne.s	locret_1002E	; if time remains, branch
00012178 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001217E                            
0001217E                            locret_1002E:
0001217E 4E75                       		rts	
00012180                            ; ===========================================================================
00012180                            
00012180                            MBlock_0A_Back:
00012180 3028 0008                  		move.w	obX(a0),d0
00012184 9068 0030                  		sub.w	mblock_origX(a0),d0
00012188 6700                       		beq.s	MBlock_0A_Reset
0001218A 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001218E 4E75                       		rts	
00012190                            ; ===========================================================================
00012190                            
00012190                            MBlock_0A_Reset:
00012190 4268 0036                  		clr.w	$36(a0)
00012194 5328 0028                  		subq.b	#1,obSubtype(a0)
00012198 4E75                       		rts	
00012198 4E75                       		rts	
0001219A                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
0001219A                            ; ---------------------------------------------------------------------------
0001219A                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001219A                            ; ---------------------------------------------------------------------------
0001219A                            Map_MBlock_internal:
0001219A 0000                       		dc.w @mz1-Map_MBlock_internal
0001219C 0000                       		dc.w @mz2-Map_MBlock_internal
0001219E 0000                       		dc.w @sbz-Map_MBlock_internal
000121A0 0000                       		dc.w @sbzwide-Map_MBlock_internal
000121A2 0000                       		dc.w @mz3-Map_MBlock_internal
000121A4 01                         @mz1:		dc.b 1
000121A5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000121AA 02                         @mz2:		dc.b 2
000121AB F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000121B0 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000121B5 04                         @sbz:		dc.b 4
000121B6 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000121BB 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000121C0 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000121C5 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000121CA 04                         @sbzwide:	dc.b 4
000121CB F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000121D0 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000121D5 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000121DA F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000121DF 03                         @mz3:		dc.b 3
000121E0 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000121E5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000121EA F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000121F0 00                         		even
000121F0 00                         		even
000121F0                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
000121F0                            ; ---------------------------------------------------------------------------
000121F0                            ; Sprite mappings - moving block (LZ)
000121F0                            ; ---------------------------------------------------------------------------
000121F0                            Map_MBlockLZ_internal:
000121F0 0000                       		dc.w @0-Map_MBlockLZ_internal
000121F2 01                         @0:		dc.b 1
000121F3 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000121F8                            		even
000121F8                            		even
000121F8                            
000121F8                            		include	"_incObj\55 Basaran.asm"
000121F8                            ; ---------------------------------------------------------------------------
000121F8                            ; Object 55 - Basaran enemy (MZ)
000121F8                            ; ---------------------------------------------------------------------------
000121F8                            
000121F8                            Basaran:
000121F8 7000                       		moveq	#0,d0
000121FA 1028 0024                  		move.b	obRoutine(a0),d0
000121FE 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012202 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012206                            ; ===========================================================================
00012206 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012208 0000                       		dc.w Bas_Action-Bas_Index
0001220A                            ; ===========================================================================
0001220A                            
0001220A                            Bas_Main:	; Routine 0
0001220A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001220E 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012216 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
0001221C 117C 0004 0001             		move.b	#4,obRender(a0)
00012222 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012228 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001222E 117C 000B 0020             		move.b	#$B,obColType(a0)
00012234 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001223A                            
0001223A                            Bas_Action:	; Routine 2
0001223A 7000                       		moveq	#0,d0
0001223C 1028 0025                  		move.b	ob2ndRout(a0),d0
00012240 323B 0000                  		move.w	@index(pc,d0.w),d1
00012244 4EBB 1000                  		jsr	@index(pc,d1.w)
00012248 43F9 0000 0000             		lea	(Ani_Bas).l,a1
0001224E 6100 A55A                  		bsr.w	AnimateSprite
00012252 6000 F420                  		bra.w	RememberState
00012256                            ; ===========================================================================
00012256 0000                       @index:		dc.w @dropcheck-@index
00012258 0000                       		dc.w @dropfly-@index
0001225A 0000                       		dc.w @flapsound-@index
0001225C 0000                       		dc.w @flyup-@index
0001225E                            ; ===========================================================================
0001225E                            
0001225E                            @dropcheck:
0001225E 343C 0080                  		move.w	#$80,d2
00012262 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
00012266 6400                       		bcc.s	@nodrop		; if not, branch
00012268 3038 D00C                  		move.w	(v_player+obY).w,d0
0001226C 3140 0036                  		move.w	d0,$36(a0)
00012270 9068 000C                  		sub.w	obY(a0),d0
00012274 6500                       		bcs.s	@nodrop
00012276 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
0001227A 6400                       		bcc.s	@nodrop		; if not, branch
0001227C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00012280 6600                       		bne.s	@nodrop		; if yes, branch
00012282                            
00012282 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012286 D007                       		add.b	d7,d0
00012288 0200 0007                  		andi.b	#7,d0
0001228C 6600                       		bne.s	@nodrop
0001228E 117C 0001 001C             		move.b	#1,obAnim(a0)
00012294 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012298                            
00012298                            	@nodrop:
00012298 4E75                       		rts	
0001229A                            ; ===========================================================================
0001229A                            
0001229A                            @dropfly:
0001229A 6100 D44E                  		bsr.w	SpeedToPos
0001229E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000122A4 343C 0080                  		move.w	#$80,d2
000122A8 6100 0000                  		bsr.w	@chkdistance
000122AC 3028 0036                  		move.w	$36(a0),d0
000122B0 9068 000C                  		sub.w	obY(a0),d0
000122B4 6500                       		bcs.s	@chkdel
000122B6 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
000122BA 6400                       		bcc.s	@dropmore	; if not, branch
000122BC 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
000122C0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
000122C6 117C 0002 001C             		move.b	#2,obAnim(a0)
000122CC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000122D0                            
000122D0                            	@dropmore:
000122D0 4E75                       		rts	
000122D2                            
000122D2                            	@chkdel:
000122D2 4A28 0001                  		tst.b	obRender(a0)
000122D6 6A00 D466                  		bpl.w	DeleteObject
000122DA 4E75                       		rts	
000122DC                            ; ===========================================================================
000122DC                            
000122DC                            @flapsound:
000122DC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000122E0 0200 000F                  		andi.b	#$F,d0
000122E4 6600                       		bne.s	@nosound
000122F0                            
000122F0                            	@nosound:
000122F0 6100 D3F8                  		bsr.w	SpeedToPos
000122F4 3038 D008                  		move.w	(v_player+obX).w,d0
000122F8 9068 0008                  		sub.w	obX(a0),d0
000122FC 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
000122FE 4440                       		neg.w	d0
00012300                            
00012300                            	@isright:
00012300 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012304 6500                       		bcs.s	@dontflyup	; if yes, branch
00012306 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001230A D007                       		add.b	d7,d0
0001230C 0200 0007                  		andi.b	#7,d0
00012310 6600                       		bne.s	@dontflyup
00012312 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012316                            
00012316                            @dontflyup:
00012316 4E75                       		rts	
00012318                            ; ===========================================================================
00012318                            
00012318                            @flyup:
00012318 6100 D3D0                  		bsr.w	SpeedToPos
0001231C 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012322 6100 0000                  		bsr.w	ObjHitCeiling
00012326 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012328 6A00                       		bpl.s	@noceiling	; if not, branch
0001232A 9368 000C                  		sub.w	d1,obY(a0)
0001232E 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
00012334 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012338 4268 0012                  		clr.w	obVelY(a0)
0001233C 4228 001C                  		clr.b	obAnim(a0)
00012340 4228 0025                  		clr.b	ob2ndRout(a0)
00012344                            
00012344                            	@noceiling:
00012344 4E75                       		rts	
00012346                            ; ===========================================================================
00012346                            
00012346                            ; Subroutine to check Sonic's distance from the basaran
00012346                            
00012346                            ; input:
00012346                            ;	d2 = distance to compare
00012346                            
00012346                            ; output:
00012346                            ;	d0 = distance between Sonic and basaran
00012346                            ;	d1 = speed/direction for basaran to fly
00012346                            
00012346                            @chkdistance:
00012346 323C 0100                  		move.w	#$100,d1
0001234A 08E8 0000 0022             		bset	#0,obStatus(a0)
00012350 3038 D008                  		move.w	(v_player+obX).w,d0
00012354 9068 0008                  		sub.w	obX(a0),d0
00012358 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
0001235A 4440                       		neg.w	d0
0001235C 4441                       		neg.w	d1
0001235E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00012364                            
00012364                            	@right:
00012364 B042                       		cmp.w	d2,d0
00012366 4E75                       		rts	
00012368                            ; ===========================================================================
00012368                            ; unused crap
00012368 6100 D380                  		bsr.w	SpeedToPos
0001236C 6100 D390                  		bsr.w	DisplaySprite
00012370 4A28 0001                  		tst.b	obRender(a0)
00012374 6A00 D3C8                  		bpl.w	DeleteObject
00012378 4E75                       		rts	
00012378 4E75                       		rts	
0001237A                            		include	"_anim\Basaran.asm"
0001237A                            ; ---------------------------------------------------------------------------
0001237A                            ; Animation script - Basaran enemy
0001237A                            ; ---------------------------------------------------------------------------
0001237A 0000                       Ani_Bas:	dc.w @still-Ani_Bas
0001237C 0000                       		dc.w @fall-Ani_Bas
0001237E 0000                       		dc.w @fly-Ani_Bas
00012380 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012384 00                         		even
00012384 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012388 00                         		even
00012388 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001238E                            		even
0001238E                            		even
0001238E                            Map_Bas:	include	"_maps\Basaran.asm"
0001238E                            ; --------------------------------------------------------------------------------
0001238E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001238E                            ; --------------------------------------------------------------------------------
0001238E                            
0001238E                            SME_RhYYA:	
0001238E 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
00012392 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012396 01                         SME_RhYYA_8:	dc.b 1	
00012397 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
0001239C 03                         SME_RhYYA_E:	dc.b 3	
0001239D F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
000123A2 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000123A7 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000123AC 04                         SME_RhYYA_1E:	dc.b 4	
000123AD F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000123B2 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000123B7 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
000123BC 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
000123C1 04                         SME_RhYYA_33:	dc.b 4	
000123C2 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
000123C7 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
000123CC 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
000123D1 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
000123D6                            		even
000123D6                            		even
000123D6                            
000123D6                            		include	"_incObj\56 Floating Blocks and Doors.asm"
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            
000123D6                            FloatingBlock:
000123D6 7000                       		moveq	#0,d0
000123D8 1028 0024                  		move.b	obRoutine(a0),d0
000123DC 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
000123E0 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
000123E4                            ; ===========================================================================
000123E4 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
000123E6 0000                       		dc.w FBlock_Action-FBlock_Index
000123E8                            
000123E8 =00000034                  fb_origX:	equ $34		; original x-axis position
000123E8 =00000030                  fb_origY:	equ $30		; original y-axis position
000123E8 =0000003A                  fb_height:	equ $3A		; total object height
000123E8 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
000123E8                            
000123E8                            FBlock_Var:	; width/2, height/2
000123E8 1010                       		dc.b  $10, $10	; subtype 0x/8x
000123EA 2020                       		dc.b  $20, $20	; subtype 1x/9x
000123EC 1020                       		dc.b  $10, $20	; subtype 2x/Ax
000123EE 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
000123F0 1027                       		dc.b  $10, $27	; subtype 4x/Cx
000123F2 1010                       		dc.b  $10, $10	; subtype 5x/Dx
000123F4 0820                       		dc.b	8, $20	; subtype 6x/Ex
000123F6 4010                       		dc.b  $40, $10	; subtype 7x/Fx
000123F8                            ; ===========================================================================
000123F8                            
000123F8                            FBlock_Main:	; Routine 0
000123F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000123FC 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012404 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001240A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012410 6600                       		bne.s	@notLZ
00012412 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012418                            
00012418                            	@notLZ:
00012418 117C 0004 0001             		move.b	#4,obRender(a0)
0001241E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00012424 7000                       		moveq	#0,d0
00012426 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
0001242A E648                       		lsr.w	#3,d0
0001242C 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012430 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
00012434 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012438 1152 0016                  		move.b	(a2),obHeight(a0)
0001243C E248                       		lsr.w	#1,d0
0001243E 1140 001A                  		move.b	d0,obFrame(a0)
00012442 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012448 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
0001244E 7000                       		moveq	#0,d0
00012450 1012                       		move.b	(a2),d0
00012452 D040                       		add.w	d0,d0
00012454 3140 003A                  		move.w	d0,fb_height(a0)
00012458 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001245E 6600                       			bne.s	@dontdelete
00012460 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
00012466 6600                       			bne.s	@notatpos
00012468 4A38 F7CE                  			tst.b	($FFFFF7CE).w
0001246C 6700                       			beq.s	@dontdelete
0001246E 4EF9 0000 F73E             			jmp	(DeleteObject).l
00012474                            	@notatpos:
00012474 4228 0028                  			clr.b	obSubtype(a0)
00012478 4A38 F7CE                  			tst.b	($FFFFF7CE).w
0001247C 6600                       			bne.s	@dontdelete
0001247E 4EF9 0000 F73E             			jmp	(DeleteObject).l
00012484                            	@dontdelete:
00012484 7000                       		moveq	#0,d0
00012486 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001248C 6700                       		beq.s	@stillnotLZ
0001248E 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
00012492 0240 000F                  		andi.w	#$F,d0
00012496 5140                       		subq.w	#8,d0
00012498 6500                       		bcs.s	@stillnotLZ
0001249A E548                       		lsl.w	#2,d0
0001249C 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000124A0 45F2 0000                  		lea	(a2,d0.w),a2
000124A4 4A52                       		tst.w	(a2)
000124A6 6A00                       		bpl.s	@stillnotLZ
000124A8 0868 0000 0022             		bchg	#0,obStatus(a0)
000124AE                            
000124AE                            	@stillnotLZ:
000124AE 1028 0028                  		move.b	obSubtype(a0),d0
000124B2 6A00                       		bpl.s	FBlock_Action
000124B4 0200 000F                  		andi.b	#$F,d0
000124B8 1140 003C                  		move.b	d0,fb_type(a0)
000124BC 117C 0005 0028             		move.b	#5,obSubtype(a0)
000124C2 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
000124C8 6600                       		bne.s	@chkstate
000124CA 117C 000C 0028             		move.b	#$C,obSubtype(a0)
000124D0 317C 0080 003A             		move.w	#$80,fb_height(a0)
000124D6                            
000124D6                            @chkstate:
000124D6 45F8 FC00                  		lea	(v_objstate).w,a2
000124DA 7000                       		moveq	#0,d0
000124DC 1028 0023                  		move.b	obRespawnNo(a0),d0
000124E0 6700                       		beq.s	FBlock_Action
000124E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000124E8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000124EE 6700                       		beq.s	FBlock_Action
000124F0 5228 0028                  		addq.b	#1,obSubtype(a0)
000124F4 4268 003A                  		clr.w	fb_height(a0)
000124F8                            
000124F8                            FBlock_Action:	; Routine 2
000124F8 3F28 0008                  		move.w	obX(a0),-(sp)
000124FC 7000                       		moveq	#0,d0
000124FE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012502 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012506 D040                       		add.w	d0,d0
00012508 323B 0000                  		move.w	@index(pc,d0.w),d1
0001250C 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012510 381F                       		move.w	(sp)+,d4
00012512 4A28 0001                  		tst.b	obRender(a0)
00012516 6A00                       		bpl.s	@chkdel
00012518 7200                       		moveq	#0,d1
0001251A 1228 0014                  		move.b	obActWid(a0),d1
0001251E 0641 000B                  		addi.w	#$B,d1
00012522 7400                       		moveq	#0,d2
00012524 1428 0016                  		move.b	obHeight(a0),d2
00012528 3602                       		move.w	d2,d3
0001252A 5243                       		addq.w	#1,d3
0001252C 6100 F5DE                  		bsr.w	SolidObject
00012530                            
00012530                            	@chkdel:
0001254C                            		@display:
0001254C 6000 D1B0                  			bra.w	DisplaySprite
00012550                            		@chkdel2:
00012550 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012556 6600                       			bne.s	@delete
00012558 4A28 0038                  			tst.b	$38(a0)
0001255C 66EE                       			bne.s	@display
0001255E                            		@delete:
0001255E 4EF9 0000 F73E             			jmp	(DeleteObject).l
00012564                            ; ===========================================================================
00012564 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012568 0000 0000                  		dc.w @type02-@index, @type03-@index
0001256C 0000 0000                  		dc.w @type04-@index, @type05-@index
00012570 0000 0000                  		dc.w @type06-@index, @type07-@index
00012574 0000 0000                  		dc.w @type08-@index, @type09-@index
00012578 0000 0000                  		dc.w @type0A-@index, @type0B-@index
0001257C 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00012580                            ; ===========================================================================
00012580                            
00012580                            @type00:
00012580                            ; doesn't move
00012580 4E75                       		rts	
00012582                            ; ===========================================================================
00012582                            
00012582                            @type01:
00012582                            ; moves side-to-side
00012582 323C 0040                  		move.w	#$40,d1		; set move distance
00012586 7000                       		moveq	#0,d0
00012588 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001258C 6000                       		bra.s	@moveLR
0001258E                            ; ===========================================================================
0001258E                            
0001258E                            @type02:
0001258E                            ; moves side-to-side
0001258E 323C 0080                  		move.w	#$80,d1		; set move distance
00012592 7000                       		moveq	#0,d0
00012594 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012598                            
00012598                            	@moveLR:
00012598 0828 0000 0022             		btst	#0,obStatus(a0)
0001259E 6700                       		beq.s	@noflip
000125A0 4440                       		neg.w	d0
000125A2 D041                       		add.w	d1,d0
000125A4                            
000125A4                            	@noflip:
000125A4 3228 0034                  		move.w	fb_origX(a0),d1
000125A8 9240                       		sub.w	d0,d1
000125AA 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000125AE 4E75                       		rts	
000125B0                            ; ===========================================================================
000125B0                            
000125B0                            @type03:
000125B0                            ; moves up/down
000125B0 323C 0040                  		move.w	#$40,d1		; set move distance
000125B4 7000                       		moveq	#0,d0
000125B6 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000125BA 6000                       		bra.s	@moveUD
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            @type04:
000125BC                            ; moves up/down
000125BC 323C 0080                  		move.w	#$80,d1		; set move distance
000125C0 7000                       		moveq	#0,d0
000125C2 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000125C6                            
000125C6                            	@moveUD:
000125C6 0828 0000 0022             		btst	#0,obStatus(a0)
000125CC 6700                       		beq.s	@noflip04
000125CE 4440                       		neg.w	d0
000125D0 D041                       		add.w	d1,d0
000125D2                            
000125D2                            	@noflip04:
000125D2 3228 0030                  		move.w	fb_origY(a0),d1
000125D6 9240                       		sub.w	d0,d1
000125D8 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
000125DC 4E75                       		rts	
000125DE                            ; ===========================================================================
000125DE                            
000125DE                            @type05:
000125DE                            ; moves up when a switch is pressed
000125DE 4A28 0038                  		tst.b	$38(a0)
000125E2 6600                       		bne.s	@loc_104A4
000125E4 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000125EA 6600                       		bne.s	@aaa		; if not, branch
000125EC 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
000125F2 6600                       		bne.s	@aaa
000125F4 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000125F8 3038 D008                  		move.w	(v_player+obX).w,d0
000125FC B068 0008                  		cmp.w	obX(a0),d0
00012600 6400                       		bcc.s	@aaa
00012602 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012608                            
00012608                            	@aaa:
00012608 45F8 F7E0                  		lea	(f_switch).w,a2
0001260C 7000                       		moveq	#0,d0
0001260E 1028 003C                  		move.b	fb_type(a0),d0
00012612 0832 0000 0000             		btst	#0,(a2,d0.w)
00012618 6700                       		beq.s	@loc_104AE
0001261A 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012620 6600                       		bne.s	@loc_1049E	; if not, branch
00012622 0C00 0003                  		cmpi.b	#3,d0
00012626 6600                       		bne.s	@loc_1049E
00012628 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001262C                            
0001262C                            @loc_1049E:
0001262C 117C 0001 0038             		move.b	#1,$38(a0)
00012632                            
00012632                            @loc_104A4:
00012632 4A68 003A                  		tst.w	fb_height(a0)
00012636 6700                       		beq.s	@loc_104C8
00012638 5568 003A                  		subq.w	#2,fb_height(a0)
0001263C                            
0001263C                            @loc_104AE:
0001263C 3028 003A                  		move.w	fb_height(a0),d0
00012640 0828 0000 0022             		btst	#0,$22(a0)
00012646 6700                       		beq.s	@loc_104BC
00012648 4440                       		neg.w	d0
0001264A                            
0001264A                            @loc_104BC:
0001264A 3228 0030                  		move.w	fb_origY(a0),d1
0001264E D240                       		add.w	d0,d1
00012650 3141 000C                  		move.w	d1,obY(a0)
00012654 4E75                       		rts	
00012656                            ; ===========================================================================
00012656                            
00012656                            @loc_104C8:
00012656 5228 0028                  		addq.b	#1,$28(a0)
0001265A 4228 0038                  		clr.b	$38(a0)
0001265E 45F8 FC00                  		lea	(v_objstate).w,a2
00012662 7000                       		moveq	#0,d0
00012664 1028 0023                  		move.b	obRespawnNo(a0),d0
00012668 67D2                       		beq.s	@loc_104AE
0001266A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012670 60CA                       		bra.s	@loc_104AE
00012672                            ; ===========================================================================
00012672                            
00012672                            @type06:
00012672 4A28 0038                  		tst.b	$38(a0)
00012676 6600                       		bne.s	@loc_10500
00012678 45F8 F7E0                  		lea	(f_switch).w,a2
0001267C 7000                       		moveq	#0,d0
0001267E 1028 003C                  		move.b	fb_type(a0),d0
00012682 4A32 0000                  		tst.b	(a2,d0.w)
00012686 6A00                       		bpl.s	@loc_10512
00012688 117C 0001 0038             		move.b	#1,$38(a0)
0001268E                            
0001268E                            @loc_10500:
0001268E 7000                       		moveq	#0,d0
00012690 1028 0016                  		move.b	obHeight(a0),d0
00012694 D040                       		add.w	d0,d0
00012696 B068 003A                  		cmp.w	fb_height(a0),d0
0001269A 6700                       		beq.s	@loc_1052C
0001269C 5468 003A                  		addq.w	#2,fb_height(a0)
000126A0                            
000126A0                            @loc_10512:
000126A0 3028 003A                  		move.w	fb_height(a0),d0
000126A4 0828 0000 0022             		btst	#0,obStatus(a0)
000126AA 6700                       		beq.s	@loc_10520
000126AC 4440                       		neg.w	d0
000126AE                            
000126AE                            @loc_10520:
000126AE 3228 0030                  		move.w	fb_origY(a0),d1
000126B2 D240                       		add.w	d0,d1
000126B4 3141 000C                  		move.w	d1,obY(a0)
000126B8 4E75                       		rts	
000126BA                            ; ===========================================================================
000126BA                            
000126BA                            @loc_1052C:
000126BA 5328 0028                  		subq.b	#1,obSubtype(a0)
000126BE 4228 0038                  		clr.b	$38(a0)
000126C2 45F8 FC00                  		lea	(v_objstate).w,a2
000126C6 7000                       		moveq	#0,d0
000126C8 1028 0023                  		move.b	obRespawnNo(a0),d0
000126CC 67D2                       		beq.s	@loc_10512
000126CE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000126D4 60CA                       		bra.s	@loc_10512
000126D6                            ; ===========================================================================
000126D6                            
000126D6                            @type07:
000126D6 4A28 0038                  		tst.b	$38(a0)
000126DA 6600                       		bne.s	@loc_1055E
000126DC 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
000126E0 6700                       		beq.s	@locret_10578
000126E2 117C 0001 0038             		move.b	#1,$38(a0)
000126E8 4268 003A                  		clr.w	fb_height(a0)
000126EC                            
000126EC                            @loc_1055E:
000126EC 5268 0008                  		addq.w	#1,obX(a0)
000126F0 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126F6 5268 003A                  		addq.w	#1,fb_height(a0)
000126FA 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012700 6600                       		bne.s	@locret_10578
00012702 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012708 4228 0038                  			clr.b	$38(a0)
0001270C 4228 0028                  		clr.b	obSubtype(a0)
00012710                            
00012710                            @locret_10578:
00012710 4E75                       		rts	
00012712                            ; ===========================================================================
00012712                            
00012712                            @type0C:
00012712 4A28 0038                  		tst.b	$38(a0)
00012716 6600                       		bne.s	@loc_10598
00012718 45F8 F7E0                  		lea	(f_switch).w,a2
0001271C 7000                       		moveq	#0,d0
0001271E 1028 003C                  		move.b	fb_type(a0),d0
00012722 0832 0000 0000             		btst	#0,(a2,d0.w)
00012728 6700                       		beq.s	@loc_105A2
0001272A 117C 0001 0038             		move.b	#1,$38(a0)
00012730                            
00012730                            @loc_10598:
00012730 4A68 003A                  		tst.w	fb_height(a0)
00012734 6700                       		beq.s	@loc_105C0
00012736 5568 003A                  		subq.w	#2,fb_height(a0)
0001273A                            
0001273A                            @loc_105A2:
0001273A 3028 003A                  		move.w	fb_height(a0),d0
0001273E 0828 0000 0022             		btst	#0,obStatus(a0)
00012744 6700                       		beq.s	@loc_105B4
00012746 4440                       		neg.w	d0
00012748 0640 0080                  		addi.w	#$80,d0
0001274C                            
0001274C                            @loc_105B4:
0001274C 3228 0034                  		move.w	fb_origX(a0),d1
00012750 D240                       		add.w	d0,d1
00012752 3141 0008                  		move.w	d1,obX(a0)
00012756 4E75                       		rts	
00012758                            ; ===========================================================================
00012758                            
00012758                            @loc_105C0:
00012758 5228 0028                  		addq.b	#1,obSubtype(a0)
0001275C 4228 0038                  		clr.b	$38(a0)
00012760 45F8 FC00                  		lea	(v_objstate).w,a2
00012764 7000                       		moveq	#0,d0
00012766 1028 0023                  		move.b	obRespawnNo(a0),d0
0001276A 67CE                       		beq.s	@loc_105A2
0001276C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012772 60C6                       		bra.s	@loc_105A2
00012774                            ; ===========================================================================
00012774                            
00012774                            @type0D:
00012774 4A28 0038                  		tst.b	$38(a0)
00012778 6600                       		bne.s	@loc_105F8
0001277A 45F8 F7E0                  		lea	(f_switch).w,a2
0001277E 7000                       		moveq	#0,d0
00012780 1028 003C                  		move.b	fb_type(a0),d0
00012784 4A32 0000                  		tst.b	(a2,d0.w)
00012788 6A00                       		bpl.s	@wtf
0001278A 117C 0001 0038             		move.b	#1,$38(a0)
00012790                            
00012790                            @loc_105F8:
00012790 303C 0080                  		move.w	#$80,d0
00012794 B068 003A                  		cmp.w	fb_height(a0),d0
00012798 6700                       		beq.s	@loc_10624
0001279A 5468 003A                  		addq.w	#2,fb_height(a0)
0001279E                            
0001279E                            @wtf:
0001279E 3028 003A                  		move.w	fb_height(a0),d0
000127A2 0828 0000 0022             		btst	#0,obStatus(a0)
000127A8 6700                       		beq.s	@loc_10618
000127AA 4440                       		neg.w	d0
000127AC 0640 0080                  		addi.w	#$80,d0
000127B0                            
000127B0                            @loc_10618:
000127B0 3228 0034                  		move.w	fb_origX(a0),d1
000127B4 D240                       		add.w	d0,d1
000127B6 3141 0008                  		move.w	d1,obX(a0)
000127BA 4E75                       		rts	
000127BC                            ; ===========================================================================
000127BC                            
000127BC                            @loc_10624:
000127BC 5328 0028                  		subq.b	#1,obSubtype(a0)
000127C0 4228 0038                  		clr.b	$38(a0)
000127C4 45F8 FC00                  		lea	(v_objstate).w,a2
000127C8 7000                       		moveq	#0,d0
000127CA 1028 0023                  		move.b	obRespawnNo(a0),d0
000127CE 67CE                       		beq.s	@wtf
000127D0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000127D6 60C6                       		bra.s	@wtf
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            @type08:
000127D8 323C 0010                  		move.w	#$10,d1
000127DC 7000                       		moveq	#0,d0
000127DE 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
000127E2 E248                       		lsr.w	#1,d0
000127E4 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
000127E8 6000                       		bra.s	@square
000127EA                            ; ===========================================================================
000127EA                            
000127EA                            @type09:
000127EA 323C 0030                  		move.w	#$30,d1
000127EE 7000                       		moveq	#0,d0
000127F0 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
000127F4 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
000127F8 6000                       		bra.s	@square
000127FA                            ; ===========================================================================
000127FA                            
000127FA                            @type0A:
000127FA 323C 0050                  		move.w	#$50,d1
000127FE 7000                       		moveq	#0,d0
00012800 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012804 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012808 6000                       		bra.s	@square
0001280A                            ; ===========================================================================
0001280A                            
0001280A                            @type0B:
0001280A 323C 0070                  		move.w	#$70,d1
0001280E 7000                       		moveq	#0,d0
00012810 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012814 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012818                            
00012818                            @square:
00012818 4A43                       		tst.w	d3
0001281A 6600                       		bne.s	@loc_1068E
0001281C 5228 0022                  		addq.b	#1,obStatus(a0)
00012820 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012826                            
00012826                            @loc_1068E:
00012826 1428 0022                  		move.b	obStatus(a0),d2
0001282A 0202 0003                  		andi.b	#3,d2
0001282E 6600                       		bne.s	@loc_106AE
00012830 9041                       		sub.w	d1,d0
00012832 D068 0034                  		add.w	fb_origX(a0),d0
00012836 3140 0008                  		move.w	d0,obX(a0)
0001283A 4441                       		neg.w	d1
0001283C D268 0030                  		add.w	fb_origY(a0),d1
00012840 3141 000C                  		move.w	d1,obY(a0)
00012844 4E75                       		rts	
00012846                            ; ===========================================================================
00012846                            
00012846                            @loc_106AE:
00012846 5302                       		subq.b	#1,d2
00012848 6600                       		bne.s	@loc_106CC
0001284A 5341                       		subq.w	#1,d1
0001284C 9041                       		sub.w	d1,d0
0001284E 4440                       		neg.w	d0
00012850 D068 0030                  		add.w	fb_origY(a0),d0
00012854 3140 000C                  		move.w	d0,obY(a0)
00012858 5241                       		addq.w	#1,d1
0001285A D268 0034                  		add.w	fb_origX(a0),d1
0001285E 3141 0008                  		move.w	d1,obX(a0)
00012862 4E75                       		rts	
00012864                            ; ===========================================================================
00012864                            
00012864                            @loc_106CC:
00012864 5302                       		subq.b	#1,d2
00012866 6600                       		bne.s	@loc_106EA
00012868 5341                       		subq.w	#1,d1
0001286A 9041                       		sub.w	d1,d0
0001286C 4440                       		neg.w	d0
0001286E D068 0034                  		add.w	fb_origX(a0),d0
00012872 3140 0008                  		move.w	d0,obX(a0)
00012876 5241                       		addq.w	#1,d1
00012878 D268 0030                  		add.w	fb_origY(a0),d1
0001287C 3141 000C                  		move.w	d1,obY(a0)
00012880 4E75                       		rts	
00012882                            ; ===========================================================================
00012882                            
00012882                            @loc_106EA:
00012882 9041                       		sub.w	d1,d0
00012884 D068 0030                  		add.w	fb_origY(a0),d0
00012888 3140 000C                  		move.w	d0,obY(a0)
0001288C 4441                       		neg.w	d1
0001288E D268 0034                  		add.w	fb_origX(a0),d1
00012892 3141 0008                  		move.w	d1,obX(a0)
00012896 4E75                       		rts	
00012896 4E75                       		rts	
00012898                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012898                            ; ---------------------------------------------------------------------------
00012898                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012898                            ; ---------------------------------------------------------------------------
00012898                            Map_FBlock_internal:
00012898 0000                       		dc.w @syz1x1-Map_FBlock_internal
0001289A 0000                       		dc.w @syz2x2-Map_FBlock_internal
0001289C 0000                       		dc.w @syz1x2-Map_FBlock_internal
0001289E 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
000128A0 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
000128A2 0000                       		dc.w @slz-Map_FBlock_internal
000128A4 0000                       		dc.w @lzvert-Map_FBlock_internal
000128A6 0000                       		dc.w @lzhoriz-Map_FBlock_internal
000128A8 01                         @syz1x1:	dc.b 1
000128A9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
000128AE 04                         @syz2x2:	dc.b 4
000128AF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
000128B4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000128B9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000128BE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000128C3 02                         @syz1x2:	dc.b 2
000128C4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
000128C9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000128CE 04                         @syzrect2x2:	dc.b 4
000128CF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
000128D4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000128D9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000128DE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000128E3 03                         @syzrect1x3:	dc.b 3
000128E4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
000128E9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000128EE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000128F3 01                         @slz:		dc.b 1
000128F4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
000128F9 02                         @lzvert:	dc.b 2
000128FA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
000128FF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012904 04                         @lzhoriz:	dc.b 4
00012905 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
0001290A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001290F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012914 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001291A 00                         		even
0001291A 00                         		even
0001291A                            
0001291A                            		include	"_incObj\57 Spiked Ball and Chain.asm"
0001291A                            ; ---------------------------------------------------------------------------
0001291A                            ; Object 57 - spiked balls (SYZ, LZ)
0001291A                            ; ---------------------------------------------------------------------------
0001291A                            
0001291A                            SpikeBall:
0001291A 7000                       		moveq	#0,d0
0001291C 1028 0024                  		move.b	obRoutine(a0),d0
00012920 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012924 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012928                            ; ===========================================================================
00012928 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
0001292A 0000                       		dc.w SBall_Move-SBall_Index
0001292C 0000                       		dc.w SBall_Display-SBall_Index
0001292E                            
0001292E =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
0001292E                            		; $30-$37	; object RAM numbers of childs (1 byte each)
0001292E =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
0001292E =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
0001292E =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
0001292E =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
0001292E                            ; ===========================================================================
0001292E                            
0001292E                            SBall_Main:	; Routine 0
0001292E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012932 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
0001293A 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012940 117C 0004 0001             		move.b	#4,obRender(a0)
00012946 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001294C 117C 0008 0014             		move.b	#8,obActWid(a0)
00012952 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012958 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
0001295E 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012964 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001296A 6600                       		bne.s	@notlz
0001296C                            
0001296C 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012972 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012978 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012980                            
00012980                            	@notlz:
00012980 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012984 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012988 4881                       		ext.w	d1
0001298A E741                       		asl.w	#3,d1		; multiply by 8
0001298C 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012990 1028 0022                  		move.b	obStatus(a0),d0
00012994 E418                       		ror.b	#2,d0
00012996 0200 00C0                  		andi.b	#$C0,d0
0001299A 1140 0026                  		move.b	d0,obAngle(a0)
0001299E 45E8 0029                  		lea	sball_childs(a0),a2
000129A2 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000129A6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000129AA 14FC 0000                  		move.b	#0,(a2)+
000129AE 3601                       		move.w	d1,d3
000129B0 E94B                       		lsl.w	#4,d3
000129B2 1143 003C                  		move.b	d3,sball_radius(a0)
000129B6 5341                       		subq.w	#1,d1		; set chain length (type-1)
000129B8 6500                       		bcs.s	@fail
000129BA 0828 0003 0028             		btst	#3,obSubtype(a0)
000129C0 6700                       		beq.s	@makechain
000129C2 5341                       		subq.w	#1,d1
000129C4 6500                       		bcs.s	@fail
000129C6                            
000129C6                            @makechain:
000129C6 6100 D1C2                  		bsr.w	FindFreeObj
000129CA 6600                       		bne.s	@fail
000129CC 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
000129D0 3A09                       		move.w	a1,d5		; get child object RAM address
000129D2 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
000129D6 EC4D                       		lsr.w	#6,d5		; divide by $40
000129D8 0245 007F                  		andi.w	#$7F,d5
000129DC 14C5                       		move.b	d5,(a2)+	; copy child RAM number
000129DE 137C 0004 0024             		move.b	#4,obRoutine(a1)
000129E4 1290                       		move.b	0(a0),0(a1)
000129E6 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000129EC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000129F2 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000129F8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
000129FE 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012A04 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012A0A 0403 0010                  		subi.b	#$10,d3
00012A0E 1343 003C                  		move.b	d3,sball_radius(a1)
00012A12 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A18 6600                       		bne.s	@notlzagain
00012A1A                            
00012A1A 4A03                       		tst.b	d3
00012A1C 6600                       		bne.s	@notlzagain
00012A1E 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012A24                            
00012A24                            	@notlzagain:
00012A24 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012A28                            
00012A28                            	@fail:
00012A28 3A08                       		move.w	a0,d5
00012A2A 0445 D000                  		subi.w	#$D000,d5
00012A2E EC4D                       		lsr.w	#6,d5
00012A30 0245 007F                  		andi.w	#$7F,d5
00012A34 14C5                       		move.b	d5,(a2)+
00012A36 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A3C 6600                       		bne.s	SBall_Move
00012A3E                            
00012A3E 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012A44 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012A4A                            
00012A4A                            SBall_Move:	; Routine 2
00012A4A 6100 0000                  		bsr.w	@movesub
00012A4E 6000 0000                  		bra.w	@chkdel
00012A52                            ; ===========================================================================
00012A52                            
00012A52                            @movesub:
00012A52 3028 003E                  		move.w	sball_speed(a0),d0
00012A56 D168 0026                  		add.w	d0,obAngle(a0)
00012A5A 1028 0026                  		move.b	obAngle(a0),d0
00012A5E 4EB9 0000 37AE             		jsr	(CalcSine).l
00012A64 3428 0038                  		move.w	sball_origY(a0),d2
00012A68 3628 003A                  		move.w	sball_origX(a0),d3
00012A6C 45E8 0029                  		lea	sball_childs(a0),a2
00012A70 7C00                       		moveq	#0,d6
00012A72 1C1A                       		move.b	(a2)+,d6
00012A74                            
00012A74                            	@loop:
00012A74 7800                       		moveq	#0,d4
00012A76 181A                       		move.b	(a2)+,d4
00012A78 ED4C                       		lsl.w	#6,d4
00012A7A 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012A80 2244                       		movea.l	d4,a1
00012A82 7800                       		moveq	#0,d4
00012A84 1829 003C                  		move.b	sball_radius(a1),d4
00012A88 2A04                       		move.l	d4,d5
00012A8A C9C0                       		muls.w	d0,d4
00012A8C E084                       		asr.l	#8,d4
00012A8E CBC1                       		muls.w	d1,d5
00012A90 E085                       		asr.l	#8,d5
00012A92 D842                       		add.w	d2,d4
00012A94 DA43                       		add.w	d3,d5
00012A96 3344 000C                  		move.w	d4,obY(a1)
00012A9A 3345 0008                  		move.w	d5,obX(a1)
00012A9E 51CE FFD4                  		dbf	d6,@loop
00012AA2 4E75                       		rts	
00012AA4                            ; ===========================================================================
00012AA4                            
00012AA4                            @chkdel:
00012AC2 6000 CC3A                  		bra.w	DisplaySprite
00012AC6                            ; ===========================================================================
00012AC6                            
00012AC6                            @delete:
00012AC6 7400                       		moveq	#0,d2
00012AC8 45E8 0029                  		lea	sball_childs(a0),a2
00012ACC 141A                       		move.b	(a2)+,d2
00012ACE                            
00012ACE                            	@deleteloop:
00012ACE 7000                       		moveq	#0,d0
00012AD0 101A                       		move.b	(a2)+,d0
00012AD2 ED48                       		lsl.w	#6,d0
00012AD4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012ADA 2240                       		movea.l	d0,a1
00012ADC 6100 CC62                  		bsr.w	DeleteChild
00012AE0 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012AE4                            
00012AE4 4E75                       		rts	
00012AE6                            ; ===========================================================================
00012AE6                            
00012AE6                            SBall_Display:	; Routine 4
00012AE6 6000 CC16                  		bra.w	DisplaySprite
00012AE6 6000 CC16                  		bra.w	DisplaySprite
00012AEA                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012AEA                            ; ---------------------------------------------------------------------------
00012AEA                            ; Sprite mappings - chain of spiked balls (SYZ)
00012AEA                            ; ---------------------------------------------------------------------------
00012AEA                            Map_SBall_internal:
00012AEA 0000                       		dc.w @0-Map_SBall_internal
00012AEC 01                         @0:		dc.b 1
00012AED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012AF2                            		even
00012AF2                            		even
00012AF2                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2                            Map_SBall2_internal:
00012AF2 0000                       		dc.w @chain-Map_SBall2_internal
00012AF4 0000                       		dc.w @spikeball-Map_SBall2_internal
00012AF6 0000                       		dc.w @base-Map_SBall2_internal
00012AF8 01                         @chain:		dc.b 1
00012AF9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012AFE 01                         @spikeball:	dc.b 1
00012AFF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012B04 01                         @base:		dc.b 1
00012B05 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012B0A                            		even
00012B0A                            		even
00012B0A                            		include	"_incObj\58 Big Spiked Ball.asm"
00012B0A                            ; ---------------------------------------------------------------------------
00012B0A                            ; Object 58 - giant spiked balls (SYZ)
00012B0A                            ; ---------------------------------------------------------------------------
00012B0A                            
00012B0A                            BigSpikeBall:
00012B0A 7000                       		moveq	#0,d0
00012B0C 1028 0024                  		move.b	obRoutine(a0),d0
00012B10 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012B14 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012B18                            ; ===========================================================================
00012B18 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012B1A 0000                       		dc.w BBall_Move-BBall_Index
00012B1C                            
00012B1C =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012B1C =00000038                  bball_origY:	equ $38		; original y-axis position
00012B1C =0000003C                  bball_radius:	equ $3C		; radius of circle
00012B1C =0000003E                  bball_speed:	equ $3E		; speed
00012B1C                            ; ===========================================================================
00012B1C                            
00012B1C                            BBall_Main:	; Routine 0
00012B1C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B20 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012B28 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012B2E 117C 0004 0001             		move.b	#4,obRender(a0)
00012B34 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B3A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012B40 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012B46 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012B4C 117C 0086 0020             		move.b	#$86,obColType(a0)
00012B52 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B56 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012B5A 4881                       		ext.w	d1
00012B5C E741                       		asl.w	#3,d1		; multiply by 8
00012B5E 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012B62 1028 0022                  		move.b	obStatus(a0),d0
00012B66 E418                       		ror.b	#2,d0
00012B68 0200 00C0                  		andi.b	#$C0,d0
00012B6C 1140 0026                  		move.b	d0,obAngle(a0)
00012B70 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012B76                            
00012B76                            BBall_Move:	; Routine 2
00012B76 7000                       		moveq	#0,d0
00012B78 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012B7C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012B80 D040                       		add.w	d0,d0
00012B82 323B 0000                  		move.w	@index(pc,d0.w),d1
00012B86 4EBB 1000                  		jsr	@index(pc,d1.w)
00012BA8 6000 CB54                  		bra.w	DisplaySprite
00012BAC                            ; ===========================================================================
00012BAC 0000                       @index:		dc.w @type00-@index
00012BAE 0000                       		dc.w @type01-@index
00012BB0 0000                       		dc.w @type02-@index
00012BB2 0000                       		dc.w @type03-@index
00012BB4                            ; ===========================================================================
00012BB4                            
00012BB4                            @type00:
00012BB4 4E75                       		rts	
00012BB6                            ; ===========================================================================
00012BB6                            
00012BB6                            @type01:
00012BB6 323C 0060                  		move.w	#$60,d1
00012BBA 7000                       		moveq	#0,d0
00012BBC 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012BC0 0828 0000 0022             		btst	#0,obStatus(a0)
00012BC6 6700                       		beq.s	@noflip1
00012BC8 4440                       		neg.w	d0
00012BCA D041                       		add.w	d1,d0
00012BCC                            
00012BCC                            	@noflip1:
00012BCC 3228 003A                  		move.w	bball_origX(a0),d1
00012BD0 9240                       		sub.w	d0,d1
00012BD2 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012BD6 4E75                       		rts	
00012BD8                            ; ===========================================================================
00012BD8                            
00012BD8                            @type02:
00012BD8 323C 0060                  		move.w	#$60,d1
00012BDC 7000                       		moveq	#0,d0
00012BDE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012BE2 0828 0000 0022             		btst	#0,obStatus(a0)
00012BE8 6700                       		beq.s	@noflip2
00012BEA 4440                       		neg.w	d0
00012BEC 0640 0080                  		addi.w	#$80,d0
00012BF0                            
00012BF0                            	@noflip2:
00012BF0 3228 0038                  		move.w	bball_origY(a0),d1
00012BF4 9240                       		sub.w	d0,d1
00012BF6 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012BFA 4E75                       		rts	
00012BFC                            ; ===========================================================================
00012BFC                            
00012BFC                            @type03:
00012BFC 3028 003E                  		move.w	bball_speed(a0),d0
00012C00 D168 0026                  		add.w	d0,obAngle(a0)
00012C04 1028 0026                  		move.b	obAngle(a0),d0
00012C08 4EB9 0000 37AE             		jsr	(CalcSine).l
00012C0E 3428 0038                  		move.w	bball_origY(a0),d2
00012C12 3628 003A                  		move.w	bball_origX(a0),d3
00012C16 7800                       		moveq	#0,d4
00012C18 1828 003C                  		move.b	bball_radius(a0),d4
00012C1C 2A04                       		move.l	d4,d5
00012C1E C9C0                       		muls.w	d0,d4
00012C20 E084                       		asr.l	#8,d4
00012C22 CBC1                       		muls.w	d1,d5
00012C24 E085                       		asr.l	#8,d5
00012C26 D842                       		add.w	d2,d4
00012C28 DA43                       		add.w	d3,d5
00012C2A 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012C2E 3145 0008                  		move.w	d5,obX(a0)
00012C32 4E75                       		rts	
00012C32 4E75                       		rts	
00012C34                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012C34                            ; --------------------------------------------------------------------------------
00012C34                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012C34                            ; --------------------------------------------------------------------------------
00012C34                            
00012C34                            SME_u_DKx:	
00012C34 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012C38 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012C3A 05                         SME_u_DKx_6:	dc.b 5	
00012C3B E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012C40 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012C45 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012C4A F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012C4F 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012C54 01                         SME_u_DKx_20:	dc.b 1	
00012C55 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012C5A 02                         SME_u_DKx_26:	dc.b 2	
00012C5B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012C60 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012C66 00                         		even
00012C66 00                         		even
00012C66                            		include	"_incObj\59 SLZ Elevators.asm"
00012C66                            ; ---------------------------------------------------------------------------
00012C66                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012C66                            ; ---------------------------------------------------------------------------
00012C66                            
00012C66                            Elevator:
00012C66 7000                       		moveq	#0,d0
00012C68 1028 0024                  		move.b	obRoutine(a0),d0
00012C6C 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012C70 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012C92 6000 CA6A                  		bra.w	DisplaySprite
00012C96                            ; ===========================================================================
00012C96 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012C98 0000                       		dc.w Elev_Platform-Elev_Index
00012C9A 0000                       		dc.w Elev_Action-Elev_Index
00012C9C 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012C9E                            
00012C9E =00000032                  elev_origX:	equ $32		; original x-axis position
00012C9E =00000030                  elev_origY:	equ $30		; original y-axis position
00012C9E =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012C9E                            
00012C9E 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012CA0                            
00012CA0 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012CA2 2001                       		dc.b $20, 1
00012CA4 3401                       		dc.b $34, 1
00012CA6 1003                       		dc.b $10, 3
00012CA8 2003                       		dc.b $20, 3
00012CAA 3403                       		dc.b $34, 3
00012CAC 1401                       		dc.b $14, 1
00012CAE 2401                       		dc.b $24, 1
00012CB0 2C01                       		dc.b $2C, 1
00012CB2 1403                       		dc.b $14, 3
00012CB4 2403                       		dc.b $24, 3
00012CB6 2C03                       		dc.b $2C, 3
00012CB8 2005                       		dc.b $20, 5
00012CBA 2007                       		dc.b $20, 7
00012CBC 3009                       		dc.b $30, 9
00012CBE                            ; ===========================================================================
00012CBE                            
00012CBE                            Elev_Main:	; Routine 0
00012CBE 5428 0024                  		addq.b	#2,obRoutine(a0)
00012CC2 7000                       		moveq	#0,d0
00012CC4 1028 0028                  		move.b	obSubtype(a0),d0
00012CC8 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012CCA 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012CCE 0240 007F                  		andi.w	#$7F,d0
00012CD2 C0FC 0006                  		mulu.w	#6,d0
00012CD6 3140 003C                  		move.w	d0,elev_dist(a0)
00012CDA 3140 003E                  		move.w	d0,$3E(a0)
00012CDE 588F                       		addq.l	#4,sp
00012CE0 4E75                       		rts	
00012CE2                            ; ===========================================================================
00012CE2                            
00012CE2                            	@normal:
00012CE2 E648                       		lsr.w	#3,d0
00012CE4 0240 001E                  		andi.w	#$1E,d0
00012CE8 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012CEC 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012CF0 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012CF4 7000                       		moveq	#0,d0
00012CF6 1028 0028                  		move.b	obSubtype(a0),d0
00012CFA D040                       		add.w	d0,d0
00012CFC 0240 001E                  		andi.w	#$1E,d0
00012D00 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012D04 101A                       		move.b	(a2)+,d0
00012D06 E548                       		lsl.w	#2,d0
00012D08 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012D0C 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012D10 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012D18 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012D1E 117C 0004 0001             		move.b	#4,obRender(a0)
00012D24 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D2A 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012D30 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012D36                            
00012D36                            Elev_Platform:	; Routine 2
00012D36 7200                       		moveq	#0,d1
00012D38 1228 0014                  		move.b	obActWid(a0),d1
00012D3C 4EB9 0000 8E0C             		jsr	(PlatformObject).l
00012D42 6000 0000                  		bra.w	Elev_Types
00012D46                            ; ===========================================================================
00012D46                            
00012D46                            Elev_Action:	; Routine 4
00012D46 7200                       		moveq	#0,d1
00012D48 1228 0014                  		move.b	obActWid(a0),d1
00012D4C 4EB9 0000 8F80             		jsr	(ExitPlatform).l
00012D52 3F28 0008                  		move.w	obX(a0),-(sp)
00012D56 6100 0000                  		bsr.w	Elev_Types
00012D5A 341F                       		move.w	(sp)+,d2
00012D5C 4A10                       		tst.b	0(a0)
00012D5E 6700                       		beq.s	@deleted
00012D60 4EF9 0000 94EA             		jmp	(MvSonicOnPtfm2).l
00012D66                            
00012D66                            	@deleted:
00012D66 4E75                       		rts	
00012D68                            ; ===========================================================================
00012D68                            
00012D68                            Elev_Types:
00012D68 7000                       		moveq	#0,d0
00012D6A 1028 0028                  		move.b	obSubtype(a0),d0
00012D6E 0240 000F                  		andi.w	#$F,d0
00012D72 D040                       		add.w	d0,d0
00012D74 323B 0000                  		move.w	@index(pc,d0.w),d1
00012D78 4EFB 1000                  		jmp	@index(pc,d1.w)
00012D7C                            ; ===========================================================================
00012D7C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012D80 0000 0000                  		dc.w @type02-@index, @type01-@index
00012D84 0000 0000                  		dc.w @type04-@index, @type01-@index
00012D88 0000 0000                  		dc.w @type06-@index, @type01-@index
00012D8C 0000 0000                  		dc.w @type08-@index, @type09-@index
00012D90                            ; ===========================================================================
00012D90                            
00012D90                            @type00:
00012D90 4E75                       		rts	
00012D92                            ; ===========================================================================
00012D92                            
00012D92                            @type01:
00012D92 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012D98 6600                       		bne.s	@notstanding
00012D9A 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012D9E                            
00012D9E                            	@notstanding:
00012D9E 4E75                       		rts	
00012DA0                            ; ===========================================================================
00012DA0                            
00012DA0                            @type02:
00012DA0 6100 0000                  		bsr.w	Elev_Move
00012DA4 3028 0034                  		move.w	$34(a0),d0
00012DA8 4440                       		neg.w	d0
00012DAA D068 0030                  		add.w	elev_origY(a0),d0
00012DAE 3140 000C                  		move.w	d0,obY(a0)
00012DB2 4E75                       		rts	
00012DB4                            ; ===========================================================================
00012DB4                            
00012DB4                            @type04:
00012DB4 6100 0000                  		bsr.w	Elev_Move
00012DB8 3028 0034                  		move.w	$34(a0),d0
00012DBC D068 0030                  		add.w	elev_origY(a0),d0
00012DC0 3140 000C                  		move.w	d0,obY(a0)
00012DC4 4E75                       		rts	
00012DC6                            ; ===========================================================================
00012DC6                            
00012DC6                            @type06:
00012DC6 6100 0000                  		bsr.w	Elev_Move
00012DCA 3028 0034                  		move.w	$34(a0),d0
00012DCE E240                       		asr.w	#1,d0
00012DD0 4440                       		neg.w	d0
00012DD2 D068 0030                  		add.w	elev_origY(a0),d0
00012DD6 3140 000C                  		move.w	d0,obY(a0)
00012DDA 3028 0034                  		move.w	$34(a0),d0
00012DDE D068 0032                  		add.w	elev_origX(a0),d0
00012DE2 3140 0008                  		move.w	d0,obX(a0)
00012DE6 4E75                       		rts	
00012DE8                            ; ===========================================================================
00012DE8                            
00012DE8                            @type08:
00012DE8 6100 0000                  		bsr.w	Elev_Move
00012DEC 3028 0034                  		move.w	$34(a0),d0
00012DF0 E240                       		asr.w	#1,d0
00012DF2 D068 0030                  		add.w	elev_origY(a0),d0
00012DF6 3140 000C                  		move.w	d0,obY(a0)
00012DFA 3028 0034                  		move.w	$34(a0),d0
00012DFE 4440                       		neg.w	d0
00012E00 D068 0032                  		add.w	elev_origX(a0),d0
00012E04 3140 0008                  		move.w	d0,obX(a0)
00012E08 4E75                       		rts	
00012E0A                            ; ===========================================================================
00012E0A                            
00012E0A                            @type09:
00012E0A 6100 0000                  		bsr.w	Elev_Move
00012E0E 3028 0034                  		move.w	$34(a0),d0
00012E12 4440                       		neg.w	d0
00012E14 D068 0030                  		add.w	elev_origY(a0),d0
00012E18 3140 000C                  		move.w	d0,obY(a0)
00012E1C 4A28 0028                  		tst.b	obSubtype(a0)
00012E20 6700 0000                  		beq.w	@typereset
00012E24 4E75                       		rts	
00012E26                            ; ===========================================================================
00012E26                            
00012E26                            	@typereset:
00012E26 0828 0003 0022             		btst	#3,obStatus(a0)
00012E2C 6700                       		beq.s	@delete
00012E2E 08E9 0001 0022             		bset	#1,obStatus(a1)
00012E34 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012E3A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012E40                            
00012E40                            	@delete:
00012E40 6000 C8FC                  		bra.w	DeleteObject
00012E44                            
00012E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E44                            
00012E44                            
00012E44                            Elev_Move:
00012E44 3028 0038                  		move.w	$38(a0),d0
00012E48 4A28 003A                  		tst.b	$3A(a0)
00012E4C 6600                       		bne.s	loc_10CC8
00012E4E 0C40 0800                  		cmpi.w	#$800,d0
00012E52 6400                       		bcc.s	loc_10CD0
00012E54 0640 0010                  		addi.w	#$10,d0
00012E58 6000                       		bra.s	loc_10CD0
00012E5A                            ; ===========================================================================
00012E5A                            
00012E5A                            loc_10CC8:
00012E5A 4A40                       		tst.w	d0
00012E5C 6700                       		beq.s	loc_10CD0
00012E5E 0440 0010                  		subi.w	#$10,d0
00012E62                            
00012E62                            loc_10CD0:
00012E62 3140 0038                  		move.w	d0,$38(a0)
00012E66 48C0                       		ext.l	d0
00012E68 E180                       		asl.l	#8,d0
00012E6A D0A8 0034                  		add.l	$34(a0),d0
00012E6E 2140 0034                  		move.l	d0,$34(a0)
00012E72 4840                       		swap	d0
00012E74 3428 003C                  		move.w	elev_dist(a0),d2
00012E78 B042                       		cmp.w	d2,d0
00012E7A 6300                       		bls.s	loc_10CF0
00012E7C 117C 0001 003A             		move.b	#1,$3A(a0)
00012E82                            
00012E82                            loc_10CF0:
00012E82 D442                       		add.w	d2,d2
00012E84 B042                       		cmp.w	d2,d0
00012E86 6600                       		bne.s	locret_10CFA
00012E88 4228 0028                  		clr.b	obSubtype(a0)
00012E8C                            
00012E8C                            locret_10CFA:
00012E8C 4E75                       		rts	
00012E8E                            ; End of function Elev_Move
00012E8E                            
00012E8E                            ; ===========================================================================
00012E8E                            
00012E8E                            Elev_MakeMulti:	; Routine 6
00012E8E 5368 003C                  		subq.w	#1,elev_dist(a0)
00012E92 6600                       		bne.s	@chkdel
00012E94 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012E9A 6100 CCEE                  		bsr.w	FindFreeObj
00012E9E 6600                       		bne.s	@chkdel
00012EA0 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012EA4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012EAA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012EB0 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012EB6                            
00012EB6                            @chkdel:
00012EB6 588F                       		addq.l	#4,sp
00012ED6 4E75                       		rts	
00012ED6 4E75                       		rts	
00012ED8                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012ED8                            ; ---------------------------------------------------------------------------
00012ED8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012ED8                            ; ---------------------------------------------------------------------------
00012ED8                            Map_Elev_internal:
00012ED8 0000                       		dc.w @elevator-Map_Elev_internal
00012EDA 03                         @elevator:	dc.b 3
00012EDB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012EE0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012EE5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012EEA                            		even
00012EEA                            		even
00012EEA                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012EEA                            ; ---------------------------------------------------------------------------
00012EEA                            ; Object 5A - platforms	moving in circles (SLZ)
00012EEA                            ; ---------------------------------------------------------------------------
00012EEA                            
00012EEA                            CirclingPlatform:
00012EEA 7000                       		moveq	#0,d0
00012EEC 1028 0024                  		move.b	obRoutine(a0),d0
00012EF0 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012EF4 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012F16 6000 C7E6                  		bra.w	DisplaySprite
00012F1A                            ; ===========================================================================
00012F1A 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012F1C 0000                       		dc.w Circ_Platform-Circ_Index
00012F1E 0000                       		dc.w Circ_Action-Circ_Index
00012F20                            
00012F20 =00000032                  circ_origX:	equ $32		; original x-axis position
00012F20 =00000030                  circ_origY:	equ $30		; original y-axis position
00012F20                            ; ===========================================================================
00012F20                            
00012F20                            Circ_Main:	; Routine 0
00012F20 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F24 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012F2C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F32 117C 0004 0001             		move.b	#4,obRender(a0)
00012F38 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F3E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012F44 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012F4A 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012F50                            
00012F50                            Circ_Platform:	; Routine 2
00012F50 7200                       		moveq	#0,d1
00012F52 1228 0014                  		move.b	obActWid(a0),d1
00012F56 4EB9 0000 8E0C             		jsr	(PlatformObject).l
00012F5C 6000 0000                  		bra.w	Circ_Types
00012F60                            ; ===========================================================================
00012F60                            
00012F60                            Circ_Action:	; Routine 4
00012F60 7200                       		moveq	#0,d1
00012F62 1228 0014                  		move.b	obActWid(a0),d1
00012F66 4EB9 0000 8F80             		jsr	(ExitPlatform).l
00012F6C 3F28 0008                  		move.w	obX(a0),-(sp)
00012F70 6100 0000                  		bsr.w	Circ_Types
00012F74 341F                       		move.w	(sp)+,d2
00012F76 4EF9 0000 94EA             		jmp	(MvSonicOnPtfm2).l
00012F7C                            ; ===========================================================================
00012F7C                            
00012F7C                            Circ_Types:
00012F7C 7000                       		moveq	#0,d0
00012F7E 1028 0028                  		move.b	obSubtype(a0),d0
00012F82 0240 000C                  		andi.w	#$C,d0
00012F86 E248                       		lsr.w	#1,d0
00012F88 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F8C 4EFB 1000                  		jmp	@index(pc,d1.w)
00012F90                            ; ===========================================================================
00012F90 0000                       @index:		dc.w @type00-@index
00012F92 0000                       		dc.w @type04-@index
00012F94                            ; ===========================================================================
00012F94                            
00012F94                            @type00:
00012F94 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012F98 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012F9C 4881                       		ext.w	d1
00012F9E 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012FA2 0402 0050                  		subi.b	#$50,d2
00012FA6 4882                       		ext.w	d2
00012FA8 0828 0000 0028             		btst	#0,obSubtype(a0)
00012FAE 6700                       		beq.s	@noshift00a
00012FB0 4441                       		neg.w	d1
00012FB2 4442                       		neg.w	d2
00012FB4                            
00012FB4                            	@noshift00a:
00012FB4 0828 0001 0028             		btst	#1,obSubtype(a0)
00012FBA 6700                       		beq.s	@noshift00b
00012FBC 4441                       		neg.w	d1
00012FBE C342                       		exg	d1,d2
00012FC0                            
00012FC0                            	@noshift00b:
00012FC0 D268 0032                  		add.w	circ_origX(a0),d1
00012FC4 3141 0008                  		move.w	d1,obX(a0)
00012FC8 D468 0030                  		add.w	circ_origY(a0),d2
00012FCC 3142 000C                  		move.w	d2,obY(a0)
00012FD0 4E75                       		rts	
00012FD2                            ; ===========================================================================
00012FD2                            
00012FD2                            @type04:
00012FD2 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00012FD6 0401 0050                  		subi.b	#$50,d1
00012FDA 4881                       		ext.w	d1
00012FDC 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012FE0 0402 0050                  		subi.b	#$50,d2
00012FE4 4882                       		ext.w	d2
00012FE6 0828 0000 0028             		btst	#0,obSubtype(a0)
00012FEC 6700                       		beq.s	@noshift04a
00012FEE 4441                       		neg.w	d1
00012FF0 4442                       		neg.w	d2
00012FF2                            
00012FF2                            	@noshift04a:
00012FF2 0828 0001 0028             		btst	#1,obSubtype(a0)
00012FF8 6700                       		beq.s	@noshift04b
00012FFA 4441                       		neg.w	d1
00012FFC C342                       		exg	d1,d2
00012FFE                            
00012FFE                            	@noshift04b:
00012FFE 4441                       		neg.w	d1
00013000 D268 0032                  		add.w	circ_origX(a0),d1
00013004 3141 0008                  		move.w	d1,obX(a0)
00013008 D468 0030                  		add.w	circ_origY(a0),d2
0001300C 3142 000C                  		move.w	d2,obY(a0)
00013010 4E75                       		rts	
00013010 4E75                       		rts	
00013012                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00013012                            ; ---------------------------------------------------------------------------
00013012                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013012                            ; ---------------------------------------------------------------------------
00013012                            Map_Circ_internal:
00013012 0000                       		dc.w @platform-Map_Circ_internal
00013014 02                         @platform:	dc.b 2
00013015 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001301A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013020 00                         		even
00013020 00                         		even
00013020                            		include	"_incObj\5B Staircase.asm"
00013020                            ; ---------------------------------------------------------------------------
00013020                            ; Object 5B - blocks that form a staircase (SLZ)
00013020                            ; ---------------------------------------------------------------------------
00013020                            
00013020                            Staircase:
00013020 7000                       		moveq	#0,d0
00013022 1028 0024                  		move.b	obRoutine(a0),d0
00013026 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
0001302A 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
0001304C 6000 C6B0                  		bra.w	DisplaySprite
00013050                            ; ===========================================================================
00013050 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00013052 0000                       		dc.w Stair_Move-Stair_Index
00013054 0000                       		dc.w Stair_Solid-Stair_Index
00013056                            
00013056 =00000030                  stair_origX:	equ $30		; original x-axis position
00013056 =00000032                  stair_origY:	equ $32		; original y-axis position
00013056                            
00013056 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00013056                            ; ===========================================================================
00013056                            
00013056                            Stair_Main:	; Routine 0
00013056 5428 0024                  		addq.b	#2,obRoutine(a0)
0001305A 7638                       		moveq	#$38,d3
0001305C 7801                       		moveq	#1,d4
0001305E 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00013064 6700                       		beq.s	@notflipped	; if not, branch
00013066 763B                       		moveq	#$3B,d3
00013068 78FF                       		moveq	#-1,d4
0001306A                            
0001306A                            	@notflipped:
0001306A 3428 0008                  		move.w	obX(a0),d2
0001306E 2248                       		movea.l	a0,a1
00013070 7203                       		moveq	#3,d1
00013072 6000                       		bra.s	@makeblocks
00013074                            ; ===========================================================================
00013074                            
00013074                            @loop:
00013074 6100 CB2A                  		bsr.w	FindNextFreeObj
00013078 6600 0000                  		bne.w	@fail
0001307C 137C 0004 0024             		move.b	#4,obRoutine(a1)
00013082                            
00013082                            @makeblocks:
00013082 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013086 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001308E 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013094 137C 0004 0001             		move.b	#4,obRender(a1)
0001309A 337C 0180 0018             		move.w	#$180,obPriority(a1)
000130A0 137C 0010 0014             		move.b	#$10,obActWid(a1)
000130A6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000130AC 3342 0008                  		move.w	d2,obX(a1)
000130B0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000130B6 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
000130BC 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
000130C2 0642 0020                  		addi.w	#$20,d2
000130C6 1343 0037                  		move.b	d3,$37(a1)
000130CA 2348 003C                  		move.l	a0,stair_parent(a1)
000130CE D604                       		add.b	d4,d3
000130D0 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
000130D4                            
000130D4                            	@fail:
000130D4                            
000130D4                            Stair_Move:	; Routine 2
000130D4 7000                       		moveq	#0,d0
000130D6 1028 0028                  		move.b	obSubtype(a0),d0
000130DA 0240 0007                  		andi.w	#7,d0
000130DE D040                       		add.w	d0,d0
000130E0 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
000130E4 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
000130E8                            
000130E8                            Stair_Solid:	; Routine 4
000130E8 2468 003C                  		movea.l	stair_parent(a0),a2
000130EC 7000                       		moveq	#0,d0
000130EE 1028 0037                  		move.b	$37(a0),d0
000130F2 1032 0000                  		move.b	(a2,d0.w),d0
000130F6 D068 0032                  		add.w	stair_origY(a0),d0
000130FA 3140 000C                  		move.w	d0,obY(a0)
000130FE 7200                       		moveq	#0,d1
00013100 1228 0014                  		move.b	obActWid(a0),d1
00013104 0641 000B                  		addi.w	#$B,d1
00013108 343C 0010                  		move.w	#$10,d2
0001310C 363C 0011                  		move.w	#$11,d3
00013110 3828 0008                  		move.w	obX(a0),d4
00013114 6100 E9F6                  		bsr.w	SolidObject
00013118 4A04                       		tst.b	d4
0001311A 6A00                       		bpl.s	loc_10F92
0001311C 1544 0036                  		move.b	d4,$36(a2)
00013120                            
00013120                            loc_10F92:
00013120 0828 0003 0022             		btst	#3,obStatus(a0)
00013126 6700                       		beq.s	locret_10FA0
00013128 157C 0001 0036             		move.b	#1,$36(a2)
0001312E                            
0001312E                            locret_10FA0:
0001312E 4E75                       		rts	
00013130                            ; ===========================================================================
00013130 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00013132 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013134 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00013136 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013138                            ; ===========================================================================
00013138                            
00013138                            Stair_Type00:
00013138 4A68 0034                  		tst.w	$34(a0)
0001313C 6600                       		bne.s	loc_10FC0
0001313E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00013144 6600                       		bne.s	locret_10FBE
00013146 317C 001E 0034             		move.w	#$1E,$34(a0)
0001314C                            
0001314C                            locret_10FBE:
0001314C 4E75                       		rts	
0001314E                            ; ===========================================================================
0001314E                            
0001314E                            loc_10FC0:
0001314E 5368 0034                  		subq.w	#1,$34(a0)
00013152 66F8                       		bne.s	locret_10FBE
00013154 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013158 4E75                       		rts	
0001315A                            ; ===========================================================================
0001315A                            
0001315A                            Stair_Type02:
0001315A 4A68 0034                  		tst.w	$34(a0)
0001315E 6600                       		bne.s	loc_10FE0
00013160 4A28 0036                  		tst.b	$36(a0)
00013164 6A00                       		bpl.s	locret_10FDE
00013166 317C 003C 0034             		move.w	#$3C,$34(a0)
0001316C                            
0001316C                            locret_10FDE:
0001316C 4E75                       		rts	
0001316E                            ; ===========================================================================
0001316E                            
0001316E                            loc_10FE0:
0001316E 5368 0034                  		subq.w	#1,$34(a0)
00013172 6600                       		bne.s	loc_10FEC
00013174 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013178 4E75                       		rts	
0001317A                            ; ===========================================================================
0001317A                            
0001317A                            loc_10FEC:
0001317A 43E8 0038                  		lea	$38(a0),a1
0001317E 3028 0034                  		move.w	$34(a0),d0
00013182 E408                       		lsr.b	#2,d0
00013184 0200 0001                  		andi.b	#1,d0
00013188 12C0                       		move.b	d0,(a1)+
0001318A 0A00 0001                  		eori.b	#1,d0
0001318E 12C0                       		move.b	d0,(a1)+
00013190 0A00 0001                  		eori.b	#1,d0
00013194 12C0                       		move.b	d0,(a1)+
00013196 0A00 0001                  		eori.b	#1,d0
0001319A 12C0                       		move.b	d0,(a1)+
0001319C 4E75                       		rts	
0001319E                            ; ===========================================================================
0001319E                            
0001319E                            Stair_Type01:
0001319E 43E8 0038                  		lea	$38(a0),a1
000131A2 0C11 0080                  		cmpi.b	#$80,(a1)
000131A6 6700                       		beq.s	locret_11038
000131A8 5211                       		addq.b	#1,(a1)
000131AA 7200                       		moveq	#0,d1
000131AC 1219                       		move.b	(a1)+,d1
000131AE 4841                       		swap	d1
000131B0 E289                       		lsr.l	#1,d1
000131B2 2401                       		move.l	d1,d2
000131B4 E289                       		lsr.l	#1,d1
000131B6 2601                       		move.l	d1,d3
000131B8 D682                       		add.l	d2,d3
000131BA 4841                       		swap	d1
000131BC 4842                       		swap	d2
000131BE 4843                       		swap	d3
000131C0 12C3                       		move.b	d3,(a1)+
000131C2 12C2                       		move.b	d2,(a1)+
000131C4 12C1                       		move.b	d1,(a1)+
000131C6                            
000131C6                            locret_11038:
000131C6 4E75                       		rts	
000131C8 4E75                       		rts	
000131C8 4E75                       		rts	
000131CA                            Map_Stair:	include	"_maps\Staircase.asm"
000131CA                            ; ---------------------------------------------------------------------------
000131CA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000131CA                            ; ---------------------------------------------------------------------------
000131CA                            Map_Stair_internal:
000131CA 0000                       		dc.w @block-Map_Stair_internal
000131CC 01                         @block:		dc.b 1
000131CD F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000131D2                            		even
000131D2                            		even
000131D2                            		include	"_incObj\5C Pylon.asm"
000131D2                            ; ---------------------------------------------------------------------------
000131D2                            ; Object 5C - metal pylons in foreground (SLZ)
000131D2                            ; ---------------------------------------------------------------------------
000131D2                            
000131D2                            Pylon:
000131D2 7000                       		moveq	#0,d0
000131D4 1028 0024                  		move.b	obRoutine(a0),d0
000131D8 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
000131DC 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
000131E0                            ; ===========================================================================
000131E0 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
000131E2 0000                       		dc.w Pyl_Display-Pyl_Index
000131E4                            ; ===========================================================================
000131E4                            
000131E4                            Pyl_Main:	; Routine 0
000131E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000131E8 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
000131F0 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
000131F6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000131FC                            
000131FC                            Pyl_Display:	; Routine 2
000131FC 2238 F700                  		move.l	(v_screenposx).w,d1
00013200 D281                       		add.l	d1,d1
00013202 4841                       		swap	d1
00013204 4441                       		neg.w	d1
00013206 3141 0008                  		move.w	d1,obX(a0)
0001320A 2238 F704                  		move.l	(v_screenposy).w,d1
0001320E D281                       		add.l	d1,d1
00013210 4841                       		swap	d1
00013212 0241 003F                  		andi.w	#$3F,d1
00013216 4441                       		neg.w	d1
00013218 0641 0100                  		addi.w	#$100,d1
0001321C 3141 000A                  		move.w	d1,obScreenY(a0)
00013220 6000 C4DC                  		bra.w	DisplaySprite
00013220 6000 C4DC                  		bra.w	DisplaySprite
00013224                            Map_Pylon:	include	"_maps\Pylon.asm"
00013224                            ; ---------------------------------------------------------------------------
00013224                            ; Sprite mappings - metal pylons in foreground (SLZ)
00013224                            ; ---------------------------------------------------------------------------
00013224                            Map_Pylon_internal:
00013224 0000                       		dc.w @pylon-Map_Pylon_internal
00013226 09                         @pylon:		dc.b 9
00013227 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001322C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013231 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00013236 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001323B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00013240 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00013245 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001324A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001324F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00013254                            		even
00013254                            		even
00013254                            
00013254                            		include	"_incObj\1B Water Surface.asm"
00013254                            ; ---------------------------------------------------------------------------
00013254                            ; Object 1B - water surface (LZ)
00013254                            ; ---------------------------------------------------------------------------
00013254                            
00013254                            WaterSurface:
00013254 7000                       		moveq	#0,d0
00013256 1028 0024                  		move.b	obRoutine(a0),d0
0001325A 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
0001325E 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
00013262                            ; ===========================================================================
00013262 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
00013264 0000                       		dc.w Surf_Action-Surf_Index
00013266                            
00013266 =00000030                  surf_origX:	equ $30		; original x-axis position
00013266 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
00013266                            ; ===========================================================================
00013266                            
00013266                            Surf_Main:	; Routine 0
00013266 5428 0024                  		addq.b	#2,obRoutine(a0)
0001326A 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
00013272 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013278 117C 0004 0001             		move.b	#4,obRender(a0)
0001327E 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013284 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
0001328A                            
0001328A                            Surf_Action:	; Routine 2
0001328A 3238 F700                  		move.w	(v_screenposx).w,d1
0001328E 0241 FFE0                  		andi.w	#$FFE0,d1
00013292 D268 0030                  		add.w	surf_origX(a0),d1
00013296 0838 0000 FE05             		btst	#0,(v_framebyte).w
0001329C 6700                       		beq.s	@even		; branch on even frames
0001329E 0641 0020                  		addi.w	#$20,d1
000132A2                            
000132A2                            	@even:
000132A2 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000132A6 3238 F646                  		move.w	(v_waterpos1).w,d1
000132AA 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000132AE 4A28 0032                  		tst.b	surf_freeze(a0)
000132B2 6600                       		bne.s	@stopped
000132B4 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000132BA 6700                       		beq.s	@animate	; if not, branch
000132BC 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
000132C0 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
000132C6 6000                       		bra.s	@display
000132C8                            ; ===========================================================================
000132C8                            
000132C8                            @stopped:
000132C8 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000132CC 6600                       		bne.s	@display	; if yes, branch
000132CE 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
000132D4 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
000132D8                            
000132D8                            @animate:
000132D8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000132DC 6A00                       		bpl.s	@display
000132DE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000132E4 5228 001A                  		addq.b	#1,obFrame(a0)
000132E8 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
000132EE 6500                       		bcs.s	@display
000132F0 117C 0000 001A             		move.b	#0,obFrame(a0)
000132F6                            
000132F6                            @display:
000132F6 6000 C406                  		bra.w	DisplaySprite
000132F6 6000 C406                  		bra.w	DisplaySprite
000132FA                            Map_Surf:	include	"_maps\Water Surface.asm"
000132FA                            ; --------------------------------------------------------------------------------
000132FA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000132FA                            ; --------------------------------------------------------------------------------
000132FA                            
000132FA                            SME_LGSi8:	
000132FA 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
000132FE 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013302 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013306 03                         SME_LGSi8_C:	dc.b 3	
00013307 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001330C F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013311 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013316 03                         SME_LGSi8_1C:	dc.b 3	
00013317 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
0001331C F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013321 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013326 03                         SME_LGSi8_2C:	dc.b 3	
00013327 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
0001332C F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013331 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013336 06                         SME_LGSi8_3C:	dc.b 6	
00013337 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001333C F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
00013341 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013346 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
0001334B F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013350 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
00013355 06                         SME_LGSi8_5B:	dc.b 6	
00013356 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
0001335B F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
00013360 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013365 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
0001336A F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001336F F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
00013374 06                         SME_LGSi8_7A:	dc.b 6	
00013375 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
0001337A F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
0001337F F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013384 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013389 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001338E F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013394 00                         		even
00013394 00                         		even
00013394                            		include	"_incObj\0B Pole that Breaks.asm"
00013394                            ; ---------------------------------------------------------------------------
00013394                            ; Object 0B - pole that	breaks (LZ)
00013394                            ; ---------------------------------------------------------------------------
00013394                            
00013394                            Pole:
00013394 7000                       		moveq	#0,d0
00013396 1028 0024                  		move.b	obRoutine(a0),d0
0001339A 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001339E 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
000133A2                            ; ===========================================================================
000133A2 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000133A4 0000                       		dc.w Pole_Action-Pole_Index
000133A6 0000                       		dc.w Pole_Display-Pole_Index
000133A8                            
000133A8 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000133A8 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000133A8                            ; ===========================================================================
000133A8                            
000133A8                            Pole_Main:	; Routine 0
000133A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000133AC 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000133B4 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
000133BA 117C 0004 0001             		move.b	#4,obRender(a0)
000133C0 117C 0008 0014             		move.b	#8,obActWid(a0)
000133C6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000133CC 117C 00E1 0020             		move.b	#$E1,obColType(a0)
000133D2 7000                       		moveq	#0,d0
000133D4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000133D8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000133DC 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
000133E0                            
000133E0                            Pole_Action:	; Routine 2
000133E0 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
000133E4 6700                       		beq.s	@grab		; if not, branch
000133E6 4A68 0030                  		tst.w	pole_time(a0)
000133EA 6700                       		beq.s	@moveup
000133EC 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
000133F0 6600                       		bne.s	@moveup
000133F2 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
000133F8 6000                       		bra.s	@release
000133FA                            ; ===========================================================================
000133FA                            
000133FA                            @moveup:
000133FA 43F8 D000                  		lea	(v_player).w,a1
000133FE 3028 000C                  		move.w	obY(a0),d0
00013402 0440 0018                  		subi.w	#$18,d0
00013406 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
0001340C 6700                       		beq.s	@movedown	; if not, branch
0001340E 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013412 B069 000C                  		cmp.w	obY(a1),d0
00013416 6500                       		bcs.s	@movedown
00013418 3340 000C                  		move.w	d0,obY(a1)
0001341C                            
0001341C                            @movedown:
0001341C 0640 0024                  		addi.w	#$24,d0
00013420 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
00013426 6700                       		beq.s	@letgo		; if not, branch
00013428 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
0001342C B069 000C                  		cmp.w	obY(a1),d0
00013430 6400                       		bcc.s	@letgo
00013432 3340 000C                  		move.w	d0,obY(a1)
00013436                            
00013436                            @letgo:
00013436 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001343A 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
0001343E 6700                       		beq.s	Pole_Display	; if not, branch
00013440                            
00013440                            @release:
00013440 4228 0020                  		clr.b	obColType(a0)
00013444 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013448 4238 F7C8                  		clr.b	(f_lockmulti).w
0001344C 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00013450 4228 0032                  		clr.b	pole_grabbed(a0)
00013454 6000                       		bra.s	Pole_Display
00013456                            ; ===========================================================================
00013456                            
00013456                            @grab:
00013456 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
0001345A 6700                       		beq.s	Pole_Display	; if not, branch
0001345C 43F8 D000                  		lea	(v_player).w,a1
00013460 3028 0008                  		move.w	obX(a0),d0
00013464 0640 0014                  		addi.w	#$14,d0
00013468 B069 0008                  		cmp.w	obX(a1),d0
0001346C 6400                       		bcc.s	Pole_Display
0001346E 4228 0021                  		clr.b	obColProp(a0)
00013472 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013478 6400                       		bcc.s	Pole_Display
0001347A 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
0001347E 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
00013482 3028 0008                  		move.w	obX(a0),d0
00013486 0640 0014                  		addi.w	#$14,d0
0001348A 3340 0008                  		move.w	d0,obX(a1)
0001348E 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013494 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
0001349A 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000134A0 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000134A6 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000134AC                            
000134AC                            Pole_Display:	; Routine 4
000134AC 6000 E1C6                  		bra.w	RememberState
000134AC 6000 E1C6                  		bra.w	RememberState
000134B0                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000134B0                            ; ---------------------------------------------------------------------------
000134B0                            ; Sprite mappings - pole that breaks (LZ)
000134B0                            ; ---------------------------------------------------------------------------
000134B0                            Map_Pole_internal:
000134B0 0000                       		dc.w @normal-Map_Pole_internal
000134B2 0000                       		dc.w @broken-Map_Pole_internal
000134B4 02                         @normal:	dc.b 2			; normal pole
000134B5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000134BA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000134BF 04                         @broken:	dc.b 4			; broken pole
000134C0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000134C5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000134CA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000134CF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000134D4                            		even
000134D4                            		even
000134D4                            		include	"_incObj\0C Flapping Door.asm"
000134D4                            ; ---------------------------------------------------------------------------
000134D4                            ; Object 0C - flapping door (LZ)
000134D4                            ; ---------------------------------------------------------------------------
000134D4                            
000134D4                            FlapDoor:
000134D4 7000                       		moveq	#0,d0
000134D6 1028 0024                  		move.b	obRoutine(a0),d0
000134DA 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
000134DE 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
000134E2                            ; ===========================================================================
000134E2 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
000134E4 0000                       		dc.w Flap_OpenClose-Flap_Index
000134E6                            
000134E6 =00000032                  flap_time:	equ $32		; time between opening/closing
000134E6 =00000030                  flap_wait:	equ $30		; time until change
000134E6                            ; ===========================================================================
000134E6                            
000134E6                            Flap_Main:	; Routine 0
000134E6 5428 0024                  		addq.b	#2,obRoutine(a0)
000134EA 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
000134F2 317C 4328 0002             		move.w	#$4328,obGfx(a0)
000134F8 0028 0004 0001             		ori.b	#4,obRender(a0)
000134FE 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013504 7000                       		moveq	#0,d0
00013506 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001350A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001350E 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013512                            
00013512                            Flap_OpenClose:	; Routine 2
00013512 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013516 6A00                       		bpl.s	@wait		; if time remains, branch
00013518 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
0001351E 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
00013524 4A28 0001                  		tst.b	obRender(a0)
00013528 6A00                       		bpl.s	@nosound
00013534                            
00013534                            	@wait:
00013534                            	@nosound:
00013534 43F9 0000 0000             		lea	(Ani_Flap).l,a1
0001353A 6100 926E                  		bsr.w	AnimateSprite
0001353E 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
00013542 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
00013546 6600                       		bne.s	@display	; if yes, branch
00013548 3038 D008                  		move.w	(v_player+obX).w,d0
0001354C B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00013550 6400                       		bcc.s	@display	; if yes, branch
00013552 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013558 323C 0013                  		move.w	#$13,d1
0001355C 343C 0020                  		move.w	#$20,d2
00013560 3602                       		move.w	d2,d3
00013562 5243                       		addq.w	#1,d3
00013564 3828 0008                  		move.w	obX(a0),d4
00013568 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
0001356C                            
0001356C                            	@display:
0001356C 6000 E106                  		bra.w	RememberState
0001356C 6000 E106                  		bra.w	RememberState
00013570                            		include	"_anim\Flapping Door.asm"
00013570                            ; ---------------------------------------------------------------------------
00013570                            ; Animation script - flapping door (LZ)
00013570                            ; ---------------------------------------------------------------------------
00013570 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
00013572 0000                       		dc.w @closing-Ani_Flap
00013574 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
0001357A 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00013580                            		even
00013580                            		even
00013580                            Map_Flap:	include	"_maps\Flapping Door.asm"
00013580                            ; ---------------------------------------------------------------------------
00013580                            ; Sprite mappings - flapping door (LZ)
00013580                            ; ---------------------------------------------------------------------------
00013580                            Map_Flap_internal:
00013580 0000                       		dc.w @closed-Map_Flap_internal
00013582 0000                       		dc.w @halfway-Map_Flap_internal
00013584 0000                       		dc.w @open-Map_Flap_internal
00013586 02                         @closed:	dc.b 2
00013587 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001358C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013591 02                         @halfway:	dc.b 2
00013592 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013597 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001359C 02                         @open:		dc.b 2
0001359D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000135A2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000135A8 00                         		even
000135A8 00                         		even
000135A8                            
000135A8                            		include	"_incObj\71 Invisible Barriers.asm"
000135A8                            ; ---------------------------------------------------------------------------
000135A8                            ; Object 71 - invisible	solid barriers
000135A8                            ; ---------------------------------------------------------------------------
000135A8                            
000135A8                            Invisibarrier:
000135A8 7000                       		moveq	#0,d0
000135AA 1028 0024                  		move.b	obRoutine(a0),d0
000135AE 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000135B2 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000135B6                            ; ===========================================================================
000135B6 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
000135B8 0000                       		dc.w Invis_Solid-Invis_Index
000135BA                            
000135BA =00000016                  invis_height:	equ $16		; height in pixels
000135BA                            ; ===========================================================================
000135BA                            
000135BA                            Invis_Main:	; Routine 0
000135BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000135BE 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
000135C6 317C 8680 0002             		move.w	#$8680,obGfx(a0)
000135CC 0028 0004 0001             		ori.b	#4,obRender(a0)
000135D2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000135D6 1200                       		move.b	d0,d1
000135D8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000135DC 0640 0010                  		addi.w	#$10,d0
000135E0 E248                       		lsr.w	#1,d0
000135E2 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
000135E6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000135EA 5241                       		addq.w	#1,d1
000135EC E749                       		lsl.w	#3,d1
000135EE 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
000135F2                            
000135F2                            Invis_Solid:	; Routine 2
000135F2 6100 C38A                  		bsr.w	ChkObjectVisible
000135F6 6600                       		bne.s	@chkdel
000135F8 7200                       		moveq	#0,d1
000135FA 1228 0014                  		move.b	obActWid(a0),d1
000135FE 0641 000B                  		addi.w	#$B,d1
00013602 7400                       		moveq	#0,d2
00013604 1428 0016                  		move.b	invis_height(a0),d2
00013608 3602                       		move.w	d2,d3
0001360A 5243                       		addq.w	#1,d3
0001360C 3828 0008                  		move.w	obX(a0),d4
00013610 6100 E542                  		bsr.w	SolidObject71
00013614                            
00013614                            @chkdel:
00013630 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
00013634 6700                       		beq.s	@nodisplay	; if not, branch
00013636 4EF9 0000 F6FE             		jmp	(DisplaySprite).l	; if yes, display the object
0001363C                            
0001363C                            	@nodisplay:
0001363C 4E75                       		rts	
0001363E                            
0001363E                            	@delete:
0001363E 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001363E 4EF9 0000 F73E             		jmp	(DeleteObject).l
00013644                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
00013644                            ; --------------------------------------------------------------------------------
00013644                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013644                            ; --------------------------------------------------------------------------------
00013644                            
00013644                            SME_t60cE:	
00013644 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013648 0000                       		dc.w SME_t60cE_30-SME_t60cE	
0001364A 04                         SME_t60cE_6:	dc.b 4	
0001364B 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
00013650 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
00013655 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
0001365A F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
0001365F 04                         SME_t60cE_1B:	dc.b 4	
00013660 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
00013665 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
0001366A 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
0001366F 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
00013674 04                         SME_t60cE_30:	dc.b 4	
00013675 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
0001367A E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
0001367F 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013684 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
0001368A 00                         		even
0001368A 00                         		even
0001368A                            
0001368A                            		include	"_incObj\5D Fan.asm"
0001368A                            ; ---------------------------------------------------------------------------
0001368A                            ; Object 5D - fans (SLZ)
0001368A                            ; ---------------------------------------------------------------------------
0001368A                            
0001368A                            Fan:
0001368A 7000                       		moveq	#0,d0
0001368C 1028 0024                  		move.b	obRoutine(a0),d0
00013690 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013694 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013698                            ; ===========================================================================
00013698 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
0001369A 0000                       		dc.w Fan_Delay-Fan_Index
0001369C                            
0001369C =00000030                  fan_time:	equ $30		; time between switching on/off
0001369C =00000032                  fan_switch:	equ $32		; on/off switch
0001369C                            ; ===========================================================================
0001369C                            
0001369C                            Fan_Main:	; Routine 0
0001369C 5428 0024                  		addq.b	#2,obRoutine(a0)
000136A0 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000136A8 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000136AE 0028 0004 0001             		ori.b	#4,obRender(a0)
000136B4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000136BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000136C0                            
000136C0                            Fan_Delay:	; Routine 2
000136C0 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
000136C6 6600                       		bne.s	@blow		; if yes, branch
000136C8 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
000136CC 6A00                       		bpl.s	@blow		; if time remains, branch
000136CE 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
000136D4 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
000136DA 6700                       		beq.s	@blow		; if fan is off, branch
000136DC 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
000136E2                            
000136E2                            @blow:
000136E2 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
000136E6 6600 0000                  		bne.w	@chkdel		; if not, branch
000136EA 43F8 D000                  		lea	(v_player).w,a1
000136EE 3029 0008                  		move.w	obX(a1),d0
000136F2 9068 0008                  		sub.w	obX(a0),d0
000136F6 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000136FC 6600                       		bne.s	@chksonic	; if yes, branch
000136FE 4440                       		neg.w	d0
00013700                            
00013700                            @chksonic:
00013700 0640 0050                  		addi.w	#$50,d0
00013704 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013708 6400                       		bcc.s	@animate	; if yes, branch
0001370A 3229 000C                  		move.w	obY(a1),d1
0001370E 0641 0060                  		addi.w	#$60,d1
00013712 9268 000C                  		sub.w	obY(a0),d1
00013716 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013718 0C41 0070                  		cmpi.w	#$70,d1
0001371C 6400                       		bcc.s	@animate	; branch if Sonic is too high
0001371E 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013722 6400                       		bcc.s	@faraway	; if yes, branch
00013724 4640                       		not.w	d0
00013726 D040                       		add.w	d0,d0
00013728                            
00013728                            	@faraway:
00013728 0640 0060                  		addi.w	#$60,d0
0001372C 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013732 6600                       		bne.s	@right		; if yes, branch
00013734 4440                       		neg.w	d0
00013736                            
00013736                            	@right:
00013736 4400                       		neg.b	d0
00013738 E840                       		asr.w	#4,d0
0001373A 0828 0000 0028             		btst	#0,obSubtype(a0)
00013740 6700                       		beq.s	@movesonic
00013742 4440                       		neg.w	d0
00013744                            
00013744                            	@movesonic:
00013744 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013748                            
00013748                            @animate:
00013748 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001374C 6A00                       		bpl.s	@chkdel
0001374E 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
00013754 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013758 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
0001375E 6500                       		bcs.s	@noreset
00013760 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013766                            
00013766                            	@noreset:
00013766 7000                       		moveq	#0,d0
00013768 0828 0000 0028             		btst	#0,obSubtype(a0)
0001376E 6700                       		beq.s	@noflip
00013770 7002                       		moveq	#2,d0
00013772                            
00013772                            	@noflip:
00013772 D028 001B                  		add.b	obAniFrame(a0),d0
00013776 1140 001A                  		move.b	d0,obFrame(a0)
0001377A                            
0001377A                            @chkdel:
0001377A 6100 BF82                  		bsr.w	DisplaySprite
0001379C 4E75                       		rts	
0001379C 4E75                       		rts	
0001379E                            Map_Fan:	include	"_maps\Fan.asm"
0001379E                            ; ---------------------------------------------------------------------------
0001379E                            ; Sprite mappings - fans (SLZ)
0001379E                            ; ---------------------------------------------------------------------------
0001379E                            Map_Fan_internal:
0001379E 0000                       		dc.w @fan1-Map_Fan_internal
000137A0 0000                       		dc.w @fan2-Map_Fan_internal
000137A2 0000                       		dc.w @fan3-Map_Fan_internal
000137A4 0000                       		dc.w @fan2-Map_Fan_internal
000137A6 0000                       		dc.w @fan1-Map_Fan_internal
000137A8 02                         @fan1:		dc.b 2
000137A9 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000137AE 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000137B3 02                         @fan2:		dc.b 2
000137B4 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000137B9 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000137BE 02                         @fan3:		dc.b 2
000137BF F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000137C4 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000137CA 00                         		even
000137CA 00                         		even
000137CA                            		include	"_incObj\5E Seesaw.asm"
000137CA                            ; ---------------------------------------------------------------------------
000137CA                            ; Object 5E - seesaws (SLZ)
000137CA                            ; ---------------------------------------------------------------------------
000137CA                            
000137CA                            Seesaw:
000137CA 7000                       		moveq	#0,d0
000137CC 1028 0024                  		move.b	obRoutine(a0),d0
000137D0 323B 0000                  		move.w	See_Index(pc,d0.w),d1
000137D4 4EBB 1000                  		jsr	See_Index(pc,d1.w)
000137D8 3028 0000                  		move.w	see_origX(a0),d0
000137DC 0240 FF80                  		andi.w	#$FF80,d0
000137E0 3238 F700                  		move.w	(v_screenposx).w,d1
000137E4 0441 0080                  		subi.w	#$80,d1
000137E8 0241 FF80                  		andi.w	#$FF80,d1
000137EC 9041                       		sub.w	d1,d0
000137EE 6B00 BF4E                  		bmi.w	DeleteObject
000137F2 0C40 0280                  		cmpi.w	#$280,d0
000137F6 6200 BF46                  		bhi.w	DeleteObject
000137FA 6000 BF02                  		bra.w	DisplaySprite
000137FE                            ; ===========================================================================
000137FE 0000                       See_Index:	dc.w See_Main-See_Index
00013800 0000                       		dc.w See_Slope-See_Index
00013802 0000                       		dc.w See_Slope2-See_Index
00013804 0000                       		dc.w See_Spikeball-See_Index
00013806 0000                       		dc.w See_MoveSpike-See_Index
00013808 0000                       		dc.w See_SpikeFall-See_Index
0001380A                            
0001380A =00000030                  see_origX:	equ $30		; original x-axis position
0001380A =00000034                  see_origY:	equ $34		; original y-axis position
0001380A =00000038                  see_speed:	equ $38		; speed of collision
0001380A =0000003A                  see_frame:	equ $3A		; 
0001380A =0000003C                  see_parent:	equ $3C		; RAM address of parent object
0001380A                            ; ===========================================================================
0001380A                            
0001380A                            See_Main:	; Routine 0
0001380A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001380E 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013816 317C 0374 0002             		move.w	#$374,obGfx(a0)
0001381C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013822 117C 0004 0018             		move.b	#4,obPriority(a0)
00013828 117C 0030 0014             		move.b	#$30,obActWid(a0)
0001382E 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013834 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013838 6600                       		bne.s	@noball		; if not, branch
0001383A                            
0001383A 6100 C364                  		bsr.w	FindNextFreeObj
0001383E 6600                       		bne.s	@noball
00013840 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013844 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013848 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001384E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013854 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001385A 2348 003C                  		move.l	a0,see_parent(a1)
0001385E                            
0001385E                            	@noball:
0001385E 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013864 6700                       		beq.s	@noflip		; if not, branch
00013866 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
0001386C                            
0001386C                            	@noflip:
0001386C 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013872                            
00013872                            See_Slope:	; Routine 2
00013872 1228 003A                  		move.b	see_frame(a0),d1
00013876 6100 0000                  		bsr.w	See_ChgFrame
0001387A 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013880 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013886 6700                       		beq.s	@notflat	; if not, branch
00013888 45F9 0000 0000             		lea	(See_DataFlat).l,a2
0001388E                            
0001388E                            	@notflat:
0001388E 43F8 D000                  		lea	(v_player).w,a1
00013892 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013898 323C 0030                  		move.w	#$30,d1
0001389C 4EB9 0000 8EE0             		jsr	(SlopeObject).l
000138A2 4E75                       		rts	
000138A4                            ; ===========================================================================
000138A4                            
000138A4                            See_Slope2:	; Routine 4
000138A4 6100 0000                  		bsr.w	See_ChkSide
000138A8 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000138AE 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000138B4 6700                       		beq.s	@notflat	; if not, branch
000138B6 45F9 0000 0000             		lea	(See_DataFlat).l,a2
000138BC                            
000138BC                            	@notflat:
000138BC 323C 0030                  		move.w	#$30,d1
000138C0 4EB9 0000 8F80             		jsr	(ExitPlatform).l
000138C6 323C 0030                  		move.w	#$30,d1
000138CA 3428 0008                  		move.w	obX(a0),d2
000138CE 4EB9 0000 9F1A             		jsr	(SlopeObject2).l
000138D4 4E75                       		rts	
000138D6                            ; ===========================================================================
000138D6                            
000138D6                            See_ChkSide:
000138D6 7202                       		moveq	#2,d1
000138D8 43F8 D000                  		lea	(v_player).w,a1
000138DC 3028 0008                  		move.w	obX(a0),d0
000138E0 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
000138E4 6400                       		bcc.s	@leftside	; if yes, branch
000138E6 4440                       		neg.w	d0
000138E8 7200                       		moveq	#0,d1
000138EA                            
000138EA                            	@leftside:
000138EA 0C40 0008                  		cmpi.w	#8,d0
000138EE 6400                       		bcc.s	See_ChgFrame
000138F0 7201                       		moveq	#1,d1
000138F2                            
000138F2                            See_ChgFrame:
000138F2 1028 001A                  		move.b	obFrame(a0),d0
000138F6 B001                       		cmp.b	d1,d0		; does frame need to change?
000138F8 6700                       		beq.s	@noflip		; if not, branch
000138FA 6400                       		bcc.s	@loc_11772
000138FC 5400                       		addq.b	#2,d0
000138FE                            
000138FE                            	@loc_11772:
000138FE 5300                       		subq.b	#1,d0
00013900 1140 001A                  		move.b	d0,obFrame(a0)
00013904 1141 003A                  		move.b	d1,see_frame(a0)
00013908 08A8 0000 0001             		bclr	#0,obRender(a0)
0001390E 0828 0001 001A             		btst	#1,obFrame(a0)
00013914 6700                       		beq.s	@noflip
00013916 08E8 0000 0001             		bset	#0,obRender(a0)
0001391C                            
0001391C                            	@noflip:
0001391C 4E75                       		rts	
0001391E                            ; ===========================================================================
0001391E                            
0001391E                            See_Spikeball:	; Routine 6
0001391E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013922 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
0001392A 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013930 0028 0004 0001             		ori.b	#4,obRender(a0)
00013936 117C 0004 0018             		move.b	#4,obPriority(a0)
0001393C 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013942 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013948 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
0001394E 0668 0028 0008             		addi.w	#$28,obX(a0)
00013954 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
0001395A 117C 0001 001A             		move.b	#1,obFrame(a0)
00013960 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013966 6700                       		beq.s	See_MoveSpike	; if not, branch
00013968 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
0001396E 117C 0002 003A             		move.b	#2,see_frame(a0)
00013974                            
00013974                            See_MoveSpike:	; Routine 8
00013974 2268 003C                  		movea.l	see_parent(a0),a1
00013978 7000                       		moveq	#0,d0
0001397A 1028 003A                  		move.b	see_frame(a0),d0
0001397E 9029 003A                  		sub.b	see_frame(a1),d0
00013982 6700                       		beq.s	loc_1183E
00013984 6400                       		bcc.s	loc_117FC
00013986 4400                       		neg.b	d0
00013988                            
00013988                            loc_117FC:
00013988 323C F7E8                  		move.w	#-$818,d1
0001398C 343C FEEC                  		move.w	#-$114,d2
00013990 0C00 0001                  		cmpi.b	#1,d0
00013994 6700                       		beq.s	loc_11822
00013996 323C F510                  		move.w	#-$AF0,d1
0001399A 343C FF34                  		move.w	#-$CC,d2
0001399E 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000139A4 6D00                       		blt.s	loc_11822
000139A6 323C F200                  		move.w	#-$E00,d1
000139AA 343C FF60                  		move.w	#-$A0,d2
000139AE                            
000139AE                            loc_11822:
000139AE 3141 0012                  		move.w	d1,obVelY(a0)
000139B2 3142 0010                  		move.w	d2,obVelX(a0)
000139B6 3028 0008                  		move.w	obX(a0),d0
000139BA 9068 0030                  		sub.w	see_origX(a0),d0
000139BE 6400                       		bcc.s	loc_11838
000139C0 4468 0010                  		neg.w	obVelX(a0)
000139C4                            
000139C4                            loc_11838:
000139C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000139C8 6000                       		bra.s	See_SpikeFall
000139CA                            ; ===========================================================================
000139CA                            
000139CA                            loc_1183E:
000139CA 45F9 0000 0000             		lea	(See_Speeds).l,a2
000139D0 7000                       		moveq	#0,d0
000139D2 1029 001A                  		move.b	obFrame(a1),d0
000139D6 343C 0028                  		move.w	#$28,d2
000139DA 3228 0008                  		move.w	obX(a0),d1
000139DE 9268 0030                  		sub.w	see_origX(a0),d1
000139E2 6400                       		bcc.s	loc_1185C
000139E4 4442                       		neg.w	d2
000139E6 5440                       		addq.w	#2,d0
000139E8                            
000139E8                            loc_1185C:
000139E8 D040                       		add.w	d0,d0
000139EA 3228 0034                  		move.w	see_origY(a0),d1
000139EE D272 0000                  		add.w	(a2,d0.w),d1
000139F2 3141 000C                  		move.w	d1,obY(a0)
000139F6 D468 0030                  		add.w	see_origX(a0),d2
000139FA 3142 0008                  		move.w	d2,obX(a0)
000139FE 4268 000E                  		clr.w	obY+2(a0)
00013A02 4268 000A                  		clr.w	obX+2(a0)
00013A06 4E75                       		rts	
00013A08                            ; ===========================================================================
00013A08                            
00013A08                            See_SpikeFall:	; Routine $A
00013A08 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013A0C 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013A0E 6100 BCA2                  		bsr.w	ObjectFall
00013A12 3028 0034                  		move.w	see_origY(a0),d0
00013A16 0440 002F                  		subi.w	#$2F,d0
00013A1A B068 000C                  		cmp.w	obY(a0),d0
00013A1E 6E00                       		bgt.s	locret_11898
00013A20 6100 BC90                  		bsr.w	ObjectFall
00013A24                            
00013A24                            locret_11898:
00013A24 4E75                       		rts	
00013A26                            ; ===========================================================================
00013A26                            
00013A26                            loc_1189A:
00013A26 6100 BC8A                  		bsr.w	ObjectFall
00013A2A 2268 003C                  		movea.l	see_parent(a0),a1
00013A2E 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013A34 7000                       		moveq	#0,d0
00013A36 1029 001A                  		move.b	obFrame(a1),d0
00013A3A 3228 0008                  		move.w	obX(a0),d1
00013A3E 9268 0030                  		sub.w	see_origX(a0),d1
00013A42 6400                       		bcc.s	loc_118BA
00013A44 5440                       		addq.w	#2,d0
00013A46                            
00013A46                            loc_118BA:
00013A46 D040                       		add.w	d0,d0
00013A48 3228 0034                  		move.w	see_origY(a0),d1
00013A4C D272 0000                  		add.w	(a2,d0.w),d1
00013A50 B268 000C                  		cmp.w	obY(a0),d1
00013A54 6E00                       		bgt.s	locret_11938
00013A56 2268 003C                  		movea.l	see_parent(a0),a1
00013A5A 7202                       		moveq	#2,d1
00013A5C 4A68 0010                  		tst.w	obVelX(a0)
00013A60 6B00                       		bmi.s	See_Spring
00013A62 7200                       		moveq	#0,d1
00013A64                            
00013A64                            See_Spring:
00013A64 1341 003A                  		move.b	d1,$3A(a1)
00013A68 1141 003A                  		move.b	d1,see_frame(a0)
00013A6C B229 001A                  		cmp.b	obFrame(a1),d1
00013A70 6700                       		beq.s	loc_1192C
00013A72 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013A78 6700                       		beq.s	loc_1192C
00013A7A 4229 0025                  		clr.b	ob2ndRout(a1)
00013A7E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013A84 45F8 D000                  		lea	(v_player).w,a2
00013A88 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013A8E 446A 0012                  		neg.w	obVelY(a2)
00013A92 08EA 0001 0022             		bset	#1,obStatus(a2)
00013A98 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013A9E 422A 003C                  		clr.b	$3C(a2)
00013AA2 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013AA8 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013AB8                            
00013AB8                            loc_1192C:
00013AB8 4268 0010                  		clr.w	obVelX(a0)
00013ABC 4268 0012                  		clr.w	obVelY(a0)
00013AC0 5528 0024                  		subq.b	#2,obRoutine(a0)
00013AC4                            
00013AC4                            locret_11938:
00013AC4 4E75                       		rts	
00013AC6                            ; ===========================================================================
00013AC6 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013AD0                            
00013AD0                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013B00                            		even
00013B00                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013B30                            		even
00013B30                            		even
00013B30                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013B30                            ; ---------------------------------------------------------------------------
00013B30                            ; Sprite mappings - seesaws (SLZ)
00013B30                            ; ---------------------------------------------------------------------------
00013B30                            Map_Seesaw_internal:
00013B30 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B32 0000                       		dc.w @flat-Map_Seesaw_internal
00013B34 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B36 0000                       		dc.w @flat-Map_Seesaw_internal
00013B38 07                         @sloping:	dc.b 7
00013B39 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013B3E DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013B43 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013B48 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013B4D FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013B52 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013B57 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013B5C 04                         @flat:		dc.b 4
00013B5D E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013B62 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013B67 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013B6C E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013B72 00                         		even
00013B72 00                         		even
00013B72                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013B72                            ; ---------------------------------------------------------------------------
00013B72                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013B72                            ; ---------------------------------------------------------------------------
00013B72                            Map_SSawBall_internal:
00013B72 0000                       		dc.w @red-Map_SSawBall_internal
00013B74 0000                       		dc.w @silver-Map_SSawBall_internal
00013B76 01                         @red:		dc.b 1
00013B77 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013B7C 01                         @silver:	dc.b 1
00013B7D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013B82                            		even
00013B82                            		even
00013B82                            		include	"_incObj\5F Bomb Enemy.asm"
00013B82                            ; ---------------------------------------------------------------------------
00013B82                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013B82                            ; ---------------------------------------------------------------------------
00013B82                            
00013B82                            Bomb:
00013B82 7000                       		moveq	#0,d0
00013B84 1028 0024                  		move.b	obRoutine(a0),d0
00013B88 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013B8C 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013B90                            ; ===========================================================================
00013B90 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013B92 0000                       		dc.w Bom_Action-Bom_Index
00013B94 0000                       		dc.w Bom_Display-Bom_Index
00013B96 0000                       		dc.w Bom_End-Bom_Index
00013B98                            
00013B98 =00000030                  bom_time:	equ $30		; time of fuse
00013B98 =00000034                  bom_origY:	equ $34		; original y-axis position
00013B98 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013B98                            ; ===========================================================================
00013B98                            
00013B98                            Bom_Main:	; Routine 0
00013B98 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B9C 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013BA4 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013BAA 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BB0 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013BB6 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BBC 1028 0028                  		move.b	obSubtype(a0),d0
00013BC0 6700                       		beq.s	loc_11A3C
00013BC2 1140 0024                  		move.b	d0,obRoutine(a0)
00013BC6 4E75                       		rts	
00013BC8                            ; ===========================================================================
00013BC8                            
00013BC8                            loc_11A3C:
00013BC8 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013BCE 0868 0000 0022             		bchg	#0,obStatus(a0)
00013BD4                            
00013BD4                            Bom_Action:	; Routine 2
00013BD4 7000                       		moveq	#0,d0
00013BD6 1028 0025                  		move.b	ob2ndRout(a0),d0
00013BDA 323B 0000                  		move.w	@index(pc,d0.w),d1
00013BDE 4EBB 1000                  		jsr	@index(pc,d1.w)
00013BE2 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013BE8 6100 8BC0                  		bsr.w	AnimateSprite
00013BEC 6000 DA86                  		bra.w	RememberState
00013BF0                            ; ===========================================================================
00013BF0 0000                       @index:		dc.w @walk-@index
00013BF2 0000                       		dc.w @wait-@index
00013BF4 0000                       		dc.w @explode-@index
00013BF6                            ; ===========================================================================
00013BF6                            
00013BF6                            @walk:
00013BF6 6100 0000                  		bsr.w	@chksonic
00013BFA 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013BFE 6A00                       		bpl.s	@noflip		; if time remains, branch
00013C00 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013C04 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013C0A 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013C10 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013C16 0868 0000 0022             		bchg	#0,obStatus(a0)
00013C1C 6700                       		beq.s	@noflip
00013C1E 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013C22                            
00013C22                            	@noflip:
00013C22 4E75                       		rts	
00013C24                            ; ===========================================================================
00013C24                            
00013C24                            @wait:
00013C24 6100 0000                  		bsr.w	@chksonic
00013C28 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C2C 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013C2E 6100 BABA                  		bsr.w	SpeedToPos
00013C32 4E75                       		rts	
00013C34                            ; ===========================================================================
00013C34                            
00013C34                            	@stopwalking:
00013C34 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013C38 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013C3E 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013C42 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013C48 4E75                       		rts	
00013C4A                            ; ===========================================================================
00013C4A                            
00013C4A                            @explode:
00013C4A 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C4E 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013C50 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013C54 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013C5A                            
00013C5A                            	@noexplode:
00013C5A 4E75                       		rts	
00013C5C                            ; ===========================================================================
00013C5C                            
00013C5C                            @chksonic:
00013C5C 3038 D008                  		move.w	(v_player+obX).w,d0
00013C60 9068 0008                  		sub.w	obX(a0),d0
00013C64 6400                       		bcc.s	@isleft
00013C66 4440                       		neg.w	d0
00013C68                            
00013C68                            	@isleft:
00013C68 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013C6C 6400                       		bcc.s	@outofrange	; if not, branch
00013C6E 3038 D00C                  		move.w	(v_player+obY).w,d0
00013C72 9068 000C                  		sub.w	obY(a0),d0
00013C76 6400                       		bcc.s	@isabove
00013C78 4440                       		neg.w	d0
00013C7A                            
00013C7A                            	@isabove:
00013C7A 0C40 0060                  		cmpi.w	#$60,d0
00013C7E 6400                       		bcc.s	@outofrange
00013C80 4A78 FE08                  		tst.w	(v_debuguse).w
00013C84 6600                       		bne.s	@outofrange
00013C86                            
00013C86 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013C8C 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013C92 4268 0010                  		clr.w	obVelX(a0)
00013C96 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013C9C 6100 BF02                  		bsr.w	FindNextFreeObj
00013CA0 6600                       		bne.s	@outofrange
00013CA2 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013CA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013CAC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013CB2 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013CB8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013CBE 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013CC4 137C 0003 001C             		move.b	#3,obAnim(a1)
00013CCA 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013CD0 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013CD6 6700                       		beq.s	@normal		; if not, branch
00013CD8 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013CDC                            
00013CDC                            	@normal:
00013CDC 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013CE2 2348 003C                  		move.l	a0,bom_parent(a1)
00013CE6                            
00013CE6                            @outofrange:
00013CE6 4E75                       		rts	
00013CE8                            ; ===========================================================================
00013CE8                            
00013CE8                            Bom_Display:	; Routine 4
00013CE8 6100                       		bsr.s	loc_11B70
00013CEA 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013CF0 6100 8AB8                  		bsr.w	AnimateSprite
00013CF4 6000 D97E                  		bra.w	RememberState
00013CF8                            ; ===========================================================================
00013CF8                            
00013CF8                            loc_11B70:
00013CF8 5368 0030                  		subq.w	#1,bom_time(a0)
00013CFC 6B00                       		bmi.s	loc_11B7C
00013CFE 6100 B9EA                  		bsr.w	SpeedToPos
00013D02 4E75                       		rts	
00013D04                            ; ===========================================================================
00013D04                            
00013D04                            loc_11B7C:
00013D04 4268 0030                  		clr.w	bom_time(a0)
00013D08 4228 0024                  		clr.b	obRoutine(a0)
00013D0C 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013D12 7203                       		moveq	#3,d1
00013D14 2248                       		movea.l	a0,a1
00013D16 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013D1C 6000                       		bra.s	@makeshrapnel
00013D1E                            ; ===========================================================================
00013D1E                            
00013D1E                            	@loop:
00013D1E 6100 BE80                  		bsr.w	FindNextFreeObj
00013D22 6600                       		bne.s	@fail
00013D24                            
00013D24                            @makeshrapnel:
00013D24 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013D28 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013D2E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013D34 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013D3A 137C 0004 001C             		move.b	#4,obAnim(a1)
00013D40 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013D44 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013D48 137C 0098 0020             		move.b	#$98,obColType(a1)
00013D4E 08E9 0007 0001             		bset	#7,obRender(a1)
00013D54                            
00013D54                            	@fail:
00013D54 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013D58                            
00013D58 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013D5E                            
00013D5E                            Bom_End:	; Routine 6
00013D5E 6100 B98A                  		bsr.w	SpeedToPos
00013D62 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013D68 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013D6E 6100 8A3A                  		bsr.w	AnimateSprite
00013D72 4A28 0001                  		tst.b	obRender(a0)
00013D76 6A00 B9C6                  		bpl.w	DeleteObject
00013D7A 6000 B982                  		bra.w	DisplaySprite
00013D7E                            ; ===========================================================================
00013D7E FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013D7E FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013D8E                            		include	"_anim\Bomb Enemy.asm"
00013D8E                            ; ---------------------------------------------------------------------------
00013D8E                            ; Animation script - Bomb enemy
00013D8E                            ; ---------------------------------------------------------------------------
00013D8E 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013D90 0000                       		dc.w @walk-Ani_Bomb
00013D92 0000                       		dc.w @activated-Ani_Bomb
00013D94 0000                       		dc.w @fuse-Ani_Bomb
00013D96 0000                       		dc.w @shrapnel-Ani_Bomb
00013D98 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013D9C 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013DA2 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013DA6 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013DAA 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013DAE                            		even
00013DAE                            		even
00013DAE                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013DAE                            ; ---------------------------------------------------------------------------
00013DAE                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013DAE                            ; ---------------------------------------------------------------------------
00013DAE                            Map_Bomb_internal:
00013DAE 0000                       		dc.w @stand1-Map_Bomb_internal
00013DB0 0000                       		dc.w @stand2-Map_Bomb_internal
00013DB2 0000                       		dc.w @walk1-Map_Bomb_internal
00013DB4 0000                       		dc.w @walk2-Map_Bomb_internal
00013DB6 0000                       		dc.w @walk3-Map_Bomb_internal
00013DB8 0000                       		dc.w @walk4-Map_Bomb_internal
00013DBA 0000                       		dc.w @activate1-Map_Bomb_internal
00013DBC 0000                       		dc.w @activate2-Map_Bomb_internal
00013DBE 0000                       		dc.w @fuse1-Map_Bomb_internal
00013DC0 0000                       		dc.w @fuse2-Map_Bomb_internal
00013DC2 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013DC4 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013DC6 03                         @stand1:	dc.b 3
00013DC7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013DCC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013DD1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013DD6 03                         @stand2:	dc.b 3
00013DD7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013DDC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013DE1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013DE6 03                         @walk1:		dc.b 3
00013DE7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013DEC 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013DF1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013DF6 03                         @walk2:		dc.b 3
00013DF7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013DFC 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013E01 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E06 03                         @walk3:		dc.b 3
00013E07 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013E0C 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013E11 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013E16 03                         @walk4:		dc.b 3
00013E17 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E1C 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013E21 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E26 02                         @activate1:	dc.b 2
00013E27 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013E2C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E31 02                         @activate2:	dc.b 2
00013E32 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E37 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E3C 01                         @fuse1:		dc.b 1
00013E3D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013E42 01                         @fuse2:		dc.b 1
00013E43 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013E48 01                         @shrapnel1:	dc.b 1
00013E49 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013E4E 01                         @shrapnel2:	dc.b 1
00013E4F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013E54                            		even
00013E54                            		even
00013E54                            
00013E54                            		include	"_incObj\60 Orbinaut.asm"
00013E54                            ; ---------------------------------------------------------------------------
00013E54                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013E54                            ; ---------------------------------------------------------------------------
00013E54                            
00013E54                            Orbinaut:
00013E54 7000                       		moveq	#0,d0
00013E56 1028 0024                  		move.b	obRoutine(a0),d0
00013E5A 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013E5E 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013E62                            ; ===========================================================================
00013E62 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013E64 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013E66 0000                       		dc.w Orb_Display-Orb_Index
00013E68 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013E6A 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013E6C                            
00013E6C =0000003C                  orb_parent:	equ $3C		; address of parent object
00013E6C                            ; ===========================================================================
00013E6C                            
00013E6C                            Orb_Main:	; Routine 0
00013E6C 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013E74 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013E7A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013E80 6700                       		beq.s	@isscrap
00013E82 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013E88                            
00013E88                            	@isscrap:
00013E88 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013E8E 6600                       		bne.s	@notlabyrinth
00013E90 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013E96                            
00013E96                            	@notlabyrinth:
00013E96 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E9C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013EA2 117C 000B 0020             		move.b	#$B,obColType(a0)
00013EA8 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013EAE 7400                       		moveq	#0,d2
00013EB0 45E8 0037                  		lea	$37(a0),a2
00013EB4 264A                       		movea.l	a2,a3
00013EB6 524A                       		addq.w	#1,a2
00013EB8 7203                       		moveq	#3,d1
00013EBA                            
00013EBA                            @makesatellites:
00013EBA 6100 BCE4                  		bsr.w	FindNextFreeObj
00013EBE 6600                       		bne.s	@fail
00013EC0 5213                       		addq.b	#1,(a3)
00013EC2 3A09                       		move.w	a1,d5
00013EC4 0445 D000                  		subi.w	#$D000,d5
00013EC8 EC4D                       		lsr.w	#6,d5
00013ECA 0245 007F                  		andi.w	#$7F,d5
00013ECE 14C5                       		move.b	d5,(a2)+
00013ED0 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013ED2 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013ED8 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013EDE 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013EE4 0029 0004 0001             		ori.b	#4,obRender(a1)
00013EEA 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013EF0 137C 0008 0014             		move.b	#8,obActWid(a1)
00013EF6 137C 0003 001A             		move.b	#3,obFrame(a1)
00013EFC 137C 0098 0020             		move.b	#$98,obColType(a1)
00013F02 1342 0026                  		move.b	d2,obAngle(a1)
00013F06 0602 0040                  		addi.b	#$40,d2
00013F0A 2348 003C                  		move.l	a0,orb_parent(a1)
00013F0E 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013F12                            
00013F12                            	@fail:
00013F12 7001                       		moveq	#1,d0
00013F14 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013F1A 6700                       		beq.s	@noflip		; if not, branch
00013F1C 4440                       		neg.w	d0
00013F1E                            
00013F1E                            	@noflip:
00013F1E 1140 0036                  		move.b	d0,$36(a0)
00013F22 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013F28 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F2C 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013F32 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013F38 6700                       		beq.s	@noflip2	; if not, branch
00013F3A 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013F3E                            
00013F3E                            	@noflip2:
00013F3E 4E75                       		rts	
00013F40                            ; ===========================================================================
00013F40                            
00013F40                            Orb_ChkSonic:	; Routine 2
00013F40 3038 D008                  		move.w	(v_player+obX).w,d0
00013F44 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013F48 6400                       		bcc.s	@isright	; if yes, branch
00013F4A 4440                       		neg.w	d0
00013F4C                            
00013F4C                            	@isright:
00013F4C 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013F50 6400                       		bcc.s	@animate	; if not, branch
00013F52 3038 D00C                  		move.w	(v_player+obY).w,d0
00013F56 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013F5A 6400                       		bcc.s	@isabove	; if yes, branch
00013F5C 4440                       		neg.w	d0
00013F5E                            
00013F5E                            	@isabove:
00013F5E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013F62 6400                       		bcc.s	@animate	; if not, branch
00013F64 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013F68 6600                       		bne.s	@animate	; if yes, branch
00013F6A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013F70                            
00013F70                            @animate:
00013F70 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013F76 6100 8832                  		bsr.w	AnimateSprite
00013F7A 6000 0000                  		bra.w	Orb_ChkDel
00013F7E                            ; ===========================================================================
00013F7E                            
00013F7E                            Orb_Display:	; Routine 4
00013F7E 6100 B76A                  		bsr.w	SpeedToPos
00013F82                            
00013F82                            Orb_ChkDel:
00013FA0 6000 B75C                  		bra.w	DisplaySprite
00013FA4                            
00013FA4                            @chkgone:
00013FA4 45F8 FC00                  		lea	(v_objstate).w,a2
00013FA8 7000                       		moveq	#0,d0
00013FAA 1028 0023                  		move.b	obRespawnNo(a0),d0
00013FAE 6700                       		beq.s	loc_11E34
00013FB0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013FB6                            
00013FB6                            loc_11E34:
00013FB6 45E8 0037                  		lea	$37(a0),a2
00013FBA 7400                       		moveq	#0,d2
00013FBC 141A                       		move.b	(a2)+,d2
00013FBE 5342                       		subq.w	#1,d2
00013FC0 6500                       		bcs.s	Orb_Delete
00013FC2                            
00013FC2                            loc_11E40:
00013FC2 7000                       		moveq	#0,d0
00013FC4 101A                       		move.b	(a2)+,d0
00013FC6 ED48                       		lsl.w	#6,d0
00013FC8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00013FCE 2240                       		movea.l	d0,a1
00013FD0 6100 B76E                  		bsr.w	DeleteChild
00013FD4 51CA FFEC                  		dbf	d2,loc_11E40
00013FD8                            
00013FD8                            Orb_Delete:
00013FD8 6000 B764                  		bra.w	DeleteObject
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            Orb_MoveOrb:	; Routine 6
00013FDC 2268 003C                  		movea.l	orb_parent(a0),a1
00013FE0 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00013FE4 6600 B758                  		bne.w	DeleteObject	; if not, delete
00013FE8 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00013FEE 6600                       		bne.s	@circle		; if not, branch
00013FF0 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00013FF6 6600                       		bne.s	@circle		; if not, branch
00013FF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00013FFC 5329 0037                  		subq.b	#1,$37(a1)
00014000 6600                       		bne.s	@fire
00014002 5429 0024                  		addq.b	#2,obRoutine(a1)
00014006                            
00014006                            	@fire:
00014006 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
0001400C 0829 0000 0022             		btst	#0,obStatus(a1)
00014012 6700                       		beq.s	@noflip
00014014 4468 0010                  		neg.w	obVelX(a0)
00014018                            
00014018                            	@noflip:
00014018 6000 B6E4                  		bra.w	DisplaySprite
0001401C                            ; ===========================================================================
0001401C                            
0001401C                            @circle:
0001401C 1028 0026                  		move.b	obAngle(a0),d0
00014020 4EB9 0000 37AE             		jsr	(CalcSine).l
00014026 E841                       		asr.w	#4,d1
00014028 D269 0008                  		add.w	obX(a1),d1
0001402C 3141 0008                  		move.w	d1,obX(a0)
00014030 E840                       		asr.w	#4,d0
00014032 D069 000C                  		add.w	obY(a1),d0
00014036 3140 000C                  		move.w	d0,obY(a0)
0001403A 1029 0036                  		move.b	$36(a1),d0
0001403E D128 0026                  		add.b	d0,obAngle(a0)
00014042 6000 B6BA                  		bra.w	DisplaySprite
00014046                            ; ===========================================================================
00014046                            
00014046                            Orb_ChkDel2:	; Routine 8
00014046 6100 B6A2                  		bsr.w	SpeedToPos
0001404A 4A28 0001                  		tst.b	obRender(a0)
0001404E 6A00 B6EE                  		bpl.w	DeleteObject
00014052 6000 B6AA                  		bra.w	DisplaySprite
00014052 6000 B6AA                  		bra.w	DisplaySprite
00014056                            		include	"_anim\Orbinaut.asm"
00014056                            ; ---------------------------------------------------------------------------
00014056                            ; Animation script - Orbinaut enemy
00014056                            ; ---------------------------------------------------------------------------
00014056 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00014058 0000                       		dc.w @angers-Ani_Orb
0001405A 0F00 FF                    @normal:	dc.b $F, 0, afEnd
0001405E 00                         		even
0001405E 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00014064 00                         		even
00014064 00                         		even
00014064                            Map_Orb:	include	"_maps\Orbinaut.asm"
00014064                            ; ---------------------------------------------------------------------------
00014064                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00014064                            ; ---------------------------------------------------------------------------
00014064                            Map_Orb_internal:
00014064 0000                       		dc.w @normal-Map_Orb_internal
00014066 0000                       		dc.w @medium-Map_Orb_internal
00014068 0000                       		dc.w @angry-Map_Orb_internal
0001406A 0000                       		dc.w @spikeball-Map_Orb_internal
0001406C 01                         @normal:	dc.b 1
0001406D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014072 01                         @medium:	dc.b 1
00014073 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014078 01                         @angry:		dc.b 1
00014079 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001407E 01                         @spikeball:	dc.b 1
0001407F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014084                            		even
00014084                            		even
00014084                            
00014084                            		include	"_incObj\16 Harpoon.asm"
00014084                            ; ---------------------------------------------------------------------------
00014084                            ; Object 16 - harpoon (LZ)
00014084                            ; ---------------------------------------------------------------------------
00014084                            
00014084                            Harpoon:
00014084 7000                       		moveq	#0,d0
00014086 1028 0024                  		move.b	obRoutine(a0),d0
0001408A 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001408E 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00014092                            ; ===========================================================================
00014092 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014094 0000                       		dc.w Harp_Move-Harp_Index
00014096 0000                       		dc.w Harp_Wait-Harp_Index
00014098                            
00014098 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014098                            ; ===========================================================================
00014098                            
00014098                            Harp_Main:	; Routine 0
00014098 5428 0024                  		addq.b	#2,obRoutine(a0)
0001409C 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
000140A4 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
000140AA 0028 0004 0001             		ori.b	#4,obRender(a0)
000140B0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000140B6 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
000140BC 117C 0014 0014             		move.b	#$14,obActWid(a0)
000140C2 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
000140C8                            
000140C8                            Harp_Move:	; Routine 2
000140C8 43F9 0000 0000             		lea	(Ani_Harp).l,a1
000140CE 6100 86DA                  		bsr.w	AnimateSprite
000140D2 7000                       		moveq	#0,d0
000140D4 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
000140D8 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
000140DE 6000 D594                  		bra.w	RememberState
000140E2                            
000140E2                            	@types:
000140E2 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
000140E8                            		even
000140E8                            
000140E8                            Harp_Wait:	; Routine 4
000140E8 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
000140EC 6A00                       		bpl.s	@chkdel		; branch if time remains
000140EE 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
000140F4 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
000140F8 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
000140FE                            
000140FE                            	@chkdel:
000140FE 6000 D574                  		bra.w	RememberState
000140FE 6000 D574                  		bra.w	RememberState
00014102                            		include	"_anim\Harpoon.asm"
00014102                            ; ---------------------------------------------------------------------------
00014102                            ; Animation script - harpoon (LZ)
00014102                            ; ---------------------------------------------------------------------------
00014102 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00014104 0000                       		dc.w @h_retracting-Ani_Harp
00014106 0000                       		dc.w @v_extending-Ani_Harp
00014108 0000                       		dc.w @v_retracting-Ani_Harp
0001410A 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
0001410E 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00014112 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014116 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
0001411A                            		even
0001411A                            		even
0001411A                            Map_Harp:	include	"_maps\Harpoon.asm"
0001411A                            ; ---------------------------------------------------------------------------
0001411A                            ; Sprite mappings - harpoon (LZ)
0001411A                            ; ---------------------------------------------------------------------------
0001411A                            Map_Harp_internal:
0001411A 0000                       		dc.w @h_retracted-Map_Harp_internal
0001411C 0000                       		dc.w @h_middle-Map_Harp_internal
0001411E 0000                       		dc.w @h_extended-Map_Harp_internal
00014120 0000                       		dc.w @v_retracted-Map_Harp_internal
00014122 0000                       		dc.w @v_middle-Map_Harp_internal
00014124 0000                       		dc.w @v_extended-Map_Harp_internal
00014126 01                         @h_retracted:	dc.b 1
00014127 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001412C 01                         @h_middle:	dc.b 1
0001412D FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00014132 02                         @h_extended:	dc.b 2
00014133 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00014138 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001413D 01                         @v_retracted:	dc.b 1
0001413E F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00014143 01                         @v_middle:	dc.b 1
00014144 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00014149 02                         @v_extended:	dc.b 2
0001414A D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001414F F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00014154                            		even
00014154                            		even
00014154                            		include	"_incObj\61 LZ Blocks.asm"
00014154                            ; ---------------------------------------------------------------------------
00014154                            ; Object 61 - blocks (LZ)
00014154                            ; ---------------------------------------------------------------------------
00014154                            
00014154                            LabyrinthBlock:
00014154 7000                       		moveq	#0,d0
00014156 1028 0024                  		move.b	obRoutine(a0),d0
0001415A 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
0001415E 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
00014162                            ; ===========================================================================
00014162 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
00014164 0000                       		dc.w LBlk_Action-LBlk_Index
00014166                            
00014166 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014168 200C                       		dc.b $20, $C
0001416A 1010                       		dc.b $10, $10
0001416C 1010                       		dc.b $10, $10
0001416E                            
0001416E =00000016                  lblk_height:	equ $16		; block height
0001416E =00000034                  lblk_origX:	equ $34		; original x-axis position
0001416E =00000030                  lblk_origY:	equ $30		; original y-axis position
0001416E =00000036                  lblk_time:	equ $36		; time delay for block movement
0001416E =00000038                  lblk_untouched:	equ $38		; flag block as untouched
0001416E                            ; ===========================================================================
0001416E                            
0001416E                            LBlk_Main:	; Routine 0
0001416E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014172 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
0001417A 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00014180 117C 0004 0001             		move.b	#4,obRender(a0)
00014186 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001418C 7000                       		moveq	#0,d0
0001418E 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014192 E648                       		lsr.w	#3,d0		; read only the 1st digit
00014194 0240 000E                  		andi.w	#$E,d0
00014198 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
0001419C 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000141A0 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
000141A4 E248                       		lsr.w	#1,d0
000141A6 1140 001A                  		move.b	d0,obFrame(a0)
000141AA 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000141B0 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000141B6 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000141BA 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
000141BE 6700                       		beq.s	LBlk_Action	; branch if 0
000141C0 0C00 0007                  		cmpi.b	#7,d0
000141C4 6700                       		beq.s	LBlk_Action	; branch if 7
000141C6 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
000141CC                            
000141CC                            LBlk_Action:	; Routine 2
000141CC 3F28 0008                  		move.w	obX(a0),-(sp)
000141D0 7000                       		moveq	#0,d0
000141D2 1028 0028                  		move.b	obSubtype(a0),d0
000141D6 0240 000F                  		andi.w	#$F,d0
000141DA D040                       		add.w	d0,d0
000141DC 323B 0000                  		move.w	@index(pc,d0.w),d1
000141E0 4EBB 1000                  		jsr	@index(pc,d1.w)
000141E4 381F                       		move.w	(sp)+,d4
000141E6 4A28 0001                  		tst.b	obRender(a0)
000141EA 6A00                       		bpl.s	@chkdel
000141EC 7200                       		moveq	#0,d1
000141EE 1228 0014                  		move.b	obActWid(a0),d1
000141F2 0641 000B                  		addi.w	#$B,d1
000141F6 7400                       		moveq	#0,d2
000141F8 1428 0016                  		move.b	lblk_height(a0),d2
000141FC 3602                       		move.w	d2,d3
000141FE 5243                       		addq.w	#1,d3
00014200 6100 D90A                  		bsr.w	SolidObject
00014204 1144 003F                  		move.b	d4,$3F(a0)
00014208 6100 0000                  		bsr.w	loc_12180
0001420C                            
0001420C                            @chkdel:
0001422A 6000 B4D2                  		bra.w	DisplaySprite
0001422E                            ; ===========================================================================
0001422E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00014232 0000 0000                  		dc.w @type02-@index, @type03-@index
00014236 0000 0000                  		dc.w @type04-@index, @type05-@index
0001423A 0000 0000                  		dc.w @type06-@index, @type07-@index
0001423E                            ; ===========================================================================
0001423E                            
0001423E                            @type00:
0001423E 4E75                       		rts	
00014240                            ; ===========================================================================
00014240                            
00014240                            @type01:
00014240                            @type03:
00014240 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
00014244 6600                       		bne.s	@wait01		; if yes, branch
00014246 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
0001424C 6700                       		beq.s	@donothing01	; if not, branch
0001424E 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
00014254                            
00014254                            	@donothing01:
00014254 4E75                       		rts	
00014256                            ; ===========================================================================
00014256                            
00014256                            	@wait01:
00014256 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
0001425A 66F8                       		bne.s	@donothing01	; if time remains, branch
0001425C 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
00014260 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
00014264 4E75                       		rts	
00014266                            ; ===========================================================================
00014266                            
00014266                            @type02:
00014266                            @type06:
00014266 6100 B482                  		bsr.w	SpeedToPos
0001426A 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
0001426E 6100 0000                  		bsr.w	ObjFloorDist
00014272 4A41                       		tst.w	d1		; has block hit the floor?
00014274 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014278 5241                       		addq.w	#1,d1
0001427A D368 000C                  		add.w	d1,obY(a0)
0001427E 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
00014282 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014286                            
00014286                            	@nofloor02:
00014286 4E75                       		rts	
00014288                            ; ===========================================================================
00014288                            
00014288                            @type04:
00014288 6100 B460                  		bsr.w	SpeedToPos
0001428C 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
00014290 6100 0000                  		bsr.w	ObjHitCeiling
00014294 4A41                       		tst.w	d1		; has block hit the ceiling?
00014296 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
0001429A 9368 000C                  		sub.w	d1,obY(a0)
0001429E 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
000142A2 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000142A6                            
000142A6                            	@noceiling04:
000142A6 4E75                       		rts	
000142A8                            ; ===========================================================================
000142A8                            
000142A8                            @type05:
000142A8 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000142AE 6600                       		bne.s	@notouch05	; if not, branch
000142B0 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000142B4 4228 0038                  		clr.b	lblk_untouched(a0)
000142B8                            
000142B8                            	@notouch05:
000142B8 4E75                       		rts	
000142BA                            ; ===========================================================================
000142BA                            
000142BA                            @type07:
000142BA 3038 F646                  		move.w	(v_waterpos1).w,d0
000142BE 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
000142C2 6700                       		beq.s	@stop07		; if yes, branch
000142C4 6400                       		bcc.s	@fall07		; branch if block is above water
000142C6 0C40 FFFE                  		cmpi.w	#-2,d0
000142CA 6C00                       		bge.s	@loc_1214E
000142CC 70FE                       		moveq	#-2,d0
000142CE                            
000142CE                            	@loc_1214E:
000142CE D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
000142D2 6100 0000                  		bsr.w	ObjHitCeiling
000142D6 4A41                       		tst.w	d1		; has block hit the ceiling?
000142D8 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
000142DC 9368 000C                  		sub.w	d1,obY(a0)	; stop block
000142E0                            
000142E0                            	@noceiling07:
000142E0 4E75                       		rts	
000142E2                            ; ===========================================================================
000142E2                            
000142E2                            @fall07:
000142E2 0C40 0002                  		cmpi.w	#2,d0
000142E6 6F00                       		ble.s	@loc_1216A
000142E8 7002                       		moveq	#2,d0
000142EA                            
000142EA                            	@loc_1216A:
000142EA D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
000142EE 6100 0000                  		bsr.w	ObjFloorDist
000142F2 4A41                       		tst.w	d1
000142F4 6A00 0000                  		bpl.w	@stop07
000142F8 5241                       		addq.w	#1,d1
000142FA D368 000C                  		add.w	d1,obY(a0)
000142FE                            
000142FE                            	@stop07:
000142FE 4E75                       		rts	
00014300                            ; ===========================================================================
00014300                            
00014300                            loc_12180:
00014300 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014304 6700                       		beq.s	locret_121C0	; if yes, branch
00014306 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
0001430C 6600                       		bne.s	loc_1219A	; if yes, branch
0001430E 4A28 003E                  		tst.b	$3E(a0)
00014312 6700                       		beq.s	locret_121C0
00014314 5928 003E                  		subq.b	#4,$3E(a0)
00014318 6000                       		bra.s	loc_121A6
0001431A                            ; ===========================================================================
0001431A                            
0001431A                            loc_1219A:
0001431A 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014320 6700                       		beq.s	locret_121C0
00014322 5828 003E                  		addq.b	#4,$3E(a0)
00014326                            
00014326                            loc_121A6:
00014326 1028 003E                  		move.b	$3E(a0),d0
0001432A 4EB9 0000 37AE             		jsr	(CalcSine).l
00014330 323C 0400                  		move.w	#$400,d1
00014334 C1C1                       		muls.w	d1,d0
00014336 4840                       		swap	d0
00014338 D068 0030                  		add.w	lblk_origY(a0),d0
0001433C 3140 000C                  		move.w	d0,obY(a0)
00014340                            
00014340                            locret_121C0:
00014340 4E75                       		rts	
00014340 4E75                       		rts	
00014342                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
00014342                            Map_6865:
00014342 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
00014344 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
00014346 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014348 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
0001434A 01                         Map_6865_8: 	dc.b $1
0001434B F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
00014350 02                         Map_6865_E: 	dc.b $2
00014351 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
00014356 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
0001435B 01                         Map_6865_19: 	dc.b $1
0001435C F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
00014361 01                         Map_6865_1F: 	dc.b $1
00014362 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014368 00                         	even
00014368 00                         	even
00014368                            		include	"_incObj\62 Gargoyle.asm"
00014368                            ; ---------------------------------------------------------------------------
00014368                            ; Object 62 - gargoyle head (LZ)
00014368                            ; ---------------------------------------------------------------------------
00014368                            
00014368                            Gargoyle:
00014368 7000                       		moveq	#0,d0
0001436A 1028 0024                  		move.b	obRoutine(a0),d0
0001436E 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
00014372 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014376 6000 D2FC                  		bra.w	RememberState
0001437A                            ; ===========================================================================
0001437A 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
0001437C 0000                       		dc.w Gar_MakeFire-Gar_Index
0001437E 0000                       		dc.w Gar_FireBall-Gar_Index
00014380 0000                       		dc.w Gar_AniFire-Gar_Index
00014382                            
00014382 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001438A                            ; ===========================================================================
0001438A                            
0001438A                            Gar_Main:	; Routine 0
0001438A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001438E 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014396 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
0001439C 0028 0004 0001             		ori.b	#4,obRender(a0)
000143A2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000143A8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000143AE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000143B2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000143B6 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
000143BC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000143C2 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000143C8                            
000143C8                            Gar_MakeFire:	; Routine 2
000143C8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
000143CC 6600                       		bne.s	@nofire		; if time remains, branch
000143CE                            
000143CE 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
000143D4 6100 B5A8                  		bsr.w	ChkObjectVisible
000143D8 6600                       		bne.s	@nofire
000143DA 6100 B7AE                  		bsr.w	FindFreeObj
000143DE 6600                       		bne.s	@nofire
000143E0 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
000143E4 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
000143E8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000143EE 3368 000C 000C             		move.w	obY(a0),obY(a1)
000143F4 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000143FA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014400                            
00014400                            	@nofire:
00014400 4E75                       		rts	
00014402                            ; ===========================================================================
00014402                            
00014402                            Gar_FireBall:	; Routine 4
00014402 5428 0024                  		addq.b	#2,obRoutine(a0)
00014406 117C 0008 0016             		move.b	#8,obHeight(a0)
0001440C 117C 0008 0017             		move.b	#8,obWidth(a0)
00014412 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001441A 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014420 0028 0004 0001             		ori.b	#4,obRender(a0)
00014426 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001442C 117C 0098 0020             		move.b	#$98,obColType(a0)
00014432 117C 0008 0014             		move.b	#8,obActWid(a0)
00014438 117C 0002 001A             		move.b	#2,obFrame(a0)
0001443E 5068 000C                  		addq.w	#8,obY(a0)
00014442 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014448 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
0001444E 6600                       		bne.s	@noflip		; if not, branch
00014450 4468 0010                  		neg.w	obVelX(a0)
00014454                            
00014454                            	@noflip:
0001445E                            
0001445E                            Gar_AniFire:	; Routine 6
0001445E 1038 FE05                  		move.b	(v_framebyte).w,d0
00014462 0200 0007                  		andi.b	#7,d0
00014466 6600                       		bne.s	@nochg
00014468 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
0001446E                            
0001446E                            	@nochg:
0001446E 6100 B27A                  		bsr.w	SpeedToPos
00014472 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014478 6600                       		bne.s	@isright	; if not, branch
0001447A 76F8                       		moveq	#-8,d3
0001447C 6100 0000                  		bsr.w	ObjHitWallLeft
00014480 4A41                       		tst.w	d1
00014482 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014486 4E75                       		rts	
00014488                            
00014488                            	@isright:
00014488 7608                       		moveq	#8,d3
0001448A 6100 0000                  		bsr.w	ObjHitWallRight
0001448E 4A41                       		tst.w	d1
00014490 6B00 B2AC                  		bmi.w	DeleteObject
00014494 4E75                       		rts	
00014494 4E75                       		rts	
00014496                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014496                            ; ---------------------------------------------------------------------------
00014496                            ; Sprite mappings - gargoyle head (LZ)
00014496                            ; ---------------------------------------------------------------------------
00014496                            Map_Gar_internal:
00014496 0000                       		dc.w @head-Map_Gar_internal
00014498 0000                       		dc.w @head-Map_Gar_internal
0001449A 0000                       		dc.w @fireball1-Map_Gar_internal
0001449C 0000                       		dc.w @fireball2-Map_Gar_internal
0001449E 03                         @head:		dc.b 3
0001449F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000144A4 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000144A9 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000144AE 01                         @fireball1:	dc.b 1
000144AF FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000144B4 01                         @fireball2:	dc.b 1
000144B5 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000144BA                            		even
000144BA                            		even
000144BA                            		include	"_incObj\63 LZ Conveyor.asm"
000144BA                            ; ---------------------------------------------------------------------------
000144BA                            ; Object 63 - platforms	on a conveyor belt (LZ)
000144BA                            ; ---------------------------------------------------------------------------
000144BA                            
000144BA                            LabyrinthConvey:
000144BA 7000                       		moveq	#0,d0
000144BC 1028 0024                  		move.b	obRoutine(a0),d0
000144C0 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
000144C4 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
000144E4                            
000144E4                            LCon_Display:
000144E4 6000 B218                  		bra.w	DisplaySprite
000144E8                            ; ===========================================================================
000144E8                            
000144E8                            loc_1236A:
000144E8 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
000144EE 6600                       		bne.s	loc_12378
000144F0 0C40 FF80                  		cmpi.w	#-$80,d0
000144F4 64EE                       		bcc.s	LCon_Display
000144F6                            
000144F6                            loc_12378:
000144F6 1028 002F                  		move.b	$2F(a0),d0
000144FA 6A00 B242                  		bpl.w	DeleteObject
000144FE 0240 007F                  		andi.w	#$7F,d0
00014502 45F8 F7C1                  		lea	(v_obj63).w,a2
00014506 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001450C 6000 B230                  		bra.w	DeleteObject
00014510                            ; ===========================================================================
00014510 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014512 0000                       		dc.w loc_124B2-LCon_Index
00014514 0000                       		dc.w loc_124C2-LCon_Index
00014516 0000                       		dc.w loc_124DE-LCon_Index
00014518                            ; ===========================================================================
00014518                            
00014518                            LCon_Main:	; Routine 0
00014518 1028 0028                  		move.b	obSubtype(a0),d0
0001451C 6B00 0000                  		bmi.w	loc_12460
00014520 5428 0024                  		addq.b	#2,obRoutine(a0)
00014524 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
0001452C 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00014532 0028 0004 0001             		ori.b	#4,obRender(a0)
00014538 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001453E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014544 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
0001454A 6600                       		bne.s	loc_123E2
0001454C 5828 0024                  		addq.b	#4,obRoutine(a0)
00014550 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
00014556 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001455C 6000 0000                  		bra.w	loc_124DE
00014560                            ; ===========================================================================
00014560                            
00014560                            loc_123E2:
00014560 117C 0004 001A             		move.b	#4,obFrame(a0)
00014566 7000                       		moveq	#0,d0
00014568 1028 0028                  		move.b	obSubtype(a0),d0
0001456C 3200                       		move.w	d0,d1
0001456E E648                       		lsr.w	#3,d0
00014570 0240 001E                  		andi.w	#$1E,d0
00014574 45FA 0000                  		lea	LCon_Data(pc),a2
00014578 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001457C 315A 0038                  		move.w	(a2)+,$38(a0)
00014580 315A 0030                  		move.w	(a2)+,$30(a0)
00014584 214A 003C                  		move.l	a2,$3C(a0)
00014588 0241 000F                  		andi.w	#$F,d1
0001458C E549                       		lsl.w	#2,d1
0001458E 1141 0038                  		move.b	d1,$38(a0)
00014592 117C 0004 003A             		move.b	#4,$3A(a0)
00014598 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001459C 6700                       		beq.s	loc_1244C
0001459E 117C 0001 003B             		move.b	#1,$3B(a0)
000145A4 4428 003A                  		neg.b	$3A(a0)
000145A8 7200                       		moveq	#0,d1
000145AA 1228 0038                  		move.b	$38(a0),d1
000145AE D228 003A                  		add.b	$3A(a0),d1
000145B2 B228 0039                  		cmp.b	$39(a0),d1
000145B6 6500                       		bcs.s	loc_12448
000145B8 1001                       		move.b	d1,d0
000145BA 7200                       		moveq	#0,d1
000145BC 4A00                       		tst.b	d0
000145BE 6A00                       		bpl.s	loc_12448
000145C0 1228 0039                  		move.b	$39(a0),d1
000145C4 5901                       		subq.b	#4,d1
000145C6                            
000145C6                            loc_12448:
000145C6 1141 0038                  		move.b	d1,$38(a0)
000145CA                            
000145CA                            loc_1244C:
000145CA 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000145D0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000145D6 6100 0000                  		bsr.w	LCon_ChangeDir
000145DA 6000 0000                  		bra.w	loc_124B2
000145DE                            ; ===========================================================================
000145DE                            
000145DE                            loc_12460:
000145DE 1140 002F                  		move.b	d0,$2F(a0)
000145E2 0240 007F                  		andi.w	#$7F,d0
000145E6 45F8 F7C1                  		lea	(v_obj63).w,a2
000145EA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000145F0 6600 B14C                  		bne.w	DeleteObject
000145F4 D040                       		add.w	d0,d0
000145F6 0240 001E                  		andi.w	#$1E,d0
000145FA 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
000145FE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014604 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014608 321A                       		move.w	(a2)+,d1
0001460A 2248                       		movea.l	a0,a1
0001460C 6000                       		bra.s	LCon_MakePtfms
0001460E                            ; ===========================================================================
0001460E                            
0001460E                            LCon_Loop:
0001460E 6100 B57A                  		bsr.w	FindFreeObj
00014612 6600                       		bne.s	loc_124AA
00014614                            
00014614                            LCon_MakePtfms:
00014614 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014618 335A 0008                  		move.w	(a2)+,obX(a1)
0001461C 335A 000C                  		move.w	(a2)+,obY(a1)
00014620 301A                       		move.w	(a2)+,d0
00014622 1340 0028                  		move.b	d0,obSubtype(a1)
00014626                            
00014626                            loc_124AA:
00014626 51C9 FFE6                  		dbf	d1,LCon_Loop
0001462A                            
0001462A 588F                       		addq.l	#4,sp
0001462C 4E75                       		rts	
0001462E                            ; ===========================================================================
0001462E                            
0001462E                            loc_124B2:	; Routine 2
0001462E 7200                       		moveq	#0,d1
00014630 1228 0014                  		move.b	obActWid(a0),d1
00014634 4EB9 0000 8E0C             		jsr	(PlatformObject).l
0001463A 6000 0000                  		bra.w	sub_12502
0001463E                            ; ===========================================================================
0001463E                            
0001463E                            loc_124C2:	; Routine 4
0001463E 7200                       		moveq	#0,d1
00014640 1228 0014                  		move.b	obActWid(a0),d1
00014644 4EB9 0000 8F80             		jsr	(ExitPlatform).l
0001464A 3F28 0008                  		move.w	obX(a0),-(sp)
0001464E 6100 0000                  		bsr.w	sub_12502
00014652 341F                       		move.w	(sp)+,d2
00014654 4EF9 0000 94EA             		jmp	(MvSonicOnPtfm2).l
0001465A                            ; ===========================================================================
0001465A                            
0001465A                            loc_124DE:	; Routine 6
0001465A 3038 FE04                  		move.w	(v_framecount).w,d0
0001465E 0240 0003                  		andi.w	#3,d0
00014662 6600                       		bne.s	loc_124FC
00014664 7201                       		moveq	#1,d1
00014666 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001466A 6700                       		beq.s	loc_124F2
0001466C 4401                       		neg.b	d1
0001466E                            
0001466E                            loc_124F2:
0001466E D328 001A                  		add.b	d1,obFrame(a0)
00014672 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014678                            
00014678                            loc_124FC:
00014678 588F                       		addq.l	#4,sp
0001467A 6000 CFF8                  		bra.w	RememberState
0001467E                            
0001467E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001467E                            
0001467E                            
0001467E                            sub_12502:
0001467E 4A38 F7EE                  		tst.b	(f_switch+$E).w
00014682 6700                       		beq.s	loc_12520
00014684 4A28 003B                  		tst.b	$3B(a0)
00014688 6600                       		bne.s	loc_12520
0001468A 117C 0001 003B             		move.b	#1,$3B(a0)
00014690 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014696 4428 003A                  		neg.b	$3A(a0)
0001469A 6000                       		bra.s	loc_12534
0001469C                            ; ===========================================================================
0001469C                            
0001469C                            loc_12520:
0001469C 3028 0008                  		move.w	obX(a0),d0
000146A0 B068 0034                  		cmp.w	$34(a0),d0
000146A4 6600                       		bne.s	loc_1256A
000146A6 3028 000C                  		move.w	obY(a0),d0
000146AA B068 0036                  		cmp.w	$36(a0),d0
000146AE 6600                       		bne.s	loc_1256A
000146B0                            
000146B0                            loc_12534:
000146B0 7200                       		moveq	#0,d1
000146B2 1228 0038                  		move.b	$38(a0),d1
000146B6 D228 003A                  		add.b	$3A(a0),d1
000146BA B228 0039                  		cmp.b	$39(a0),d1
000146BE 6500                       		bcs.s	loc_12552
000146C0 1001                       		move.b	d1,d0
000146C2 7200                       		moveq	#0,d1
000146C4 4A00                       		tst.b	d0
000146C6 6A00                       		bpl.s	loc_12552
000146C8 1228 0039                  		move.b	$39(a0),d1
000146CC 5901                       		subq.b	#4,d1
000146CE                            
000146CE                            loc_12552:
000146CE 1141 0038                  		move.b	d1,$38(a0)
000146D2 2268 003C                  		movea.l	$3C(a0),a1
000146D6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000146DC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000146E2 6100 0000                  		bsr.w	LCon_ChangeDir
000146E6                            
000146E6                            loc_1256A:
000146E6 6100 B002                  		bsr.w	SpeedToPos
000146EA 4E75                       		rts	
000146EC                            ; End of function sub_12502
000146EC                            
000146EC                            
000146EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146EC                            
000146EC                            
000146EC                            LCon_ChangeDir:
000146EC 7000                       		moveq	#0,d0
000146EE 343C FF00                  		move.w	#-$100,d2
000146F2 3028 0008                  		move.w	obX(a0),d0
000146F6 9068 0034                  		sub.w	$34(a0),d0
000146FA 6400                       		bcc.s	loc_12584
000146FC 4440                       		neg.w	d0
000146FE 4442                       		neg.w	d2
00014700                            
00014700                            loc_12584:
00014700 7200                       		moveq	#0,d1
00014702 363C FF00                  		move.w	#-$100,d3
00014706 3228 000C                  		move.w	obY(a0),d1
0001470A 9268 0036                  		sub.w	$36(a0),d1
0001470E 6400                       		bcc.s	loc_12598
00014710 4441                       		neg.w	d1
00014712 4443                       		neg.w	d3
00014714                            
00014714                            loc_12598:
00014714 B240                       		cmp.w	d0,d1
00014716 6500                       		bcs.s	loc_125C2
00014718 3028 0008                  		move.w	obX(a0),d0
0001471C 9068 0034                  		sub.w	$34(a0),d0
00014720 6700                       		beq.s	loc_125AE
00014722 48C0                       		ext.l	d0
00014724 E180                       		asl.l	#8,d0
00014726 81C1                       		divs.w	d1,d0
00014728 4440                       		neg.w	d0
0001472A                            
0001472A                            loc_125AE:
0001472A 3140 0010                  		move.w	d0,obVelX(a0)
0001472E 3143 0012                  		move.w	d3,obVelY(a0)
00014732 4840                       		swap	d0
00014734 3140 000A                  		move.w	d0,obX+2(a0)
00014738 4268 000E                  		clr.w	obY+2(a0)
0001473C 4E75                       		rts	
0001473E                            ; ===========================================================================
0001473E                            
0001473E                            loc_125C2:
0001473E 3228 000C                  		move.w	obY(a0),d1
00014742 9268 0036                  		sub.w	$36(a0),d1
00014746 6700                       		beq.s	loc_125D4
00014748 48C1                       		ext.l	d1
0001474A E181                       		asl.l	#8,d1
0001474C 83C0                       		divs.w	d0,d1
0001474E 4441                       		neg.w	d1
00014750                            
00014750                            loc_125D4:
00014750 3141 0012                  		move.w	d1,obVelY(a0)
00014754 3142 0010                  		move.w	d2,obVelX(a0)
00014758 4841                       		swap	d1
0001475A 3141 000E                  		move.w	d1,obY+2(a0)
0001475E 4268 000A                  		clr.w	obX+2(a0)
00014762 4E75                       		rts	
00014764                            ; End of function LCon_ChangeDir
00014764                            
00014764                            ; ===========================================================================
00014764 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014766 0000                       		dc.w word_12610-LCon_Data
00014768 0000                       		dc.w word_12628-LCon_Data
0001476A 0000                       		dc.w word_1263C-LCon_Data
0001476C 0000                       		dc.w word_12650-LCon_Data
0001476E 0000                       		dc.w word_12668-LCon_Data
00014770 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014780 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001478C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001479C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000147A4 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000147B8 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000147CC 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000147E4 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000147E4 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000147F8                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
000147F8                            ; ---------------------------------------------------------------------------
000147F8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000147F8                            ; ---------------------------------------------------------------------------
000147F8                            Map_LConv_internal:
000147F8 0000                       		dc.w @wheel1-Map_LConv_internal
000147FA 0000                       		dc.w @wheel2-Map_LConv_internal
000147FC 0000                       		dc.w @wheel3-Map_LConv_internal
000147FE 0000                       		dc.w @wheel4-Map_LConv_internal
00014800 0000                       		dc.w @platform-Map_LConv_internal
00014802 01                         @wheel1:	dc.b 1
00014803 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014808 01                         @wheel2:	dc.b 1
00014809 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001480E 01                         @wheel3:	dc.b 1
0001480F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014814 01                         @wheel4:	dc.b 1
00014815 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001481A 01                         @platform:	dc.b 1
0001481B F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014820                            		even
00014820                            		even
00014820                            		include	"_incObj\64 Bubbles.asm"
00014820                            ; ---------------------------------------------------------------------------
00014820                            ; Object 64 - bubbles (LZ)
00014820                            ; ---------------------------------------------------------------------------
00014820                            
00014820                            Bubble:
00014820 7000                       		moveq	#0,d0
00014822 1028 0024                  		move.b	obRoutine(a0),d0
00014826 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
0001482A 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
0001482E                            ; ===========================================================================
0001482E 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014830 0000                       		dc.w Bub_Animate-Bub_Index
00014832 0000                       		dc.w Bub_ChkWater-Bub_Index
00014834 0000                       		dc.w Bub_Display-Bub_Index
00014836 0000                       		dc.w Bub_Delete-Bub_Index
00014838 0000                       		dc.w Bub_BblMaker-Bub_Index
0001483A                            
0001483A =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
0001483A =00000030                  bub_origX:	equ $30		; original x-axis position
0001483A =00000032                  bub_time:	equ $32		; time until next bubble spawn
0001483A =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
0001483A                            ; ===========================================================================
0001483A                            
0001483A                            Bub_Main:	; Routine 0
0001483A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001483E 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014846 317C 8348 0002             		move.w	#$8348,obGfx(a0)
0001484C 117C 0084 0001             		move.b	#$84,obRender(a0)
00014852 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014858 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001485E 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014862 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014864                            
00014864 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014868 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001486C 1140 0032                  		move.b	d0,bub_time(a0)
00014870 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014874 117C 0006 001C             		move.b	#6,obAnim(a0)
0001487A 6000 0000                  		bra.w	Bub_BblMaker
0001487E                            ; ===========================================================================
0001487E                            
0001487E                            @bubble:
0001487E 1140 001C                  		move.b	d0,obAnim(a0)
00014882 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014888 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
0001488E 4EB9 0000 3788             		jsr	(RandomNumber).l
00014894 1140 0026                  		move.b	d0,obAngle(a0)
00014898                            
00014898                            Bub_Animate:	; Routine 2
00014898 43F9 0000 0000             		lea	(Ani_Bub).l,a1
0001489E 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
000148A4 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
000148AA 6600                       		bne.s	Bub_ChkWater	; if not, branch
000148AC                            
000148AC 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
000148B2                            
000148B2                            Bub_ChkWater:	; Routine 4
000148B2 3038 F646                  		move.w	(v_waterpos1).w,d0
000148B6 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
000148BA 6500                       		bcs.s	@wobble		; if yes, branch
000148BC                            
000148BC                            @burst:
000148BC 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
000148C2 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
000148C6 6000 0000                  		bra.w	Bub_Display
000148CA                            ; ===========================================================================
000148CA                            
000148CA                            @wobble:
000148CA 1028 0026                  		move.b	obAngle(a0),d0
000148CE 5228 0026                  		addq.b	#1,obAngle(a0)
000148D2 0240 007F                  		andi.w	#$7F,d0
000148D6 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000148DC 1031 0000                  		move.b	(a1,d0.w),d0
000148E0 4880                       		ext.w	d0
000148E2 D068 0030                  		add.w	bub_origX(a0),d0
000148E6 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
000148EA 4A28 002E                  		tst.b	bub_inhalable(a0)
000148EE 6700                       		beq.s	@display
000148F0 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
000148F4 6700                       		beq.s	@display	; if not, branch
000148F6                            
000148F6 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014904 43F8 D000                  		lea	(v_player).w,a1
00014908 4269 0010                  		clr.w	obVelX(a1)
0001490C 4269 0012                  		clr.w	obVelY(a1)
00014910 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014914 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
0001491A 337C 0023 003E             		move.w	#$23,$3E(a1)
00014920 137C 0000 003C             		move.b	#0,$3C(a1)
00014926 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001492C 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014932 0829 0002 0022             		btst	#2,obStatus(a1)
00014938 6700 FF82                  		beq.w	@burst
0001493C 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014942 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014948 137C 0009 0017             		move.b	#9,obWidth(a1)
0001494E 5B69 000C                  		subq.w	#5,obY(a1)
00014952 6000 FF68                  		bra.w	@burst
00014956                            ; ===========================================================================
00014956                            
00014956                            @display:
00014956 6100 AD92                  		bsr.w	SpeedToPos
0001495A 4A28 0001                  		tst.b	obRender(a0)
0001495E 6A00                       		bpl.s	@delete
00014960 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00014966                            
00014966                            	@delete:
00014966 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001496C                            ; ===========================================================================
0001496C                            
0001496C                            Bub_Display:	; Routine 6
0001496C 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014972 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00014978 4A28 0001                  		tst.b	obRender(a0)
0001497C 6A00                       		bpl.s	@delete
0001497E 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00014984                            
00014984                            	@delete:
00014984 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001498A                            ; ===========================================================================
0001498A                            
0001498A                            Bub_Delete:	; Routine 8
0001498A 6000 ADB2                  		bra.w	DeleteObject
0001498E                            ; ===========================================================================
0001498E                            
0001498E                            Bub_BblMaker:	; Routine $A
0001498E 4A68 0036                  		tst.w	$36(a0)
00014992 6600                       		bne.s	@loc_12874
00014994 3038 F646                  		move.w	(v_waterpos1).w,d0
00014998 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
0001499C 6400 0000                  		bcc.w	@chkdel		; if not, branch
000149A0 4A28 0001                  		tst.b	obRender(a0)
000149A4 6A00 0000                  		bpl.w	@chkdel
000149A8 5368 0038                  		subq.w	#1,$38(a0)
000149AC 6A00 0000                  		bpl.w	@loc_12914
000149B0 317C 0001 0036             		move.w	#1,$36(a0)
000149B6                            
000149B6                            	@tryagain:
000149B6 4EB9 0000 3788             		jsr	(RandomNumber).l
000149BC 3200                       		move.w	d0,d1
000149BE 0240 0007                  		andi.w	#7,d0
000149C2 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
000149C6 64EE                       		bcc.s	@tryagain	; if yes, branch
000149C8                            
000149C8 1140 0034                  		move.b	d0,$34(a0)
000149CC 0241 000C                  		andi.w	#$C,d1
000149D0 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
000149D6 D2C1                       		adda.w	d1,a1
000149D8 2149 003C                  		move.l	a1,$3C(a0)
000149DC 5328 0032                  		subq.b	#1,bub_time(a0)
000149E0 6A00                       		bpl.s	@loc_12872
000149E2 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
000149E8 08E8 0007 0036             		bset	#7,$36(a0)
000149EE                            
000149EE                            @loc_12872:
000149EE 6000                       		bra.s	@loc_1287C
000149F0                            ; ===========================================================================
000149F0                            
000149F0                            @loc_12874:
000149F0 5368 0038                  		subq.w	#1,$38(a0)
000149F4 6A00 0000                  		bpl.w	@loc_12914
000149F8                            
000149F8                            @loc_1287C:
000149F8 4EB9 0000 3788             		jsr	(RandomNumber).l
000149FE 0240 001F                  		andi.w	#$1F,d0
00014A02 3140 0038                  		move.w	d0,$38(a0)
00014A06 6100 B182                  		bsr.w	FindFreeObj
00014A0A 6600                       		bne.s	@fail
00014A0C 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014A10 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014A16 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A1C 0240 000F                  		andi.w	#$F,d0
00014A20 5140                       		subq.w	#8,d0
00014A22 D169 0008                  		add.w	d0,obX(a1)
00014A26 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014A2C 7000                       		moveq	#0,d0
00014A2E 1028 0034                  		move.b	$34(a0),d0
00014A32 2468 003C                  		movea.l	$3C(a0),a2
00014A36 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014A3C 0828 0007 0036             		btst	#7,$36(a0)
00014A42 6700                       		beq.s	@fail
00014A44 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A4A 0240 0003                  		andi.w	#3,d0
00014A4E 6600                       		bne.s	@loc_buh
00014A50 08E8 0006 0036             		bset	#6,$36(a0)
00014A56 6600                       		bne.s	@fail
00014A58 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014A5E                            
00014A5E                            @loc_buh:
00014A5E 4A28 0034                  		tst.b	$34(a0)
00014A62 6600                       		bne.s	@fail
00014A64 08E8 0006 0036             		bset	#6,$36(a0)
00014A6A 6600                       		bne.s	@fail
00014A6C 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014A72                            
00014A72                            	@fail:
00014A72 5328 0034                  		subq.b	#1,$34(a0)
00014A76 6A00                       		bpl.s	@loc_12914
00014A78 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A7E 0240 007F                  		andi.w	#$7F,d0
00014A82 0640 0080                  		addi.w	#$80,d0
00014A86 D168 0038                  		add.w	d0,$38(a0)
00014A8A 4268 0036                  		clr.w	$36(a0)
00014A8E                            
00014A8E                            @loc_12914:
00014A8E 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014A94 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00014A9A                            
00014A9A                            @chkdel:
00014AB8 3038 F646                  		move.w	(v_waterpos1).w,d0
00014ABC B068 000C                  		cmp.w	obY(a0),d0
00014AC0 6500 AC3C                  		bcs.w	DisplaySprite
00014AC4 4E75                       		rts	
00014AC6                            ; ===========================================================================
00014AC6                            ; bubble production sequence
00014AC6                            
00014AC6                            ; 0 = small bubble, 1 =	large bubble
00014AC6                            
00014AC6 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014AD8                            
00014AD8                            ; ===========================================================================
00014AD8                            
00014AD8                            Bub_ChkSonic:
00014AD8 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014ADC 6B00                       		bmi.s	@loc_12998
00014ADE 43F8 D000                  		lea	(v_player).w,a1
00014AE2 3029 0008                  		move.w	obX(a1),d0
00014AE6 3228 0008                  		move.w	obX(a0),d1
00014AEA 0441 0010                  		subi.w	#$10,d1
00014AEE B240                       		cmp.w	d0,d1
00014AF0 6400                       		bcc.s	@loc_12998
00014AF2 0641 0020                  		addi.w	#$20,d1
00014AF6 B240                       		cmp.w	d0,d1
00014AF8 6500                       		bcs.s	@loc_12998
00014AFA 3029 000C                  		move.w	obY(a1),d0
00014AFE 3228 000C                  		move.w	obY(a0),d1
00014B02 B240                       		cmp.w	d0,d1
00014B04 6400                       		bcc.s	@loc_12998
00014B06 0641 0010                  		addi.w	#$10,d1
00014B0A B240                       		cmp.w	d0,d1
00014B0C 6500                       		bcs.s	@loc_12998
00014B0E 7001                       		moveq	#1,d0
00014B10 4E75                       		rts	
00014B12                            ; ===========================================================================
00014B12                            
00014B12                            @loc_12998:
00014B12 7000                       		moveq	#0,d0
00014B14 4E75                       		rts	
00014B14 4E75                       		rts	
00014B16                            		include	"_anim\Bubbles.asm"
00014B16                            ; ---------------------------------------------------------------------------
00014B16                            ; Animation script - bubbles (LZ)
00014B16                            ; ---------------------------------------------------------------------------
00014B16 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014B18 0000                       		dc.w @medium-Ani_Bub
00014B1A 0000                       		dc.w @large-Ani_Bub
00014B1C 0000                       		dc.w @incroutine-Ani_Bub
00014B1E 0000                       		dc.w @incroutine-Ani_Bub
00014B20 0000                       		dc.w @burst-Ani_Bub
00014B22 0000                       		dc.w @bubmaker-Ani_Bub
00014B24 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014B2A 00                         		even
00014B2A 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014B30 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014B38 00                         		even
00014B38 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014B3A 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014B40 00                         		even
00014B40 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014B46 00                         		even
00014B46 00                         		even
00014B46                            Map_Bub:	include	"_maps\Bubbles.asm"
00014B46                            ; ---------------------------------------------------------------------------
00014B46                            ; Sprite mappings - bubbles (LZ)
00014B46                            ; ---------------------------------------------------------------------------
00014B46                            Map_Bub_internal:
00014B46 0000                       		dc.w @bubble1-Map_Bub_internal
00014B48 0000                       		dc.w @bubble2-Map_Bub_internal
00014B4A 0000                       		dc.w @bubble3-Map_Bub_internal
00014B4C 0000                       		dc.w @bubble4-Map_Bub_internal
00014B4E 0000                       		dc.w @bubble5-Map_Bub_internal
00014B50 0000                       		dc.w @bubble6-Map_Bub_internal
00014B52 0000                       		dc.w @bubblefull-Map_Bub_internal
00014B54 0000                       		dc.w @burst1-Map_Bub_internal
00014B56 0000                       		dc.w @burst2-Map_Bub_internal
00014B58 0000                       		dc.w @zero_sm-Map_Bub_internal
00014B5A 0000                       		dc.w @five_sm-Map_Bub_internal
00014B5C 0000                       		dc.w @three_sm-Map_Bub_internal
00014B5E 0000                       		dc.w @one_sm-Map_Bub_internal
00014B60 0000                       		dc.w @zero-Map_Bub_internal
00014B62 0000                       		dc.w @five-Map_Bub_internal
00014B64 0000                       		dc.w @four-Map_Bub_internal
00014B66 0000                       		dc.w @three-Map_Bub_internal
00014B68 0000                       		dc.w @two-Map_Bub_internal
00014B6A 0000                       		dc.w @one-Map_Bub_internal
00014B6C 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014B6E 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014B70 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014B72 0000                       		dc.w @blank-Map_Bub_internal
00014B74 01                         @bubble1:	dc.b 1
00014B75 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014B7A 01                         @bubble2:	dc.b 1
00014B7B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014B80 01                         @bubble3:	dc.b 1
00014B81 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014B86 01                         @bubble4:	dc.b 1
00014B87 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014B8C 01                         @bubble5:	dc.b 1
00014B8D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014B92 01                         @bubble6:	dc.b 1
00014B93 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014B98 01                         @bubblefull:	dc.b 1
00014B99 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014B9E 04                         @burst1:	dc.b 4
00014B9F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014BA4 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014BA9 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014BAE 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014BB3 04                         @burst2:	dc.b 4
00014BB4 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014BB9 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014BBE 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014BC3 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014BC8 01                         @zero_sm:	dc.b 1
00014BC9 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014BCE 01                         @five_sm:	dc.b 1
00014BCF F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014BD4 01                         @three_sm:	dc.b 1
00014BD5 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014BDA 01                         @one_sm:	dc.b 1
00014BDB F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014BE0 01                         @zero:		dc.b 1
00014BE1 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014BE6 01                         @five:		dc.b 1
00014BE7 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014BEC 01                         @four:		dc.b 1
00014BED F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014BF2 01                         @three:		dc.b 1
00014BF3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014BF8 01                         @two:		dc.b 1
00014BF9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014BFE 01                         @one:		dc.b 1
00014BFF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014C04 01                         @bubmaker1:	dc.b 1
00014C05 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014C0A 01                         @bubmaker2:	dc.b 1
00014C0B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014C10 01                         @bubmaker3:	dc.b 1
00014C11 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014C16 00                         @blank:		dc.b 0
00014C18 00                         		even
00014C18 00                         		even
00014C18                            		include	"_incObj\65 Waterfalls.asm"
00014C18                            ; ---------------------------------------------------------------------------
00014C18                            ; Object 65 - waterfalls (LZ)
00014C18                            ; ---------------------------------------------------------------------------
00014C18                            
00014C18                            Waterfall:
00014C18 7000                       		moveq	#0,d0
00014C1A 1028 0024                  		move.b	obRoutine(a0),d0
00014C1E 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014C22 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014C26                            ; ===========================================================================
00014C26 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014C28 0000                       		dc.w WFall_Animate-WFall_Index
00014C2A 0000                       		dc.w WFall_ChkDel-WFall_Index
00014C2C 0000                       		dc.w WFall_OnWater-WFall_Index
00014C2E 0000                       		dc.w loc_12B36-WFall_Index
00014C30                            ; ===========================================================================
00014C30                            
00014C30                            WFall_Main:	; Routine 0
00014C30 5828 0024                  		addq.b	#4,obRoutine(a0)
00014C34 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014C3C 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014C42 0028 0004 0001             		ori.b	#4,obRender(a0)
00014C48 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014C4E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014C54 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014C58 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014C5A 08E8 0007 0002             		bset	#7,obGfx(a0)
00014C60                            
00014C60                            	@under80:
00014C60 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014C64 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014C68 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014C6C 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014C6E                            
00014C6E 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014C72 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014C76 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014C7C 6700                       		beq.s	@not49		; if not, branch
00014C7E                            
00014C7E 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014C84                            
00014C84                            	@not49:
00014C84 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014C8A 6700                       		beq.s	WFall_Animate	; if not, branch
00014C8C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014C92                            
00014C92                            WFall_Animate:	; Routine 2
00014C92 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014C98 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00014C9E                            
00014C9E                            WFall_ChkDel:	; Routine 4
00014C9E 6000 C9D4                  		bra.w	RememberState
00014CA2                            ; ===========================================================================
00014CA2                            
00014CA2                            WFall_OnWater:	; Routine 6
00014CA2 3038 F646                  		move.w	(v_waterpos1).w,d0
00014CA6 0440 0010                  		subi.w	#$10,d0
00014CAA 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014CAE 60E2                       		bra.s	WFall_Animate
00014CB0                            ; ===========================================================================
00014CB0                            
00014CB0                            loc_12B36:	; Routine 8
00014CB0 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014CB6 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014CBC 6600                       		bne.s	@animate
00014CBE 08E8 0007 0002             		bset	#7,obGfx(a0)
00014CC4                            
00014CC4                            	@animate:
00014CC4 60CC                       		bra.s	WFall_Animate
00014CC4 60CC                       		bra.s	WFall_Animate
00014CC6                            		include	"_anim\Waterfalls.asm"
00014CC6                            ; ---------------------------------------------------------------------------
00014CC6                            ; Animation script - waterfall (LZ)
00014CC6                            ; ---------------------------------------------------------------------------
00014CC6 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014CC8 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014CCE 00                         		even
00014CCE 00                         		even
00014CCE                            Map_WFall	include	"_maps\Waterfalls.asm"
00014CCE                            ; ---------------------------------------------------------------------------
00014CCE                            ; Sprite mappings - waterfalls (LZ)
00014CCE                            ; ---------------------------------------------------------------------------
00014CCE                            Map_WFall_internal:
00014CCE 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014CD0 0000                       		dc.w @cornerwide-Map_WFall_internal
00014CD2 0000                       		dc.w @cornermedium-Map_WFall_internal
00014CD4 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014CD6 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014CD8 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014CDA 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014CDC 0000                       		dc.w @vertwide-Map_WFall_internal
00014CDE 0000                       		dc.w @diagonal-Map_WFall_internal
00014CE0 0000                       		dc.w @splash1-Map_WFall_internal
00014CE2 0000                       		dc.w @splash2-Map_WFall_internal
00014CE4 0000                       		dc.w @splash3-Map_WFall_internal
00014CE6 01                         @vertnarrow:	dc.b 1
00014CE7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014CEC 02                         @cornerwide:	dc.b 2
00014CED F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014CF2 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014CF7 02                         @cornermedium:	dc.b 2
00014CF8 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014CFD 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014D02 01                         @cornernarrow:	dc.b 1
00014D03 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014D08 02                         @cornermedium2:	dc.b 2
00014D09 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014D0E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014D13 01                         @cornernarrow2:	dc.b 1
00014D14 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014D19 01                         @cornernarrow3:	dc.b 1
00014D1A F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014D1F 01                         @vertwide:	dc.b 1
00014D20 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014D25 02                         @diagonal:	dc.b 2
00014D26 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014D2B 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014D30 02                         @splash1:	dc.b 2
00014D31 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014D36 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014D3B 02                         @splash2:	dc.b 2
00014D3C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014D41 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014D46 02                         @splash3:	dc.b 2
00014D47 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014D4C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014D52 00                         		even
00014D52 00                         		even
00014D52                            
00014D52                            
00014D52                            SpinDash_dust:
00014D52                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014D52 7000                       		moveq	#0,d0
00014D54 1028 0024                  		move.b	$24(a0),d0
00014D58 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014D5C 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014D60                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D60 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014D62 0000                       		dc loc_1DD90-off_1DD2E; 1
00014D64 0000                       		dc loc_1DE46-off_1DD2E; 2
00014D66 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014D68                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D68                            
00014D68                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014D68 5428 0024                  		addq.b	#2,$24(a0)
00014D6C 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014D74 0028 0004 0001             		or.b	#4,1(a0)
00014D7A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014D80 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014D86 317C 07AC 0002             		move	#$7AC,2(a0)
00014D8C 317C D000 003E             		move	#-$3000,$3E(a0)
00014D92 317C F580 003C             		move	#$F580,$3C(a0)
00014D98 B0FC D1C0                  		cmp	#-$2E40,a0
00014D9C 6700                       		beq.s	loc_1DD8C
00014D9E 117C 0001 0034             		move.b	#1,$34(a0)
00014DA4                            ;		cmp	#2,($FFFFFF70).w
00014DA4                            ;		beq.s	loc_1DD8C
00014DA4                            ;		move	#$48C,2(a0)
00014DA4                            ;		move	#-$4FC0,$3E(a0)
00014DA4                            ;		move	#-$6E80,$3C(a0)
00014DA4                            
00014DA4                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014DA4                            ;		bsr.w	sub_16D6E
00014DA4                            
00014DA4                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014DA4 3468 003E                  		movea.w	$3E(a0),a2
00014DA8 7000                       		moveq	#0,d0
00014DAA 1028 001C                  		move.b	$1C(a0),d0
00014DAE D040                       		add	d0,d0
00014DB0 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014DB4 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014DB8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DB8 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014DBA 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014DBC 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014DBE 0000                       		dc loc_1DE20-off_1DDA4; 3
00014DC0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DC0                            
00014DC0                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014DC0 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014DC6 4A28 001D                  		tst.b	$1D(a0)
00014DCA 6600                       		bne.s	loc_1DE28
00014DCC 316A 0008 0008             		move	8(a2),8(a0)
00014DD2 117C 0000 0022             		move.b	#0,$22(a0)
00014DD8 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014DDE 6000                       		bra.s	loc_1DE28
00014DE0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DE0                            
00014DE0                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014DE0                            ;		cmp.b	#$C,$28(a2)
00014DE0                            ;		bcs.s	loc_1DE3E
00014DE0 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014DE6 6400                       		bcc.s	loc_1DE3E
00014DE8 4A2A 0039                  		tst.b	$39(a2)
00014DEC 6700                       		beq.s	loc_1DE3E
00014DEE 316A 0008 0008             		move	8(a2),8(a0)
00014DF4 316A 000C 000C             		move	$C(a2),$C(a0)
00014DFA 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014E00 0228 0001 0022             		and.b	#1,$22(a0)
00014E06 4A28 0034                  		tst.b	$34(a0)
00014E0A 6700                       		beq.s	loc_1DE06
00014E0C 5968 000C                  		sub	#4,$C(a0)
00014E10                            
00014E10                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014E10 4A28 001D                  		tst.b	$1D(a0)
00014E14 6600                       		bne.s	loc_1DE28
00014E16 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014E1C 4A6A 0002                  		tst	2(a2)
00014E20 6A00                       		bpl.s	loc_1DE28
00014E22 0068 8000 0002             		or	#-$8000,2(a0)
00014E28                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E28                            
00014E28                            loc_1DE20:				; DATA XREF: h+6E30?o
00014E28                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014E28 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014E2E 4EB9 0000 C7AA             		jsr	AnimateSprite
00014E34 6100 0000                  		bsr.w	loc_1DEE4
00014E38 4EFA A8C4                  		jmp	DisplaySprite
00014E3C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E3C                            
00014E3C                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014E3C 117C 0000 001C             		move.b	#0,$1C(a0)
00014E42 4E75                       		rts	
00014E44                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E44                            
00014E44                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014E44 6000 A8F8                  		bra.w	DeleteObject
00014E48                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E48                            
00014E48                            
00014E48                            
00014E48                            loc_1DE4A:
00014E48 3468 003E                  	movea.w	$3E(a0),a2
00014E4C 7210                       	moveq	#$10,d1
00014E4E 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014E54 6700                       	beq.s	loc_1DE64
00014E56 7206                       	moveq	#$6,d1
00014E58 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014E5E 6700                       	beq.s	loc_1DE64
00014E60 117C 0002 0024             	move.b	#2,$24(a0)
00014E66 117C 0000 0032             	move.b	#0,$32(a0)
00014E6C 4E75                       	rts
00014E6E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E6E                            
00014E6E                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014E6E 5328 0032                  		subq.b	#1,$32(a0)
00014E72 6A00                       		bpl.s	loc_1DEE0
00014E74 117C 0003 0032             		move.b	#3,$32(a0)
00014E7A 4EBA AD0E                  		jsr	FindFreeObj
00014E7E 6600                       		bne.s	loc_1DEE0
00014E80 1290                       		move.b	0(a0),0(a1)
00014E82 336A 0008 0008             		move	8(a2),8(a1)
00014E88 336A 000C 000C             		move	$C(a2),$C(a1)
00014E8E 4A28 0034                  		tst.b	$34(a0)
00014E92 6700                       		beq.s	loc_1DE9A
00014E94 5941                       		sub	#4,d1
00014E96                            
00014E96                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014E96 D369 000C                  		add	d1,$C(a1)
00014E9A 137C 0000 0022             		move.b	#0,$22(a1)
00014EA0 137C 0003 001C             		move.b	#3,$1C(a1)
00014EA6 5429 0024                  		addq.b	#2,$24(a1)
00014EAA 2368 0004 0004             		move.l	4(a0),4(a1)
00014EB0 1368 0001 0001             		move.b	1(a0),1(a1)
00014EB6 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014EBC 137C 0004 0014             		move.b	#4,obActWid(a1)
00014EC2 3368 0002 0002             		move	2(a0),2(a1)
00014EC8 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014ECE 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014ED4 4A6A 0002                  		tst	2(a2)
00014ED8 6A00                       		bpl.s	loc_1DEE0
00014EDA 0069 8000 0002             		or	#-$8000,2(a1)
00014EE0                            
00014EE0                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014EE0 6100                       		bsr.s	loc_1DEE4
00014EE2 4E75                       		rts	
00014EE4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EE4                            
00014EE4                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014EE4 7000                       		moveq	#0,d0
00014EE6 1028 001A                  		move.b	$1A(a0),d0
00014EEA B028 0030                  		cmp.b	$30(a0),d0
00014EEE 6700 0000                  		beq.w	locret_1DF36
00014EF2 1140 0030                  		move.b	d0,$30(a0)
00014EF6 45F9 0000 0000             		lea	(off_1E074).l,a2
00014EFC D040                       		add	d0,d0
00014EFE D4F2 0000                  		add	(a2,d0.w),a2
00014F02 3A1A                       		move	(a2)+,d5
00014F04 5345                       		subq	#1,d5
00014F06 6B00 0000                  		bmi.w	locret_1DF36
00014F0A 3828 003C                  		move $3C(a0),d4
00014F0E                            
00014F0E                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014F0E 7200                       		moveq	#0,d1
00014F10 321A                       		move	(a2)+,d1
00014F12 3601                       		move	d1,d3
00014F14 E04B                       		lsr.w	#8,d3
00014F16 0243 00F0                  		and	#$F0,d3	; 'ð'
00014F1A 0643 0010                  		add	#$10,d3
00014F1E 0241 0FFF                  		and	#$FFF,d1
00014F22 EB89                       		lsl.l	#5,d1
00014F24 0681 0000 0000             		add.l	#Art_Dust,d1
00014F2A 3404                       		move	d4,d2
00014F2C D843                       		add	d3,d4
00014F2E D843                       		add	d3,d4
00014F30 4EB9 0000 11A2             		jsr	(QueueDMATransfer).l
00014F36 51CD FFD6                  		dbf	d5,loc_1DF0A
00014F3A 4E75                           rts
00014F3C                            
00014F3C                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014F3C 4E75                       		rts	
00014F3E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F3E 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014F40 0000                       		dc byte_1DF43-off_1DF38; 1
00014F42 0000                       		dc byte_1DF4F-off_1DF38; 2
00014F44 0000                       		dc byte_1DF58-off_1DF38; 3
00014F46 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014F49 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014F55 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014F5E 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014F64                            ; -------------------------------------------------------------------------------
00014F64                            ; Unknown Sprite Mappings
00014F64                            ; -------------------------------------------------------------------------------
00014F64                            MapUnc_1DF5E:
00014F64 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014F66 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014F68 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014F6A 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014F6C 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014F6E 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014F70 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014F72 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014F74 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014F76 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014F78 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014F7A 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014F7C 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014F7E 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014F80 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014F82 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014F84 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014F86 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014F88 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014F8A 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014F8C 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014F8E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014F90 00                         word_1DF8A:	dc.b 0
00014F91 01                         word_1DF8C:	dc.b 1
00014F92 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014F97 01                         word_1DF96:	dc.b 1
00014F98 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F9D 01                         word_1DFA0:	dc.b 1
00014F9E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FA3 01                         word_1DFAA:	dc.b 1
00014FA4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FA9 01                         word_1DFB4:	dc.b 1
00014FAA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FAF 01                         word_1DFBE:	dc.b 1
00014FB0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FB5 01                         word_1DFC8:	dc.b 1
00014FB6 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FBB 01                         word_1DFD2:	dc.b 1
00014FBC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FC1 01                         word_1DFDC:	dc.b 1
00014FC2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FC7 01                         word_1DFE6:	dc.b 1
00014FC8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FCD 01                         word_1DFF0:	dc.b 1
00014FCE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FD3 01                         word_1DFFA:	dc.b 1
00014FD4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FD9 02                         word_1E004:	dc.b 2
00014FDA F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014FDF 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014FE4 02                         word_1E016:	dc.b 2
00014FE5 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014FEA 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014FEF 02                         word_1E028:	dc.b 2
00014FF0 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014FF5 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014FFA 02                         word_1E03A:	dc.b 2
00014FFB F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015000 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015005 01                         word_1E04C:	dc.b 1
00015006 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001500B 01                         word_1E056:	dc.b 1
0001500C F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015011 01                         word_1E060:	dc.b 1
00015012 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00015017 01                         word_1E06A:	dc.b 1
00015018 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001501D 00                         	dc.b 0
0001501E 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015020 0000                       	dc word_1E0A2-off_1E074; 1
00015022 0000                       	dc word_1E0A6-off_1E074; 2
00015024 0000                       	dc word_1E0AA-off_1E074; 3
00015026 0000                       	dc word_1E0AE-off_1E074; 4
00015028 0000                       	dc word_1E0B2-off_1E074; 5
0001502A 0000                       	dc word_1E0B6-off_1E074; 6
0001502C 0000                       	dc word_1E0BA-off_1E074; 7
0001502E 0000                       	dc word_1E0BE-off_1E074; 8
00015030 0000                       	dc word_1E0C2-off_1E074; 9
00015032 0000                       	dc word_1E0C6-off_1E074; 10
00015034 0000                       	dc word_1E0CA-off_1E074; 11
00015036 0000                       	dc word_1E0CE-off_1E074; 12
00015038 0000                       	dc word_1E0D2-off_1E074; 13
0001503A 0000                       	dc word_1E0D8-off_1E074; 14
0001503C 0000                       	dc word_1E0DE-off_1E074; 15
0001503E 0000                       	dc word_1E0E4-off_1E074; 16
00015040 0000                       	dc word_1E0EA-off_1E074; 17
00015042 0000                       	dc word_1E0EA-off_1E074; 18
00015044 0000                       	dc word_1E0EA-off_1E074; 19
00015046 0000                       	dc word_1E0EA-off_1E074; 20
00015048 0000                       	dc word_1E0EC-off_1E074; 21
0001504A 0000                       word_1E0A0:	dc 0
0001504C 0001                       word_1E0A2:	dc 1
0001504E 7000                       	dc $7000
00015050 0001                       word_1E0A6:	dc 1
00015052 F008                       	dc $F008
00015054 0001                       word_1E0AA:	dc 1
00015056 F018                       	dc $F018
00015058 0001                       word_1E0AE:	dc 1
0001505A F028                       	dc $F028
0001505C 0001                       word_1E0B2:	dc 1
0001505E F038                       	dc $F038
00015060 0001                       word_1E0B6:	dc 1
00015062 F048                       	dc $F048
00015064 0001                       word_1E0BA:	dc 1
00015066 7058                       	dc $7058
00015068 0001                       word_1E0BE:	dc 1
0001506A 7060                       	dc $7060
0001506C 0001                       word_1E0C2:	dc 1
0001506E 7068                       	dc $7068
00015070 0001                       word_1E0C6:	dc 1
00015072 7070                       	dc $7070
00015074 0001                       word_1E0CA:	dc 1
00015076 7078                       	dc $7078
00015078 0001                       word_1E0CE:	dc 1
0001507A 7080                       	dc $7080
0001507C 0002                       word_1E0D2:	dc 2
0001507E 1088                       	dc $1088
00015080 708A                       	dc $708A
00015082 0002                       word_1E0D8:	dc 2
00015084 3092                       	dc $3092
00015086 7096                       	dc $7096
00015088 0002                       word_1E0DE:	dc 2
0001508A 509E                       	dc $509E
0001508C 70A4                       	dc $70A4
0001508E 0002                       word_1E0E4:	dc 2
00015090 50AC                       	dc $50AC
00015092 70B2                       	dc $70B2
00015094 0000                       word_1E0EA:	dc 0
00015096 0001                       word_1E0EC:	dc 1
00015098 F0BA                       	dc $F0BA
0001509A                            	even
0001509A                            
0001509A                            ; ===========================================================================
0001509A                            
0001509A                            LoadPlayerPal:
0001509A 7000                       		moveq	#0,d0
0001509C 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000150A0 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000150A4 4E75                       		rts
000150A6                            
000150A6                            	@palLUT:
000150A6 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
000150AB 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
000150B0                            
000150B0                            LoadPlayerWaterPal:
000150B0 7000                       		moveq	#0,d0
000150B2 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000150B6 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000150BA 4E75                       		rts
000150BC                            
000150BC                            	@palLUT:
000150BC 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
000150C1 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
000150C6                            
000150C6                            ; ---------------------------------------------------------------------------
000150C6                            ; Object 01 - Sonic
000150C6                            ; ---------------------------------------------------------------------------
000150C6                            
000150C6                            SonicPlayer:
000150C6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000150CA 6700                       		beq.s	Sonic_Normal	; if not, branch
000150CC 4EF9 0000 0000             		jmp	(DebugMode).l
000150D2                            ; ===========================================================================
000150D2                            
000150D2                            Sonic_Normal:
000150D2 7000                       		moveq	#0,d0
000150D4 1028 0024                  		move.b	obRoutine(a0),d0
000150D8 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
000150DC 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
000150E0                            ; ===========================================================================
000150E0 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
000150E2 0000                       		dc.w Sonic_Control-Sonic_Index
000150E4 0000                       		dc.w Sonic_Hurt-Sonic_Index
000150E6 0000                       		dc.w Sonic_Death-Sonic_Index
000150E8 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
000150EA                            ; ===========================================================================
000150EA                            
000150EA                            Sonic_Main:	; Routine 0
000150EA 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000150F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000150F4 117C 0013 0016             		move.b	#$13,obHeight(a0)
000150FA 117C 0009 0017             		move.b	#9,obWidth(a0)
00015100 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015108 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001510E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00015114 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001511A 117C 0004 0001             		move.b	#4,obRender(a0)
00015120 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00015126 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
0001512C 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015132 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015138                            
00015138                            Sonic_Control:    ; Routine 2
00015138 4A38 FF8B                   		tst.b	($FFFFFF8B).w
0001513C 6700 0000                  		beq.w	@cont    
00015140 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015142                             
00015142                            	@cont: 
00015142 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
00015146 6700                       		beq.s    loc_12C58    ; if not, branch
00015148 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
0001514E 6700                       		beq.s    loc_12C58    ; if not, branch
00015150 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00015156 4238 F7CC                  		clr.b    (f_lockctrl).w
0001515A 4E75                       		rts
0001515C                            		
0001515C                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
0001515C                            ; ---------------------------------------------------------------------------
0001515C                            ; Subroutine to    horizontally pan the camera view ahead of the player
0001515C                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
0001515C                            ; ---------------------------------------------------------------------------
0001515C                            
0001515C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001515C                            
0001515C                            
0001515C                            Sonic_PanCamera:
0001515C 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
00015160 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
00015164 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
00015166 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
00015168                            
00015168                                @abs_inertia:
00015168                            
00015168                            ; These lines were intended to prevent the Camera from panning while
00015168                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
00015168                            ; However, given that no such object exists in Sonic 1, I just went
00015168                            ; ahead and commented these out.
00015168                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
00015168                            ;        beq.s    @skip                    ; if not, branch
00015168                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
00015168                            ;        bcs.s    @reset_pan                ; if so, branch
00015168                            
00015168                            ; These lines aren't part of the original routine; I added them myself.
00015168                            ; If you've ported the Spin Dash, uncomment the following lines of code
00015168                            ; to allow the camera to pan ahead while charging the Spin Dash:
00015168 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
0001516C 6700                               beq.s    @skip                    ; if not, branch
0001516E 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00015174 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00015176 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00015178                            
00015178                                @skip:
00015178 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
0001517C 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
0001517E 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00015182 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015184                            
00015184                                @pan_right:
00015184 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015186 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
0001518A 6500                               bcs.s    @update_pan                ; if not, branch
0001518C 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
00015190 6000                               bra.s    @update_pan                ; branch
00015192                            ; ---------------------------------------------------------------------------
00015192                            
00015192                                @pan_left:
00015192 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015194 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015198 6400                               bcc.s    @update_pan                ; if not, branch
0001519A 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
0001519E 6000                               bra.s    @update_pan                ; branch
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            
000151A0                                @reset_pan:
000151A0 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000151A4 6700                               beq.s    @update_pan                ; if so, branch
000151A6 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000151A8                                 
000151A8                                @reset_right:
000151A8 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000151AA 6000                               bra.s    @update_pan                ; branch
000151AC                            ; ---------------------------------------------------------------------------
000151AC                            
000151AC                                @reset_left:
000151AC 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000151AE                            
000151AE                                @update_pan:
000151AE 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000151B2 4E75                               rts                                ; return
000151B4                                 
000151B4                            ; End of function Sonic_PanCamera
000151B4                            
000151B4                            
000151B4                            ; ===========================================================================
000151B4                            
000151B4                            loc_12C58:
000151B4 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000151B8 6600                       		bne.s	loc_12C64	; if yes, branch
000151BA 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
000151C0                            
000151C0                            loc_12C64:
000151C0 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
000151C6 6600                       		bne.s	loc_12C7E	; if yes, branch
000151C8 7000                       		moveq	#0,d0
000151CA 1028 0022                  		move.b	obStatus(a0),d0
000151CE 0240 0006                  		andi.w	#6,d0
000151D2 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
000151D6 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
000151DA                            
000151DA                            loc_12C7E:
000151DA 6100                       		bsr.s	Sonic_Display
000151DC 6100 0000                  		bsr.w	Sonic_RecordPosition
000151E0 6100 0000                  		bsr.w	Sonic_Water
000151E4 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
000151EA 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000151F0 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
000151F4 6700                       		beq.s	loc_12CA6
000151F6 4A28 001C                  		tst.b	obAnim(a0)
000151FA 6600                       		bne.s	loc_12CA6
000151FC 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015202                            
00015202                            loc_12CA6:
00015202 6100 0000                  		bsr.w	Sonic_Animate
00015206 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001520A 6B00                       		bmi.s	loc_12CB6
0001520C 4EB9 0000 0000             		jsr	(ReactToItem).l
00015212                            
00015212                            loc_12CB6:
00015212 6100 0000                  		bsr.w	Sonic_Loops
00015216 6100 0000                  		bsr.w	Sonic_LoadGfx
0001521A 4E75                       		rts	
0001521C                            ; ===========================================================================
0001521C 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
0001521E 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015220 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015222 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
00015224                            ; ---------------------------------------------------------------------------
00015224                            ; Music	to play	after invincibility wears off
00015224                            ; ---------------------------------------------------------------------------
00015224                            MusicList2:
00015224 00                         		dc.b bgm_GHZ
00015225 00                         		dc.b bgm_LZ
00015226 00                         		dc.b bgm_MZ
00015227 00                         		dc.b bgm_SLZ
00015228 00                         		dc.b bgm_SYZ
00015229 00                         		dc.b bgm_SBZ
0001522A                            		; The ending doesn't get an entry
0001522A                            		even
0001522A                            
0001522A                            		include	"_incObj\Sonic Display.asm"
0001522A                            ; ---------------------------------------------------------------------------
0001522A                            ; Subroutine to display Sonic and set music
0001522A                            ; ---------------------------------------------------------------------------
0001522A                            
0001522A                            Sonic_Display:
0001522A 3028 0030                  		move.w    flashtime(a0),d0
0001522E 6700                       		beq.s    @showAfterImage
00015230 5368 0030                  		subq.w    #1,flashtime(a0)
00015234 E648                               	lsr.w    #3,d0
00015236 6400                               	bcc.s    @chkinvincible
00015238                            
00015238                            	@showAfterImage:
00015238 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
0001523C 4A40                       		tst.w    d0                    ; is inertia greater than 0?
0001523E 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015240 4440                       		neg        d0                    ; if not, negate it
00015242                            
00015242                            	@AfterImage_Start:        
00015242 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015246 6700                       		beq.s	@display	; if not, don't show the After Image
00015248                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
00015248                            		;blt.s    @display	; if not, don't show the After Image
00015248                            	
00015248                            	@AfterImage_Start2:    
00015248 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
0001524C 6600                               	bne.s    @display    ; if not have, don't load the After Image
0001524E 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
00015252 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
00015258 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
0001525E 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
00015264                            
00015264                                	@display:
00015264 4EB9 0000 F6FE                     	jsr    (DisplaySprite).l
0001526A                            
0001526A                            	@chkinvincible:
0001526A 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
0001526E 6700                       		beq.s	@chkshoes	; if not, branch
00015270 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015274 6700                       		beq.s	@chkshoes	; if no	time remains, branch
00015276 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
0001527A 6600                       		bne.s	@chkshoes
0001527C 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015280 6600                       		bne.s	@removeinvincible
00015282 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015288 6500                       		bcs.s	@removeinvincible
0001528A 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001528E 4EB9 0000 0FC6                     	jsr	(PlaySound).l    ; play normal music
00015294                            
00015294                            	@removeinvincible:
00015294 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
0001529A                            
0001529A                            	@chkshoes:
0001529A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001529E 6700                       		beq.s	@exit		; if not, branch
000152A0 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000152A4 6700                       		beq.s	@exit
000152A6 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
000152AA 6600                       		bne.s	@exit
000152AC 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000152B2 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000152B8 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000152BE 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
000152C4 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000152C8 4EB9 0000 0FC6                     	jsr	(PlaySound).l    ; play normal music
000152CE                            		
000152CE                            	@exit:
000152CE 4E75                       		rts	
000152CE 4E75                       		rts	
000152D0                            		include	"_incObj\Sonic RecordPosition.asm"
000152D0                            ; ---------------------------------------------------------------------------
000152D0                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000152D0                            ; ---------------------------------------------------------------------------
000152D0                            
000152D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152D0                            
000152D0                            
000152D0                            Sonic_RecordPosition:
000152D0 3038 F7A8                  		move.w	(v_trackpos).w,d0
000152D4 43F8 CB00                  		lea	(v_tracksonic).w,a1
000152D8 43F1 0000                  		lea	(a1,d0.w),a1
000152DC 32E8 0008                  		move.w	obX(a0),(a1)+
000152E0 32E8 000C                  		move.w	obY(a0),(a1)+
000152E4 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
000152E8 4E75                       		rts	
000152EA                            ; End of function Sonic_RecordPosition
000152EA                            ; End of function Sonic_RecordPosition
000152EA                            		include	"_incObj\Sonic Water.asm"
000152EA                            ; ---------------------------------------------------------------------------
000152EA                            ; Subroutine for Sonic when he's underwater
000152EA                            ; ---------------------------------------------------------------------------
000152EA                            
000152EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152EA                            
000152EA                            
000152EA                            Sonic_Water:
000152EA 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
000152F0 6700                       		beq.s	WaterTagforMZ	; if yes, branch
000152F2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
000152F8 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
000152FA                            
000152FA                            	Sonic_Water_Exit:
000152FA 4E75                       		rts	
000152FC                            ; ===========================================================================
000152FC                            
000152FC                            	Sonic_Water_LZ:
000152FC 3038 F646                  		move.w	(v_waterpos1).w,d0
00015300 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015304 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015308 6000 0000                  		bra	WaterStatus
0001530C                            	WaterTagforMZ:
0001530C 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015312 6700 0000                  		beq.w	Abovewater	; if yes, branch
00015316                            		;move.w #$F,d0             ;TIS Length ($F = full line)
00015316                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
00015316                                ;    lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015316                            	;	jsr	Palload_Loop
00015316                            	WaterStatus:
00015316 08E8 0006 0022             		bset	#6,obStatus(a0)
0001531C 6600 FFDC                  		bne.w	Sonic_Water_Exit
00015320 6100 0000                  		bsr.w	ResumeMusic
00015324 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
0001532A                            
0001532A 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015330 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
00015336 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
0001533C 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
00015342 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
00015348 E0E8 0010                  		asr	obVelX(a0)
0001534C E0E8 0012                  		asr	obVelY(a0)
00015350 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
00015354 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
00015358                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015358 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015368 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001536E 6600 0000                  		bne.w	@return
00015372                            		
00015372                            		
00015372                            	@return:
00015372 4E75                       		rts
00015374                            ; ===========================================================================
00015374                            
00015374                            Abovewater:
00015374 08A8 0006 0022             		bclr	#6,obStatus(a0)
0001537A 6700 FF7E                  		beq.w	Sonic_Water_Exit
0001537E 6100 0000                  		bsr.w	ResumeMusic
00015382 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015388                            
00015388 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001538E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015394 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001539A E1E8 0012                  		asl	obVelY(a0)
0001539E 6700 FF5A                  		beq.w	Sonic_Water_Exit
000153A2 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000153A8 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
000153AE 6E00                       		bgt.s	@belowmaxspeed
000153B0 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
000153B6                            
000153B6                            	@belowmaxspeed:
000153C0                            ; End of function Sonic_Water
000153C0                            ; End of function Sonic_Water
000153C0                            		include "_incObj\03 Hangable Sprite.asm"
000153C0                            ; ===========================================================================
000153C0                            ; ----------------------------------------------------------------------------
000153C0                            ; Object 03 - Invisible sprite that you can hang on to
000153C0                            ; ----------------------------------------------------------------------------
000153C0                            ; Sprite_2C92C:
000153C0                            Obj03:
000153C0 7000                       	moveq    #0,d0
000153C2 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
000153C6 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
000153CA 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
000153CE                            ; ===========================================================================
000153CE                            ; off_2C93A:
000153CE                            Obj03_Index:
000153CE 0000                           dc.w Obj03_Main-Obj03_Index
000153D0 0000                               dc.w Obj03_Init-Obj03_Index
000153D2                            ; ===========================================================================
000153D2                            ; loc_2C93E:
000153D2                            Obj03_Init:
000153D2 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
000153D6 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
000153DC 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
000153E2 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
000153E8                            ; loc_2C954:
000153E8                            Obj03_Main:
000153E8 45E8 0030                      lea    $30(a0),a2
000153EC 43F8 D000                      lea    (v_player).w,a1 ; a1=character
000153F0 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
000153F4 6100                           bsr.s    Obj03_Check
000153F6                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
000153F6                            ;    addq.w    #1,a2                          ;disabled
000153F6                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
000153F6                            ;    bsr.s    Obj03_Check         	;disabled
000153F6 4EF9 0000 0000             	jmp		bonu_chkdel
000153FC                            ; ===========================================================================
000153FC                            ; loc_2C972:
000153FC                            Obj03_Check:
000153FC 4A12                       		tst.b	(a2)
000153FE 6700                       		beq.s	loc_2C9A0
00015400 0200 0070                  		andi.b	#btnABC,d0
00015404 6700 0000                  		beq.w	Obj03_Check_End
00015408 4238 F7C8                  		clr.b	f_lockmulti.w
0001540C 4212                       		clr.b	(a2)
0001540E 157C 0012 0002             		move.b	#$12,2(a2)
00015414 0240 0F00                  		andi.w	#$F00,d0
00015418 6700                       		beq.s	loc_2C954
0001541A 157C 003C 0002             		move.b	#$3C,2(a2)
00015420                            	
00015420                            loc_2C954:
00015420 337C FD00 0012             		move.w	#-$300,y_vel(a1)
00015426 6000 0000                  		bra.w	Obj03_Check_End
0001542A                            ; ===========================================================================
0001542A                            
0001542A                            loc_2C9A0:
0001542A 4A2A 0002                  		tst.b	2(a2)
0001542E 6700                       		beq.s	loc_2C972
00015430 532A 0002                  		subq.b	#1,2(a2)
00015434 6600 0000                  		bne.w	Obj03_Check_End
00015438                            
00015438                            loc_2C972:
00015438 3029 0008                  		move.w	obX(a1),d0
0001543C 9068 0008                  		sub.w	obX(a0),d0
00015440 0640 0018                  		addi.w	#$18,d0
00015444 0C40 0030                  		cmpi.w	#$30,d0
00015448 6400 0000                  		bhs.w	Obj03_Check_End
0001544C 3229 000C                  		move.w	obY(a1),d1
00015450 9268 000C                  		sub.w	obY(a0),d1
00015454 0C41 0010                  		cmpi.w	#$10,d1
00015458 6400 0000                  		bhs.w	Obj03_Check_End
0001545C 4A38 F7C8                  		tst.b	f_lockmulti.w
00015460 6B00                       		bmi.s	Obj03_Check_End
00015462 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00015468 6400                       		bhs.s	Obj03_Check_End
0001546A 4A78 FFFA                  		tst.w	(f_debugmode).w
0001546E 6600                       		bne.s	Obj03_Check_End
00015470 4269 0010                  		clr.w	x_vel(a1)
00015474 4269 0012                  		clr.w	y_vel(a1)
00015478 4269 0020                  		clr.w	obInertia(a1)
0001547C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015482 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015488 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001548E 14BC 0001                  		move.b	#1,(a2)
00015492                            
00015492                            ; return_2CA08:
00015492                            Obj03_Check_End:
00015492 4E75                       		rts
00015492 4E75                       		rts
00015494                            
00015494                            ; ===========================================================================
00015494                            ; ---------------------------------------------------------------------------
00015494                            ; Modes	for controlling	Sonic
00015494                            ; ---------------------------------------------------------------------------
00015494                            
00015494                            Sonic_MdNormal:
00015494 6100 0000                  		bsr.w	Sonic_Peelout
00015498 6100 0000                  		bsr.w	Sonic_SpinDash
0001549C 6100 0000                  		bsr.w	Sonic_Jump
000154A0 6100 0000                  		bsr.w	Sonic_SlopeResist
000154A4 6100 0000                  		bsr.w	Sonic_Move
000154A8 6100 0000                  		bsr.w	Sonic_Roll
000154AC 6100 0000                  		bsr.w	Sonic_LevelBound
000154B0 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
000154B6 6100 0000                  		bsr.w	Sonic_AnglePos
000154BA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000154BE 4E75                       		rts	
000154C0                            
000154C0                            ; ===========================================================================
000154C0                            
000154C0                            Sonic_MdJump:
000154C0 6100 0000                  		bsr.w   Sonic_AirRoll
000154C4 6100 0000                  		bsr.w	Sonic_JumpHeight
000154C8 6100 0000                  		bsr.w	Sonic_JumpDirection
000154CC 6100 0000                  		bsr.w	Sonic_LevelBound
000154D0 4EB9 0000 F6B2             		jsr	(ObjectFall).l
000154D6 0828 0006 0022             		btst	#6,obStatus(a0)
000154DC 6700                       		beq.s	loc_12E5C
000154DE 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000154E4                            
000154E4                            loc_12E5C:
000154E4 6100 0000                  		bsr.w	Sonic_JumpAngle
000154E8 6100 0000                  		bsr.w	Sonic_Floor
000154EC 4E75                       		rts	
000154EE                            ; ===========================================================================
000154EE                            
000154EE                            Sonic_MdRoll:
000154EE 6100 0000                  		bsr.w	Sonic_Jump
000154F2 6100 0000                  		bsr.w	Sonic_RollRepel
000154F6 6100 0000                  		bsr.w	Sonic_RollSpeed
000154FA 6100 0000                  		bsr.w	Sonic_LevelBound
000154FE 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
00015504 6100 0000                  		bsr.w	Sonic_AnglePos
00015508 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001550C 4E75                       		rts	
0001550E                            ; ===========================================================================
0001550E                            
0001550E                            Sonic_MdJump2:
0001550E 6100 0000                  		bsr.w	Sonic_JumpHeight
00015512 6100 0000                  		bsr.w	Sonic_JumpDirection
00015516 6100 0000                  		bsr.w	Sonic_LevelBound
0001551A 4EB9 0000 F6B2             		jsr	(ObjectFall).l
00015520 0828 0006 0022             		btst	#6,obStatus(a0)
00015526 6700                       		beq.s	loc_12EA6
00015528 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001552E                            
0001552E                            loc_12EA6:
0001552E 6100 0000                  		bsr.w	Sonic_JumpAngle
00015532 6100 0000                  		bsr.w	Sonic_Floor
00015536 4E75                       		rts	
00015538                            
00015538                            		include	"_incObj\Sonic Move.asm"
00015538                            ; ---------------------------------------------------------------------------
00015538                            ; Subroutine to	make Sonic walk/run
00015538                            ; ---------------------------------------------------------------------------
00015538                            
00015538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015538                            
00015538                            
00015538                            Sonic_Move:
00015538 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001553C 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015540 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015544 4A38 F7CA                  		tst.b	(f_jumponly).w
00015548 6600 0000                  		bne.w	loc_12FEE
0001554C 4A68 003E                  		tst.w	$3E(a0)
00015550 6600 0000                  		bne.w	Sonic_ResetScr
00015554 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001555A 6700                       		beq.s	@notleft	; if not, branch
0001555C 6100 0000                  		bsr.w	Sonic_MoveLeft
00015560                            
00015560                            	@notleft:
00015560 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015566 6700                       		beq.s	@notright	; if not, branch
00015568 6100 0000                  		bsr.w	Sonic_MoveRight
0001556C                            
0001556C                            	@notright:
0001556C 1028 0026                  		move.b	obAngle(a0),d0
00015570 0600 0020                  		addi.b	#$20,d0
00015574 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015578 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001557C 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015580 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015584 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001558A 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015590 0828 0003 0022             		btst	#3,obStatus(a0)
00015596 6700                       		beq.s	Sonic_Balance
00015598 7000                       		moveq	#0,d0
0001559A 1028 003D                  		move.b	$3D(a0),d0
0001559E ED48                       		lsl.w	#6,d0
000155A0 43F8 D000                  		lea	(v_objspace).w,a1
000155A4 43F1 0000                  		lea	(a1,d0.w),a1
000155A8 4A29 0022                  		tst.b	obStatus(a1)
000155AC 6B00                       		bmi.s	Sonic_LookUp
000155AE 7200                       		moveq	#0,d1
000155B0 1229 0014                  		move.b	obActWid(a1),d1
000155B4 3401                       		move.w	d1,d2
000155B6 D442                       		add.w	d2,d2
000155B8 5942                       		subq.w	#4,d2
000155BA D268 0008                  		add.w	obX(a0),d1
000155BE 9269 0008                  		sub.w	obX(a1),d1
000155C2 0C41 0004                  		cmpi.w	#4,d1
000155C6 6D00                       		blt.s	loc_12F6A
000155C8 B242                       		cmp.w	d2,d1
000155CA 6C00                       		bge.s	loc_12F5A
000155CC 6000                       		bra.s	Sonic_LookUp
000155CE                            ; ===========================================================================
000155CE                            
000155CE                            Sonic_Balance:
000155CE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000155D4 0C41 000C                  		cmpi.w	#$C,d1
000155D8 6D00                       		blt.s	Sonic_LookUp
000155DA 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000155E0 6600                       		bne.s	loc_12F62
000155E2                            
000155E2                            loc_12F5A:
000155E2 08A8 0000 0022             		bclr	#0,obStatus(a0)
000155E8 6000                       		bra.s	loc_12F70
000155EA                            ; ===========================================================================
000155EA                            
000155EA                            loc_12F62:
000155EA 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000155F0 6600                       		bne.s	Sonic_LookUp
000155F2                            
000155F2                            loc_12F6A:
000155F2 08E8 0000 0022             		bset	#0,obStatus(a0)
000155F8                            
000155F8                            loc_12F70:
000155F8 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
000155FE 6000 0000                  		bra.w	Sonic_ResetScr
00015602                            ; ===========================================================================
00015602                            
00015602                            Sonic_LookUp:
00015602 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00015608 6700                       		beq.s	Sonic_Duck	; if not, branch
0001560A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00015610 5238 C903                  		addq.b	#1,($FFFFC903).w
00015614 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
0001561A 6500                       		bcs.s	Sonic_ResetScr_Part2
0001561C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00015622 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00015628 6700                       		beq.s	loc_12FC2
0001562A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001562E 6000                       		bra.s	loc_12FC2
00015630                            ; ===========================================================================
00015630                            
00015630                            Sonic_Duck:
00015630 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00015636 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015638 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001563E 5238 C903                  		addq.b	#1,($FFFFC903).w
00015642 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00015648 6500                       		bcs.s	Sonic_ResetScr_Part2
0001564A 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00015650 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00015656 6700                       		beq.s	loc_12FC2
00015658 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001565C 6000                       		bra.s	loc_12FC2
0001565E                            ; ===========================================================================
0001565E                            
0001565E                            Sonic_ResetScr:
0001565E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015664                            		
00015664                            Sonic_ResetScr_Part2:
00015664 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001566A 6700                       		beq.s	loc_12FC2	; if yes, branch
0001566C 6400                       		bcc.s	loc_12FBE
0001566E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00015672                            
00015672                            loc_12FBE:
00015672 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015676                            
00015676                            loc_12FC2:
00015676 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001567A 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
0001567E 6600                       		bne.s	loc_12FEE	; if yes, branch
00015680 3028 0020                  		move.w	obInertia(a0),d0
00015684 6700                       		beq.s	loc_12FEE
00015686 6B00                       		bmi.s	loc_12FE2
00015688 9045                       		sub.w	d5,d0
0001568A 6400                       		bcc.s	loc_12FDC
0001568C 303C 0000                  		move.w	#0,d0
00015690                            
00015690                            loc_12FDC:
00015690 3140 0020                  		move.w	d0,obInertia(a0)
00015694 6000                       		bra.s	loc_12FEE
00015696                            ; ===========================================================================
00015696                            
00015696                            loc_12FE2:
00015696 D045                       		add.w	d5,d0
00015698 6400                       		bcc.s	loc_12FEA
0001569A 303C 0000                  		move.w	#0,d0
0001569E                            
0001569E                            loc_12FEA:
0001569E 3140 0020                  		move.w	d0,obInertia(a0)
000156A2                            
000156A2                            loc_12FEE:
000156A2 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000156A6 6600                       		bne.s	loc_1300C 	;Peelout
000156A8 1028 0026                  		move.b	obAngle(a0),d0
000156AC 4EB9 0000 37AE             		jsr	(CalcSine).l
000156B2 C3E8 0020                  		muls.w	obInertia(a0),d1
000156B6 E081                       		asr.l	#8,d1
000156B8 3141 0010                  		move.w	d1,obVelX(a0)
000156BC C1E8 0020                  		muls.w	obInertia(a0),d0
000156C0 E080                       		asr.l	#8,d0
000156C2 3140 0012                  		move.w	d0,obVelY(a0)
000156C6                            
000156C6                            loc_1300C:
000156C6 1028 0026                  		move.b	obAngle(a0),d0
000156CA 0600 0040                  		addi.b	#$40,d0
000156CE 6B00                       		bmi.s	locret_1307C
000156D0 123C 0040                  		move.b	#$40,d1
000156D4 4A68 0020                  		tst.w	obInertia(a0)
000156D8 6700                       		beq.s	locret_1307C
000156DA 6B00                       		bmi.s	loc_13024
000156DC 4441                       		neg.w	d1
000156DE                            
000156DE                            loc_13024:
000156DE 1028 0026                  		move.b	obAngle(a0),d0
000156E2 D001                       		add.b	d1,d0
000156E4 3F00                       		move.w	d0,-(sp)
000156E6 6100 0000                  		bsr.w	Sonic_WalkSpeed
000156EA 301F                       		move.w	(sp)+,d0
000156EC 4A41                       		tst.w	d1
000156EE 6A00                       		bpl.s	locret_1307C
000156F0 E141                       		asl.w	#8,d1
000156F2 0600 0020                  		addi.b	#$20,d0
000156F6 0200 00C0                  		andi.b	#$C0,d0
000156FA 6700                       		beq.s	loc_13078
000156FC 0C00 0040                  		cmpi.b	#$40,d0
00015700 6700                       		beq.s	loc_13066
00015702 0C00 0080                  		cmpi.b	#$80,d0
00015706 6700                       		beq.s	loc_13060
00015708 D368 0010                  		add.w	d1,obVelX(a0)
0001570C 08E8 0005 0022             		bset	#5,obStatus(a0)
00015712 317C 0000 0020             		move.w	#0,obInertia(a0)
00015718 4E75                       		rts	
0001571A                            ; ===========================================================================
0001571A                            
0001571A                            loc_13060:
0001571A 9368 0012                  		sub.w	d1,obVelY(a0)
0001571E 4E75                       		rts	
00015720                            ; ===========================================================================
00015720                            
00015720                            loc_13066:
00015720 9368 0010                  		sub.w	d1,obVelX(a0)
00015724 08E8 0005 0022             		bset	#5,obStatus(a0)
0001572A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015730 4E75                       		rts	
00015732                            ; ===========================================================================
00015732                            
00015732                            loc_13078:
00015732 D368 0012                  		add.w	d1,obVelY(a0)
00015736                            
00015736                            locret_1307C:
00015736 4E75                       		rts	
00015738                            ; End of function Sonic_Move
00015738                            
00015738                            
00015738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015738                            
00015738                            
00015738                            Sonic_MoveLeft:
00015738 3028 0020                  		move.w	obInertia(a0),d0
0001573C 6700                       		beq.s	loc_13086
0001573E 6A00                       		bpl.s	loc_130B2
00015740                            
00015740                            loc_13086:
00015740 08E8 0000 0022             		bset	#0,$22(a0)
00015746 6600                       		bne.s	loc_1309A
00015748 08A8 0005 0022             		bclr	#5,$22(a0)
0001574E 117C 0001 001D             		move.b	#1,$1D(a0)
00015754                            
00015754                            loc_1309A:
00015754 9045                       		sub.w	d5,d0
00015756 3206                       		move.w	d6,d1
00015758 4441                       		neg.w	d1
0001575A B041                       		cmp.w	d1,d0
0001575C 6E00                       		bgt.s	loc_130A6
0001575E D045                       		add.w	d5,d0
00015760 B041                       		cmp.w	d1,d0
00015762 6F00                       		ble.s	loc_130A6
00015764 3001                       		move.w	d1,d0
00015766                            
00015766                            loc_130A6:
00015766 3140 0020                  		move.w	d0,obInertia(a0)
0001576A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015770 4E75                       		rts
00015772                            ; ===========================================================================
00015772                            
00015772                            loc_130B2:
00015772 9044                       		sub.w	d4,d0
00015774 6400                       		bcc.s	loc_130BA
00015776 303C FF80                  		move.w	#-$80,d0
0001577A                            
0001577A                            loc_130BA:
0001577A 3140 0020                  		move.w	d0,obInertia(a0)
0001577E 1228 0026                  		move.b	obAngle(a0),d1
00015782 0601 0020                  		addi.b	#$20,d1
00015786 0201 00C0                  		andi.b	#$C0,d1
0001578A 6600                       		bne.s	locret_130E8
0001578C 0C40 0400                  		cmpi.w	#$400,d0
00015790 6D00                       		blt.s	locret_130E8
00015792 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015798 08A8 0000 0022             		bclr	#0,obStatus(a0)
000157A8 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
000157AE 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
000157B4                            		
000157B4                            locret_130E8:
000157B4 4E75                       		rts	
000157B6                            ; End of function Sonic_MoveLeft
000157B6                            
000157B6                            
000157B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157B6                            
000157B6                            
000157B6                            Sonic_MoveRight:
000157B6 3028 0020                  		move.w	obInertia(a0),d0
000157BA 6B00                       		bmi.s	loc_13118
000157BC 08A8 0000 0022             		bclr	#0,$22(a0)
000157C2 6700                       		beq.s	loc_13104
000157C4 08A8 0005 0022             		bclr	#5,$22(a0)
000157CA 117C 0001 001D             		move.b	#1,$1D(a0)
000157D0                            
000157D0                            loc_13104:
000157D0 D045                       		add.w	d5,d0
000157D2 B046                       		cmp.w	d6,d0
000157D4 6D00                       		blt.s	loc_1310C
000157D6 9045                       		sub.w	d5,d0
000157D8 B046                       		cmp.w	d6,d0
000157DA 6C00                       		bge.s	loc_1310C
000157DC 3006                       		move.w	d6,d0
000157DE                            
000157DE                            loc_1310C:
000157DE 3140 0020                  		move.w	d0,obInertia(a0)
000157E2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000157E8 4E75                       		rts
000157EA                            ; ===========================================================================
000157EA                            
000157EA                            loc_13118:
000157EA D044                       		add.w	d4,d0
000157EC 6400                       		bcc.s	loc_13120
000157EE 303C 0080                  		move.w	#$80,d0
000157F2                            
000157F2                            loc_13120:
000157F2 3140 0020                  		move.w	d0,obInertia(a0)
000157F6 1228 0026                  		move.b	obAngle(a0),d1
000157FA 0601 0020                  		addi.b	#$20,d1
000157FE 0201 00C0                  		andi.b	#$C0,d1
00015802 6600                       		bne.s	locret_1314E
00015804 0C40 FC00                  		cmpi.w	#-$400,d0
00015808 6E00                       		bgt.s	locret_1314E
0001580A 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015810 08E8 0000 0022             		bset	#0,obStatus(a0)
00015820 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015826 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
0001582C                            		
0001582C                            locret_1314E:
0001582C 4E75                       		rts	
0001582E                            ; End of function Sonic_MoveRight
0001582E                            ; End of function Sonic_MoveRight
0001582E                            		include	"_incObj\Sonic RollSpeed.asm"
0001582E                            ; ---------------------------------------------------------------------------
0001582E                            ; Subroutine to	change Sonic's speed as he rolls
0001582E                            ; ---------------------------------------------------------------------------
0001582E                            
0001582E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001582E                            
0001582E                            
0001582E                            Sonic_RollSpeed:
0001582E 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015832 E346                       		asl.w	#1,d6
00015834 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015836 3838 F764                  		move.w	(v_sonspeeddec).w,d4
0001583A E444                       		asr.w	#2,d4
0001583C 4A38 F7CA                  		tst.b	(f_jumponly).w
00015840 6600 0000                  		bne.w	loc_131CC
00015844 4A68 003E                  		tst.w	$3E(a0)
00015848 6600                       		bne.s	@notright
0001584A 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015850 6700                       		beq.s	@notleft	; if not, branch
00015852 6100 0000                  		bsr.w	Sonic_RollLeft
00015856                            
00015856                            	@notleft:
00015856 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001585C 6700                       		beq.s	@notright	; if not, branch
0001585E 6100 0000                  		bsr.w	Sonic_RollRight
00015862                            
00015862                            	@notright:
00015862 3028 0020                  		move.w	obInertia(a0),d0
00015866 6700                       		beq.s	loc_131AA
00015868 6B00                       		bmi.s	loc_1319E
0001586A 9045                       		sub.w	d5,d0
0001586C 6400                       		bcc.s	loc_13198
0001586E 303C 0000                  		move.w	#0,d0
00015872                            
00015872                            loc_13198:
00015872 3140 0020                  		move.w	d0,obInertia(a0)
00015876 6000                       		bra.s	loc_131AA
00015878                            ; ===========================================================================
00015878                            
00015878                            loc_1319E:
00015878 D045                       		add.w	d5,d0
0001587A 6400                       		bcc.s	loc_131A6
0001587C 303C 0000                  		move.w	#0,d0
00015880                            
00015880                            loc_131A6:
00015880 3140 0020                  		move.w	d0,obInertia(a0)
00015884                            
00015884                            loc_131AA:
00015884 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015888 6600                       		bne.s	loc_131CC	; if yes, branch
0001588A 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015890 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015896 117C 0009 0017             		move.b	#9,obWidth(a0)
0001589C 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000158A2 5B68 000C                  		subq.w	#5,obY(a0)
000158A6                            
000158A6                            loc_131CC:
000158A6 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
000158AC 6700                       		beq.s	@cont2
000158AE 6400                       		bcc.s	@cont1
000158B0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000158B4                            		
000158B4                            @cont1:
000158B4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000158B8                            		
000158B8                            @cont2:
000158B8 1028 0026                  		move.b	obAngle(a0),d0
000158BC 4EB9 0000 37AE             		jsr	(CalcSine).l
000158C2 C1E8 0020                  		muls.w	obInertia(a0),d0
000158C6 E080                       		asr.l	#8,d0
000158C8 3140 0012                  		move.w	d0,obVelY(a0)
000158CC C3E8 0020                  		muls.w	obInertia(a0),d1
000158D0 E081                       		asr.l	#8,d1
000158D2 0C41 1000                  		cmpi.w	#$1000,d1
000158D6 6F00                       		ble.s	loc_131F0
000158D8 323C 1000                  		move.w	#$1000,d1
000158DC                            
000158DC                            loc_131F0:
000158DC 0C41 F000                  		cmpi.w	#-$1000,d1
000158E0 6C00                       		bge.s	loc_131FA
000158E2 323C F000                  		move.w	#-$1000,d1
000158E6                            
000158E6                            loc_131FA:
000158E6 3141 0010                  		move.w	d1,obVelX(a0)
000158EA 6000 FDDA                  		bra.w	loc_1300C
000158EE                            ; End of function Sonic_RollSpeed
000158EE                            
000158EE                            
000158EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158EE                            
000158EE                            
000158EE                            Sonic_RollLeft:
000158EE 3028 0020                  		move.w	obInertia(a0),d0
000158F2 6700                       		beq.s	loc_1320A
000158F4 6A00                       		bpl.s	loc_13218
000158F6                            
000158F6                            loc_1320A:
000158F6 08E8 0000 0022             		bset	#0,obStatus(a0)
000158FC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015902 4E75                       		rts	
00015904                            ; ===========================================================================
00015904                            
00015904                            loc_13218:
00015904 9044                       		sub.w	d4,d0
00015906 6400                       		bcc.s	loc_13220
00015908 303C FF80                  		move.w	#-$80,d0
0001590C                            
0001590C                            loc_13220:
0001590C 3140 0020                  		move.w	d0,obInertia(a0)
00015910 4E75                       		rts	
00015912                            ; End of function Sonic_RollLeft
00015912                            
00015912                            
00015912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015912                            
00015912                            
00015912                            Sonic_RollRight:
00015912 3028 0020                  		move.w	obInertia(a0),d0
00015916 6B00                       		bmi.s	loc_1323A
00015918 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001591E 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015924 4E75                       		rts	
00015926                            ; ===========================================================================
00015926                            
00015926                            loc_1323A:
00015926 D044                       		add.w	d4,d0
00015928 6400                       		bcc.s	loc_13242
0001592A 303C 0080                  		move.w	#$80,d0
0001592E                            
0001592E                            loc_13242:
0001592E 3140 0020                  		move.w	d0,obInertia(a0)
00015932 4E75                       		rts	
00015934                            ; End of function Sonic_RollRight
00015934                            ; End of function Sonic_RollRight
00015934                            		include	"_incObj\Sonic JumpDirection.asm"
00015934                            ; ---------------------------------------------------------------------------
00015934                            ; Subroutine to	change Sonic's direction while jumping
00015934                            ; ---------------------------------------------------------------------------
00015934                            
00015934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015934                            
00015934                            
00015934                            Sonic_JumpDirection:
00015934 3C38 F760                  		move.w	($FFFFF760).w,d6
00015938 3A38 F762                  		move.w	($FFFFF762).w,d5
0001593C E345                       		asl.w	#1,d5
0001593E 3028 0010                  		move.w	$10(a0),d0	
00015942 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015948 6700                       		beq.s	loc_13278; if not, branch	
0001594A 08E8 0000 0022             		bset	#0,$22(a0)	
00015950 9045                       		sub.w	d5,d0	
00015952 3206                       		move.w	d6,d1	
00015954 4441                       		neg.w	d1	
00015956 B041                       		cmp.w	d1,d0	
00015958 6E00                       		bgt.s	loc_13278	
0001595A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001595C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001595E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015960 3001                       		move.w	d1,d0
00015962                            
00015962                            loc_13278:
00015962 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015968 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001596A 08A8 0000 0022             		bclr	#0,$22(a0)	
00015970 D045                       		add.w	d5,d0	
00015972 B046                       		cmp.w	d6,d0	
00015974 6D00                       		blt.s	Obj01_JumpMove
00015976 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015978 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
0001597A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001597C 3006                       		move.w	d6,d0
0001597E                            
0001597E                            Obj01_JumpMove:
0001597E 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015982                            
00015982                            Obj01_ResetScr2:
00015982 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015988 6700                       		beq.s	loc_132A4	; if yes, branch
0001598A 6400                       		bcc.s	loc_132A0
0001598C 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015990                            
00015990                            loc_132A0:
00015990 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015994                            
00015994                            loc_132A4:
00015994 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
0001599A 6500                       		bcs.s	locret_132D2	; if yes, branch
0001599C 3028 0010                  		move.w	obVelX(a0),d0
000159A0 3200                       		move.w	d0,d1
000159A2 EA41                       		asr.w	#5,d1
000159A4 6700                       		beq.s	locret_132D2
000159A6 6B00                       		bmi.s	loc_132C6
000159A8 9041                       		sub.w	d1,d0
000159AA 6400                       		bcc.s	loc_132C0
000159AC 303C 0000                  		move.w	#0,d0
000159B0                            
000159B0                            loc_132C0:
000159B0 3140 0010                  		move.w	d0,obVelX(a0)
000159B4 4E75                       		rts	
000159B6                            ; ===========================================================================
000159B6                            
000159B6                            loc_132C6:
000159B6 9041                       		sub.w	d1,d0
000159B8 6500                       		bcs.s	loc_132CE
000159BA 303C 0000                  		move.w	#0,d0
000159BE                            
000159BE                            loc_132CE:
000159BE 3140 0010                  		move.w	d0,obVelX(a0)
000159C2                            
000159C2                            locret_132D2:
000159C2 4E75                       		rts	
000159C4                            ; End of function Sonic_JumpDirection
000159C4                            ; End of function Sonic_JumpDirection
000159C4                            		include "_incObj\Sonic Peelout.asm"
000159C4                            ; ---------------------------------------------------------------------------
000159C4                            ; Subroutine to make Sonic perform a peelout
000159C4                            ; ---------------------------------------------------------------------------
000159C4                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
000159C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C4                            
000159C4                            Sonic_Peelout:
000159C4 0828 0001 0039             		btst	#1,$39(a0)
000159CA 6600                       		bne.s	SCDPeelout_Launch
000159CC 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
000159D2 6600                       		bne.s	@return
000159D4 1038 F603                  		move.b	($FFFFF603).w,d0
000159D8 0200 0070                  		andi.b	#%01110000,d0
000159DC 6700 0000                  		beq.w	@return
000159E0 117C 0001 001C             		move.b	#1,$1C(a0)
000159E6 317C 0000 003A             		move.w	#0,$3A(a0)
000159EC 303C 00D2                  		move.w	#$D2,d0
000159F0 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
000159F6                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
000159F6 588F                       		addq.l	#4,sp
000159F8 08E8 0001 0039             		bset	#1,$39(a0)
000159FE                            		
000159FE 4268 0020                  		clr.w	obInertia(a0)
00015A02                             
00015A02 6100 0000                  		bsr.w	Sonic_LevelBound
00015A06 6100 0000                  		bsr.w	Sonic_AnglePos
00015A0A                             
00015A0A                            	@return:
00015A0A 4E75                       		rts	
00015A0C                            ; ---------------------------------------------------------------------------
00015A0C                             
00015A0C                            SCDPeelout_Launch:
00015A0C 0828 0001 0039             		btst	#1,$39(a0)
00015A12 1038 F602                  		move.b	($FFFFF602).w,d0
00015A16 0800 0000                  		btst	#0,d0
00015A1A 6600 0000                  		bne.w	SCDPeelout_Charge
00015A1E 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015A24 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015A2A 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015A2E 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015A34 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015A3A 3028 0020                  		move.w	obInertia(a0),d0
00015A3E 0440 0800                  		subi.w	#$800,d0
00015A42 D040                       		add.w	d0,d0
00015A44 0240 1F00                  		andi.w	#$1F00,d0
00015A48 4440                       		neg.w	d0
00015A4A 0640 2000                  		addi.w	#$2000,d0
00015A4E 31C0 C904                  		move.w	d0,($FFFFC904).w
00015A52 0828 0000 0022             		btst	#0,$22(a0)
00015A58 6700                       		beq.s	@dontflip
00015A5A 4468 0020                  		neg.w	obInertia(a0)
00015A5E                             
00015A5E                            @dontflip:
00015A5E 08A8 0007 0022             		bclr	#7,$22(a0)
00015A64 303C 00D3                  		move.w	#$D3,d0
00015A68 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
00015A6E                            	;	sfx 	sfx_PeeloutRelease
00015A6E 1028 0026                  		move.b	obAngle(a0),d0
00015A72 4EB9 0000 37AE             		jsr	(CalcSine).l
00015A78 C3E8 0020                  		muls.w	obInertia(a0),d1
00015A7C E081                       		asr.l	#8,d1
00015A7E 3141 0010                  		move.w	d1,obVelX(a0)
00015A82 C1E8 0020                  		muls.w	obInertia(a0),d0
00015A86 E080                       		asr.l	#8,d0
00015A88 3140 0012                  		move.w	d0,obVelY(a0)	
00015A8C 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015A90                            ; ---------------------------------------------------------------------------
00015A90                             
00015A90                            SCDPeelout_Charge:				; If still charging the dash...
00015A90 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015A94 3401                       		move.w	d1,d2
00015A96 D241                       		add.w	d1,d1
00015A98 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015A9C 6700                       		beq.s	@noshoes
00015A9E E242                       		asr.w	#1,d2
00015AA0 9242                       		sub.w	d2,d1
00015AA2                            
00015AA2                            @noshoes:
00015AA2 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015AA8 B268 0020                  		cmp.w	obInertia(a0),d1
00015AAC 6E00                       		bgt.s	@inctimer
00015AAE 3141 0020                  		move.w	d1,obInertia(a0)
00015AB2                            
00015AB2                            @inctimer:
00015AB2 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015AB6 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015ABC 6500                       		bcs.s	SCDPeelout_ResetScr
00015ABE 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015AC4 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015ACA                            		
00015ACA                            SCDPeelout_Stop_Sound:
00015ACA 303C 00D4                  		move.w	#$D4,d0
00015ACE 4EB9 0000 0FCC             		jsr		(PlaySound_Special).l
00015AD4                            	;	sfx 	sfx_PeeloutStop
00015AD4 4268 0020                  		clr.w	obInertia(a0)
00015AD8                            
00015AD8                            SCDPeelout_ResetScr:
00015AD8 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015ADA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015AE0 6700                       		beq.s	@finish
00015AE2 6400                       		bcc.s	@skip
00015AE4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015AE8                             
00015AE8                            	@skip:
00015AE8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015AEC                             
00015AEC                            	@finish:
00015AEC 6100 0000                  		bsr.w	Sonic_LevelBound
00015AF0 6100 0000                  		bsr.w	Sonic_AnglePos
00015AF4 4E75                       		rts
00015AF6                            		
00015AF6                            		
00015AF6                            		include "_incObj\Sonic Spindash.asm"
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            ; Subroutine to make Sonic perform a spindash
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                             
00015AF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AF6                             
00015AF6                             
00015AF6                            Sonic_SpinDash:
00015AF6 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015AFA 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015AFC 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015B02 6600                       		bne.s	locret2_1AC8C		; if not, return
00015B04 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015B08 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015B0C 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015B10 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015B16 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015B1A 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play spin sound
00015B20 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015B22 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015B28 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015B2E                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015B2E                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015B2E 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015B34                            						; the smoke/dust object
00015B34                            loc2_1AC84:
00015B34 6100 0000                  		bsr.w	Sonic_LevelBound
00015B38 6100 0000                  		bsr.w	Sonic_AnglePos
00015B3C                            
00015B3C                            locret2_1AC8C:
00015B3C 4E75                       		rts	
00015B3E                            ; ---------------------------------------------------------------------------
00015B3E                            
00015B3E                            loc2_1AC8E:	
00015B3E 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015B44 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015B48 0800 0001                  		btst	#1,d0			; check down button
00015B4C 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015B50 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015B56 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015B5C 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015B62 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015B66 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015B6C 7000                       		moveq	#0,d0
00015B6E 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015B72 D040                       		add.w	d0,d0			; double it
00015B74 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015B7A 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015B7E 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015B82 D040                       		add.w	d0,d0			; double it
00015B84 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015B88 4440                       		neg.w	d0			; negate it
00015B8A 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015B8E 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015B92 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015B98 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015B9A 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015B9E                            
00015B9E                            loc2_1ACF4:
00015B9E 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015BA4 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015BAA 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015BAE 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play it!
00015BB4 1028 0026                  		move.b	obAngle(a0),d0
00015BB8 4EB9 0000 37AE             		jsr	(CalcSine).l
00015BBE C3E8 0020                  		muls.w	obInertia(a0),d1
00015BC2 E081                       		asr.l	#8,d1
00015BC4 3141 0010                  		move.w	d1,obVelX(a0)
00015BC8 C1E8 0020                  		muls.w	obInertia(a0),d0
00015BCC E080                       		asr.l	#8,d0
00015BCE 3140 0012                  		move.w	d0,obVelY(a0)
00015BD2                            	
00015BD2 6000                       		bra.s	loc2_1AD78
00015BD4                            ; ===========================================================================
00015BD4                            Dash_Speeds:
00015BD4 0600                       		dc.w  $600		; 0
00015BD6 0680                       		dc.w  $680		; 1
00015BD8 0700                       		dc.w  $700		; 2
00015BDA 0780                       		dc.w  $780		; 3
00015BDC 0800                       		dc.w  $800		; 4
00015BDE 0880                       		dc.w  $880		; 5
00015BE0 0900                       		dc.w  $900		; 6
00015BE2 0980                       		dc.w  $980		; 7
00015BE4 0A00                       		dc.w  $A00		; 8
00015BE6                            ; ===========================================================================
00015BE6                            
00015BE6                            loc2_1AD30:				; If still charging the dash...
00015BE6 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015BEA 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015BEC 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015BF0 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015BF2 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015BF6 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015BF8 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015BFE                            
00015BFE                            loc2_1AD48:
00015BFE 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015C02 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015C06 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015C0A 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015C10 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015C14 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015C1A 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play charge sound
00015C20 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015C26 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015C2C 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015C2E 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015C34                            
00015C34                            loc2_1AD78:
00015C34 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015C36 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015C3C 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015C3E 6400                       		bcc.s	loc2_1AD88
00015C40 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015C44                            
00015C44                            loc2_1AD88:
00015C44 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015C48                            
00015C48                            loc2_1AD8C:
00015C48 6100 0000                  		bsr.w	Sonic_LevelBound
00015C4C 6100 0000                  		bsr.w	Sonic_AnglePos
00015C50                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015C50 4E75                       		rts
00015C52                            ; End of subroutine Sonic_SpinDash
00015C52                            ; End of subroutine Sonic_SpinDash
00015C52                            
00015C52                            Sonic_AirRoll:
00015C52 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015C58 6600                               bne.s   AirRoll_Return   ; if not, return
00015C5A                            
00015C5A                            AirRoll_CheckBtn:
00015C5A 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015C5E 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015C62 6700                               beq.s	AirRoll_Return
00015C64 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015C6A                                   ; move.w	#$BC,d0
00015C6A                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015C6A                            
00015C6A                            AirRoll_Return:
00015C6A 4E75                               rts
00015C6C                            ; ===========================================================================
00015C6C                            ; ---------------------------------------------------------------------------
00015C6C                            ; Unused subroutine to squash Sonic
00015C6C                            ; ---------------------------------------------------------------------------
00015C6C 1028 0026                  		move.b	obAngle(a0),d0
00015C70 0600 0020                  		addi.b	#$20,d0
00015C74 0200 00C0                  		andi.b	#$C0,d0
00015C78 6600                       		bne.s	locret_13302
00015C7A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015C7E 4A41                       		tst.w	d1
00015C80 6A00                       		bpl.s	locret_13302
00015C82 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015C88 317C 0000 0010             		move.w	#0,obVelX(a0)
00015C8E 317C 0000 0012             		move.w	#0,obVelY(a0)
00015C94 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015C9A                            
00015C9A                            locret_13302:
00015C9A 4E75                       		rts		
00015C9C                            		include	"_incObj\Sonic LevelBound.asm"
00015C9C                            ; ---------------------------------------------------------------------------
00015C9C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015C9C                            ; ---------------------------------------------------------------------------
00015C9C                            
00015C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C9C                            
00015C9C                            
00015C9C                            Sonic_LevelBound:
00015C9C 2228 0008                  		move.l	obX(a0),d1
00015CA0 3028 0010                  		move.w	obVelX(a0),d0
00015CA4 48C0                       		ext.l	d0
00015CA6 E180                       		asl.l	#8,d0
00015CA8 D280                       		add.l	d0,d1
00015CAA 4841                       		swap	d1
00015CAC 3038 F728                  		move.w	(v_limitleft2).w,d0
00015CB0 0640 0010                  		addi.w	#$10,d0
00015CB4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015CB6 6200                       		bhi.s	@sides		; if yes, branch
00015CB8 3038 F72A                  		move.w	(v_limitright2).w,d0
00015CBC 0640 0128                  		addi.w	#$128,d0
00015CC0 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015CC4 6600                       		bne.s	@screenlocked
00015CC6 0640 0040                  		addi.w	#$40,d0
00015CCA                            
00015CCA                            	@screenlocked:
00015CCA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015CCC 6300                       		bls.s	@sides		; if yes, branch
00015CCE                            
00015CCE                            	@chkbottom:
00015CCE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015CD2 0640 00E0                  		addi.w	#$E0,d0
00015CD6 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015CDA 6D00                       		blt.s	@bottom		; if yes, branch
00015CDC 4E75                       		rts	
00015CDE                            ; ===========================================================================
00015CDE                            
00015CDE                            @bottom:
00015CDE 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015CE2 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015CE6 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015CE8 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015CEA 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015CF0 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015CF4 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015CFA 6500 0000                  		bcs.w	Kill_transport
00015CFE 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015D02 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015D08 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015D0E 4E75                       		rts	
00015D10                            @dontkill: 
00015D10 4E75                       		rts
00015D12                            ; ===========================================================================
00015D12                            
00015D12                            @sides:
00015D12 3140 0008                  		move.w	d0,obX(a0)
00015D16 317C 0000 000A             		move.w	#0,obX+2(a0)
00015D1C 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015D22 317C 0000 0020             		move.w	#0,obInertia(a0)
00015D28 60A4                       		bra.s	@chkbottom
00015D2A                            
00015D2A                            Kill_transport: 
00015D2A 4EF9 0000 0000                     	jmp        (KillSonic).l
00015D30                            
00015D30                            ; End of function Sonic_LevelBound
00015D30                            ; End of function Sonic_LevelBound
00015D30                            		include	"_incObj\Sonic Roll.asm"
00015D30                            ; ---------------------------------------------------------------------------
00015D30                            ; Subroutine allowing Sonic to roll when he's moving
00015D30                            ; ---------------------------------------------------------------------------
00015D30                            
00015D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D30                            
00015D30                            
00015D30                            Sonic_Roll:
00015D30 4A38 F7CA                  		tst.b	(f_jumponly).w
00015D34 6600                       		bne.s	@noroll
00015D36 3028 0020                  		move.w	obInertia(a0),d0
00015D3A 6A00                       		bpl.s	@ispositive
00015D3C 4440                       		neg.w	d0
00015D3E                            
00015D3E                            	@ispositive:
00015D3E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015D42 6500                       		bcs.s	@noroll		; if not, branch
00015D44 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015D48 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015D4C 6600                       		bne.s	@noroll		; if yes, branch
00015D4E 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015D54 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015D56                            
00015D56                            	@noroll:
00015D56 4E75                       		rts	
00015D58                            ; ===========================================================================
00015D58                            
00015D58                            Sonic_ChkRoll:
00015D58 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015D5E 6700                       		beq.s	@roll		; if not, branch
00015D60 4E75                       		rts	
00015D62                            ; ===========================================================================
00015D62                            
00015D62                            @roll:
00015D62 08E8 0002 0022             		bset	#2,obStatus(a0)
00015D68 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015D6E 117C 0007 0017             		move.b	#7,obWidth(a0)
00015D74 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015D7A 5A68 000C                  		addq.w	#5,obY(a0)
00015D88 4A68 0020                  		tst.w	obInertia(a0)
00015D8C 6600                       		bne.s	@ismoving
00015D8E 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015D94                            
00015D94                            	@ismoving:
00015D94 4E75                       		rts	
00015D96                            ; End of function Sonic_Roll
00015D96                            ; End of function Sonic_Roll
00015D96                            		include	"_incObj\Sonic Jump.asm"
00015D96                            ; ---------------------------------------------------------------------------
00015D96                            ; Subroutine allowing Sonic to jump
00015D96                            ; ---------------------------------------------------------------------------
00015D96                            
00015D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D96                            
00015D96                            
00015D96                            Sonic_Jump:
00015D96 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015D9A 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015D9E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015DA2 7000                       		moveq	#0,d0
00015DA4 1028 0026                  		move.b	obAngle(a0),d0
00015DA8 0600 0080                  		addi.b	#$80,d0
00015DAC 6100 0000                  		bsr.w	sub_14D48
00015DB0 0C41 0006                  		cmpi.w	#6,d1
00015DB4 6D00 0000                  		blt.w	locret_1348E
00015DB8 343C 0680                  		move.w	#$680,d2
00015DBC 0828 0006 0022             		btst	#6,obStatus(a0)
00015DC2 6700                       		beq.s	loc_1341C
00015DC4 343C 0380                  		move.w	#$380,d2
00015DC8                            
00015DC8                            loc_1341C:
00015DC8 7000                       		moveq	#0,d0
00015DCA 1028 0026                  		move.b	obAngle(a0),d0
00015DCE 0400 0040                  		subi.b	#$40,d0
00015DD2 4EB9 0000 37AE             		jsr	(CalcSine).l
00015DD8 C3C2                       		muls.w	d2,d1
00015DDA E081                       		asr.l	#8,d1
00015DDC D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015DE0 C1C2                       		muls.w	d2,d0
00015DE2 E080                       		asr.l	#8,d0
00015DE4 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015DE8 08E8 0001 0022             		bset	#1,obStatus(a0)
00015DEE 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015DF4 588F                       		addq.l	#4,sp
00015DF6 117C 0001 003C             		move.b	#1,$3C(a0)
00015DFC 4228 0038                  		clr.b	$38(a0)
00015E0A 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015E10 117C 0009 0017             		move.b	#9,obWidth(a0)
00015E16 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015E1C 117C 0007 0017             		move.b	#7,obWidth(a0)
00015E22                            Result_Check:
00015E22 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015E26 6700                       		beq.s   NormalJump ; If not, branch
00015E28 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
00015E2E 6000                       		bra.s   cont ; Continue
00015E30                            NormalJump:
00015E30 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015E36                            cont:
00015E36 08E8 0002 0022             		bset	#2,obStatus(a0)
00015E3C 5A68 000C                  		addq.w	#5,obY(a0)
00015E40                            
00015E40                            locret_1348E:
00015E40 4E75                       		rts	
00015E42                            ; ===========================================================================
00015E42                            
00015E42                            ; End of function Sonic_Jump
00015E42                            ; End of function Sonic_Jump
00015E42                            		include	"_incObj\Sonic JumpHeight.asm"
00015E42                            ; ---------------------------------------------------------------------------
00015E42                            ; Subroutine controlling Sonic's jump height/duration
00015E42                            ; ---------------------------------------------------------------------------
00015E42                            
00015E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E42                            
00015E42                            
00015E42                            Sonic_JumpHeight:
00015E42 4A28 003C                  		tst.b	$3C(a0)
00015E46 6700                       		beq.s	loc_134C4
00015E48 323C FC00                  		move.w	#-$400,d1
00015E4C 0828 0006 0022             		btst	#6,obStatus(a0)
00015E52 6700                       		beq.s	loc_134AE
00015E54 323C FE00                  		move.w	#-$200,d1
00015E58                            
00015E58                            loc_134AE:
00015E58 B268 0012                  		cmp.w	obVelY(a0),d1
00015E5C 6F00                       		ble.s	locret_134C2
00015E5E 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015E62 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015E66 6600                       		bne.s	locret_134C2	; if yes, branch
00015E68 3141 0012                  		move.w	d1,obVelY(a0)
00015E6C                            
00015E6C                            locret_134C2:
00015E6C 4E75                       		rts	
00015E6E                            ; ===========================================================================
00015E6E                            
00015E6E                            loc_134C4:
00015E6E 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015E74 6C00                       		bge.s	locret_134D2
00015E76 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015E7C                            
00015E7C                            locret_134D2:
00015E7C 4E75                       		rts	
00015E7E                            ; End of function Sonic_JumpHeight
00015E7E                            ; End of function Sonic_JumpHeight
00015E7E                            		include	"_incObj\Sonic SlopeResist.asm"
00015E7E                            ; ---------------------------------------------------------------------------
00015E7E                            ; Subroutine to	slow Sonic walking up a	slope
00015E7E                            ; ---------------------------------------------------------------------------
00015E7E                            
00015E7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E7E                            
00015E7E                            
00015E7E                            Sonic_SlopeResist:
00015E7E 1028 0026                  		move.b	obAngle(a0),d0
00015E82 0600 0060                  		addi.b	#$60,d0
00015E86 0C00 00C0                  		cmpi.b	#$C0,d0
00015E8A 6400                       		bcc.s	locret_13508
00015E8C 1028 0026                  		move.b	obAngle(a0),d0
00015E90 4EB9 0000 37AE             		jsr	(CalcSine).l
00015E96 C1FC 0020                  		muls.w	#$20,d0
00015E9A E080                       		asr.l	#8,d0
00015E9C 4A68 0020                  		tst.w	obInertia(a0)
00015EA0 6700                       		beq.s	locret_13508
00015EA2 6B00                       		bmi.s	loc_13504
00015EA4 4A40                       		tst.w	d0
00015EA6 6700                       		beq.s	locret_13502
00015EA8 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015EAC                            
00015EAC                            locret_13502:
00015EAC 4E75                       		rts	
00015EAE                            ; ===========================================================================
00015EAE                            
00015EAE                            loc_13504:
00015EAE D168 0020                  		add.w	d0,obInertia(a0)
00015EB2                            
00015EB2                            locret_13508:
00015EB2 4E75                       		rts	
00015EB4                            ; End of function Sonic_SlopeResist
00015EB4                            ; End of function Sonic_SlopeResist
00015EB4                            		include	"_incObj\Sonic RollRepel.asm"
00015EB4                            ; ---------------------------------------------------------------------------
00015EB4                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015EB4                            ; ---------------------------------------------------------------------------
00015EB4                            
00015EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EB4                            
00015EB4                            
00015EB4                            Sonic_RollRepel:
00015EB4 1028 0026                  		move.b	obAngle(a0),d0
00015EB8 0600 0060                  		addi.b	#$60,d0
00015EBC 0C00 00C0                  		cmpi.b	#-$40,d0
00015EC0 6400                       		bcc.s	locret_13544
00015EC2 1028 0026                  		move.b	obAngle(a0),d0
00015EC6 4EB9 0000 37AE             		jsr	(CalcSine).l
00015ECC C1FC 0050                  		muls.w	#$50,d0
00015ED0 E080                       		asr.l	#8,d0
00015ED2 4A68 0020                  		tst.w	obInertia(a0)
00015ED6 6B00                       		bmi.s	loc_1353A
00015ED8 4A40                       		tst.w	d0
00015EDA 6A00                       		bpl.s	loc_13534
00015EDC E480                       		asr.l	#2,d0
00015EDE                            
00015EDE                            loc_13534:
00015EDE D168 0020                  		add.w	d0,obInertia(a0)
00015EE2 4E75                       		rts	
00015EE4                            ; ===========================================================================
00015EE4                            
00015EE4                            loc_1353A:
00015EE4 4A40                       		tst.w	d0
00015EE6 6B00                       		bmi.s	loc_13540
00015EE8 E480                       		asr.l	#2,d0
00015EEA                            
00015EEA                            loc_13540:
00015EEA D168 0020                  		add.w	d0,obInertia(a0)
00015EEE                            
00015EEE                            locret_13544:
00015EEE 4E75                       		rts	
00015EF0                            ; End of function Sonic_RollRepel
00015EF0                            ; End of function Sonic_RollRepel
00015EF0                            		include	"_incObj\Sonic SlopeRepel.asm"
00015EF0                            ; ---------------------------------------------------------------------------
00015EF0                            ; Subroutine to	push Sonic down	a slope
00015EF0                            ; ---------------------------------------------------------------------------
00015EF0                            
00015EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EF0                            
00015EF0                            
00015EF0                            Sonic_SlopeRepel:
00015EF0 4E71                       		nop	
00015EF2 4A28 0038                  		tst.b	$38(a0)
00015EF6 6600                       		bne.s	locret_13580
00015EF8 4A68 003E                  		tst.w	$3E(a0)
00015EFC 6600                       		bne.s	loc_13582
00015EFE 1028 0026                  		move.b	obAngle(a0),d0
00015F02 0600 0020                  		addi.b	#$20,d0
00015F06 0200 00C0                  		andi.b	#$C0,d0
00015F0A 6700                       		beq.s	locret_13580
00015F0C 3028 0020                  		move.w	obInertia(a0),d0
00015F10 6A00                       		bpl.s	loc_1356A
00015F12 4440                       		neg.w	d0
00015F14                            
00015F14                            loc_1356A:
00015F14 0C40 0280                  		cmpi.w	#$280,d0
00015F18 6400                       		bcc.s	locret_13580
00015F1A 4268 0020                  		clr.w	obInertia(a0)
00015F1E 08E8 0001 0022             		bset	#1,obStatus(a0)
00015F24 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015F2A                            
00015F2A                            locret_13580:
00015F2A 4E75                       		rts	
00015F2C                            ; ===========================================================================
00015F2C                            
00015F2C                            loc_13582:
00015F2C 5368 003E                  		subq.w	#1,$3E(a0)
00015F30 4E75                       		rts	
00015F32                            ; End of function Sonic_SlopeRepel
00015F32                            ; End of function Sonic_SlopeRepel
00015F32                            		include	"_incObj\Sonic JumpAngle.asm"
00015F32                            ; ---------------------------------------------------------------------------
00015F32                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015F32                            ; ---------------------------------------------------------------------------
00015F32                            
00015F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F32                            
00015F32                            
00015F32                            Sonic_JumpAngle:
00015F32 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015F36 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015F38 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015F3A                            
00015F3A 5400                       		addq.b	#2,d0		; increase angle
00015F3C 6400                       		bcc.s	loc_13596
00015F3E 7000                       		moveq	#0,d0
00015F40                            
00015F40                            loc_13596:
00015F40 6000                       		bra.s	loc_1359E
00015F42                            ; ===========================================================================
00015F42                            
00015F42                            loc_13598:
00015F42 5500                       		subq.b	#2,d0		; decrease angle
00015F44 6400                       		bcc.s	loc_1359E
00015F46 7000                       		moveq	#0,d0
00015F48                            
00015F48                            loc_1359E:
00015F48 1140 0026                  		move.b	d0,obAngle(a0)
00015F4C                            
00015F4C                            locret_135A2:
00015F4C 4E75                       		rts	
00015F4E                            ; End of function Sonic_JumpAngle
00015F4E                            ; End of function Sonic_JumpAngle
00015F4E                            		include	"_incObj\Sonic Floor.asm"
00015F4E                            ; ---------------------------------------------------------------------------
00015F4E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00015F4E                            ; ---------------------------------------------------------------------------
00015F4E                            
00015F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F4E                            
00015F4E                            
00015F4E                            Sonic_Floor:
00015F4E 3228 0010                  		move.w	obVelX(a0),d1
00015F52 3428 0012                  		move.w	obVelY(a0),d2
00015F56 4EB9 0000 3A40             		jsr	(CalcAngle).l
00015F5C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015F60 0400 0020                  		subi.b	#$20,d0
00015F64 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015F68 0200 00C0                  		andi.b	#$C0,d0
00015F6C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015F70 0C00 0040                  		cmpi.b	#$40,d0
00015F74 6700 0000                  		beq.w	loc_13680
00015F78 0C00 0080                  		cmpi.b	#$80,d0
00015F7C 6700 0000                  		beq.w	loc_136E2
00015F80 0C00 00C0                  		cmpi.b	#$C0,d0
00015F84 6700 0000                  		beq.w	loc_1373E
00015F88 6100 0000                  		bsr.w	Sonic_HitWall
00015F8C 4A41                       		tst.w	d1
00015F8E 6A00                       		bpl.s	loc_135F0
00015F90 9368 0008                  		sub.w	d1,obX(a0)
00015F94 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F9A                            
00015F9A                            loc_135F0:
00015F9A 6100 0000                  		bsr.w	sub_14EB4
00015F9E 4A41                       		tst.w	d1
00015FA0 6A00                       		bpl.s	loc_13602
00015FA2 D368 0008                  		add.w	d1,obX(a0)
00015FA6 317C 0000 0010             		move.w	#0,obVelX(a0)
00015FAC                            
00015FAC                            loc_13602:
00015FAC 6100 0000                  		bsr.w	Sonic_HitFloor
00015FB0 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015FB4 4A41                       		tst.w	d1
00015FB6 6A00                       		bpl.s	locret_1367E
00015FB8 1428 0012                  		move.b	obVelY(a0),d2
00015FBC 5002                       		addq.b	#8,d2
00015FBE 4402                       		neg.b	d2
00015FC0 B202                       		cmp.b	d2,d1
00015FC2 6C00                       		bge.s	loc_1361E
00015FC4 B002                       		cmp.b	d2,d0
00015FC6 6D00                       		blt.s	locret_1367E
00015FC8                            
00015FC8                            loc_1361E:
00015FC8 D368 000C                  		add.w	d1,obY(a0)
00015FCC 1143 0026                  		move.b	d3,obAngle(a0)
00015FD0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015FD4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015FDA 1003                       		move.b	d3,d0
00015FDC 0600 0020                  		addi.b	#$20,d0
00015FE0 0200 0040                  		andi.b	#$40,d0
00015FE4 6600                       		bne.s	loc_1365C
00015FE6 1003                       		move.b	d3,d0
00015FE8 0600 0010                  		addi.b	#$10,d0
00015FEC 0200 0020                  		andi.b	#$20,d0
00015FF0 6700                       		beq.s	loc_1364E
00015FF2 E0E8 0012                  		asr	obVelY(a0)
00015FF6 6000                       		bra.s	loc_13670
00015FF8                            ; ===========================================================================
00015FF8                            
00015FF8                            loc_1364E:
00015FF8 317C 0000 0012             		move.w	#0,obVelY(a0)
00015FFE 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016004 4E75                       		rts	
00016006                            ; ===========================================================================
00016006                            
00016006                            loc_1365C:
00016006 317C 0000 0010             		move.w	#0,obVelX(a0)
0001600C 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00016012 6F00                       		ble.s	loc_13670
00016014 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
0001601A                            
0001601A                            loc_13670:
0001601A 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016020 4A03                       		tst.b	d3
00016022 6A00                       		bpl.s	locret_1367E
00016024 4468 0020                  		neg.w	obInertia(a0)
00016028                            
00016028                            locret_1367E:
00016028 4E75                       		rts	
0001602A                            ; ===========================================================================
0001602A                            
0001602A                            loc_13680:
0001602A 6100 0000                  		bsr.w	Sonic_HitWall
0001602E 4A41                       		tst.w	d1
00016030 6A00                       		bpl.s	loc_1369A
00016032 9368 0008                  		sub.w	d1,obX(a0)
00016036 317C 0000 0010             		move.w	#0,obVelX(a0)
0001603C 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016042 4E75                       		rts	
00016044                            ; ===========================================================================
00016044                            
00016044                            loc_1369A:
00016044 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016048 4A41                       		tst.w	d1
0001604A 6A00                       		bpl.s	loc_136B4
0001604C 9368 000C                  		sub.w	d1,obY(a0)
00016050 4A68 0012                  		tst.w	obVelY(a0)
00016054 6A00                       		bpl.s	locret_136B2
00016056 317C 0000 0012             		move.w	#0,obVelY(a0)
0001605C                            
0001605C                            locret_136B2:
0001605C 4E75                       		rts	
0001605E                            ; ===========================================================================
0001605E                            
0001605E                            loc_136B4:
0001605E 4A68 0012                  		tst.w	obVelY(a0)
00016062 6B00                       		bmi.s	locret_136E0
00016064 6100 0000                  		bsr.w	Sonic_HitFloor
00016068 4A41                       		tst.w	d1
0001606A 6A00                       		bpl.s	locret_136E0
0001606C D368 000C                  		add.w	d1,obY(a0)
00016070 1143 0026                  		move.b	d3,obAngle(a0)
00016074 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016078 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001607E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016084 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001608A                            
0001608A                            locret_136E0:
0001608A 4E75                       		rts	
0001608C                            ; ===========================================================================
0001608C                            
0001608C                            loc_136E2:
0001608C 6100 0000                  		bsr.w	Sonic_HitWall
00016090 4A41                       		tst.w	d1
00016092 6A00                       		bpl.s	loc_136F4
00016094 9368 0008                  		sub.w	d1,obX(a0)
00016098 317C 0000 0010             		move.w	#0,obVelX(a0)
0001609E                            
0001609E                            loc_136F4:
0001609E 6100 0000                  		bsr.w	sub_14EB4
000160A2 4A41                       		tst.w	d1
000160A4 6A00                       		bpl.s	loc_13706
000160A6 D368 0008                  		add.w	d1,obX(a0)
000160AA 317C 0000 0010             		move.w	#0,obVelX(a0)
000160B0                            
000160B0                            loc_13706:
000160B0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160B4 4A41                       		tst.w	d1
000160B6 6A00                       		bpl.s	locret_1373C
000160B8 9368 000C                  		sub.w	d1,obY(a0)
000160BC 1003                       		move.b	d3,d0
000160BE 0600 0020                  		addi.b	#$20,d0
000160C2 0200 0040                  		andi.b	#$40,d0
000160C6 6600                       		bne.s	loc_13726
000160C8 317C 0000 0012             		move.w	#0,obVelY(a0)
000160CE 4E75                       		rts	
000160D0                            ; ===========================================================================
000160D0                            
000160D0                            loc_13726:
000160D0 1143 0026                  		move.b	d3,obAngle(a0)
000160D4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000160D8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000160DE 4A03                       		tst.b	d3
000160E0 6A00                       		bpl.s	locret_1373C
000160E2 4468 0020                  		neg.w	obInertia(a0)
000160E6                            
000160E6                            locret_1373C:
000160E6 4E75                       		rts	
000160E8                            ; ===========================================================================
000160E8                            
000160E8                            loc_1373E:
000160E8 6100 0000                  		bsr.w	sub_14EB4
000160EC 4A41                       		tst.w	d1
000160EE 6A00                       		bpl.s	loc_13758
000160F0 D368 0008                  		add.w	d1,obX(a0)
000160F4 317C 0000 0010             		move.w	#0,obVelX(a0)
000160FA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016100 4E75                       		rts	
00016102                            ; ===========================================================================
00016102                            
00016102                            loc_13758:
00016102 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016106 4A41                       		tst.w	d1
00016108 6A00                       		bpl.s	loc_13772
0001610A 9368 000C                  		sub.w	d1,obY(a0)
0001610E 4A68 0012                  		tst.w	obVelY(a0)
00016112 6A00                       		bpl.s	locret_13770
00016114 317C 0000 0012             		move.w	#0,obVelY(a0)
0001611A                            
0001611A                            locret_13770:
0001611A 4E75                       		rts	
0001611C                            ; ===========================================================================
0001611C                            
0001611C                            loc_13772:
0001611C 4A68 0012                  		tst.w	obVelY(a0)
00016120 6B00                       		bmi.s	locret_1379E
00016122 6100 0000                  		bsr.w	Sonic_HitFloor
00016126 4A41                       		tst.w	d1
00016128 6A00                       		bpl.s	locret_1379E
0001612A D368 000C                  		add.w	d1,obY(a0)
0001612E 1143 0026                  		move.b	d3,obAngle(a0)
00016132 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016136 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001613C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016142 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016148                            
00016148                            locret_1379E:
00016148 4E75                       		rts	
0001614A                            ; End of function Sonic_Floor
0001614A                            ; End of function Sonic_Floor
0001614A                            		include	"_incObj\Sonic ResetOnFloor.asm"
0001614A                            ; ---------------------------------------------------------------------------
0001614A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001614A                            ; ---------------------------------------------------------------------------
0001614A                            
0001614A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001614A                            
0001614A                            
0001614A                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
0001614A 08A8 0005 0022                     	bclr    #5,$22(a0)
00016150 08A8 0001 0022                     	bclr    #1,$22(a0)
00016156 0828 0002 0022                     	btst    #2,$22(a0)
0001615C 6700                               	beq.s    loc_137E4
0001615E 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016164 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001616A 117C 0009 0017             		move.b	#9,obWidth(a0)
00016170 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016176 5B68 000C                  		subq.w	#5,obY(a0)
0001617A                            
0001617A                            loc_137E4:
0001617A 117C 0000 003C             		move.b	#0,$3C(a0)
00016180 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016186 4E75                       		rts	
00016188                            ; End of function Sonic_ResetOnFloor
00016188                            ; End of function Sonic_ResetOnFloor
00016188                            		include	"_incObj\Sonic (part 2).asm"
00016188                            ; ---------------------------------------------------------------------------
00016188                            ; Sonic	when he	gets hurt
00016188                            ; ---------------------------------------------------------------------------
00016188                            
00016188                            Sonic_Hurt:	; Routine 4
00016188 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001618E 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016194 0828 0006 0022             		btst	#6,obStatus(a0)
0001619A 6700                       		beq.s	loc_1380C
0001619C 0468 0020 0012             		subi.w	#$20,obVelY(a0)
000161A2                            
000161A2                            loc_1380C:
000161A2 6100 0000                  		bsr.w	Sonic_HurtStop
000161A6 6100 FAF4                  		bsr.w	Sonic_LevelBound
000161AA 6100 F124                  		bsr.w	Sonic_RecordPosition
000161AE 6100 0000                  		bsr.w	Sonic_Animate
000161B2 6100 0000                  		bsr.w	Sonic_LoadGfx
000161B6 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
000161BC                            
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            ; Subroutine to	stop Sonic falling after he's been hurt
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            
000161BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161BC                            
000161BC                            
000161BC                            Sonic_HurtStop:
000161BC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000161C0 0640 00E0                  		addi.w	#$E0,d0
000161C4                            		;cmp.w	obY(a0),d0
000161C4                            		;bcs.w	KillSonic
000161C4 6100 FD88                  		bsr.w	Sonic_Floor
000161C8 0828 0001 0022             		btst	#1,obStatus(a0)
000161CE 6600                       		bne.s	locret_13860
000161D0 7000                       		moveq	#0,d0
000161D2 3140 0012                  		move.w	d0,obVelY(a0)
000161D6 3140 0010                  		move.w	d0,obVelX(a0)
000161DA 3140 0020                  		move.w	d0,obInertia(a0)
000161DE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000161E4 5528 0024                  		subq.b	#2,obRoutine(a0)
000161E8 317C 0078 0030             		move.w	#$78,$30(a0)
000161EE                            
000161EE                            locret_13860:
000161EE 4E75                       		rts	
000161F0                            ; End of function Sonic_HurtStop
000161F0                            
000161F0                            ; ---------------------------------------------------------------------------
000161F0                            ; Sonic	when he	dies
000161F0                            ; ---------------------------------------------------------------------------
000161F0                            
000161F0                            Sonic_Death:	; Routine 6
000161F0 6100 0000                  		bsr.w	GameOver
000161F4 4EB9 0000 F6B2             		jsr	(ObjectFall).l
000161FA 6100 F0D4                  		bsr.w	Sonic_RecordPosition
000161FE 6100 0000                  		bsr.w	Sonic_Animate
00016202 6100 0000                  		bsr.w	Sonic_LoadGfx
00016206 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001620C                            
0001620C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001620C                            
0001620C                            GameOver:
0001620C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016210 0640 0100                  		addi.w	#$100,d0
00016214 B068 000C                  		cmp.w	obY(a0),d0
00016218 6400 0000                  		bcc.w	locret_13900
0001621C 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
00016222 5428 0024                  		addq.b	#2,obRoutine(a0)
00016226 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001622A 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
0001622E 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
00016232 6600                       		bne.s	loc_138D4
00016234 317C 0000 003A             		move.w	#0,$3A(a0)
0001623A 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016240 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016246 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
0001624C 4238 FE1A                  		clr.b	(f_timeover).w
00016250                            
00016250                            loc_138C2:
0001625A 7003                       		moveq	#3,d0
0001625C 4EF9 0000 1466             		jmp	(AddPLC).l	; load game over patterns
00016262                            		
00016262                            loc_138C3:
0001626C 7003                       		moveq	#3,d0
0001626E 4EF9 0000 1466             		jmp	(AddPLC).l	; load game over patterns
00016274                            ; ===========================================================================
00016274                            
00016274                            loc_138D4:
00016274 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001627A 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001627E 6700                       		beq.s	locret_13900	; if not, branch
00016280 317C 0000 003A             		move.w	#0,$3A(a0)
00016286 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001628C 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016292 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016298 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001629E 60B0                       		bra.s	loc_138C2
000162A0                            		
000162A0                            
000162A0                            ; ===========================================================================
000162A0                            
000162A0                            locret_13900:
000162A0 4E75                       		rts	
000162A2                            ; End of function GameOver
000162A2                            
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            ; Sonic	when the level is restarted
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            
000162A2                            Sonic_ResetLevel:; Routine 8
000162A2 4A68 003A                  		tst.w	$3A(a0)
000162A6 6700                       		beq.s	locret_13914
000162A8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000162AC 6600                       		bne.s	locret_13914
000162AE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000162B4                            
000162B4                            	locret_13914:
000162B4 4E75                       		rts	
000162B4 4E75                       		rts	
000162B6                            		include	"_incObj\Sonic Loops.asm"
000162B6                            ; ---------------------------------------------------------------------------
000162B6                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000162B6                            ; ---------------------------------------------------------------------------
000162B6                            
000162B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162B6                            
000162B6                            
000162B6                            Sonic_Loops:
000162B6 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
000162BC 6700                       		beq.s	@isstarlight	; if yes, branch
000162BE 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
000162C2 6600 0000                  		bne.w	@noloops	; if not, branch
000162C6                            
000162C6                            	@isstarlight:
000162C6 3028 000C                  		move.w	obY(a0),d0
000162CA E248                       		lsr.w	#1,d0
000162CC 0240 0380                  		andi.w	#$380,d0
000162D0 1228 0008                  		move.b	obX(a0),d1
000162D4 0241 007F                  		andi.w	#$7F,d1
000162D8 D041                       		add.w	d1,d0
000162DA 43F8 A400                  		lea	(v_lvllayout).w,a1
000162DE 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000162E2                            
000162E2 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
000162E6 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
000162EA B238 F7AF                  		cmp.b	(v_256roll2).w,d1
000162EE 6700 FA68                  		beq.w	Sonic_ChkRoll
000162F2                            
000162F2 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
000162F6 6700                       		beq.s	@chkifleft	; if yes, branch
000162F8 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
000162FC 6700                       		beq.s	@chkifinair
000162FE 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016304 4E75                       		rts	
00016306                            ; ===========================================================================
00016306                            
00016306                            @chkifinair:
00016306 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
0001630C 6700                       		beq.s	@chkifleft	; if not, branch
0001630E                            
0001630E 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016314 4E75                       		rts	
00016316                            ; ===========================================================================
00016316                            
00016316                            @chkifleft:
00016316 3428 0008                  		move.w	obX(a0),d2
0001631A 0C02 002C                  		cmpi.b	#$2C,d2
0001631E 6400                       		bcc.s	@chkifright
00016320                            
00016320 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016326 4E75                       		rts	
00016328                            ; ===========================================================================
00016328                            
00016328                            @chkifright:
00016328 0C02 00E0                  		cmpi.b	#$E0,d2
0001632C 6500                       		bcs.s	@chkangle1
0001632E                            
0001632E 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016334 4E75                       		rts	
00016336                            ; ===========================================================================
00016336                            
00016336                            @chkangle1:
00016336 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
0001633C 6600                       		bne.s	@chkangle2	; if yes, branch
0001633E                            
0001633E 1228 0026                  		move.b	obAngle(a0),d1
00016342 6700                       		beq.s	@done
00016344 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016348 6200                       		bhi.s	@done		; if yes, branch
0001634A 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016350 4E75                       		rts	
00016352                            ; ===========================================================================
00016352                            
00016352                            @chkangle2:
00016352 1228 0026                  		move.b	obAngle(a0),d1
00016356 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
0001635A 6300                       		bls.s	@done		; if yes, branch
0001635C 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
00016362                            
00016362                            @noloops:
00016362                            @done:
00016362 4E75                       		rts	
00016364                            ; End of function Sonic_Loops
00016364                            ; End of function Sonic_Loops
00016364                            		include	"_incObj\Sonic Animate.asm"
00016364                            ; ---------------------------------------------------------------------------
00016364                            ; Subroutine to	animate	Sonic's sprites
00016364                            ; ---------------------------------------------------------------------------
00016364                            
00016364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016364                            
00016364                            
00016364                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016364 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
0001636A 7000                       		moveq	#0,d0
0001636C 1028 001C                  		move.b	obAnim(a0),d0
00016370 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016374 6700                       		beq.s	@do		; if not, branch
00016376 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0001637A 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
0001637E 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
00016382                            		
00016382 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016388                            
00016388                            	@do:
00016388 D040                       		add.w	d0,d0
0001638A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001638E 1011                       		move.b	(a1),d0
00016390 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016392 1228 0022                  		move.b	obStatus(a0),d1
00016396 0201 0001                  		andi.b	#1,d1
0001639A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000163A0 8328 0001                  		or.b	d1,obRender(a0)
000163A4 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000163A8 6A00                       		bpl.s	@delay		; if time remains, branch
000163AA 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
000163AE                            
000163AE                            @loadframe:
000163AE 7200                       		moveq	#0,d1
000163B0 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
000163B4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000163B8 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
000163BC 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
000163C0                            
000163C0                            	@next:
000163C0 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
000163C4 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
000163C8                            
000163C8                            	@delay:
000163C8 4E75                       		rts	
000163CA                            ; ===========================================================================
000163CA                            
000163CA                            @end_FF:
000163CA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000163CC 6600                       		bne.s	@end_FE		; if not, branch
000163CE 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
000163D2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000163D6 60E8                       		bra.s	@next
000163D8                            ; ===========================================================================
000163D8                            
000163D8                            @end_FE:
000163D8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000163DA 6600                       		bne.s	@end_FD		; if not, branch
000163DC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000163E0 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
000163E4 9200                       		sub.b	d0,d1
000163E6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000163EA 60D4                       		bra.s	@next
000163EC                            ; ===========================================================================
000163EC                            
000163EC                            @end_FD:
000163EC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000163EE 6600                       		bne.s	@end		; if not, branch
000163F0 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
000163F6                            
000163F6                            	@end:
000163F6 4E75                       		rts	
000163F8                            ; ===========================================================================
000163F8                            
000163F8                            @walkrunroll:
000163F8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000163FC 6ACA                       		bpl.s	@delay		; if time remains, branch
000163FE 5200                       		addq.b	#1,d0		; is animation walking/running?
00016400 6600 0000                  		bne.w	@rolljump	; if not, branch
00016404 7200                       		moveq	#0,d1
00016406 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
0001640A 6B00                       		bmi.s	@ble 			; better handling of angles
0001640C 6700                       		beq.s	@ble
0001640E 5300                       		subq.b	#1,d0
00016410                            
00016410                            	@ble:																
00016410 1428 0022                  		move.b	obStatus(a0),d2
00016414 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016418 6600                       		bne.s	@flip		; if yes, branch
0001641A 4600                       		not.b	d0		; reverse angle
0001641C                            
0001641C                            	@flip:
0001641C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016420 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00016422 7203                       		moveq	#3,d1
00016424                            
00016424                            	@noinvert:
00016424 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001642A B302                       		eor.b	d1,d2
0001642C 8528 0001                  		or.b	d2,obRender(a0)
00016430 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
00016436 6600 0000                  		bne.w	@push		; if yes, branch
0001643A                            
0001643A E808                       		lsr.b	#4,d0		; divide angle by $10
0001643C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016440 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016444 6A00                       		bpl.s	@nomodspeed
00016446 4442                       		neg.w	d2		; modulus speed
00016448                            
00016448                            	@nomodspeed:
00016448 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
0001644E 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016452 6400                       		bcc.s	@maxrunning	; if yes, branch
00016454                            
00016454 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001645A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001645E 6400                       		bcc.s	@running	; if yes, branch
00016460                            
00016460 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016466                            
00016466                            	@running:
00016466 D000                       		add.b	d0,d0
00016468 D000                       		add.b	d0,d0
0001646A 1600                       		move.b	d0,d3
0001646C 4442                       		neg.w	d2
0001646E 0642 0780                  		addi.w	#$780,d2
00016472 6A00                       		bpl.s	@belowmax
00016474 7400                       		moveq	#0,d2		; max animation speed
00016476 6000                       		bra.s	@belowmax
00016478                            
00016478                            	@maxrunning:
00016478 D000                       		add.b d0,d0
0001647A 1600                       		move.b d0,d3
0001647C 4442                       		neg.w d2
0001647E 0642 0800                  		addi.w #$800, d2
00016482 6A00                       		bpl.s @belowmax
00016484 7400                       		moveq #0, d2 
00016486                            
00016486                            	@belowmax:
00016486 E04A                       		lsr.w	#8,d2
00016488 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001648C 6100 FF20                  		bsr.w	@loadframe
00016490 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016494 4E75                       		rts	
00016496                            ; ===========================================================================
00016496                            
00016496                            @rolljump:
00016496 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016498 6600                       		bne.s	@push		; if not, branch
0001649A 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001649E 6A00                       		bpl.s	@nomodspeed2
000164A0 4442                       		neg.w	d2
000164A2                            
000164A2                            	@nomodspeed2:
000164A2 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000164A8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000164AC 6400                       		bcc.s	@rollfast	; if yes, branch
000164AE 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000164B4                            
000164B4                            	@rollfast:
000164B4 4442                       		neg.w	d2
000164B6 0642 0400                  		addi.w	#$400,d2
000164BA 6A00                       		bpl.s	@belowmax2
000164BC 7400                       		moveq	#0,d2
000164BE                            
000164BE                            	@belowmax2:
000164BE E04A                       		lsr.w	#8,d2
000164C0 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164C4 1228 0022                  		move.b	obStatus(a0),d1
000164C8 0201 0001                  		andi.b	#1,d1
000164CC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000164D2 8328 0001                  		or.b	d1,obRender(a0)
000164D6 6000 FED6                  		bra.w	@loadframe
000164DA                            ; ===========================================================================
000164DA                            
000164DA                            @push:
000164DA 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000164DE 6B00                       		bmi.s	@negspeed
000164E0 4442                       		neg.w	d2
000164E2                            
000164E2                            	@negspeed:
000164E2 0642 0800                  		addi.w	#$800,d2
000164E6 6A00                       		bpl.s	@belowmax3	
000164E8 7400                       		moveq	#0,d2
000164EA                            
000164EA                            	@belowmax3:
000164EA EC4A                       		lsr.w	#6,d2
000164EC 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164F0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000164F6 1228 0022                  		move.b	obStatus(a0),d1
000164FA 0201 0001                  		andi.b	#1,d1
000164FE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016504 8328 0001                  		or.b	d1,obRender(a0)
00016508 6000 FEA4                  		bra.w	@loadframe
0001650C                            
0001650C                            ; End of function Sonic_Animate
0001650C                            ; End of function Sonic_Animate
0001650C                            		include	"_anim\Sonic.asm"
0001650C                            ; ---------------------------------------------------------------------------
0001650C                            ; Animation script - Sonic
0001650C                            ; ---------------------------------------------------------------------------
0001650C                            Ani_Sonic:
0001650C                            
0001650C 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
0001650E 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016510 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016512 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016514 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016516 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016518 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
0001651A 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
0001651C 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
0001651E 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016520 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016522 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016524 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016526 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016528 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
0001652A 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
0001652C 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
0001652E 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016530 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016532 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016534 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016536 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016538 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
0001653A 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
0001653C 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
0001653E 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016540 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016542 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016544 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016546 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016548 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
0001654A 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
0001654C 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
0001654E 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016550 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016552 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016554 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016556 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016558                            
00016558 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016566 00                         		even
00016566 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016574 00                         		even
00016574 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
0001657B 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016582 00                         		even
00016582 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016589 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016590 00                         		even
00016590 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001659E 00                         		even
0001659E                            SonAni_Wait:	
0001659E 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165AD 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165BC 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165CB 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
000165DA 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000165E9 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000165F8 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016607 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016616 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
0001661E                            		even
0001661E 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016624                            		even
00016624 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
0001662A 00                         		even
0001662A 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
00016630                            		even
00016630 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016634 00                         		even
00016634 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016638 00                         		even
00016638 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
0001663C 00                         		even
0001663C 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016640 00                         		even
00016640 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
0001664A                            		even
0001664A 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016650 00                         		even
00016650 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
0001665A 00                         		even
0001665A 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016664 00                         		even
00016664 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016668                            		even
00016668 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
0001666E                            		even
0001666E 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016674 00                         		even
00016674 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016678 00                         		even
00016678 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016680 00                         		even
00016680 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016684 00                         		even
00016684 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016688 00                         		even
00016688 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
0001668C 00                         		even
0001668C 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016690 00                         		even
00016690                            SonAni_WaterSlide:
00016690 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016694                            		even
00016694 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016698                            		even
00016698 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
000166A0 00                         		even
000166A0 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
000166A4                            		even
000166A4 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
000166B2 00                         		even
000166B2 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
000166BE                            		even
000166BE 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
000166C2                            		even
000166C2 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
000166C6                            		even
000166C6 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
000166CA                            		even
000166CA 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
000166D4 00                         		even
000166D4 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
000166DD 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
000166E5 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
000166EC 3334 35                    		dc.b	$33, $34, $35
000166EF 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
000166F6                            		even
000166F6 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
000166FC                            		even
000166FC                            
000166FC                            
000166FC =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
000166FC =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
000166FC =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
000166FC =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
000166FC =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
000166FC =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
000166FC =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
000166FC =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
000166FC =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
000166FC =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
000166FC =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
000166FC =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
000166FC =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
000166FC =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
000166FC =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
000166FC =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
000166FC =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
000166FC =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
000166FC =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
000166FC =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
000166FC =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
000166FC =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
000166FC =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
000166FC =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
000166FC =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
000166FC =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
000166FC =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
000166FC =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
000166FC =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
000166FC =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
000166FC =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
000166FC =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
000166FC =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
000166FC =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
000166FC =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
000166FC =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
000166FC =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
000166FC =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000166FC =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000166FC                            		include	"_incObj\Sonic LoadGfx.asm"
000166FC                            ; ---------------------------------------------------------------------------
000166FC                            ; Sonic	graphics loading subroutine
000166FC                            ; ---------------------------------------------------------------------------
000166FC                            
000166FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166FC                            
000166FC                            
000166FC                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
000166FC 7000                       		moveq	#0,d0
000166FE 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016702 B038 F766                  		cmp.b	($FFFFF766).w,d0
00016706 6700                       		beq.s	locret_13C96
00016708 11C0 F766                  		move.b	d0,($FFFFF766).w
0001670C 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016712 D040                       		add.w	d0,d0
00016714 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016718 7A00                       		moveq	#0,d5
0001671A 1A1A                       		move.b	(a2)+,d5
0001671C 5345                       		subq.w	#1,d5
0001671E 6B00                       		bmi.s	locret_13C96
00016720 383C F000                  		move.w	#$F000,d4
00016724 2C3C 0000 0000             		move.l	#Art_Sonic,d6
0001672A                            
0001672A                            SPLC_ReadEntry:
0001672A 7200                       		moveq	#0,d1
0001672C 121A                       		move.b	(a2)+,d1
0001672E E149                       		lsl.w	#8,d1
00016730 121A                       		move.b	(a2)+,d1
00016732 3601                       		move.w	d1,d3
00016734 E04B                       		lsr.w	#8,d3
00016736 0243 00F0                  		andi.w	#$F0,d3
0001673A 0643 0010                  		addi.w	#$10,d3
0001673E 0241 0FFF                  		andi.w	#$FFF,d1
00016742 EB89                       		lsl.l	#5,d1
00016744 D286                       		add.l	d6,d1
00016746 3404                       		move.w	d4,d2
00016748 D843                       		add.w	d3,d4
0001674A D843                       		add.w	d3,d4
0001674C 4EB9 0000 11A2             		jsr	(QueueDMATransfer).l
00016752 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016756                            
00016756                            locret_13C96:
00016756 4E75                       		rts	
00016758                            ; End of function Sonic_LoadGfx
00016758                            ; End of function Sonic_LoadGfx
00016758                            
00016758                            		include	"_incObj\0A Drowning Countdown.asm"
00016758                            ; ---------------------------------------------------------------------------
00016758                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016758                            ; Sonic's mouth (LZ)
00016758                            ; ---------------------------------------------------------------------------
00016758                            
00016758                            DrownCount:
00016758 7000                       		moveq	#0,d0
0001675A 1028 0024                  		move.b	obRoutine(a0),d0
0001675E 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016762 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016766                            ; ===========================================================================
00016766                            Drown_Index:
00016766 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016768 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
0001676A 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
0001676C 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
0001676E 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016770 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016772 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016774 0000                       			dc.w Drown_Display-Drown_Index
00016776 0000                       			dc.w Drown_Delete-Drown_Index
00016778                            
00016778 =00000030                  drown_origX:		equ $30		; original x-axis position
00016778 =00000038                  drown_time:		equ $38		; time between each number changes
00016778                            
00016778 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016778 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016778 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016778 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016778 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016778 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016778 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016778                            ; ===========================================================================
00016778                            
00016778                            Drown_Main:	; Routine 0
00016778 5428 0024                  		addq.b	#2,obRoutine(a0)
0001677C 217C 0001 4B46 0004        		move.l	#Map_Bub,obMap(a0)
00016784 317C 8348 0002             		move.w	#$8348,obGfx(a0)
0001678A 117C 0084 0001             		move.b	#$84,obRender(a0)
00016790 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016796 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001679C 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000167A0 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
000167A2                            
000167A2 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
000167A6 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
000167AE 317C 0440 0002             		move.w	#$440,obGfx(a0)
000167B4 0240 007F                  		andi.w	#$7F,d0
000167B8 1140 0033                  		move.b	d0,$33(a0)
000167BC 6000 0000                  		bra.w	Drown_Countdown
000167C0                            ; ===========================================================================
000167C0                            
000167C0                            @smallbubble:
000167C0 1140 001C                  		move.b	d0,obAnim(a0)
000167C4 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
000167CA 317C FF78 0012             		move.w	#-$88,obVelY(a0)
000167D0                            
000167D0                            Drown_Animate:	; Routine 2
000167D0 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000167D6 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
000167DC                            
000167DC                            Drown_ChkWater:	; Routine 4
000167DC 3038 F646                  		move.w	(v_waterpos1).w,d0
000167E0 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
000167E4 6500                       		bcs.s	@wobble		; if not, branch
000167E6                            
000167E6 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
000167EC 5E28 001C                  		addq.b	#7,obAnim(a0)
000167F0 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
000167F6 6700                       		beq.s	Drown_Display
000167F8 6000                       		bra.s	Drown_Display
000167FA                            ; ===========================================================================
000167FA                            
000167FA                            @wobble:
000167FA 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
000167FE 6700                       		beq.s	@notunnel	; if not, branch
00016800 5868 0030                  		addq.w	#4,drown_origX(a0)
00016804                            
00016804                            	@notunnel:
00016804 1028 0026                  		move.b	obAngle(a0),d0
00016808 5228 0026                  		addq.b	#1,obAngle(a0)
0001680C 0240 007F                  		andi.w	#$7F,d0
00016810 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016816 1031 0000                  		move.b	(a1,d0.w),d0
0001681A 4880                       		ext.w	d0
0001681C D068 0030                  		add.w	drown_origX(a0),d0
00016820 3140 0008                  		move.w	d0,obX(a0)
00016824 6100                       		bsr.s	Drown_ShowNumber
00016826 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001682C 4A28 0001                  		tst.b	obRender(a0)
00016830 6A00                       		bpl.s	@delete
00016832 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00016838                            
00016838                            	@delete:
00016838 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001683E                            ; ===========================================================================
0001683E                            
0001683E                            Drown_Display:	; Routine 6, Routine $E
0001683E 6100                       		bsr.s	Drown_ShowNumber
00016840 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016846 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001684C 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00016852                            ; ===========================================================================
00016852                            
00016852                            Drown_Delete:	; Routine 8, Routine $10
00016852 4EF9 0000 F73E             		jmp	(DeleteObject).l
00016858                            ; ===========================================================================
00016858                            
00016858                            Drown_AirLeft:	; Routine $C
00016858 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001685E 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016860 5368 0038                  		subq.w	#1,drown_time(a0)
00016864 6600                       		bne.s	@display
00016866 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
0001686C 5E28 001C                  		addq.b	#7,obAnim(a0)
00016870 60CC                       		bra.s	Drown_Display
00016872                            ; ===========================================================================
00016872                            
00016872                            	@display:
00016872 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016878 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001687E 4A28 0001                  		tst.b	obRender(a0)
00016882 6A00                       		bpl.s	Drown_AirLeft_Delete
00016884 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001688A                            
0001688A                            Drown_AirLeft_Delete:	
0001688A 4EF9 0000 F73E             		jmp	(DeleteObject).l
00016890                            ; ===========================================================================
00016890                            
00016890                            Drown_ShowNumber:
00016890 4A68 0038                  		tst.w	drown_time(a0)
00016894 6700                       		beq.s	@nonumber
00016896 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001689A 6600                       		bne.s	@nonumber	; if time remains, branch
0001689C 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
000168A2 6400                       		bcc.s	@nonumber
000168A4                            
000168A4 317C 000F 0038             		move.w	#15,drown_time(a0)
000168AA 4268 0012                  		clr.w	obVelY(a0)
000168AE 117C 0080 0001             		move.b	#$80,obRender(a0)
000168B4 3028 0008                  		move.w	obX(a0),d0
000168B8 9078 F700                  		sub.w	(v_screenposx).w,d0
000168BC 0640 0080                  		addi.w	#$80,d0
000168C0 3140 0008                  		move.w	d0,obX(a0)
000168C4 3028 000C                  		move.w	obY(a0),d0
000168C8 9078 F704                  		sub.w	(v_screenposy).w,d0
000168CC 0640 0080                  		addi.w	#$80,d0
000168D0 3140 000A                  		move.w	d0,obScreenY(a0)
000168D4 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000168DA                            
000168DA                            	@nonumber:
000168DA 4E75                       		rts	
000168DC                            ; ===========================================================================
000168DC                            Drown_WobbleData:
000168DC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000168EC 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000168FC 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001690C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001691C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001692C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001693C FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
0001694C FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
0001695C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001696C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001697C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001698C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001699C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000169AC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000169BC FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000169CC FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000169DC                            ; ===========================================================================
000169DC                            
000169DC                            Drown_Countdown:; Routine $A
000169DC 4A68 002C                  		tst.w	$2C(a0)
000169E0 6600 0000                  		bne.w	@loc_13F86
000169E4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000169EA 6400 0000                  		bcc.w	@nocountdown
000169EE 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000169F4 6700 0000                  		beq.w	@nocountdown	; if not, branch
000169F8                            
000169F8 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000169FC 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016A00 317C 003B 0038             		move.w	#59,drown_time(a0)
00016A06 317C 0001 0036             		move.w	#1,$36(a0)
00016A0C 4EB9 0000 3788             		jsr	(RandomNumber).l
00016A12 0240 0001                  		andi.w	#1,d0
00016A16 1140 0034                  		move.b	d0,$34(a0)
00016A1A 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016A1E 0C40 0019                  		cmpi.w	#25,d0
00016A22 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016A24 0C40 0014                  		cmpi.w	#20,d0
00016A28 6700                       		beq.s	@warnsound
00016A2A 0C40 000F                  		cmpi.w	#15,d0
00016A2E 6700                       		beq.s	@warnsound
00016A30 0C40 000C                  		cmpi.w	#12,d0
00016A34 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016A36                            
00016A36                            	@skipmusic:
00016A40 5328 0032                  		subq.b	#1,$32(a0)
00016A44 6A00                       		bpl.s	@reduceair
00016A46 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016A4C 08E8 0007 0036             		bset	#7,$36(a0)
00016A52 6000                       		bra.s	@reduceair
00016A54                            ; ===========================================================================
00016A54                            
00016A54                            @warnsound:
00016A5E                            
00016A5E                            @reduceair:
00016A5E 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016A62 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016A66                            
00016A66                            		; Sonic drowns here
00016A66 6100 0000                  		bsr.w	ResumeMusic
00016A6A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016A7A 117C 000A 0034             		move.b	#$A,$34(a0)
00016A80 317C 0001 0036             		move.w	#1,$36(a0)
00016A86 317C 0078 002C             		move.w	#$78,$2C(a0)
00016A8C 2F08                       		move.l	a0,-(sp)
00016A8E 41F8 D000                  		lea	(v_player).w,a0
00016A92 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016A96 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016A9C 08E8 0001 0022             		bset	#1,obStatus(a0)
00016AA2 08E8 0007 0002             		bset	#7,obGfx(a0)
00016AA8 317C 0000 0012             		move.w	#0,obVelY(a0)
00016AAE 317C 0000 0010             		move.w	#0,obVelX(a0)
00016AB4 317C 0000 0020             		move.w	#0,obInertia(a0)
00016ABA 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016AC0 205F                       		movea.l	(sp)+,a0
00016AC2 4E75                       		rts	
00016AC4                            ; ===========================================================================
00016AC4                            
00016AC4                            @loc_13F86:
00016AC4 5368 002C                  		subq.w	#1,$2C(a0)
00016AC8 6600                       		bne.s	@loc_13F94
00016ACA 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016AD0 4E75                       		rts	
00016AD2                            ; ===========================================================================
00016AD2                            
00016AD2                            	@loc_13F94:
00016AD2 2F08                       		move.l	a0,-(sp)
00016AD4 41F8 D000                  		lea	(v_player).w,a0
00016AD8 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
00016ADE 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016AE4 205F                       		movea.l	(sp)+,a0
00016AE6 6000                       		bra.s	@nochange
00016AE8                            ; ===========================================================================
00016AE8                            
00016AE8                            @gotomakenum:
00016AE8 6000                       		bra.s	@makenum
00016AEA                            ; ===========================================================================
00016AEA                            
00016AEA                            @nochange:
00016AEA 4A68 0036                  		tst.w	$36(a0)
00016AEE 6700 0000                  		beq.w	@nocountdown
00016AF2 5368 003A                  		subq.w	#1,$3A(a0)
00016AF6 6A00 0000                  		bpl.w	@nocountdown
00016AFA                            
00016AFA                            @makenum:
00016AFA 4EB9 0000 3788             		jsr	(RandomNumber).l
00016B00 0240 000F                  		andi.w	#$F,d0
00016B04 3140 003A                  		move.w	d0,$3A(a0)
00016B08 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
00016B0E 6600 0000                  		bne.w	@nocountdown
00016B12 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016B16 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016B1C 7006                       		moveq	#6,d0
00016B1E 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016B24 6700                       		beq.s	@noflip
00016B26 4440                       		neg.w	d0
00016B28 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016B2E                            
00016B2E                            	@noflip:
00016B2E D169 0008                  		add.w	d0,obX(a1)
00016B32 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016B38 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016B3E 4A68 002C                  		tst.w	$2C(a0)
00016B42 6700 0000                  		beq.w	@loc_1403E
00016B46 0268 0007 003A             		andi.w	#7,$3A(a0)
00016B4C 0668 0000 003A             		addi.w	#0,$3A(a0)
00016B52 3038 D00C                  		move.w	(v_player+obY).w,d0
00016B56 0440 000C                  		subi.w	#$C,d0
00016B5A 3340 000C                  		move.w	d0,obY(a1)
00016B5E 4EB9 0000 3788             		jsr	(RandomNumber).l
00016B64 1340 0026                  		move.b	d0,obAngle(a1)
00016B68 3038 FE04                  		move.w	(v_framecount).w,d0
00016B6C 0200 0003                  		andi.b	#3,d0
00016B70 6600                       		bne.s	@loc_14082
00016B72 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016B78 6000                       		bra.s	@loc_14082
00016B7A                            ; ===========================================================================
00016B7A                            
00016B7A                            @loc_1403E:
00016B7A 0828 0007 0036             		btst	#7,$36(a0)
00016B80 6700                       		beq.s	@loc_14082
00016B82 3438 FE14                  		move.w	(v_air).w,d2
00016B86 E24A                       		lsr.w	#1,d2
00016B88 4EB9 0000 3788             		jsr	(RandomNumber).l
00016B8E 0240 0003                  		andi.w	#3,d0
00016B92 6600                       		bne.s	@loc_1406A
00016B94 08E8 0006 0036             		bset	#6,$36(a0)
00016B9A 6600                       		bne.s	@loc_14082
00016B9C 1342 0028                  		move.b	d2,obSubtype(a1)
00016BA0 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016BA6                            
00016BA6                            	@loc_1406A:
00016BA6 4A28 0034                  		tst.b	$34(a0)
00016BAA 6600                       		bne.s	@loc_14082
00016BAC 08E8 0006 0036             		bset	#6,$36(a0)
00016BB2 6600                       		bne.s	@loc_14082
00016BB4 1342 0028                  		move.b	d2,obSubtype(a1)
00016BB8 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016BBE                            
00016BBE                            @loc_14082:
00016BBE 5328 0034                  		subq.b	#1,$34(a0)
00016BC2 6A00                       		bpl.s	@nocountdown
00016BC4 4268 0036                  		clr.w	$36(a0)
00016BC8                            
00016BC8                            @nocountdown:
00016BC8 4E75                       		rts	
00016BC8 4E75                       		rts	
00016BCA                            
00016BCA                            
00016BCA                            ; ---------------------------------------------------------------------------
00016BCA                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016BCA                            ; ---------------------------------------------------------------------------
00016BCA                            
00016BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BCA                            
00016BCA                            
00016BCA                            ResumeMusic:
00016BCA                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016BCA                            		;bhi.s	@over12		; if yes, branch
00016BCA                            		;move.b	(v_Saved_music),d0
00016BCA                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016BCA                            		;beq.s	@notinvinc ; if not, branch
00016BCA                            		;move.w	#bgm_Invincible,d0
00016BCA                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016BCA                            		;beq.s	@notinvinc	; if not, branch
00016BCA                            		;move.w	#bgm_Ending,d0
00016BCA                            
00016BCA                            	;@notinvinc:
00016BCA                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016BCA                            		;beq.s	@playselected ; if not, branch
00016BCA                            		;move.w	#bgm_Boss,d0
00016BCA                            
00016BCA                            	;@playselected:
00016BCA                            		;jsr	(PlaySound).l
00016BCA                            
00016BCA                            	;@over12:
00016BCA 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016BD0 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016BD4 4E75                       		rts	
00016BD6                            
00016BD6                            ;End of function ResumeMusic
00016BD6                            
00016BD6                            ; ===========================================================================
00016BD6                            
00016BD6                            		include	"_anim\Drowning Countdown.asm"
00016BD6                            ; ---------------------------------------------------------------------------
00016BD6                            ; Animation script - countdown numbers and bubbles (LZ)
00016BD6                            ; ---------------------------------------------------------------------------
00016BD6 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016BD8 0000                       		dc.w @oneappear-Ani_Drown
00016BDA 0000                       		dc.w @twoappear-Ani_Drown
00016BDC 0000                       		dc.w @threeappear-Ani_Drown
00016BDE 0000                       		dc.w @fourappear-Ani_Drown
00016BE0 0000                       		dc.w @fiveappear-Ani_Drown
00016BE2 0000                       		dc.w @smallbubble-Ani_Drown
00016BE4 0000                       		dc.w @zeroflash-Ani_Drown
00016BE6 0000                       		dc.w @oneflash-Ani_Drown
00016BE8 0000                       		dc.w @twoflash-Ani_Drown
00016BEA 0000                       		dc.w @threeflash-Ani_Drown
00016BEC 0000                       		dc.w @fourflash-Ani_Drown
00016BEE 0000                       		dc.w @fiveflash-Ani_Drown
00016BF0 0000                       		dc.w @blank-Ani_Drown
00016BF2 0000                       		dc.w @mediumbubble-Ani_Drown
00016BF4 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016BFE 00                         		even
00016BFE 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016C08 00                         		even
00016C08 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016C12 00                         		even
00016C12 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016C1C 00                         		even
00016C1C 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016C26 00                         		even
00016C26 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016C30 00                         		even
00016C30 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016C36 00                         		even
00016C36 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016C3E 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016C46 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016C4E 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016C56 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016C5E 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016C66 0EFC                       @blank:		dc.b $E, afRoutine
00016C68 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016C6E                            		even
00016C6E                            		even
00016C6E                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            ; Sprite mappings - drowning countdown numbers (LZ)
00016C6E                            ; ---------------------------------------------------------------------------
00016C6E                            Map_Drown_internal:
00016C6E 0000                       		dc.w @num-Map_Drown_internal
00016C70 01                         @num:		dc.b 1
00016C71 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016C76                            		even
00016C76                            		even
00016C76                            
00016C76                            		include	"_incObj\4E Silver Shield.asm"
00016C76                            ; ---------------------------------------------------------------------------
00016C76                            ; Object 4E - Silver Shield
00016C76                            ; ---------------------------------------------------------------------------
00016C76                            
00016C76                            SpShieldItem:
00016C76 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016C7C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016C80                            		; In this case, VRAM = $541*20
00016C80 363C 0200                  		move.w #$200,d3
00016C84 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016C8A                            ; ---------------------------------------------------------------------------
00016C8A                            SpShieldObj_Main:
00016C8A 7000                       		moveq #0,d0
00016C8C 1028 0024                  		move.b $24(a0),d0
00016C90 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016C94 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016C98                            ; ===========================================================================
00016C98                            SpShield_Index:
00016C98 0000                       		dc.w SpShield_Init-SpShield_Index
00016C9A 0000                       		dc.w SpShieldChecks-SpShield_Index
00016C9C                            ; ===========================================================================
00016C9C                            SpShield_Init:
00016C9C 5428 0024                  		addq.b #2,$24(a0)
00016CA0 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016CA8 117C 0004 0001             		move.b #4,1(a0)
00016CAE 317C 0080 0018             		move.w #$80,$18(a0)
00016CB4 117C 0018 0014             		move.b #$18,obActWid(a0)
00016CBA 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016CC0 0838 0007 D002             		btst #7,($FFFFD002).w
00016CC6 6700                       		beq.s SpShieldChecks
00016CC8 08E8 0007 0002             		bset #7,2(a0)
00016CCE                            ; ---------------------------------------------------------------------------
00016CCE                            SpShieldChecks:
00016CCE 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016CD2 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016CD4 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016CD8 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016CDA                            SpShieldProperties:
00016CDA 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016CE0 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016CE6 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016CEC 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016CF2 4EB9 0000 C7AA             		jsr AnimateSprite
00016CF8 4EFA 8A04                  		jmp DisplaySprite
00016CFC                            SpSonicHasShield:
00016CFC 4E75                       		rts
00016CFE                            Spjmp_DeleteObj38: ; loc_12648:
00016CFE 4EFA 8A3E                  		jmp DeleteObject
00016CFE 4EFA 8A3E                  		jmp DeleteObject
00016D02                            		include	"_incObj\04 Gold Shield.asm"
00016D02                            ; ---------------------------------------------------------------------------
00016D02                            ; Object 04 - Gold shield
00016D02                            ; ---------------------------------------------------------------------------
00016D02                            
00016D02                            GShieldItem:
00016D02 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016D08 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016D0C                            		; In this case, VRAM = $541*20
00016D0C 363C 0200                  		move.w #$200,d3
00016D10 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016D16                            ; ---------------------------------------------------------------------------
00016D16                            GShieldObj_Main:
00016D16 7000                       		moveq #0,d0
00016D18 1028 0024                  		move.b $24(a0),d0
00016D1C 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016D20 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016D24                            ; ===========================================================================
00016D24                            GShield_Index:
00016D24 0000                       		dc.w GShield_Init-GShield_Index
00016D26 0000                       		dc.w GShieldChecks-GShield_Index
00016D28                            ; ===========================================================================
00016D28                            GShield_Init:
00016D28 5428 0024                  		addq.b #2,$24(a0)
00016D2C 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016D34 117C 0004 0001             		move.b #4,1(a0)
00016D3A 317C 0080 0018             		move.w #$80,$18(a0)
00016D40 117C 0018 0014             		move.b #$18,obActWid(a0)
00016D46 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016D4C 0838 0007 D002             		btst #7,($FFFFD002).w
00016D52 6700                       		beq.s GShieldChecks
00016D54 08E8 0007 0002             		bset #7,2(a0)
00016D5A                            ; ---------------------------------------------------------------------------
00016D5A                            GShieldChecks:
00016D5A 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016D5E 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016D60 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016D64 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016D66                            GShieldProperties:
00016D66 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016D6C 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016D72 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016D78 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016D7E 4EB9 0000 C7AA             		jsr AnimateSprite
00016D84 4EFA 8978                  		jmp DisplaySprite
00016D88                            GSonicHasShield:
00016D88 4E75                       		rts
00016D8A                            Gjmp_DeleteObj38: ; loc_12648:
00016D8A 4EFA 89B2                  		jmp DeleteObject
00016D8A 4EFA 89B2                  		jmp DeleteObject
00016D8E                            		include	"_incObj\07 Red Shield.asm"
00016D8E                            ; ---------------------------------------------------------------------------
00016D8E                            ; Object 07 - red shield
00016D8E                            ; ---------------------------------------------------------------------------
00016D8E                            
00016D8E                            RShieldItem:
00016D8E 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00016D94 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016D98                            		; In this case, VRAM = $541*20
00016D98 363C 0200                  		move.w #$200,d3
00016D9C 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016DA2                            ; ---------------------------------------------------------------------------
00016DA2                            RShieldObj_Main:
00016DA2 7000                       		moveq #0,d0
00016DA4 1028 0024                  		move.b $24(a0),d0
00016DA8 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00016DAC 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00016DB0                            ; ===========================================================================
00016DB0                            RShield_Index:
00016DB0 0000                       		dc.w RShield_Init-RShield_Index
00016DB2 0000                       		dc.w RShieldChecks-RShield_Index
00016DB4                            ; ===========================================================================
00016DB4                            RShield_Init:
00016DB4 5428 0024                  		addq.b #2,$24(a0)
00016DB8 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016DC0 117C 0004 0001             		move.b #4,1(a0)
00016DC6 317C 0080 0018             		move.w #$80,$18(a0)
00016DCC 117C 0018 0014             		move.b #$18,obActWid(a0)
00016DD2 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016DD8 0838 0007 D002             		btst #7,($FFFFD002).w
00016DDE 6700                       		beq.s RShieldChecks
00016DE0 08E8 0007 0002             		bset #7,2(a0)
00016DE6                            ; ---------------------------------------------------------------------------
00016DE6                            RShieldChecks:
00016DE6 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016DEA 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00016DEC 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00016DF0 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00016DF2                            RShieldProperties:
00016DF2 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016DF8 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016DFE 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E04 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E0A 4EB9 0000 C7AA             		jsr AnimateSprite
00016E10 4EFA 88EC                  		jmp DisplaySprite
00016E14                            RSonicHasShield:
00016E14 4E75                       		rts
00016E16                            Rjmp_DeleteObj38: ; loc_12648:
00016E16 4EFA 8926                  		jmp DeleteObject
00016E16 4EFA 8926                  		jmp DeleteObject
00016E1A                            		include	"_incObj\38 Shield.asm"
00016E1A                            ; ---------------------------------------------------------------------------
00016E1A                            ; Object 38 - shield
00016E1A                            ; ---------------------------------------------------------------------------
00016E1A                            
00016E1A                            ShieldItem:
00016E1A 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00016E20 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016E24                            		; In this case, VRAM = $541*20
00016E24 363C 0200                  		move.w #$200,d3
00016E28 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016E2E                            ; ---------------------------------------------------------------------------
00016E2E                            ShieldObj_Main:
00016E2E 7000                       		moveq #0,d0
00016E30 1028 0024                  		move.b $24(a0),d0
00016E34 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016E38 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016E3C                            ; ===========================================================================
00016E3C                            Shield_Index:
00016E3C 0000                       		dc.w Shield_Init-Shield_Index
00016E3E 0000                       		dc.w ShieldChecks-Shield_Index
00016E40                            ; ===========================================================================
00016E40                            Shield_Init:
00016E40 5428 0024                  		addq.b #2,$24(a0)
00016E44 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E4C 117C 0004 0001             		move.b #4,1(a0)
00016E52 317C 0080 0018             		move.w #$80,$18(a0)
00016E58 117C 0018 0014             		move.b #$18,obActWid(a0)
00016E5E 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016E64 0838 0007 D002             		btst #7,($FFFFD002).w
00016E6A 6700                       		beq.s ShieldChecks
00016E6C 08E8 0007 0002             		bset #7,2(a0)
00016E72                            ; ---------------------------------------------------------------------------
00016E72                            ShieldChecks:
00016E72 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016E76 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016E78 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016E7C 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00016E7E                            ShieldProperties:
00016E7E 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016E84 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016E8A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E90 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E96 4EB9 0000 C7AA             		jsr AnimateSprite
00016E9C 4EFA 8860                  		jmp DisplaySprite
00016EA0                            SonicHasShield:
00016EA0 4E75                       		rts
00016EA2                            jmp_DeleteObj38: ; loc_12648:
00016EA2 4EFA 889A                  		jmp DeleteObject
00016EA2 4EFA 889A                  		jmp DeleteObject
00016EA6                            		include	"_incObj\19 Invincibility Stars.asm"		
00016EA6                            ; ---------------------------------------------------------------------------
00016EA6                            ; Object 19 - Invincibility Stars
00016EA6                            ; ---------------------------------------------------------------------------
00016EA6                            
00016EA6                            InvStarsObj:
00016EA6 223C 0000 0000             		move.l #Unc_Stars,d1
00016EAC 343C A820                  		move.w #$A820,d2
00016EB0 363C 0200                  		move.w #$200,d3
00016EB4 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016EBA                            Invincibility_Main:
00016EBA 7000                       		moveq #0,d0
00016EBC 1028 0024                  		move.b $24(a0),d0
00016EC0                            Invincibility_Init:
00016EC0 5428 0024                  		addq.b #2,$24(a0)
00016EC4 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00016ECC 117C 0004 0001             		move.b #4,1(a0)
00016ED2 317C 0080 0018             		move.w #$80,$18(a0)
00016ED8 117C 0010 0014             		move.b #$10,obActWid(a0)
00016EDE 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00016EE4                            ; ===========================================================================
00016EE4                            
00016EE4                            Obj19_Stars: ; XREF: Obj38_Index
00016EE4 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00016EE8 6700                       		beq.s Obj19_Delete2 ; if not, branch
00016EEA 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00016EEE 1228 001C                  		move.b $1C(a0),d1
00016EF2 5301                       		subq.b #1,d1
00016EF4 6000                       		bra.s Obj19_StarTrail
00016EF6                            ; ===========================================================================
00016EF6 E909                       		lsl.b #4,d1
00016EF8 5801                       		addq.b #4,d1
00016EFA 9001                       		sub.b d1,d0
00016EFC 1228 0030                  		move.b $30(a0),d1
00016F00 9001                       		sub.b d1,d0
00016F02 5801                       		addq.b #4,d1
00016F04 0201 000F                  		andi.b #$F,d1
00016F08 1141 0030                  		move.b d1,$30(a0)
00016F0C 6000                       		bra.s Obj19_StarTrail2a
00016F0E                            ; ===========================================================================
00016F0E                            
00016F0E                            Obj19_StarTrail: ; XREF: Obj19_Stars
00016F0E E709                       		lsl.b #3,d1
00016F10 1401                       		move.b d1,d2
00016F12 D201                       		add.b d1,d1
00016F14 D202                       		add.b d2,d1
00016F16 5801                       		addq.b #4,d1
00016F18 9001                       		sub.b d1,d0
00016F1A 1228 0030                  		move.b $30(a0),d1
00016F1E 9001                       		sub.b d1,d0
00016F20 5801                       		addq.b #4,d1
00016F22 0C01 0018                  		cmpi.b #$18,d1
00016F26 6500                       		bcs.s Obj19_StarTrail2
00016F28 7200                       		moveq #0,d1
00016F2A                            
00016F2A                            Obj19_StarTrail2:
00016F2A 1141 0030                  		move.b d1,$30(a0)
00016F2E                            
00016F2E                            Obj19_StarTrail2a:
00016F2E 43F8 CB00                  		lea ($FFFFCB00).w,a1
00016F32 43F1 0000                  		lea (a1,d0.w),a1
00016F36 3159 0008                  		move.w (a1)+,8(a0)
00016F3A 3159 000C                  		move.w (a1)+,$C(a0)
00016F3E 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
00016F44 43F9 0000 0000             		lea (Ani_Shield).l,a1
00016F4A 4EB9 0000 C7AA             		jsr (AnimateSprite).l
00016F50 4EF9 0000 F6FE             		jmp (DisplaySprite).l
00016F56                            ; ===========================================================================
00016F56                            
00016F56                            Obj19_Delete2: ; XREF: Obj19_Stars
00016F56 4EF9 0000 F73E             		jmp (DeleteObject).l
00016F56 4EF9 0000 F73E             		jmp (DeleteObject).l
00016F5C                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00016F5C                            ; ---------------------------------------------------------------------------
00016F5C                            ; Object 4A - special stage entry from beta
00016F5C                            ; ---------------------------------------------------------------------------
00016F5C                            
00016F5C                            VanishSonic:
00016F5C 7000                       		moveq	#0,d0
00016F5E 1028 0024                  		move.b	obRoutine(a0),d0
00016F62 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00016F66 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00016F6A                            ; ===========================================================================
00016F6A 0000                       Van_Index:	dc.w Van_Main-Van_Index
00016F6C 0000                       		dc.w Van_RmvSonic-Van_Index
00016F6E 0000                       		dc.w Van_LoadSonic-Van_Index
00016F70                            
00016F70 =00000030                  van_time:	equ $30		; time for Sonic to disappear
00016F70                            ; ===========================================================================
00016F70                            
00016F70                            Van_Main:	; Routine 0
00016F70 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00016F74 6700                       		beq.s	@isempty	; if yes, branch
00016F76 4E75                       		rts	
00016F78                            
00016F78                            	@isempty:
00016F78 5428 0024                  		addq.b	#2,obRoutine(a0)
00016F7C 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00016F84 117C 0004 0001             		move.b	#4,obRender(a0)
00016F8A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F90 117C 0038 0014             		move.b	#$38,obActWid(a0)
00016F96 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016F9C 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00016FA2                            
00016FA2                            Van_RmvSonic:	; Routine 2
00016FA2 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00016FA8 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00016FAE 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00016FB4 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00016FBA 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00016FC0 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00016FC6 6600                       		bne.s	@display
00016FC8 4A38 D000                  		tst.b	(v_player).w
00016FCC 6700                       		beq.s	@display
00016FCE 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00016FDE                            
00016FDE                            	@display:
00016FDE 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00016FE4                            ; ===========================================================================
00016FE4                            
00016FE4                            Van_LoadSonic:	; Routine 4
00016FE4 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00016FE8 6600                       		bne.s	@wait		; if time remains, branch
00016FEA 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00016FF0 4EF9 0000 F73E             		jmp	(DeleteObject).l
00016FF6                            
00016FF6                            	@wait:
00016FF6 4E75                       		rts	
00016FF6 4E75                       		rts	
00016FF8                            		include	"_incObj\08 Water Splash.asm"
00016FF8                            ; ---------------------------------------------------------------------------
00016FF8                            ; Object 08 - water splash (LZ)
00016FF8                            ; ---------------------------------------------------------------------------
00016FF8                            
00016FF8                            Splash:
00016FF8 7000                       		moveq	#0,d0
00016FFA 1028 0024                  		move.b	obRoutine(a0),d0
00016FFE 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017002 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017006                            ; ===========================================================================
00017006 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017008 0000                       		dc.w Spla_Display-Spla_Index
0001700A 0000                       		dc.w Spla_Delete-Spla_Index
0001700C                            ; ===========================================================================
0001700C                            
0001700C                            Spla_Main:    ; Routine 0
0001700C 5428 0024                          addq.b    #2,obRoutine(a0)
00017010 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017018 0028 0004 0001                     ori.b    #4,obRender(a0)
0001701E 117C 0001 0018                     move.b    #1,obPriority(a0)
00017024 117C 0010 0014                     move.b    #$10,obActWid(a0)
0001702A 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017030 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017036                            
00017036                            Spla_Display:    ; Routine 2
00017036                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017036 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
0001703C 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017042 4EB9 0000 C7AA                     jsr    (AnimateSprite).l
00017048 4EF9 0000 F6FE                     jmp    (DisplaySprite).l
0001704E                            ; ===========================================================================
0001704E                            
0001704E                            Spla_Delete:	; Routine 4
0001704E 4EF9 0000 F73E             		jmp	(DeleteObject).l	; delete when animation	is complete
0001704E 4EF9 0000 F73E             		jmp	(DeleteObject).l	; delete when animation	is complete
00017054                            		include	"_anim\Shield and Invincibility.asm"
00017054                            ; ---------------------------------------------------------------------------
00017054                            ; Animation script - shield and invincibility stars
00017054                            ; ---------------------------------------------------------------------------
00017054 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017056 0000                       		dc.w @stars1-Ani_Shield
00017058 0000                       		dc.w @stars2-Ani_Shield
0001705A 0000                       		dc.w @stars3-Ani_Shield
0001705C 0000                       		dc.w @stars4-Ani_Shield
0001705E 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
00017066 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
0001706C 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001707D 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017086 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017097 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
000170A0 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000170B1 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
000170BA                            		even
000170BA                            		even
000170BA                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
000170BA                            ; --------------------------------------------------------------------------------
000170BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000170BA                            ; --------------------------------------------------------------------------------
000170BA                            
000170BA                            SME_7M_8q:	
000170BA 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
000170BE 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
000170C2 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
000170C6 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
000170CA 00                         SME_7M_8q_10:	dc.b 0	
000170CB 04                         SME_7M_8q_11:	dc.b 4	
000170CC E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000170D1 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000170D6 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000170DB 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000170E0 04                         SME_7M_8q_26:	dc.b 4	
000170E1 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
000170E6 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
000170EB 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
000170F0 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000170F5 04                         SME_7M_8q_3B:	dc.b 4	
000170F6 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000170FB E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017100 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017105 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
0001710A 04                         SME_7M_8q_50:	dc.b 4	
0001710B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017110 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017115 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
0001711A 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
0001711F 04                         SME_7M_8q_65:	dc.b 4	
00017120 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017125 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001712A 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
0001712F 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017134 04                         SME_7M_8q_7A:	dc.b 4	
00017135 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
0001713A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
0001713F 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00017144 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00017149 04                         SME_7M_8q_8F:	dc.b 4	
0001714A E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
0001714F E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
00017154 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00017159 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001715E                            		even
0001715E                            		even
0001715E                            Map_Shield2:	include	"_maps\Shield 2.asm"
0001715E                            ; --------------------------------------------------------------------------------
0001715E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001715E                            ; --------------------------------------------------------------------------------
0001715E                            
0001715E                            SME_X5P7B:	
0001715E 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
00017162 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
00017166 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
0001716A 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
0001716E 00                         SME_X5P7B_10:	dc.b 0	
0001716F 04                         SME_X5P7B_11:	dc.b 4	
00017170 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017175 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001717A 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001717F 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017184 04                         SME_X5P7B_26:	dc.b 4	
00017185 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
0001718A E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001718F 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017194 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017199 04                         SME_X5P7B_3B:	dc.b 4	
0001719A E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001719F E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000171A4 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000171A9 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000171AE 04                         SME_X5P7B_50:	dc.b 4	
000171AF E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000171B4 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000171B9 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000171BE 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000171C3 04                         SME_X5P7B_65:	dc.b 4	
000171C4 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000171C9 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000171CE 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000171D3 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000171D8 04                         SME_X5P7B_7A:	dc.b 4	
000171D9 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
000171DE E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
000171E3 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
000171E8 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
000171ED 04                         SME_X5P7B_8F:	dc.b 4	
000171EE E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
000171F3 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
000171F8 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
000171FD 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017202                            		even
00017202                            		even
00017202                            
00017202                            Map_Shield3:	include	"_maps\Shield 3.asm"
00017202                            ; --------------------------------------------------------------------------------
00017202                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017202                            ; --------------------------------------------------------------------------------
00017202                            
00017202                            SME__wWzO:	
00017202 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
00017206 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
0001720A 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
0001720E 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
00017212 00                         SME__wWzO_10:	dc.b 0	
00017213 04                         SME__wWzO_11:	dc.b 4	
00017214 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017219 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001721E 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017223 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017228 04                         SME__wWzO_26:	dc.b 4	
00017229 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
0001722E E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
00017233 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017238 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
0001723D 04                         SME__wWzO_3B:	dc.b 4	
0001723E E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017243 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017248 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001724D 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017252 04                         SME__wWzO_50:	dc.b 4	
00017253 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017258 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001725D 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017262 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017267 04                         SME__wWzO_65:	dc.b 4	
00017268 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001726D E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017272 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017277 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001727C 04                         SME__wWzO_7A:	dc.b 4	
0001727D E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017282 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017287 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
0001728C 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017291 04                         SME__wWzO_8F:	dc.b 4	
00017292 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017297 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
0001729C 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
000172A1 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000172A6                            		even
000172A6                            		even
000172A6                            		include	"_anim\Special Stage Entry (Unused).asm"
000172A6                            ; ---------------------------------------------------------------------------
000172A6                            ; Animation script - special stage entry effect from beta
000172A6                            ; ---------------------------------------------------------------------------
000172A6 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
000172A8 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
000172BC                            		even
000172BC                            		even
000172BC                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
000172BC                            ; ---------------------------------------------------------------------------
000172BC                            ; Sprite mappings - special stage entry	from beta
000172BC                            ; ---------------------------------------------------------------------------
000172BC                            Map_Vanish_internal:
000172BC 0000                       		dc.w @flash1-Map_Vanish_internal
000172BE 0000                       		dc.w @flash2-Map_Vanish_internal
000172C0 0000                       		dc.w @flash3-Map_Vanish_internal
000172C2 0000                       		dc.w @sparkle1-Map_Vanish_internal
000172C4 0000                       		dc.w @sparkle2-Map_Vanish_internal
000172C6 0000                       		dc.w @sparkle3-Map_Vanish_internal
000172C8 0000                       		dc.w @sparkle4-Map_Vanish_internal
000172CA 0000                       		dc.w @blank-Map_Vanish_internal
000172CC 03                         @flash1:	dc.b 3
000172CD F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000172D2 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000172D7 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000172DC 03                         @flash2:	dc.b 3
000172DD F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000172E2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000172E7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000172EC 05                         @flash3:	dc.b 5
000172ED E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000172F2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000172F7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000172FC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017301 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017306 09                         @sparkle1:	dc.b 9
00017307 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001730C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017311 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00017316 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001731B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017320 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00017325 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001732A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001732F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00017334 12                         @sparkle2:	dc.b $12
00017335 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001733A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001733F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017344 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017349 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001734E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00017353 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017358 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001735D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017362 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017367 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001736C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017371 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017376 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001737B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017380 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017385 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001738A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001738F 11                         @sparkle3:	dc.b $11
00017390 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017395 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001739A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001739F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000173A4 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000173A9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000173AE 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000173B3 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000173B8 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000173BD 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000173C2 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000173C7 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000173CC F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000173D1 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000173D6 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000173DB 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000173E0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000173E5 09                         @sparkle4:	dc.b 9
000173E6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000173EB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000173F0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000173F5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000173FA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000173FF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017404 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017409 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001740E 04                         		dc.b 4
0001740F 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00017414                            		even
00017414                            		even
00017414                            		include	"_anim\Water Splash.asm"
00017414                            ; ---------------------------------------------------------------------------
00017414                            ; Animation script - water splash (LZ)
00017414                            ; ---------------------------------------------------------------------------
00017414 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00017416 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
0001741C 00                         		even
0001741C 00                         		even
0001741C                            Map_Splash:	include	"_maps\Water Splash.asm"
0001741C                            ; ---------------------------------------------------------------------------
0001741C                            ; Sprite mappings - water splash (LZ)
0001741C                            ; ---------------------------------------------------------------------------
0001741C                            Map_Splash_internal:
0001741C 0000                       		dc.w @splash1-Map_Splash_internal
0001741E 0000                       		dc.w @splash2-Map_Splash_internal
00017420 0000                       		dc.w @splash3-Map_Splash_internal
00017422 02                         @splash1:	dc.b 2
00017423 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017428 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001742D 02                         @splash2:	dc.b 2
0001742E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00017433 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017438 01                         @splash3:	dc.b 1
00017439 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001743E                            		even
0001743E                            		even
0001743E                            
0001743E                            		include	"_incObj\Sonic AnglePos.asm"
0001743E                            ; ---------------------------------------------------------------------------
0001743E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001743E                            ; ---------------------------------------------------------------------------
0001743E                            
0001743E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001743E                            
0001743E                            
0001743E                            Sonic_AnglePos:
0001743E 0828 0003 0022             		btst	#3,obStatus(a0)
00017444 6700                       		beq.s	loc_14602
00017446 7000                       		moveq	#0,d0
00017448 11C0 F768                  		move.b	d0,($FFFFF768).w
0001744C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017450 4E75                       		rts	
00017452                            ; ===========================================================================
00017452                            
00017452                            loc_14602:
00017452 7003                       		moveq	#3,d0
00017454 11C0 F768                  		move.b	d0,($FFFFF768).w
00017458 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001745C 1028 0026                  		move.b	obAngle(a0),d0
00017460 0600 0020                  		addi.b	#$20,d0
00017464 6A00                       		bpl.s	loc_14624
00017466 1028 0026                  		move.b	obAngle(a0),d0
0001746A 6A00                       		bpl.s	loc_1461E
0001746C 5300                       		subq.b	#1,d0
0001746E                            
0001746E                            loc_1461E:
0001746E 0600 0020                  		addi.b	#$20,d0
00017472 6000                       		bra.s	loc_14630
00017474                            ; ===========================================================================
00017474                            
00017474                            loc_14624:
00017474 1028 0026                  		move.b	obAngle(a0),d0
00017478 6A00                       		bpl.s	loc_1462C
0001747A 5200                       		addq.b	#1,d0
0001747C                            
0001747C                            loc_1462C:
0001747C 0600 001F                  		addi.b	#$1F,d0
00017480                            
00017480                            loc_14630:
00017480 0200 00C0                  		andi.b	#$C0,d0
00017484 0C00 0040                  		cmpi.b	#$40,d0
00017488 6700 0000                  		beq.w	Sonic_WalkVertL
0001748C 0C00 0080                  		cmpi.b	#$80,d0
00017490 6700 0000                  		beq.w	Sonic_WalkCeiling
00017494 0C00 00C0                  		cmpi.b	#$C0,d0
00017498 6700 0000                  		beq.w	Sonic_WalkVertR
0001749C 3428 000C                  		move.w	obY(a0),d2
000174A0 3628 0008                  		move.w	obX(a0),d3
000174A4 7000                       		moveq	#0,d0
000174A6 1028 0016                  		move.b	obHeight(a0),d0
000174AA 4880                       		ext.w	d0
000174AC D440                       		add.w	d0,d2
000174AE 1028 0017                  		move.b	obWidth(a0),d0
000174B2 4880                       		ext.w	d0
000174B4 D640                       		add.w	d0,d3
000174B6 49F8 F768                  		lea	($FFFFF768).w,a4
000174BA 367C 0010                  		movea.w	#$10,a3
000174BE 3C3C 0000                  		move.w	#0,d6
000174C2 7A0D                       		moveq	#$D,d5
000174C4 6100 0000                  		bsr.w	FindFloor
000174C8 3F01                       		move.w	d1,-(sp)
000174CA 3428 000C                  		move.w	obY(a0),d2
000174CE 3628 0008                  		move.w	obX(a0),d3
000174D2 7000                       		moveq	#0,d0
000174D4 1028 0016                  		move.b	obHeight(a0),d0
000174D8 4880                       		ext.w	d0
000174DA D440                       		add.w	d0,d2
000174DC 1028 0017                  		move.b	obWidth(a0),d0
000174E0 4880                       		ext.w	d0
000174E2 4440                       		neg.w	d0
000174E4 D640                       		add.w	d0,d3
000174E6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000174EA 367C 0010                  		movea.w	#$10,a3
000174EE 3C3C 0000                  		move.w	#0,d6
000174F2 7A0D                       		moveq	#$D,d5
000174F4 6100 0000                  		bsr.w	FindFloor
000174F8 301F                       		move.w	(sp)+,d0
000174FA 6100 0000                  		bsr.w	Sonic_Angle
000174FE 4A41                       		tst.w	d1
00017500 6700                       		beq.s	locret_146BE
00017502 6A00                       		bpl.s	loc_146C0
00017504 0C41 FFF2                  		cmpi.w	#-$E,d1
00017508 6D00                       		blt.s	locret_146E6
0001750A D368 000C                  		add.w	d1,obY(a0)
0001750E                            
0001750E                            locret_146BE:
0001750E 4E75                       		rts	
00017510                            ; ===========================================================================
00017510                            
00017510                            loc_146C0:
00017510 0C41 000E                  		cmpi.w	#$E,d1
00017514 6E00                       		bgt.s	loc_146CC
00017516                            
00017516                            loc_146C6:
00017516 D368 000C                  		add.w	d1,obY(a0)
0001751A 4E75                       		rts	
0001751C                            ; ===========================================================================
0001751C                            
0001751C                            loc_146CC:
0001751C 4A28 0038                  		tst.b	$38(a0)
00017520 66F4                       		bne.s	loc_146C6
00017522 08E8 0001 0022             		bset	#1,obStatus(a0)
00017528 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001752E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017534 4E75                       		rts	
00017536                            ; ===========================================================================
00017536                            
00017536                            locret_146E6:
00017536 4E75                       		rts	
00017538                            ; End of function Sonic_AnglePos
00017538                            
00017538                            ; ===========================================================================
00017538 2428 0008                  		move.l	obX(a0),d2
0001753C 3028 0010                  		move.w	obVelX(a0),d0
00017540 48C0                       		ext.l	d0
00017542 E180                       		asl.l	#8,d0
00017544 9480                       		sub.l	d0,d2
00017546 2142 0008                  		move.l	d2,obX(a0)
0001754A 303C 0038                  		move.w	#$38,d0
0001754E 48C0                       		ext.l	d0
00017550 E180                       		asl.l	#8,d0
00017552 9680                       		sub.l	d0,d3
00017554 2143 000C                  		move.l	d3,obY(a0)
00017558 4E75                       		rts	
0001755A                            ; ===========================================================================
0001755A                            
0001755A                            locret_1470A:
0001755A 4E75                       		rts	
0001755C                            ; ===========================================================================
0001755C 2628 000C                  		move.l	obY(a0),d3
00017560 3028 0012                  		move.w	obVelY(a0),d0
00017564 0440 0038                  		subi.w	#$38,d0
00017568 3140 0012                  		move.w	d0,obVelY(a0)
0001756C 48C0                       		ext.l	d0
0001756E E180                       		asl.l	#8,d0
00017570 9680                       		sub.l	d0,d3
00017572 2143 000C                  		move.l	d3,obY(a0)
00017576 4E75                       		rts	
00017578 4E75                       		rts	
0001757A                            ; ===========================================================================
0001757A 2428 0008                  		move.l	obX(a0),d2
0001757E 2628 000C                  		move.l	obY(a0),d3
00017582 3028 0010                  		move.w	obVelX(a0),d0
00017586 48C0                       		ext.l	d0
00017588 E180                       		asl.l	#8,d0
0001758A 9480                       		sub.l	d0,d2
0001758C 3028 0012                  		move.w	obVelY(a0),d0
00017590 48C0                       		ext.l	d0
00017592 E180                       		asl.l	#8,d0
00017594 9680                       		sub.l	d0,d3
00017596 2142 0008                  		move.l	d2,obX(a0)
0001759A 2143 000C                  		move.l	d3,obY(a0)
0001759E 4E75                       		rts	
000175A0                            
000175A0                            ; ---------------------------------------------------------------------------
000175A0                            ; Subroutine to	change Sonic's angle as he walks along the floor
000175A0                            ; ---------------------------------------------------------------------------
000175A0                            
000175A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000175A0                            
000175A0                            
000175A0                            Sonic_Angle:
000175A0 1438 F76A                  		move.b	($FFFFF76A).w,d2
000175A4 B240                       		cmp.w	d0,d1
000175A6 6F00                       		ble.s	loc_1475E
000175A8 1438 F768                  		move.b	($FFFFF768).w,d2
000175AC 3200                       		move.w	d0,d1
000175AE                            
000175AE                            loc_1475E:
000175AE 0802 0000                  		btst	#0,d2
000175B2 6600                       		bne.s	loc_1476A
000175B4 1142 0026                  		move.b	d2,obAngle(a0)
000175B8 4E75                       		rts	
000175BA                            ; ===========================================================================
000175BA                            
000175BA                            loc_1476A:
000175BA 1428 0026                  		move.b	obAngle(a0),d2
000175BE 0602 0020                  		addi.b	#$20,d2
000175C2 0202 00C0                  		andi.b	#$C0,d2
000175C6 1142 0026                  		move.b	d2,obAngle(a0)
000175CA 4E75                       		rts	
000175CC                            ; End of function Sonic_Angle
000175CC                            
000175CC                            ; ---------------------------------------------------------------------------
000175CC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000175CC                            ; ---------------------------------------------------------------------------
000175CC                            
000175CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000175CC                            
000175CC                            
000175CC                            Sonic_WalkVertR:
000175CC 3428 000C                  		move.w	obY(a0),d2
000175D0 3628 0008                  		move.w	obX(a0),d3
000175D4 7000                       		moveq	#0,d0
000175D6 1028 0017                  		move.b	obWidth(a0),d0
000175DA 4880                       		ext.w	d0
000175DC 4440                       		neg.w	d0
000175DE D440                       		add.w	d0,d2
000175E0 1028 0016                  		move.b	obHeight(a0),d0
000175E4 4880                       		ext.w	d0
000175E6 D640                       		add.w	d0,d3
000175E8 49F8 F768                  		lea	($FFFFF768).w,a4
000175EC 367C 0010                  		movea.w	#$10,a3
000175F0 3C3C 0000                  		move.w	#0,d6
000175F4 7A0D                       		moveq	#$D,d5
000175F6 6100 0000                  		bsr.w	FindWall
000175FA 3F01                       		move.w	d1,-(sp)
000175FC 3428 000C                  		move.w	obY(a0),d2
00017600 3628 0008                  		move.w	obX(a0),d3
00017604 7000                       		moveq	#0,d0
00017606 1028 0017                  		move.b	obWidth(a0),d0
0001760A 4880                       		ext.w	d0
0001760C D440                       		add.w	d0,d2
0001760E 1028 0016                  		move.b	obHeight(a0),d0
00017612 4880                       		ext.w	d0
00017614 D640                       		add.w	d0,d3
00017616 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001761A 367C 0010                  		movea.w	#$10,a3
0001761E 3C3C 0000                  		move.w	#0,d6
00017622 7A0D                       		moveq	#$D,d5
00017624 6100 0000                  		bsr.w	FindWall
00017628 301F                       		move.w	(sp)+,d0
0001762A 6100 FF74                  		bsr.w	Sonic_Angle
0001762E 4A41                       		tst.w	d1
00017630 6700                       		beq.s	locret_147F0
00017632 6A00                       		bpl.s	loc_147F2
00017634 0C41 FFF2                  		cmpi.w	#-$E,d1
00017638 6D00 FF20                  		blt.w	locret_1470A
0001763C D368 0008                  		add.w	d1,obX(a0)
00017640                            
00017640                            locret_147F0:
00017640 4E75                       		rts	
00017642                            ; ===========================================================================
00017642                            
00017642                            loc_147F2:
00017642 0C41 000E                  		cmpi.w	#$E,d1
00017646 6E00                       		bgt.s	loc_147FE
00017648                            
00017648                            loc_147F8:
00017648 D368 0008                  		add.w	d1,obX(a0)
0001764C 4E75                       		rts	
0001764E                            ; ===========================================================================
0001764E                            
0001764E                            loc_147FE:
0001764E 4A28 0038                  		tst.b	$38(a0)
00017652 66F4                       		bne.s	loc_147F8
00017654 08E8 0001 0022             		bset	#1,obStatus(a0)
0001765A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017660 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017666 4E75                       		rts	
00017668                            ; End of function Sonic_WalkVertR
00017668                            
00017668                            ; ---------------------------------------------------------------------------
00017668                            ; Subroutine allowing Sonic to walk upside-down
00017668                            ; ---------------------------------------------------------------------------
00017668                            
00017668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017668                            
00017668                            
00017668                            Sonic_WalkCeiling:
00017668 3428 000C                  		move.w	obY(a0),d2
0001766C 3628 0008                  		move.w	obX(a0),d3
00017670 7000                       		moveq	#0,d0
00017672 1028 0016                  		move.b	obHeight(a0),d0
00017676 4880                       		ext.w	d0
00017678 9440                       		sub.w	d0,d2
0001767A 0A42 000F                  		eori.w	#$F,d2
0001767E 1028 0017                  		move.b	obWidth(a0),d0
00017682 4880                       		ext.w	d0
00017684 D640                       		add.w	d0,d3
00017686 49F8 F768                  		lea	($FFFFF768).w,a4
0001768A 367C FFF0                  		movea.w	#-$10,a3
0001768E 3C3C 1000                  		move.w	#$1000,d6
00017692 7A0D                       		moveq	#$D,d5
00017694 6100 0000                  		bsr.w	FindFloor
00017698 3F01                       		move.w	d1,-(sp)
0001769A 3428 000C                  		move.w	obY(a0),d2
0001769E 3628 0008                  		move.w	obX(a0),d3
000176A2 7000                       		moveq	#0,d0
000176A4 1028 0016                  		move.b	obHeight(a0),d0
000176A8 4880                       		ext.w	d0
000176AA 9440                       		sub.w	d0,d2
000176AC 0A42 000F                  		eori.w	#$F,d2
000176B0 1028 0017                  		move.b	obWidth(a0),d0
000176B4 4880                       		ext.w	d0
000176B6 9640                       		sub.w	d0,d3
000176B8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000176BC 367C FFF0                  		movea.w	#-$10,a3
000176C0 3C3C 1000                  		move.w	#$1000,d6
000176C4 7A0D                       		moveq	#$D,d5
000176C6 6100 0000                  		bsr.w	FindFloor
000176CA 301F                       		move.w	(sp)+,d0
000176CC 6100 FED2                  		bsr.w	Sonic_Angle
000176D0 4A41                       		tst.w	d1
000176D2 6700                       		beq.s	locret_14892
000176D4 6A00                       		bpl.s	loc_14894
000176D6 0C41 FFF2                  		cmpi.w	#-$E,d1
000176DA 6D00 FE5A                  		blt.w	locret_146E6
000176DE 9368 000C                  		sub.w	d1,obY(a0)
000176E2                            
000176E2                            locret_14892:
000176E2 4E75                       		rts	
000176E4                            ; ===========================================================================
000176E4                            
000176E4                            loc_14894:
000176E4 0C41 000E                  		cmpi.w	#$E,d1
000176E8 6E00                       		bgt.s	loc_148A0
000176EA                            
000176EA                            loc_1489A:
000176EA 9368 000C                  		sub.w	d1,obY(a0)
000176EE 4E75                       		rts	
000176F0                            ; ===========================================================================
000176F0                            
000176F0                            loc_148A0:
000176F0 4A28 0038                  		tst.b	$38(a0)
000176F4 66F4                       		bne.s	loc_1489A
000176F6 08E8 0001 0022             		bset	#1,obStatus(a0)
000176FC 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017702 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017708 4E75                       		rts	
0001770A                            ; End of function Sonic_WalkCeiling
0001770A                            
0001770A                            ; ---------------------------------------------------------------------------
0001770A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001770A                            ; ---------------------------------------------------------------------------
0001770A                            
0001770A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001770A                            
0001770A                            
0001770A                            Sonic_WalkVertL:
0001770A 3428 000C                  		move.w	obY(a0),d2
0001770E 3628 0008                  		move.w	obX(a0),d3
00017712 7000                       		moveq	#0,d0
00017714 1028 0017                  		move.b	obWidth(a0),d0
00017718 4880                       		ext.w	d0
0001771A 9440                       		sub.w	d0,d2
0001771C 1028 0016                  		move.b	obHeight(a0),d0
00017720 4880                       		ext.w	d0
00017722 9640                       		sub.w	d0,d3
00017724 0A43 000F                  		eori.w	#$F,d3
00017728 49F8 F768                  		lea	($FFFFF768).w,a4
0001772C 367C FFF0                  		movea.w	#-$10,a3
00017730 3C3C 0800                  		move.w	#$800,d6
00017734 7A0D                       		moveq	#$D,d5
00017736 6100 0000                  		bsr.w	FindWall
0001773A 3F01                       		move.w	d1,-(sp)
0001773C 3428 000C                  		move.w	obY(a0),d2
00017740 3628 0008                  		move.w	obX(a0),d3
00017744 7000                       		moveq	#0,d0
00017746 1028 0017                  		move.b	obWidth(a0),d0
0001774A 4880                       		ext.w	d0
0001774C D440                       		add.w	d0,d2
0001774E 1028 0016                  		move.b	obHeight(a0),d0
00017752 4880                       		ext.w	d0
00017754 9640                       		sub.w	d0,d3
00017756 0A43 000F                  		eori.w	#$F,d3
0001775A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001775E 367C FFF0                  		movea.w	#-$10,a3
00017762 3C3C 0800                  		move.w	#$800,d6
00017766 7A0D                       		moveq	#$D,d5
00017768 6100 0000                  		bsr.w	FindWall
0001776C 301F                       		move.w	(sp)+,d0
0001776E 6100 FE30                  		bsr.w	Sonic_Angle
00017772 4A41                       		tst.w	d1
00017774 6700                       		beq.s	locret_14934
00017776 6A00                       		bpl.s	loc_14936
00017778 0C41 FFF2                  		cmpi.w	#-$E,d1
0001777C 6D00 FDDC                  		blt.w	locret_1470A
00017780 9368 0008                  		sub.w	d1,obX(a0)
00017784                            
00017784                            locret_14934:
00017784 4E75                       		rts	
00017786                            ; ===========================================================================
00017786                            
00017786                            loc_14936:
00017786 0C41 000E                  		cmpi.w	#$E,d1
0001778A 6E00                       		bgt.s	loc_14942
0001778C                            
0001778C                            loc_1493C:
0001778C 9368 0008                  		sub.w	d1,obX(a0)
00017790 4E75                       		rts	
00017792                            ; ===========================================================================
00017792                            
00017792                            loc_14942:
00017792 4A28 0038                  		tst.b	$38(a0)
00017796 66F4                       		bne.s	loc_1493C
00017798 08E8 0001 0022             		bset	#1,obStatus(a0)
0001779E 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177A4 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177AA 4E75                       		rts	
000177AC                            ; End of function Sonic_WalkVertL
000177AC                            ; End of function Sonic_WalkVertL
000177AC                            
000177AC                            		include	"_incObj\sub FindNearestTile.asm"
000177AC                            ; ---------------------------------------------------------------------------
000177AC                            ; Subroutine to	find which tile	the object is standing on
000177AC                            
000177AC                            ; input:
000177AC                            ;	d2 = y-position of object's bottom edge
000177AC                            ;	d3 = x-position of object
000177AC                            
000177AC                            ; output:
000177AC                            ;	a1 = address within 256x256 mappings where object is standing
000177AC                            ;	     (refers to a 16x16 tile number)
000177AC                            ; ---------------------------------------------------------------------------
000177AC                            
000177AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177AC                            
000177AC                            
000177AC                            FindNearestTile:
000177AC 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000177AE E248                       		lsr.w	#1,d0
000177B0 0240 0380                  		andi.w	#$380,d0
000177B4 3203                       		move.w	d3,d1		; get x-pos. of object
000177B6 E049                       		lsr.w	#8,d1
000177B8 0241 007F                  		andi.w	#$7F,d1
000177BC D041                       		add.w	d1,d0		; combine
000177BE 72FF                       		moveq	#-1,d1
000177C0 43F8 A400                  		lea	(v_lvllayout).w,a1
000177C4 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000177C8 6700                       		beq.s	@blanktile	; branch if 0
000177CA 6B00                       		bmi.s	@specialtile	; branch if >$7F
000177CC 5301                       		subq.b	#1,d1
000177CE 4881                       		ext.w	d1
000177D0 EE59                       		ror.w	#7,d1
000177D2 3002                       		move.w	d2,d0
000177D4 D040                       		add.w	d0,d0
000177D6 0240 01E0                  		andi.w	#$1E0,d0
000177DA D240                       		add.w	d0,d1
000177DC 3003                       		move.w	d3,d0
000177DE E648                       		lsr.w	#3,d0
000177E0 0240 001E                  		andi.w	#$1E,d0
000177E4 D240                       		add.w	d0,d1
000177E6                            
000177E6                            @blanktile:
000177E6 2241                       		movea.l	d1,a1
000177E8 4E75                       		rts	
000177EA                            ; ===========================================================================
000177EA                            
000177EA                            @specialtile:
000177EA 0241 007F                  		andi.w	#$7F,d1
000177EE 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
000177F4 6700                       		beq.s	@treatasnormal	; if not, branch
000177F6 5241                       		addq.w	#1,d1
000177F8 0C41 0029                  		cmpi.w	#$29,d1
000177FC 6600                       		bne.s	@treatasnormal
000177FE 323C 0051                  		move.w	#$51,d1
00017802                            
00017802                            	@treatasnormal:
00017802 5301                       		subq.b	#1,d1
00017804 EE59                       		ror.w	#7,d1
00017806 3002                       		move.w	d2,d0
00017808 D040                       		add.w	d0,d0
0001780A 0240 01E0                  		andi.w	#$1E0,d0
0001780E D240                       		add.w	d0,d1
00017810 3003                       		move.w	d3,d0
00017812 E648                       		lsr.w	#3,d0
00017814 0240 001E                  		andi.w	#$1E,d0
00017818 D240                       		add.w	d0,d1
0001781A 2241                       		movea.l	d1,a1
0001781C 4E75                       		rts	
0001781E                            ; End of function FindNearestTile
0001781E                            ; End of function FindNearestTile
0001781E                            		include	"_incObj\sub FindFloor.asm"
0001781E                            ; ---------------------------------------------------------------------------
0001781E                            ; Subroutine to	find the floor
0001781E                            
0001781E                            ; input:
0001781E                            ;	d2 = y-position of object's bottom edge
0001781E                            ;	d3 = x-position of object
0001781E                            ;	d5 = bit to test for solidness
0001781E                            
0001781E                            ; output:
0001781E                            ;	d1 = distance to the floor
0001781E                            ;	a1 = address within 256x256 mappings where object is standing
0001781E                            ;	     (refers to a 16x16 tile number)
0001781E                            ;	(a4) = floor angle
0001781E                            ; ---------------------------------------------------------------------------
0001781E                            
0001781E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001781E                            
0001781E                            
0001781E                            FindFloor:
0001781E 618C                       		bsr.s	FindNearestTile
00017820 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017822 3800                       		move.w	d0,d4
00017824 0240 07FF                  		andi.w	#$7FF,d0
00017828 6700                       		beq.s	@isblank	; branch if tile is blank
0001782A 0B04                       		btst	d5,d4		; is the tile solid?
0001782C 6600                       		bne.s	@issolid	; if yes, branch
0001782E                            
0001782E                            @isblank:
0001782E D44B                       		add.w	a3,d2
00017830 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017834 944B                       		sub.w	a3,d2
00017836 0641 0010                  		addi.w	#$10,d1		; return distance to floor
0001783A 4E75                       		rts	
0001783C                            ; ===========================================================================
0001783C                            
0001783C                            @issolid:
0001783C 2478 F796                  		movea.l	(v_collindex).w,a2
00017840 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017844 0240 00FF                  		andi.w	#$FF,d0
00017848 67E4                       		beq.s	@isblank	; branch if 0
0001784A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017850 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017854 E948                       		lsl.w	#4,d0
00017856 3203                       		move.w	d3,d1		; get x-pos. of object
00017858 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
0001785C 6700                       		beq.s	@noflip		; if not, branch
0001785E 4641                       		not.w	d1
00017860 4414                       		neg.b	(a4)
00017862                            
00017862                            	@noflip:
00017862 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017866 6700                       		beq.s	@noflip2	; if not, branch
00017868 0614 0040                  		addi.b	#$40,(a4)
0001786C 4414                       		neg.b	(a4)
0001786E 0414 0040                  		subi.b	#$40,(a4)
00017872                            
00017872                            	@noflip2:
00017872 0241 000F                  		andi.w	#$F,d1
00017876 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017878 45F9 0000 0000             		lea	(CollArray1).l,a2
0001787E 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017882 4880                       		ext.w	d0
00017884 BD44                       		eor.w	d6,d4
00017886 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001788A 6700                       		beq.s	@noflip3	; if not, branch
0001788C 4440                       		neg.w	d0
0001788E                            
0001788E                            	@noflip3:
0001788E 4A40                       		tst.w	d0
00017890 679C                       		beq.s	@isblank	; branch if height is 0
00017892 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017894 0C00 0010                  		cmpi.b	#$10,d0
00017898 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
0001789A 3202                       		move.w	d2,d1		; get y-pos. of object
0001789C 0241 000F                  		andi.w	#$F,d1
000178A0 D041                       		add.w	d1,d0
000178A2 323C 000F                  		move.w	#$F,d1
000178A6 9240                       		sub.w	d0,d1		; return distance to floor
000178A8 4E75                       		rts	
000178AA                            ; ===========================================================================
000178AA                            
000178AA                            @negfloor:
000178AA 3202                       		move.w	d2,d1
000178AC 0241 000F                  		andi.w	#$F,d1
000178B0 D041                       		add.w	d1,d0
000178B2 6A00 FF7A                  		bpl.w	@isblank
000178B6                            
000178B6                            @maxfloor:
000178B6 944B                       		sub.w	a3,d2
000178B8 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000178BC D44B                       		add.w	a3,d2
000178BE 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000178C2 4E75                       		rts	
000178C4                            ; End of function FindFloor
000178C4                            
000178C4                            
000178C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178C4                            
000178C4                            
000178C4                            FindFloor2:
000178C4 6100 FEE6                  		bsr.w	FindNearestTile
000178C8 3011                       		move.w	(a1),d0
000178CA 3800                       		move.w	d0,d4
000178CC 0240 07FF                  		andi.w	#$7FF,d0
000178D0 6700                       		beq.s	@isblank2
000178D2 0B04                       		btst	d5,d4
000178D4 6600                       		bne.s	@issolid
000178D6                            
000178D6                            @isblank2:
000178D6 323C 000F                  		move.w	#$F,d1
000178DA 3002                       		move.w	d2,d0
000178DC 0240 000F                  		andi.w	#$F,d0
000178E0 9240                       		sub.w	d0,d1
000178E2 4E75                       		rts	
000178E4                            ; ===========================================================================
000178E4                            
000178E4                            @issolid:
000178E4 2478 F796                  		movea.l	(v_collindex).w,a2
000178E8 1032 0000                  		move.b	(a2,d0.w),d0
000178EC 0240 00FF                  		andi.w	#$FF,d0
000178F0 67E4                       		beq.s	@isblank2
000178F2 45F9 0000 0000             		lea	(AngleMap).l,a2
000178F8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000178FC E948                       		lsl.w	#4,d0
000178FE 3203                       		move.w	d3,d1
00017900 0804 000B                  		btst	#$B,d4
00017904 6700                       		beq.s	@noflip
00017906 4641                       		not.w	d1
00017908 4414                       		neg.b	(a4)
0001790A                            
0001790A                            	@noflip:
0001790A 0804 000C                  		btst	#$C,d4
0001790E 6700                       		beq.s	@noflip2
00017910 0614 0040                  		addi.b	#$40,(a4)
00017914 4414                       		neg.b	(a4)
00017916 0414 0040                  		subi.b	#$40,(a4)
0001791A                            
0001791A                            	@noflip2:
0001791A 0241 000F                  		andi.w	#$F,d1
0001791E D240                       		add.w	d0,d1
00017920 45F9 0000 0000             		lea	(CollArray1).l,a2
00017926 1032 1000                  		move.b	(a2,d1.w),d0
0001792A 4880                       		ext.w	d0
0001792C BD44                       		eor.w	d6,d4
0001792E 0804 000C                  		btst	#$C,d4
00017932 6700                       		beq.s	@noflip3
00017934 4440                       		neg.w	d0
00017936                            
00017936                            	@noflip3:
00017936 4A40                       		tst.w	d0
00017938 679C                       		beq.s	@isblank2
0001793A 6B00                       		bmi.s	@negfloor
0001793C 3202                       		move.w	d2,d1
0001793E 0241 000F                  		andi.w	#$F,d1
00017942 D041                       		add.w	d1,d0
00017944 323C 000F                  		move.w	#$F,d1
00017948 9240                       		sub.w	d0,d1
0001794A 4E75                       		rts	
0001794C                            ; ===========================================================================
0001794C                            
0001794C                            @negfloor:
0001794C 3202                       		move.w	d2,d1
0001794E 0241 000F                  		andi.w	#$F,d1
00017952 D041                       		add.w	d1,d0
00017954 6A00 FF80                  		bpl.w	@isblank2
00017958 4641                       		not.w	d1
0001795A 4E75                       		rts	
0001795C                            ; End of function FindFloor2
0001795C                            ; End of function FindFloor2
0001795C                            		include	"_incObj\sub FindWall.asm"
0001795C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001795C                            
0001795C                            
0001795C                            FindWall:
0001795C 6100 FE4E                  		bsr.w	FindNearestTile
00017960 3011                       		move.w	(a1),d0
00017962 3800                       		move.w	d0,d4
00017964 0240 07FF                  		andi.w	#$7FF,d0
00017968 6700                       		beq.s	loc_14B1E
0001796A 0B04                       		btst	d5,d4
0001796C 6600                       		bne.s	loc_14B2C
0001796E                            
0001796E                            loc_14B1E:
0001796E D64B                       		add.w	a3,d3
00017970 6100 0000                  		bsr.w	FindWall2
00017974 964B                       		sub.w	a3,d3
00017976 0641 0010                  		addi.w	#$10,d1
0001797A 4E75                       		rts	
0001797C                            ; ===========================================================================
0001797C                            
0001797C                            loc_14B2C:
0001797C 2478 F796                  		movea.l	(v_collindex).w,a2
00017980 1032 0000                  		move.b	(a2,d0.w),d0
00017984 0240 00FF                  		andi.w	#$FF,d0
00017988 67E4                       		beq.s	loc_14B1E
0001798A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017990 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017994 E948                       		lsl.w	#4,d0
00017996 3202                       		move.w	d2,d1
00017998 0804 000C                  		btst	#$C,d4
0001799C 6700                       		beq.s	loc_14B5A
0001799E 4641                       		not.w	d1
000179A0 0614 0040                  		addi.b	#$40,(a4)
000179A4 4414                       		neg.b	(a4)
000179A6 0414 0040                  		subi.b	#$40,(a4)
000179AA                            
000179AA                            loc_14B5A:
000179AA 0804 000B                  		btst	#$B,d4
000179AE 6700                       		beq.s	loc_14B62
000179B0 4414                       		neg.b	(a4)
000179B2                            
000179B2                            loc_14B62:
000179B2 0241 000F                  		andi.w	#$F,d1
000179B6 D240                       		add.w	d0,d1
000179B8 45F9 0000 0000             		lea	(CollArray2).l,a2
000179BE 1032 1000                  		move.b	(a2,d1.w),d0
000179C2 4880                       		ext.w	d0
000179C4 BD44                       		eor.w	d6,d4
000179C6 0804 000B                  		btst	#$B,d4
000179CA 6700                       		beq.s	loc_14B7E
000179CC 4440                       		neg.w	d0
000179CE                            
000179CE                            loc_14B7E:
000179CE 4A40                       		tst.w	d0
000179D0 679C                       		beq.s	loc_14B1E
000179D2 6B00                       		bmi.s	loc_14B9A
000179D4 0C00 0010                  		cmpi.b	#$10,d0
000179D8 6700                       		beq.s	loc_14BA6
000179DA 3203                       		move.w	d3,d1
000179DC 0241 000F                  		andi.w	#$F,d1
000179E0 D041                       		add.w	d1,d0
000179E2 323C 000F                  		move.w	#$F,d1
000179E6 9240                       		sub.w	d0,d1
000179E8 4E75                       		rts	
000179EA                            ; ===========================================================================
000179EA                            
000179EA                            loc_14B9A:
000179EA 3203                       		move.w	d3,d1
000179EC 0241 000F                  		andi.w	#$F,d1
000179F0 D041                       		add.w	d1,d0
000179F2 6A00 FF7A                  		bpl.w	loc_14B1E
000179F6                            
000179F6                            loc_14BA6:
000179F6 964B                       		sub.w	a3,d3
000179F8 6100 0000                  		bsr.w	FindWall2
000179FC D64B                       		add.w	a3,d3
000179FE 0441 0010                  		subi.w	#$10,d1
00017A02 4E75                       		rts	
00017A04                            ; End of function FindWall
00017A04                            
00017A04                            
00017A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A04                            
00017A04                            
00017A04                            FindWall2:
00017A04 6100 FDA6                  		bsr.w	FindNearestTile
00017A08 3011                       		move.w	(a1),d0
00017A0A 3800                       		move.w	d0,d4
00017A0C 0240 07FF                  		andi.w	#$7FF,d0
00017A10 6700                       		beq.s	loc_14BC6
00017A12 0B04                       		btst	d5,d4
00017A14 6600                       		bne.s	loc_14BD4
00017A16                            
00017A16                            loc_14BC6:
00017A16 323C 000F                  		move.w	#$F,d1
00017A1A 3003                       		move.w	d3,d0
00017A1C 0240 000F                  		andi.w	#$F,d0
00017A20 9240                       		sub.w	d0,d1
00017A22 4E75                       		rts	
00017A24                            ; ===========================================================================
00017A24                            
00017A24                            loc_14BD4:
00017A24 2478 F796                  		movea.l	(v_collindex).w,a2
00017A28 1032 0000                  		move.b	(a2,d0.w),d0
00017A2C 0240 00FF                  		andi.w	#$FF,d0
00017A30 67E4                       		beq.s	loc_14BC6
00017A32 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A38 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A3C E948                       		lsl.w	#4,d0
00017A3E 3202                       		move.w	d2,d1
00017A40 0804 000C                  		btst	#$C,d4
00017A44 6700                       		beq.s	loc_14C02
00017A46 4641                       		not.w	d1
00017A48 0614 0040                  		addi.b	#$40,(a4)
00017A4C 4414                       		neg.b	(a4)
00017A4E 0414 0040                  		subi.b	#$40,(a4)
00017A52                            
00017A52                            loc_14C02:
00017A52 0804 000B                  		btst	#$B,d4
00017A56 6700                       		beq.s	loc_14C0A
00017A58 4414                       		neg.b	(a4)
00017A5A                            
00017A5A                            loc_14C0A:
00017A5A 0241 000F                  		andi.w	#$F,d1
00017A5E D240                       		add.w	d0,d1
00017A60 45F9 0000 0000             		lea	(CollArray2).l,a2
00017A66 1032 1000                  		move.b	(a2,d1.w),d0
00017A6A 4880                       		ext.w	d0
00017A6C BD44                       		eor.w	d6,d4
00017A6E 0804 000B                  		btst	#$B,d4
00017A72 6700                       		beq.s	loc_14C26
00017A74 4440                       		neg.w	d0
00017A76                            
00017A76                            loc_14C26:
00017A76 4A40                       		tst.w	d0
00017A78 679C                       		beq.s	loc_14BC6
00017A7A 6B00                       		bmi.s	loc_14C3C
00017A7C 3203                       		move.w	d3,d1
00017A7E 0241 000F                  		andi.w	#$F,d1
00017A82 D041                       		add.w	d1,d0
00017A84 323C 000F                  		move.w	#$F,d1
00017A88 9240                       		sub.w	d0,d1
00017A8A 4E75                       		rts	
00017A8C                            ; ===========================================================================
00017A8C                            
00017A8C                            loc_14C3C:
00017A8C 3203                       		move.w	d3,d1
00017A8E 0241 000F                  		andi.w	#$F,d1
00017A92 D041                       		add.w	d1,d0
00017A94 6A00 FF80                  		bpl.w	loc_14BC6
00017A98 4641                       		not.w	d1
00017A9A 4E75                       		rts	
00017A9C                            ; End of function FindWall2
00017A9C                            ; End of function FindWall2
00017A9C                            
00017A9C                            ; ---------------------------------------------------------------------------
00017A9C                            ; Unused floor/wall subroutine - logs something	to do with collision
00017A9C                            ; ---------------------------------------------------------------------------
00017A9C                            
00017A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A9C                            
00017A9C                            
00017A9C                            FloorLog_Unk:
00017A9C 4E75                       		rts	
00017A9E                            
00017A9E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017AA4 45F9 0000 0000             		lea	(CollArray1).l,a2
00017AAA 363C 00FF                  		move.w	#$FF,d3
00017AAE                            
00017AAE                            loc_14C5E:
00017AAE 7A10                       		moveq	#$10,d5
00017AB0 343C 000F                  		move.w	#$F,d2
00017AB4                            
00017AB4                            loc_14C64:
00017AB4 7800                       		moveq	#0,d4
00017AB6 323C 000F                  		move.w	#$F,d1
00017ABA                            
00017ABA                            loc_14C6A:
00017ABA 3019                       		move.w	(a1)+,d0
00017ABC EAA8                       		lsr.l	d5,d0
00017ABE D944                       		addx.w	d4,d4
00017AC0 51C9 FFF8                  		dbf	d1,loc_14C6A
00017AC4                            
00017AC4 34C4                       		move.w	d4,(a2)+
00017AC6 92FC 0020                  		suba.w	#$20,a1
00017ACA 5345                       		subq.w	#1,d5
00017ACC 51CA FFE6                  		dbf	d2,loc_14C64
00017AD0                            
00017AD0 D2FC 0020                  		adda.w	#$20,a1
00017AD4 51CB FFD8                  		dbf	d3,loc_14C5E
00017AD8                            
00017AD8 43F9 0000 0000             		lea	(CollArray1).l,a1
00017ADE 45F9 0000 0000             		lea	(CollArray2).l,a2
00017AE4 6100                       		bsr.s	FloorLog_Unk2
00017AE6 43F9 0000 0000             		lea	(CollArray1).l,a1
00017AEC 45F9 0000 0000             		lea	(CollArray1).l,a2
00017AF2                            
00017AF2                            ; End of function FloorLog_Unk
00017AF2                            
00017AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AF2                            
00017AF2                            
00017AF2                            FloorLog_Unk2:
00017AF2 363C 0FFF                  		move.w	#$FFF,d3
00017AF6                            
00017AF6                            loc_14CA6:
00017AF6 7400                       		moveq	#0,d2
00017AF8 323C 000F                  		move.w	#$F,d1
00017AFC 3019                       		move.w	(a1)+,d0
00017AFE 6700                       		beq.s	loc_14CD4
00017B00 6B00                       		bmi.s	loc_14CBE
00017B02                            
00017B02                            loc_14CB2:
00017B02 E248                       		lsr.w	#1,d0
00017B04 6400                       		bhs.s	loc_14CB8
00017B06 5202                       		addq.b	#1,d2
00017B08                            
00017B08                            loc_14CB8:
00017B08 51C9 FFF8                  		dbf	d1,loc_14CB2
00017B0C                            
00017B0C 6000                       		bra.s	loc_14CD6
00017B0E                            ; ===========================================================================
00017B0E                            
00017B0E                            loc_14CBE:
00017B0E 0C40 FFFF                  		cmpi.w	#-1,d0
00017B12 6700                       		beq.s	loc_14CD0
00017B14                            
00017B14                            loc_14CC4:
00017B14 E348                       		lsl.w	#1,d0
00017B16 6400                       		bhs.s	loc_14CCA
00017B18 5302                       		subq.b	#1,d2
00017B1A                            
00017B1A                            loc_14CCA:
00017B1A 51C9 FFF8                  		dbf	d1,loc_14CC4
00017B1E                            
00017B1E 6000                       		bra.s	loc_14CD6
00017B20                            ; ===========================================================================
00017B20                            
00017B20                            loc_14CD0:
00017B20 303C 0010                  		move.w	#$10,d0
00017B24                            
00017B24                            loc_14CD4:
00017B24 3400                       		move.w	d0,d2
00017B26                            
00017B26                            loc_14CD6:
00017B26 14C2                       		move.b	d2,(a2)+
00017B28 51CB FFCC                  		dbf	d3,loc_14CA6
00017B2C                            
00017B2C 4E75                       		rts	
00017B2E                            
00017B2E                            ; End of function FloorLog_Unk2
00017B2E                            
00017B2E                            
00017B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B2E                            
00017B2E                            
00017B2E                            Sonic_WalkSpeed:
00017B2E 2628 0008                  		move.l	obX(a0),d3
00017B32 2428 000C                  		move.l	obY(a0),d2
00017B36 3228 0010                  		move.w	obVelX(a0),d1
00017B3A 48C1                       		ext.l	d1
00017B3C E181                       		asl.l	#8,d1
00017B3E D681                       		add.l	d1,d3
00017B40 3228 0012                  		move.w	obVelY(a0),d1
00017B44 48C1                       		ext.l	d1
00017B46 E181                       		asl.l	#8,d1
00017B48 D481                       		add.l	d1,d2
00017B4A 4842                       		swap	d2
00017B4C 4843                       		swap	d3
00017B4E 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017B52 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017B56 1200                       		move.b	d0,d1
00017B58 0600 0020                  		addi.b	#$20,d0
00017B5C 6A00                       		bpl.s	loc_14D1A
00017B5E 1001                       		move.b	d1,d0
00017B60 6A00                       		bpl.s	loc_14D14
00017B62 5300                       		subq.b	#1,d0
00017B64                            
00017B64                            loc_14D14:
00017B64 0600 0020                  		addi.b	#$20,d0
00017B68 6000                       		bra.s	loc_14D24
00017B6A                            ; ===========================================================================
00017B6A                            
00017B6A                            loc_14D1A:
00017B6A 1001                       		move.b	d1,d0
00017B6C 6A00                       		bpl.s	loc_14D20
00017B6E 5200                       		addq.b	#1,d0
00017B70                            
00017B70                            loc_14D20:
00017B70 0600 001F                  		addi.b	#$1F,d0
00017B74                            
00017B74                            loc_14D24:
00017B74 0200 00C0                  		andi.b	#$C0,d0
00017B78 6700 0000                  		beq.w	loc_14DF0
00017B7C 0C00 0080                  		cmpi.b	#$80,d0
00017B80 6700 0000                  		beq.w	loc_14F7C
00017B84 0201 0038                  		andi.b	#$38,d1
00017B88 6600                       		bne.s	loc_14D3C
00017B8A 5042                       		addq.w	#8,d2
00017B8C                            
00017B8C                            loc_14D3C:
00017B8C 0C00 0040                  		cmpi.b	#$40,d0
00017B90 6700 0000                  		beq.w	loc_1504A
00017B94 6000 0000                  		bra.w	loc_14EBC
00017B98                            
00017B98                            ; End of function Sonic_WalkSpeed
00017B98                            
00017B98                            
00017B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B98                            
00017B98                            
00017B98                            sub_14D48:
00017B98 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017B9C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017BA0 0600 0020                  		addi.b	#$20,d0
00017BA4 0200 00C0                  		andi.b	#$C0,d0
00017BA8 0C00 0040                  		cmpi.b	#$40,d0
00017BAC 6700 0000                  		beq.w	loc_14FD6
00017BB0 0C00 0080                  		cmpi.b	#$80,d0
00017BB4 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017BB8 0C00 00C0                  		cmpi.b	#$C0,d0
00017BBC 6700 0000                  		beq.w	sub_14E50
00017BC0                            
00017BC0                            ; End of function sub_14D48
00017BC0                            
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            ; Subroutine to	make Sonic land	on the floor after jumping
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            
00017BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BC0                            
00017BC0                            
00017BC0                            Sonic_HitFloor:
00017BC0 3428 000C                  		move.w	obY(a0),d2
00017BC4 3628 0008                  		move.w	obX(a0),d3
00017BC8 7000                       		moveq	#0,d0
00017BCA 1028 0016                  		move.b	obHeight(a0),d0
00017BCE 4880                       		ext.w	d0
00017BD0 D440                       		add.w	d0,d2
00017BD2 1028 0017                  		move.b	obWidth(a0),d0
00017BD6 4880                       		ext.w	d0
00017BD8 D640                       		add.w	d0,d3
00017BDA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017BDE 367C 0010                  		movea.w	#$10,a3
00017BE2 3C3C 0000                  		move.w	#0,d6
00017BE6 7A0D                       		moveq	#$D,d5
00017BE8 6100 FC34                  		bsr.w	FindFloor
00017BEC 3F01                       		move.w	d1,-(sp)
00017BEE 3428 000C                  		move.w	obY(a0),d2
00017BF2 3628 0008                  		move.w	obX(a0),d3
00017BF6 7000                       		moveq	#0,d0
00017BF8 1028 0016                  		move.b	obHeight(a0),d0
00017BFC 4880                       		ext.w	d0
00017BFE D440                       		add.w	d0,d2
00017C00 1028 0017                  		move.b	obWidth(a0),d0
00017C04 4880                       		ext.w	d0
00017C06 9640                       		sub.w	d0,d3
00017C08 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017C0C 367C 0010                  		movea.w	#$10,a3
00017C10 3C3C 0000                  		move.w	#0,d6
00017C14 7A0D                       		moveq	#$D,d5
00017C16 6100 FC06                  		bsr.w	FindFloor
00017C1A 301F                       		move.w	(sp)+,d0
00017C1C 143C 0000                  		move.b	#0,d2
00017C20                            
00017C20                            loc_14DD0:
00017C20 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017C24 B240                       		cmp.w	d0,d1
00017C26 6F00                       		ble.s	loc_14DDE
00017C28 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C2C C141                       		exg	d0,d1
00017C2E                            
00017C2E                            loc_14DDE:
00017C2E 0803 0000                  		btst	#0,d3
00017C32 6700                       		beq.s	locret_14DE6
00017C34 1602                       		move.b	d2,d3
00017C36                            
00017C36                            locret_14DE6:
00017C36 4E75                       		rts	
00017C38                            
00017C38                            ; End of function Sonic_HitFloor
00017C38                            
00017C38                            ; ===========================================================================
00017C38 3428 000C                  		move.w	obY(a0),d2
00017C3C 3628 0008                  		move.w	obX(a0),d3
00017C40                            
00017C40                            loc_14DF0:
00017C40 0642 000A                  		addi.w	#$A,d2
00017C44 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C48 367C 0010                  		movea.w	#$10,a3
00017C4C 3C3C 0000                  		move.w	#0,d6
00017C50 7A0E                       		moveq	#$E,d5
00017C52 6100 FBCA                  		bsr.w	FindFloor
00017C56 143C 0000                  		move.b	#0,d2
00017C5A                            
00017C5A                            loc_14E0A:
00017C5A 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C5E 0803 0000                  		btst	#0,d3
00017C62 6700                       		beq.s	locret_14E16
00017C64 1602                       		move.b	d2,d3
00017C66                            
00017C66                            locret_14E16:
00017C66 4E75                       		rts	
00017C68                            
00017C68                            		include	"_incObj\sub ObjFloorDist.asm"
00017C68                            ; ---------------------------------------------------------------------------
00017C68                            ; Subroutine to find the distance of an object to the floor
00017C68                            
00017C68                            ; input:
00017C68                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017C68                            
00017C68                            ; output:
00017C68                            ;	d1 = distance to the floor
00017C68                            ;	d3 = floor angle
00017C68                            ;	a1 = address within 256x256 mappings where object is standing
00017C68                            ;	     (refers to a 16x16 tile number)
00017C68                            ;	(a4) = floor angle
00017C68                            ; ---------------------------------------------------------------------------
00017C68                            
00017C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C68                            
00017C68                            
00017C68                            ObjFloorDist:
00017C68 3628 0008                  		move.w	obX(a0),d3
00017C6C                            
00017C6C                            
00017C6C                            ObjFloorDist2:
00017C6C 3428 000C                  		move.w	obY(a0),d2
00017C70 7000                       		moveq	#0,d0
00017C72 1028 0016                  		move.b	obHeight(a0),d0
00017C76 4880                       		ext.w	d0
00017C78 D440                       		add.w	d0,d2
00017C7A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C7E 18BC 0000                  		move.b	#0,(a4)
00017C82 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017C86 3C3C 0000                  		move.w	#0,d6
00017C8A 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017C8C 6100 FB90                  		bsr.w	FindFloor
00017C90 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C94 0803 0000                  		btst	#0,d3
00017C98 6700                       		beq.s	locret_14E4E
00017C9A 163C 0000                  		move.b	#0,d3
00017C9E                            
00017C9E                            	locret_14E4E:
00017C9E 4E75                       		rts	
00017CA0                            
00017CA0                            ; End of function ObjFloorDist2
00017CA0                            ; End of function ObjFloorDist2
00017CA0                            
00017CA0                            
00017CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CA0                            
00017CA0                            
00017CA0                            sub_14E50:
00017CA0 3428 000C                  		move.w	obY(a0),d2
00017CA4 3628 0008                  		move.w	obX(a0),d3
00017CA8 7000                       		moveq	#0,d0
00017CAA 1028 0017                  		move.b	obWidth(a0),d0
00017CAE 4880                       		ext.w	d0
00017CB0 9440                       		sub.w	d0,d2
00017CB2 1028 0016                  		move.b	obHeight(a0),d0
00017CB6 4880                       		ext.w	d0
00017CB8 D640                       		add.w	d0,d3
00017CBA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017CBE 367C 0010                  		movea.w	#$10,a3
00017CC2 3C3C 0000                  		move.w	#0,d6
00017CC6 7A0E                       		moveq	#$E,d5
00017CC8 6100 FC92                  		bsr.w	FindWall
00017CCC 3F01                       		move.w	d1,-(sp)
00017CCE 3428 000C                  		move.w	obY(a0),d2
00017CD2 3628 0008                  		move.w	obX(a0),d3
00017CD6 7000                       		moveq	#0,d0
00017CD8 1028 0017                  		move.b	obWidth(a0),d0
00017CDC 4880                       		ext.w	d0
00017CDE D440                       		add.w	d0,d2
00017CE0 1028 0016                  		move.b	obHeight(a0),d0
00017CE4 4880                       		ext.w	d0
00017CE6 D640                       		add.w	d0,d3
00017CE8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017CEC 367C 0010                  		movea.w	#$10,a3
00017CF0 3C3C 0000                  		move.w	#0,d6
00017CF4 7A0E                       		moveq	#$E,d5
00017CF6 6100 FC64                  		bsr.w	FindWall
00017CFA 301F                       		move.w	(sp)+,d0
00017CFC 143C 00C0                  		move.b	#-$40,d2
00017D00 6000 FF1E                  		bra.w	loc_14DD0
00017D04                            
00017D04                            ; End of function sub_14E50
00017D04                            
00017D04                            
00017D04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D04                            
00017D04                            
00017D04                            sub_14EB4:
00017D04 3428 000C                  		move.w	obY(a0),d2
00017D08 3628 0008                  		move.w	obX(a0),d3
00017D0C                            
00017D0C                            loc_14EBC:
00017D0C 0643 000A                  		addi.w	#$A,d3
00017D10 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D14 367C 0010                  		movea.w	#$10,a3
00017D18 3C3C 0000                  		move.w	#0,d6
00017D1C 7A0E                       		moveq	#$E,d5
00017D1E 6100 FC3C                  		bsr.w	FindWall
00017D22 143C 00C0                  		move.b	#-$40,d2
00017D26 6000 FF32                  		bra.w	loc_14E0A
00017D2A                            
00017D2A                            ; End of function sub_14EB4
00017D2A                            
00017D2A                            ; ---------------------------------------------------------------------------
00017D2A                            ; Subroutine to	detect when an object hits a wall to its right
00017D2A                            ; ---------------------------------------------------------------------------
00017D2A                            
00017D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D2A                            
00017D2A                            
00017D2A                            ObjHitWallRight:
00017D2A D668 0008                  		add.w	obX(a0),d3
00017D2E 3428 000C                  		move.w	obY(a0),d2
00017D32 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D36 18BC 0000                  		move.b	#0,(a4)
00017D3A 367C 0010                  		movea.w	#$10,a3
00017D3E 3C3C 0000                  		move.w	#0,d6
00017D42 7A0E                       		moveq	#$E,d5
00017D44 6100 FC16                  		bsr.w	FindWall
00017D48 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D4C 0803 0000                  		btst	#0,d3
00017D50 6700                       		beq.s	locret_14F06
00017D52 163C 00C0                  		move.b	#-$40,d3
00017D56                            
00017D56                            locret_14F06:
00017D56 4E75                       		rts	
00017D58                            
00017D58                            ; End of function ObjHitWallRight
00017D58                            
00017D58                            ; ---------------------------------------------------------------------------
00017D58                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017D58                            ; touches them
00017D58                            ; ---------------------------------------------------------------------------
00017D58                            
00017D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D58                            
00017D58                            
00017D58                            Sonic_DontRunOnWalls:
00017D58 3428 000C                  		move.w	obY(a0),d2
00017D5C 3628 0008                  		move.w	obX(a0),d3
00017D60 7000                       		moveq	#0,d0
00017D62 1028 0016                  		move.b	obHeight(a0),d0
00017D66 4880                       		ext.w	d0
00017D68 9440                       		sub.w	d0,d2
00017D6A 0A42 000F                  		eori.w	#$F,d2
00017D6E 1028 0017                  		move.b	obWidth(a0),d0
00017D72 4880                       		ext.w	d0
00017D74 D640                       		add.w	d0,d3
00017D76 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D7A 367C FFF0                  		movea.w	#-$10,a3
00017D7E 3C3C 1000                  		move.w	#$1000,d6
00017D82 7A0E                       		moveq	#$E,d5
00017D84 6100 FA98                  		bsr.w	FindFloor
00017D88 3F01                       		move.w	d1,-(sp)
00017D8A 3428 000C                  		move.w	obY(a0),d2
00017D8E 3628 0008                  		move.w	obX(a0),d3
00017D92 7000                       		moveq	#0,d0
00017D94 1028 0016                  		move.b	obHeight(a0),d0
00017D98 4880                       		ext.w	d0
00017D9A 9440                       		sub.w	d0,d2
00017D9C 0A42 000F                  		eori.w	#$F,d2
00017DA0 1028 0017                  		move.b	obWidth(a0),d0
00017DA4 4880                       		ext.w	d0
00017DA6 9640                       		sub.w	d0,d3
00017DA8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017DAC 367C FFF0                  		movea.w	#-$10,a3
00017DB0 3C3C 1000                  		move.w	#$1000,d6
00017DB4 7A0E                       		moveq	#$E,d5
00017DB6 6100 FA66                  		bsr.w	FindFloor
00017DBA 301F                       		move.w	(sp)+,d0
00017DBC 143C 0080                  		move.b	#-$80,d2
00017DC0 6000 FE5E                  		bra.w	loc_14DD0
00017DC4                            ; End of function Sonic_DontRunOnWalls
00017DC4                            
00017DC4                            ; ===========================================================================
00017DC4 3428 000C                  		move.w	obY(a0),d2
00017DC8 3628 0008                  		move.w	obX(a0),d3
00017DCC                            
00017DCC                            loc_14F7C:
00017DCC 0442 000A                  		subi.w	#$A,d2
00017DD0 0A42 000F                  		eori.w	#$F,d2
00017DD4 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DD8 367C FFF0                  		movea.w	#-$10,a3
00017DDC 3C3C 1000                  		move.w	#$1000,d6
00017DE0 7A0E                       		moveq	#$E,d5
00017DE2 6100 FA3A                  		bsr.w	FindFloor
00017DE6 143C 0080                  		move.b	#-$80,d2
00017DEA 6000 FE6E                  		bra.w	loc_14E0A
00017DEE                            
00017DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DEE                            
00017DEE                            
00017DEE                            ObjHitCeiling:
00017DEE 3428 000C                  		move.w	obY(a0),d2
00017DF2 3628 0008                  		move.w	obX(a0),d3
00017DF6 7000                       		moveq	#0,d0
00017DF8 1028 0016                  		move.b	obHeight(a0),d0
00017DFC 4880                       		ext.w	d0
00017DFE 9440                       		sub.w	d0,d2
00017E00 0A42 000F                  		eori.w	#$F,d2
00017E04 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E08 367C FFF0                  		movea.w	#-$10,a3
00017E0C 3C3C 1000                  		move.w	#$1000,d6
00017E10 7A0E                       		moveq	#$E,d5
00017E12 6100 FA0A                  		bsr.w	FindFloor
00017E16 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017E1A 0803 0000                  		btst	#0,d3
00017E1E 6700                       		beq.s	locret_14FD4
00017E20 163C 0080                  		move.b	#-$80,d3
00017E24                            
00017E24                            locret_14FD4:
00017E24 4E75                       		rts	
00017E26                            ; End of function ObjHitCeiling
00017E26                            
00017E26                            ; ===========================================================================
00017E26                            
00017E26                            loc_14FD6:
00017E26 3428 000C                  		move.w	obY(a0),d2
00017E2A 3628 0008                  		move.w	obX(a0),d3
00017E2E 7000                       		moveq	#0,d0
00017E30 1028 0017                  		move.b	obWidth(a0),d0
00017E34 4880                       		ext.w	d0
00017E36 9440                       		sub.w	d0,d2
00017E38 1028 0016                  		move.b	obHeight(a0),d0
00017E3C 4880                       		ext.w	d0
00017E3E 9640                       		sub.w	d0,d3
00017E40 0A43 000F                  		eori.w	#$F,d3
00017E44 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E48 367C FFF0                  		movea.w	#-$10,a3
00017E4C 3C3C 0800                  		move.w	#$800,d6
00017E50 7A0E                       		moveq	#$E,d5
00017E52 6100 FB08                  		bsr.w	FindWall
00017E56 3F01                       		move.w	d1,-(sp)
00017E58 3428 000C                  		move.w	obY(a0),d2
00017E5C 3628 0008                  		move.w	obX(a0),d3
00017E60 7000                       		moveq	#0,d0
00017E62 1028 0017                  		move.b	obWidth(a0),d0
00017E66 4880                       		ext.w	d0
00017E68 D440                       		add.w	d0,d2
00017E6A 1028 0016                  		move.b	obHeight(a0),d0
00017E6E 4880                       		ext.w	d0
00017E70 9640                       		sub.w	d0,d3
00017E72 0A43 000F                  		eori.w	#$F,d3
00017E76 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E7A 367C FFF0                  		movea.w	#-$10,a3
00017E7E 3C3C 0800                  		move.w	#$800,d6
00017E82 7A0E                       		moveq	#$E,d5
00017E84 6100 FAD6                  		bsr.w	FindWall
00017E88 301F                       		move.w	(sp)+,d0
00017E8A 143C 0040                  		move.b	#$40,d2
00017E8E 6000 FD90                  		bra.w	loc_14DD0
00017E92                            
00017E92                            ; ---------------------------------------------------------------------------
00017E92                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017E92                            ; ---------------------------------------------------------------------------
00017E92                            
00017E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E92                            
00017E92                            
00017E92                            Sonic_HitWall:
00017E92 3428 000C                  		move.w	obY(a0),d2
00017E96 3628 0008                  		move.w	obX(a0),d3
00017E9A                            
00017E9A                            loc_1504A:
00017E9A 0443 000A                  		subi.w	#$A,d3
00017E9E 0A43 000F                  		eori.w	#$F,d3
00017EA2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EA6 367C FFF0                  		movea.w	#-$10,a3
00017EAA 3C3C 0800                  		move.w	#$800,d6
00017EAE 7A0E                       		moveq	#$E,d5
00017EB0 6100 FAAA                  		bsr.w	FindWall
00017EB4 143C 0040                  		move.b	#$40,d2
00017EB8 6000 FDA0                  		bra.w	loc_14E0A
00017EBC                            ; End of function Sonic_HitWall
00017EBC                            
00017EBC                            ; ---------------------------------------------------------------------------
00017EBC                            ; Subroutine to	detect when an object hits a wall to its left
00017EBC                            ; ---------------------------------------------------------------------------
00017EBC                            
00017EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EBC                            
00017EBC                            
00017EBC                            ObjHitWallLeft:
00017EBC D668 0008                  		add.w	obX(a0),d3
00017EC0 3428 000C                  		move.w	obY(a0),d2
00017EC4                            		; Engine bug: colliding with left walls is erratic with this function.
00017EC4                            		; The cause is this: a missing instruction to flip collision on the found
00017EC4                            		; 16x16 block; this one:
00017EC4                            		;eori.w	#$F,d3
00017EC4 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EC8 18BC 0000                  		move.b	#0,(a4)
00017ECC 367C FFF0                  		movea.w	#-$10,a3
00017ED0 3C3C 0800                  		move.w	#$800,d6
00017ED4 7A0E                       		moveq	#$E,d5
00017ED6 6100 FA84                  		bsr.w	FindWall
00017EDA 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EDE 0803 0000                  		btst	#0,d3
00017EE2 6700                       		beq.s	locret_15098
00017EE4 163C 0040                  		move.b	#$40,d3
00017EE8                            
00017EE8                            locret_15098:
00017EE8 4E75                       		rts	
00017EEA                            ; End of function ObjHitWallLeft
00017EEA                            
00017EEA                            ; ===========================================================================
00017EEA                            
00017EEA                            		include	"_incObj\66 Rotating Junction.asm"
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA                            
00017EEA                            Junction:
00017EEA 7000                       		moveq	#0,d0
00017EEC 1028 0024                  		move.b	obRoutine(a0),d0
00017EF0 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00017EF4 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00017EF8                            ; ===========================================================================
00017EF8 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00017EFA 0000                       		dc.w Jun_Action-Jun_Index
00017EFC 0000                       		dc.w Jun_Display-Jun_Index
00017EFE 0000                       		dc.w Jun_Release-Jun_Index
00017F00                            
00017F00 =00000034                  jun_frame:	equ $34		; current frame
00017F00 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00017F00 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00017F00                            ; ===========================================================================
00017F00                            
00017F00                            Jun_Main:	; Routine 0
00017F00 5428 0024                  		addq.b	#2,obRoutine(a0)
00017F04 323C 0001                  		move.w	#1,d1
00017F08 2248                       		movea.l	a0,a1
00017F0A 6000                       		bra.s	@makeitem
00017F0C                            ; ===========================================================================
00017F0C                            
00017F0C                            	@repeat:
00017F0C 4EB9 0000 FB8A             		jsr	FindFreeObj
00017F12 6600                       		bne.s	@fail
00017F14 12BC 0066                  		move.b	#id_Junction,0(a1)
00017F18 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00017F1C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017F22 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017F28 337C 0180 0018             		move.w	#$180,obPriority(a1)
00017F2E 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00017F34                            
00017F34                            @makeitem:
00017F34 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00017F3C 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00017F42 0029 0004 0001             		ori.b	#4,obRender(a1)
00017F48 137C 0038 0014             		move.b	#$38,obActWid(a1)
00017F4E                            
00017F4E                            	@fail:
00017F4E 51C9 FFBC                  		dbf	d1,@repeat
00017F52                            
00017F52 117C 0030 0014             		move.b	#$30,obActWid(a0)
00017F58 317C 0200 0018             		move.w	#$200,obPriority(a0)
00017F5E 317C 003C 0030             		move.w	#$3C,$30(a0)
00017F64 117C 0001 0034             		move.b	#1,jun_frame(a0)
00017F6A 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00017F70                            
00017F70                            Jun_Action:	; Routine 2
00017F70 6100 0000                  		bsr.w	Jun_ChkSwitch
00017F74 4A28 0001                  		tst.b	obRender(a0)
00017F78 6A00 0000                  		bpl.w	Jun_Display
00017F7C 323C 0030                  		move.w	#$30,d1
00017F80 3401                       		move.w	d1,d2
00017F82 3602                       		move.w	d2,d3
00017F84 5243                       		addq.w	#1,d3
00017F86 3828 0008                  		move.w	obX(a0),d4
00017F8A 6100 9B80                  		bsr.w	SolidObject
00017F8E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00017F94 6700 0000                  		beq.w	Jun_Display	; if not, branch
00017F98                            
00017F98 43F8 D000                  		lea	(v_player).w,a1
00017F9C 720E                       		moveq	#$E,d1
00017F9E 3029 0008                  		move.w	obX(a1),d0
00017FA2 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00017FA6 6500                       		bcs.s	@isleft		; if yes, branch
00017FA8 7207                       		moveq	#7,d1		
00017FAA                            
00017FAA                            	@isleft:
00017FAA B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00017FAE 6600                       		bne.s	Jun_Display	; if not, branch
00017FB0                            
00017FB0 1141 0032                  		move.b	d1,$32(a0)
00017FB4 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00017FB8 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00017FBE 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00017FC4 337C 0800 0020             		move.w	#$800,obInertia(a1)
00017FCA 337C 0000 0010             		move.w	#0,obVelX(a1)
00017FD0 337C 0000 0012             		move.w	#0,obVelY(a1)
00017FD6 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017FDC 08A9 0005 0022             		bclr	#5,obStatus(a1)
00017FE2 08E9 0001 0022             		bset	#1,obStatus(a1)
00017FE8 3429 0008                  		move.w	obX(a1),d2
00017FEC 3629 000C                  		move.w	obY(a1),d3
00017FF0 6100 0000                  		bsr.w	Jun_ChgPos
00017FF4 D569 0008                  		add.w	d2,obX(a1)
00017FF8 D769 000C                  		add.w	d3,obY(a1)
00017FFC E0E9 0008                  		asr	obX(a1)
00018000 E0E9 000C                  		asr	obY(a1)
00018004                            
00018004                            Jun_Display:	; Routine 4
00018004 6000 966E                  		bra.w	RememberState
00018008                            ; ===========================================================================
00018008                            
00018008                            Jun_Release:	; Routine 6
00018008 1028 001A                  		move.b	obFrame(a0),d0
0001800C 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018010 6700                       		beq.s	@release	; if yes, branch
00018012 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018016 6600                       		bne.s	@dontrelease	; if not, branch
00018018                            
00018018                            	@release:
00018018 B028 0032                  		cmp.b	$32(a0),d0
0001801C 6700                       		beq.s	@dontrelease
0001801E 43F8 D000                  		lea	(v_player).w,a1
00018022 337C 0000 0010             		move.w	#0,obVelX(a1)
00018028 337C 0800 0012             		move.w	#$800,obVelY(a1)
0001802E 0C00 0004                  		cmpi.b	#4,d0
00018032 6700                       		beq.s	@isdown
00018034 337C 0800 0010             		move.w	#$800,obVelX(a1)
0001803A 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018040                            
00018040                            	@isdown:
00018040 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018044 5928 0024                  		subq.b	#4,obRoutine(a0)
00018048                            
00018048                            	@dontrelease:
00018048 6100                       		bsr.s	Jun_ChkSwitch
0001804A 6100                       		bsr.s	Jun_ChgPos
0001804C 6000 9626                  		bra.w	RememberState
00018050                            
00018050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018050                            
00018050                            
00018050                            Jun_ChkSwitch:
00018050 45F8 F7E0                  		lea	(f_switch).w,a2
00018054 7000                       		moveq	#0,d0
00018056 1028 0038                  		move.b	jun_switch(a0),d0
0001805A 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018060 6700                       		beq.s	@unpressed	; if not, branch
00018062                            
00018062 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018066 6600                       		bne.s	@animate	; if yes, branch
00018068 4428 0034                  		neg.b	jun_frame(a0)
0001806C 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018072 6000                       		bra.s	@animate
00018074                            ; ===========================================================================
00018074                            
00018074                            @unpressed:
00018074 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018078                            
00018078                            @animate:
00018078 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
0001807C 6A00                       		bpl.s	@nochange	; if time remains, branch
0001807E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018084 1228 0034                  		move.b	jun_frame(a0),d1
00018088 1028 001A                  		move.b	obFrame(a0),d0
0001808C D001                       		add.b	d1,d0
0001808E 0200 000F                  		andi.b	#$F,d0
00018092 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018096                            
00018096                            	@nochange:
00018096 4E75                       		rts	
00018098                            ; End of function Jun_ChkSwitch
00018098                            
00018098                            
00018098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018098                            
00018098                            
00018098                            Jun_ChgPos:
00018098 43F8 D000                  		lea	(v_player).w,a1
0001809C 7000                       		moveq	#0,d0
0001809E 1028 001A                  		move.b	obFrame(a0),d0
000180A2 D040                       		add.w	d0,d0
000180A4 45FB 0000                  		lea	@data(pc,d0.w),a2
000180A8 101A                       		move.b	(a2)+,d0
000180AA 4880                       		ext.w	d0
000180AC D068 0008                  		add.w	obX(a0),d0
000180B0 3340 0008                  		move.w	d0,obX(a1)
000180B4 101A                       		move.b	(a2)+,d0
000180B6 4880                       		ext.w	d0
000180B8 D068 000C                  		add.w	obY(a0),d0
000180BC 3340 000C                  		move.w	d0,obY(a1)
000180C0 4E75                       		rts	
000180C2                            
000180C2                            
000180C2 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
000180C6 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
000180CA 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
000180CE 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
000180D2 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
000180D6 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
000180DA 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
000180DE E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000180DE E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000180E2                            Map_Jun:	include	"_maps\Rotating Junction.asm"
000180E2                            ; ---------------------------------------------------------------------------
000180E2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000180E2                            ; ---------------------------------------------------------------------------
000180E2                            Map_Jun_internal:
000180E2 0000                       		dc.w @gap0-Map_Jun_internal
000180E4 0000                       		dc.w @gap1-Map_Jun_internal
000180E6 0000                       		dc.w @gap2-Map_Jun_internal
000180E8 0000                       		dc.w @gap3-Map_Jun_internal
000180EA 0000                       		dc.w @gap4-Map_Jun_internal
000180EC 0000                       		dc.w @gap5-Map_Jun_internal
000180EE 0000                       		dc.w @gap6-Map_Jun_internal
000180F0 0000                       		dc.w @gap7-Map_Jun_internal
000180F2 0000                       		dc.w @gap8-Map_Jun_internal
000180F4 0000                       		dc.w @gap9-Map_Jun_internal
000180F6 0000                       		dc.w @gapA-Map_Jun_internal
000180F8 0000                       		dc.w @gapB-Map_Jun_internal
000180FA 0000                       		dc.w @gapC-Map_Jun_internal
000180FC 0000                       		dc.w @gapD-Map_Jun_internal
000180FE 0000                       		dc.w @gapE-Map_Jun_internal
00018100 0000                       		dc.w @gapF-Map_Jun_internal
00018102 0000                       		dc.w @circle-Map_Jun_internal
00018104 06                         @gap0:		dc.b 6
00018105 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
0001810A 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001810F E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018114 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018119 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001811E 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018123 06                         @gap1:		dc.b 6
00018124 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018129 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001812E F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018133 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018138 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001813D 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018142 06                         @gap2:		dc.b 6
00018143 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018148 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001814D 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018152 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018157 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001815C 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018161 06                         @gap3:		dc.b 6
00018162 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018167 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001816C 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018171 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018176 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001817B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018180 06                         @gap4:		dc.b 6
00018181 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018186 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001818B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018190 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018195 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001819A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001819F 06                         @gap5:		dc.b 6
000181A0 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000181A5 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000181AA 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000181AF 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000181B4 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000181B9 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000181BE 06                         @gap6:		dc.b 6
000181BF 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000181C4 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000181C9 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000181CE 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000181D3 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000181D8 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000181DD 06                         @gap7:		dc.b 6
000181DE 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000181E3 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000181E8 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000181ED F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000181F2 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000181F7 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000181FC 06                         @gap8:		dc.b 6
000181FD E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018202 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018207 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001820C E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018211 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018216 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
0001821B 06                         @gap9:		dc.b 6
0001821C D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018221 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018226 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
0001822B DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018230 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018235 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
0001823A 06                         @gapA:		dc.b 6
0001823B D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018240 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018245 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001824A D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001824F E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018254 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018259 06                         @gapB:		dc.b 6
0001825A D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001825F D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018264 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018269 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001826E E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018273 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018278 06                         @gapC:		dc.b 6
00018279 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001827E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018283 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018288 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001828D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018292 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018297 06                         @gapD:		dc.b 6
00018298 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001829D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000182A2 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000182A7 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000182AC E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000182B1 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000182B6 06                         @gapE:		dc.b 6
000182B7 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000182BC D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000182C1 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000182C6 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000182CB E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000182D0 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000182D5 06                         @gapF:		dc.b 6
000182D6 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000182DB D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000182E0 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000182E5 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000182EA F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000182EF F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000182F4 0C                         @circle:	dc.b $C
000182F5 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000182FA D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000182FF E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018304 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018309 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001830E E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00018313 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018318 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001831D 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00018322 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00018327 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001832C 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00018332 00                         		even
00018332 00                         		even
00018332                            		include	"_incObj\67 Running Disc.asm"
00018332                            ; ---------------------------------------------------------------------------
00018332                            ; Object 67 - disc that	you run	around (SBZ)
00018332                            ; ---------------------------------------------------------------------------
00018332                            
00018332                            RunningDisc:
00018332 7000                       		moveq	#0,d0
00018334 1028 0024                  		move.b	obRoutine(a0),d0
00018338 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
0001833C 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
00018340                            ; ===========================================================================
00018340 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00018342 0000                       		dc.w Disc_Action-Disc_Index
00018344                            
00018344 =00000032                  disc_origX:	equ $32		; original x-axis position
00018344 =00000030                  disc_origY:	equ $30		; original y-axis position
00018344                            ; ===========================================================================
00018344                            
00018344                            Disc_Main:	; Routine 0
00018344 5428 0024                  		addq.b	#2,obRoutine(a0)
00018348 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00018350 317C C344 0002             		move.w	#$C344,obGfx(a0)
00018356 117C 0004 0001             		move.b	#4,obRender(a0)
0001835C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018362 117C 0008 0014             		move.b	#8,obActWid(a0)
00018368 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001836E 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018374 117C 0018 0034             		move.b	#$18,$34(a0)
0001837A 117C 0048 0038             		move.b	#$48,$38(a0)
00018380 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018384 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018388 6700                       		beq.s	@typeis0	; branch if 0
0001838A 117C 0010 0034             		move.b	#$10,$34(a0)
00018390 117C 0038 0038             		move.b	#$38,$38(a0)
00018396                            
00018396                            	@typeis0:
00018396 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001839A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001839E 4881                       		ext.w	d1
000183A0 E741                       		asl.w	#3,d1
000183A2 3141 0036                  		move.w	d1,$36(a0)
000183A6 1028 0022                  		move.b	obStatus(a0),d0
000183AA E418                       		ror.b	#2,d0
000183AC 0200 00C0                  		andi.b	#$C0,d0
000183B0 1140 0026                  		move.b	d0,obAngle(a0)
000183B4                            
000183B4                            Disc_Action:	; Routine 2
000183B4 6100 0000                  		bsr.w	Disc_MoveSonic
000183B8 6100 0000                  		bsr.w	Disc_MoveSpot
000183BC 6000 0000                  		bra.w	Disc_ChkDel
000183C0                            ; ===========================================================================
000183C0                            
000183C0                            Disc_MoveSonic:
000183C0 7400                       		moveq	#0,d2
000183C2 1428 0038                  		move.b	$38(a0),d2
000183C6 3602                       		move.w	d2,d3
000183C8 D643                       		add.w	d3,d3
000183CA 43F8 D000                  		lea	(v_player).w,a1
000183CE 3029 0008                  		move.w	obX(a1),d0
000183D2 9068 0032                  		sub.w	disc_origX(a0),d0
000183D6 D042                       		add.w	d2,d0
000183D8 B043                       		cmp.w	d3,d0
000183DA 6400                       		bcc.s	loc_155A8
000183DC 3229 000C                  		move.w	obY(a1),d1
000183E0 9268 0030                  		sub.w	disc_origY(a0),d1
000183E4 D242                       		add.w	d2,d1
000183E6 B243                       		cmp.w	d3,d1
000183E8 6400                       		bcc.s	loc_155A8
000183EA 0829 0001 0022             		btst	#1,obStatus(a1)
000183F0 6700                       		beq.s	loc_155B8
000183F2 4228 003A                  		clr.b	$3A(a0)
000183F6 4E75                       		rts	
000183F8                            ; ===========================================================================
000183F8                            
000183F8                            loc_155A8:
000183F8 4A28 003A                  		tst.b	$3A(a0)
000183FC 6700                       		beq.s	locret_155B6
000183FE 4229 0038                  		clr.b	$38(a1)
00018402 4228 003A                  		clr.b	$3A(a0)
00018406                            
00018406                            locret_155B6:
00018406 4E75                       		rts	
00018408                            ; ===========================================================================
00018408                            
00018408                            loc_155B8:
00018408 4A28 003A                  		tst.b	$3A(a0)
0001840C 6600                       		bne.s	loc_155E2
0001840E 117C 0001 003A             		move.b	#1,$3A(a0)
00018414 0829 0002 0022             		btst	#2,obStatus(a1)
0001841A 6600                       		bne.s	loc_155D0
0001841C 4229 001C                  		clr.b	obAnim(a1)
00018420                            
00018420                            loc_155D0:
00018420 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018426 137C 0001 001D             		move.b	#1,obNextAni(a1)
0001842C 137C 0001 0038             		move.b	#1,$38(a1)
00018432                            
00018432                            loc_155E2:
00018432 3029 0020                  		move.w	obInertia(a1),d0
00018436 4A68 0036                  		tst.w	$36(a0)
0001843A 6A00                       		bpl.s	loc_15608
0001843C 0C40 FC00                  		cmpi.w	#-$400,d0
00018440 6F00                       		ble.s	loc_155FA
00018442 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00018448 4E75                       		rts	
0001844A                            ; ===========================================================================
0001844A                            
0001844A                            loc_155FA:
0001844A 0C40 F100                  		cmpi.w	#-$F00,d0
0001844E 6C00                       		bge.s	locret_15606
00018450 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00018456                            
00018456                            locret_15606:
00018456 4E75                       		rts	
00018458                            ; ===========================================================================
00018458                            
00018458                            loc_15608:
00018458 0C40 0400                  		cmpi.w	#$400,d0
0001845C 6C00                       		bge.s	loc_15616
0001845E 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018464 4E75                       		rts	
00018466                            ; ===========================================================================
00018466                            
00018466                            loc_15616:
00018466 0C40 0F00                  		cmpi.w	#$F00,d0
0001846A 6F00                       		ble.s	locret_15622
0001846C 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018472                            
00018472                            locret_15622:
00018472 4E75                       		rts	
00018474                            ; ===========================================================================
00018474                            
00018474                            Disc_MoveSpot:
00018474 3028 0036                  		move.w	$36(a0),d0
00018478 D168 0026                  		add.w	d0,obAngle(a0)
0001847C 1028 0026                  		move.b	obAngle(a0),d0
00018480 4EB9 0000 37AE             		jsr	(CalcSine).l
00018486 3428 0030                  		move.w	disc_origY(a0),d2
0001848A 3628 0032                  		move.w	disc_origX(a0),d3
0001848E 7800                       		moveq	#0,d4
00018490 1828 0034                  		move.b	$34(a0),d4
00018494 E14C                       		lsl.w	#8,d4
00018496 2A04                       		move.l	d4,d5
00018498 C9C0                       		muls.w	d0,d4
0001849A 4844                       		swap	d4
0001849C CBC1                       		muls.w	d1,d5
0001849E 4845                       		swap	d5
000184A0 D842                       		add.w	d2,d4
000184A2 DA43                       		add.w	d3,d5
000184A4 3144 000C                  		move.w	d4,obY(a0)
000184A8 3145 0008                  		move.w	d5,obX(a0)
000184AC 4E75                       		rts	
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            Disc_ChkDel:
000184CA 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
000184D0                            
000184D0                            	@delete:
000184D0 4EF9 0000 F73E             		jmp	(DeleteObject).l
000184D0 4EF9 0000 F73E             		jmp	(DeleteObject).l
000184D6                            Map_Disc:	include	"_maps\Running Disc.asm"
000184D6                            ; ---------------------------------------------------------------------------
000184D6                            ; Sprite mappings - disc that you run around (SBZ)
000184D6                            ; (It's just a small blob that moves around in a circle. The disc itself is
000184D6                            ; part of the level tiles.)
000184D6                            ; ---------------------------------------------------------------------------
000184D6                            Map_Disc_internal:
000184D6 0000                       		dc.w @spot-Map_Disc_internal
000184D8 01                         @spot:		dc.b 1
000184D9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000184DE                            		even
000184DE                            		even
000184DE                            		include	"_incObj\68 Conveyor Belt.asm"
000184DE                            ; ---------------------------------------------------------------------------
000184DE                            ; Object 68 - conveyor belts (SBZ)
000184DE                            ; ---------------------------------------------------------------------------
000184DE                            
000184DE                            Conveyor:
000184DE 7000                       		moveq	#0,d0
000184E0 1028 0024                  		move.b	obRoutine(a0),d0
000184E4 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
000184E8 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
000184EC                            ; ===========================================================================
000184EC 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
000184EE 0000                       		dc.w Conv_Action-Conv_Index
000184F0                            
000184F0 =00000036                  conv_speed:	equ $36
000184F0 =00000038                  conv_width:	equ $38
000184F0                            ; ===========================================================================
000184F0                            
000184F0                            Conv_Main:	; Routine 0
000184F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000184F4 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000184FA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000184FE 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018502 6700                       		beq.s	@typeis0	; if zero, branch
00018504 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
0001850A                            
0001850A                            	@typeis0:
0001850A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001850E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018512 4881                       		ext.w	d1
00018514 E841                       		asr.w	#4,d1
00018516 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
0001851A                            
0001851A                            Conv_Action:	; Routine 2
0001851A 6100                       		bsr.s	@movesonic
00018538 4E75                       		rts	
0001853A                            
0001853A                            	@delete:
0001853A 4EF9 0000 F73E             		jmp	(DeleteObject).l
00018540                            ; ===========================================================================
00018540                            
00018540                            @movesonic:
00018540 7400                       		moveq	#0,d2
00018542 1428 0038                  		move.b	conv_width(a0),d2
00018546 3602                       		move.w	d2,d3
00018548 D643                       		add.w	d3,d3
0001854A 43F8 D000                  		lea	(v_player).w,a1
0001854E 3029 0008                  		move.w	obX(a1),d0
00018552 9068 0008                  		sub.w	obX(a0),d0
00018556 D042                       		add.w	d2,d0
00018558 B043                       		cmp.w	d3,d0
0001855A 6400                       		bcc.s	@notonconveyor
0001855C 3229 000C                  		move.w	obY(a1),d1
00018560 9268 000C                  		sub.w	obY(a0),d1
00018564 0641 0030                  		addi.w	#$30,d1
00018568 0C41 0030                  		cmpi.w	#$30,d1
0001856C 6400                       		bcc.s	@notonconveyor
0001856E 0829 0001 0022             		btst	#1,obStatus(a1)
00018574 6600                       		bne.s	@notonconveyor
00018576 3028 0036                  		move.w	conv_speed(a0),d0
0001857A D169 0008                  		add.w	d0,obX(a1)
0001857E                            
0001857E                            	@notonconveyor:
0001857E 4E75                       		rts	
0001857E 4E75                       		rts	
00018580                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00018580                            ; ---------------------------------------------------------------------------
00018580                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018580                            ; ---------------------------------------------------------------------------
00018580                            
00018580                            SpinPlatform:
00018580 7000                       		moveq	#0,d0
00018582 1028 0024                  		move.b	obRoutine(a0),d0
00018586 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
0001858A 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001858E                            ; ===========================================================================
0001858E 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00018590 0000                       		dc.w Spin_Trapdoor-Spin_Index
00018592 0000                       		dc.w Spin_Spinner-Spin_Index
00018594                            
00018594 =00000030                  spin_timer:	equ $30		; time counter until change
00018594 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018594                            ; ===========================================================================
00018594                            
00018594                            Spin_Main:	; Routine 0
00018594 5428 0024                  		addq.b	#2,obRoutine(a0)
00018598 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000185A0 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000185A6 0028 0004 0001             		ori.b	#4,obRender(a0)
000185AC 117C 0080 0014             		move.b	#$80,obActWid(a0)
000185B2 7000                       		moveq	#0,d0
000185B4 1028 0028                  		move.b	obSubtype(a0),d0
000185B8 0240 000F                  		andi.w	#$F,d0
000185BC C0FC 003C                  		mulu.w	#$3C,d0
000185C0 3140 0032                  		move.w	d0,spin_timelen(a0)
000185C4 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000185C8 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000185CA                            
000185CA 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000185CE 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000185D6 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000185DC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000185E2 117C 0002 001C             		move.b	#2,obAnim(a0)
000185E8 7000                       		moveq	#0,d0
000185EA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000185EE 3200                       		move.w	d0,d1
000185F0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000185F4 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000185F8 3140 0030                  		move.w	d0,spin_timer(a0)
000185FC 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00018600 0241 0070                  		andi.w	#$70,d1
00018604 0641 0010                  		addi.w	#$10,d1
00018608 E549                       		lsl.w	#2,d1
0001860A 5341                       		subq.w	#1,d1
0001860C 3141 0036                  		move.w	d1,$36(a0)
00018610 6000                       		bra.s	Spin_Spinner
00018612                            ; ===========================================================================
00018612                            
00018612                            Spin_Trapdoor:	; Routine 2
00018612 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00018616 6A00                       		bpl.s	@animate	; if time remains, branch
00018618                            
00018618 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001861E 0868 0000 001C             		bchg	#0,obAnim(a0)
00018624 4A28 0001                  		tst.b	obRender(a0)
00018628 6A00                       		bpl.s	@animate
00018634                            
00018634                            	@animate:
00018634 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001863A 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00018640 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00018644 6600                       		bne.s	@notsolid	; if not, branch
00018646 323C 004B                  		move.w	#$4B,d1
0001864A 343C 000C                  		move.w	#$C,d2
0001864E 3602                       		move.w	d2,d3
00018650 5243                       		addq.w	#1,d3
00018652 3828 0008                  		move.w	obX(a0),d4
00018656 6100 94B4                  		bsr.w	SolidObject
0001865A 6000 9018                  		bra.w	RememberState
0001865E                            ; ===========================================================================
0001865E                            
0001865E                            @notsolid:
0001865E 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00018664 6700                       		beq.s	@display	; if not, branch
00018666 43F8 D000                  		lea	(v_player).w,a1
0001866A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018670 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018676 4228 0025                  		clr.b	obSolid(a0)
0001867A                            
0001867A                            	@display:
0001867A 6000 8FF8                  		bra.w	RememberState
0001867E                            ; ===========================================================================
0001867E                            
0001867E                            Spin_Spinner:	; Routine 4
0001867E 3038 FE04                  		move.w	(v_framecount).w,d0
00018682 C068 0036                  		and.w	$36(a0),d0
00018686 6600                       		bne.s	@delay
00018688 117C 0001 0034             		move.b	#1,$34(a0)
0001868E                            
0001868E                            	@delay:
0001868E 4A28 0034                  		tst.b	$34(a0)
00018692 6700                       		beq.s	@animate
00018694 5368 0030                  		subq.w	#1,spin_timer(a0)
00018698 6A00                       		bpl.s	@animate
0001869A 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000186A0 4228 0034                  		clr.b	$34(a0)
000186A4 0868 0000 001C             		bchg	#0,obAnim(a0)
000186AA                            
000186AA                            	@animate:
000186AA 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000186B0 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
000186B6 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000186BA 6600                       		bne.s	@notsolid2	; if not, branch
000186BC 323C 001B                  		move.w	#$1B,d1
000186C0 343C 0007                  		move.w	#7,d2
000186C4 3602                       		move.w	d2,d3
000186C6 5243                       		addq.w	#1,d3
000186C8 3828 0008                  		move.w	obX(a0),d4
000186CC 6100 943E                  		bsr.w	SolidObject
000186D0 6000 8FA2                  		bra.w	RememberState
000186D4                            ; ===========================================================================
000186D4                            
000186D4                            @notsolid2:
000186D4 0828 0003 0022             		btst	#3,obStatus(a0)
000186DA 6700                       		beq.s	@display
000186DC 43F8 D000                  		lea	(v_player).w,a1
000186E0 08A9 0003 0022             		bclr	#3,obStatus(a1)
000186E6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000186EC 4228 0025                  		clr.b	obSolid(a0)
000186F0                            
000186F0                            	@display:
000186F0 6000 8F82                  		bra.w	RememberState
000186F0 6000 8F82                  		bra.w	RememberState
000186F4                            		include	"_anim\SBZ Spinning Platforms.asm"
000186F4                            ; ---------------------------------------------------------------------------
000186F4                            ; Animation script - trapdoor (SBZ)
000186F4                            ; ---------------------------------------------------------------------------
000186F4 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
000186F6 0000                       		dc.w @trapclose-Ani_Spin
000186F8 0000                       		dc.w @spin1-Ani_Spin
000186FA 0000                       		dc.w @spin2-Ani_Spin
000186FC 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00018702 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018708 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001871C 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018730                            		even
00018730                            		even
00018730                            Map_Trap:	include	"_maps\Trapdoor.asm"
00018730                            ; ---------------------------------------------------------------------------
00018730                            ; Sprite mappings - trapdoor (SBZ)
00018730                            ; ---------------------------------------------------------------------------
00018730                            Map_Trap_internal:
00018730 0000                       		dc.w @closed-Map_Trap_internal
00018732 0000                       		dc.w @half-Map_Trap_internal
00018734 0000                       		dc.w @open-Map_Trap_internal
00018736 04                         @closed:	dc.b 4
00018737 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001873C F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018741 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018746 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001874B 08                         @half:		dc.b 8
0001874C F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018751 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018756 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001875B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018760 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018765 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001876A 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001876F 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018774 04                         @open:		dc.b 4
00018775 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001877A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001877F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018784 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001878A 00                         		even
0001878A 00                         		even
0001878A                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
0001878A                            ; ---------------------------------------------------------------------------
0001878A                            ; Sprite mappings - spinning platforms (SBZ)
0001878A                            ; ---------------------------------------------------------------------------
0001878A                            Map_Spin_internal:
0001878A 0000                       		dc.w @flat-Map_Spin_internal
0001878C 0000                       		dc.w @spin1-Map_Spin_internal
0001878E 0000                       		dc.w @spin2-Map_Spin_internal
00018790 0000                       		dc.w @spin3-Map_Spin_internal
00018792 0000                       		dc.w @spin4-Map_Spin_internal
00018794 02                         @flat:		dc.b 2
00018795 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001879A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001879F 02                         @spin1:		dc.b 2
000187A0 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000187A5 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000187AA 02                         @spin2:		dc.b 2
000187AB F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000187B0 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000187B5 02                         @spin3:		dc.b 2
000187B6 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000187BB 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000187C0 02                         @spin4:		dc.b 2
000187C1 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000187C6 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000187CC 00                         		even
000187CC 00                         		even
000187CC                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000187CC                            ; ---------------------------------------------------------------------------
000187CC                            ; Object 6A - ground saws and pizza cutters (SBZ)
000187CC                            ; ---------------------------------------------------------------------------
000187CC                            
000187CC                            Saws:
000187CC 7000                       		moveq	#0,d0
000187CE 1028 0024                  		move.b	obRoutine(a0),d0
000187D2 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000187D6 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
000187DA                            ; ===========================================================================
000187DA 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
000187DC 0000                       		dc.w Saw_Action-Saw_Index
000187DE                            
000187DE =0000003A                  saw_origX:	equ $3A		; original x-axis position
000187DE =00000038                  saw_origY:	equ $38		; original y-axis position
000187DE =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
000187DE                            ; ===========================================================================
000187DE                            
000187DE                            Saw_Main:	; Routine 0
000187DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000187E2 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
000187EA 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
000187F0 117C 0004 0001             		move.b	#4,obRender(a0)
000187F6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000187FC 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018802 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018808 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
0001880E 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018814 6400                       		bcc.s	Saw_Action	; if yes, branch
00018816 117C 00A2 0020             		move.b	#$A2,obColType(a0)
0001881C                            
0001881C                            Saw_Action:	; Routine 2
0001881C 7000                       		moveq	#0,d0
0001881E 1028 0028                  		move.b	obSubtype(a0),d0
00018822 0240 0007                  		andi.w	#7,d0
00018826 D040                       		add.w	d0,d0
00018828 323B 0000                  		move.w	@index(pc,d0.w),d1
0001882C 4EBB 1000                  		jsr	@index(pc,d1.w)
0001884C 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00018852                            
00018852                            	@delete:
00018852 4EF9 0000 F73E             		jmp	(DeleteObject).l
00018858                            ; ===========================================================================
00018858 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001885E 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018862                            ; ===========================================================================
00018862                            
00018862                            @type00:
00018862 4E75                       		rts			; doesn't move
00018864                            ; ===========================================================================
00018864                            
00018864                            @type01:
00018864 323C 0060                  		move.w	#$60,d1
00018868 7000                       		moveq	#0,d0
0001886A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001886E 0828 0000 0022             		btst	#0,obStatus(a0)
00018874 6700                       		beq.s	@noflip01
00018876 4440                       		neg.w	d0
00018878 D041                       		add.w	d1,d0
0001887A                            
0001887A                            	@noflip01:
0001887A 3228 003A                  		move.w	saw_origX(a0),d1
0001887E 9240                       		sub.w	d0,d1
00018880 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018884                            
00018884 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018888 6A00                       		bpl.s	@sameframe01
0001888A 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018890 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018896                            
00018896                            	@sameframe01:
00018896 4A28 0001                  		tst.b	obRender(a0)
0001889A 6A00                       		bpl.s	@nosound01
0001889C 3038 FE04                  		move.w	(v_framecount).w,d0
000188A0 0240 000F                  		andi.w	#$F,d0
000188A4 6600                       		bne.s	@nosound01
000188B0                            
000188B0                            	@nosound01:
000188B0 4E75                       		rts	
000188B2                            ; ===========================================================================
000188B2                            
000188B2                            @type02:
000188B2 323C 0030                  		move.w	#$30,d1
000188B6 7000                       		moveq	#0,d0
000188B8 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000188BC 0828 0000 0022             		btst	#0,obStatus(a0)
000188C2 6700                       		beq.s	@noflip02
000188C4 4440                       		neg.w	d0
000188C6 0640 0080                  		addi.w	#$80,d0
000188CA                            
000188CA                            	@noflip02:
000188CA 3228 0038                  		move.w	saw_origY(a0),d1
000188CE 9240                       		sub.w	d0,d1
000188D0 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000188D4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000188D8 6A00                       		bpl.s	@sameframe02
000188DA 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000188E0 0868 0000 001A             		bchg	#0,obFrame(a0)
000188E6                            
000188E6                            	@sameframe02:
000188E6 4A28 0001                  		tst.b	obRender(a0)
000188EA 6A00                       		bpl.s	@nosound02
000188EC 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000188F0 0C00 0018                  		cmpi.b	#$18,d0
000188F4 6600                       		bne.s	@nosound02
00018900                            
00018900                            	@nosound02:
00018900 4E75                       		rts	
00018902                            ; ===========================================================================
00018902                            
00018902                            @type03:
00018902 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018906 6600                       		bne.s	@here03		; if yes, branch
00018908                            
00018908 3038 D008                  		move.w	(v_player+obX).w,d0
0001890C 0440 00C0                  		subi.w	#$C0,d0
00018910 6500                       		bcs.s	@nosaw03x
00018912 9068 0008                  		sub.w	obX(a0),d0
00018916 6500                       		bcs.s	@nosaw03x
00018918 3038 D00C                  		move.w	(v_player+obY).w,d0
0001891C 0440 0080                  		subi.w	#$80,d0
00018920 B068 000C                  		cmp.w	obY(a0),d0
00018924 6400                       		bcc.s	@nosaw03y
00018926 0640 0100                  		addi.w	#$100,d0
0001892A B068 000C                  		cmp.w	obY(a0),d0
0001892E 6500                       		bcs.s	@nosaw03y
00018930 117C 0001 003D             		move.b	#1,saw_here(a0)
00018936 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
0001893C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018942 117C 0002 001A             		move.b	#2,obFrame(a0)
00018952                            
00018952                            	@nosaw03x:
00018952 588F                       		addq.l	#4,sp
00018954                            
00018954                            	@nosaw03y:
00018954 4E75                       		rts	
00018956                            ; ===========================================================================
00018956                            
00018956                            @here03:
00018956 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001895C 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018962 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018966 6A00                       		bpl.s	@sameframe03
00018968 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001896E 0868 0000 001A             		bchg	#0,obFrame(a0)
00018974                            
00018974                            	@sameframe03:
00018974 4E75                       		rts	
00018976                            ; ===========================================================================
00018976                            
00018976                            @type04:
00018976 4A28 003D                  		tst.b	saw_here(a0)
0001897A 6600                       		bne.s	@here04
0001897C 3038 D008                  		move.w	(v_player+obX).w,d0
00018980 0640 00E0                  		addi.w	#$E0,d0
00018984 9068 0008                  		sub.w	obX(a0),d0
00018988 6400                       		bcc.s	@nosaw04x
0001898A 3038 D00C                  		move.w	(v_player+obY).w,d0
0001898E 0440 0080                  		subi.w	#$80,d0
00018992 B068 000C                  		cmp.w	obY(a0),d0
00018996 6400                       		bcc.s	@nosaw04y
00018998 0640 0100                  		addi.w	#$100,d0
0001899C B068 000C                  		cmp.w	obY(a0),d0
000189A0 6500                       		bcs.s	@nosaw04y
000189A2 117C 0001 003D             		move.b	#1,saw_here(a0)
000189A8 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000189AE 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189B4 117C 0002 001A             		move.b	#2,obFrame(a0)
000189C4                            
000189C4                            	@nosaw04x:
000189C4 588F                       		addq.l	#4,sp
000189C6                            
000189C6                            	@nosaw04y:
000189C6 4E75                       		rts	
000189C8                            ; ===========================================================================
000189C8                            
000189C8                            @here04:
000189C8 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
000189CE 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000189D4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000189D8 6A00                       		bpl.s	@sameframe04
000189DA 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000189E0 0868 0000 001A             		bchg	#0,obFrame(a0)
000189E6                            
000189E6                            	@sameframe04:
000189E6 4E75                       		rts	
000189E6 4E75                       		rts	
000189E8                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
000189E8                            ; ---------------------------------------------------------------------------
000189E8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000189E8                            ; ---------------------------------------------------------------------------
000189E8                            Map_Saw_internal:
000189E8 0000                       		dc.w @pizzacutter1-Map_Saw_internal
000189EA 0000                       		dc.w @pizzacutter2-Map_Saw_internal
000189EC 0000                       		dc.w @groundsaw1-Map_Saw_internal
000189EE 0000                       		dc.w @groundsaw2-Map_Saw_internal
000189F0 07                         @pizzacutter1:	dc.b 7
000189F1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000189F6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000189FB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018A00 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018A05 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018A0A 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018A0F 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018A14 07                         @pizzacutter2:	dc.b 7
00018A15 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018A1A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018A1F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018A24 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018A29 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018A2E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018A33 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018A38 04                         @groundsaw1:	dc.b 4
00018A39 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018A3E E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018A43 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018A48 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018A4D 04                         @groundsaw2:	dc.b 4
00018A4E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018A53 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018A58 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018A5D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018A62                            		even
00018A62                            		even
00018A62                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018A62                            ; ---------------------------------------------------------------------------
00018A62                            ; Object 6B - stomper and sliding door (SBZ)
00018A62                            ; ---------------------------------------------------------------------------
00018A62                            
00018A62                            ScrapStomp:
00018A62 7000                       		moveq	#0,d0
00018A64 1028 0024                  		move.b	obRoutine(a0),d0
00018A68 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018A6C 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018A70                            ; ===========================================================================
00018A70 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018A72 0000                       		dc.w Sto_Action-Sto_Index
00018A74                            
00018A74 =00000016                  sto_height:	equ $16
00018A74 =00000034                  sto_origX:	equ $34		; original x-axis position
00018A74 =00000030                  sto_origY:	equ $30		; original y-axis position
00018A74 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018A74                            
00018A74 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018A78 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018A7C 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018A80 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018A84 8040 0005                  		dc.b  $80, $40,	  0,   5
00018A88                            ; ===========================================================================
00018A88                            
00018A88                            Sto_Main:	; Routine 0
00018A88 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A8C 7000                       		moveq	#0,d0
00018A8E 1028 0028                  		move.b	obSubtype(a0),d0
00018A92 E448                       		lsr.w	#2,d0
00018A94 0240 001C                  		andi.w	#$1C,d0
00018A98 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018A9C 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018AA0 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018AA4 E448                       		lsr.w	#2,d0
00018AA6 1140 001A                  		move.b	d0,obFrame(a0)
00018AAA 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018AB2 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018AB8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018ABE 6600                       		bne.s	@isSBZ12	; if not, branch
00018AC0 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018AC6 6700                       		beq.s	@isSBZ3
00018AC8                            
00018AC8                            @chkdel:
00018AC8 45F8 FC00                  		lea	(v_objstate).w,a2
00018ACC 7000                       		moveq	#0,d0
00018ACE 1028 0023                  		move.b	obRespawnNo(a0),d0
00018AD2 6700                       		beq.s	@delete
00018AD4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018ADA                            
00018ADA                            	@delete:
00018ADA 4EF9 0000 F73E             		jmp	(DeleteObject).l
00018AE0                            ; ===========================================================================
00018AE0                            
00018AE0                            @isSBZ3:
00018AE0 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018AE6 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018AEC 6600                       		bne.s	@isSBZ12
00018AEE 45F8 FC00                  		lea	(v_objstate).w,a2
00018AF2 7000                       		moveq	#0,d0
00018AF4 1028 0023                  		move.b	obRespawnNo(a0),d0
00018AF8 6700                       		beq.s	@isSBZ12
00018AFA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018B00 6700                       		beq.s	@isSBZ12
00018B02 4238 F7CB                  		clr.b	(v_obj6B).w
00018B06 60C0                       		bra.s	@chkdel
00018B08                            ; ===========================================================================
00018B08                            
00018B08                            @isSBZ12:
00018B08 0028 0004 0001             		ori.b	#4,obRender(a0)
00018B0E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018B14 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018B1A 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018B20 7000                       		moveq	#0,d0
00018B22 101B                       		move.b	(a3)+,d0
00018B24 3140 003C                  		move.w	d0,$3C(a0)
00018B28 7000                       		moveq	#0,d0
00018B2A 1028 0028                  		move.b	obSubtype(a0),d0
00018B2E 6A00                       		bpl.s	Sto_Action
00018B30 0200 000F                  		andi.b	#$F,d0
00018B34 1140 003E                  		move.b	d0,$3E(a0)
00018B38 1153 0028                  		move.b	(a3),obSubtype(a0)
00018B3C 0C13 0005                  		cmpi.b	#5,(a3)
00018B40 6600                       		bne.s	@chkgone
00018B42 08E8 0004 0001             		bset	#4,obRender(a0)
00018B48                            
00018B48                            	@chkgone:
00018B48 45F8 FC00                  		lea	(v_objstate).w,a2
00018B4C 7000                       		moveq	#0,d0
00018B4E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B52 6700                       		beq.s	Sto_Action
00018B54 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B5A                            
00018B5A                            Sto_Action:	; Routine 2
00018B5A 3F28 0008                  		move.w	obX(a0),-(sp)
00018B5E 7000                       		moveq	#0,d0
00018B60 1028 0028                  		move.b	obSubtype(a0),d0
00018B64 0240 000F                  		andi.w	#$F,d0
00018B68 D040                       		add.w	d0,d0
00018B6A 323B 0000                  		move.w	@index(pc,d0.w),d1
00018B6E 4EBB 1000                  		jsr	@index(pc,d1.w)
00018B72 381F                       		move.w	(sp)+,d4
00018B74 4A28 0001                  		tst.b	obRender(a0)
00018B78 6A00                       		bpl.s	@chkdel
00018B7A 7200                       		moveq	#0,d1
00018B7C 1228 0014                  		move.b	obActWid(a0),d1
00018B80 0641 000B                  		addi.w	#$B,d1
00018B84 7400                       		moveq	#0,d2
00018B86 1428 0016                  		move.b	sto_height(a0),d2
00018B8A 3602                       		move.w	d2,d3
00018B8C 5243                       		addq.w	#1,d3
00018B8E 6100 8F7C                  		bsr.w	SolidObject
00018B92                            
00018B92                            	@chkdel:
00018BAE 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00018BB4                            
00018BB4                            	@chkgone:
00018BB4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018BBA 6600                       		bne.s	@delete
00018BBC 4238 F7CB                  		clr.b	(v_obj6B).w
00018BC0 45F8 FC00                  		lea	(v_objstate).w,a2
00018BC4 7000                       		moveq	#0,d0
00018BC6 1028 0023                  		move.b	obRespawnNo(a0),d0
00018BCA 6700                       		beq.s	@delete
00018BCC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018BD2                            
00018BD2                            	@delete:
00018BD2 4EF9 0000 F73E             		jmp	(DeleteObject).l
00018BD8                            ; ===========================================================================
00018BD8 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018BDC 0000 0000                  		dc.w @type02-@index, @type03-@index
00018BE0 0000 0000                  		dc.w @type04-@index, @type05-@index
00018BE4                            ; ===========================================================================
00018BE4                            
00018BE4                            @type00:
00018BE4 4E75                       		rts
00018BE6                            ; ===========================================================================
00018BE6                            
00018BE6                            @type01:
00018BE6 4A28 0038                  		tst.b	sto_active(a0)
00018BEA 6600                       		bne.s	@isactive01
00018BEC 45F8 F7E0                  		lea	(f_switch).w,a2
00018BF0 7000                       		moveq	#0,d0
00018BF2 1028 003E                  		move.b	$3E(a0),d0
00018BF6 0832 0000 0000             		btst	#0,(a2,d0.w)
00018BFC 6700                       		beq.s	@loc_15DC2
00018BFE 117C 0001 0038             		move.b	#1,sto_active(a0)
00018C04                            
00018C04                            	@isactive01:
00018C04 3028 003C                  		move.w	$3C(a0),d0
00018C08 B068 003A                  		cmp.w	$3A(a0),d0
00018C0C 6700                       		beq.s	@loc_15DE0
00018C0E 5468 003A                  		addq.w	#2,$3A(a0)
00018C12                            
00018C12                            	@loc_15DC2:
00018C12 3028 003A                  		move.w	$3A(a0),d0
00018C16 0828 0000 0022             		btst	#0,obStatus(a0)
00018C1C 6700                       		beq.s	@noflip01
00018C1E 4440                       		neg.w	d0
00018C20 0640 0080                  		addi.w	#$80,d0
00018C24                            
00018C24                            	@noflip01:
00018C24 3228 0034                  		move.w	sto_origX(a0),d1
00018C28 9240                       		sub.w	d0,d1
00018C2A 3141 0008                  		move.w	d1,obX(a0)
00018C2E 4E75                       		rts	
00018C30                            ; ===========================================================================
00018C30                            
00018C30                            @loc_15DE0:
00018C30 5228 0028                  		addq.b	#1,obSubtype(a0)
00018C34 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018C3A 4228 0038                  		clr.b	sto_active(a0)
00018C3E 45F8 FC00                  		lea	(v_objstate).w,a2
00018C42 7000                       		moveq	#0,d0
00018C44 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C48 67C8                       		beq.s	@loc_15DC2
00018C4A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018C50 60C0                       		bra.s	@loc_15DC2
00018C52                            ; ===========================================================================
00018C52                            
00018C52                            @type02:
00018C52 4A28 0038                  		tst.b	sto_active(a0)
00018C56 6600                       		bne.s	@isactive02
00018C58 5368 0036                  		subq.w	#1,$36(a0)
00018C5C 6600                       		bne.s	@loc_15E1E
00018C5E 117C 0001 0038             		move.b	#1,sto_active(a0)
00018C64                            
00018C64                            	@isactive02:
00018C64 4A68 003A                  		tst.w	$3A(a0)
00018C68 6700                       		beq.s	@loc_15E3C
00018C6A 5568 003A                  		subq.w	#2,$3A(a0)
00018C6E                            
00018C6E                            	@loc_15E1E:
00018C6E 3028 003A                  		move.w	$3A(a0),d0
00018C72 0828 0000 0022             		btst	#0,obStatus(a0)
00018C78 6700                       		beq.s	@noflip02
00018C7A 4440                       		neg.w	d0
00018C7C 0640 0080                  		addi.w	#$80,d0
00018C80                            
00018C80                            	@noflip02:
00018C80 3228 0034                  		move.w	sto_origX(a0),d1
00018C84 9240                       		sub.w	d0,d1
00018C86 3141 0008                  		move.w	d1,obX(a0)
00018C8A 4E75                       		rts	
00018C8C                            ; ===========================================================================
00018C8C                            
00018C8C                            @loc_15E3C:
00018C8C 5328 0028                  		subq.b	#1,obSubtype(a0)
00018C90 4228 0038                  		clr.b	sto_active(a0)
00018C94 45F8 FC00                  		lea	(v_objstate).w,a2
00018C98 7000                       		moveq	#0,d0
00018C9A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C9E 67CE                       		beq.s	@loc_15E1E
00018CA0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018CA6 60C6                       		bra.s	@loc_15E1E
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            @type03:
00018CA8 4A28 0038                  		tst.b	sto_active(a0)
00018CAC 6600                       		bne.s	@isactive03
00018CAE 4A68 003A                  		tst.w	$3A(a0)
00018CB2 6700                       		beq.s	@loc_15E6A
00018CB4 5368 003A                  		subq.w	#1,$3A(a0)
00018CB8 6000                       		bra.s	@loc_15E8E
00018CBA                            ; ===========================================================================
00018CBA                            
00018CBA                            @loc_15E6A:
00018CBA 5368 0036                  		subq.w	#1,$36(a0)
00018CBE 6A00                       		bpl.s	@loc_15E8E
00018CC0 317C 003C 0036             		move.w	#$3C,$36(a0)
00018CC6 117C 0001 0038             		move.b	#1,sto_active(a0)
00018CCC                            
00018CCC                            @isactive03:
00018CCC 5068 003A                  		addq.w	#8,$3A(a0)
00018CD0 3028 003A                  		move.w	$3A(a0),d0
00018CD4 B068 003C                  		cmp.w	$3C(a0),d0
00018CD8 6600                       		bne.s	@loc_15E8E
00018CDA 4228 0038                  		clr.b	sto_active(a0)
00018CDE                            
00018CDE                            @loc_15E8E:
00018CDE 3028 003A                  		move.w	$3A(a0),d0
00018CE2 0828 0000 0022             		btst	#0,obStatus(a0)
00018CE8 6700                       		beq.s	@noflip03
00018CEA 4440                       		neg.w	d0
00018CEC 0640 0038                  		addi.w	#$38,d0
00018CF0                            
00018CF0                            	@noflip03:
00018CF0 3228 0030                  		move.w	sto_origY(a0),d1
00018CF4 D240                       		add.w	d0,d1
00018CF6 3141 000C                  		move.w	d1,obY(a0)
00018CFA 4E75                       		rts	
00018CFC                            ; ===========================================================================
00018CFC                            
00018CFC                            @type04:
00018CFC 4A28 0038                  		tst.b	sto_active(a0)
00018D00 6600                       		bne.s	@isactive04
00018D02 4A68 003A                  		tst.w	$3A(a0)
00018D06 6700                       		beq.s	@loc_15EBE
00018D08 5168 003A                  		subq.w	#8,$3A(a0)
00018D0C 6000                       		bra.s	@loc_15EF0
00018D0E                            ; ===========================================================================
00018D0E                            
00018D0E                            @loc_15EBE:
00018D0E 5368 0036                  		subq.w	#1,$36(a0)
00018D12 6A00                       		bpl.s	@loc_15EF0
00018D14 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D1A 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D20                            
00018D20                            @isactive04:
00018D20 3028 003A                  		move.w	$3A(a0),d0
00018D24 B068 003C                  		cmp.w	$3C(a0),d0
00018D28 6700                       		beq.s	@loc_15EE0
00018D2A 5068 003A                  		addq.w	#8,$3A(a0)
00018D2E 6000                       		bra.s	@loc_15EF0
00018D30                            ; ===========================================================================
00018D30                            
00018D30                            @loc_15EE0:
00018D30 5368 0036                  		subq.w	#1,$36(a0)
00018D34 6A00                       		bpl.s	@loc_15EF0
00018D36 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D3C 4228 0038                  		clr.b	sto_active(a0)
00018D40                            
00018D40                            @loc_15EF0:
00018D40 3028 003A                  		move.w	$3A(a0),d0
00018D44 0828 0000 0022             		btst	#0,obStatus(a0)
00018D4A 6700                       		beq.s	@noflip04
00018D4C 4440                       		neg.w	d0
00018D4E 0640 0038                  		addi.w	#$38,d0
00018D52                            
00018D52                            	@noflip04:
00018D52 3228 0030                  		move.w	sto_origY(a0),d1
00018D56 D240                       		add.w	d0,d1
00018D58 3141 000C                  		move.w	d1,obY(a0)
00018D5C 4E75                       		rts	
00018D5E                            ; ===========================================================================
00018D5E                            
00018D5E                            @type05:
00018D5E 4A28 0038                  		tst.b	sto_active(a0)
00018D62 6600                       		bne.s	@loc_15F3E
00018D64 45F8 F7E0                  		lea	(f_switch).w,a2
00018D68 7000                       		moveq	#0,d0
00018D6A 1028 003E                  		move.b	$3E(a0),d0
00018D6E 0832 0000 0000             		btst	#0,(a2,d0.w)
00018D74 6700                       		beq.s	@locret_15F5C
00018D76 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D7C 45F8 FC00                  		lea	(v_objstate).w,a2
00018D80 7000                       		moveq	#0,d0
00018D82 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D86 6700                       		beq.s	@loc_15F3E
00018D88 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018D8E                            
00018D8E                            @loc_15F3E:
00018D8E 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018D96 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018D9E 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018DA4 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018DAA 6700                       		beq.s	@loc_15F5E
00018DAC                            
00018DAC                            @locret_15F5C:
00018DAC 4E75                       		rts	
00018DAE                            ; ===========================================================================
00018DAE                            
00018DAE                            @loc_15F5E:
00018DAE 4228 0028                  		clr.b	obSubtype(a0)
00018DB2 4228 0038                  		clr.b	sto_active(a0)
00018DB6 4E75                       		rts	
00018DB6 4E75                       		rts	
00018DB8                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018DB8                            ; ---------------------------------------------------------------------------
00018DB8                            ; Sprite mappings - stomper and	platforms (SBZ)
00018DB8                            ; ---------------------------------------------------------------------------
00018DB8                            Map_Stomp_internal:
00018DB8 0000                       		dc.w @door-Map_Stomp_internal
00018DBA 0000                       		dc.w @stomper-Map_Stomp_internal
00018DBC 0000                       		dc.w @stomper-Map_Stomp_internal
00018DBE 0000                       		dc.w @stomper-Map_Stomp_internal
00018DC0 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018DC2 04                         @door:		dc.b 4
00018DC3 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018DC8 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018DCD F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018DD2 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018DD7 08                         @stomper:	dc.b 8
00018DD8 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018DDD E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018DE2 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018DE7 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018DEC 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018DF1 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018DF6 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018DFB 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018E00 0E                         @bigdoor:	dc.b $E
00018E01 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018E06 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018E0B C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018E10 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018E15 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018E1A C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018E1F C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018E24 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018E29 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018E2E E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018E33 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018E38 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018E3D 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018E42 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018E48 00                         		even
00018E48 00                         		even
00018E48                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018E48                            ; ---------------------------------------------------------------------------
00018E48                            ; Object 6C - vanishing	platforms (SBZ)
00018E48                            ; ---------------------------------------------------------------------------
00018E48                            
00018E48                            VanishPlatform:
00018E48 7000                       		moveq	#0,d0
00018E4A 1028 0024                  		move.b	obRoutine(a0),d0
00018E4E 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018E52 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018E56                            ; ===========================================================================
00018E56 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018E58 0000                       		dc.w VanP_Vanish-VanP_Index
00018E5A 0000                       		dc.w VanP_Appear-VanP_Index
00018E5C 0000                       		dc.w loc_16068-VanP_Index
00018E5E                            
00018E5E =00000030                  vanp_timer:	equ $30		; counter for time until event
00018E5E =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018E5E                            ; ===========================================================================
00018E5E                            
00018E5E                            VanP_Main:	; Routine 0
00018E5E 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018E62 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018E6A 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00018E70 0028 0004 0001             		ori.b	#4,obRender(a0)
00018E76 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018E7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018E82 7000                       		moveq	#0,d0
00018E84 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018E88 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018E8C 5240                       		addq.w	#1,d0		; add 1
00018E8E EF48                       		lsl.w	#7,d0		; multiply by $80
00018E90 3200                       		move.w	d0,d1
00018E92 5340                       		subq.w	#1,d0
00018E94 3140 0030                  		move.w	d0,vanp_timer(a0)
00018E98 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018E9C 7000                       		moveq	#0,d0
00018E9E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018EA2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018EA6 0641 0080                  		addi.w	#$80,d1
00018EAA C0C1                       		mulu.w	d1,d0
00018EAC E088                       		lsr.l	#8,d0
00018EAE 3140 0036                  		move.w	d0,$36(a0)
00018EB2 5341                       		subq.w	#1,d1
00018EB4 3141 0038                  		move.w	d1,$38(a0)
00018EB8                            
00018EB8                            loc_16068:	; Routine 6
00018EB8 3038 FE04                  		move.w	(v_framecount).w,d0
00018EBC 9068 0036                  		sub.w	$36(a0),d0
00018EC0 C068 0038                  		and.w	$38(a0),d0
00018EC4 6600                       		bne.s	@animate
00018EC6 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00018ECA 6000                       		bra.s	VanP_Vanish
00018ECC                            ; ===========================================================================
00018ECC                            
00018ECC                            @animate:
00018ECC 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018ED2 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00018ED8 6000 879A                  		bra.w	RememberState
00018EDC                            ; ===========================================================================
00018EDC                            
00018EDC                            VanP_Vanish:	; Routine 2
00018EDC                            VanP_Appear:	; Routine 4
00018EDC 5368 0030                  		subq.w	#1,vanp_timer(a0)
00018EE0 6A00                       		bpl.s	@wait
00018EE2 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00018EE8 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00018EEC 6700                       		beq.s	@isvanishing	; if yes, branch
00018EEE 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00018EF4                            
00018EF4                            	@isvanishing:
00018EF4 0868 0000 001C             		bchg	#0,obAnim(a0)
00018EFA                            
00018EFA                            	@wait:
00018EFA 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018F00 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00018F06 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00018F0C 6600                       		bne.s	@notsolid	; if yes, branch
00018F0E 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00018F14 6600                       		bne.s	@loc_160D6
00018F16 7200                       		moveq	#0,d1
00018F18 1228 0014                  		move.b	obActWid(a0),d1
00018F1C 4EB9 0000 8E0C             		jsr	(PlatformObject).l
00018F22 6000 8750                  		bra.w	RememberState
00018F26                            ; ===========================================================================
00018F26                            
00018F26                            @loc_160D6:
00018F26 7200                       		moveq	#0,d1
00018F28 1228 0014                  		move.b	obActWid(a0),d1
00018F2C 4EB9 0000 8F80             		jsr	(ExitPlatform).l
00018F32 3428 0008                  		move.w	obX(a0),d2
00018F36 4EB9 0000 94EA             		jsr	(MvSonicOnPtfm2).l
00018F3C 6000 8736                  		bra.w	RememberState
00018F40                            ; ===========================================================================
00018F40                            
00018F40                            @notsolid:
00018F40 0828 0003 0022             		btst	#3,obStatus(a0)
00018F46 6700                       		beq.s	@display
00018F48 43F8 D000                  		lea	(v_player).w,a1
00018F4C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018F52 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018F58 117C 0002 0024             		move.b	#2,obRoutine(a0)
00018F5E 4228 0025                  		clr.b	obSolid(a0)
00018F62                            
00018F62                            	@display:
00018F62 6000 8710                  		bra.w	RememberState
00018F62 6000 8710                  		bra.w	RememberState
00018F66                            		include	"_anim\SBZ Vanishing Platforms.asm"
00018F66                            ; ---------------------------------------------------------------------------
00018F66                            ; Animation script - vanishing platforms (SBZ)
00018F66                            ; ---------------------------------------------------------------------------
00018F66 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00018F68 0000                       		dc.w @appear-Ani_Van
00018F6A 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00018F72 00                         		even
00018F72 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00018F7A 00                         		even
00018F7A 00                         		even
00018F7A                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00018F7A                            ; ---------------------------------------------------------------------------
00018F7A                            ; Sprite mappings - vanishing platforms	(SBZ)
00018F7A                            ; ---------------------------------------------------------------------------
00018F7A                            Map_VanP_internal:
00018F7A 0000                       		dc.w @whole-Map_VanP_internal
00018F7C 0000                       		dc.w @half-Map_VanP_internal
00018F7E 0000                       		dc.w @quarter-Map_VanP_internal
00018F80 0000                       		dc.w @gone-Map_VanP_internal
00018F82 01                         @whole:		dc.b 1
00018F83 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018F88 01                         @half:		dc.b 1
00018F89 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018F8E 01                         @quarter:	dc.b 1
00018F8F F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00018F94 00                         @gone:		dc.b 0
00018F96 00                         		even
00018F96 00                         		even
00018F96                            		include	"_incObj\6E Electrocuter.asm"
00018F96                            ; ---------------------------------------------------------------------------
00018F96                            ; Object 6E - electrocution orbs (SBZ)
00018F96                            ; ---------------------------------------------------------------------------
00018F96                            
00018F96                            Electro:
00018F96 7000                       		moveq	#0,d0
00018F98 1028 0024                  		move.b	obRoutine(a0),d0
00018F9C 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00018FA0 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00018FA4                            ; ===========================================================================
00018FA4 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00018FA6 0000                       		dc.w Elec_Shock-Elec_Index
00018FA8                            
00018FA8 =00000034                  elec_freq:	equ $34		; frequency
00018FA8                            ; ===========================================================================
00018FA8                            
00018FA8                            Elec_Main:	; Routine 0
00018FA8 5428 0024                  		addq.b	#2,obRoutine(a0)
00018FAC 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00018FB4 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00018FBA 0028 0004 0001             		ori.b	#4,obRender(a0)
00018FC0 117C 0028 0014             		move.b	#$28,obActWid(a0)
00018FC6 7000                       		moveq	#0,d0
00018FC8 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00018FCC E948                       		lsl.w	#4,d0		; multiply by $10
00018FCE 5340                       		subq.w	#1,d0
00018FD0 3140 0034                  		move.w	d0,elec_freq(a0)
00018FD4                            
00018FD4                            Elec_Shock:	; Routine 2
00018FD4 3038 FE04                  		move.w	(v_framecount).w,d0
00018FD8 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00018FDC 6600                       		bne.s	@animate	; if not, branch
00018FDE                            
00018FDE 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00018FE4 4A28 0001                  		tst.b	obRender(a0)
00018FE8 6A00                       		bpl.s	@animate
00018FF4                            
00018FF4                            	@animate:
00018FF4 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00018FFA 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00019000 117C 0000 0020             		move.b	#0,obColType(a0)
00019006 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
0001900C 6600                       		bne.s	@display	; if not, branch
0001900E 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019014                            
00019014                            	@display:
00019014 6000 865E                  		bra.w	RememberState
00019014 6000 865E                  		bra.w	RememberState
00019018                            		include	"_anim\Electrocuter.asm"
00019018                            ; ---------------------------------------------------------------------------
00019018                            ; Animation script - electrocution orbs (SBZ)
00019018                            ; ---------------------------------------------------------------------------
00019018 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
0001901A 0000                       		dc.w byte_161D0-Ani_Elec
0001901C 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019020 00                         		even
00019020 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019030                            		even
00019030                            		even
00019030                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019030                            ; --------------------------------------------------------------------------------
00019030                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019030                            ; --------------------------------------------------------------------------------
00019030                            
00019030                            SME_KiF9w:	
00019030 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019034 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019038 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
0001903C 02                         SME_KiF9w_C:	dc.b 2	
0001903D F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019042 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019047 03                         SME_KiF9w_17:	dc.b 3	
00019048 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001904D F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019052 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019057 05                         SME_KiF9w_27:	dc.b 5	
00019058 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001905D F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019062 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019067 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001906C F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019071 04                         SME_KiF9w_41:	dc.b 4	
00019072 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019077 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001907C F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019081 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019086 06                         SME_KiF9w_56:	dc.b 6	
00019087 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001908C 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019091 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019096 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
0001909B F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
000190A0 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
000190A5 04                         SME_KiF9w_75:	dc.b 4	
000190A6 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000190AB 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190B0 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
000190B5 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
000190BA                            		even
000190BA                            		even
000190BA                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
000190BA                            ; ---------------------------------------------------------------------------
000190BA                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000190BA                            ; ---------------------------------------------------------------------------
000190BA                            
000190BA                            SpinConvey:
000190BA 7000                       		moveq	#0,d0
000190BC 1028 0024                  		move.b	obRoutine(a0),d0
000190C0 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
000190C4 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
000190E4                            
000190E4                            SpinC_Display:
000190E4 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
000190EA                            ; ===========================================================================
000190EA                            
000190EA                            loc_1629A:
000190EA 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000190F0 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000190F2 0C40 FF80                  		cmpi.w	#-$80,d0
000190F6 64EC                       		bcc.s	SpinC_Display
000190F8                            
000190F8                            SpinC_Act1or2:
000190F8 1028 002F                  		move.b	$2F(a0),d0
000190FC 6A00                       		bpl.s	SpinC_Delete
000190FE 0240 007F                  		andi.w	#$7F,d0
00019102 45F8 F7C1                  		lea	(v_obj63).w,a2
00019106 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001910C                            
0001910C                            SpinC_Delete:
0001910C 4EF9 0000 F73E             		jmp	(DeleteObject).l
00019112                            ; ===========================================================================
00019112 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019114 0000                       		dc.w loc_163D8-SpinC_Index
00019116                            ; ===========================================================================
00019116                            
00019116                            SpinC_Main:	; Routine 0
00019116 1028 0028                  		move.b	obSubtype(a0),d0
0001911A 6B00 0000                  		bmi.w	loc_16380
0001911E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019122 217C 0001 878A 0004        		move.l	#Map_Spin,obMap(a0)
0001912A 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019130 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019136 0028 0004 0001             		ori.b	#4,obRender(a0)
0001913C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019142 7000                       		moveq	#0,d0
00019144 1028 0028                  		move.b	obSubtype(a0),d0
00019148 3200                       		move.w	d0,d1
0001914A E648                       		lsr.w	#3,d0
0001914C 0240 001E                  		andi.w	#$1E,d0
00019150 45FA 0000                  		lea	off_164A6(pc),a2
00019154 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019158 315A 0038                  		move.w	(a2)+,$38(a0)
0001915C 315A 0030                  		move.w	(a2)+,$30(a0)
00019160 214A 003C                  		move.l	a2,$3C(a0)
00019164 0241 000F                  		andi.w	#$F,d1
00019168 E549                       		lsl.w	#2,d1
0001916A 1141 0038                  		move.b	d1,$38(a0)
0001916E 117C 0004 003A             		move.b	#4,$3A(a0)
00019174 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019178 6700                       		beq.s	loc_16356
0001917A 117C 0001 003B             		move.b	#1,$3B(a0)
00019180 4428 003A                  		neg.b	$3A(a0)
00019184 7200                       		moveq	#0,d1
00019186 1228 0038                  		move.b	$38(a0),d1
0001918A D228 003A                  		add.b	$3A(a0),d1
0001918E B228 0039                  		cmp.b	$39(a0),d1
00019192 6500                       		bcs.s	loc_16352
00019194 1001                       		move.b	d1,d0
00019196 7200                       		moveq	#0,d1
00019198 4A00                       		tst.b	d0
0001919A 6A00                       		bpl.s	loc_16352
0001919C 1228 0039                  		move.b	$39(a0),d1
000191A0 5901                       		subq.b	#4,d1
000191A2                            
000191A2                            loc_16352:
000191A2 1141 0038                  		move.b	d1,$38(a0)
000191A6                            
000191A6                            loc_16356:
000191A6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000191AC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000191B2 4A41                       		tst.w	d1
000191B4 6600                       		bne.s	loc_1636C
000191B6 117C 0001 001C             		move.b	#1,obAnim(a0)
000191BC                            
000191BC                            loc_1636C:
000191BC 0C41 0008                  		cmpi.w	#8,d1
000191C0 6600                       		bne.s	loc_16378
000191C2 117C 0000 001C             		move.b	#0,obAnim(a0)
000191C8                            
000191C8                            loc_16378:
000191C8 6100 B522                  		bsr.w	LCon_ChangeDir
000191CC 6000 0000                  		bra.w	loc_163D8
000191D0                            ; ===========================================================================
000191D0                            
000191D0                            loc_16380:
000191D0 1140 002F                  		move.b	d0,$2F(a0)
000191D4 0240 007F                  		andi.w	#$7F,d0
000191D8 45F8 F7C1                  		lea	(v_obj63).w,a2
000191DC 08F2 0000 0000             		bset	#0,(a2,d0.w)
000191E2 6700                       		beq.s	loc_1639A
000191E4 4EF9 0000 F73E             		jmp	(DeleteObject).l
000191EA                            ; ===========================================================================
000191EA                            
000191EA                            loc_1639A:
000191EA D040                       		add.w	d0,d0
000191EC 0240 001E                  		andi.w	#$1E,d0
000191F0 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000191F4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000191FA D4F2 0000                  		adda.w	(a2,d0.w),a2
000191FE 321A                       		move.w	(a2)+,d1
00019200 2248                       		movea.l	a0,a1
00019202 6000                       		bra.s	SpinC_LoadPform
00019204                            ; ===========================================================================
00019204                            
00019204                            SpinC_Loop:
00019204 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001920A 6600                       		bne.s	loc_163D0
0001920C                            
0001920C                            SpinC_LoadPform:
0001920C 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019210 335A 0008                  		move.w	(a2)+,obX(a1)
00019214 335A 000C                  		move.w	(a2)+,obY(a1)
00019218 301A                       		move.w	(a2)+,d0
0001921A 1340 0028                  		move.b	d0,obSubtype(a1)
0001921E                            
0001921E                            loc_163D0:
0001921E 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019222                            
00019222 588F                       		addq.l	#4,sp
00019224 4E75                       		rts	
00019226                            ; ===========================================================================
00019226                            
00019226                            loc_163D8:	; Routine 2
00019226 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
0001922C 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
00019232 4A28 001A                  		tst.b	obFrame(a0)
00019236 6600                       		bne.s	loc_16404
00019238 3F28 0008                  		move.w	obX(a0),-(sp)
0001923C 6100 0000                  		bsr.w	loc_16424
00019240 323C 001B                  		move.w	#$1B,d1
00019244 343C 0007                  		move.w	#7,d2
00019248 3602                       		move.w	d2,d3
0001924A 5243                       		addq.w	#1,d3
0001924C 381F                       		move.w	(sp)+,d4
0001924E 6000 88BC                  		bra.w	SolidObject
00019252                            ; ===========================================================================
00019252                            
00019252                            loc_16404:
00019252 0828 0003 0022             		btst	#3,obStatus(a0)
00019258 6700                       		beq.s	loc_16420
0001925A 43F8 D000                  		lea	(v_objspace).w,a1
0001925E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019264 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001926A 4228 0025                  		clr.b	obSolid(a0)
0001926E                            
0001926E                            loc_16420:
0001926E 6000 0000                  		bra.w	loc_16424
00019272                            
00019272                            loc_16424:
00019272 3028 0008                  		move.w	obX(a0),d0
00019276 B068 0034                  		cmp.w	$34(a0),d0
0001927A 6600                       		bne.s	loc_16484
0001927C 3028 000C                  		move.w	obY(a0),d0
00019280 B068 0036                  		cmp.w	$36(a0),d0
00019284 6600                       		bne.s	loc_16484
00019286 7200                       		moveq	#0,d1
00019288 1228 0038                  		move.b	$38(a0),d1
0001928C D228 003A                  		add.b	$3A(a0),d1
00019290 B228 0039                  		cmp.b	$39(a0),d1
00019294 6500                       		bcs.s	loc_16456
00019296 1001                       		move.b	d1,d0
00019298 7200                       		moveq	#0,d1
0001929A 4A00                       		tst.b	d0
0001929C 6A00                       		bpl.s	loc_16456
0001929E 1228 0039                  		move.b	$39(a0),d1
000192A2 5901                       		subq.b	#4,d1
000192A4                            
000192A4                            loc_16456:
000192A4 1141 0038                  		move.b	d1,$38(a0)
000192A8 2268 003C                  		movea.l	$3C(a0),a1
000192AC 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000192B2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000192B8 4A41                       		tst.w	d1
000192BA 6600                       		bne.s	loc_16474
000192BC 117C 0001 001C             		move.b	#1,obAnim(a0)
000192C2                            
000192C2                            loc_16474:
000192C2 0C41 0008                  		cmpi.w	#8,d1
000192C6 6600                       		bne.s	loc_16480
000192C8 117C 0000 001C             		move.b	#0,obAnim(a0)
000192CE                            
000192CE                            loc_16480:
000192CE 6100 B41C                  		bsr.w	LCon_ChangeDir
000192D2                            
000192D2                            loc_16484:
000192D2 4EF9 0000 F6EA             		jmp	(SpeedToPos).l
000192D2 4EF9 0000 F6EA             		jmp	(SpeedToPos).l
000192D8                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
000192D8                            ; ---------------------------------------------------------------------------
000192D8                            ; Animation script - platform on conveyor belt (SBZ)
000192D8                            ; ---------------------------------------------------------------------------
000192D8 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
000192DA 0000                       		dc.w @still-Ani_SpinConvey
000192DC 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000192E9 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000192F0 00                         		even
000192F0 0F00 FF                    @still:		dc.b $F, 0, afEnd
000192F4 00                         		even
000192F4 00                         		even
000192F4                            
000192F4 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000192FA 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019300 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00019314 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019328 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001933C 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019350 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019364 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019378                            ; ===========================================================================
00019378                            
00019378                            		include	"_incObj\70 Girder Block.asm"
00019378                            ; ---------------------------------------------------------------------------
00019378                            ; Object 70 - large girder block (SBZ)
00019378                            ; ---------------------------------------------------------------------------
00019378                            
00019378                            Girder:
00019378 7000                       		moveq	#0,d0
0001937A 1028 0024                  		move.b	obRoutine(a0),d0
0001937E 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019382 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019386                            ; ===========================================================================
00019386 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019388 0000                       		dc.w Gird_Action-Gird_Index
0001938A                            
0001938A =00000016                  gird_height:	equ $16
0001938A =00000032                  gird_origX:	equ $32		; original x-axis position
0001938A =00000030                  gird_origY:	equ $30		; original y-axis position
0001938A =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001938A =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001938A =0000003A                  gird_delay:	equ $3A		; delay for movement
0001938A                            ; ===========================================================================
0001938A                            
0001938A                            Gird_Main:	; Routine 0
0001938A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001938E 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019396 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001939C 0028 0004 0001             		ori.b	#4,obRender(a0)
000193A2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000193A8 117C 0060 0014             		move.b	#$60,obActWid(a0)
000193AE 117C 0018 0016             		move.b	#$18,gird_height(a0)
000193B4 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
000193BA 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
000193C0 6100 0000                  		bsr.w	Gird_ChgMove
000193C4                            
000193C4                            Gird_Action:	; Routine 2
000193C4 3F28 0008                  		move.w	obX(a0),-(sp)
000193C8 4A68 003A                  		tst.w	gird_delay(a0)
000193CC 6700                       		beq.s	@beginmove
000193CE 5368 003A                  		subq.w	#1,gird_delay(a0)
000193D2 6600                       		bne.s	@solid
000193D4                            
000193D4                            	@beginmove:
000193D4 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
000193DA 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
000193DE 6600                       		bne.s	@solid		; if time remains, branch
000193E0 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
000193E4                            
000193E4                            	@solid:
000193E4 381F                       		move.w	(sp)+,d4
000193E6 4A28 0001                  		tst.b	obRender(a0)
000193EA 6A00                       		bpl.s	@chkdel
000193EC 7200                       		moveq	#0,d1
000193EE 1228 0014                  		move.b	obActWid(a0),d1
000193F2 0641 000B                  		addi.w	#$B,d1
000193F6 7400                       		moveq	#0,d2
000193F8 1428 0016                  		move.b	gird_height(a0),d2
000193FC 3602                       		move.w	d2,d3
000193FE 5243                       		addq.w	#1,d3
00019400 6100 870A                  		bsr.w	SolidObject
00019404                            
00019404                            	@chkdel:
00019420 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00019426                            
00019426                            	@delete:
00019426 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001942C                            ; ===========================================================================
0001942C                            
0001942C                            Gird_ChgMove:
0001942C 1028 0038                  		move.b	gird_set(a0),d0
00019430 0240 0018                  		andi.w	#$18,d0
00019434 43F9 0000 0000             		lea	(@settings).l,a1
0001943A 43F1 0000                  		lea	(a1,d0.w),a1
0001943E 3159 0010                  		move.w	(a1)+,obVelX(a0)
00019442 3159 0012                  		move.w	(a1)+,obVelY(a0)
00019446 3159 0034                  		move.w	(a1)+,gird_time(a0)
0001944A 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001944E 317C 0007 003A             		move.w	#7,gird_delay(a0)
00019454 4E75                       		rts	
00019456                            ; ===========================================================================
00019456                            @settings:	;   x-speed, y-speed, duration
00019456 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001945E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019466 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001946E 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001946E 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019476                            Map_Gird:	include	"_maps\Girder Block.asm"
00019476                            ; ---------------------------------------------------------------------------
00019476                            ; Sprite mappings - large girder block (SBZ)
00019476                            ; ---------------------------------------------------------------------------
00019476                            Map_Gird_internal:
00019476 0000                       		dc.w @girder-Map_Gird_internal
00019478 0C                         @girder:	dc.b $C
00019479 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001947E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019483 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019488 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001948D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019492 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019497 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001949C 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000194A1 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000194A6 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000194AB E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000194B0 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000194B6 00                         		even
000194B6 00                         		even
000194B6                            		include	"_incObj\72 Teleporter.asm"
000194B6                            ; ---------------------------------------------------------------------------
000194B6                            ; Object 72 - teleporter (SBZ)
000194B6                            ; ---------------------------------------------------------------------------
000194B6                            
000194B6                            Teleport:
000194B6 7000                       		moveq	#0,d0
000194B8 1028 0024                  		move.b	obRoutine(a0),d0
000194BC 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
000194C0 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
000194E0 4E75                       		rts	
000194E2                            
000194E2                            	@delete:
000194E2 4EF9 0000 F73E             		jmp	(DeleteObject).l
000194E8                            ; ===========================================================================
000194E8 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
000194EA 0000                       		dc.w loc_166C8-Tele_Index
000194EC 0000                       		dc.w loc_1675E-Tele_Index
000194EE 0000                       		dc.w loc_16798-Tele_Index
000194F0                            ; ===========================================================================
000194F0                            
000194F0                            Tele_Main:	; Routine 0
000194F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000194F4 1028 0028                  		move.b	obSubtype(a0),d0
000194F8 D040                       		add.w	d0,d0
000194FA 0240 001E                  		andi.w	#$1E,d0
000194FE 45FA 0000                  		lea	Tele_Data(pc),a2
00019502 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019506 315A 003A                  		move.w	(a2)+,$3A(a0)
0001950A 214A 003C                  		move.l	a2,$3C(a0)
0001950E 315A 0036                  		move.w	(a2)+,$36(a0)
00019512 315A 0038                  		move.w	(a2)+,$38(a0)
00019516                            
00019516                            loc_166C8:	; Routine 2
00019516 43F8 D000                  		lea	(v_player).w,a1
0001951A 3029 0008                  		move.w	obX(a1),d0
0001951E 9068 0008                  		sub.w	obX(a0),d0
00019522 0828 0000 0022             		btst	#0,obStatus(a0)
00019528 6700                       		beq.s	loc_166E0
0001952A 0640 000F                  		addi.w	#$F,d0
0001952E                            
0001952E                            loc_166E0:
0001952E 0C40 0010                  		cmpi.w	#$10,d0
00019532 6400                       		bcc.s	locret_1675C
00019534 3229 000C                  		move.w	obY(a1),d1
00019538 9268 000C                  		sub.w	obY(a0),d1
0001953C 0641 0020                  		addi.w	#$20,d1
00019540 0C41 0040                  		cmpi.w	#$40,d1
00019544 6400                       		bcc.s	locret_1675C
00019546 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001954A 6600                       		bne.s	locret_1675C
0001954C 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
00019552 6600                       		bne.s	loc_1670E
00019554 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001955A 6500                       		bcs.s	locret_1675C
0001955C                            
0001955C                            loc_1670E:
0001955C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019560 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00019566 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001956C 337C 0800 0020             		move.w	#$800,obInertia(a1)
00019572 337C 0000 0010             		move.w	#0,obVelX(a1)
00019578 337C 0000 0012             		move.w	#0,obVelY(a1)
0001957E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019584 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001958A 08E9 0001 0022             		bset	#1,obStatus(a1)
00019590 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019596 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001959C 4228 0032                  		clr.b	$32(a0)
000195AA                            
000195AA                            locret_1675C:
000195AA 4E75                       		rts	
000195AC                            ; ===========================================================================
000195AC                            
000195AC                            loc_1675E:	; Routine 4
000195AC 43F8 D000                  		lea	(v_player).w,a1
000195B0 1028 0032                  		move.b	$32(a0),d0
000195B4 5428 0032                  		addq.b	#2,$32(a0)
000195B8 4EB9 0000 37AE             		jsr	(CalcSine).l
000195BE EA40                       		asr.w	#5,d0
000195C0 3428 000C                  		move.w	obY(a0),d2
000195C4 9440                       		sub.w	d0,d2
000195C6 3342 000C                  		move.w	d2,obY(a1)
000195CA 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000195D0 6600                       		bne.s	locret_16796
000195D2 6100 0000                  		bsr.w	sub_1681C
000195D6 5428 0024                  		addq.b	#2,obRoutine(a0)
000195E4                            
000195E4                            locret_16796:
000195E4 4E75                       		rts	
000195E6                            ; ===========================================================================
000195E6                            
000195E6                            loc_16798:	; Routine 6
000195E6 588F                       		addq.l	#4,sp
000195E8 43F8 D000                  		lea	(v_player).w,a1
000195EC 5328 002E                  		subq.b	#1,$2E(a0)
000195F0 6A00                       		bpl.s	loc_167DA
000195F2 3368 0036 0008             		move.w	$36(a0),obX(a1)
000195F8 3368 0038 000C             		move.w	$38(a0),obY(a1)
000195FE 7200                       		moveq	#0,d1
00019600 1228 003A                  		move.b	$3A(a0),d1
00019604 5801                       		addq.b	#4,d1
00019606 B228 003B                  		cmp.b	$3B(a0),d1
0001960A 6500                       		bcs.s	loc_167C2
0001960C 7200                       		moveq	#0,d1
0001960E 6000                       		bra.s	loc_16800
00019610                            ; ===========================================================================
00019610                            
00019610                            loc_167C2:
00019610 1141 003A                  		move.b	d1,$3A(a0)
00019614 2468 003C                  		movea.l	$3C(a0),a2
00019618 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001961E 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00019624 6000 0000                  		bra.w	sub_1681C
00019628                            ; ===========================================================================
00019628                            
00019628                            loc_167DA:
00019628 2429 0008                  		move.l	obX(a1),d2
0001962C 2629 000C                  		move.l	obY(a1),d3
00019630 3029 0010                  		move.w	obVelX(a1),d0
00019634 48C0                       		ext.l	d0
00019636 E180                       		asl.l	#8,d0
00019638 D480                       		add.l	d0,d2
0001963A 3029 0012                  		move.w	obVelY(a1),d0
0001963E 48C0                       		ext.l	d0
00019640 E180                       		asl.l	#8,d0
00019642 D680                       		add.l	d0,d3
00019644 2342 0008                  		move.l	d2,obX(a1)
00019648 2343 000C                  		move.l	d3,obY(a1)
0001964C 4E75                       		rts	
0001964E                            ; ===========================================================================
0001964E                            
0001964E                            loc_16800:
0001964E 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
00019654 4228 0024                  		clr.b	obRoutine(a0)
00019658 4238 F7C8                  		clr.b	(f_lockmulti).w
0001965C 337C 0000 0010             		move.w	#0,obVelX(a1)
00019662 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019668 4E75                       		rts	
0001966A                            
0001966A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001966A                            
0001966A                            
0001966A                            sub_1681C:
0001966A 7000                       		moveq	#0,d0
0001966C 343C 1000                  		move.w	#$1000,d2
00019670 3028 0036                  		move.w	$36(a0),d0
00019674 9069 0008                  		sub.w	obX(a1),d0
00019678 6C00                       		bge.s	loc_16830
0001967A 4440                       		neg.w	d0
0001967C 4442                       		neg.w	d2
0001967E                            
0001967E                            loc_16830:
0001967E 7200                       		moveq	#0,d1
00019680 363C 1000                  		move.w	#$1000,d3
00019684 3228 0038                  		move.w	$38(a0),d1
00019688 9269 000C                  		sub.w	obY(a1),d1
0001968C 6C00                       		bge.s	loc_16844
0001968E 4441                       		neg.w	d1
00019690 4443                       		neg.w	d3
00019692                            
00019692                            loc_16844:
00019692 B240                       		cmp.w	d0,d1
00019694 6500                       		bcs.s	loc_1687A
00019696 7200                       		moveq	#0,d1
00019698 3228 0038                  		move.w	$38(a0),d1
0001969C 9269 000C                  		sub.w	obY(a1),d1
000196A0 4841                       		swap	d1
000196A2 83C3                       		divs.w	d3,d1
000196A4 7000                       		moveq	#0,d0
000196A6 3028 0036                  		move.w	$36(a0),d0
000196AA 9069 0008                  		sub.w	obX(a1),d0
000196AE 6700                       		beq.s	loc_16866
000196B0 4840                       		swap	d0
000196B2 81C1                       		divs.w	d1,d0
000196B4                            
000196B4                            loc_16866:
000196B4 3340 0010                  		move.w	d0,obVelX(a1)
000196B8 3343 0012                  		move.w	d3,obVelY(a1)
000196BC 4A41                       		tst.w	d1
000196BE 6A00                       		bpl.s	loc_16874
000196C0 4441                       		neg.w	d1
000196C2                            
000196C2                            loc_16874:
000196C2 3141 002E                  		move.w	d1,$2E(a0)
000196C6 4E75                       		rts	
000196C8                            ; ===========================================================================
000196C8                            
000196C8                            loc_1687A:
000196C8 7000                       		moveq	#0,d0
000196CA 3028 0036                  		move.w	$36(a0),d0
000196CE 9069 0008                  		sub.w	obX(a1),d0
000196D2 4840                       		swap	d0
000196D4 81C2                       		divs.w	d2,d0
000196D6 7200                       		moveq	#0,d1
000196D8 3228 0038                  		move.w	$38(a0),d1
000196DC 9269 000C                  		sub.w	obY(a1),d1
000196E0 6700                       		beq.s	loc_16898
000196E2 4841                       		swap	d1
000196E4 83C0                       		divs.w	d0,d1
000196E6                            
000196E6                            loc_16898:
000196E6 3341 0012                  		move.w	d1,obVelY(a1)
000196EA 3342 0010                  		move.w	d2,obVelX(a1)
000196EE 4A40                       		tst.w	d0
000196F0 6A00                       		bpl.s	loc_168A6
000196F2 4440                       		neg.w	d0
000196F4                            
000196F4                            loc_168A6:
000196F4 3140 002E                  		move.w	d0,$2E(a0)
000196F8 4E75                       		rts	
000196FA                            ; End of function sub_1681C
000196FA                            
000196FA                            ; ===========================================================================
000196FA 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00019700 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019706 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
0001970A 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019710 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
00019716 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001971C 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019722 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019728 0884 0298 0894             		dc.w $884, $298, $894
0001972E 0270 0894 0190             		dc.w $270, $894, $190
00019734 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001973A 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00019740 1184 0498 1158             		dc.w $1184, $498, $1158
00019746 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001974C 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019752 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019758 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001975E 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019764 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001976A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019770 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019776 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001977C 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001977C 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019782                            
00019782                            		include	"_incObj\78 Caterkiller.asm"
00019782                            ; ---------------------------------------------------------------------------
00019782                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019782                            ; ---------------------------------------------------------------------------
00019782                            
00019782                            Caterkiller:
00019782 7000                       		moveq	#0,d0
00019784 1028 0024                  		move.b	obRoutine(a0),d0
00019788 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001978C 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019790                            ; ===========================================================================
00019790 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019792 0000                       		dc.w Cat_Head-Cat_Index
00019794 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019796 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019798 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001979A 0000                       		dc.w Cat_Delete-Cat_Index
0001979C 0000                       		dc.w loc_16CC0-Cat_Index
0001979E                            
0001979E =0000003C                  cat_parent:	equ $3C		; address of parent object
0001979E                            ; ===========================================================================
0001979E                            
0001979E                            locret_16950:
0001979E 4E75                       		rts	
000197A0                            ; ===========================================================================
000197A0                            
000197A0                            Cat_Main:	; Routine 0
000197A0 117C 0007 0016             		move.b	#7,obHeight(a0)
000197A6 117C 0008 0017             		move.b	#8,obWidth(a0)
000197AC 4EB9 0000 F6B2             		jsr	(ObjectFall).l
000197B2 4EB9 0001 7C68             		jsr	(ObjFloorDist).l
000197B8 4A41                       		tst.w	d1
000197BA 6AE2                       		bpl.s	locret_16950
000197BC D368 000C                  		add.w	d1,obY(a0)
000197C0 4268 0012                  		clr.w	obVelY(a0)
000197C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000197C8 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
000197D0 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
000197D6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
000197DC 6700                       		beq.s	@isscrapbrain
000197DE 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
000197E4                            
000197E4                            	@isscrapbrain:
000197E4 0228 0003 0001             		andi.b	#3,obRender(a0)
000197EA 0028 0004 0001             		ori.b	#4,obRender(a0)
000197F0 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
000197F6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000197FC 117C 0008 0014             		move.b	#8,obActWid(a0)
00019802 117C 000B 0020             		move.b	#$B,obColType(a0)
00019808 3428 0008                  		move.w	obX(a0),d2
0001980C 7A0C                       		moveq	#$C,d5
0001980E 0828 0000 0022             		btst	#0,obStatus(a0)
00019814 6700                       		beq.s	@noflip
00019816 4445                       		neg.w	d5
00019818                            
00019818                            	@noflip:
00019818 1C3C 0004                  		move.b	#4,d6
0001981C 7600                       		moveq	#0,d3
0001981E 7804                       		moveq	#4,d4
00019820 2448                       		movea.l	a0,a2
00019822 7202                       		moveq	#2,d1
00019824                            
00019824                            Cat_Loop:
00019824 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001982A 6600 0000                  			bne.w	Cat_ChkGone
0001982E 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019832 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019836 5406                       		addq.b	#2,d6		; alternate between the two
00019838 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001983E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019844 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001984A 137C 0008 0014             		move.b	#8,obActWid(a1)
00019850 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019856 D445                       		add.w	d5,d2
00019858 3342 0008                  		move.w	d2,obX(a1)
0001985C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019862 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019868 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001986E 137C 0008 001A             		move.b	#8,obFrame(a1)
00019874 234A 003C                  		move.l	a2,cat_parent(a1)
00019878 1344 003C                  		move.b	d4,cat_parent(a1)
0001987C 5804                       		addq.b	#4,d4
0001987E 2449                       		movea.l	a1,a2
00019880                            
00019880                            	@fail:
00019880 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019884                            
00019884 117C 0007 002A             		move.b	#7,$2A(a0)
0001988A 4228 003C                  		clr.b	cat_parent(a0)
0001988E                            
0001988E                            Cat_Head:	; Routine 2
0001988E 4A28 0022                  		tst.b	obStatus(a0)
00019892 6B00 0000                  		bmi.w	loc_16C96
00019896 7000                       		moveq	#0,d0
00019898 1028 0025                  		move.b	ob2ndRout(a0),d0
0001989C 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
000198A0 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
000198A4 1228 002B                  		move.b	$2B(a0),d1
000198A8 6A00                       		bpl.s	@display
000198AA 43F9 0000 0000             		lea	(Ani_Cat).l,a1
000198B0 1028 0026                  		move.b	obAngle(a0),d0
000198B4 0240 007F                  		andi.w	#$7F,d0
000198B8 5828 0026                  		addq.b	#4,obAngle(a0)
000198BC 1031 0000                  		move.b	(a1,d0.w),d0
000198C0 6A00                       		bpl.s	@animate
000198C2 08A8 0007 002B             		bclr	#7,$2B(a0)
000198C8 6000                       		bra.s	@display
000198CA                            
000198CA                            	@animate:
000198CA 0201 0010                  		andi.b	#$10,d1
000198CE D001                       		add.b	d1,d0
000198D0 1140 001A                  		move.b	d0,obFrame(a0)
000198D4                            
000198D4                            	@display:
000198F2 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
000198F8                            
000198F8                            	Cat_ChkGone:
000198F8 45F8 FC00                  		lea	(v_objstate).w,a2
000198FC 7000                       		moveq	#0,d0
000198FE 1028 0023                  		move.b	obRespawnNo(a0),d0
00019902 6700                       		beq.s	@delete
00019904 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001990A                            
0001990A                            	@delete:
0001990A 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019910 4E75                       		rts	
00019912                            ; ===========================================================================
00019912                            
00019912                            Cat_Delete:	; Routine $A
00019912 4EF9 0000 F73E             		jmp	(DeleteObject).l
00019918                            ; ===========================================================================
00019918 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001991A 0000                       		dc.w loc_16B02-Cat_Index2
0001991C                            ; ===========================================================================
0001991C                            
0001991C                            @wait:
0001991C 5328 002A                  		subq.b	#1,$2A(a0)
00019920 6B00                       		bmi.s	@move
00019922 4E75                       		rts	
00019924                            ; ===========================================================================
00019924                            
00019924                            @move:
00019924 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019928 117C 0010 002A             		move.b	#$10,$2A(a0)
0001992E 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019934 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001993A 0868 0004 002B             		bchg	#4,$2B(a0)
00019940 6600                       		bne.s	loc_16AFC
00019942 4268 0010                  		clr.w	obVelX(a0)
00019946 4468 001C                  		neg.w	obAnim(a0)
0001994A                            
0001994A                            loc_16AFC:
0001994A 08E8 0007 002B             		bset	#7,$2B(a0)
00019950                            
00019950                            loc_16B02:
00019950 5328 002A                  		subq.b	#1,$2A(a0)
00019954 6B00                       		bmi.s	@loc_16B5E
00019956 4A68 0010                  			tst.w	obVelX(a0)
0001995A 6700                       			beq.s	@notmoving
0001995C 2428 0008                  			move.l	obX(a0),d2
00019960 2602                       			move.l	d2,d3
00019962 3028 0010                  		move.w	obVelX(a0),d0
00019966 0828 0000 0022             		btst	#0,obStatus(a0)
0001996C 6700                       		beq.s	@noflip
0001996E 4440                       		neg.w	d0
00019970                            
00019970                            	@noflip:
00019970 48C0                       		ext.l	d0
00019972 E180                       		asl.l	#8,d0
00019974 D480                       		add.l	d0,d2
00019976 2142 0008                  		move.l	d2,obX(a0)
0001997A 4843                       			swap	d3
0001997C B668 0008                  			cmp.w	obX(a0),d3
00019980 6700                       			beq.s	@notmoving
00019982 4EB9 0001 7C68             			jsr	(ObjFloorDist).l
00019988 0C41 FFF8                  			cmpi.w	#-8,d1
0001998C 6D00                       			blt.s	@loc_16B70
0001998E 0C41 000C                  			cmpi.w	#$C,d1
00019992 6C00                       			bge.s	@loc_16B70
00019994 D368 000C                  			add.w	d1,obY(a0)
00019998 7000                       		moveq	#0,d0
0001999A 1028 003C                  		move.b	cat_parent(a0),d0
0001999E 5228 003C                  		addq.b	#1,cat_parent(a0)
000199A2 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
000199A8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000199AC                            
000199AC                            	@notmoving:
000199AC 4E75                       		rts	
000199AE                            ; ===========================================================================
000199AE                            
000199AE                            @loc_16B5E:
000199AE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000199B2 117C 0007 002A             		move.b	#7,$2A(a0)
000199B8 4268 0010                  			clr.w	obVelX(a0)
000199BC 4268 001C                  			clr.w	obAnim(a0)
000199C0 4E75                       		rts	
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            @loc_16B70:
000199C2 7000                       			moveq	#0,d0
000199C4 1028 003C                  			move.b	cat_parent(a0),d0
000199C8 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
000199CE 4468 000A                  			neg.w	obX+2(a0)
000199D2 6700                       			beq.s	@loc_1730A
000199D4 0828 0000 0022             			btst	#0,obStatus(a0)
000199DA 6700                       			beq.s	@loc_1730A
000199DC 5368 0008                  			subq.w	#1,obX(a0)
000199E0 5228 003C                  			addq.b	#1,cat_parent(a0)
000199E4 7000                       			moveq	#0,d0
000199E6 1028 003C                  			move.b	cat_parent(a0),d0
000199EA 4230 002C                  			clr.b	$2C(a0,d0)
000199EE                            	@loc_1730A:
000199EE 0868 0000 0022             			bchg	#0,obStatus(a0)
000199F4 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
000199FA 5228 003C                  		addq.b	#1,cat_parent(a0)
000199FE 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019A04 4E75                       		rts	
00019A06                            ; ===========================================================================
00019A06                            
00019A06                            Cat_BodySeg2:	; Routine 6
00019A06 2268 003C                  		movea.l	cat_parent(a0),a1
00019A0A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019A10 6A00                       		bpl.s	Cat_BodySeg1
00019A12 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019A18 1028 0026                  		move.b	obAngle(a0),d0
00019A1C 0240 007F                  		andi.w	#$7F,d0
00019A20 5828 0026                  		addq.b	#4,obAngle(a0)
00019A24 4A31 0004                  		tst.b	4(a1,d0.w)
00019A28 6A00                       		bpl.s	Cat_AniBody
00019A2A 5828 0026                  		addq.b	#4,obAngle(a0)
00019A2E                            
00019A2E                            Cat_AniBody:
00019A2E 1031 0000                  		move.b	(a1,d0.w),d0
00019A32 5000                       		addq.b	#8,d0
00019A34 1140 001A                  		move.b	d0,obFrame(a0)
00019A38                            
00019A38                            Cat_BodySeg1:	; Routine 4, 8
00019A38 2268 003C                  		movea.l	cat_parent(a0),a1
00019A3C 4A28 0022                  		tst.b	obStatus(a0)
00019A40 6B00 0000                  		bmi.w	loc_16C90
00019A44 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019A4A 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019A50 6700 0000                  		beq.w	loc_16C64
00019A54 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019A5A 3029 0010                  		move.w	obVelX(a1),d0
00019A5E D068 001C                  			add.w	obAnim(a0),d0
00019A62 3140 0010                  		move.w	d0,obVelX(a0)
00019A66 2428 0008                  		move.l	obX(a0),d2
00019A6A 2602                       		move.l	d2,d3
00019A6C 3028 0010                  		move.w	obVelX(a0),d0
00019A70 0828 0000 0022             		btst	#0,obStatus(a0)
00019A76 6700                       		beq.s	loc_16C0C
00019A78 4440                       		neg.w	d0
00019A7A                            
00019A7A                            loc_16C0C:
00019A7A 48C0                       		ext.l	d0
00019A7C E180                       		asl.l	#8,d0
00019A7E D480                       		add.l	d0,d2
00019A80 2142 0008                  		move.l	d2,obX(a0)
00019A84 4843                       		swap	d3
00019A86 B668 0008                  		cmp.w	obX(a0),d3
00019A8A 6700                       		beq.s	loc_16C64
00019A8C 7000                       		moveq	#0,d0
00019A8E 1028 003C                  		move.b	cat_parent(a0),d0
00019A92 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019A96 0C01 0080                  		cmpi.b	#$80,d1
00019A9A 6600                       		bne.s	loc_16C50
00019A9C 1181 002C                  			move.b	d1,$2C(a0,d0)
00019AA0 4468 000A                  			neg.w	obX+2(a0)
00019AA4 6700                       			beq.s	locj_173E4
00019AA6 0828 0000 0022             			btst	#0,obStatus(a0)
00019AAC 6700                       			beq.s	locj_173E4
00019AAE 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019AB4 6600                       			bne.s	locj_173E4
00019AB6 5368 0008                  			subq.w	#1,obX(a0)
00019ABA 5228 003C                  			addq.b	#1,cat_parent(a0)
00019ABE 7000                       			moveq	#0,d0
00019AC0 1028 003C                  			move.b	cat_parent(a0),d0
00019AC4 4230 002C                  			clr.b	$2C(a0,d0)
00019AC8                            	locj_173E4:
00019AC8 0868 0000 0022             		bchg	#0,obStatus(a0)
00019ACE 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019AD4 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AD8 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019ADE 6000                       		bra.s	loc_16C64
00019AE0                            ; ===========================================================================
00019AE0                            
00019AE0                            loc_16C50:
00019AE0 4881                       		ext.w	d1
00019AE2 D368 000C                  		add.w	d1,obY(a0)
00019AE6 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AEA 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019AF0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019AF4                            
00019AF4                            loc_16C64:
00019AF4 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019AFA 6700                       		beq.s	loc_16C90
00019AFC 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019B00 6700                       		beq.s	loc_16C7C
00019B02 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019B08 6600                       		bne.s	loc_16C82
00019B0A                            
00019B0A                            loc_16C7C:
00019B0A 4229 0020                  		clr.b    $20(a1)
00019B0E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019B14                            
00019B14                            loc_16C82:
00019B14 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00019B1A                            
00019B1A                            ; ===========================================================================
00019B1A FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019B22                            ; ===========================================================================
00019B22                            
00019B22                            loc_16C90:
00019B22 08E9 0007 0022             		bset	#7,obStatus(a1)
00019B28                            
00019B28                            loc_16C96:
00019B28 7000                       		moveq	#0,d0
00019B2A 1028 0024                  		move.b	obRoutine(a0),d0
00019B2E 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019B32 0828 0000 0022             		btst	#0,obStatus(a0)
00019B38 6700                       		beq.s	loc_16CAA
00019B3A 4440                       		neg.w	d0
00019B3C                            
00019B3C                            loc_16CAA:
00019B3C 3140 0010                  		move.w	d0,obVelX(a0)
00019B40 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019B46 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019B4C 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019B52                            
00019B52                            loc_16CC0:	; Routine $C
00019B52 4EB9 0000 F6B2             		jsr	(ObjectFall).l
00019B58 4A68 0012                  		tst.w	obVelY(a0)
00019B5C 6B00                       		bmi.s	loc_16CE0
00019B5E 4EB9 0001 7C68             		jsr	(ObjFloorDist).l
00019B64 4A41                       		tst.w	d1
00019B66 6A00                       		bpl.s	loc_16CE0
00019B68 D368 000C                  		add.w	d1,obY(a0)
00019B6C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019B72                            
00019B72                            loc_16CE0:
00019B72 4A28 0001                  		tst.b	obRender(a0)
00019B76 6A00 FD80                  		bpl.w	Cat_ChkGone
00019B7A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00019B7A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00019B80                            		include	"_anim\Caterkiller.asm"
00019B80                            ; ---------------------------------------------------------------------------
00019B80                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019B80                            ; ---------------------------------------------------------------------------
00019B80 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019B90 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019BA0 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019BB0 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019BC0 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019BD0 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019BE0 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019BF0 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019C00                            		even
00019C00                            		even
00019C00                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019C00                            ; ---------------------------------------------------------------------------
00019C00                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019C00                            ; ---------------------------------------------------------------------------
00019C00                            Map_Cat_internal:
00019C00 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019C02 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019C04 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019C06 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019C08 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019C0A 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019C0C 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019C0E 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019C10 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019C12 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019C14 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019C16 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019C18 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019C1A 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019C1C 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019C1E 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019C20 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019C22 0000                       		dc.w byte_16E04-Map_Cat_internal
00019C24 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019C26 0000                       		dc.w byte_16E10-Map_Cat_internal
00019C28 0000                       		dc.w byte_16E16-Map_Cat_internal
00019C2A 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019C2C 0000                       		dc.w byte_16E22-Map_Cat_internal
00019C2E 0000                       		dc.w byte_16E28-Map_Cat_internal
00019C30 01                         byte_16D9E:	dc.b 1
00019C31 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019C36 01                         byte_16DA4:	dc.b 1
00019C37 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019C3C 01                         byte_16DAA:	dc.b 1
00019C3D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019C42 01                         byte_16DB0:	dc.b 1
00019C43 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019C48 01                         byte_16DB6:	dc.b 1
00019C49 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019C4E 01                         byte_16DBC:	dc.b 1
00019C4F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019C54 01                         byte_16DC2:	dc.b 1
00019C55 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019C5A 01                         byte_16DC8:	dc.b 1
00019C5B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019C60 01                         byte_16DCE:	dc.b 1
00019C61 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019C66 01                         byte_16DD4:	dc.b 1
00019C67 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019C6C 01                         byte_16DDA:	dc.b 1
00019C6D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019C72 01                         byte_16DE0:	dc.b 1
00019C73 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019C78 01                         byte_16DE6:	dc.b 1
00019C79 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019C7E 01                         byte_16DEC:	dc.b 1
00019C7F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019C84 01                         byte_16DF2:	dc.b 1
00019C85 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019C8A 01                         byte_16DF8:	dc.b 1
00019C8B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019C90 01                         byte_16DFE:	dc.b 1
00019C91 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019C96 01                         byte_16E04:	dc.b 1
00019C97 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019C9C 01                         byte_16E0A:	dc.b 1
00019C9D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019CA2 01                         byte_16E10:	dc.b 1
00019CA3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019CA8 01                         byte_16E16:	dc.b 1
00019CA9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019CAE 01                         byte_16E1C:	dc.b 1
00019CAF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019CB4 01                         byte_16E22:	dc.b 1
00019CB5 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019CBA 01                         byte_16E28:	dc.b 1
00019CBB EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019CC0                            		even
00019CC0                            		even
00019CC0                            
00019CC0                            		include	"_incObj\79 Lamppost.asm"
00019CC0                            ; ---------------------------------------------------------------------------
00019CC0                            ; Object 79 - lamppost
00019CC0                            ; ---------------------------------------------------------------------------
00019CC0                            
00019CC0                            Lamppost:
00019CC0 7000                       		moveq	#0,d0
00019CC2 1028 0024                  		move.b	obRoutine(a0),d0
00019CC6 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019CCA 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019CCE 4EF9 0001 1674             		jmp	(RememberState).l
00019CD4                            ; ===========================================================================
00019CD4 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019CD6 0000                       		dc.w Lamp_Blue-Lamp_Index
00019CD8 0000                       		dc.w Lamp_Finish-Lamp_Index
00019CDA 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019CDC                            
00019CDC =00000030                  lamp_origX:	equ $30		; original x-axis position
00019CDC =00000032                  lamp_origY:	equ $32		; original y-axis position
00019CDC =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019CDC                            ; ===========================================================================
00019CDC                            
00019CDC                            Lamp_Main:	; Routine 0
00019CDC 5428 0024                  		addq.b	#2,obRoutine(a0)
00019CE0 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019CE8 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019CEE 117C 0004 0001             		move.b	#4,obRender(a0)
00019CF4 117C 0008 0014             		move.b	#8,obActWid(a0)
00019CFA 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019D00 45F8 FC00                  		lea	(v_objstate).w,a2
00019D04 7000                       		moveq	#0,d0
00019D06 1028 0023                  		move.b	obRespawnNo(a0),d0
00019D0A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019D10 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019D16 6600                       		bne.s	@red
00019D18 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019D1C 0201 007F                  		andi.b	#$7F,d1
00019D20 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019D24 0202 007F                  		andi.b	#$7F,d2
00019D28 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019D2A 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019D2C                            
00019D2C                            @red:
00019D2C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019D32 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019D38 117C 0003 001A             		move.b	#3,obFrame(a0)
00019D3E 4E75                       		rts	
00019D40                            
00019D40                            ; ===========================================================================
00019D40                            
00019D40                            Lamp_Blue:	; Routine 2
00019D40 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019D44 6600 0000                  		bne.w	@donothing	; if yes, branch
00019D48 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019D4C 6B00 0000                  		bmi.w	@donothing
00019D50 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019D54 0201 007F                  		andi.b	#$7F,d1
00019D58 1428 0028                  		move.b	obSubtype(a0),d2
00019D5C 0202 007F                  		andi.b	#$7F,d2
00019D60 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019D62 6500                       		bcs.s	@chkhit		; if yes, branch
00019D64 45F8 FC00                  		lea	(v_objstate).w,a2
00019D68 7000                       		moveq	#0,d0
00019D6A 1028 0023                  		move.b	obRespawnNo(a0),d0
00019D6E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019D74 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019D7A 117C 0003 001A             		move.b	#3,obFrame(a0)
00019D80 6000 0000                  		bra.w	@donothing
00019D84                            ; ===========================================================================
00019D84                            
00019D84                            @chkhit:
00019D84 3038 D008                  		move.w	(v_player+obX).w,d0
00019D88 9068 0008                  		sub.w	obX(a0),d0
00019D8C 5040                       		addq.w	#8,d0
00019D8E 0C40 0010                  		cmpi.w	#$10,d0
00019D92 6400 0000                  		bcc.w	@donothing
00019D96 3038 D00C                  		move.w	(v_player+obY).w,d0
00019D9A 9068 000C                  		sub.w	obY(a0),d0
00019D9E 0640 0040                  		addi.w	#$40,d0
00019DA2 0C40 0068                  		cmpi.w	#$68,d0
00019DA6 6400                       		bcc.s	@donothing
00019DA8                            
00019DB2 5428 0024                  		addq.b	#2,obRoutine(a0)
00019DB6 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
00019DBC 6600                       		bne.s	@fail
00019DBE 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019DC2 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019DC8 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019DCE 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019DD4 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019DDA 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019DE2 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019DE8 137C 0004 0001             		move.b	#4,obRender(a1)
00019DEE 137C 0008 0014             		move.b	#8,obActWid(a1)
00019DF4 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019DFA 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019E00 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019E06                            
00019E06                            	@fail:
00019E06 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019E0C 6100 0000                  		bsr.w	Lamp_StoreInfo
00019E10 45F8 FC00                  		lea	(v_objstate).w,a2
00019E14 7000                       		moveq	#0,d0
00019E16 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E1A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E20                            
00019E20                            	@donothing:
00019E20 4E75                       		rts	
00019E22                            ; ===========================================================================
00019E22                            
00019E22                            Lamp_Finish:	; Routine 4	
00019E22 4E75                       		rts	
00019E24                            ; ===========================================================================
00019E24                            
00019E24                            Lamp_Twirl:	; Routine 6
00019E24 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019E28 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019E2A 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019E30                            
00019E30                            	@continue:
00019E30 1028 0026                  		move.b	obAngle(a0),d0
00019E34 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019E3A 0400 0040                  		subi.b	#$40,d0
00019E3E 4EB9 0000 37AE             		jsr	(CalcSine).l
00019E44 C3FC 0C00                  		muls.w	#$C00,d1
00019E48 4841                       		swap	d1
00019E4A D268 0030                  		add.w	lamp_origX(a0),d1
00019E4E 3141 0008                  		move.w	d1,obX(a0)
00019E52 C1FC 0C00                  		muls.w	#$C00,d0
00019E56 4840                       		swap	d0
00019E58 D068 0032                  		add.w	lamp_origY(a0),d0
00019E5C 3140 000C                  		move.w	d0,obY(a0)
00019E60 4E75                       		rts	
00019E62                            ; ===========================================================================
00019E62                            ; ---------------------------------------------------------------------------
00019E62                            ; Subroutine to	store information when you hit a lamppost
00019E62                            ; ---------------------------------------------------------------------------
00019E62                            
00019E62                            Lamp_StoreInfo:
00019E62 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019E68 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019E6E 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019E74 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019E7A 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019E80 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019E86 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019E8C 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019E92 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019E98 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019E9E 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019EA4 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
00019EAA 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
00019EB0 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
00019EB6 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
00019EBC 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
00019EC2 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
00019EC8 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
00019ECE 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
00019ED4 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00019EDA 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
00019EE0 4E75                       		rts	
00019EE2                            
00019EE2                            ; ---------------------------------------------------------------------------
00019EE2                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019EE2                            ; ---------------------------------------------------------------------------
00019EE2                            
00019EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019EE2                            
00019EE2                            
00019EE2                            Lamp_LoadInfo:
00019EE2 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
00019EE8 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00019EEE 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00019EF4 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
00019EFA 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00019F00 4278 FE20                  		clr.w	(v_rings).w
00019F04 4238 FE1B                  		clr.b	(v_lifecount).w
00019F08 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
00019F0E 11FC 003B FE25             		move.b	#59,(v_timecent).w
00019F14 5338 FE24                  		subq.b	#1,(v_timesec).w
00019F18 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
00019F1E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019F24 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
00019F2A 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
00019F30 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
00019F36 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
00019F3C 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
00019F42 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
00019F48 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
00019F4E 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
00019F54 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
00019F5A 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
00019F60 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
00019F66 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
00019F6C 6600                       		bne.s	@notlabyrinth	; if not, branch
00019F6E                            
00019F6E 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
00019F74 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019F7A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
00019F80                            
00019F80                            	@notlabyrinth:
00019F80 4A38 FE30                  		tst.b	(v_lastlamp).w
00019F84 6A00                       		bpl.s	locret_170F6
00019F86 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019F8A 0440 00A0                  		subi.w	#$A0,d0
00019F8E 31C0 F728                  		move.w	d0,(v_limitleft2).w
00019F92                            
00019F92                            locret_170F6:
00019F92 4E75                       		rts	
00019F92 4E75                       		rts	
00019F94                            Map_Lamp:	include	"_maps\Lamppost.asm"
00019F94                            ; --------------------------------------------------------------------------------
00019F94                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019F94                            ; --------------------------------------------------------------------------------
00019F94                            
00019F94                            SME_JfaKr:	
00019F94 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
00019F98 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
00019F9C 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
00019F9E 0A                         SME_JfaKr_A:	dc.b $A	
00019F9F E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
00019FA4 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
00019FA9 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
00019FAE D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
00019FB3 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
00019FB8 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
00019FBD 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
00019FC2 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
00019FC7 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
00019FCC 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
00019FD1 08                         SME_JfaKr_3D:	dc.b 8	
00019FD2 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
00019FD7 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
00019FDC F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
00019FE1 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
00019FE6 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
00019FEB 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
00019FF0 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
00019FF5 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
00019FFA 02                         SME_JfaKr_66:	dc.b 2	
00019FFB F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A000 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A005 0A                         SME_JfaKr_71:	dc.b $A	
0001A006 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A00B E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A010 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A015 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A01A 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A01F 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A024 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A029 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A02E D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A033 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A038 0A                         SME_JfaKr_A4:	dc.b $A	
0001A039 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A03E E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A043 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A048 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A04D 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A052 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A057 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A05C 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A061 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A066 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A06C 00                         		even
0001A06C 00                         		even
0001A06C                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A06C                            ; ---------------------------------------------------------------------------
0001A06C                            ; Object 7D - hidden points at the end of a level
0001A06C                            ; ---------------------------------------------------------------------------
0001A06C                            
0001A06C                            HiddenBonus:
0001A06C 7000                       		moveq	#0,d0
0001A06E 1028 0024                  		move.b	obRoutine(a0),d0
0001A072 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A076 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A07A                            ; ===========================================================================
0001A07A 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A07C 0000                       		dc.w Bonus_Display-Bonus_Index
0001A07E                            
0001A07E =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A07E                            ; ===========================================================================
0001A07E                            
0001A07E                            Bonus_Main:	; Routine 0
0001A07E 7410                       		moveq	#$10,d2
0001A080 3602                       		move.w	d2,d3
0001A082 D643                       		add.w	d3,d3
0001A084 43F8 D000                  		lea	(v_player).w,a1
0001A088 3029 0008                  		move.w	obX(a1),d0
0001A08C 9068 0008                  		sub.w	obX(a0),d0
0001A090 D042                       		add.w	d2,d0
0001A092 B043                       		cmp.w	d3,d0
0001A094 6400                       		bcc.s	bonu_chkdel
0001A096 3229 000C                  		move.w	obY(a1),d1
0001A09A 9268 000C                  		sub.w	obY(a0),d1
0001A09E D242                       		add.w	d2,d1
0001A0A0 B243                       		cmp.w	d3,d1
0001A0A2 6400                       		bcc.s	bonu_chkdel
0001A0A4 4A78 FE08                  		tst.w	(v_debuguse).w
0001A0A8 6600                       		bne.s	bonu_chkdel
0001A0AA 4A38 F7CD                  		tst.b	(f_bigring).w
0001A0AE 6600                       		bne.s	bonu_chkdel
0001A0B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0B4 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A0BC 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A0C2 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A0C8 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A0CE 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A0D4 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A0DA 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A0EA 7000                       		moveq	#0,d0
0001A0EC 1028 0028                  		move.b	obSubtype(a0),d0
0001A0F0 D040                       		add.w	d0,d0
0001A0F2 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A0F6 4EB9 0000 0000             		jsr	(AddPoints).l
0001A0FC                            
0001A0FC                            bonu_chkdel:
0001A118 4E75                       		rts	
0001A11A                            
0001A11A                            	@delete:
0001A11A 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001A120                            
0001A120                            ; ===========================================================================
0001A120 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A122 03E8                       		dc.w 1000
0001A124 0064                       		dc.w 100
0001A126 000A                       		dc.w 10
0001A128                            ; ===========================================================================
0001A128                            
0001A128                            Bonus_Display:	; Routine 2
0001A128 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A12C 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A14A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001A150                            
0001A150                            Bonus_Display_Delete:	
0001A150 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001A150 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001A156                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A156                            ; ---------------------------------------------------------------------------
0001A156                            ; Sprite mappings - hidden points at the end of	a level
0001A156                            ; ---------------------------------------------------------------------------
0001A156                            Map_Bonus_internal:
0001A156 0000                       		dc.w @blank-Map_Bonus_internal
0001A158 0000                       		dc.w @10000-Map_Bonus_internal
0001A15A 0000                       		dc.w @1000-Map_Bonus_internal
0001A15C 0000                       		dc.w @100-Map_Bonus_internal
0001A15E 00                         @blank:		dc.b 0
0001A15F 01                         @10000:		dc.b 1
0001A160 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A165 01                         @1000:		dc.b 1
0001A166 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A16B 01                         @100:		dc.b 1
0001A16C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A172 00                         		even
0001A172 00                         		even
0001A172                            
0001A172                            		include	"_incObj\8A Credits.asm"
0001A172                            ; ---------------------------------------------------------------------------
0001A172                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A172                            ; ---------------------------------------------------------------------------
0001A172                            
0001A172                            CreditsText:
0001A172 7000                       		moveq	#0,d0
0001A174 1028 0024                  		move.b	obRoutine(a0),d0
0001A178 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A17C 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A180                            ; ===========================================================================
0001A180 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A182 0000                       		dc.w Cred_Display-Cred_Index
0001A184                            ; ===========================================================================
0001A184                            
0001A184                            Cred_Main:	; Routine 0
0001A184 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A188 317C 0120 0008             		move.w	#$120,obX(a0)
0001A18E 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A194 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A19C 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A1A2 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A1A6 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A1AA 117C 0000 0001             		move.b	#0,obRender(a0)
0001A1B0 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A1B6                            
0001A1B6 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A1BC 6600                       		bne.s	Cred_Display	; if not, branch
0001A1BE                            
0001A1BE 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A1C4 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A1CA 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A1CE 6700                       		beq.s	Cred_Display	; if not, branch
0001A1D0 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A1D6 6600                       		bne.s	Cred_Display	; if not, branch
0001A1D8 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A1DE 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A1E4 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001A1EA                            ; ===========================================================================
0001A1EA                            
0001A1EA                            Cred_Display:	; Routine 2
0001A1EA 4EF9 0000 F6FE             		jmp	DisplaySprite
0001A1EA 4EF9 0000 F6FE             		jmp	DisplaySprite
0001A1F0                            Map_Cred:	include	"_maps\Credits.asm"
0001A1F0                            ; ---------------------------------------------------------------------------
0001A1F0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A1F0                            ; ---------------------------------------------------------------------------
0001A1F0                            Map_Cred_internal:
0001A1F0 0000                       		dc.w @staff-Map_Cred_internal
0001A1F2 0000                       		dc.w @gameplan-Map_Cred_internal
0001A1F4 0000                       		dc.w @program-Map_Cred_internal
0001A1F6 0000                       		dc.w @character-Map_Cred_internal
0001A1F8 0000                       		dc.w @design-Map_Cred_internal
0001A1FA 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A1FC 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A1FE 0000                       		dc.w @thanks-Map_Cred_internal
0001A200 0000                       		dc.w @presentedby-Map_Cred_internal
0001A202 0000                       		dc.w @tryagain-Map_Cred_internal
0001A204 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A206 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A207 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A20C F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A211 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A216 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A21B F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A220 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A225 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A22A F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A22F F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A234 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A239 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A23E F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A243 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A248 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A24D 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A24E 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A253 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A258 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A25D 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A262 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A267 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A26C 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A271 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A276 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A27B                            
0001A27B B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A280 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A285 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A28A B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A28F B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A294 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A295 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A29A 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A29F 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A2A4 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A2A9 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A2AE 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A2B3 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A2B8                            
0001A2B8 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A2BD B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A2C2 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A2C7 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A2CC B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A2D1 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A2D6 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A2DB B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A2E0                            
0001A2E0 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A2E5 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A2EA                            
0001A2EA D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A2EF D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A2F4 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A2F9 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A2FE D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A303 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A308                            
0001A308 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A30D F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A312 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A317 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A318 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A31D 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A322 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A327                            
0001A327 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A32C B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A331 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A336 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A33B B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A340 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A341 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A346 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A34B 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A350 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A355 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A35A 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A35F                            
0001A35F B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A364 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A369 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A36E B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A373 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A378 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A379 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A37E 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A383 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A388 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A38D 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A392 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A397 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A39C 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A3A1 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A3A6 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A3AB                            
0001A3AB B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A3B0 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A3B5 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A3BA B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A3BF B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A3C4 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A3C9 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A3CE B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A3D3                            
0001A3D3 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A3D8 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A3DD D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A3E2 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A3E7 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A3EC D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A3F1 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A3F6 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A3FB D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A400 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A405 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A406 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A40B D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A410 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A415 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A41A D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A41F D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A424 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A429 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A42E D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A433 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A438 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A43D D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A442 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A447 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A44C 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A451 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A456 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A45B 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A460 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A465 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A46A 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A46F 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A474 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A479 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A47A 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A47F 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A484 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A489 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A48E 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A493 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A498 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A49D 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A4A2                            
0001A4A2 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A4A7 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A4AC B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A4B1 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A4B6 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A4BB B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A4C0                            
0001A4C0 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A4C5 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A4CA D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A4CF 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A4D0 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A4D5 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A4DA 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A4DF 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A4E4 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A4E9 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A4EE 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A4F3 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A4F8 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A4FD                            
0001A4FD B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A502 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A507                            
0001A507 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A50C D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A511 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A516 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A51B D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A520 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A521 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A526 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A52B 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A530 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A535 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A53A 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A53F 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A544 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A549 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A54A E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A54F E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A554 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A559 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A55E E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A563 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A568                            
0001A568 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A56D 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A572 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A577 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A57C 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A581 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A586 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A58B 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A590                            		even
0001A590                            		even
0001A590                            
0001A590                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A590                            ; ---------------------------------------------------------------------------
0001A590                            ; Object 3D - Eggman (GHZ)
0001A590                            ; ---------------------------------------------------------------------------
0001A590                            
0001A590                            BossGreenHill:
0001A590 7000                       		moveq	#0,d0
0001A592 1028 0024                  		move.b	obRoutine(a0),d0
0001A596 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A59A 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A59E                            ; ===========================================================================
0001A59E 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A5A0 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A5A2 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A5A4 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A5A6                            
0001A5A6 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A5A8 0401                       		dc.b 4,	1
0001A5AA 0607                       		dc.b 6,	7
0001A5AC                            ; ===========================================================================
0001A5AC                            
0001A5AC                            BGHZ_Main:	; Routine 0
0001A5AC 45F9 0001 A5A6             		lea	(BGHZ_ObjData).l,a2
0001A5B2 2248                       		movea.l	a0,a1
0001A5B4 7202                       		moveq	#2,d1
0001A5B6 6000                       		bra.s	BGHZ_LoadBoss
0001A5B8                            ; ===========================================================================
0001A5B8                            
0001A5B8                            BGHZ_Loop:
0001A5B8 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001A5BE 6600                       		bne.s	loc_17772
0001A5C0                            
0001A5C0                            BGHZ_LoadBoss:
0001A5C0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A5C4 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A5C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A5CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A5D4 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A5DC 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A5E2 137C 0004 0001             		move.b	#4,obRender(a1)
0001A5E8 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A5EE 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A5F4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A5F8 2348 0034                  		move.l	a0,$34(a1)
0001A5FC 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A600                            
0001A600                            loc_17772:
0001A600 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A606 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A60C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A612 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A618                            
0001A618                            
0001A618                            BGHZ_ShipMain:	; Routine 2
0001A618 7000                       		moveq	#0,d0
0001A61A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A61E 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A622 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A626 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A62C 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001A632 1028 0022                  		move.b	obStatus(a0),d0
0001A636 0200 0003                  		andi.b	#3,d0
0001A63A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A640 8128 0001                  		or.b	d0,obRender(a0)
0001A644 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001A64A                            ; ===========================================================================
0001A64A 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A64C 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A64E 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A650 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A652 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A654 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A656 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A658                            ; ===========================================================================
0001A658                            
0001A658                            BGHZ_ShipStart:
0001A658 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A65E 6100 0000                  		bsr.w	BossMove
0001A662 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A668 6600                       		bne.s	loc_177E6
0001A66A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A670 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A674                            
0001A674                            loc_177E6:
0001A674 1028 003F                  		move.b	$3F(a0),d0
0001A678 4EB9 0000 37AE             		jsr	(CalcSine).l
0001A67E EC40                       		asr.w	#6,d0
0001A680 D068 0038                  		add.w	$38(a0),d0
0001A684 3140 000C                  		move.w	d0,obY(a0)
0001A688 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A68E 5428 003F                  		addq.b	#2,$3F(a0)
0001A692 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A698 6400                       		bcc.s	locret_1784A
0001A69A 4A28 0022                  		tst.b	obStatus(a0)
0001A69E 6B00                       		bmi.s	loc_1784C
0001A6A0 4A28 0020                  		tst.b	obColType(a0)
0001A6A4 6600                       		bne.s	locret_1784A
0001A6A6 4A28 003E                  		tst.b	$3E(a0)
0001A6AA 6600                       		bne.s	BGHZ_ShipFlash
0001A6AC 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A6BC                            
0001A6BC                            BGHZ_ShipFlash:
0001A6BC 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A6C0 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A6C2 4A51                       		tst.w	(a1)
0001A6C4 6600                       		bne.s	loc_1783C
0001A6C6 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A6CA                            
0001A6CA                            loc_1783C:
0001A6CA 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A6CC 5328 003E                  		subq.b	#1,$3E(a0)
0001A6D0 6600                       		bne.s	locret_1784A
0001A6D2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A6D8                            
0001A6D8                            locret_1784A:
0001A6D8 4E75                       		rts	
0001A6DA                            ; ===========================================================================
0001A6DA                            
0001A6DA                            loc_1784C:
0001A6DA 7064                       		moveq	#100,d0
0001A6DC 6100 0000                  		bsr.w	AddPoints
0001A6E0 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A6E6 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A6EC 4E75                       		rts	
0001A6EC 4E75                       		rts	
0001A6EE                            
0001A6EE                            ; ---------------------------------------------------------------------------
0001A6EE                            ; Defeated boss	subroutine
0001A6EE                            ; ---------------------------------------------------------------------------
0001A6EE                            
0001A6EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A6EE                            
0001A6EE                            
0001A6EE                            BossDefeated:
0001A6EE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A6F2 0200 0007                  		andi.b	#7,d0
0001A6F6 6600                       		bne.s	locret_178A2
0001A6F8 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001A6FE 6600                       		bne.s	locret_178A2
0001A700 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A704 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A70A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A710 4EB9 0000 3788             		jsr	(RandomNumber).l
0001A716 3200                       		move.w	d0,d1
0001A718 7200                       		moveq	#0,d1
0001A71A 1200                       		move.b	d0,d1
0001A71C E409                       		lsr.b	#2,d1
0001A71E 0441 0020                  		subi.w	#$20,d1
0001A722 D369 0008                  		add.w	d1,obX(a1)
0001A726 E048                       		lsr.w	#8,d0
0001A728 E608                       		lsr.b	#3,d0
0001A72A D169 000C                  		add.w	d0,obY(a1)
0001A72E                            
0001A72E                            locret_178A2:
0001A72E 4E75                       		rts	
0001A730                            ; End of function BossDefeated
0001A730                            
0001A730                            ; ---------------------------------------------------------------------------
0001A730                            ; Subroutine to	move a boss
0001A730                            ; ---------------------------------------------------------------------------
0001A730                            
0001A730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A730                            
0001A730                            
0001A730                            BossMove:
0001A730 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A736 E188                       		lsl.l	#8,d0
0001A738 D1A8 0030                  		add.l	d0,$30(a0)
0001A73C E18A                       		lsl.l	#8,d2
0001A73E D5A8 0038                  		add.l	d2,$38(a0)
0001A742 4E75                       		rts
0001A744                            ; End of function BossMove
0001A744                            
0001A744                            ; ===========================================================================
0001A744                            
0001A744                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A744                            
0001A744                            BGHZ_MakeBall:
0001A744 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A74A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A750 6100 FFDE                  		bsr.w	BossMove
0001A754 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A75A 6600                       		bne.s	loc_17916
0001A75C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A762 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A768 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A76C 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001A772 6600                       		bne.s	loc_17910
0001A774 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A778 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A77E 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A784 2348 0034                  		move.l	a0,$34(a1)
0001A788                            
0001A788                            loc_17910:
0001A788 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A78E                            
0001A78E                            loc_17916:
0001A78E 6000 FEE4                  		bra.w	loc_177E6
0001A792                            ; ===========================================================================
0001A792                            
0001A792                            BGHZ_ShipMove:
0001A792 5368 003C                  		subq.w	#1,$3C(a0)
0001A796 6A00                       		bpl.s	BGHZ_Reverse
0001A798 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A79C 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A7A2 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A7A8 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A7AE 6600                       		bne.s	BGHZ_Reverse
0001A7B0 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A7B6 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A7BC                            
0001A7BC                            BGHZ_Reverse:
0001A7BC 0828 0000 0022             		btst	#0,obStatus(a0)
0001A7C2 6600                       		bne.s	loc_17950
0001A7C4 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A7C8                            
0001A7C8                            loc_17950:
0001A7C8 6000 FEAA                  		bra.w	loc_177E6
0001A7CC                            ; ===========================================================================
0001A7CC                            
0001A7CC                            loc_17954:
0001A7CC 5368 003C                  		subq.w	#1,$3C(a0)
0001A7D0 6B00                       		bmi.s	loc_17960
0001A7D2 6100 FF5C                  		bsr.w	BossMove
0001A7D6 6000                       		bra.s	loc_17976
0001A7D8                            ; ===========================================================================
0001A7D8                            
0001A7D8                            loc_17960:
0001A7D8 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A7DE 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A7E4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A7E8 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A7EE                            
0001A7EE                            loc_17976:
0001A7EE 6000 FE84                  		bra.w	loc_177E6
0001A7F2                            ; ===========================================================================
0001A7F2                            
0001A7F2                            loc_1797A:
0001A7F2 5368 003C                  		subq.w	#1,$3C(a0)
0001A7F6 6B00                       		bmi.s	loc_17984
0001A7F8 6000 FEF4                  		bra.w	BossDefeated
0001A7FC                            ; ===========================================================================
0001A7FC                            
0001A7FC                            loc_17984:
0001A7FC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A802 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A808 4268 0010                  		clr.w	obVelX(a0)
0001A80C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A810 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A816 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A81A 6600                       		bne.s	locret_179AA
0001A81C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A822                            
0001A822                            locret_179AA:
0001A822 4E75                       		rts	
0001A824                            ; ===========================================================================
0001A824                            
0001A824                            loc_179AC:
0001A824 5268 003C                  		addq.w	#1,$3C(a0)
0001A828 6700                       		beq.s	loc_179BC
0001A82A 6A00                       		bpl.s	loc_179C2
0001A82C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A832 6000                       		bra.s	loc_179EE
0001A834                            ; ===========================================================================
0001A834                            
0001A834                            loc_179BC:
0001A834 4268 0012                  		clr.w	obVelY(a0)
0001A838 6000                       		bra.s	loc_179EE
0001A83A                            ; ===========================================================================
0001A83A                            
0001A83A                            loc_179C2:
0001A83A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A840 6500                       		bcs.s	loc_179DA
0001A842 6700                       		beq.s	loc_179E0
0001A844 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A84A 6500                       		bcs.s	loc_179EE
0001A84C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A850 6000                       		bra.s	loc_179EE
0001A852                            ; ===========================================================================
0001A852                            
0001A852                            loc_179DA:
0001A852 5168 0012                  		subq.w	#8,obVelY(a0)
0001A856 6000                       		bra.s	loc_179EE
0001A858                            ; ===========================================================================
0001A858                            
0001A858                            loc_179E0:
0001A858 4268 0012                          clr.w    obVelY(a0)
0001A85C 4A38 FE2D                          tst.b     (v_invinc).w
0001A860 6600                               bne.s   @boss_invinc
0001A862 4A38 FE2E                          tst.b     (v_shoes).w
0001A866 6600                               bne.s   @boss_shoes
0001A868                            
0001A868 1038 F5C6                          move.b   (v_Saved_music),d0
0001A86C 6000 0000                          bra.w      @boss_play
0001A870                            
0001A870                            @boss_invinc:
0001A870 103C 0000                          move.b #bgm_Invincible,d0
0001A874                            
0001A874                            @boss_shoes:
0001A874 103C 0000                          move.b #bgm_Ending,d0
0001A878                            
0001A878                            @boss_play:
0001A878 4EB8 0FC6                          jsr PlaySound
0001A87C                            
0001A87C                            loc_179EE:
0001A87C 6100 FEB2                  		bsr.w	BossMove
0001A880 6000 FDF2                  		bra.w	loc_177E6
0001A884                            ; ===========================================================================
0001A884                            
0001A884                            loc_179F6:
0001A884 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A88A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A890 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001A896 6700                       		beq.s	loc_17A10
0001A898 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A89C 6000                       		bra.s	loc_17A16
0001A89E                            ; ===========================================================================
0001A89E                            
0001A89E                            loc_17A10:
0001A89E 4A28 0001                  		tst.b	obRender(a0)
0001A8A2 6A00                       		bpl.s	BGHZ_ShipDel
0001A8A4                            
0001A8A4                            loc_17A16:
0001A8A4 6100 FE8A                  		bsr.w	BossMove
0001A8A8 6000 FDCA                  		bra.w	loc_177E6
0001A8AC                            ; ===========================================================================
0001A8AC                            
0001A8AC                            BGHZ_ShipDel:
0001A8AC 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001A8B2                            ; ===========================================================================
0001A8B2                            
0001A8B2                            BGHZ_FaceMain:	; Routine 4
0001A8B2 7000                       		moveq	#0,d0
0001A8B4 7201                       		moveq	#1,d1
0001A8B6 2268 0034                  		movea.l	$34(a0),a1
0001A8BA 1029 0025                  		move.b	ob2ndRout(a1),d0
0001A8BE 5900                       		subq.b	#4,d0
0001A8C0 6600                       		bne.s	loc_17A3E
0001A8C2 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001A8C8 6600                       		bne.s	loc_17A46
0001A8CA 7204                       		moveq	#4,d1
0001A8CC                            
0001A8CC                            loc_17A3E:
0001A8CC 5D00                       		subq.b	#6,d0
0001A8CE 6B00                       		bmi.s	loc_17A46
0001A8D0 720A                       		moveq	#$A,d1
0001A8D2 6000                       		bra.s	loc_17A5A
0001A8D4                            ; ===========================================================================
0001A8D4                            
0001A8D4                            loc_17A46:
0001A8D4 4A29 0020                  		tst.b	obColType(a1)
0001A8D8 6600                       		bne.s	loc_17A50
0001A8DA 7205                       		moveq	#5,d1
0001A8DC 6000                       		bra.s	loc_17A5A
0001A8DE                            ; ===========================================================================
0001A8DE                            
0001A8DE                            loc_17A50:
0001A8DE 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001A8E4 6500                       		bcs.s	loc_17A5A
0001A8E6 7204                       		moveq	#4,d1
0001A8E8                            
0001A8E8                            loc_17A5A:
0001A8E8 1141 001C                  		move.b	d1,obAnim(a0)
0001A8EC 5500                       		subq.b	#2,d0
0001A8EE 6600                       		bne.s	BGHZ_FaceDisp
0001A8F0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001A8F6 4A28 0001                  		tst.b	obRender(a0)
0001A8FA 6A00                       		bpl.s	BGHZ_FaceDel
0001A8FC                            
0001A8FC                            BGHZ_FaceDisp:
0001A8FC 6000                       		bra.s	BGHZ_Display
0001A8FE                            ; ===========================================================================
0001A8FE                            
0001A8FE                            BGHZ_FaceDel:
0001A8FE 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001A904                            ; ===========================================================================
0001A904                            
0001A904                            BGHZ_FlameMain:	; Routine 6
0001A904 117C 0007 001C             		move.b	#7,obAnim(a0)
0001A90A 2268 0034                  		movea.l	$34(a0),a1
0001A90E 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001A914 6600                       		bne.s	loc_17A96
0001A916 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001A91C 4A28 0001                  		tst.b	obRender(a0)
0001A920 6A00                       		bpl.s	BGHZ_FlameDel
0001A922 6000                       		bra.s	BGHZ_FlameDisp
0001A924                            ; ===========================================================================
0001A924                            
0001A924                            loc_17A96:
0001A924 3029 0010                  		move.w	obVelX(a1),d0
0001A928 6700                       		beq.s	BGHZ_FlameDisp
0001A92A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001A930                            
0001A930                            BGHZ_FlameDisp:
0001A930 6000                       		bra.s	BGHZ_Display
0001A932                            ; ===========================================================================
0001A932                            
0001A932                            BGHZ_FlameDel:
0001A932 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001A938                            ; ===========================================================================
0001A938                            
0001A938                            BGHZ_Display:
0001A938 2268 0034                  		movea.l	$34(a0),a1
0001A93C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001A942 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001A948 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001A94E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A954 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001A95A 1028 0022                  		move.b	obStatus(a0),d0
0001A95E 0200 0003                  		andi.b	#3,d0
0001A962 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A968 8128 0001                  		or.b	d0,obRender(a0)
0001A96C 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001A96C 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001A972                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001A972                            ; ---------------------------------------------------------------------------
0001A972                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001A972                            ; ---------------------------------------------------------------------------
0001A972                            
0001A972                            BossBall:
0001A972 7000                       		moveq	#0,d0
0001A974 1028 0024                  		move.b	obRoutine(a0),d0
0001A978 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001A97C 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001A980                            ; ===========================================================================
0001A980 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001A982 0000                       		dc.w GBall_Base-GBall_Index
0001A984 0000                       		dc.w GBall_Display2-GBall_Index
0001A986 0000                       		dc.w loc_17C68-GBall_Index
0001A988 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001A98A                            ; ===========================================================================
0001A98A                            
0001A98A                            GBall_Main:	; Routine 0
0001A98A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A98E 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001A994 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001A99A 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001A9A2 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001A9A8 45E8 0028                  		lea	obSubtype(a0),a2
0001A9AC 14FC 0000                  		move.b	#0,(a2)+
0001A9B0 7205                       		moveq	#5,d1
0001A9B2 2248                       		movea.l	a0,a1
0001A9B4 6000                       		bra.s	loc_17B60
0001A9B6                            ; ===========================================================================
0001A9B6                            
0001A9B6                            GBall_MakeLinks:
0001A9B6 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001A9BC 6600                       		bne.s	GBall_MakeBall
0001A9BE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A9C4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A9CA 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001A9CE 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001A9D4 237C 0000 9604 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001A9DC 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001A9E2 137C 0001 001A             		move.b	#1,obFrame(a1)
0001A9E8 5228 0028                  		addq.b	#1,obSubtype(a0)
0001A9EC                            
0001A9EC                            loc_17B60:
0001A9EC 3A09                       		move.w	a1,d5
0001A9EE 0445 D000                  		subi.w	#$D000,d5
0001A9F2 EC4D                       		lsr.w	#6,d5
0001A9F4 0245 007F                  		andi.w	#$7F,d5
0001A9F8 14C5                       		move.b	d5,(a2)+
0001A9FA 137C 0004 0001             		move.b	#4,obRender(a1)
0001AA00 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AA06 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AA0C 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AA12 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AA16                            
0001AA16                            GBall_MakeBall:
0001AA16 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AA1C 237C 0000 9B60 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AA24 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AA2A 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AA30 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AA36 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AA3C 4E75                       		rts	
0001AA3E                            ; ===========================================================================
0001AA3E                            
0001AA3E 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AA44                            
0001AA44                            ; ===========================================================================
0001AA44                            
0001AA44                            GBall_Base:	; Routine 2
0001AA44 47F9 0001 AA3E             		lea	(GBall_PosData).l,a3
0001AA4A 45E8 0028                  		lea	obSubtype(a0),a2
0001AA4E 7C00                       		moveq	#0,d6
0001AA50 1C1A                       		move.b	(a2)+,d6
0001AA52                            
0001AA52                            loc_17BC6:
0001AA52 7800                       		moveq	#0,d4
0001AA54 181A                       		move.b	(a2)+,d4
0001AA56 ED4C                       		lsl.w	#6,d4
0001AA58 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AA5E 2244                       		movea.l	d4,a1
0001AA60 101B                       		move.b	(a3)+,d0
0001AA62 B029 003C                  		cmp.b	$3C(a1),d0
0001AA66 6700                       		beq.s	loc_17BE0
0001AA68 5229 003C                  		addq.b	#1,$3C(a1)
0001AA6C                            
0001AA6C                            loc_17BE0:
0001AA6C 51CE FFE4                  		dbf	d6,loc_17BC6
0001AA70                            
0001AA70 B029 003C                  		cmp.b	$3C(a1),d0
0001AA74 6600                       		bne.s	loc_17BFA
0001AA76 2268 0034                  		movea.l	$34(a0),a1
0001AA7A 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AA80 6600                       		bne.s	loc_17BFA
0001AA82 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA86                            
0001AA86                            loc_17BFA:
0001AA86 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AA8C 6700                       		beq.s	GBall_Display
0001AA8E 5268 0032                  		addq.w	#1,$32(a0)
0001AA92                            
0001AA92                            GBall_Display:
0001AA92 6100 0000                  		bsr.w	sub_17C2A
0001AA96 1028 0026                  		move.b	obAngle(a0),d0
0001AA9A 4EB9 0000 9576             		jsr	(Swing_Move2).l
0001AAA0 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001AAA6                            ; ===========================================================================
0001AAA6                            
0001AAA6                            GBall_Display2:	; Routine 4
0001AAA6 6100 0000                  		bsr.w	sub_17C2A
0001AAAA 4EB9 0000 9536             		jsr	(Obj48_Move).l
0001AAB0 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001AAB6                            
0001AAB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AAB6                            
0001AAB6                            
0001AAB6                            sub_17C2A:
0001AAB6 2268 0034                  		movea.l	$34(a0),a1
0001AABA 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AAC0 6400                       		bcc.s	loc_17C3C
0001AAC2 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AAC8                            
0001AAC8                            loc_17C3C:
0001AAC8 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AACE 3029 000C                  		move.w	obY(a1),d0
0001AAD2 D068 0032                  		add.w	$32(a0),d0
0001AAD6 3140 0038                  		move.w	d0,$38(a0)
0001AADA 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AAE0 4A29 0022                  		tst.b	obStatus(a1)
0001AAE4 6A00                       		bpl.s	locret_17C66
0001AAE6 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AAEA 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AAF0                            
0001AAF0                            locret_17C66:
0001AAF0 4E75                       		rts	
0001AAF2                            ; End of function sub_17C2A
0001AAF2                            
0001AAF2                            ; ===========================================================================
0001AAF2                            
0001AAF2                            loc_17C68:	; Routine 6
0001AAF2 2268 0034                  		movea.l	$34(a0),a1
0001AAF6 4A29 0022                  		tst.b	obStatus(a1)
0001AAFA 6A00                       		bpl.s	GBall_Display3
0001AAFC 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AB00 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AB06                            
0001AB06                            GBall_Display3:
0001AB06 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001AB0C                            ; ===========================================================================
0001AB0C                            
0001AB0C                            GBall_ChkVanish:; Routine 8
0001AB0C 7000                       		moveq	#0,d0
0001AB0E 4A28 001A                  		tst.b	obFrame(a0)
0001AB12 6600                       		bne.s	GBall_Vanish
0001AB14 5200                       		addq.b	#1,d0
0001AB16                            
0001AB16                            GBall_Vanish:
0001AB16 1140 001A                  		move.b	d0,obFrame(a0)
0001AB1A 2268 0034                  		movea.l	$34(a0),a1
0001AB1E 4A29 0022                  		tst.b	obStatus(a1)
0001AB22 6A00                       		bpl.s	GBall_Display4
0001AB24 117C 0000 0020             		move.b	#0,obColType(a0)
0001AB2A 6100 FBC2                  		bsr.w	BossDefeated
0001AB2E 5328 003C                  		subq.b	#1,$3C(a0)
0001AB32 6A00                       		bpl.s	GBall_Display4
0001AB34 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AB38 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AB3E                            
0001AB3E                            GBall_Display4:
0001AB3E 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001AB3E 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001AB44                            		include	"_anim\Eggman.asm"
0001AB44                            ; ---------------------------------------------------------------------------
0001AB44                            ; Animation script - Eggman (bosses)
0001AB44                            ; ---------------------------------------------------------------------------
0001AB44 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AB46 0000                       		dc.w @facenormal1-Ani_Eggman
0001AB48 0000                       		dc.w @facenormal2-Ani_Eggman
0001AB4A 0000                       		dc.w @facenormal3-Ani_Eggman
0001AB4C 0000                       		dc.w @facelaugh-Ani_Eggman
0001AB4E 0000                       		dc.w @facehit-Ani_Eggman
0001AB50 0000                       		dc.w @facepanic-Ani_Eggman
0001AB52 0000                       		dc.w @blank-Ani_Eggman
0001AB54 0000                       		dc.w @flame1-Ani_Eggman
0001AB56 0000                       		dc.w @flame2-Ani_Eggman
0001AB58 0000                       		dc.w @facedefeat-Ani_Eggman
0001AB5A 0000                       		dc.w @escapeflame-Ani_Eggman
0001AB5C 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AB60 00                         		even
0001AB60 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AB64                            		even
0001AB64 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AB68                            		even
0001AB68 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AB6C                            		even
0001AB6C 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AB70                            		even
0001AB70 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AB74                            		even
0001AB74 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AB78                            		even
0001AB78 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AB7C 00                         		even
0001AB7C 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AB80                            		even
0001AB80 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AB84                            		even
0001AB84 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AB88 00                         		even
0001AB88 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AB94 00                         		even
0001AB94 00                         		even
0001AB94                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AB94                            ; --------------------------------------------------------------------------------
0001AB94                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AB94                            ; --------------------------------------------------------------------------------
0001AB94                            
0001AB94                            SME_F_pyS:	
0001AB94 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AB98 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AB9C 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001ABA0 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001ABA4 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001ABA8 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001ABAC 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001ABAE 05                         SME_F_pyS_1A:	dc.b 5	
0001ABAF EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001ABB4 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001ABB9 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001ABBE 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001ABC3 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001ABC8 03                         SME_F_pyS_34:	dc.b 3	
0001ABC9 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ABCE EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001ABD3 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ABD8 03                         SME_F_pyS_44:	dc.b 3	
0001ABD9 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ABDE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001ABE3 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ABE8 04                         SME_F_pyS_54:	dc.b 4	
0001ABE9 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001ABEE EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001ABF3 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001ABF8 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ABFD 04                         SME_F_pyS_69:	dc.b 4	
0001ABFE E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AC03 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AC08 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AC0D EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC12 04                         SME_F_pyS_7E:	dc.b 4	
0001AC13 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AC18 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AC1D EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AC22 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC27 04                         SME_F_pyS_93:	dc.b 4	
0001AC28 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AC2D E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC32 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AC37 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AC3C 07                         SME_F_pyS_A8:	dc.b 7	
0001AC3D E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AC42 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AC47 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AC4C EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AC51 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AC56 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AC5B EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC60 01                         SME_F_pyS_CC:	dc.b 1	
0001AC61 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AC66 01                         SME_F_pyS_D2:	dc.b 1	
0001AC67 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AC6C 00                         SME_F_pyS_D8:	dc.b 0	
0001AC6D 02                         SME_F_pyS_D9:	dc.b 2	
0001AC6E 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AC73 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AC78 02                         SME_F_pyS_E4:	dc.b 2	
0001AC79 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AC7E 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AC84 00                         		even
0001AC84 00                         		even
0001AC84                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AC84                            ; ---------------------------------------------------------------------------
0001AC84                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AC84                            ; ---------------------------------------------------------------------------
0001AC84                            Map_BossItems_internal:
0001AC84 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AC86 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AC88 0000                       		dc.w @cross-Map_BossItems_internal
0001AC8A 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AC8C 0000                       		dc.w @pipe-Map_BossItems_internal
0001AC8E 0000                       		dc.w @spike-Map_BossItems_internal
0001AC90 0000                       		dc.w @legmask-Map_BossItems_internal
0001AC92 0000                       		dc.w @legs-Map_BossItems_internal
0001AC94 01                         @chainanchor1:	dc.b 1
0001AC95 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AC9A 02                         @chainanchor2:	dc.b 2
0001AC9B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001ACA0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ACA6 00                         		even
0001ACA6 01                         @cross:		dc.b 1
0001ACA7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001ACAC 01                         @widepipe:	dc.b 1
0001ACAD 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001ACB2 01                         @pipe:		dc.b 1
0001ACB3 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001ACB8 04                         @spike:		dc.b 4
0001ACB9 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001ACBE F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001ACC3 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001ACC8 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001ACCE 00                         		even
0001ACCE 02                         @legmask:	dc.b 2
0001ACCF 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001ACD4 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001ACDA 00                         		even
0001ACDA 02                         @legs:		dc.b 2
0001ACDB 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001ACE0 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001ACE6 00                         		even
0001ACE6 00                         		even
0001ACE6                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001ACE6                            ; ---------------------------------------------------------------------------
0001ACE6                            ; Object 77 - Eggman (LZ)
0001ACE6                            ; ---------------------------------------------------------------------------
0001ACE6                            
0001ACE6                            BossLabyrinth:
0001ACE6 7000                       		moveq	#0,d0
0001ACE8 1028 0024                  		move.b	obRoutine(a0),d0
0001ACEC 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001ACF0 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001ACF4                            ; ===========================================================================
0001ACF4 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001ACF6 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001ACF8 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001ACFA 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001ACFC                            
0001ACFC 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001ACFE 0401                       		dc.b 4,	1
0001AD00 0607                       		dc.b 6,	7
0001AD02                            ; ===========================================================================
0001AD02                            
0001AD02                            Obj77_Main:	; Routine 0
0001AD02 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AD08 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AD0E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AD14 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AD1A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AD20 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AD26 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AD2C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AD30 2248                       		movea.l	a0,a1
0001AD32 7202                       		moveq	#2,d1
0001AD34 6000                       		bra.s	Obj77_LoadBoss
0001AD36                            ; ===========================================================================
0001AD36                            
0001AD36                            Obj77_Loop:
0001AD36 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001AD3C 6600                       		bne.s	Obj77_ShipMain
0001AD3E 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AD42 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AD48 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AD4E                            
0001AD4E                            Obj77_LoadBoss:
0001AD4E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AD54 4229 0025                  		clr.b	ob2ndRout(a1)
0001AD58 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AD5C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AD60 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AD66 237C 0001 AB94 0004        		move.l	#Map_Eggman,obMap(a1)
0001AD6E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AD74 137C 0004 0001             		move.b	#4,obRender(a1)
0001AD7A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AD80 2348 0034                  		move.l	a0,$34(a1)
0001AD84 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AD88                            
0001AD88                            Obj77_ShipMain:	; Routine 2
0001AD88 43F8 D000                  		lea	(v_player).w,a1
0001AD8C 7000                       		moveq	#0,d0
0001AD8E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AD92 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AD96 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AD9A 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001ADA0 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001ADA6 7003                       		moveq	#3,d0
0001ADA8 C028 0022                  		and.b	obStatus(a0),d0
0001ADAC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ADB2 8128 0001                  		or.b	d0,obRender(a0)
0001ADB6 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001ADBC                            ; ===========================================================================
0001ADBC 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001ADC0 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001ADC4 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001ADC8 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001ADCC                            ; ===========================================================================
0001ADCC                            
0001ADCC                            loc_17F1E:
0001ADCC 3029 0008                  		move.w	obX(a1),d0
0001ADD0 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001ADD4 6500                       		bcs.s	loc_17F38
0001ADD6 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001ADDC 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001ADE2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001ADE6                            
0001ADE6                            loc_17F38:
0001ADE6 6100 F948                  		bsr.w	BossMove
0001ADEA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001ADF0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001ADF6                            
0001ADF6                            loc_17F48:
0001ADF6 4A28 003D                  		tst.b	$3D(a0)
0001ADFA 6600                       		bne.s	loc_17F8E
0001ADFC 4A28 0022                  		tst.b	obStatus(a0)
0001AE00 6B00                       		bmi.s	loc_17F92
0001AE02 4A28 0020                  		tst.b	obColType(a0)
0001AE06 6600                       		bne.s	locret_17F8C
0001AE08 4A28 003E                  		tst.b	$3E(a0)
0001AE0C 6600                       		bne.s	loc_17F70
0001AE0E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AE1E                            
0001AE1E                            loc_17F70:
0001AE1E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AE22 7000                       		moveq	#0,d0
0001AE24 4A51                       		tst.w	(a1)
0001AE26 6600                       		bne.s	loc_17F7E
0001AE28 303C 0EEE                  		move.w	#cWhite,d0
0001AE2C                            
0001AE2C                            loc_17F7E:
0001AE2C 3280                       		move.w	d0,(a1)
0001AE2E 5328 003E                  		subq.b	#1,$3E(a0)
0001AE32 6600                       		bne.s	locret_17F8C
0001AE34 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AE3A                            
0001AE3A                            locret_17F8C:
0001AE3A 4E75                       		rts	
0001AE3C                            ; ===========================================================================
0001AE3C                            
0001AE3C                            loc_17F8E:
0001AE3C 6000 F8B0                  		bra.w	BossDefeated
0001AE40                            ; ===========================================================================
0001AE40                            
0001AE40                            loc_17F92:
0001AE40 7064                       		moveq	#100,d0
0001AE42 6100 0000                  		bsr.w	AddPoints
0001AE46 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AE4C 4E75                       		rts	
0001AE4E                            ; ===========================================================================
0001AE4E                            
0001AE4E                            loc_17FA0:
0001AE4E 70FE                       		moveq	#-2,d0
0001AE50 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AE56 6500                       		bcs.s	loc_17FB6
0001AE58 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AE5E 4268 0010                  		clr.w	obVelX(a0)
0001AE62 5240                       		addq.w	#1,d0
0001AE64                            
0001AE64                            loc_17FB6:
0001AE64 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AE6A 6E00                       		bgt.s	loc_17FCA
0001AE6C 317C 0500 0038             		move.w	#$500,$38(a0)
0001AE72 4268 0012                  		clr.w	obVelY(a0)
0001AE76 5240                       		addq.w	#1,d0
0001AE78                            
0001AE78                            loc_17FCA:
0001AE78 6600                       		bne.s	loc_17FDC
0001AE7A 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AE80 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AE86 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AE8A                            
0001AE8A                            loc_17FDC:
0001AE8A 6000 FF5A                  		bra.w	loc_17F38
0001AE8E                            ; ===========================================================================
0001AE8E                            
0001AE8E                            loc_17FE0:
0001AE8E 70FE                       		moveq	#-2,d0
0001AE90 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AE96 6500                       		bcs.s	loc_17FF6
0001AE98 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AE9E 4268 0010                  		clr.w	obVelX(a0)
0001AEA2 5240                       		addq.w	#1,d0
0001AEA4                            
0001AEA4                            loc_17FF6:
0001AEA4 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001AEAA 6E00                       		bgt.s	loc_1800A
0001AEAC 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001AEB2 4268 0012                  		clr.w	obVelY(a0)
0001AEB6 5240                       		addq.w	#1,d0
0001AEB8                            
0001AEB8                            loc_1800A:
0001AEB8 6600                       		bne.s	loc_1801A
0001AEBA 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AEC0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEC4 4228 003F                  		clr.b	$3F(a0)
0001AEC8                            
0001AEC8                            loc_1801A:
0001AEC8 6000 FF1C                  		bra.w	loc_17F38
0001AECC                            ; ===========================================================================
0001AECC                            
0001AECC                            loc_1801E:
0001AECC 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001AED2 6E00                       		bgt.s	loc_1804E
0001AED4 317C 0100 0038             		move.w	#$100,$38(a0)
0001AEDA 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AEE0 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001AEE6 4A28 003D                  		tst.b	$3D(a0)
0001AEEA 6700                       		beq.s	loc_18046
0001AEEC E1E8 0010                  		asl	obVelX(a0)
0001AEF0 E1E8 0012                  		asl	obVelY(a0)
0001AEF4                            
0001AEF4                            loc_18046:
0001AEF4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEF8 6000 FEEC                  		bra.w	loc_17F38
0001AEFC                            ; ===========================================================================
0001AEFC                            
0001AEFC                            loc_1804E:
0001AEFC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AF02 5428 003F                  		addq.b	#2,$3F(a0)
0001AF06 1028 003F                  		move.b	$3F(a0),d0
0001AF0A 4EB9 0000 37AE             		jsr	(CalcSine).l
0001AF10 4A41                       		tst.w	d1
0001AF12 6A00                       		bpl.s	loc_1806C
0001AF14 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AF1A                            
0001AF1A                            loc_1806C:
0001AF1A E840                       		asr.w	#4,d0
0001AF1C 4840                       		swap	d0
0001AF1E 4240                       		clr.w	d0
0001AF20 D0A8 0030                  		add.l	$30(a0),d0
0001AF24 4840                       		swap	d0
0001AF26 3140 0008                  		move.w	d0,obX(a0)
0001AF2A 3028 0012                  		move.w	obVelY(a0),d0
0001AF2E 3238 D00C                  		move.w	(v_player+obY).w,d1
0001AF32 9268 000C                  		sub.w	obY(a0),d1
0001AF36 6500                       		bcs.s	loc_180A2
0001AF38 0441 0048                  		subi.w	#$48,d1
0001AF3C 6500                       		bcs.s	loc_180A2
0001AF3E E240                       		asr.w	#1,d0
0001AF40 0441 0028                  		subi.w	#$28,d1
0001AF44 6500                       		bcs.s	loc_180A2
0001AF46 E240                       		asr.w	#1,d0
0001AF48 0441 0028                  		subi.w	#$28,d1
0001AF4C 6500                       		bcs.s	loc_180A2
0001AF4E 7000                       		moveq	#0,d0
0001AF50                            
0001AF50                            loc_180A2:
0001AF50 48C0                       		ext.l	d0
0001AF52 E180                       		asl.l	#8,d0
0001AF54 4A28 003D                  		tst.b	$3D(a0)
0001AF58 6700                       		beq.s	loc_180AE
0001AF5A D080                       		add.l	d0,d0
0001AF5C                            
0001AF5C                            loc_180AE:
0001AF5C D1A8 0038                  		add.l	d0,$38(a0)
0001AF60 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AF66 6000 FE8E                  		bra.w	loc_17F48
0001AF6A                            ; ===========================================================================
0001AF6A                            
0001AF6A                            loc_180BC:
0001AF6A 70FE                       		moveq	#-2,d0
0001AF6C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001AF72 6500                       		bcs.s	loc_180D2
0001AF74 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001AF7A 4268 0010                  		clr.w	obVelX(a0)
0001AF7E 5240                       		addq.w	#1,d0
0001AF80                            
0001AF80                            loc_180D2:
0001AF80 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001AF86 6E00                       		bgt.s	loc_180E6
0001AF88 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001AF8E 4268 0012                  		clr.w	obVelY(a0)
0001AF92 5240                       		addq.w	#1,d0
0001AF94                            
0001AF94                            loc_180E6:
0001AF94 6600                       		bne.s	loc_180F2
0001AF96 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF9A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AFA0                            
0001AFA0                            loc_180F2:
0001AFA0 6000 FE44                  		bra.w	loc_17F38
0001AFA4                            ; ===========================================================================
0001AFA4                            
0001AFA4                            loc_180F6:
0001AFA4 4A28 003D                  		tst.b	$3D(a0)
0001AFA8 6600                       		bne.s	loc_18112
0001AFAA 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001AFB0 6D00                       		blt.s	loc_18126
0001AFB2 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001AFB8 6E00                       		bgt.s	loc_18126
0001AFBA 117C 0032 003C             		move.b	#$32,$3C(a0)
0001AFC0                            
0001AFC0                            loc_18112:
0001AFC0 4A38 FE2D                          tst.b     (v_invinc).w
0001AFC4 6600                               bne.s   @boss_invinc
0001AFC6                            
0001AFC6 1038 F5C6                          move.b   (v_Saved_music),d0
0001AFCA 6000 0000                          bra.w      @boss_play
0001AFCE                            
0001AFCE                            @boss_invinc:
0001AFCE 103C 0000                          move.b #bgm_Invincible,d0
0001AFD2                            
0001AFD2                            @boss_play:
0001AFD2 4EB8 0FC6                          jsr PlaySound
0001AFD6 4238 F7AA                          clr.b    (f_lockscreen).w
0001AFDA 08E8 0000 0022                     bset    #0,obStatus(a0)
0001AFE0 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001AFE4                            
0001AFE4                            loc_18126:
0001AFE4 6000 FE00                  		bra.w	loc_17F38
0001AFE8                            ; ===========================================================================
0001AFE8                            
0001AFE8                            loc_1812A:
0001AFE8 4A28 003D                  		tst.b	$3D(a0)
0001AFEC 6600                       		bne.s	loc_18136
0001AFEE 5328 003C                  		subq.b	#1,$3C(a0)
0001AFF2 6600                       		bne.s	loc_1814E
0001AFF4                            
0001AFF4                            loc_18136:
0001AFF4 4228 003C                  		clr.b	$3C(a0)
0001AFF8 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AFFE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B004 4228 003D                  		clr.b	$3D(a0)
0001B008 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B00C                            
0001B00C                            loc_1814E:
0001B00C 6000 FDD8                  		bra.w	loc_17F38
0001B010                            ; ===========================================================================
0001B010                            
0001B010                            loc_18152:
0001B010 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B016 6400                       		bcc.s	loc_18160
0001B018 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B01C 6000                       		bra.s	loc_18166
0001B01E                            ; ===========================================================================
0001B01E                            
0001B01E                            loc_18160:
0001B01E 4A28 0001                  		tst.b	obRender(a0)
0001B022 6A00                       		bpl.s	Obj77_ShipDel
0001B024                            
0001B024                            loc_18166:
0001B024 6000 FDC0                  		bra.w	loc_17F38
0001B028                            ; ===========================================================================
0001B028                            
0001B028                            Obj77_ShipDel:
0001B028 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B02E                            ; ===========================================================================
0001B02E                            
0001B02E                            Obj77_FaceMain:	; Routine 4
0001B02E 2268 0034                  		movea.l	$34(a0),a1
0001B032 1011                       		move.b	(a1),d0
0001B034 B010                       		cmp.b	(a0),d0
0001B036 6600                       		bne.s	Obj77_FaceDel
0001B038 7000                       		moveq	#0,d0
0001B03A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B03E 7201                       		moveq	#1,d1
0001B040 4A28 003D                  		tst.b	$3D(a0)
0001B044 6700                       		beq.s	loc_1818C
0001B046 720A                       		moveq	#$A,d1
0001B048 6000                       		bra.s	loc_181A0
0001B04A                            ; ===========================================================================
0001B04A                            
0001B04A                            loc_1818C:
0001B04A 4A29 0020                  		tst.b	obColType(a1)
0001B04E 6600                       		bne.s	loc_18196
0001B050 7205                       		moveq	#5,d1
0001B052 6000                       		bra.s	loc_181A0
0001B054                            ; ===========================================================================
0001B054                            
0001B054                            loc_18196:
0001B054 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B05A 6500                       		bcs.s	loc_181A0
0001B05C 7204                       		moveq	#4,d1
0001B05E                            
0001B05E                            loc_181A0:
0001B05E 1141 001C                  		move.b	d1,obAnim(a0)
0001B062 0C00 000E                  		cmpi.b	#$E,d0
0001B066 6600                       		bne.s	loc_181B6
0001B068 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B06E 4A28 0001                  		tst.b	obRender(a0)
0001B072 6A00                       		bpl.s	Obj77_FaceDel
0001B074                            
0001B074                            loc_181B6:
0001B074 6000                       		bra.s	Obj77_Display
0001B076                            ; ===========================================================================
0001B076                            
0001B076                            Obj77_FaceDel:
0001B076 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B07C                            ; ===========================================================================
0001B07C                            
0001B07C                            Obj77_FlameMain:; Routine 6
0001B07C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B082 2268 0034                  		movea.l	$34(a0),a1
0001B086 1011                       		move.b	(a1),d0
0001B088 B010                       		cmp.b	(a0),d0
0001B08A 6600                       		bne.s	Obj77_FlameDel
0001B08C 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B092 6600                       		bne.s	loc_181F0
0001B094 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B09A 4A28 0001                  		tst.b	1(a0)
0001B09E 6A00                       		bpl.s	Obj77_FlameDel
0001B0A0 6000                       		bra.s	loc_181F0
0001B0A2                            ; ===========================================================================
0001B0A2 4A69 0010                  		tst.w	obVelX(a1)
0001B0A6 6700                       		beq.s	loc_181F0
0001B0A8 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B0AE                            
0001B0AE                            loc_181F0:
0001B0AE 6000                       		bra.s	Obj77_Display
0001B0B0                            ; ===========================================================================
0001B0B0                            
0001B0B0                            Obj77_FlameDel:
0001B0B0 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B0B6                            ; ===========================================================================
0001B0B6                            
0001B0B6                            Obj77_Display:
0001B0B6 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001B0BC 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001B0C2 2268 0034                  		movea.l	$34(a0),a1
0001B0C6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B0CC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B0D2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B0D8 7003                       		moveq	#3,d0
0001B0DA C028 0022                  		and.b	obStatus(a0),d0
0001B0DE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B0E4 8128 0001                  		or.b	d0,obRender(a0)
0001B0E8 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001B0E8 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001B0EE                            		include	"_incObj\73 Boss - Marble.asm"
0001B0EE                            ; ---------------------------------------------------------------------------
0001B0EE                            ; Object 73 - Eggman (MZ)
0001B0EE                            ; ---------------------------------------------------------------------------
0001B0EE                            
0001B0EE                            BossMarble:
0001B0EE 7000                       		moveq	#0,d0
0001B0F0 1028 0024                  		move.b	obRoutine(a0),d0
0001B0F4 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B0F8 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B0FC                            ; ===========================================================================
0001B0FC 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B0FE 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B100 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B102 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B104 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B106                            
0001B106 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B10A 0401 0200                  		dc.b 4,	1, $02, $00
0001B10E 0607 0200                  		dc.b 6,	7, $02, $00
0001B112 0800 0180                  		dc.b 8,	0, $01, $80
0001B116                            ; ===========================================================================
0001B116                            
0001B116                            Obj73_Main:	; Routine 0
0001B116 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B11C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B122 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B128 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B12E 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B132 2248                       		movea.l	a0,a1
0001B134 7203                       		moveq	#3,d1
0001B136 6000                       		bra.s	Obj73_LoadBoss
0001B138                            ; ===========================================================================
0001B138                            
0001B138                            Obj73_Loop:
0001B138 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001B13E 6600                       		bne.s	Obj73_ShipMain
0001B140 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B144 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B14A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B150                            
0001B150                            Obj73_LoadBoss:
0001B150 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B156 4229 0025                  		clr.b	ob2ndRout(a1)
0001B15A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B15E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B162 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B166 237C 0001 AB94 0004        		move.l	#Map_Eggman,obMap(a1)
0001B16E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B174 137C 0004 0001             		move.b	#4,obRender(a1)
0001B17A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B180 2348 0034                  		move.l	a0,$34(a1)
0001B184 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B188                            
0001B188                            Obj73_ShipMain:	; Routine 2
0001B188 7000                       		moveq	#0,d0
0001B18A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B18E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B192 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B196 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001B19C 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001B1A2 7003                       		moveq	#3,d0
0001B1A4 C028 0022                  		and.b	obStatus(a0),d0
0001B1A8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B1AE 8128 0001                  		or.b	d0,obRender(a0)
0001B1B2 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001B1B8                            ; ===========================================================================
0001B1B8 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B1BA 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B1BC 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B1BE 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B1C0 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B1C2                            ; ===========================================================================
0001B1C2                            
0001B1C2                            loc_18302:
0001B1C2 1028 003F                  		move.b	$3F(a0),d0
0001B1C6 5428 003F                  		addq.b	#2,$3F(a0)
0001B1CA 4EB9 0000 37AE             		jsr	(CalcSine).l
0001B1D0 E440                       		asr.w	#2,d0
0001B1D2 3140 0012                  		move.w	d0,obVelY(a0)
0001B1D6 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B1DC 6100 F552                  		bsr.w	BossMove
0001B1E0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B1E6 6600                       		bne.s	loc_18334
0001B1E8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1EC 4228 0028                  		clr.b	obSubtype(a0)
0001B1F0 42A8 0010                  		clr.l	obVelX(a0)
0001B1F4                            
0001B1F4                            loc_18334:
0001B1F4 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B1FA 1140 0034                  		move.b	d0,$34(a0)
0001B1FE                            
0001B1FE                            loc_1833E:
0001B1FE 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B204 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B20A 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B210 6400                       		bcc.s	locret_18390
0001B212 4A28 0022                  		tst.b	obStatus(a0)
0001B216 6B00                       		bmi.s	loc_18392
0001B218 4A28 0020                  		tst.b	obColType(a0)
0001B21C 6600                       		bne.s	locret_18390
0001B21E 4A28 003E                  		tst.b	$3E(a0)
0001B222 6600                       		bne.s	loc_18374
0001B224 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B234                            
0001B234                            loc_18374:
0001B234 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B238 7000                       		moveq	#0,d0
0001B23A 4A51                       		tst.w	(a1)
0001B23C 6600                       		bne.s	loc_18382
0001B23E 303C 0EEE                  		move.w	#cWhite,d0
0001B242                            
0001B242                            loc_18382:
0001B242 3280                       		move.w	d0,(a1)
0001B244 5328 003E                  		subq.b	#1,$3E(a0)
0001B248 6600                       		bne.s	locret_18390
0001B24A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B250                            
0001B250                            locret_18390:
0001B250 4E75                       		rts	
0001B252                            ; ===========================================================================
0001B252                            
0001B252                            loc_18392:
0001B252 7064                       		moveq	#100,d0
0001B254 6100 0000                  		bsr.w	AddPoints
0001B258 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B25E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B264 4268 0010                  		clr.w	obVelX(a0)
0001B268 4E75                       		rts	
0001B26A                            ; ===========================================================================
0001B26A                            
0001B26A                            loc_183AA:
0001B26A 7000                       		moveq	#0,d0
0001B26C 1028 0028                  		move.b	obSubtype(a0),d0
0001B270 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B274 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B278 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B27E 6000 FF7E                  		bra.w	loc_1833E
0001B282                            ; ===========================================================================
0001B282 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B284 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B286 0000                       		dc.w loc_183CA-off_183C2
0001B288 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B28A                            ; ===========================================================================
0001B28A                            
0001B28A                            loc_183CA:
0001B28A 4A68 0010                  		tst.w	obVelX(a0)
0001B28E 6600                       		bne.s	loc_183FE
0001B290 7040                       		moveq	#$40,d0
0001B292 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B298 6700                       		beq.s	loc_183E6
0001B29A 6500                       		bcs.s	loc_183DE
0001B29C 4440                       		neg.w	d0
0001B29E                            
0001B29E                            loc_183DE:
0001B29E 3140 0012                  		move.w	d0,obVelY(a0)
0001B2A2 6000 F48C                  		bra.w	BossMove
0001B2A6                            ; ===========================================================================
0001B2A6                            
0001B2A6                            loc_183E6:
0001B2A6 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B2AC 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B2B2 0828 0000 0022             		btst	#0,obStatus(a0)
0001B2B8 6600                       		bne.s	loc_183FE
0001B2BA 4468 0010                  		neg.w	obVelX(a0)
0001B2BE                            
0001B2BE                            loc_183FE:
0001B2BE 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B2C4 6400                       		bcc.s	Obj73_MakeLava
0001B2C6 6100 F468                  		bsr.w	BossMove
0001B2CA 5968 0012                  		subq.w	#4,obVelY(a0)
0001B2CE                            
0001B2CE                            Obj73_MakeLava:
0001B2CE 5328 0034                  		subq.b	#1,$34(a0)
0001B2D2 6400                       		bcc.s	loc_1845C
0001B2D4 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001B2DA 6600                       		bne.s	loc_1844A
0001B2DC 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B2E0 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B2E6 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B2EC 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B2F2 80FC 0050                  		divu.w	#$50,d0
0001B2F6 4840                       		swap	d0
0001B2F8 0640 1878                  		addi.w	#$1878,d0
0001B2FC 3340 0008                  		move.w	d0,obX(a1)
0001B300 EE09                       		lsr.b	#7,d1
0001B302 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B308                            
0001B308                            loc_1844A:
0001B308 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B30E 0200 001F                  		andi.b	#$1F,d0
0001B312 0600 0040                  		addi.b	#$40,d0
0001B316 1140 0034                  		move.b	d0,$34(a0)
0001B31A                            
0001B31A                            loc_1845C:
0001B31A 0828 0000 0022             		btst	#0,obStatus(a0)
0001B320 6700                       		beq.s	loc_18474
0001B322 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B328 6D00                       		blt.s	locret_1849C
0001B32A 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B330 6000                       		bra.s	loc_18482
0001B332                            ; ===========================================================================
0001B332                            
0001B332                            loc_18474:
0001B332 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B338 6E00                       		bgt.s	locret_1849C
0001B33A 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B340                            
0001B340                            loc_18482:
0001B340 4268 0010                  		clr.w	obVelX(a0)
0001B344 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B34A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B350 6400                       		bcc.s	loc_18498
0001B352 4468 0012                  		neg.w	obVelY(a0)
0001B356                            
0001B356                            loc_18498:
0001B356 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B35A                            
0001B35A                            locret_1849C:
0001B35A 4E75                       		rts	
0001B35C                            ; ===========================================================================
0001B35C                            
0001B35C                            Obj73_MakeLava2:
0001B35C 6100 F3D2                  		bsr.w	BossMove
0001B360 3028 0038                  		move.w	$38(a0),d0
0001B364 0440 022C                  		subi.w	#$22C,d0
0001B368 6E00                       		bgt.s	locret_184F4
0001B36A 303C 022C                  		move.w	#$22C,d0
0001B36E 4A68 0012                  		tst.w	obVelY(a0)
0001B372 6700                       		beq.s	loc_184EA
0001B374 4268 0012                  		clr.w	obVelY(a0)
0001B378 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B37E 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B384 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001B38A 6600                       		bne.s	loc_184EA
0001B38C 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B392 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B398 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B39E 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B3A2 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B3A8                            
0001B3A8                            loc_184EA:
0001B3A8 5368 003C                  		subq.w	#1,$3C(a0)
0001B3AC 6600                       		bne.s	locret_184F4
0001B3AE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B3B2                            
0001B3B2                            locret_184F4:
0001B3B2 4E75                       		rts	
0001B3B4                            ; ===========================================================================
0001B3B4                            
0001B3B4                            loc_184F6:
0001B3B4 5368 003C                  		subq.w	#1,$3C(a0)
0001B3B8 6B00                       		bmi.s	loc_18500
0001B3BA 6000 F332                  		bra.w	BossDefeated
0001B3BE                            ; ===========================================================================
0001B3BE                            
0001B3BE                            loc_18500:
0001B3BE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B3C4 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B3CA 4268 0010                  		clr.w	obVelX(a0)
0001B3CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B3D2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B3D8 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B3DC 6600                       		bne.s	locret_1852A
0001B3DE 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B3E4 4268 0012                  		clr.w	obVelY(a0)
0001B3E8                            
0001B3E8                            locret_1852A:
0001B3E8 4E75                       		rts	
0001B3EA                            ; ===========================================================================
0001B3EA                            
0001B3EA                            loc_1852C:
0001B3EA 5268 003C                  		addq.w	#1,$3C(a0)
0001B3EE 6700                       		beq.s	loc_18544
0001B3F0 6A00                       		bpl.s	loc_1854E
0001B3F2 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B3F8 6400                       		bcc.s	loc_18544
0001B3FA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B400 6000                       		bra.s	loc_1857A
0001B402                            ; ===========================================================================
0001B402                            
0001B402                            loc_18544:
0001B402 4268 0012                  		clr.w	obVelY(a0)
0001B406 4268 003C                  		clr.w	$3C(a0)
0001B40A 6000                       		bra.s	loc_1857A
0001B40C                            ; ===========================================================================
0001B40C                            
0001B40C                            loc_1854E:
0001B40C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B412 6500                       		bcs.s	loc_18566
0001B414 6700                       		beq.s	loc_1856C
0001B416 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B41C 6500                       		bcs.s	loc_1857A
0001B41E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B422 6000                       		bra.s	loc_1857A
0001B424                            ; ===========================================================================
0001B424                            
0001B424                            loc_18566:
0001B424 5168 0012                  		subq.w	#8,obVelY(a0)
0001B428 6000                       		bra.s	loc_1857A
0001B42A                            ; ===========================================================================
0001B42A                            
0001B42A                            loc_1856C:
0001B42A 4268 0012                  		clr.w	obVelY(a0)
0001B438                            
0001B438                            loc_1857A:
0001B438 6100 F2F6                  		bsr.w	BossMove
0001B43C 6000 FDC0                  		bra.w	loc_1833E
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            loc_18582:
0001B440 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B446 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B44C 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B452 6400                       		bcc.s	loc_1859C
0001B454 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B458 6000                       		bra.s	loc_185A2
0001B45A                            ; ===========================================================================
0001B45A                            
0001B45A                            loc_1859C:
0001B45A 4A28 0001                  		tst.b	obRender(a0)
0001B45E 6A00                       		bpl.s	Obj73_ShipDel
0001B460                            
0001B460                            loc_185A2:
0001B460 6100 F2CE                  		bsr.w	BossMove
0001B464 6000 FD98                  		bra.w	loc_1833E
0001B468                            ; ===========================================================================
0001B468                            
0001B468                            Obj73_ShipDel:
0001B468 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B46E                            ; ===========================================================================
0001B46E                            
0001B46E                            Obj73_FaceMain:	; Routine 4
0001B46E 7000                       		moveq	#0,d0
0001B470 7201                       		moveq	#1,d1
0001B472 2268 0034                  		movea.l	$34(a0),a1
0001B476 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B47A 5540                       		subq.w	#2,d0
0001B47C 6600                       		bne.s	loc_185D2
0001B47E 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B484 6700                       		beq.s	loc_185DA
0001B486 4A69 0012                  		tst.w	obVelY(a1)
0001B48A 6600                       		bne.s	loc_185DA
0001B48C 7204                       		moveq	#4,d1
0001B48E 6000                       		bra.s	loc_185EE
0001B490                            ; ===========================================================================
0001B490                            
0001B490                            loc_185D2:
0001B490 5500                       		subq.b	#2,d0
0001B492 6B00                       		bmi.s	loc_185DA
0001B494 720A                       		moveq	#$A,d1
0001B496 6000                       		bra.s	loc_185EE
0001B498                            ; ===========================================================================
0001B498                            
0001B498                            loc_185DA:
0001B498 4A29 0020                  		tst.b	obColType(a1)
0001B49C 6600                       		bne.s	loc_185E4
0001B49E 7205                       		moveq	#5,d1
0001B4A0 6000                       		bra.s	loc_185EE
0001B4A2                            ; ===========================================================================
0001B4A2                            
0001B4A2                            loc_185E4:
0001B4A2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B4A8 6500                       		bcs.s	loc_185EE
0001B4AA 7204                       		moveq	#4,d1
0001B4AC                            
0001B4AC                            loc_185EE:
0001B4AC 1141 001C                  		move.b	d1,obAnim(a0)
0001B4B0 5900                       		subq.b	#4,d0
0001B4B2 6600                       		bne.s	loc_18602
0001B4B4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B4BA 4A28 0001                  		tst.b	obRender(a0)
0001B4BE 6A00                       		bpl.s	Obj73_FaceDel
0001B4C0                            
0001B4C0                            loc_18602:
0001B4C0 6000                       		bra.s	Obj73_Display
0001B4C2                            ; ===========================================================================
0001B4C2                            
0001B4C2                            Obj73_FaceDel:
0001B4C2 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B4C8                            ; ===========================================================================
0001B4C8                            
0001B4C8                            Obj73_FlameMain:; Routine 6
0001B4C8 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B4CE 2268 0034                  		movea.l	$34(a0),a1
0001B4D2 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B4D8 6D00                       		blt.s	loc_1862A
0001B4DA 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B4E0 4A28 0001                  		tst.b	obRender(a0)
0001B4E4 6A00                       		bpl.s	Obj73_FlameDel
0001B4E6 6000                       		bra.s	loc_18636
0001B4E8                            ; ===========================================================================
0001B4E8                            
0001B4E8                            loc_1862A:
0001B4E8 4A69 0010                  		tst.w	obVelX(a1)
0001B4EC 6700                       		beq.s	loc_18636
0001B4EE 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B4F4                            
0001B4F4                            loc_18636:
0001B4F4 6000                       		bra.s	Obj73_Display
0001B4F6                            ; ===========================================================================
0001B4F6                            
0001B4F6                            Obj73_FlameDel:
0001B4F6 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B4FC                            ; ===========================================================================
0001B4FC                            
0001B4FC                            Obj73_Display:
0001B4FC 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001B502 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001B508                            
0001B508                            loc_1864A:
0001B508 2268 0034                  		movea.l	$34(a0),a1
0001B50C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B512 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B518 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B51E 7003                       		moveq	#3,d0
0001B520 C028 0022                  		and.b	obStatus(a0),d0
0001B524 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B52A 8128 0001                  		or.b	d0,obRender(a0)
0001B52E 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001B534                            ; ===========================================================================
0001B534                            
0001B534                            Obj73_TubeMain:	; Routine 8
0001B534 2268 0034                  		movea.l	$34(a0),a1
0001B538 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B53E 6600                       		bne.s	loc_18688
0001B540 4A28 0001                  		tst.b	obRender(a0)
0001B544 6A00                       		bpl.s	Obj73_TubeDel
0001B546                            
0001B546                            loc_18688:
0001B546 217C 0001 AC84 0004        		move.l	#Map_BossItems,obMap(a0)
0001B54E 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B554 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B55A 60AC                       		bra.s	loc_1864A
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            Obj73_TubeDel:
0001B55C 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B55C 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B562                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B562                            ; ---------------------------------------------------------------------------
0001B562                            ; Object 74 - lava that	Eggman drops (MZ)
0001B562                            ; ---------------------------------------------------------------------------
0001B562                            
0001B562                            BossFire:
0001B562 7000                       		moveq	#0,d0
0001B564 1028 0024                  		move.b	obRoutine(a0),d0
0001B568 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B56C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B570 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001B576                            ; ===========================================================================
0001B576 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B578 0000                       		dc.w Obj74_Action-Obj74_Index
0001B57A 0000                       		dc.w loc_18886-Obj74_Index
0001B57C 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B57E                            ; ===========================================================================
0001B57E                            
0001B57E                            Obj74_Main:	; Routine 0
0001B57E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B584 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B58A 217C 0000 D3FC 0004        		move.l	#Map_Fire,obMap(a0)
0001B592 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B598 117C 0004 0001             		move.b	#4,obRender(a0)
0001B59E 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B5A4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B5AA 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B5B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B5B4 4A28 0028                  		tst.b	obSubtype(a0)
0001B5B8 6600                       		bne.s	loc_1870A
0001B5BA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B5C0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B5C4 6000 0000                  		bra.w	loc_18886
0001B5C8                            ; ===========================================================================
0001B5C8                            
0001B5C8                            loc_1870A:
0001B5C8 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B5D8                            
0001B5D8                            Obj74_Action:	; Routine 2
0001B5D8 7000                       		moveq	#0,d0
0001B5DA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B5DE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B5E2 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B5E6 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001B5EC 43F9 0001 05C2             		lea	(Ani_Fire).l,a1
0001B5F2 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001B5F8 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B5FE 6200                       		bhi.s	Obj74_Delete
0001B600 4E75                       		rts	
0001B602                            ; ===========================================================================
0001B602                            
0001B602                            Obj74_Delete:
0001B602 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B608                            ; ===========================================================================
0001B608 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B60A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B60C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B60E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B610                            ; ===========================================================================
0001B610                            
0001B610                            Obj74_Drop:
0001B610 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B616 5328 0029                  		subq.b	#1,$29(a0)
0001B61A 6A00                       		bpl.s	locret_18780
0001B61C 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B622 4228 0028                  		clr.b	obSubtype(a0)
0001B626 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B62C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B632 6100 C634                  		bsr.w	ObjFloorDist
0001B636 4A41                       		tst.w	d1
0001B638 6A00                       		bpl.s	locret_18780
0001B63A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B63E                            
0001B63E                            locret_18780:
0001B63E 4E75                       		rts	
0001B640                            ; ===========================================================================
0001B640                            
0001B640                            Obj74_MakeFlame:
0001B640 5568 000C                  		subq.w	#2,obY(a0)
0001B644 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B64A 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B650 4268 0012                  		clr.w	obVelY(a0)
0001B654 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B65A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B660 117C 0003 0029             		move.b	#3,$29(a0)
0001B666 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001B66C 6600                       		bne.s	loc_187CA
0001B66E 47D1                       		lea	(a1),a3
0001B670 45D0                       		lea	(a0),a2
0001B672 7003                       		moveq	#3,d0
0001B674                            
0001B674                            Obj74_Loop:
0001B674 26DA                       		move.l	(a2)+,(a3)+
0001B676 26DA                       		move.l	(a2)+,(a3)+
0001B678 26DA                       		move.l	(a2)+,(a3)+
0001B67A 26DA                       		move.l	(a2)+,(a3)+
0001B67C 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B680                            
0001B680 4469 0010                  		neg.w	obVelX(a1)
0001B684 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B688                            
0001B688                            loc_187CA:
0001B688 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B68C 4E75                       		rts	
0001B68E                            
0001B68E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B68E                            
0001B68E                            
0001B68E                            Obj74_Duplicate2:
0001B68E 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001B694 6600                       		bne.s	locret_187EE
0001B696 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B69C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B6A2 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B6A6 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B6AC                            
0001B6AC                            locret_187EE:
0001B6AC 4E75                       		rts	
0001B6AE                            ; End of function Obj74_Duplicate2
0001B6AE                            
0001B6AE                            ; ===========================================================================
0001B6AE                            
0001B6AE                            Obj74_Duplicate:
0001B6AE 6100 C5B8                  		bsr.w	ObjFloorDist
0001B6B2 4A41                       		tst.w	d1
0001B6B4 6A00                       		bpl.s	loc_18826
0001B6B6 3028 0008                  		move.w	obX(a0),d0
0001B6BA 0C40 1940                  		cmpi.w	#$1940,d0
0001B6BE 6E00                       		bgt.s	loc_1882C
0001B6C0 3228 0030                  		move.w	$30(a0),d1
0001B6C4 B240                       		cmp.w	d0,d1
0001B6C6 6700                       		beq.s	loc_1881E
0001B6C8 0240 0010                  		andi.w	#$10,d0
0001B6CC 0241 0010                  		andi.w	#$10,d1
0001B6D0 B240                       		cmp.w	d0,d1
0001B6D2 6700                       		beq.s	loc_1881E
0001B6D4 61B8                       		bsr.s	Obj74_Duplicate2
0001B6D6 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B6DC                            
0001B6DC                            loc_1881E:
0001B6DC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B6E2 4E75                       		rts	
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            loc_18826:
0001B6E4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6E8 4E75                       		rts	
0001B6EA                            ; ===========================================================================
0001B6EA                            
0001B6EA                            loc_1882C:
0001B6EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B6EE 4E75                       		rts	
0001B6F0                            ; ===========================================================================
0001B6F0                            
0001B6F0                            Obj74_FallEdge:
0001B6F0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B6F6 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B6FC 3028 0008                  		move.w	obX(a0),d0
0001B700 9068 0032                  		sub.w	$32(a0),d0
0001B704 6A00                       		bpl.s	loc_1884A
0001B706 4440                       		neg.w	d0
0001B708                            
0001B708                            loc_1884A:
0001B708 0C40 0012                  		cmpi.w	#$12,d0
0001B70C 6600                       		bne.s	loc_18856
0001B70E 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B714                            
0001B714                            loc_18856:
0001B714 6100 C552                  		bsr.w	ObjFloorDist
0001B718 4A41                       		tst.w	d1
0001B71A 6A00                       		bpl.s	locret_1887E
0001B71C 5328 0029                  		subq.b	#1,$29(a0)
0001B720 6700                       		beq.s	Obj74_Delete2
0001B722 4268 0012                  		clr.w	obVelY(a0)
0001B726 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B72C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B732 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B738 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B73C                            
0001B73C                            locret_1887E:
0001B73C 4E75                       		rts	
0001B73E                            ; ===========================================================================
0001B73E                            
0001B73E                            Obj74_Delete2:
0001B73E 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B744                            ; ===========================================================================
0001B744                            
0001B744                            loc_18886:	; Routine 4
0001B744 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B74A 5328 0029                  		subq.b	#1,$29(a0)
0001B74E 6600                       		bne.s	Obj74_Animate
0001B750 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B756 5968 000C                  		subq.w	#4,obY(a0)
0001B75A 4228 0020                  		clr.b	obColType(a0)
0001B75E                            
0001B75E                            Obj74_Animate:
0001B75E 43F9 0001 05C2             		lea	(Ani_Fire).l,a1
0001B764 4EF9 0000 C7AA             		jmp	(AnimateSprite).l
0001B76A                            ; ===========================================================================
0001B76A                            
0001B76A                            Obj74_Delete3:	; Routine 6
0001B76A 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B76A 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B770                            
0001B770                            	Obj7A_Delete:
0001B770 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001B776                            
0001B776                            		include	"_incObj\7A Boss - Star Light.asm"
0001B776                            ; ---------------------------------------------------------------------------
0001B776                            ; Object 7A - Eggman (SLZ)
0001B776                            ; ---------------------------------------------------------------------------
0001B776                            
0001B776                            BossStarLight:
0001B776 7000                       		moveq	#0,d0
0001B778 1028 0024                  		move.b	obRoutine(a0),d0
0001B77C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B780 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B784                            ; ===========================================================================
0001B784 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B786 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B788 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B78A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B78C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B78E                            
0001B78E 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B792 0401 0200                  		dc.b 4,	1, $02, $00
0001B796 0607 0200                  		dc.b 6,	7, $02, $00
0001B79A 0800 0180                  		dc.b 8,	0, $01, $80
0001B79E                            ; ===========================================================================
0001B79E                            
0001B79E                            Obj7A_Main:
0001B79E 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B7A4 317C 0228 000C             		move.w	#$228,obY(a0)
0001B7AA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B7B0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B7B6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B7BC 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B7C2 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B7C6 2248                       		movea.l	a0,a1
0001B7C8 7203                       		moveq	#3,d1
0001B7CA 6000                       		bra.s	Obj7A_LoadBoss
0001B7CC                            ; ===========================================================================
0001B7CC                            
0001B7CC                            Obj7A_Loop:
0001B7CC 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001B7D2 6600                       		bne.s	loc_1895C
0001B7D4 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B7D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B7DE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B7E4                            
0001B7E4                            Obj7A_LoadBoss:
0001B7E4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B7EA 4229 0025                  		clr.b	ob2ndRout(a1)
0001B7EE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B7F2 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B7F6 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B7FA 237C 0001 AB94 0004        		move.l	#Map_Eggman,obMap(a1)
0001B802 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B808 137C 0004 0001             		move.b	#4,obRender(a1)
0001B80E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B814 2348 0034                  		move.l	a0,$34(a1)
0001B818 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B81C                            
0001B81C                            loc_1895C:
0001B81C 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B820 45E8 002A                  		lea	$2A(a0),a2
0001B824 705E                       		moveq	#$5E,d0
0001B826 723E                       		moveq	#$3E,d1
0001B828                            
0001B828                            loc_18968:
0001B828 B011                       		cmp.b	(a1),d0
0001B82A 6600                       		bne.s	loc_18974
0001B82C 4A29 0028                  		tst.b	obSubtype(a1)
0001B830 6700                       		beq.s	loc_18974
0001B832 34C9                       		move.w	a1,(a2)+
0001B834                            
0001B834                            loc_18974:
0001B834 D2FC 0040                  		adda.w	#$40,a1
0001B838 51C9 FFEE                  		dbf	d1,loc_18968
0001B83C                            
0001B83C                            Obj7A_ShipMain:	; Routine 2
0001B83C 7000                       		moveq	#0,d0
0001B83E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B842 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B846 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B84A 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001B850 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001B856 7003                       		moveq	#3,d0
0001B858 C028 0022                  		and.b	obStatus(a0),d0
0001B85C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B862 8128 0001                  		or.b	d0,obRender(a0)
0001B866 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001B86C                            ; ===========================================================================
0001B86C 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B86E 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B870 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B872 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B874 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B876 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B878                            ; ===========================================================================
0001B878                            
0001B878                            loc_189B8:
0001B878 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B87E 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B884 6400                       		bcc.s	loc_189CA
0001B886 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B88A                            
0001B88A                            loc_189CA:
0001B88A 6100 EEA4                  		bsr.w	BossMove
0001B88E 1028 003F                  		move.b	$3F(a0),d0
0001B892 5428 003F                  		addq.b	#2,$3F(a0)
0001B896 4EB9 0000 37AE             		jsr	(CalcSine).l
0001B89C EC40                       		asr.w	#6,d0
0001B89E D068 0038                  		add.w	$38(a0),d0
0001B8A2 3140 000C                  		move.w	d0,obY(a0)
0001B8A6 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B8AC 6000                       		bra.s	loc_189FE
0001B8AE                            ; ===========================================================================
0001B8AE                            
0001B8AE                            loc_189EE:
0001B8AE 6100 EE80                  		bsr.w	BossMove
0001B8B2 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B8B8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B8BE                            
0001B8BE                            loc_189FE:
0001B8BE 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001B8C4 6400                       		bcc.s	locret_18A44
0001B8C6 4A28 0022                  		tst.b	obStatus(a0)
0001B8CA 6B00                       		bmi.s	loc_18A46
0001B8CC 4A28 0020                  		tst.b	obColType(a0)
0001B8D0 6600                       		bne.s	locret_18A44
0001B8D2 4A28 003E                  		tst.b	$3E(a0)
0001B8D6 6600                       		bne.s	loc_18A28
0001B8D8 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B8E8                            
0001B8E8                            loc_18A28:
0001B8E8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B8EC 7000                       		moveq	#0,d0
0001B8EE 4A51                       		tst.w	(a1)
0001B8F0 6600                       		bne.s	loc_18A36
0001B8F2 303C 0EEE                  		move.w	#cWhite,d0
0001B8F6                            
0001B8F6                            loc_18A36:
0001B8F6 3280                       		move.w	d0,(a1)
0001B8F8 5328 003E                  		subq.b	#1,$3E(a0)
0001B8FC 6600                       		bne.s	locret_18A44
0001B8FE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B904                            
0001B904                            locret_18A44:
0001B904 4E75                       		rts	
0001B906                            ; ===========================================================================
0001B906                            
0001B906                            loc_18A46:
0001B906 7064                       		moveq	#100,d0
0001B908 6100 0000                  		bsr.w	AddPoints
0001B90C 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001B912 117C 0078 003C             		move.b	#$78,$3C(a0)
0001B918 4268 0010                  		clr.w	obVelX(a0)
0001B91C 4E75                       		rts	
0001B91E                            ; ===========================================================================
0001B91E                            
0001B91E                            loc_18A5E:
0001B91E 3028 0030                  		move.w	$30(a0),d0
0001B922 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B928 0828 0000 0022             		btst	#0,obStatus(a0)
0001B92E 6600                       		bne.s	loc_18A7C
0001B930 4468 0010                  		neg.w	obVelX(a0)
0001B934 0C40 2008                  		cmpi.w	#$2008,d0
0001B938 6E00                       		bgt.s	loc_18A88
0001B93A 6000                       		bra.s	loc_18A82
0001B93C                            ; ===========================================================================
0001B93C                            
0001B93C                            loc_18A7C:
0001B93C 0C40 2138                  		cmpi.w	#$2138,d0
0001B940 6D00                       		blt.s	loc_18A88
0001B942                            
0001B942                            loc_18A82:
0001B942 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B948                            
0001B948                            loc_18A88:
0001B948 3028 0008                  		move.w	8(a0),d0
0001B94C 72FF                       		moveq	#-1,d1
0001B94E 7402                       		moveq	#2,d2
0001B950 45E8 002A                  		lea	$2A(a0),a2
0001B954 7828                       		moveq	#$28,d4
0001B956 4A68 0010                  		tst.w	obVelX(a0)
0001B95A 6A00                       		bpl.s	loc_18A9E
0001B95C 4444                       		neg.w	d4
0001B95E                            
0001B95E                            loc_18A9E:
0001B95E 321A                       		move.w	(a2)+,d1
0001B960 2641                       		movea.l	d1,a3
0001B962 082B 0003 0022             		btst	#3,obStatus(a3)
0001B968 6600                       		bne.s	loc_18AB4
0001B96A 362B 0008                  		move.w	8(a3),d3
0001B96E D644                       		add.w	d4,d3
0001B970 9640                       		sub.w	d0,d3
0001B972 6700                       		beq.s	loc_18AC0
0001B974                            
0001B974                            loc_18AB4:
0001B974 51CA FFE8                  		dbf	d2,loc_18A9E
0001B978                            
0001B978 1142 0028                  		move.b	d2,obSubtype(a0)
0001B97C 6000 FF0C                  		bra.w	loc_189CA
0001B980                            ; ===========================================================================
0001B980                            
0001B980                            loc_18AC0:
0001B980 1142 0028                  		move.b	d2,obSubtype(a0)
0001B984 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B988 117C 0028 003C             		move.b	#$28,$3C(a0)
0001B98E 6000 FEFA                  		bra.w	loc_189CA
0001B992                            ; ===========================================================================
0001B992                            
0001B992                            Obj7A_MakeBall:
0001B992 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001B998 6600                       		bne.s	loc_18B36
0001B99A 70FF                       		moveq	#-1,d0
0001B99C 1028 0028                  		move.b	obSubtype(a0),d0
0001B9A0 4880                       		ext.w	d0
0001B9A2 6B00                       		bmi.s	loc_18B40
0001B9A4 5540                       		subq.w	#2,d0
0001B9A6 4440                       		neg.w	d0
0001B9A8 D040                       		add.w	d0,d0
0001B9AA 43E8 002A                  		lea	$2A(a0),a1
0001B9AE 3031 0000                  		move.w	(a1,d0.w),d0
0001B9B2 2440                       		movea.l	d0,a2
0001B9B4 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B9B8 723E                       		moveq	#$3E,d1
0001B9BA                            
0001B9BA                            loc_18AFA:
0001B9BA B0A9 003C                  		cmp.l	$3C(a1),d0
0001B9BE 6700                       		beq.s	loc_18B40
0001B9C0 D2FC 0040                  		adda.w	#$40,a1
0001B9C4 51C9 FFF4                  		dbf	d1,loc_18AFA
0001B9C8                            
0001B9C8 2F08                       		move.l	a0,-(sp)
0001B9CA 41D2                       		lea	(a2),a0
0001B9CC 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001B9D2 205F                       		movea.l	(sp)+,a0
0001B9D4 6600                       		bne.s	loc_18B40
0001B9D6 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001B9DA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B9E0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B9E6 0669 0020 000C             		addi.w	#$20,obY(a1)
0001B9EC 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001B9F2 234A 003C                  		move.l	a2,$3C(a1)
0001B9F6                            
0001B9F6                            loc_18B36:
0001B9F6 5328 003C                  		subq.b	#1,$3C(a0)
0001B9FA 6700                       		beq.s	loc_18B40
0001B9FC 6000 FEC0                  		bra.w	loc_189FE
0001BA00                            ; ===========================================================================
0001BA00                            
0001BA00                            loc_18B40:
0001BA00 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BA04 6000 FE84                  		bra.w	loc_189CA
0001BA08                            ; ===========================================================================
0001BA08                            
0001BA08                            loc_18B48:
0001BA08 5328 003C                  		subq.b	#1,$3C(a0)
0001BA0C 6B00                       		bmi.s	loc_18B52
0001BA0E 6000 ECDE                  		bra.w	BossDefeated
0001BA12                            ; ===========================================================================
0001BA12                            
0001BA12                            loc_18B52:
0001BA12 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA16 4268 0012                  		clr.w	obVelY(a0)
0001BA1A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BA20 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BA26 4268 0010                  		clr.w	obVelX(a0)
0001BA2A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BA30 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BA34 6600                       		bne.s	loc_18B7C
0001BA36 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BA3C                            
0001BA3C                            loc_18B7C:
0001BA3C 6000 FE80                  		bra.w	loc_189FE
0001BA40                            ; ===========================================================================
0001BA40                            
0001BA40                            loc_18B80:
0001BA40 5228 003C                  		addq.b	#1,$3C(a0)
0001BA44 6700                       		beq.s	loc_18B90
0001BA46 6A00                       		bpl.s	loc_18B96
0001BA48 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BA4E 6000                       		bra.s	loc_18BC2
0001BA50                            ; ===========================================================================
0001BA50                            
0001BA50                            loc_18B90:
0001BA50 4268 0012                  		clr.w	obVelY(a0)
0001BA54 6000                       		bra.s	loc_18BC2
0001BA56                            ; ===========================================================================
0001BA56                            
0001BA56                            loc_18B96:
0001BA56 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BA5C 6500                       		bcs.s	loc_18BAE
0001BA5E 6700                       		beq.s	loc_18BB4
0001BA60 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BA66 6500                       		bcs.s	loc_18BC2
0001BA68 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA6C 6000                       		bra.s	loc_18BC2
0001BA6E                            ; ===========================================================================
0001BA6E                            
0001BA6E                            loc_18BAE:
0001BA6E 5168 0012                  		subq.w	#8,obVelY(a0)
0001BA72 6000                       		bra.s	loc_18BC2
0001BA74                            ; ===========================================================================
0001BA74                            
0001BA74                            loc_18BB4:
0001BA74 4268 0012                          	clr.w    obVelY(a0)
0001BA78 4A38 FE2D                          	tst.b     (v_invinc).w
0001BA7C 6600                               	bne.s   @boss_invinc
0001BA7E                            
0001BA7E 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BA82 6000 0000                          	bra.w      @boss_play
0001BA86                            
0001BA86                            	@boss_invinc:
0001BA86 103C 0000                          	move.b #bgm_Invincible,d0
0001BA8A                            
0001BA8A                            	@boss_play:
0001BA8A 4EB8 0FC6                          	jsr PlaySound
0001BA8E                            
0001BA8E                            loc_18BC2:
0001BA8E 6000 FE1E                  		bra.w	loc_189EE
0001BA92                            ; ===========================================================================
0001BA92                            
0001BA92                            loc_18BC6:
0001BA92 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BA98 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BA9E 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BAA4 6400                       		bcc.s	loc_18BE0
0001BAA6 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BAAA 6000                       		bra.s	loc_18BE8
0001BAAC                            ; ===========================================================================
0001BAAC                            
0001BAAC                            loc_18BE0:
0001BAAC 4A28 0001                  		tst.b	obRender(a0)
0001BAB0 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BAB4                            
0001BAB4                            loc_18BE8:
0001BAB4 6100 EC7A                  		bsr.w	BossMove
0001BAB8 6000 FDD0                  		bra.w	loc_189CA
0001BABC                            ; ===========================================================================
0001BABC                            
0001BABC                            Obj7A_FaceMain:	; Routine 4
0001BABC 7000                       		moveq	#0,d0
0001BABE 7201                       		moveq	#1,d1
0001BAC0 2268 0034                  		movea.l	$34(a0),a1
0001BAC4 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BAC8 0C00 0006                  		cmpi.b	#6,d0
0001BACC 6B00                       		bmi.s	loc_18C06
0001BACE 720A                       		moveq	#$A,d1
0001BAD0 6000                       		bra.s	loc_18C1A
0001BAD2                            ; ===========================================================================
0001BAD2                            
0001BAD2                            loc_18C06:
0001BAD2 4A29 0020                  		tst.b	obColType(a1)
0001BAD6 6600                       		bne.s	loc_18C10
0001BAD8 7205                       		moveq	#5,d1
0001BADA 6000                       		bra.s	loc_18C1A
0001BADC                            ; ===========================================================================
0001BADC                            
0001BADC                            loc_18C10:
0001BADC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BAE2 6500                       		bcs.s	loc_18C1A
0001BAE4 7204                       		moveq	#4,d1
0001BAE6                            
0001BAE6                            loc_18C1A:
0001BAE6 1141 001C                  		move.b	d1,obAnim(a0)
0001BAEA 0C00 000A                  		cmpi.b	#$A,d0
0001BAEE 6600                       		bne.s	loc_18C32
0001BAF0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BAF6 4A28 0001                  		tst.b	obRender(a0)
0001BAFA 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BAFE                            
0001BAFE                            loc_18C32:
0001BAFE 6000                       		bra.s	loc_18C6C
0001BB00                            ; ===========================================================================
0001BB00                            
0001BB00                            Obj7A_FlameMain:; Routine 6
0001BB00 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BB06 2268 0034                  		movea.l	$34(a0),a1
0001BB0A 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BB10 6600                       		bne.s	loc_18C56
0001BB12 4A28 0001                  		tst.b	obRender(a0)
0001BB16 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BB1A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BB20 6000                       		bra.s	loc_18C6C
0001BB22                            ; ===========================================================================
0001BB22                            
0001BB22                            loc_18C56:
0001BB22 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BB28 6E00                       		bgt.s	loc_18C6C
0001BB2A 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BB30 6D00                       		blt.s	loc_18C6C
0001BB32 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BB38                            
0001BB38                            loc_18C6C:
0001BB38 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001BB3E 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001BB44                            
0001BB44                            loc_18C78:
0001BB44 2268 0034                  		movea.l	$34(a0),a1
0001BB48 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BB4E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BB54 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BB5A 7003                       		moveq	#3,d0
0001BB5C C028 0022                  		and.b	obStatus(a0),d0
0001BB60 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BB66 8128 0001                  		or.b	d0,obRender(a0)
0001BB6A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001BB70                            ; ===========================================================================
0001BB70                            
0001BB70                            Obj7A_TubeMain:	; Routine 8
0001BB70 2268 0034                  		movea.l	$34(a0),a1
0001BB74 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BB7A 6600                       		bne.s	loc_18CB8
0001BB7C 4A28 0001                  		tst.b	obRender(a0)
0001BB80 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BB84                            
0001BB84                            loc_18CB8:
0001BB84 217C 0001 AC84 0004        		move.l	#Map_BossItems,obMap(a0)
0001BB8C 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BB92 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BB98 60AA                       		bra.s	loc_18C78
0001BB98 60AA                       		bra.s	loc_18C78
0001BB9A                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BB9A                            ; ---------------------------------------------------------------------------
0001BB9A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BB9A                            ; ---------------------------------------------------------------------------
0001BB9A                            
0001BB9A                            BossSpikeball:
0001BB9A 7000                       		moveq	#0,d0
0001BB9C 1028 0024                  		move.b	obRoutine(a0),d0
0001BBA0 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BBA4 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BBA8 3028 0030                  		move.w	$30(a0),d0
0001BBAC 0240 FF80                  		andi.w	#$FF80,d0
0001BBB0 3238 F700                  		move.w	(v_screenposx).w,d1
0001BBB4 0441 0080                  		subi.w	#$80,d1
0001BBB8 0241 FF80                  		andi.w	#$FF80,d1
0001BBBC 9041                       		sub.w	d1,d0
0001BBBE 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BBC2 0C40 0280                  		cmpi.w	#$280,d0
0001BBC6 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BBCA 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001BBD0                            ; ===========================================================================
0001BBD0 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BBD2 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BBD4 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BBD6 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BBD8 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BBDA 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BBDC                            ; ===========================================================================
0001BBDC                            
0001BBDC                            Obj7B_Main:	; Routine 0
0001BBDC 217C 0001 3B72 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BBE4 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BBEA 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BBF0 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BBF6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BBFC 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BC02 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BC08 2268 003C                  		movea.l	$3C(a0),a1
0001BC0C 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BC12 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BC18 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BC1E 3028 0008                  		move.w	obX(a0),d0
0001BC22 B069 0008                  		cmp.w	obX(a1),d0
0001BC26 6E00                       		bgt.s	loc_18D68
0001BC28 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BC2E 117C 0002 003A             		move.b	#2,$3A(a0)
0001BC34                            
0001BC34                            loc_18D68:
0001BC34 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BC38                            
0001BC38                            Obj7B_Fall:	; Routine 2
0001BC38 4EB9 0000 F6B2             		jsr	(ObjectFall).l
0001BC3E 2268 003C                  		movea.l	$3C(a0),a1
0001BC42 45F9 0000 0000             		lea	(word_19018).l,a2
0001BC48 7000                       		moveq	#0,d0
0001BC4A 1029 001A                  		move.b	obFrame(a1),d0
0001BC4E 3228 0008                  		move.w	8(a0),d1
0001BC52 9268 0030                  		sub.w	$30(a0),d1
0001BC56 6400                       		bcc.s	loc_18D8E
0001BC58 5440                       		addq.w	#2,d0
0001BC5A                            
0001BC5A                            loc_18D8E:
0001BC5A D040                       		add.w	d0,d0
0001BC5C 3228 0034                  		move.w	$34(a0),d1
0001BC60 D272 0000                  		add.w	(a2,d0.w),d1
0001BC64 B268 000C                  		cmp.w	obY(a0),d1
0001BC68 6E00                       		bgt.s	locret_18DC4
0001BC6A 2268 003C                  		movea.l	$3C(a0),a1
0001BC6E 7202                       		moveq	#2,d1
0001BC70 0828 0000 0022             		btst	#0,obStatus(a0)
0001BC76 6700                       		beq.s	loc_18DAE
0001BC78 7200                       		moveq	#0,d1
0001BC7A                            
0001BC7A                            loc_18DAE:
0001BC7A 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BC80 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BC86 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BC8C 6000 0000                  		bra.w	loc_18FA2
0001BC90                            ; ===========================================================================
0001BC90                            
0001BC90                            locret_18DC4:
0001BC90 4E75                       		rts	
0001BC92                            ; ===========================================================================
0001BC92                            
0001BC92                            loc_18DC6:	; Routine 4
0001BC92 2268 003C                  		movea.l	$3C(a0),a1
0001BC96 7000                       		moveq	#0,d0
0001BC98 1028 003A                  		move.b	$3A(a0),d0
0001BC9C 9029 003A                  		sub.b	$3A(a1),d0
0001BCA0 6700                       		beq.s	loc_18E2A
0001BCA2 6400                       		bcc.s	loc_18DDA
0001BCA4 4400                       		neg.b	d0
0001BCA6                            
0001BCA6                            loc_18DDA:
0001BCA6 323C F7E8                  		move.w	#-$818,d1
0001BCAA 343C FEEC                  		move.w	#-$114,d2
0001BCAE 0C00 0001                  		cmpi.b	#1,d0
0001BCB2 6700                       		beq.s	loc_18E00
0001BCB4 323C F6A0                  		move.w	#-$960,d1
0001BCB8 343C FF0C                  		move.w	#-$F4,d2
0001BCBC 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BCC2 6D00                       		blt.s	loc_18E00
0001BCC4 323C F5E0                  		move.w	#-$A20,d1
0001BCC8 343C FF80                  		move.w	#-$80,d2
0001BCCC                            
0001BCCC                            loc_18E00:
0001BCCC 3141 0012                  		move.w	d1,obVelY(a0)
0001BCD0 3142 0010                  		move.w	d2,obVelX(a0)
0001BCD4 3028 0008                  		move.w	obX(a0),d0
0001BCD8 9068 0030                  		sub.w	$30(a0),d0
0001BCDC 6400                       		bcc.s	loc_18E16
0001BCDE 4468 0010                  		neg.w	obVelX(a0)
0001BCE2                            
0001BCE2                            loc_18E16:
0001BCE2 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BCE8 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BCEE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BCF2 6000 0000                  		bra.w	loc_18EAA
0001BCF6                            ; ===========================================================================
0001BCF6                            
0001BCF6                            loc_18E2A:
0001BCF6 45F9 0000 0000             		lea	(word_19018).l,a2
0001BCFC 7000                       		moveq	#0,d0
0001BCFE 1029 001A                  		move.b	obFrame(a1),d0
0001BD02 343C 0028                  		move.w	#$28,d2
0001BD06 3228 0008                  		move.w	obX(a0),d1
0001BD0A 9268 0030                  		sub.w	$30(a0),d1
0001BD0E 6400                       		bcc.s	loc_18E48
0001BD10 4442                       		neg.w	d2
0001BD12 5440                       		addq.w	#2,d0
0001BD14                            
0001BD14                            loc_18E48:
0001BD14 D040                       		add.w	d0,d0
0001BD16 3228 0034                  		move.w	$34(a0),d1
0001BD1A D272 0000                  		add.w	(a2,d0.w),d1
0001BD1E 3141 000C                  		move.w	d1,obY(a0)
0001BD22 D468 0030                  		add.w	$30(a0),d2
0001BD26 3142 0008                  		move.w	d2,obX(a0)
0001BD2A 4268 000E                  		clr.w	obY+2(a0)
0001BD2E 4268 000A                  		clr.w	obX+2(a0)
0001BD32 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BD36 6600                       		bne.s	loc_18E7A
0001BD38 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BD3E 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BD44 4E75                       		rts	
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            loc_18E7A:
0001BD46 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BD4C 6600                       		bne.s	loc_18E88
0001BD4E 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BD54                            
0001BD54                            loc_18E88:
0001BD54 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BD5A 6600                       		bne.s	loc_18E96
0001BD5C 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BD62                            
0001BD62                            loc_18E96:
0001BD62 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BD66 6E00                       		bgt.s	locret_18EA8
0001BD68 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BD6E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BD74                            
0001BD74                            locret_18EA8:
0001BD74 4E75                       		rts	
0001BD76                            ; ===========================================================================
0001BD76                            
0001BD76                            loc_18EAA:	; Routine 6
0001BD76 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BD7A 707A                       		moveq	#id_BossStarLight,d0
0001BD7C 7240                       		moveq	#$40,d1
0001BD7E 743E                       		moveq	#$3E,d2
0001BD80                            
0001BD80                            loc_18EB4:
0001BD80 B011                       		cmp.b	(a1),d0
0001BD82 6700                       		beq.s	loc_18EC0
0001BD84 D2C1                       		adda.w	d1,a1
0001BD86 51CA FFF8                  		dbf	d2,loc_18EB4
0001BD8A                            
0001BD8A 6000                       		bra.s	loc_18F38
0001BD8C                            ; ===========================================================================
0001BD8C                            
0001BD8C                            loc_18EC0:
0001BD8C 3029 0008                  		move.w	obX(a1),d0
0001BD90 3229 000C                  		move.w	obY(a1),d1
0001BD94 3428 0008                  		move.w	obX(a0),d2
0001BD98 3628 000C                  		move.w	obY(a0),d3
0001BD9C 45FA 0000                  		lea	byte_19022(pc),a2
0001BDA0 47FA 0000                  		lea	byte_19026(pc),a3
0001BDA4 181A                       		move.b	(a2)+,d4
0001BDA6 4884                       		ext.w	d4
0001BDA8 D044                       		add.w	d4,d0
0001BDAA 181B                       		move.b	(a3)+,d4
0001BDAC 4884                       		ext.w	d4
0001BDAE D444                       		add.w	d4,d2
0001BDB0 B440                       		cmp.w	d0,d2
0001BDB2 6500                       		bcs.s	loc_18F38
0001BDB4 181A                       		move.b	(a2)+,d4
0001BDB6 4884                       		ext.w	d4
0001BDB8 D044                       		add.w	d4,d0
0001BDBA 181B                       		move.b	(a3)+,d4
0001BDBC 4884                       		ext.w	d4
0001BDBE D444                       		add.w	d4,d2
0001BDC0 B042                       		cmp.w	d2,d0
0001BDC2 6500                       		bcs.s	loc_18F38
0001BDC4 181A                       		move.b	(a2)+,d4
0001BDC6 4884                       		ext.w	d4
0001BDC8 D244                       		add.w	d4,d1
0001BDCA 181B                       		move.b	(a3)+,d4
0001BDCC 4884                       		ext.w	d4
0001BDCE D644                       		add.w	d4,d3
0001BDD0 B641                       		cmp.w	d1,d3
0001BDD2 6500                       		bcs.s	loc_18F38
0001BDD4 181A                       		move.b	(a2)+,d4
0001BDD6 4884                       		ext.w	d4
0001BDD8 D244                       		add.w	d4,d1
0001BDDA 181B                       		move.b	(a3)+,d4
0001BDDC 4884                       		ext.w	d4
0001BDDE D644                       		add.w	d4,d3
0001BDE0 B243                       		cmp.w	d3,d1
0001BDE2 6500                       		bcs.s	loc_18F38
0001BDE4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BDE8 4268 0028                  		clr.w	obSubtype(a0)
0001BDEC 4229 0020                  		clr.b	obColType(a1)
0001BDF0 5329 0021                  		subq.b	#1,obColProp(a1)
0001BDF4 6600                       		bne.s	loc_18F38
0001BDF6 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BDFC 4268 0010                  		clr.w	obVelX(a0)
0001BE00 4268 0012                  		clr.w	obVelY(a0)
0001BE04                            
0001BE04                            loc_18F38:
0001BE04 4A68 0012                  		tst.w	obVelY(a0)
0001BE08 6A00                       		bpl.s	loc_18F5C
0001BE0A 4EB9 0000 F6B2             		jsr	(ObjectFall).l
0001BE10 3028 0034                  		move.w	$34(a0),d0
0001BE14 0440 002F                  		subi.w	#$2F,d0
0001BE18 B068 000C                  		cmp.w	obY(a0),d0
0001BE1C 6E00                       		bgt.s	loc_18F58
0001BE1E 4EB9 0000 F6B2             		jsr	(ObjectFall).l
0001BE24                            
0001BE24                            loc_18F58:
0001BE24 6000 FF20                  		bra.w	loc_18E7A
0001BE28                            ; ===========================================================================
0001BE28                            
0001BE28                            loc_18F5C:
0001BE28 4EB9 0000 F6B2             		jsr	(ObjectFall).l
0001BE2E 2268 003C                  		movea.l	$3C(a0),a1
0001BE32 45F9 0000 0000             		lea	(word_19018).l,a2
0001BE38 7000                       		moveq	#0,d0
0001BE3A 1029 001A                  		move.b	obFrame(a1),d0
0001BE3E 3228 0008                  		move.w	obX(a0),d1
0001BE42 9268 0030                  		sub.w	$30(a0),d1
0001BE46 6400                       		bcc.s	loc_18F7E
0001BE48 5440                       		addq.w	#2,d0
0001BE4A                            
0001BE4A                            loc_18F7E:
0001BE4A D040                       		add.w	d0,d0
0001BE4C 3228 0034                  		move.w	$34(a0),d1
0001BE50 D272 0000                  		add.w	(a2,d0.w),d1
0001BE54 B268 000C                  		cmp.w	obY(a0),d1
0001BE58 6ECA                       		bgt.s	loc_18F58
0001BE5A 2268 003C                  		movea.l	$3C(a0),a1
0001BE5E 7202                       		moveq	#2,d1
0001BE60 4A68 0010                  		tst.w	obVelX(a0)
0001BE64 6B00                       		bmi.s	loc_18F9C
0001BE66 7200                       		moveq	#0,d1
0001BE68                            
0001BE68                            loc_18F9C:
0001BE68 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BE6E                            
0001BE6E                            loc_18FA2:
0001BE6E 1341 003A                  		move.b	d1,$3A(a1)
0001BE72 1141 003A                  		move.b	d1,$3A(a0)
0001BE76 B229 001A                  		cmp.b	obFrame(a1),d1
0001BE7A 6700                       		beq.s	loc_19008
0001BE7C 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BE82 6700                       		beq.s	loc_19008
0001BE84 4229 0025                  		clr.b	ob2ndRout(a1)
0001BE88 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BE8E 45F8 D000                  		lea	(v_objspace).w,a2
0001BE92 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BE98 446A 0012                  		neg.w	obVelY(a2)
0001BE9C 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BEA2 6600                       		bne.s	loc_18FDC
0001BEA4 E0EA 0012                  		asr	obVelY(a2)
0001BEA8                            
0001BEA8                            loc_18FDC:
0001BEA8 08EA 0001 0022             		bset	#1,obStatus(a2)
0001BEAE 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001BEB4 422A 003C                  		clr.b	$3C(a2)
0001BEB8 2F08                       		move.l	a0,-(sp)
0001BEBA 41D2                       		lea	(a2),a0
0001BEBC 4EB9 0001 5D58             		jsr	(Sonic_ChkRoll).l
0001BEC2 205F                       		movea.l	(sp)+,a0
0001BEC4 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001BED4                            
0001BED4                            loc_19008:
0001BED4 4268 0010                  		clr.w	obVelX(a0)
0001BED8 4268 0012                  		clr.w	obVelY(a0)
0001BEDC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEE0 6000 FE64                  		bra.w	loc_18E7A
0001BEE4                            ; ===========================================================================
0001BEE4 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001BEEE                            		even
0001BEEE E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001BEF2                            		even
0001BEF2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001BEF6                            		even
0001BEF6                            ; ===========================================================================
0001BEF6                            
0001BEF6                            Obj7B_Explode:	; Routine 8
0001BEF6 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001BEFA 4228 0024                  		clr.b	obRoutine(a0)
0001BEFE 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001BF04 6700                       		beq.s	Obj7B_MakeFrag
0001BF06 4E75                       		rts	
0001BF08                            ; ===========================================================================
0001BF08                            
0001BF08                            Obj7B_MakeFrag:
0001BF08 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001BF0E 7203                       		moveq	#3,d1
0001BF10 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001BF14                            
0001BF14                            Obj7B_Loop:
0001BF14 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001BF1A 6600                       		bne.s	loc_1909A
0001BF1C 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001BF20 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001BF26 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001BF2E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001BF34 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001BF3A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BF40 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BF46 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001BF4A 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001BF4E 137C 0098 0020             		move.b	#$98,obColType(a1)
0001BF54 0029 0004 0001             		ori.b	#4,obRender(a1)
0001BF5A 08E9 0007 0001             		bset	#7,obRender(a1)
0001BF60 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001BF66                            
0001BF66                            loc_1909A:
0001BF66 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001BF6A                            
0001BF6A 4E75                       		rts	
0001BF6C                            ; ===========================================================================
0001BF6C FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001BF70 FF60 FDC0                  		dc.w -$A0, -$240
0001BF74 0100 FCC0                  		dc.w $100, -$340
0001BF78 00A0 FDC0                  		dc.w $A0, -$240
0001BF7C                            ; ===========================================================================
0001BF7C                            
0001BF7C                            Obj7B_MoveFrag:	; Routine $A
0001BF7C 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001BF82 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BF88 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001BF8E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BF94 7004                       		moveq	#4,d0
0001BF96 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001BF9A E448                       		lsr.w	#2,d0
0001BF9C 1140 001A                  		move.b	d0,obFrame(a0)
0001BFA0 4A28 0001                  		tst.b	1(a0)
0001BFA4 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001BFA8 4E75                       		rts	
0001BFA8 4E75                       		rts	
0001BFAA                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            Map_BSBall_internal:
0001BFAA 0000                       		dc.w @fireball1-Map_BSBall_internal
0001BFAC 0000                       		dc.w @fireball2-Map_BSBall_internal
0001BFAE 01                         @fireball1:	dc.b 1
0001BFAF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001BFB4 01                         @fireball2:	dc.b 1
0001BFB5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001BFBA                            		even
0001BFBA                            		even
0001BFBA                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001BFBA                            ; ---------------------------------------------------------------------------
0001BFBA                            ; Object 75 - Eggman (SYZ)
0001BFBA                            ; ---------------------------------------------------------------------------
0001BFBA                            
0001BFBA                            BossSpringYard:
0001BFBA 7000                       		moveq	#0,d0
0001BFBC 1028 0024                  		move.b	obRoutine(a0),d0
0001BFC0 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001BFC4 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001BFC8                            ; ===========================================================================
0001BFC8 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001BFCA 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001BFCC 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001BFCE 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001BFD0 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001BFD2                            
0001BFD2 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001BFD6 0401 0280                  		dc.b 4,	1, $02, $80
0001BFDA 0607 0280                  		dc.b 6,	7, $02, $80
0001BFDE 0800 0280                  		dc.b 8,	0, $02, $80
0001BFE2                            ; ===========================================================================
0001BFE2                            
0001BFE2                            Obj75_Main:	; Routine 0
0001BFE2 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001BFE8 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001BFEE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BFF4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BFFA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C000 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C006 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C00A 2248                       		movea.l	a0,a1
0001C00C 7203                       		moveq	#3,d1
0001C00E 6000                       		bra.s	Obj75_LoadBoss
0001C010                            ; ===========================================================================
0001C010                            
0001C010                            Obj75_Loop:
0001C010 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001C016 6600                       		bne.s	Obj75_ShipMain
0001C018 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C01C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C022 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C028                            
0001C028                            Obj75_LoadBoss:
0001C028 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C02E 4229 0025                  		clr.b	ob2ndRout(a1)
0001C032 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C036 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C03A 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C03E 237C 0001 AB94 0004        		move.l	#Map_Eggman,obMap(a1)
0001C046 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C04C 137C 0004 0001             		move.b	#4,obRender(a1)
0001C052 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C058 2348 0034                  		move.l	a0,$34(a1)
0001C05C 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C060                            
0001C060                            Obj75_ShipMain:	; Routine 2
0001C060 7000                       		moveq	#0,d0
0001C062 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C066 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C06A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C06E 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001C074 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001C07A 7003                       		moveq	#3,d0
0001C07C C028 0022                  		and.b	obStatus(a0),d0
0001C080 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C086 8128 0001                  		or.b	d0,obRender(a0)
0001C08A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001C090                            ; ===========================================================================
0001C090 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C094 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C098 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C09C                            ; ===========================================================================
0001C09C                            
0001C09C                            loc_191CC:
0001C09C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C0A2 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C0A8 6400                       		bcc.s	loc_191DE
0001C0AA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C0AE                            
0001C0AE                            loc_191DE:
0001C0AE 1028 003F                  		move.b	$3F(a0),d0
0001C0B2 5428 003F                  		addq.b	#2,$3F(a0)
0001C0B6 4EB9 0000 37AE             		jsr	(CalcSine).l
0001C0BC E440                       		asr.w	#2,d0
0001C0BE 3140 0012                  		move.w	d0,obVelY(a0)
0001C0C2                            
0001C0C2                            loc_191F2:
0001C0C2 6100 E66C                  		bsr.w	BossMove
0001C0C6 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C0CC 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C0D2                            
0001C0D2                            loc_19202:
0001C0D2 3028 0008                  		move.w	8(a0),d0
0001C0D6 0440 2C00                  		subi.w	#$2C00,d0
0001C0DA EA48                       		lsr.w	#5,d0
0001C0DC 1140 0034                  		move.b	d0,$34(a0)
0001C0E0 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C0E6 6400                       		bcc.s	locret_19256
0001C0E8 4A28 0022                  		tst.b	obStatus(a0)
0001C0EC 6B00                       		bmi.s	loc_19258
0001C0EE 4A28 0020                  		tst.b	obColType(a0)
0001C0F2 6600                       		bne.s	locret_19256
0001C0F4 4A28 003E                  		tst.b	$3E(a0)
0001C0F8 6600                       		bne.s	loc_1923A
0001C0FA 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C10A                            
0001C10A                            loc_1923A:
0001C10A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C10E 7000                       		moveq	#0,d0
0001C110 4A51                       		tst.w	(a1)
0001C112 6600                       		bne.s	loc_19248
0001C114 303C 0EEE                  		move.w	#cWhite,d0
0001C118                            
0001C118                            loc_19248:
0001C118 3280                       		move.w	d0,(a1)
0001C11A 5328 003E                  		subq.b	#1,$3E(a0)
0001C11E 6600                       		bne.s	locret_19256
0001C120 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C126                            
0001C126                            locret_19256:
0001C126 4E75                       		rts	
0001C128                            ; ===========================================================================
0001C128                            
0001C128                            loc_19258:
0001C128 7064                       		moveq	#100,d0
0001C12A 6100 0000                  		bsr.w	AddPoints
0001C12E 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C134 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C13A 4268 0010                  		clr.w	obVelX(a0)
0001C13E 4E75                       		rts	
0001C140                            ; ===========================================================================
0001C140                            
0001C140                            loc_19270:
0001C140 3028 0030                  		move.w	$30(a0),d0
0001C144 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C14A 0828 0000 0022             		btst	#0,obStatus(a0)
0001C150 6600                       		bne.s	loc_1928E
0001C152 4468 0010                  		neg.w	obVelX(a0)
0001C156 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C15A 6E00                       		bgt.s	loc_1929E
0001C15C 6000                       		bra.s	loc_19294
0001C15E                            ; ===========================================================================
0001C15E                            
0001C15E                            loc_1928E:
0001C15E 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C162 6D00                       		blt.s	loc_1929E
0001C164                            
0001C164                            loc_19294:
0001C164 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C16A 4228 003D                  		clr.b	$3D(a0)
0001C16E                            
0001C16E                            loc_1929E:
0001C16E 0440 2C10                  		subi.w	#$2C10,d0
0001C172 0240 001F                  		andi.w	#$1F,d0
0001C176 0440 001F                  		subi.w	#$1F,d0
0001C17A 6A00                       		bpl.s	loc_192AE
0001C17C 4440                       		neg.w	d0
0001C17E                            
0001C17E                            loc_192AE:
0001C17E 5340                       		subq.w	#1,d0
0001C180 6E00                       		bgt.s	loc_192E8
0001C182 4A28 003D                  		tst.b	$3D(a0)
0001C186 6600                       		bne.s	loc_192E8
0001C188 3238 D008                  		move.w	(v_player+obX).w,d1
0001C18C 0441 2C00                  		subi.w	#$2C00,d1
0001C190 EA41                       		asr.w	#5,d1
0001C192 B228 0034                  		cmp.b	$34(a0),d1
0001C196 6600                       		bne.s	loc_192E8
0001C198 7000                       		moveq	#0,d0
0001C19A 1028 0034                  		move.b	$34(a0),d0
0001C19E EB40                       		asl.w	#5,d0
0001C1A0 0640 2C10                  		addi.w	#$2C10,d0
0001C1A4 3140 0030                  		move.w	d0,$30(a0)
0001C1A8 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C1AC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C1B0 4268 0028                  		clr.w	obSubtype(a0)
0001C1B4 4268 0010                  		clr.w	obVelX(a0)
0001C1B8                            
0001C1B8                            loc_192E8:
0001C1B8 6000 FEF4                  		bra.w	loc_191DE
0001C1BC                            ; ===========================================================================
0001C1BC                            
0001C1BC                            loc_192EC:
0001C1BC 7000                       		moveq	#0,d0
0001C1BE 1028 0028                  		move.b	obSubtype(a0),d0
0001C1C2 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C1C6 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C1CA                            ; ===========================================================================
0001C1CA 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C1CC 0000                       		dc.w loc_19348-off_192FA
0001C1CE 0000                       		dc.w loc_1938E-off_192FA
0001C1D0 0000                       		dc.w loc_193D0-off_192FA
0001C1D2                            ; ===========================================================================
0001C1D2                            
0001C1D2                            loc_19302:
0001C1D2 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C1D8 3028 0038                  		move.w	$38(a0),d0
0001C1DC 0C40 0556                  		cmpi.w	#$556,d0
0001C1E0 6500                       		bcs.s	loc_19344
0001C1E2 317C 0556 0038             		move.w	#$556,$38(a0)
0001C1E8 4268 003C                  		clr.w	$3C(a0)
0001C1EC 70FF                       		moveq	#-1,d0
0001C1EE 3028 0036                  		move.w	$36(a0),d0
0001C1F2 6700                       		beq.s	loc_1933C
0001C1F4 2240                       		movea.l	d0,a1
0001C1F6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C1FC 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C202 2348 0034                  		move.l	a0,$34(a1)
0001C206 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C20C                            
0001C20C                            loc_1933C:
0001C20C 4268 0012                  		clr.w	obVelY(a0)
0001C210 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C214                            
0001C214                            loc_19344:
0001C214 6000 FEAC                  		bra.w	loc_191F2
0001C218                            ; ===========================================================================
0001C218                            
0001C218                            loc_19348:
0001C218 5368 003C                  		subq.w	#1,$3C(a0)
0001C21C 6A00                       		bpl.s	loc_19366
0001C21E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C222 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C228 4A68 0036                  		tst.w	$36(a0)
0001C22C 6600                       		bne.s	loc_19362
0001C22E E0E8 0012                  		asr	obVelY(a0)
0001C232                            
0001C232                            loc_19362:
0001C232 7000                       		moveq	#0,d0
0001C234 6000                       		bra.s	loc_1937C
0001C236                            ; ===========================================================================
0001C236                            
0001C236                            loc_19366:
0001C236 7000                       		moveq	#0,d0
0001C238 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C23E 6E00                       		bgt.s	loc_1937C
0001C240 7002                       		moveq	#2,d0
0001C242 0828 0001 003D             		btst	#1,$3D(a0)
0001C248 6700                       		beq.s	loc_1937C
0001C24A 4440                       		neg.w	d0
0001C24C                            
0001C24C                            loc_1937C:
0001C24C D068 0038                  		add.w	$38(a0),d0
0001C250 3140 000C                  		move.w	d0,obY(a0)
0001C254 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C25A 6000 FE76                  		bra.w	loc_19202
0001C25E                            ; ===========================================================================
0001C25E                            
0001C25E                            loc_1938E:
0001C25E 303C 04DA                  		move.w	#$4DA,d0
0001C262 4A68 0036                  		tst.w	$36(a0)
0001C266 6700                       		beq.s	loc_1939C
0001C268 0440 0018                  		subi.w	#$18,d0
0001C26C                            
0001C26C                            loc_1939C:
0001C26C B068 0038                  		cmp.w	$38(a0),d0
0001C270 6D00                       		blt.s	loc_193BE
0001C272 317C 0008 003C             		move.w	#8,$3C(a0)
0001C278 4A68 0036                  		tst.w	$36(a0)
0001C27C 6700                       		beq.s	loc_193B4
0001C27E 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C284                            
0001C284                            loc_193B4:
0001C284 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C288 4268 0012                  		clr.w	obVelY(a0)
0001C28C 6000                       		bra.s	loc_193CC
0001C28E                            ; ===========================================================================
0001C28E                            
0001C28E                            loc_193BE:
0001C28E 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C294 6C00                       		bge.s	loc_193CC
0001C296 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C29C                            
0001C29C                            loc_193CC:
0001C29C 6000 FE24                  		bra.w	loc_191F2
0001C2A0                            ; ===========================================================================
0001C2A0                            
0001C2A0                            loc_193D0:
0001C2A0 5368 003C                  		subq.w	#1,$3C(a0)
0001C2A4 6E00                       		bgt.s	loc_19406
0001C2A6 6B00                       		bmi.s	loc_193EE
0001C2A8 70FF                       		moveq	#-1,d0
0001C2AA 3028 0036                  		move.w	$36(a0),d0
0001C2AE 6700                       		beq.s	loc_193E8
0001C2B0 2240                       		movea.l	d0,a1
0001C2B2 137C 000A 0029             		move.b	#$A,$29(a1)
0001C2B8                            
0001C2B8                            loc_193E8:
0001C2B8 4268 0036                  		clr.w	$36(a0)
0001C2BC 6000                       		bra.s	loc_19406
0001C2BE                            ; ===========================================================================
0001C2BE                            
0001C2BE                            loc_193EE:
0001C2BE 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C2C4 6600                       		bne.s	loc_19406
0001C2C6 4228 0029                  		clr.b	$29(a0)
0001C2CA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C2CE 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C2D4 6000                       		bra.s	loc_19446
0001C2D6                            ; ===========================================================================
0001C2D6                            
0001C2D6                            loc_19406:
0001C2D6 7001                       		moveq	#1,d0
0001C2D8 4A68 0036                  		tst.w	$36(a0)
0001C2DC 6700                       		beq.s	loc_19410
0001C2DE 7002                       		moveq	#2,d0
0001C2E0                            
0001C2E0                            loc_19410:
0001C2E0 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C2E6 6700                       		beq.s	loc_19424
0001C2E8 6D00                       		blt.s	loc_1941C
0001C2EA 4440                       		neg.w	d0
0001C2EC                            
0001C2EC                            loc_1941C:
0001C2EC 4A68 0036                  		tst.w	$36(a0)
0001C2F0 D168 0038                  		add.w	d0,$38(a0)
0001C2F4                            
0001C2F4                            loc_19424:
0001C2F4 7000                       		moveq	#0,d0
0001C2F6 4A68 0036                  		tst.w	$36(a0)
0001C2FA 6700                       		beq.s	loc_19438
0001C2FC 7002                       		moveq	#2,d0
0001C2FE 0828 0000 003D             		btst	#0,$3D(a0)
0001C304 6700                       		beq.s	loc_19438
0001C306 4440                       		neg.w	d0
0001C308                            
0001C308                            loc_19438:
0001C308 D068 0038                  		add.w	$38(a0),d0
0001C30C 3140 000C                  		move.w	d0,obY(a0)
0001C310 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C316                            
0001C316                            loc_19446:
0001C316 6000 FDBA                  		bra.w	loc_19202
0001C31A                            
0001C31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C31A                            
0001C31A                            
0001C31A                            Obj75_FindBlocks:
0001C31A 4268 0036                  		clr.w	$36(a0)
0001C31E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C322 703E                       		moveq	#$3E,d0
0001C324 7276                       		moveq	#$76,d1
0001C326 1428 0034                  		move.b	$34(a0),d2
0001C32A                            
0001C32A                            Obj75_FindLoop:
0001C32A B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C32C 6600                       		bne.s	loc_1946A	; if not, branch
0001C32E B429 0028                  		cmp.b	obSubtype(a1),d2
0001C332 6600                       		bne.s	loc_1946A
0001C334 3149 0036                  		move.w	a1,$36(a0)
0001C338 6000                       		bra.s	locret_19472
0001C33A                            ; ===========================================================================
0001C33A                            
0001C33A                            loc_1946A:
0001C33A 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C33E 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C342                            
0001C342                            locret_19472:
0001C342 4E75                       		rts	
0001C344                            ; End of function Obj75_FindBlocks
0001C344                            
0001C344                            ; ===========================================================================
0001C344                            
0001C344                            loc_19474:
0001C344 5368 003C                  		subq.w	#1,$3C(a0)
0001C348 6B00                       		bmi.s	loc_1947E
0001C34A 6000 E3A2                  		bra.w	BossDefeated
0001C34E                            ; ===========================================================================
0001C34E                            
0001C34E                            loc_1947E:
0001C34E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C352 4268 0012                  		clr.w	obVelY(a0)
0001C356 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C35C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C362 4268 0010                  		clr.w	obVelX(a0)
0001C366 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C36C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C370 6600                       		bne.s	loc_194A8
0001C372 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C378                            
0001C378                            loc_194A8:
0001C378 6000 FD58                  		bra.w	loc_19202
0001C37C                            ; ===========================================================================
0001C37C                            
0001C37C                            loc_194AC:
0001C37C 5268 003C                  		addq.w	#1,$3C(a0)
0001C380 6700                       		beq.s	loc_194BC
0001C382 6A00                       		bpl.s	loc_194C2
0001C384 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C38A 6000                       		bra.s	loc_194EE
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            loc_194BC:
0001C38C 4268 0012                  		clr.w	obVelY(a0)
0001C390 6000                       		bra.s	loc_194EE
0001C392                            ; ===========================================================================
0001C392                            
0001C392                            loc_194C2:
0001C392 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C398 6500                       		bcs.s	loc_194DA
0001C39A 6700                       		beq.s	loc_194E0
0001C39C 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C3A2 6500                       		bcs.s	loc_194EE
0001C3A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3A8 6000                       		bra.s	loc_194EE
0001C3AA                            ; ===========================================================================
0001C3AA                            
0001C3AA                            loc_194DA:
0001C3AA 5168 0012                  		subq.w	#8,obVelY(a0)
0001C3AE 6000                       		bra.s	loc_194EE
0001C3B0                            ; ===========================================================================
0001C3B0                            
0001C3B0                            loc_194E0:
0001C3B0 4268 0012                  		clr.w    obVelY(a0)
0001C3B4 4A38 FE2D                          	tst.b     (v_invinc).w
0001C3B8 6600                               	bne.s   @boss_invinc
0001C3BA                            
0001C3BA 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C3BE 6000 0000                          	bra.w      @boss_play
0001C3C2                            
0001C3C2                            @boss_invinc:
0001C3C2 103C 0000                          	move.b #bgm_Invincible,d0
0001C3C6                            
0001C3C6                            @boss_play:
0001C3C6 4EB8 0FC6                          	jsr PlaySound
0001C3CA                            
0001C3CA                            loc_194EE:
0001C3CA 6000 FCF6                  		bra.w	loc_191F2
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            loc_194F2:
0001C3CE 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C3D4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C3DA 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C3E0 6400                       		bcc.s	loc_1950C
0001C3E2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C3E6 6000                       		bra.s	loc_19512
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            loc_1950C:
0001C3E8 4A28 0001                  		tst.b	obRender(a0)
0001C3EC 6A00                       		bpl.s	Obj75_ShipDelete
0001C3EE                            
0001C3EE                            loc_19512:
0001C3EE 6100 E340                  		bsr.w	BossMove
0001C3F2 6000 FCBA                  		bra.w	loc_191DE
0001C3F6                            ; ===========================================================================
0001C3F6                            
0001C3F6                            Obj75_ShipDelete:
0001C3F6 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001C3FC                            ; ===========================================================================
0001C3FC                            
0001C3FC                            Obj75_FaceMain:	; Routine 4
0001C3FC 7201                       		moveq	#1,d1
0001C3FE 2268 0034                  		movea.l	$34(a0),a1
0001C402 7000                       		moveq	#0,d0
0001C404 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C408 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C40C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C410 1141 001C                  		move.b	d1,obAnim(a0)
0001C414 1010                       		move.b	(a0),d0
0001C416 B011                       		cmp.b	(a1),d0
0001C418 6600                       		bne.s	Obj75_FaceDelete
0001C41A 6000                       		bra.s	loc_195BE
0001C41C                            ; ===========================================================================
0001C41C                            
0001C41C                            Obj75_FaceDelete:
0001C41C 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001C422                            ; ===========================================================================
0001C422 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C426 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C42A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C42E                            ; ===========================================================================
0001C42E                            
0001C42E                            loc_19552:
0001C42E 720A                       		moveq	#$A,d1
0001C430 4E75                       		rts	
0001C432                            ; ===========================================================================
0001C432                            
0001C432                            loc_19556:
0001C432 7206                       		moveq	#6,d1
0001C434 4E75                       		rts	
0001C436                            ; ===========================================================================
0001C436                            
0001C436                            loc_1955A:
0001C436 7000                       		moveq	#0,d0
0001C438 1029 0028                  		move.b	obSubtype(a1),d0
0001C43C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C440 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C444                            ; ===========================================================================
0001C444 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C448 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C44C                            ; ===========================================================================
0001C44C                            
0001C44C                            loc_19570:
0001C44C 6000                       		bra.s	loc_19574
0001C44E                            ; ===========================================================================
0001C44E                            
0001C44E                            loc_19572:
0001C44E 7206                       		moveq	#6,d1
0001C450                            
0001C450                            loc_19574:
0001C450 4A29 0020                  		tst.b	obColType(a1)
0001C454 6600                       		bne.s	loc_1957E
0001C456 7205                       		moveq	#5,d1
0001C458 4E75                       		rts	
0001C45A                            ; ===========================================================================
0001C45A                            
0001C45A                            loc_1957E:
0001C45A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C460 6500                       		bcs.s	locret_19588
0001C462 7204                       		moveq	#4,d1
0001C464                            
0001C464                            locret_19588:
0001C464 4E75                       		rts	
0001C466                            ; ===========================================================================
0001C466                            
0001C466                            Obj75_FlameMain:; Routine 6
0001C466 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C46C 2268 0034                  		movea.l	$34(a0),a1
0001C470 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C476 6600                       		bne.s	loc_195AA
0001C478 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C47E 4A28 0001                  		tst.b	1(a0)
0001C482 6A00                       		bpl.s	Obj75_FlameDelete
0001C484 6000                       		bra.s	loc_195B6
0001C486                            ; ===========================================================================
0001C486                            
0001C486                            loc_195AA:
0001C486 4A69 0010                  		tst.w	obVelX(a1)
0001C48A 6700                       		beq.s	loc_195B6
0001C48C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C492                            
0001C492                            loc_195B6:
0001C492 6000                       		bra.s	loc_195BE
0001C494                            ; ===========================================================================
0001C494                            
0001C494                            Obj75_FlameDelete:
0001C494 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001C49A                            ; ===========================================================================
0001C49A                            
0001C49A                            loc_195BE:
0001C49A 43F9 0001 AB44             		lea	(Ani_Eggman).l,a1
0001C4A0 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001C4A6 2268 0034                  		movea.l	$34(a0),a1
0001C4AA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C4B0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C4B6                            
0001C4B6                            loc_195DA:
0001C4B6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C4BC 7003                       		moveq	#3,d0
0001C4BE C028 0022                  		and.b	obStatus(a0),d0
0001C4C2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C4C8 8128 0001                  		or.b	d0,obRender(a0)
0001C4CC 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001C4D2                            ; ===========================================================================
0001C4D2                            
0001C4D2                            Obj75_SpikeMain:; Routine 8
0001C4D2 217C 0001 AC84 0004        		move.l	#Map_BossItems,obMap(a0)
0001C4DA 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C4E0 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C4E6 2268 0034                  		movea.l	$34(a0),a1
0001C4EA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C4F0 6600                       		bne.s	loc_1961C
0001C4F2 4A28 0001                  		tst.b	obRender(a0)
0001C4F6 6A00                       		bpl.s	Obj75_SpikeDelete
0001C4F8                            
0001C4F8                            loc_1961C:
0001C4F8 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C4FE 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C504 3028 003C                  		move.w	$3C(a0),d0
0001C508 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C50E 6600                       		bne.s	loc_19652
0001C510 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C516 6700                       		beq.s	loc_1964C
0001C518 4A29 0028                  		tst.b	obSubtype(a1)
0001C51C 6600                       		bne.s	loc_19658
0001C51E 0C40 0094                  		cmpi.w	#$94,d0
0001C522 6C00                       		bge.s	loc_19658
0001C524 5E40                       		addq.w	#7,d0
0001C526 6000                       		bra.s	loc_19658
0001C528                            ; ===========================================================================
0001C528                            
0001C528                            loc_1964C:
0001C528 4A69 003C                  		tst.w	$3C(a1)
0001C52C 6A00                       		bpl.s	loc_19658
0001C52E                            
0001C52E                            loc_19652:
0001C52E 4A40                       		tst.w	d0
0001C530 6F00                       		ble.s	loc_19658
0001C532 5B40                       		subq.w	#5,d0
0001C534                            
0001C534                            loc_19658:
0001C534 3140 003C                  		move.w	d0,$3C(a0)
0001C538 E440                       		asr.w	#2,d0
0001C53A D168 000C                  		add.w	d0,obY(a0)
0001C53E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C544 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C54A 4228 0020                  		clr.b	obColType(a0)
0001C54E 2268 0034                  		movea.l	$34(a0),a1
0001C552 4A29 0020                  		tst.b	obColType(a1)
0001C556 6700                       		beq.s	loc_19688
0001C558 4A29 0029                  		tst.b	$29(a1)
0001C55C 6600                       		bne.s	loc_19688
0001C55E 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C564                            
0001C564                            loc_19688:
0001C564 6000 FF50                  		bra.w	loc_195DA
0001C568                            ; ===========================================================================
0001C568                            
0001C568                            Obj75_SpikeDelete:
0001C568 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001C568 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001C56E                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C56E                            ; ---------------------------------------------------------------------------
0001C56E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C56E                            ; ---------------------------------------------------------------------------
0001C56E                            
0001C56E                            BossBlock:
0001C56E 7000                       		moveq	#0,d0
0001C570 1028 0024                  		move.b	obRoutine(a0),d0
0001C574 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C578 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C57C                            ; ===========================================================================
0001C57C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C57E 0000                       		dc.w Obj76_Action-Obj76_Index
0001C580 0000                       		dc.w loc_19762-Obj76_Index
0001C582                            ; ===========================================================================
0001C582                            
0001C582                            Obj76_Main:	; Routine 0
0001C582 7800                       		moveq	#0,d4
0001C584 3A3C 2C10                  		move.w	#$2C10,d5
0001C588 7C09                       		moveq	#9,d6
0001C58A 43D0                       		lea	(a0),a1
0001C58C 6000                       		bra.s	Obj76_MakeBlock
0001C58E                            ; ===========================================================================
0001C58E                            
0001C58E                            Obj76_Loop:
0001C58E 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001C594 6600                       		bne.s	Obj76_ExitLoop
0001C596                            
0001C596                            Obj76_MakeBlock:
0001C596 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C59A 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C5A2 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C5A8 137C 0004 0001             		move.b	#4,obRender(a1)
0001C5AE 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C5B4 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C5BA 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C5C0 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C5C4 337C 0582 000C             		move.w	#$582,obY(a1)
0001C5CA 3344 0028                  		move.w	d4,obSubtype(a1)
0001C5CE 0644 0101                  		addi.w	#$101,d4
0001C5D2 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C5D6 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C5DA 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C5DE                            
0001C5DE                            Obj76_ExitLoop:
0001C5DE 4E75                       		rts	
0001C5E0                            ; ===========================================================================
0001C5E0                            
0001C5E0                            Obj76_Action:	; Routine 2
0001C5E0 1028 0029                  		move.b	$29(a0),d0
0001C5E4 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C5E8 6700                       		beq.s	Obj76_Solid
0001C5EA 4A00                       		tst.b	d0
0001C5EC 6B00                       		bmi.s	loc_19718
0001C5EE                            
0001C5EE                            loc_19712:
0001C5EE 6100 0000                  		bsr.w	Obj76_Break
0001C5F2 6000                       		bra.s	Obj76_Display
0001C5F4                            ; ===========================================================================
0001C5F4                            
0001C5F4                            loc_19718:
0001C5F4 2268 0034                  		movea.l	$34(a0),a1
0001C5F8 4A29 0021                  		tst.b	obColProp(a1)
0001C5FC 67F0                       		beq.s	loc_19712
0001C5FE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C604 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C60A 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C610 B2C8                       		cmpa.w	a0,a1
0001C612 6500                       		bcs.s	Obj76_Display
0001C614 3029 0012                  		move.w	obVelY(a1),d0
0001C618 48C0                       		ext.l	d0
0001C61A E080                       		asr.l	#8,d0
0001C61C D168 000C                  		add.w	d0,obY(a0)
0001C620 6000                       		bra.s	Obj76_Display
0001C622                            ; ===========================================================================
0001C622                            
0001C622                            Obj76_Solid:
0001C622 323C 001B                  		move.w	#$1B,d1
0001C626 343C 0010                  		move.w	#$10,d2
0001C62A 363C 0011                  		move.w	#$11,d3
0001C62E 3828 0008                  		move.w	obX(a0),d4
0001C632 4EB9 0001 1B0C             		jsr	(SolidObject).l
0001C638                            
0001C638                            Obj76_Display:
0001C638 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001C63E                            ; ===========================================================================
0001C63E                            
0001C63E                            loc_19762:	; Routine 4
0001C63E 4A28 0001                  		tst.b	obRender(a0)
0001C642 6A00                       		bpl.s	Obj76_Delete
0001C644 4EB9 0000 F6B2             		jsr	(ObjectFall).l
0001C64A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001C650                            ; ===========================================================================
0001C650                            
0001C650                            Obj76_Delete:
0001C650 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001C656                            
0001C656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C656                            
0001C656                            
0001C656                            Obj76_Break:
0001C656 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C65A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C65E 7801                       		moveq	#1,d4
0001C660 7203                       		moveq	#3,d1
0001C662 7438                       		moveq	#$38,d2
0001C664 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C668 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C66E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C674 43D0                       		lea	(a0),a1
0001C676 6000                       		bra.s	Obj76_MakeFrag
0001C678                            ; ===========================================================================
0001C678                            
0001C678                            Obj76_LoopFrag:
0001C678 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001C67E 6600                       		bne.s	loc_197D4
0001C680                            
0001C680                            Obj76_MakeFrag:
0001C680 45D0                       		lea	(a0),a2
0001C682 47D1                       		lea	(a1),a3
0001C684 7603                       		moveq	#3,d3
0001C686                            
0001C686                            loc_197AA:
0001C686 26DA                       		move.l	(a2)+,(a3)+
0001C688 26DA                       		move.l	(a2)+,(a3)+
0001C68A 26DA                       		move.l	(a2)+,(a3)+
0001C68C 26DA                       		move.l	(a2)+,(a3)+
0001C68E 51CB FFF6                  		dbf	d3,loc_197AA
0001C692                            
0001C692 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C696 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C69A 361D                       		move.w	(a5)+,d3
0001C69C D769 0008                  		add.w	d3,obX(a1)
0001C6A0 361D                       		move.w	(a5)+,d3
0001C6A2 D769 000C                  		add.w	d3,obY(a1)
0001C6A6 1344 001A                  		move.b	d4,obFrame(a1)
0001C6AA 5244                       		addq.w	#1,d4
0001C6AC 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C6B0                            
0001C6B0                            loc_197D4:
0001C6BA                            ; End of function Obj76_Break
0001C6BA                            
0001C6BA                            ; ===========================================================================
0001C6BA FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C6BE 0180 FE00                  		dc.w $180, -$200
0001C6C2 FF00 FF00                  		dc.w -$100, -$100
0001C6C6 0100 FF00                  		dc.w $100, -$100
0001C6CA FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C6CE 0010 0000                  		dc.w $10, 0
0001C6D2 0000 0010                  		dc.w 0,	$10
0001C6D6 0010 0010                  		dc.w $10, $10
0001C6D6 0010 0010                  		dc.w $10, $10
0001C6DA                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C6DA                            ; ---------------------------------------------------------------------------
0001C6DA                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C6DA                            ; ---------------------------------------------------------------------------
0001C6DA                            Map_BossBlock_internal:
0001C6DA 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C6DC 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C6DE 0000                       		dc.w @topright-Map_BossBlock_internal
0001C6E0 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C6E2 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C6E4 02                         @wholeblock:	dc.b 2
0001C6E5 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C6EA 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C6EF 00                         		dc.b 0
0001C6F0 01                         @topleft:	dc.b 1
0001C6F1 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C6F6 01                         @topright:	dc.b 1
0001C6F7 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C6FC 01                         @bottomleft:	dc.b 1
0001C6FD F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C702 01                         @bottomright:	dc.b 1
0001C703 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C708                            		even
0001C708                            		even
0001C708                            
0001C708                            loc_1982C:
0001C708 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001C70E                            
0001C70E                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C70E                            ; ---------------------------------------------------------------------------
0001C70E                            ; Object 82 - Eggman (SBZ2)
0001C70E                            ; ---------------------------------------------------------------------------
0001C70E                            
0001C70E                            ScrapEggman:
0001C70E 7000                       		moveq	#0,d0
0001C710 1028 0024                  		move.b	obRoutine(a0),d0
0001C714 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C718 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C71C                            ; ===========================================================================
0001C71C 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C71E 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C720 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C722                            
0001C722 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C725 0400 03                    		dc.b 4,	0, 3
0001C728                            ; ===========================================================================
0001C728                            
0001C728                            SEgg_Main:	; Routine 0
0001C728 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C72C 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C732 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C738 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C73E 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C744 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C74A 4228 0025                  		clr.b	ob2ndRout(a0)
0001C74E 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C752 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C756 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C75A 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C762 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C768 117C 0004 0001             		move.b	#4,obRender(a0)
0001C76E 08E8 0007 0001             		bset	#7,obRender(a0)
0001C774 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C77A 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001C780 6600                       		bne.s	SEgg_Eggman
0001C782 2348 0034                  		move.l	a0,$34(a1)
0001C786 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C78A 337C 2130 0008             		move.w	#$2130,obX(a1)
0001C790 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001C796 4228 0025                  		clr.b	ob2ndRout(a0)
0001C79A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C79E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C7A2 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C7A6 237C 0000 DF2C 0004        		move.l	#Map_But,obMap(a1)
0001C7AE 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C7B4 137C 0004 0001             		move.b	#4,obRender(a1)
0001C7BA 08E9 0007 0001             		bset	#7,obRender(a1)
0001C7C0 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C7C6 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C7CC                            
0001C7CC                            SEgg_Eggman:	; Routine 2
0001C7CC 7000                       		moveq	#0,d0
0001C7CE 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C7D2 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C7D6 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C7DA 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C7DE 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001C7E4 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001C7EA                            ; ===========================================================================
0001C7EA 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C7EC 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C7EE 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C7F0 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C7F2                            ; ===========================================================================
0001C7F2                            
0001C7F2                            SEgg_ChkSonic:
0001C7F2 3028 0008                  		move.w	obX(a0),d0
0001C7F6 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C7FA 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C7FE 6400                       		bcc.s	loc_19934	; if not, branch
0001C800 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C804 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C80A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C810                            
0001C810                            loc_19934:
0001C810 4EF9 0000 F6EA             		jmp	(SpeedToPos).l
0001C816                            ; ===========================================================================
0001C816                            
0001C816                            SEgg_PreLeap:
0001C816 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C81A 6600                       		bne.s	loc_19954	; if time remains, branch
0001C81C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C820 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C826 5868 000C                  		addq.w	#4,obY(a0)
0001C82A 317C 000F 003C             		move.w	#15,$3C(a0)
0001C830                            
0001C830                            loc_19954:
0001C830 60DE                       		bra.s	loc_19934
0001C832                            ; ===========================================================================
0001C832                            
0001C832                            SEgg_Leap:
0001C832 5368 003C                  		subq.w	#1,$3C(a0)
0001C836 6E00                       		bgt.s	loc_199D0
0001C838 6600                       		bne.s	loc_1996A
0001C83A 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C840 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C846                            
0001C846                            loc_1996A:
0001C846 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001C84C 6E00                       		bgt.s	loc_19976
0001C84E 4268 0010                  		clr.w	obVelX(a0)
0001C852                            
0001C852                            loc_19976:
0001C852 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C858 4A68 0012                  		tst.w	obVelY(a0)
0001C85C 6B00                       		bmi.s	SEgg_FindBlocks
0001C85E 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001C864 6500                       		bcs.s	SEgg_FindBlocks
0001C866 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C86C 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001C872 6500                       		bcs.s	SEgg_FindBlocks
0001C874 317C 059B 000C             		move.w	#$59B,obY(a0)
0001C87A 4268 0012                  		clr.w	obVelY(a0)
0001C87E                            
0001C87E                            SEgg_FindBlocks:
0001C87E 3028 0010                  		move.w	obVelX(a0),d0
0001C882 8068 0012                  		or.w	obVelY(a0),d0
0001C886 6600                       		bne.s	loc_199D0
0001C888 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C88C 703E                       		moveq	#$3E,d0
0001C88E 7240                       		moveq	#$40,d1
0001C890                            
0001C890                            SEgg_FindLoop:	
0001C890 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C892 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C896 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C89A                            
0001C89A 6600                       		bne.s	loc_199D0
0001C89C 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C8A2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8A6 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C8AC                            
0001C8AC                            loc_199D0:
0001C8AC 6000 FF62                  		bra.w	loc_19934
0001C8B0                            ; ===========================================================================
0001C8B0                            
0001C8B0                            SEgg_Switch:	; Routine 4
0001C8B0 7000                       		moveq	#0,d0
0001C8B2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C8B6 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001C8BA 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001C8BE                            ; ===========================================================================
0001C8BE 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001C8C0 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001C8C2                            ; ===========================================================================
0001C8C2                            
0001C8C2                            loc_199E6:
0001C8C2 2268 0034                  		movea.l	$34(a0),a1
0001C8C6 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001C8CC 6600                       		bne.s	SEgg_SwDisplay
0001C8CE 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C8D4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8D8                            
0001C8D8                            SEgg_SwDisplay:
0001C8D8 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001C8D8 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001C8DE                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001C8DE                            ; ---------------------------------------------------------------------------
0001C8DE                            ; Animation script - Eggman (SBZ2)
0001C8DE                            ; ---------------------------------------------------------------------------
0001C8DE 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001C8E0 0000                       		dc.w @laugh-Ani_SEgg
0001C8E2 0000                       		dc.w @jump1-Ani_SEgg
0001C8E4 0000                       		dc.w @intube-Ani_SEgg
0001C8E6 0000                       		dc.w @running-Ani_SEgg
0001C8E8 0000                       		dc.w @jump2-Ani_SEgg
0001C8EA 0000                       		dc.w @starjump-Ani_SEgg
0001C8EC 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001C8F0 00                         		even
0001C8F0 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001C8F4 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001C8FC 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001C900 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001C906 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001C90C 00                         		even
0001C90C 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001C910 00                         		even
0001C910 00                         		even
0001C910                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001C910                            ; ---------------------------------------------------------------------------
0001C910                            ; Sprite mappings - Eggman (SBZ2)
0001C910                            ; ---------------------------------------------------------------------------
0001C910                            Map_SEgg_internal:
0001C910 0000                       		dc.w @stand-Map_SEgg_internal
0001C912 0000                       		dc.w @laugh1-Map_SEgg_internal
0001C914 0000                       		dc.w @laugh2-Map_SEgg_internal
0001C916 0000                       		dc.w @jump1-Map_SEgg_internal
0001C918 0000                       		dc.w @jump2-Map_SEgg_internal
0001C91A 0000                       		dc.w @surprise-Map_SEgg_internal
0001C91C 0000                       		dc.w @starjump-Map_SEgg_internal
0001C91E 0000                       		dc.w @running1-Map_SEgg_internal
0001C920 0000                       		dc.w @running2-Map_SEgg_internal
0001C922 0000                       		dc.w @intube-Map_SEgg_internal
0001C924 0000                       		dc.w @cockpit-Map_SEgg_internal
0001C926 03                         @stand:		dc.b 3
0001C927 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001C92C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C931 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C936 04                         @laugh1:	dc.b 4
0001C937 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001C93C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C941 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C946 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001C94B 00                         		dc.b 0
0001C94C 04                         @laugh2:	dc.b 4
0001C94D E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001C952 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001C957 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001C95C FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001C961 00                         		dc.b 0
0001C962 04                         @jump1:		dc.b 4
0001C963 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001C968 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001C96D 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001C972 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001C977 00                         		dc.b 0
0001C978 04                         @jump2:		dc.b 4
0001C979 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C97E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001C983 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001C988 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C98D 00                         		dc.b 0
0001C98E 04                         @surprise:	dc.b 4
0001C98F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001C994 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001C999 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C99E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C9A3 00                         		dc.b 0
0001C9A4 07                         @starjump:	dc.b 7
0001C9A5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001C9AA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001C9AF 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001C9B4 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001C9B9 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C9BE F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001C9C3 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001C9C8 05                         @running1:	dc.b 5
0001C9C9 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C9CE F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001C9D3 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001C9D8 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001C9DD E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C9E2 06                         @running2:	dc.b 6
0001C9E3 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001C9E8 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001C9ED 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001C9F2 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001C9F7 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001C9FC E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CA01 00                         		dc.b 0
0001CA02 08                         @intube:	dc.b 8
0001CA03 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CA08 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CA0D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CA12 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CA17 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CA1C F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CA21 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CA26 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CA2B 03                         @cockpit:	dc.b 3
0001CA2C EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CA31 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CA36 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CA3C 00                         		even
0001CA3C 00                         		even
0001CA3C                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CA3C                            ; ---------------------------------------------------------------------------
0001CA3C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CA3C                            ; ---------------------------------------------------------------------------
0001CA3C                            
0001CA3C                            FalseFloor:
0001CA3C 7000                       		moveq	#0,d0
0001CA3E 1028 0024                  		move.b	obRoutine(a0),d0
0001CA42 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CA46 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CA4A                            ; ===========================================================================
0001CA4A 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CA4C 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CA4E 0000                       		dc.w loc_19C36-FFloor_Index
0001CA50 0000                       		dc.w loc_19C62-FFloor_Index
0001CA52 0000                       		dc.w loc_19C72-FFloor_Index
0001CA54 0000                       		dc.w loc_19C80-FFloor_Index
0001CA56                            ; ===========================================================================
0001CA56                            
0001CA56                            FFloor_Main:	; Routine 0
0001CA56 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CA5C 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CA62 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CA68 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CA6E 117C 0004 0001             		move.b	#4,obRender(a0)
0001CA74 08E8 0007 0001             		bset	#7,obRender(a0)
0001CA7A 7800                       		moveq	#0,d4
0001CA7C 3A3C 2010                  		move.w	#$2010,d5
0001CA80 7C07                       		moveq	#7,d6
0001CA82 45E8 0030                  		lea	$30(a0),a2
0001CA86                            
0001CA86                            FFloor_MakeBlock:
0001CA86 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001CA8C 6600                       		bne.s	FFloor_ExitMake
0001CA8E 34C9                       		move.w	a1,(a2)+
0001CA90 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CA94 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CA9C 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CAA2 137C 0004 0001             		move.b	#4,obRender(a1)
0001CAA8 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CAAE 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CAB4 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CABA 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CABE 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CAC4 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CAC8 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CACE 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CAD2                            
0001CAD2                            FFloor_ExitMake:
0001CAD2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CAD6 4E75                       		rts	
0001CAD8                            ; ===========================================================================
0001CAD8                            
0001CAD8                            FFloor_ChkBreak:; Routine 2
0001CAD8 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CADE 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CAE0 4228 001A                  		clr.b	obFrame(a0)
0001CAE4 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CAE8                            
0001CAE8                            FFloor_Solid:
0001CAE8 7000                       		moveq	#0,d0
0001CAEA 1028 001A                  		move.b	obFrame(a0),d0
0001CAEE 4400                       		neg.b	d0
0001CAF0 4880                       		ext.w	d0
0001CAF2 5040                       		addq.w	#8,d0
0001CAF4 E940                       		asl.w	#4,d0
0001CAF6 383C 2100                  		move.w	#$2100,d4
0001CAFA 9840                       		sub.w	d0,d4
0001CAFC 1140 0014                  		move.b	d0,obActWid(a0)
0001CB00 3144 0008                  		move.w	d4,obX(a0)
0001CB04 720B                       		moveq	#$B,d1
0001CB06 D240                       		add.w	d0,d1
0001CB08 7410                       		moveq	#$10,d2
0001CB0A 7611                       		moveq	#$11,d3
0001CB0C 4EF9 0001 1B0C             		jmp	(SolidObject).l
0001CB12                            ; ===========================================================================
0001CB12                            
0001CB12                            loc_19C36:	; Routine 4
0001CB12 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CB18 6400                       		bcc.s	FFloor_Solid2
0001CB1A 70FF                       		moveq	#-1,d0
0001CB1C 1028 001A                  		move.b	obFrame(a0),d0
0001CB20 4880                       		ext.w	d0
0001CB22 D040                       		add.w	d0,d0
0001CB24 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CB28 2240                       		movea.l	d0,a1
0001CB2A 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CB30 5228 001A                  		addq.b	#1,obFrame(a0)
0001CB34 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CB3A 6700                       		beq.s	loc_19C62
0001CB3C                            
0001CB3C                            FFloor_Solid2:
0001CB3C 60AA                       		bra.s	FFloor_Solid
0001CB3E                            ; ===========================================================================
0001CB3E                            
0001CB3E                            loc_19C62:	; Routine 6
0001CB3E 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CB44 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CB4A 6000 FBBC                  		bra.w	loc_1982C
0001CB4E                            ; ===========================================================================
0001CB4E                            
0001CB4E                            loc_19C72:	; Routine 8
0001CB4E 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CB54 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CB56 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001CB5C                            ; ===========================================================================
0001CB5C                            
0001CB5C                            loc_19C80:	; Routine $A
0001CB5C 4A28 0001                  		tst.b	obRender(a0)
0001CB60 6A00 FBA6                  		bpl.w	loc_1982C
0001CB64 4EB9 0000 F6B2             		jsr	(ObjectFall).l
0001CB6A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001CB70                            ; ===========================================================================
0001CB70                            
0001CB70                            FFloor_Break:
0001CB70 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CB74 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CB78 7801                       		moveq	#1,d4
0001CB7A 7203                       		moveq	#3,d1
0001CB7C 7438                       		moveq	#$38,d2
0001CB7E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB82 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CB88 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CB8E 43D0                       		lea	(a0),a1
0001CB90 6000                       		bra.s	FFloor_MakeFrag
0001CB92                            ; ===========================================================================
0001CB92                            
0001CB92                            FFloor_LoopFrag:
0001CB92 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001CB98 6600                       		bne.s	FFloor_BreakSnd
0001CB9A                            
0001CB9A                            FFloor_MakeFrag:
0001CB9A 45D0                       		lea	(a0),a2
0001CB9C 47D1                       		lea	(a1),a3
0001CB9E 7603                       		moveq	#3,d3
0001CBA0                            
0001CBA0                            loc_19CC4:
0001CBA0 26DA                       		move.l	(a2)+,(a3)+
0001CBA2 26DA                       		move.l	(a2)+,(a3)+
0001CBA4 26DA                       		move.l	(a2)+,(a3)+
0001CBA6 26DA                       		move.l	(a2)+,(a3)+
0001CBA8 51CB FFF6                  		dbf	d3,loc_19CC4
0001CBAC                            
0001CBAC 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CBB0 361D                       		move.w	(a5)+,d3
0001CBB2 D769 0008                  		add.w	d3,obX(a1)
0001CBB6 361D                       		move.w	(a5)+,d3
0001CBB8 D769 000C                  		add.w	d3,obY(a1)
0001CBBC 1344 001A                  		move.b	d4,obFrame(a1)
0001CBC0 5244                       		addq.w	#1,d4
0001CBC2 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CBC6                            
0001CBC6                            FFloor_BreakSnd:
0001CBD0 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001CBD6                            ; ===========================================================================
0001CBD6 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CBDA 0120 00C0                  		dc.w $120, $C0
0001CBDE FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CBE2 0010 0000                  		dc.w $10, 0
0001CBE6 0000 0010                  		dc.w 0,	$10
0001CBEA 0010 0010                  		dc.w $10, $10
0001CBEA 0010 0010                  		dc.w $10, $10
0001CBEE                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CBEE                            ; ---------------------------------------------------------------------------
0001CBEE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CBEE                            ; ---------------------------------------------------------------------------
0001CBEE                            Map_FFloor_internal:
0001CBEE 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CBF0 0000                       		dc.w @topleft-Map_FFloor_internal
0001CBF2 0000                       		dc.w @topright-Map_FFloor_internal
0001CBF4 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CBF6 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CBF8 01                         @wholeblock:	dc.b 1
0001CBF9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CBFE 02                         @topleft:	dc.b 2
0001CBFF F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CC04 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CC09 00                         		dc.b 0
0001CC0A 02                         @topright:	dc.b 2
0001CC0B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CC10 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CC15 00                         		dc.b 0
0001CC16 02                         @bottomleft:	dc.b 2
0001CC17 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CC1C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CC21 00                         		dc.b 0
0001CC22 02                         @bottomright:	dc.b 2
0001CC23 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CC28 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CC2E 00                         		even
0001CC2E 00                         		even
0001CC2E                            		include	"_incObj\85 Boss - Final.asm"
0001CC2E                            ; ---------------------------------------------------------------------------
0001CC2E                            ; Object 85 - Eggman (FZ)
0001CC2E                            ; ---------------------------------------------------------------------------
0001CC2E                            
0001CC2E                            Obj85_Delete:
0001CC2E 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001CC34                            ; ===========================================================================
0001CC34                            
0001CC34                            BossFinal:
0001CC34 7000                       		moveq	#0,d0
0001CC36 1028 0024                  		move.b	obRoutine(a0),d0
0001CC3A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CC3E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CC42                            ; ===========================================================================
0001CC42 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CC44 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CC46 0000                       		dc.w loc_1A38E-Obj85_Index
0001CC48 0000                       		dc.w loc_1A346-Obj85_Index
0001CC4A 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CC4C 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CC4E 0000                       		dc.w loc_1A264-Obj85_Index
0001CC50                            
0001CC50 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CC56 0001 C910                  		dc.l Map_SEgg		; mappings pointer
0001CC5A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CC60 0000 0000                  		dc.l Map_EggCyl
0001CC64 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CC6A 0000 0000                  		dc.l Map_FZLegs
0001CC6E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CC74 0001 C910                  		dc.l Map_SEgg
0001CC78 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CC7E 0001 AB94                  		dc.l Map_Eggman
0001CC82 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CC88 0001 AB94                  		dc.l Map_Eggman
0001CC8C                            
0001CC8C                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CC8C 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CC92 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CC98 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CC9E 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CCA4 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CCAA 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CCB0                            ; ===========================================================================
0001CCB0                            
0001CCB0                            Obj85_Main:	; Routine 0
0001CCB0 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CCB4 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CCB8 2248                       		movea.l	a0,a1
0001CCBA 7205                       		moveq	#5,d1
0001CCBC 6000                       		bra.s	Obj85_LoadBoss
0001CCBE                            ; ===========================================================================
0001CCBE                            
0001CCBE                            Obj85_Loop:
0001CCBE 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001CCC4 6600                       		bne.s	loc_19E20
0001CCC6                            
0001CCC6                            Obj85_LoadBoss:
0001CCC6 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CCCA 335A 0008                  		move.w	(a2)+,obX(a1)
0001CCCE 335A 000C                  		move.w	(a2)+,obY(a1)
0001CCD2 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CCD6 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CCDA 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CCDE 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CCE2 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CCE6 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CCEA 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CCEE 137C 0004 0001             		move.b	#4,obRender(a1)
0001CCF4 08E8 0007 0001             		bset	#7,obRender(a0)
0001CCFA 2348 0034                  		move.l	a0,$34(a1)
0001CCFE 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CD02                            
0001CD02                            loc_19E20:
0001CD02 45E8 0036                  		lea	$36(a0),a2
0001CD06 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001CD0C 6600                       		bne.s	loc_19E5A
0001CD0E 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CD12 3489                       		move.w	a1,(a2)
0001CD14 2348 0034                  		move.l	a0,$34(a1)
0001CD18 45E8 0038                  		lea	$38(a0),a2
0001CD1C 7400                       		moveq	#0,d2
0001CD1E 7203                       		moveq	#3,d1
0001CD20                            
0001CD20                            loc_19E3E:
0001CD20 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001CD26 6600                       		bne.s	loc_19E5A
0001CD28 34C9                       		move.w	a1,(a2)+
0001CD2A 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CD2E 2348 0034                  		move.l	a0,$34(a1)
0001CD32 1342 0028                  		move.b	d2,obSubtype(a1)
0001CD36 5442                       		addq.w	#2,d2
0001CD38 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CD3C                            
0001CD3C                            loc_19E5A:
0001CD3C 317C 0000 0034             		move.w	#0,$34(a0)
0001CD42 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CD48 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CD4E                            
0001CD4E                            Obj85_Eggman:	; Routine 2
0001CD4E 7000                       		moveq	#0,d0
0001CD50 1028 0034                  		move.b	$34(a0),d0
0001CD54 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CD58 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CD5C 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001CD62                            ; ===========================================================================
0001CD62 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CD66 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CD6A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CD6E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CD72                            ; ===========================================================================
0001CD72                            
0001CD72                            loc_19E90:
0001CD72 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CD76 6600                       		bne.s	loc_19EA2
0001CD78 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CD7E 6500                       		bcs.s	loc_19EA2
0001CD80 5428 0034                  		addq.b	#2,$34(a0)
0001CD84                            
0001CD84                            loc_19EA2:
0001CD84 52B8 F636                  		addq.l	#1,(v_random).w
0001CD88 4E75                       		rts	
0001CD8A                            ; ===========================================================================
0001CD8A                            
0001CD8A                            loc_19EA8:
0001CD8A 4A68 0030                  		tst.w	$30(a0)
0001CD8E 6A00                       		bpl.s	loc_19F10
0001CD90 4268 0030                  		clr.w	$30(a0)
0001CD94 4EB9 0000 3788             		jsr	(RandomNumber).l
0001CD9A 0240 000C                  		andi.w	#$C,d0
0001CD9E 3200                       		move.w	d0,d1
0001CDA0 5441                       		addq.w	#2,d1
0001CDA2 4A80                       		tst.l	d0
0001CDA4 6A00                       		bpl.s	loc_19EC6
0001CDA6 C340                       		exg	d1,d0
0001CDA8                            
0001CDA8                            loc_19EC6:
0001CDA8 43FA 0000                  		lea	word_19FD6(pc),a1
0001CDAC 3031 0000                  		move.w	(a1,d0.w),d0
0001CDB0 3231 1000                  		move.w	(a1,d1.w),d1
0001CDB4 3140 0030                  		move.w	d0,$30(a0)
0001CDB8 74FF                       		moveq	#-1,d2
0001CDBA 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CDBE 2242                       		movea.l	d2,a1
0001CDC0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CDC6 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CDCC 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CDD0 2242                       		movea.l	d2,a1
0001CDD2 137C 0001 0029             		move.b	#1,$29(a1)
0001CDD8 337C 0000 0030             		move.w	#0,$30(a1)
0001CDDE 317C 0001 0032             		move.w	#1,$32(a0)
0001CDE4 4228 0035                  		clr.b	$35(a0)
0001CDF2                            
0001CDF2                            loc_19F10:
0001CDF2 4A68 0032                  		tst.w	$32(a0)
0001CDF6 6B00 0000                  		bmi.w	loc_19FA6
0001CDFA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CE00 3038 D008                  		move.w	(v_player+obX).w,d0
0001CE04 9068 0008                  		sub.w	obX(a0),d0
0001CE08 6500                       		bcs.s	loc_19F2E
0001CE0A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CE10                            
0001CE10                            loc_19F2E:
0001CE10 323C 002B                  		move.w	#$2B,d1
0001CE14 343C 0014                  		move.w	#$14,d2
0001CE18 363C 0014                  		move.w	#$14,d3
0001CE1C 3828 0008                  		move.w	obX(a0),d4
0001CE20 4EB9 0001 1B0C             		jsr	(SolidObject).l
0001CE26 4A44                       		tst.w	d4
0001CE28 6E00                       		bgt.s	loc_19F50
0001CE2A                            
0001CE2A                            loc_19F48:
0001CE2A 4A28 0035                  		tst.b	$35(a0)
0001CE2E 6600                       		bne.s	loc_19F88
0001CE30 6000                       		bra.s	loc_19F96
0001CE32                            ; ===========================================================================
0001CE32                            
0001CE32                            loc_19F50:
0001CE32 5E78 F636                  		addq.w	#7,(v_random).w
0001CE36 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CE3C 66EC                       		bne.s	loc_19F48
0001CE3E 303C 0300                  		move.w	#$300,d0
0001CE42 0828 0000 0022             		btst	#0,obStatus(a0)
0001CE48 6600                       		bne.s	loc_19F6A
0001CE4A 4440                       		neg.w	d0
0001CE4C                            
0001CE4C                            loc_19F6A:
0001CE4C 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CE50 4A28 0035                  		tst.b	$35(a0)
0001CE54 6600                       		bne.s	loc_19F88
0001CE56 5328 0021                  		subq.b	#1,obColProp(a0)
0001CE5A 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CE60 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CE66                            
0001CE66                            loc_19F88:
0001CE66 5328 0035                  		subq.b	#1,$35(a0)
0001CE6A 6700                       		beq.s	loc_19F96
0001CE6C 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CE72 6000                       		bra.s	loc_19F9C
0001CE74                            ; ===========================================================================
0001CE74                            
0001CE74                            loc_19F96:
0001CE74 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CE7A                            
0001CE7A                            loc_19F9C:
0001CE7A 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001CE7E 4EF9 0000 C7AA             		jmp	(AnimateSprite).l
0001CE84                            ; ===========================================================================
0001CE84                            
0001CE84                            loc_19FA6:
0001CE84 4A28 0021                  		tst.b	obColProp(a0)
0001CE88 6700                       		beq.s	loc_19FBC
0001CE8A 5428 0034                  		addq.b	#2,$34(a0)
0001CE8E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CE94 4268 0032                  		clr.w	$32(a0)
0001CE98 4E75                       		rts	
0001CE9A                            ; ===========================================================================
0001CE9A                            
0001CE9A                            loc_19FBC:
0001CE9A 7064                       			moveq	#100,d0
0001CE9C 6100 0000                  			bsr.w	AddPoints
0001CEA0 117C 0006 0034             		move.b	#6,$34(a0)
0001CEA6 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001CEAC 317C 053C 000C             		move.w	#$53C,obY(a0)
0001CEB2 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001CEB8 4E75                       		rts	
0001CEBA                            ; ===========================================================================
0001CEBA 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001CECA                            ; ===========================================================================
0001CECA                            
0001CECA                            loc_19FE6:
0001CECA 70FF                       		moveq	#-1,d0
0001CECC 3028 0036                  		move.w	$36(a0),d0
0001CED0 2240                       		movea.l	d0,a1
0001CED2 4A68 0030                  		tst.w	$30(a0)
0001CED6 6A00                       		bpl.s	loc_1A000
0001CED8 4268 0030                  		clr.w	$30(a0)
0001CEDC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CEE2 6100                       		bsr.s	loc_1A020
0001CEE4                            
0001CEE4                            loc_1A000:
0001CEE4 700F                       		moveq	#$F,d0
0001CEE6 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CEEA 6600                       		bne.s	loc_1A00A
0001CEEC 6100                       		bsr.s	loc_1A020
0001CEEE                            
0001CEEE                            loc_1A00A:
0001CEEE 4A68 0032                  		tst.w	$32(a0)
0001CEF2 6700                       		beq.s	locret_1A01E
0001CEF4 5528 0034                  		subq.b	#2,$34(a0)
0001CEF8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CEFE 4268 0032                  		clr.w	$32(a0)
0001CF02                            
0001CF02                            locret_1A01E:
0001CF02 4E75                       		rts	
0001CF04                            ; ===========================================================================
0001CF04                            
0001CF04                            loc_1A020:
0001CF0E                            ; ===========================================================================
0001CF0E                            
0001CF0E                            loc_1A02A:
0001CF0E 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001CF14 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF1A 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001CF20 117C 0006 001A             		move.b	#6,obFrame(a0)
0001CF26 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CF2C 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001CF32 6500                       		bcs.s	loc_1A070
0001CF34 317C 059C 000C             		move.w	#$59C,obY(a0)
0001CF3A 5428 0034                  		addq.b	#2,$34(a0)
0001CF3E 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001CF44 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001CF4A 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001CF50 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001CF54                            
0001CF54                            loc_1A070:
0001CF54 6000 0000                  		bra.w	loc_1A166
0001CF58                            ; ===========================================================================
0001CF58                            
0001CF58                            loc_1A074:
0001CF58 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF5E 117C 0004 001C             		move.b	#4,obAnim(a0)
0001CF64 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001CF6A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CF70 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001CF76 6500                       		bcs.s	loc_1A09A
0001CF78 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001CF7E                            
0001CF7E                            loc_1A09A:
0001CF7E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001CF84 3028 0008                  		move.w	obX(a0),d0
0001CF88 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CF8C 6A00                       		bpl.s	loc_1A0B4
0001CF8E 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001CF94 6000 0000                  		bra.w	loc_1A0F2
0001CF98                            ; ===========================================================================
0001CF98                            
0001CF98                            loc_1A0B4:
0001CF98 0440 0070                  		subi.w	#$70,d0
0001CF9C 6500                       		bcs.s	loc_1A0F2
0001CF9E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001CFA4 5140                       		subq.w	#8,d0
0001CFA6 6500                       		bcs.s	loc_1A0F2
0001CFA8 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001CFAE 5140                       		subq.w	#8,d0
0001CFB0 6500                       		bcs.s	loc_1A0F2
0001CFB2 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFB8 5140                       		subq.w	#8,d0
0001CFBA 6500                       		bcs.s	loc_1A0F2
0001CFBC 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFC2 5140                       		subq.w	#8,d0
0001CFC4 6500                       		bcs.s	loc_1A0F2
0001CFC6 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFCC 0440 0038                  		subi.w	#$38,d0
0001CFD0 6500                       		bcs.s	loc_1A0F2
0001CFD2 4268 0010                  		clr.w	obVelX(a0)
0001CFD6                            
0001CFD6                            loc_1A0F2:
0001CFD6 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001CFDC 6500                       		bcs.s	loc_1A110
0001CFDE 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001CFE4 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001CFEA 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001CFF0 5428 0034                  		addq.b	#2,$34(a0)
0001CFF4                            
0001CFF4                            loc_1A110:
0001CFF4 6000                       		bra.s	loc_1A15C
0001CFF6                            ; ===========================================================================
0001CFF6                            
0001CFF6                            loc_1A112:
0001CFF6 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001CFFC 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D002 6500                       		bcs.s	loc_1A124
0001D004 4268 0010                  		clr.w	obVelX(a0)
0001D008                            
0001D008                            loc_1A124:
0001D008 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D00E 4A68 0012                  		tst.w	obVelY(a0)
0001D012 6B00                       		bmi.s	loc_1A142
0001D014 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D01A 6500                       		bcs.s	loc_1A142
0001D01C 317C 0592 000C             		move.w	#$592,obY(a0)
0001D022 4268 0012                  		clr.w	obVelY(a0)
0001D026                            
0001D026                            loc_1A142:
0001D026 3028 0010                  		move.w	obVelX(a0),d0
0001D02A 8068 0012                  		or.w	obVelY(a0),d0
0001D02E 6600                       		bne.s	loc_1A15C
0001D030 5428 0034                  		addq.b	#2,$34(a0)
0001D034 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D03A 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D040                            
0001D040                            loc_1A15C:
0001D040 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D044 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001D04A                            
0001D04A                            loc_1A166:
0001D04A 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D050 6C00                       		bge.s	loc_1A172
0001D052 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D056                            
0001D056                            loc_1A172:
0001D056 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D05C 6C00                       		bge.s	locret_1A190
0001D05E 323C 001B                  		move.w	#$1B,d1
0001D062 343C 0070                  		move.w	#$70,d2
0001D066 363C 0071                  		move.w	#$71,d3
0001D06A 3828 0008                  		move.w	obX(a0),d4
0001D06E 4EF9 0001 1B0C             		jmp	(SolidObject).l
0001D074                            ; ===========================================================================
0001D074                            
0001D074                            locret_1A190:
0001D074 4E75                       		rts	
0001D076                            ; ===========================================================================
0001D076                            
0001D076                            loc_1A192:
0001D076 217C 0001 AB94 0004        		move.l	#Map_Eggman,obMap(a0)
0001D07E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D084 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D08A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D090 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001D096 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D09C 6400                       		bcc.s	loc_1A1D0
0001D09E 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D0A4 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D0AA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D0B0 5428 0034                  		addq.b	#2,$34(a0)
0001D0B4                            
0001D0B4                            loc_1A1D0:
0001D0B4 6000 FF8A                  		bra.w	loc_1A15C
0001D0B8                            ; ===========================================================================
0001D0B8                            
0001D0B8                            loc_1A1D4:
0001D0B8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0BE 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001D0C4 4A68 0030                  		tst.w	$30(a0)
0001D0C8 6600                       		bne.s	loc_1A1FC
0001D0CA 4A28 0020                  		tst.b	obColType(a0)
0001D0CE 6600                       		bne.s	loc_1A216
0001D0D0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D0D6 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D0DC                            
0001D0DC                            loc_1A1FC:
0001D0DC 5368 0030                  		subq.w	#1,$30(a0)
0001D0E0 6600                       		bne.s	loc_1A216
0001D0E2 4A28 0022                  		tst.b	obStatus(a0)
0001D0E6 6A00                       		bpl.s	loc_1A210
0001D0E8 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D0EE 6000                       		bra.s	loc_1A216
0001D0F0                            ; ===========================================================================
0001D0F0                            
0001D0F0                            loc_1A210:
0001D0F0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D0F6                            
0001D0F6                            loc_1A216:
0001D0F6 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D0FC 6D00                       		blt.s	loc_1A23A
0001D0FE 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D104 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D10A 4278 D020                  		clr.w	(v_player+obInertia).w
0001D10E 4A68 0012                  		tst.w	obVelY(a0)
0001D112 6A00                       		bpl.s	loc_1A248
0001D114 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D11A                            
0001D11A                            loc_1A23A:
0001D11A 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D120 6D00                       		blt.s	loc_1A248
0001D122 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D128                            
0001D128                            loc_1A248:
0001D128 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D12E 6500                       		bcs.s	loc_1A260
0001D130 4A28 0001                  		tst.b	obRender(a0)
0001D134 6B00                       		bmi.s	loc_1A260
0001D136 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D13C 6000 FAF0                  		bra.w	Obj85_Delete
0001D140                            ; ===========================================================================
0001D140                            
0001D140                            loc_1A260:
0001D140 6000 FEFE                  		bra.w	loc_1A15C
0001D144                            ; ===========================================================================
0001D144                            
0001D144                            loc_1A264:	; Routine 4
0001D144 2268 0034                  		movea.l	$34(a0),a1
0001D148 1011                       		move.b	(a1),d0
0001D14A B010                       		cmp.b	(a0),d0
0001D14C 6600 FAE0                  		bne.w	Obj85_Delete
0001D150 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D156 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D15C 6C00                       		bge.s	loc_1A280
0001D15E 6000                       		bra.s	loc_1A2A6
0001D160                            ; ===========================================================================
0001D160                            
0001D160                            loc_1A280:
0001D160 4A69 0010                  		tst.w	obVelX(a1)
0001D164 6700                       		beq.s	loc_1A28C
0001D166 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D16C                            
0001D16C                            loc_1A28C:
0001D16C 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D170 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001D176                            
0001D176                            loc_1A296:
0001D176 2268 0034                  		movea.l	$34(a0),a1
0001D17A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D180 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D186                            
0001D186                            loc_1A2A6:
0001D186 2268 0034                  		movea.l	$34(a0),a1
0001D18A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D190 7003                       		moveq	#3,d0
0001D192 C028 0022                  		and.b	obStatus(a0),d0
0001D196 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D19C 8128 0001                  		or.b	d0,obRender(a0)
0001D1A0 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001D1A6                            ; ===========================================================================
0001D1A6                            
0001D1A6                            loc_1A2C6:	; Routine 6
0001D1A6 2268 0034                  		movea.l	$34(a0),a1
0001D1AA 1011                       		move.b	(a1),d0
0001D1AC B010                       		cmp.b	(a0),d0
0001D1AE 6600 FA7E                  		bne.w	Obj85_Delete
0001D1B2 0CA9 0001 AB94 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D1BA 6700                       		beq.s	loc_1A2E4
0001D1BC 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D1C2 60C2                       		bra.s	loc_1A2A6
0001D1C4                            ; ===========================================================================
0001D1C4                            
0001D1C4                            loc_1A2E4:
0001D1C4 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D1CA 4A29 0021                  		tst.b	obColProp(a1)
0001D1CE 6F00                       		ble.s	loc_1A312
0001D1D0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D1D6 217C 0001 AB94 0004        		move.l	#Map_Eggman,obMap(a0)
0001D1DE 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D1E4 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D1E8 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001D1EE 6000 FF86                  		bra.w	loc_1A296
0001D1F2                            ; ===========================================================================
0001D1F2                            
0001D1F2                            loc_1A312:
0001D1F2 4A28 0001                  		tst.b	1(a0)
0001D1F6 6A00 FA36                  		bpl.w	Obj85_Delete
0001D1FA 6100 D4F2                  		bsr.w	BossDefeated
0001D1FE 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D204 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D20A 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D212 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D218 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D21C 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001D222 6000 FF52                  		bra.w	loc_1A296
0001D226                            ; ===========================================================================
0001D226                            
0001D226                            loc_1A346:	; Routine 8
0001D226 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D22C 2268 0034                  		movea.l	$34(a0),a1
0001D230 0CA9 0001 AB94 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D238 6700                       		beq.s	loc_1A35E
0001D23A 6000 FF4A                  		bra.w	loc_1A2A6
0001D23E                            ; ===========================================================================
0001D23E                            
0001D23E                            loc_1A35E:
0001D23E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D244 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D24A 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D24E 6600                       		bne.s	loc_1A376
0001D250 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D256                            
0001D256                            loc_1A376:
0001D256 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D25A 6E00                       		bgt.s	loc_1A38A
0001D25C 5228 001A                  		addq.b	#1,obFrame(a0)
0001D260 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D266 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D26A                            
0001D26A                            loc_1A38A:
0001D26A 6000 FF0A                  		bra.w	loc_1A296
0001D26E                            ; ===========================================================================
0001D26E                            
0001D26E                            loc_1A38E:	; Routine $A
0001D26E 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D274 3038 D008                  		move.w	(v_player+obX).w,d0
0001D278 9068 0008                  		sub.w	obX(a0),d0
0001D27C 6500                       		bcs.s	loc_1A3A6
0001D27E 4A28 0001                  		tst.b	obRender(a0)
0001D282 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D286                            
0001D286                            loc_1A3A6:
0001D286 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001D28C                            ; ===========================================================================
0001D28C                            
0001D28C                            loc_1A3AC:	; Routine $C
0001D28C 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D292 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D298 2268 0034                  		movea.l	$34(a0),a1
0001D29C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D2A2 6600                       		bne.s	loc_1A3D0
0001D2A4 0CA9 0001 AB94 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D2AC 6700 F980                  		beq.w	Obj85_Delete
0001D2B0                            
0001D2B0                            loc_1A3D0:
0001D2B0 6000 FED4                  		bra.w	loc_1A2A6
0001D2B4                            		
0001D2B4                            BossModeMusic:
0001D2B4 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D2BA 6600 0000                  		bne.w	NormalMode
0001D2BE 4EF9 0000 0000             		jmp	PinchMode
0001D2C4                            
0001D2C4                            NormalMode:
0001D2C4 303C 00AC                  		move.w	#$AC,d0
0001D2C8 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001D2CE 4E75                       		rts
0001D2D0                            
0001D2D0                            PinchMode:
0001D2D0 303C 0094                  		move.w	#$94,d0
0001D2D4 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001D2DA 303C 00E2                  		move.w	#$E2,d0
0001D2DE 4EB9 0000 0FC6             		jsr	(PlaySound).l
0001D2E4 4E75                       		rts		
0001D2E4 4E75                       		rts		
0001D2E6                            		include	"_anim\FZ Eggman in Ship.asm"
0001D2E6                            ; ---------------------------------------------------------------------------
0001D2E6                            ; Animation script - Eggman (FZ)
0001D2E6                            ; ---------------------------------------------------------------------------
0001D2E6 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D2E8 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D2EC                            		even
0001D2EC                            		even
0001D2EC                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D2EC                            ; ---------------------------------------------------------------------------
0001D2EC                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D2EC                            ; ---------------------------------------------------------------------------
0001D2EC                            Map_FZDamaged_internal:
0001D2EC 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D2EE 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D2F0 06                         @damage1:	dc.b 6
0001D2F1 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D2F6 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D2FB EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D300 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D305 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D30A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D30F 06                         @damage2:	dc.b 6
0001D310 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D315 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D31A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D31F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D324 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D329 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D32E                            		even
0001D32E                            		even
0001D32E                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D32E                            ; ---------------------------------------------------------------------------
0001D32E                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D32E                            ; ---------------------------------------------------------------------------
0001D32E                            Map_FZLegs_internal:
0001D32E 0000                       		dc.w @extended-Map_FZLegs_internal
0001D330 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D332 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D334 02                         @extended:	dc.b 2
0001D335 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D33A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D33F 03                         @halfway:	dc.b 3
0001D340 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D345 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D34A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D34F 02                         @retracted:	dc.b 2
0001D350 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D355 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D35A                            		even
0001D35A                            		even
0001D35A                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D35A                            ; ---------------------------------------------------------------------------
0001D35A                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D35A                            ; ---------------------------------------------------------------------------
0001D35A                            
0001D35A                            Obj84_Delete:
0001D35A 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001D360                            ; ===========================================================================
0001D360                            
0001D360                            EggmanCylinder:
0001D360 7000                       		moveq	#0,d0
0001D362 1028 0024                  		move.b	obRoutine(a0),d0
0001D366 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D36A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D36E                            ; ===========================================================================
0001D36E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D370 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D372 0000                       		dc.w loc_1A57E-Obj84_Index
0001D374                            
0001D374 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D378 2550 0620                  		dc.w $2550, $620
0001D37C 2490 04C0                  		dc.w $2490, $4C0
0001D380 2510 04C0                  		dc.w $2510, $4C0
0001D384                            ; ===========================================================================
0001D384                            
0001D384                            Obj84_Main:	; Routine
0001D384 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D388 7000                       		moveq	#0,d0
0001D38A 1028 0028                  		move.b	obSubtype(a0),d0
0001D38E D040                       		add.w	d0,d0
0001D390 D2C0                       		adda.w	d0,a1
0001D392 117C 0004 0001             		move.b	#4,obRender(a0)
0001D398 08E8 0007 0001             		bset	#7,obRender(a0)
0001D39E 08E8 0004 0001             		bset	#4,obRender(a0)
0001D3A4 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D3AA 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D3B2 3159 0008                  		move.w	(a1)+,obX(a0)
0001D3B6 3151 000C                  		move.w	(a1),obY(a0)
0001D3BA 3159 0038                  		move.w	(a1)+,$38(a0)
0001D3BE 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D3C4 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D3CA 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D3D0 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D3D6 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D3DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3E0                            
0001D3E0                            loc_1A4CE:	; Routine 2
0001D3E0 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D3E6 6F00                       		ble.s	loc_1A4DC
0001D3E8 08E8 0001 0001             		bset	#1,obRender(a0)
0001D3EE                            
0001D3EE                            loc_1A4DC:
0001D3EE 42A8 003C                  		clr.l	$3C(a0)
0001D3F2 4A28 0029                  		tst.b	$29(a0)
0001D3F6 6700                       		beq.s	loc_1A4EA
0001D3F8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3FC                            
0001D3FC                            loc_1A4EA:
0001D3FC 2028 003C                  		move.l	$3C(a0),d0
0001D400 2228 0038                  		move.l	$38(a0),d1
0001D404 D280                       		add.l	d0,d1
0001D406 4841                       		swap	d1
0001D408 3141 000C                  		move.w	d1,obY(a0)
0001D40C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D412 6600                       		bne.s	loc_1A524
0001D414 4A68 0030                  		tst.w	$30(a0)
0001D418 6A00                       		bpl.s	loc_1A524
0001D41A 70F6                       		moveq	#-$A,d0
0001D41C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D422 6F00                       		ble.s	loc_1A514
0001D424 700E                       		moveq	#$E,d0
0001D426                            
0001D426                            loc_1A514:
0001D426 D240                       		add.w	d0,d1
0001D428 2268 0034                  		movea.l	$34(a0),a1
0001D42C 3341 000C                  		move.w	d1,obY(a1)
0001D430 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D436                            
0001D436                            loc_1A524:
0001D436 323C 002B                  		move.w	#$2B,d1
0001D43A 343C 0060                  		move.w	#$60,d2
0001D43E 363C 0061                  		move.w	#$61,d3
0001D442 3828 0008                  		move.w	obX(a0),d4
0001D446 4EB9 0001 1B0C             		jsr	(SolidObject).l
0001D44C 7000                       		moveq	#0,d0
0001D44E 3228 003C                  		move.w	$3C(a0),d1
0001D452 6A00                       		bpl.s	loc_1A550
0001D454 4441                       		neg.w	d1
0001D456 5141                       		subq.w	#8,d1
0001D458 6500                       		bcs.s	loc_1A55C
0001D45A 5200                       		addq.b	#1,d0
0001D45C E841                       		asr.w	#4,d1
0001D45E D041                       		add.w	d1,d0
0001D460 6000                       		bra.s	loc_1A55C
0001D462                            ; ===========================================================================
0001D462                            
0001D462                            loc_1A550:
0001D462 0441 0027                  		subi.w	#$27,d1
0001D466 6500                       		bcs.s	loc_1A55C
0001D468 5200                       		addq.b	#1,d0
0001D46A E841                       		asr.w	#4,d1
0001D46C D041                       		add.w	d1,d0
0001D46E                            
0001D46E                            loc_1A55C:
0001D46E 1140 001A                  		move.b	d0,obFrame(a0)
0001D472 3038 D008                  		move.w	(v_player+obX).w,d0
0001D476 9068 0008                  		sub.w	obX(a0),d0
0001D47A 6B00                       		bmi.s	loc_1A578
0001D47C 0440 0140                  		subi.w	#$140,d0
0001D480 6B00                       		bmi.s	loc_1A578
0001D482 4A28 0001                  		tst.b	obRender(a0)
0001D486 6A00 FED2                  		bpl.w	Obj84_Delete
0001D48A                            
0001D48A                            loc_1A578:
0001D48A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001D490                            ; ===========================================================================
0001D490                            
0001D490                            loc_1A57E:	; Routine 4
0001D490 7000                       		moveq	#0,d0
0001D492 1028 0028                  		move.b	obSubtype(a0),d0
0001D496 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D49A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D49E 6000 FF5C                  		bra.w	loc_1A4EA
0001D4A2                            ; ===========================================================================
0001D4A2 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D4A4 0000                       		dc.w loc_1A598-off_1A590
0001D4A6 0000                       		dc.w loc_1A604-off_1A590
0001D4A8 0000                       		dc.w loc_1A604-off_1A590
0001D4AA                            ; ===========================================================================
0001D4AA                            
0001D4AA                            loc_1A598:
0001D4AA 4A28 0029                  		tst.b	$29(a0)
0001D4AE 6600                       		bne.s	loc_1A5D4
0001D4B0 2268 0034                  		movea.l	$34(a0),a1
0001D4B4 4A29 0021                  		tst.b	obColProp(a1)
0001D4B8 6600                       		bne.s	loc_1A5B4
0001D4BA 6100 D232                  		bsr.w	BossDefeated
0001D4BE 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D4C6                            
0001D4C6                            loc_1A5B4:
0001D4C6 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D4CE 6400                       		bcc.s	locret_1A602
0001D4D0 42A8 003C                  		clr.l	$3C(a0)
0001D4D4 2268 0034                  		movea.l	$34(a0),a1
0001D4D8 5369 0032                  		subq.w	#1,$32(a1)
0001D4DC 4269 0030                  		clr.w	$30(a1)
0001D4E0 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D4E4 4E75                       		rts	
0001D4E6                            ; ===========================================================================
0001D4E6                            
0001D4E6                            loc_1A5D4:
0001D4E6 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D4EC 6C00                       		bge.s	loc_1A5E4
0001D4EE 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D4F6                            
0001D4F6                            loc_1A5E4:
0001D4F6 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D4FE 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D504 6E00                       		bgt.s	locret_1A602
0001D506 4268 003E                  		clr.w	$3E(a0)
0001D50A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D510 4228 0029                  		clr.b	$29(a0)
0001D514                            
0001D514                            locret_1A602:
0001D514 4E75                       		rts	
0001D516                            ; ===========================================================================
0001D516                            
0001D516                            loc_1A604:
0001D516 08E8 0001 0001             		bset	#1,obRender(a0)
0001D51C 4A28 0029                  		tst.b	$29(a0)
0001D520 6600                       		bne.s	loc_1A646
0001D522 2268 0034                  		movea.l	$34(a0),a1
0001D526 4A29 0021                  		tst.b	obColProp(a1)
0001D52A 6600                       		bne.s	loc_1A626
0001D52C 6100 D1C0                  		bsr.w	BossDefeated
0001D530 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D538                            
0001D538                            loc_1A626:
0001D538 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D540 6400                       		bcc.s	locret_1A674
0001D542 42A8 003C                  		clr.l	$3C(a0)
0001D546 2268 0034                  		movea.l	$34(a0),a1
0001D54A 5369 0032                  		subq.w	#1,$32(a1)
0001D54E 4269 0030                  		clr.w	$30(a1)
0001D552 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D556 4E75                       		rts	
0001D558                            ; ===========================================================================
0001D558                            
0001D558                            loc_1A646:
0001D558 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D55E 6D00                       		blt.s	loc_1A656
0001D560 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D568                            
0001D568                            loc_1A656:
0001D568 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D570 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D576 6D00                       		blt.s	locret_1A674
0001D578 4268 003E                  		clr.w	$3E(a0)
0001D57C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D582 4228 0029                  		clr.b	$29(a0)
0001D586                            
0001D586                            locret_1A674:
0001D586 4E75                       		rts	
0001D586 4E75                       		rts	
0001D588                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D588                            ; --------------------------------------------------------------------------------
0001D588                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D588                            ; --------------------------------------------------------------------------------
0001D588                            
0001D588                            SME_SCUpI:	
0001D588 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D58C 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D590 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D594 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D598 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D59C 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D5A0 06                         SME_SCUpI_18:	dc.b 6	
0001D5A1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5A6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5AB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5B0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5B5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5BA A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D5BF 08                         SME_SCUpI_37:	dc.b 8	
0001D5C0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5C5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5CA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5CF B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5D4 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5D9 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D5DE D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D5E3 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D5E8 0A                         SME_SCUpI_60:	dc.b $A	
0001D5E9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5EE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5F3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5F8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5FD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D602 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D607 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D60C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D611 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D616 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D61B 0C                         SME_SCUpI_93:	dc.b $C	
0001D61C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D621 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D626 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D62B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D630 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D635 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D63A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D63F F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D644 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D649 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D64E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D653 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D658 0D                         SME_SCUpI_D0:	dc.b $D	
0001D659 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D65E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D663 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D668 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D66D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D672 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D677 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D67C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D681 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D686 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D68B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D690 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D695 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D69A 0E                         SME_SCUpI_112:	dc.b $E	
0001D69B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6A0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6A5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6AA B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6AF B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6B4 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6B9 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6BE F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D6C3 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6C8 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D6CD 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D6D2 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D6D7 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D6DC A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6E1 0E                         SME_SCUpI_159:	dc.b $E	
0001D6E2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6E7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6EC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6F1 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6F6 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6FB D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D700 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D705 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D70A F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D70F 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D714 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D719 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D71E 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D723 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D728 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D729 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D72E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D733 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D738 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D73D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D742 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D747 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D74C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D751 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D756 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D75B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D760 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D765 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D76A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D76F 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D770 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D775 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D77A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D77F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D784 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D789 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D78E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D793 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D798 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D79D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7A2 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7A7 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7AC 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7B1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7B6 0E                         SME_SCUpI_22E:	dc.b $E	
0001D7B7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7BC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7C1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7C6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7CB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7D0 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7D5 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7DA F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7DF F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7E4 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7E9 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7EE 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7F3 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7F8 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7FD 0E                         SME_SCUpI_275:	dc.b $E	
0001D7FE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D803 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D808 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D80D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D812 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D817 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D81C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D821 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D826 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D82B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D830 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D835 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D83A 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D83F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D844 02                         SME_SCUpI_2BC:	dc.b 2	
0001D845 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D84A 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D850 00                         		even
0001D850 00                         		even
0001D850                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D850                            ; ---------------------------------------------------------------------------
0001D850                            ; Object 86 - energy balls (FZ)
0001D850                            ; ---------------------------------------------------------------------------
0001D850                            
0001D850                            BossPlasma:
0001D850 7000                       		moveq	#0,d0
0001D852 1028 0024                  		move.b	obRoutine(a0),d0
0001D856 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D85A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D85E                            ; ===========================================================================
0001D85E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D860 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D862 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D864 0000                       		dc.w loc_1A962-Obj86_Index
0001D866 0000                       		dc.w loc_1A982-Obj86_Index
0001D868                            ; ===========================================================================
0001D868                            
0001D868                            Obj86_Main:	; Routine 0
0001D868 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D86E 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D874 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D87A 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D882 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D888 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D88E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D894 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D89A 117C 0004 0001             		move.b	#4,obRender(a0)
0001D8A0 08E8 0007 0001             		bset	#7,obRender(a0)
0001D8A6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D8AA                            
0001D8AA                            Obj86_Generator:; Routine 2
0001D8AA 2268 0034                  		movea.l	$34(a0),a1
0001D8AE 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001D8B4 6600                       		bne.s	loc_1A850
0001D8B6 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001D8BA 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001D8C0 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001D8C6                            ; ===========================================================================
0001D8C6                            
0001D8C6                            loc_1A850:
0001D8C6 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D8CC 4A28 0029                  		tst.b	$29(a0)
0001D8D0 6700                       		beq.s	loc_1A86C
0001D8D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D8D6 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D8DC 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001D8E2                            
0001D8E2                            loc_1A86C:
0001D8E2 323C 0013                  		move.w	#$13,d1
0001D8E6 343C 0008                  		move.w	#8,d2
0001D8EA 363C 0011                  		move.w	#$11,d3
0001D8EE 3828 0008                  		move.w	obX(a0),d4
0001D8F2 4EB9 0001 1B0C             		jsr	(SolidObject).l
0001D8F8 3038 D008                  		move.w	(v_player+obX).w,d0
0001D8FC 9068 0008                  		sub.w	obX(a0),d0
0001D900 6B00                       		bmi.s	loc_1A89A
0001D902 0440 0140                  		subi.w	#$140,d0
0001D906 6B00                       		bmi.s	loc_1A89A
0001D908 4A28 0001                  		tst.b	obRender(a0)
0001D90C 6A00 FA4C                  		bpl.w	Obj84_Delete
0001D910                            
0001D910                            loc_1A89A:
0001D910 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001D914 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001D91A 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001D920                            ; ===========================================================================
0001D920                            
0001D920                            Obj86_MakeBalls:; Routine 4
0001D920 4A28 0029                  		tst.b	$29(a0)
0001D924 6700 0000                  		beq.w	loc_1A954
0001D928 4228 0029                  		clr.b	$29(a0)
0001D92C D068 0030                  		add.w	$30(a0),d0
0001D930 0240 001E                  		andi.w	#$1E,d0
0001D934 D4C0                       		adda.w	d0,a2
0001D936 5868 0030                  		addq.w	#4,$30(a0)
0001D93A 4268 0032                  		clr.w	$32(a0)
0001D93E 7403                       		moveq	#3,d2
0001D940                            
0001D940                            Obj86_Loop:
0001D940 4EB9 0000 FBA0             		jsr	(FindNextFreeObj).l
0001D946 6600 0000                  		bne.w	loc_1A954
0001D94A 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001D94E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D954 337C 053C 000C             		move.w	#$53C,obY(a1)
0001D95A 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D960 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001D966 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001D96E 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001D974 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001D97A 137C 0000 0020             		move.b	#0,obColType(a1)
0001D980 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D986 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001D98C 137C 0004 0001             		move.b	#4,obRender(a1)
0001D992 08E9 0007 0001             		bset	#7,obRender(a1)
0001D998 2348 0034                  		move.l	a0,$34(a1)
0001D99C 4EB9 0000 3788             		jsr	(RandomNumber).l
0001D9A2 3228 0032                  		move.w	$32(a0),d1
0001D9A6 C3FC FFB1                  		muls.w	#-$4F,d1
0001D9AA 0641 2578                  		addi.w	#$2578,d1
0001D9AE 0240 001F                  		andi.w	#$1F,d0
0001D9B2 0440 0010                  		subi.w	#$10,d0
0001D9B6 D041                       		add.w	d1,d0
0001D9B8 3340 0030                  		move.w	d0,$30(a1)
0001D9BC 5268 0032                  		addq.w	#1,$32(a0)
0001D9C0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001D9C6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001D9CA                            
0001D9CA                            loc_1A954:
0001D9CA 4A68 0032                  		tst.w	$32(a0)
0001D9CE 6600                       		bne.s	loc_1A95E
0001D9D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D9D4                            
0001D9D4                            loc_1A95E:
0001D9D4 6000 FF0C                  		bra.w	loc_1A86C
0001D9D8                            ; ===========================================================================
0001D9D8                            
0001D9D8                            loc_1A962:	; Routine 6
0001D9D8 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D9DE 4A68 0038                  		tst.w	$38(a0)
0001D9E2 6600                       		bne.s	loc_1A97E
0001D9E4 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001D9EA 2268 0034                  		movea.l	$34(a0),a1
0001D9EE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001D9F4                            
0001D9F4                            loc_1A97E:
0001D9F4 6000 FEEC                  		bra.w	loc_1A86C
0001D9F8                            ; ===========================================================================
0001D9F8                            
0001D9F8                            loc_1A982:	; Routine 8
0001D9F8 7000                       		moveq	#0,d0
0001D9FA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D9FE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DA02 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DA06 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DA0A 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001DA10 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001DA16                            ; ===========================================================================
0001DA16 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DA18 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DA1A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DA1C                            ; ===========================================================================
0001DA1C                            
0001DA1C                            loc_1A9A6:
0001DA1C 3028 0030                  		move.w	$30(a0),d0
0001DA20 9068 0008                  		sub.w	obX(a0),d0
0001DA24 E940                       		asl.w	#4,d0
0001DA26 3140 0010                  		move.w	d0,obVelX(a0)
0001DA2A 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DA30 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DA34 4E75                       		rts	
0001DA36                            ; ===========================================================================
0001DA36                            
0001DA36                            loc_1A9C0:
0001DA36 4A68 0010                  		tst.w	obVelX(a0)
0001DA3A 6700                       		beq.s	loc_1A9E6
0001DA3C 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001DA42 3028 0008                  		move.w	obX(a0),d0
0001DA46 9068 0030                  		sub.w	$30(a0),d0
0001DA4A 6400                       		bcc.s	loc_1A9E6
0001DA4C 4268 0010                  		clr.w	obVelX(a0)
0001DA50 D168 0008                  		add.w	d0,obX(a0)
0001DA54 2268 0034                  		movea.l	$34(a0),a1
0001DA58 5369 0032                  		subq.w	#1,$32(a1)
0001DA5C                            
0001DA5C                            loc_1A9E6:
0001DA5C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DA62 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DA66 6600                       		bne.s	locret_1AA1C
0001DA68 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DA6C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DA72 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DA78 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DA7E 7000                       		moveq	#0,d0
0001DA80 3038 D008                  		move.w	(v_player+obX).w,d0
0001DA84 9068 0008                  		sub.w	obX(a0),d0
0001DA88 3140 0010                  		move.w	d0,obVelX(a0)
0001DA8C 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DA92                            
0001DA92                            locret_1AA1C:
0001DA92 4E75                       		rts	
0001DA94                            ; ===========================================================================
0001DA94                            
0001DA94                            loc_1AA1E:
0001DA94 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001DA9A 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DAA0 6400                       		bcc.s	loc_1AA34
0001DAA2 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DAA6 6700                       		beq.s	loc_1AA34
0001DAA8 4E75                       		rts	
0001DAAA                            ; ===========================================================================
0001DAAA                            
0001DAAA                            loc_1AA34:
0001DAAA 2268 0034                  		movea.l	$34(a0),a1
0001DAAE 5369 0038                  		subq.w	#1,$38(a1)
0001DAB2 6000 F8A6                  		bra.w	Obj84_Delete
0001DAB2 6000 F8A6                  		bra.w	Obj84_Delete
0001DAB6                            		include	"_anim\Plasma Ball Launcher.asm"
0001DAB6                            ; ---------------------------------------------------------------------------
0001DAB6                            ; Animation script - energy ball launcher (FZ)
0001DAB6                            ; ---------------------------------------------------------------------------
0001DAB6 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DAB8 0000                       		dc.w @redsparking-Ani_PLaunch
0001DABA 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DABC 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DAC0 00                         		even
0001DAC0 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DAC6                            		even
0001DAC6 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DACC                            		even
0001DACC                            		even
0001DACC                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DACC                            ; ---------------------------------------------------------------------------
0001DACC                            ; Sprite mappings - energy ball	launcher (FZ)
0001DACC                            ; ---------------------------------------------------------------------------
0001DACC                            Map_PLaunch_internal:
0001DACC 0000                       		dc.w @red-Map_PLaunch_internal
0001DACE 0000                       		dc.w @white-Map_PLaunch_internal
0001DAD0 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DAD2 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DAD4 01                         @red:		dc.b 1
0001DAD5 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DADA 01                         @white:		dc.b 1
0001DADB F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DAE0 01                         @sparking1:	dc.b 1
0001DAE1 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DAE6 01                         @sparking2:	dc.b 1
0001DAE7 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DAEC                            		even
0001DAEC                            		even
0001DAEC                            		include	"_anim\Plasma Balls.asm"
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC                            ; Animation script - energy balls (FZ)
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DAEE 0000                       		dc.w @short-Ani_Plasma
0001DAF0 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DAFF 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DB0E 0A05 FF                    		dc.b $A, 5, afEnd
0001DB12 00                         		even
0001DB12 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DB1C                            		even
0001DB1C                            		even
0001DB1C                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DB1C                            ; ---------------------------------------------------------------------------
0001DB1C                            ; Sprite mappings - energy balls (FZ)
0001DB1C                            ; ---------------------------------------------------------------------------
0001DB1C                            Map_Plasma_internal:
0001DB1C 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DB1E 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DB20 0000                       		dc.w @white1-Map_Plasma_internal
0001DB22 0000                       		dc.w @white2-Map_Plasma_internal
0001DB24 0000                       		dc.w @white3-Map_Plasma_internal
0001DB26 0000                       		dc.w @white4-Map_Plasma_internal
0001DB28 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DB2A 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DB2C 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DB2E 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DB30 0000                       		dc.w @blank-Map_Plasma_internal
0001DB32 02                         @fuzzy1:	dc.b 2
0001DB33 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DB38 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DB3D 02                         @fuzzy2:	dc.b 2
0001DB3E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DB43 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DB48 02                         @white1:	dc.b 2
0001DB49 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DB4E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DB53 02                         @white2:	dc.b 2
0001DB54 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DB59 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DB5E 02                         @white3:	dc.b 2
0001DB5F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DB64 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DB69 02                         @white4:	dc.b 2
0001DB6A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DB6F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DB74 01                         @fuzzy3:	dc.b 1
0001DB75 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DB7A 01                         @fuzzy4:	dc.b 1
0001DB7B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DB80 02                         @fuzzy5:	dc.b 2
0001DB81 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DB86 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DB8B 02                         @fuzzy6:	dc.b 2
0001DB8C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DB91 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DB96 00                         @blank:		dc.b 0
0001DB98 00                         		even
0001DB98 00                         		even
0001DB98                            
0001DB98                            		include	"_incObj\3E Prison Capsule.asm"
0001DB98                            ; ---------------------------------------------------------------------------
0001DB98                            ; Object 3E - prison capsule
0001DB98                            ; ---------------------------------------------------------------------------
0001DB98                            
0001DB98                            Prison:
0001DB98 7000                       		moveq	#0,d0
0001DB9A 1028 0024                  		move.b	obRoutine(a0),d0
0001DB9E 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DBA2 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DBC2 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001DBC8                            
0001DBC8                            	@delete:
0001DBC8 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001DBCE                            ; ===========================================================================
0001DBCE 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DBD0 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DBD2 0000                       		dc.w Pri_Switched-Pri_Index
0001DBD4 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBD6 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBD8 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBDA 0000                       		dc.w Pri_Animals-Pri_Index
0001DBDC 0000                       		dc.w Pri_EndAct-Pri_Index
0001DBDE                            
0001DBDE =00000030                  pri_origY:	equ $30		; original y-axis position
0001DBDE                            
0001DBDE 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DBE2 040C 0501                  		dc.b 4,	$C, 5, 1
0001DBE6 0610 0403                  		dc.b 6,	$10, 4,	3
0001DBEA 0810 0305                  		dc.b 8,	$10, 3,	5
0001DBEE                            ; ===========================================================================
0001DBEE                            
0001DBEE                            Pri_Main:	; Routine 0
0001DBEE 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DBF6 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DBFC 117C 0004 0001             		move.b	#4,obRender(a0)
0001DC02 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DC08 7000                       		moveq	#0,d0
0001DC0A 1028 0028                  		move.b	obSubtype(a0),d0
0001DC0E E548                       		lsl.w	#2,d0
0001DC10 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DC14 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DC18 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DC1C 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DC20 3028 0018                  		move.w obPriority(a0),d0 
0001DC24 E248                       		lsr.w #1,d0 
0001DC26 0240 0380                  		andi.w #$380,d0 
0001DC2A 3140 0018                  		move.w d0,obPriority(a0)		
0001DC2E 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DC32 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DC36 6600                       		bne.s	@not02		; if not, branch
0001DC38                            
0001DC38 117C 0006 0020             		move.b	#6,obColType(a0)
0001DC3E 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DC44                            
0001DC44                            	@not02:
0001DC44 4E75                       		rts	
0001DC46                            ; ===========================================================================
0001DC46                            
0001DC46                            Pri_BodyMain:	; Routine 2
0001DC46 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DC4C 6700                       		beq.s	@chkopened
0001DC4E 323C 002B                  		move.w	#$2B,d1
0001DC52 343C 0018                  		move.w	#$18,d2
0001DC56 363C 0018                  		move.w	#$18,d3
0001DC5A 3828 0008                  		move.w	obX(a0),d4
0001DC5E 4EF9 0001 1B0C             		jmp	(SolidObject).l
0001DC64                            ; ===========================================================================
0001DC64                            
0001DC64                            @chkopened:
0001DC64 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DC68 6700                       		beq.s	@open		; if yes, branch
0001DC6A 4228 0025                  		clr.b	ob2ndRout(a0)
0001DC6E 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DC74 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DC7A                            
0001DC7A                            	@open:
0001DC7A 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DC80 4E75                       		rts	
0001DC82                            ; ===========================================================================
0001DC82                            
0001DC82                            Pri_Switched:	; Routine 4
0001DC82 323C 0017                  		move.w	#$17,d1
0001DC86 343C 0008                  		move.w	#8,d2
0001DC8A 363C 0008                  		move.w	#8,d3
0001DC8E 3828 0008                  		move.w	obX(a0),d4
0001DC92 4EB9 0001 1B0C             		jsr	(SolidObject).l
0001DC98 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DC9E 4EB9 0000 C7AA             		jsr	(AnimateSprite).l
0001DCA4 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DCAA 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DCAE 6700                       		beq.s	@open2		; if yes, branch
0001DCB0                            
0001DCB0 5068 000C                  		addq.w	#8,obY(a0)
0001DCB4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DCBA 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DCC0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DCC4 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DCC8 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DCCE 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DCD4 4228 0025                  		clr.b	ob2ndRout(a0)
0001DCD8 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DCDE 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DCE4                            
0001DCE4                            	@open2:
0001DCE4 4E75                       		rts	
0001DCE6                            ; ===========================================================================
0001DCE6                            
0001DCE6                            Pri_Explosion:	; Routine 6, 8, $A
0001DCE6 7007                       		moveq	#7,d0
0001DCE8 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DCEC 6600                       		bne.s	@noexplosion
0001DCEE 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001DCF4 6600                       		bne.s	@noexplosion
0001DCF6 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DCFA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD00 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD06 4EB9 0000 3788             		jsr	(RandomNumber).l
0001DD0C 7200                       		moveq	#0,d1
0001DD0E 1200                       		move.b	d0,d1
0001DD10 E409                       		lsr.b	#2,d1
0001DD12 0441 0020                  		subi.w	#$20,d1
0001DD16 D369 0008                  		add.w	d1,obX(a1)
0001DD1A E048                       		lsr.w	#8,d0
0001DD1C E608                       		lsr.b	#3,d0
0001DD1E D169 000C                  		add.w	d0,obY(a1)
0001DD22                            
0001DD22                            	@noexplosion:
0001DD22 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DD26 6700                       		beq.s	@makeanimal
0001DD28 4E75                       		rts	
0001DD2A                            ; ===========================================================================
0001DD2A                            
0001DD2A                            @makeanimal:
0001DD2A 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DD30 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DD36 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DD3C 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DD42 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DD48 7C07                       		moveq	#7,d6
0001DD4A 3A3C 009A                  		move.w	#$9A,d5
0001DD4E 78E4                       		moveq	#-$1C,d4
0001DD50                            
0001DD50                            	@loop:
0001DD50 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001DD56 6600                       		bne.s	@fail
0001DD58 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DD5C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD62 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD68 D969 0008                  		add.w	d4,obX(a1)
0001DD6C 5E44                       		addq.w	#7,d4
0001DD6E 3345 0036                  		move.w	d5,$36(a1)
0001DD72 5145                       		subq.w	#8,d5
0001DD74 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DD78                            
0001DD78                            	@fail:
0001DD78 4E75                       		rts	
0001DD7A                            ; ===========================================================================
0001DD7A                            
0001DD7A                            Pri_Animals:	; Routine $C
0001DD7A 7007                       		moveq	#7,d0
0001DD7C C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DD80 6600                       		bne.s	@noanimal
0001DD82 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001DD88 6600                       		bne.s	@noanimal
0001DD8A 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DD8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD94 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD9A 4EB9 0000 3788             		jsr	(RandomNumber).l
0001DDA0 0240 001F                  		andi.w	#$1F,d0
0001DDA4 5D40                       		subq.w	#6,d0
0001DDA6 4A41                       		tst.w	d1
0001DDA8 6A00                       		bpl.s	@ispositive
0001DDAA 4440                       		neg.w	d0
0001DDAC                            
0001DDAC                            	@ispositive:
0001DDAC D169 0008                  		add.w	d0,obX(a1)
0001DDB0 337C 000C 0036             		move.w	#$C,$36(a1)
0001DDB6                            
0001DDB6                            	@noanimal:
0001DDB6 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DDBA 6600                       		bne.s	@wait
0001DDBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DDC0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DDC6                            
0001DDC6                            	@wait:
0001DDC6 4E75                       		rts	
0001DDC8                            ; ===========================================================================
0001DDC8                            
0001DDC8                            Pri_EndAct:	; Routine $E
0001DDC8 703E                       		moveq	#$3E,d0
0001DDCA 7228                       		moveq	#id_Animals,d1
0001DDCC 7440                       		moveq	#$40,d2
0001DDCE 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DDD2                            
0001DDD2                            	@findanimal:
0001DDD2 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DDD4 6700                       		beq.s	@found		; if yes, branch
0001DDD6 D2C2                       		adda.w	d2,a1		; next object RAM
0001DDD8 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DDDC                            
0001DDDC 4EB9 0001 0E2E             		jsr	(GotThroughAct1).l
0001DDE2 4EF9 0000 F73E             		jmp	(DeleteObject).l
0001DDE8                            
0001DDE8                            	@found:
0001DDE8 4E75                       		rts	
0001DDE8 4E75                       		rts	
0001DDEA                            		include	"_anim\Prison Capsule.asm"
0001DDEA                            ; ---------------------------------------------------------------------------
0001DDEA                            ; Animation script - prison capsule
0001DDEA                            ; ---------------------------------------------------------------------------
0001DDEA 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DDEC 0000                       		dc.w @switchflash-Ani_Pri
0001DDEE 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DDF2                            		even
0001DDF2                            		even
0001DDF2                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DDF2                            ; ---------------------------------------------------------------------------
0001DDF2                            ; Sprite mappings - prison capsule
0001DDF2                            ; ---------------------------------------------------------------------------
0001DDF2                            Map_Pri_internal:
0001DDF2 0000                       		dc.w @capsule-Map_Pri_internal
0001DDF4 0000                       		dc.w @switch1-Map_Pri_internal
0001DDF6 0000                       		dc.w @broken-Map_Pri_internal
0001DDF8 0000                       		dc.w @switch2-Map_Pri_internal
0001DDFA 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DDFC 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DDFE 0000                       		dc.w @blank-Map_Pri_internal
0001DE00 07                         @capsule:	dc.b 7
0001DE01 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DE06 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DE0B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DE10 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DE15 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DE1A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DE1F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DE24 01                         @switch1:	dc.b 1
0001DE25 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DE2A 06                         @broken:	dc.b 6
0001DE2B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DE30 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DE35 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DE3A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DE3F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DE44 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DE49 01                         @switch2:	dc.b 1
0001DE4A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DE4F 02                         @unusedthing1:	dc.b 2
0001DE50 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DE55 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DE5A 01                         @unusedthing2:	dc.b 1
0001DE5B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DE60 00                         @blank:		dc.b 0
0001DE62 00                         		even
0001DE62 00                         		even
0001DE62                            
0001DE62                            		include	"_incObj\sub ReactToItem.asm"
0001DE62                            ; ---------------------------------------------------------------------------
0001DE62                            ; Subroutine to react to obColType(a0)
0001DE62                            ; ---------------------------------------------------------------------------
0001DE62                            
0001DE62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE62                            
0001DE62                            
0001DE62                            ReactToItem:
0001DE62 4E71                       		nop	
0001DE64 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DE68 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DE6C 5142                       		subq.w	#8,d2
0001DE6E 7A00                       		moveq	#0,d5
0001DE70 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DE74 5705                       		subq.b	#3,d5
0001DE76 9645                       		sub.w	d5,d3
0001DE78 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DE7E 6600                       		bne.s	@notducking	; if not, branch
0001DE80 0643 000C                  		addi.w	#$C,d3
0001DE84 7A0A                       		moveq	#$A,d5
0001DE86                            
0001DE86                            	@notducking:
0001DE86 383C 0010                  		move.w	#$10,d4
0001DE8A DA45                       		add.w	d5,d5
0001DE8C 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DE90 3C3C 005F                  		move.w	#$5F,d6
0001DE94                            
0001DE94                            @loop:
0001DE94 4A29 0001                  		tst.b	obRender(a1)
0001DE98 6A00                       		bpl.s	@next
0001DE9A 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DE9E 6600                       		bne.s	@proximity	; if nonzero, branch
0001DEA0                            
0001DEA0                            	@next:
0001DEA0 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DEA4 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001DEA8                            
0001DEA8 7000                       		moveq	#0,d0
0001DEAA 4E75                       		rts	
0001DEAC                            ; ===========================================================================
0001DEAC                            @sizes:		;   width, height
0001DEAC 1414                       		dc.b  $14, $14		; $01
0001DEAE 0C14                       		dc.b   $C, $14		; $02
0001DEB0 140C                       		dc.b  $14,  $C		; $03
0001DEB2 0410                       		dc.b	4, $10		; $04
0001DEB4 0C12                       		dc.b   $C, $12		; $05
0001DEB6 1010                       		dc.b  $10, $10		; $06
0001DEB8 0606                       		dc.b	6,   6		; $07
0001DEBA 180C                       		dc.b  $18,  $C		; $08
0001DEBC 0C10                       		dc.b   $C, $10		; $09
0001DEBE 100C                       		dc.b  $10,  $C		; $0A
0001DEC0 0808                       		dc.b	8,   8		; $0B
0001DEC2 1410                       		dc.b  $14, $10		; $0C
0001DEC4 1408                       		dc.b  $14,   8		; $0D
0001DEC6 0E0E                       		dc.b   $E,  $E		; $0E
0001DEC8 1818                       		dc.b  $18, $18		; $0F
0001DECA 2810                       		dc.b  $28, $10		; $10
0001DECC 1018                       		dc.b  $10, $18		; $11
0001DECE 0810                       		dc.b	8, $10		; $12
0001DED0 2070                       		dc.b  $20, $70		; $13
0001DED2 4020                       		dc.b  $40, $20		; $14
0001DED4 8020                       		dc.b  $80, $20		; $15
0001DED6 2020                       		dc.b  $20, $20		; $16
0001DED8 0808                       		dc.b	8,   8		; $17
0001DEDA 0404                       		dc.b	4,   4		; $18
0001DEDC 2008                       		dc.b  $20,   8		; $19
0001DEDE 0C0C                       		dc.b   $C,  $C		; $1A
0001DEE0 0804                       		dc.b	8,   4		; $1B
0001DEE2 1804                       		dc.b  $18,   4		; $1C
0001DEE4 2804                       		dc.b  $28,   4		; $1D
0001DEE6 0408                       		dc.b	4,   8		; $1E
0001DEE8 0418                       		dc.b	4, $18		; $1F
0001DEEA 0428                       		dc.b	4, $28		; $20
0001DEEC 0420                       		dc.b	4, $20		; $21
0001DEEE 1818                       		dc.b  $18, $18		; $22
0001DEF0 0C18                       		dc.b   $C, $18		; $23
0001DEF2 4808                       		dc.b  $48,   8		; $24
0001DEF4                            ; ===========================================================================
0001DEF4                            
0001DEF4                            @proximity:
0001DEF4 0240 003F                  		andi.w	#$3F,d0
0001DEF8 D040                       		add.w	d0,d0
0001DEFA 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001DEFE 7200                       		moveq	#0,d1
0001DF00 121A                       		move.b	(a2)+,d1
0001DF02 3029 0008                  		move.w	obX(a1),d0
0001DF06 9041                       		sub.w	d1,d0
0001DF08 9042                       		sub.w	d2,d0
0001DF0A 6400                       		bcc.s	@outsidex	; branch if not touching
0001DF0C D241                       		add.w	d1,d1
0001DF0E D041                       		add.w	d1,d0
0001DF10 6500                       		bcs.s	@withinx	; branch if touching
0001DF12 6000 FF8C                  		bra.w	@next
0001DF16                            ; ===========================================================================
0001DF16                            
0001DF16                            @outsidex:
0001DF16 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DF1A B044                       		cmp.w	d4,d0
0001DF1C 6200 FF82                  		bhi.w	@next
0001DF20                            
0001DF20                            @withinx:
0001DF20 7200                       		moveq	#0,d1
0001DF22 121A                       		move.b	(a2)+,d1
0001DF24 3029 000C                  		move.w	obY(a1),d0
0001DF28 9041                       		sub.w	d1,d0
0001DF2A 9043                       		sub.w	d3,d0
0001DF2C 6400                       		bcc.s	@outsidey	; branch if not touching
0001DF2E D241                       		add.w	d1,d1
0001DF30 D240                       		add.w	d0,d1
0001DF32 6500                       		bcs.s	@withiny	; branch if touching
0001DF34 6000 FF6A                  		bra.w	@next
0001DF38                            
0001DF38                            ; ===========================================================================
0001DF38                            
0001DF38                            @outsidey:
0001DF38 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DF3C B045                       		cmp.w	d5,d0
0001DF3E 6200 FF60                  		bhi.w	@next
0001DF42                            
0001DF42                            @withiny:
0001DF42                            	@chktype:
0001DF42 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001DF48 6600 0000                          	bne	NotGHZReact  ;TIS
0001DF4C 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001DF50 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001DF54 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF58 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001DF5C 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF60 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001DF64 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF68                            NotGHZReact:                      ;TIS
0001DF68 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001DF6C 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001DF70 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001DF74 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001DF78 6700 0000                  		beq.w	React_Special	; if yes, branch
0001DF7C 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001DF7E 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001DF82                            
0001DF82                            ; obColType is $40-$7F (powerups)
0001DF82                            
0001DF82 1029 0020                  		move.b	obColType(a1),d0
0001DF86 0200 003F                  		andi.b	#$3F,d0
0001DF8A 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001DF8E 6700                       		beq.s	React_Monitor	; if yes, branch
0001DF90 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001DF96 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001DF9A 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001DF9E                            
0001DF9E                            	@invincible:
0001DF9E 4E75                       		rts	
0001DFA0                            ; ===========================================================================
0001DFA0                            
0001DFA0                            React_Monitor:
0001DFA0 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001DFA4 6A00                       		bpl.s	@movingdown	; if not, branch
0001DFA6                            
0001DFA6 3028 000C                  		move.w	obY(a0),d0
0001DFAA 0440 0010                  		subi.w	#$10,d0
0001DFAE B069 000C                  		cmp.w	obY(a1),d0
0001DFB2 6500                       		bcs.s	@donothing
0001DFB4 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001DFB8 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001DFBE 4A29 0025                  		tst.b	ob2ndRout(a1)
0001DFC2 6600                       		bne.s	@donothing
0001DFC4 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001DFC8 4E75                       		rts	
0001DFCA                            ; ===========================================================================
0001DFCA                            
0001DFCA                            @movingdown:
0001DFCA 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001DFD0 6600                       		bne.s	@donothing
0001DFD2 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001DFD6 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001DFDA                            
0001DFDA                            	@donothing:
0001DFDA 4E75                       		rts	
0001DFDC                            ; ===========================================================================
0001DFDC                            
0001DFDC                            React_Enemy:
0001DFDC 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001DFE0 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001DFE2 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001DFE8 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001DFEC 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001DFF2 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001DFF6                            
0001DFF6                            	@donthurtsonic:
0001DFF6 4A29 0021                  		tst.b	obColProp(a1)
0001DFFA 6700                       		beq.s	breakenemy
0001DFFC                            
0001DFFC 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E000 4468 0012                  		neg.w	obVelY(a0)
0001E004 E0E8 0010                  		asr	obVelX(a0)
0001E008 E0E8 0012                  		asr	obVelY(a0)
0001E00C 137C 0000 0020             		move.b	#0,obColType(a1)
0001E012 5329 0021                  		subq.b	#1,obColProp(a1)
0001E016 6600                       		bne.s	@flagnotclear
0001E018 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E01E                            
0001E01E                            	@flagnotclear:
0001E01E 4E75                       		rts	
0001E020                            ; ===========================================================================
0001E020                            
0001E020                            breakenemy:
0001E020 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E026 7000                       		moveq	#0,d0
0001E028 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E02C 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E030 0C40 0006                  		cmpi.w	#6,d0
0001E034 6500                       		bcs.s	@bonusokay
0001E036 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E038                            
0001E038                            	@bonusokay:
0001E038 3340 003E                  		move.w	d0,$3E(a1)
0001E03C 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E040 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E046 6500                       		bcs.s	@lessthan16	; if not, branch
0001E048 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E04C 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E052                            
0001E052                            	@lessthan16:
0001E052 6100 0000                  		bsr.w	AddPoints
0001E056 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E05A 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E060 4A68 0012                  		tst.w	obVelY(a0)
0001E064 6B00                       		bmi.s	@bouncedown
0001E066 3028 000C                  		move.w	obY(a0),d0
0001E06A B069 000C                  		cmp.w	obY(a1),d0
0001E06E 6400                       		bcc.s	@bounceup
0001E070 4468 0012                  		neg.w	obVelY(a0)
0001E074 4E75                       		rts	
0001E076                            ; ===========================================================================
0001E076                            
0001E076                            	@bouncedown:
0001E076 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E07C 4E75                       		rts	
0001E07E                            
0001E07E                            	@bounceup:
0001E07E 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E084 4E75                       		rts	
0001E086                            
0001E086 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E08E                            
0001E08E                            ; ===========================================================================
0001E08E                            
0001E08E                            React_Caterkiller:
0001E08E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E094                            
0001E094                            React_ChkHurt:
0001E094 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E098 6700                       		beq.s	notinvincible	; if not, branch
0001E09A                            
0001E09A                            	isflashing:
0001E09A 70FF                       		moveq	#-1,d0
0001E09C 4E75                       		rts	
0001E09E                            ; ===========================================================================
0001E09E                            
0001E09E                            	notinvincible:
0001E09E 4E71                       		nop	
0001E0A0 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E0A4 66F4                       		bne.s	isflashing	; if yes, branch
0001E0A6 2449                       		movea.l	a1,a2
0001E0A8                            
0001E0A8                            ; End of function ReactToItem
0001E0A8                            ; continue straight to HurtSonic
0001E0A8                            
0001E0A8                            ; ---------------------------------------------------------------------------
0001E0A8                            ; Hurting Sonic	subroutine
0001E0A8                            ; ---------------------------------------------------------------------------
0001E0A8                            
0001E0A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0A8                            
0001E0A8                            
0001E0A8                            HurtSonic:
0001E0A8 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E0AC 6600                       		bne.s	@hasshield	; if yes, branch
0001E0AE 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E0B2 6600                       		bne.s	@hasshield	; if yes, branch
0001E0B4 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E0B8 6600                       		bne.s	@hasshield	; if yes, branch
0001E0BA 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E0BE 6600                       		bne.s	@hasshield	; if yes, branch
0001E0C0 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E0C4 6700 0000                  		beq.w	@norings	; if not, branch
0001E0C8                            
0001E0C8 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
0001E0CE 6600                       		bne.s	@hasshield
0001E0D0 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E0D4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E0DA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E0E0                            
0001E0E0                            	@hasshield:
0001E0E0 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E0E6 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E0E8 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E0EC 6700 FFAC                  		beq.w	isflashing
0001E0F0 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E0F4 6700 FFA4                  		beq.w	isflashing
0001E0F8                            
0001E0F8                            	@hasrshield:
0001E0F8 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E0FE 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E100 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E104 6700 FF94                  		beq.w 	isflashing
0001E108 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E10C 6700 FF8C                  		beq.w 	isflashing
0001E110 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E114 6700 FF84                  		beq.w 	isflashing
0001E118 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E11C 6700 FF7C                  		beq.w 	isflashing
0001E120 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E124 6700 FF74                  		beq.w 	isflashing
0001E128 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E12C 6700 FF6C                  		beq.w 	isflashing
0001E130 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E134 6700 FF64                  		beq.w 	isflashing
0001E138 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E13C 6700 FF5C                  		beq.w 	isflashing
0001E140                            
0001E140                            	@hasspshield:
0001E140 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E146 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E148 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E14C 6700 FF4C                  		beq.w 	isflashing
0001E150 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E154 6700 FF44                  		beq.w 	isflashing
0001E158 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E15C 6700 FF3C                  		beq.w 	isflashing
0001E160 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E164 6700 FF34                  		beq.w 	isflashing
0001E168 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E16C 6700 FF2C                  		beq.w 	isflashing
0001E170 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E174 6700 FF24                  		beq.w 	isflashing
0001E178 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E17C 6700 FF1C                  		beq.w 	isflashing
0001E180 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E184 6700 FF14                  		beq.w 	isflashing
0001E188 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E18C 6700 FF0C                  		beq.w 	isflashing
0001E190 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E194 6700 FE8A                  		beq.w 	breakenemy
0001E198 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E19C 6700 FE82                  		beq.w 	breakenemy
0001E1A0 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E1A4 6700 FE7A                  		beq.w 	breakenemy
0001E1A8 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E1AC 6700 FE72                  		beq.w 	breakenemy
0001E1B0 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E1B4 6700 FE6A                  		beq.w 	breakenemy
0001E1B8                            
0001E1B8                            
0001E1B8                            	@hurtcont:
0001E1B8 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E1BE 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E1C4 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E1CA                            		
0001E1CA 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E1D0 6700                       		beq.s	@hurtcont2	;if not, branch
0001E1D2 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E1D6                            		
0001E1D6                            	@hurtcont2:
0001E1D6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E1DC 4EB9 0001 614A             		jsr		Sonic_ResetOnFloor
0001E1E2 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E1E8 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E1EE 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E1F4 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E1FA 6700                       		beq.s	@isdry		; if not, branch
0001E1FC                            
0001E1FC 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E202 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E208                            
0001E208                            	@isdry:
0001E208 3028 0008                  		move.w	obX(a0),d0
0001E20C B06A 0008                  		cmp.w	obX(a2),d0
0001E210 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E212 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E216                            
0001E216                            	@isleft:
0001E216 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E21C 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E222 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E228 317C 0120 0030             		move.w	#$120,$30(a0)
0001E22E 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E232 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E234 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E238 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E23A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E240 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E246 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E24C 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E250 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E254 6600                       		bne.s	@sound		; if not, branch
0001E256 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E25A 6600                       		bne.s	@sound		; if not, branch
0001E25C 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E260                            
0001E260                            	@sound:
0001E260 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001E266 70FF                       		moveq	#-1,d0
0001E268 4E75                       		rts	
0001E26A                            
0001E26A                            	@hurtelec:
0001E26A 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E270 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E276 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E27A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E27E 66E0                       		bne.s	@sound		; if not, branch
0001E280 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E284 66DA                       		bne.s	@sound		; if not, branch
0001E286 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E28A                            ; ===========================================================================
0001E28A                            
0001E28A                            @norings:
0001E28A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E28E 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E292                            
0001E292                            ; ---------------------------------------------------------------------------
0001E292                            ; Subroutine to	kill Sonic
0001E292                            ; ---------------------------------------------------------------------------
0001E292                            
0001E292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E292                            
0001E292                            
0001E292                            KillSonic:
0001E292 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E296 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E29A 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E2A0 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E2A6 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E2AC 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E2B2 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E2B8 4EB9 0001 614A             		jsr		Sonic_ResetOnFloor
0001E2BE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E2C4 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E2CA 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E2D0 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E2D6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E2DC 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E2E0 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E2E2 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E2E6 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E2E8 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E2EE 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E2F4 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E2F8 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E2FC 6600                       		bne.s	@sound
0001E2FE 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E302                            
0001E302                            	@sound:
0001E302 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001E308                            
0001E308                            	@dontdie:
0001E308 70FF                       		moveq	#-1,d0
0001E30A 4E75                       		rts	
0001E30C                            ; End of function KillSonic
0001E30C                            Kill_Lava:	
0001E30C 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E312 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E318 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E31C 4EB9 0000 0FCC                 jsr		(PlaySound_Special).l
0001E322                            
0001E322                            
0001E322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E322                            
0001E322                            
0001E322                            React_Special:
0001E322 1229 0020                  		move.b	obColType(a1),d1
0001E326 0201 003F                  		andi.b	#$3F,d1
0001E32A 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E32E 6700                       		beq.s	@caterkiller	; if yes, branch
0001E330 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E334 6700                       		beq.s	@yadrin		; if yes, branch
0001E336 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E33A 6700                       		beq.s	@D7orE1		; if yes, branch
0001E33C 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E340 6700                       		beq.s	@D7orE1		; if yes, branch
0001E342 4E75                       		rts	
0001E344                            ; ===========================================================================
0001E344                            
0001E344                            @caterkiller:
0001E344 6000 FD48                  		bra.w	React_Caterkiller
0001E348                            ; ===========================================================================
0001E348                            
0001E348                            @yadrin:
0001E348 9A40                       		sub.w	d0,d5
0001E34A 0C45 0008                  		cmpi.w	#8,d5
0001E34E 6400                       		bcc.s	@normalenemy
0001E350 3029 0008                  		move.w	obX(a1),d0
0001E354 5940                       		subq.w	#4,d0
0001E356 0829 0000 0022             		btst	#0,obStatus(a1)
0001E35C 6700                       		beq.s	@noflip
0001E35E 0440 0010                  		subi.w	#$10,d0
0001E362                            
0001E362                            	@noflip:
0001E362 9042                       		sub.w	d2,d0
0001E364 6400                       		bcc.s	@loc_1B13C
0001E366 0640 0018                  		addi.w	#$18,d0
0001E36A 6500                       		bcs.s	@loc_1B140
0001E36C 6000                       		bra.s	@normalenemy
0001E36E                            ; ===========================================================================
0001E36E                            
0001E36E                            	@loc_1B13C:
0001E36E B044                       		cmp.w	d4,d0
0001E370 6200                       		bhi.s	@normalenemy
0001E372                            
0001E372                            	@loc_1B140:
0001E372 6000 FD20                  		bra.w	React_ChkHurt
0001E376                            ; ===========================================================================
0001E376                            
0001E376                            	@normalenemy:
0001E376 6000 FC64                  		bra.w	React_Enemy
0001E37A                            ; ===========================================================================
0001E37A                            
0001E37A                            @D7orE1:
0001E37A 5229 0021                  		addq.b	#1,obColProp(a1)
0001E37E 4E75                       		rts	
0001E380                            ; End of function React_Special
0001E380                            
0001E380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E380                            
0001E380                            React_ChkWaterTag:
0001E380 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E386 6600 0000                  		bne	NotWaterTag
0001E38A 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E390                            	NotWaterTag:
0001E390 4E75                       		rts
0001E392                            
0001E392                            React_WaterTag:
0001E392 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E398 6700 0000                  		beq	SkipWaterTag
0001E39C 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E3A2                            	SkipWaterTag:
0001E3A2 4E75                       		rts
0001E3A2 4E75                       		rts
0001E3A4                            
0001E3A4                            ; ---------------------------------------------------------------------------
0001E3A4                            ; Subroutine to	show the special stage layout
0001E3A4                            ; ---------------------------------------------------------------------------
0001E3A4                            
0001E3A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3A4                            
0001E3A4                            
0001E3A4                            SS_ShowLayout:
0001E3A4 6100 0000                  		bsr.w	SS_AniWallsRings
0001E3A8 6100 0000                  		bsr.w	SS_AniItems
0001E3AC 3F05                       		move.w	d5,-(sp)
0001E3AE 43F8 8000                  		lea	($FFFF8000).w,a1
0001E3B2 1038 F780                  		move.b	(v_ssangle).w,d0
0001E3B6 0200 00FC                  		andi.b	#$FC,d0
0001E3BA 4EB9 0000 37AE             		jsr	(CalcSine).l
0001E3C0 3800                       		move.w	d0,d4
0001E3C2 3A01                       		move.w	d1,d5
0001E3C4 C9FC 0018                  		muls.w	#$18,d4
0001E3C8 CBFC 0018                  		muls.w	#$18,d5
0001E3CC 7400                       		moveq	#0,d2
0001E3CE 3438 F700                  		move.w	(v_screenposx).w,d2
0001E3D2 84FC 0018                  		divu.w	#$18,d2
0001E3D6 4842                       		swap	d2
0001E3D8 4442                       		neg.w	d2
0001E3DA 0642 FF4C                  		addi.w	#-$B4,d2
0001E3DE 7600                       		moveq	#0,d3
0001E3E0 3638 F704                  		move.w	(v_screenposy).w,d3
0001E3E4 86FC 0018                  		divu.w	#$18,d3
0001E3E8 4843                       		swap	d3
0001E3EA 4443                       		neg.w	d3
0001E3EC 0643 FF4C                  		addi.w	#-$B4,d3
0001E3F0 3E3C 000F                  		move.w	#$F,d7
0001E3F4                            
0001E3F4                            loc_1B19E:
0001E3F4 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E3F8 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E3FC 4440                       		neg.w	d0
0001E3FE C3C2                       		muls.w	d2,d1
0001E400 C1C3                       		muls.w	d3,d0
0001E402 2C00                       		move.l	d0,d6
0001E404 DC81                       		add.l	d1,d6
0001E406 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E40A C1C2                       		muls.w	d2,d0
0001E40C C3C3                       		muls.w	d3,d1
0001E40E D280                       		add.l	d0,d1
0001E410 2406                       		move.l	d6,d2
0001E412 3C3C 000F                  		move.w	#$F,d6
0001E416                            
0001E416                            loc_1B1C0:
0001E416 2002                       		move.l	d2,d0
0001E418 E080                       		asr.l	#8,d0
0001E41A 32C0                       		move.w	d0,(a1)+
0001E41C 2001                       		move.l	d1,d0
0001E41E E080                       		asr.l	#8,d0
0001E420 32C0                       		move.w	d0,(a1)+
0001E422 D485                       		add.l	d5,d2
0001E424 D284                       		add.l	d4,d1
0001E426 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E42A                            
0001E42A 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E42E 0643 0018                  		addi.w	#$18,d3
0001E432 51CF FFC0                  		dbf	d7,loc_1B19E
0001E436                            
0001E436 3A1F                       		move.w	(sp)+,d5
0001E438 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E43E 7000                       		moveq	#0,d0
0001E440 3038 F704                  		move.w	(v_screenposy).w,d0
0001E444 80FC 0018                  		divu.w	#$18,d0
0001E448 C0FC 0080                  		mulu.w	#$80,d0
0001E44C D1C0                       		adda.l	d0,a0
0001E44E 7000                       		moveq	#0,d0
0001E450 3038 F700                  		move.w	(v_screenposx).w,d0
0001E454 80FC 0018                  		divu.w	#$18,d0
0001E458 D0C0                       		adda.w	d0,a0
0001E45A 49F8 8000                  		lea	($FFFF8000).w,a4
0001E45E 3E3C 000F                  		move.w	#$F,d7
0001E462                            
0001E462                            loc_1B20C:
0001E462 3C3C 000F                  		move.w	#$F,d6
0001E466                            
0001E466                            loc_1B210:
0001E466 7000                       		moveq	#0,d0
0001E468 1018                       		move.b	(a0)+,d0
0001E46A 6700                       		beq.s	loc_1B268
0001E46C 0C00 004E                  		cmpi.b	#$4E,d0
0001E470 6200                       		bhi.s	loc_1B268
0001E472 3614                       		move.w	(a4),d3
0001E474 0643 0120                  		addi.w	#$120,d3
0001E478 0C43 0070                  		cmpi.w	#$70,d3
0001E47C 6500                       		blo.s	loc_1B268
0001E47E 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E482 6400                       		bhs.s	loc_1B268
0001E484 342C 0002                  		move.w	2(a4),d2
0001E488 0642 00F0                  		addi.w	#$F0,d2
0001E48C 0C42 0070                  		cmpi.w	#$70,d2
0001E490 6500                       		blo.s	loc_1B268
0001E492 0C42 0170                  		cmpi.w	#$170,d2
0001E496 6400                       		bhs.s	loc_1B268
0001E498 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E49E E748                       		lsl.w	#3,d0
0001E4A0 4BF5 0000                  		lea	(a5,d0.w),a5
0001E4A4 225D                       		movea.l	(a5)+,a1
0001E4A6 321D                       		move.w	(a5)+,d1
0001E4A8 D241                       		add.w	d1,d1
0001E4AA D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E4AE 365D                       		movea.w	(a5)+,a3
0001E4B0 7200                       		moveq	#0,d1
0001E4B2 1219                       		move.b	(a1)+,d1
0001E4B4 5301                       		subq.b	#1,d1
0001E4B6 6B00                       		bmi.s	loc_1B268
0001E4B8 4EB9 0000 F862             		jsr	(BuildSpr_Normal).l
0001E4BE                            
0001E4BE                            loc_1B268:
0001E4BE 584C                       		addq.w	#4,a4
0001E4C0 51CE FFA4                  		dbf	d6,loc_1B210
0001E4C4                            
0001E4C4 41E8 0070                  		lea	$70(a0),a0
0001E4C8 51CF FF98                  		dbf	d7,loc_1B20C
0001E4CC                            
0001E4CC 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E4D0 0C05 0050                  		cmpi.b	#$50,d5
0001E4D4 6700                       		beq.s	loc_1B288
0001E4D6 24BC 0000 0000             		move.l	#0,(a2)
0001E4DC 4E75                       		rts	
0001E4DE                            ; ===========================================================================
0001E4DE                            
0001E4DE                            loc_1B288:
0001E4DE 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E4E4 4E75                       		rts	
0001E4E6                            ; End of function SS_ShowLayout
0001E4E6                            
0001E4E6                            ; ---------------------------------------------------------------------------
0001E4E6                            ; Subroutine to	animate	walls and rings	in the special stage
0001E4E6                            ; ---------------------------------------------------------------------------
0001E4E6                            
0001E4E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4E6                            
0001E4E6                            
0001E4E6                            SS_AniWallsRings:
0001E4E6 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E4EC 7000                       		moveq	#0,d0
0001E4EE 1038 F780                  		move.b	(v_ssangle).w,d0
0001E4F2 E408                       		lsr.b	#2,d0
0001E4F4 0240 000F                  		andi.w	#$F,d0
0001E4F8 7223                       		moveq	#$23,d1
0001E4FA                            
0001E4FA                            loc_1B2A4:
0001E4FA 3280                       		move.w	d0,(a1)
0001E4FC 5049                       		addq.w	#8,a1
0001E4FE 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E502                            
0001E502 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E508 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E50C 6A00                       		bpl.s	loc_1B2C8
0001E50E 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E514 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E518 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E51E                            
0001E51E                            loc_1B2C8:
0001E51E 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E524 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E528 6A00                       		bpl.s	loc_1B2E4
0001E52A 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E530 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E534 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E53A                            
0001E53A                            loc_1B2E4:
0001E53A 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E53E 1340 0138                  		move.b	d0,$138(a1)
0001E542 1340 0160                  		move.b	d0,$160(a1)
0001E546 1340 0148                  		move.b	d0,$148(a1)
0001E54A 1340 0150                  		move.b	d0,$150(a1)
0001E54E 1340 01D8                  		move.b	d0,$1D8(a1)
0001E552 1340 01E0                  		move.b	d0,$1E0(a1)
0001E556 1340 01E8                  		move.b	d0,$1E8(a1)
0001E55A 1340 01F0                  		move.b	d0,$1F0(a1)
0001E55E 1340 01F8                  		move.b	d0,$1F8(a1)
0001E562 1340 0200                  		move.b	d0,$200(a1)
0001E566 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E56A 6A00                       		bpl.s	loc_1B326
0001E56C 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E572 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E576 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E57C                            
0001E57C                            loc_1B326:
0001E57C 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E580 1340 0168                  		move.b	d0,$168(a1)
0001E584 1340 0170                  		move.b	d0,$170(a1)
0001E588 1340 0178                  		move.b	d0,$178(a1)
0001E58C 1340 0180                  		move.b	d0,$180(a1)
0001E590 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E594 6A00                       		bpl.s	loc_1B350
0001E596 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E59C 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E5A0 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E5A6                            
0001E5A6                            loc_1B350:
0001E5A6 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E5AC 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E5B2 7000                       		moveq	#0,d0
0001E5B4 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E5B8 D040                       		add.w	d0,d0
0001E5BA 41F0 0000                  		lea	(a0,d0.w),a0
0001E5BE 3290                       		move.w	(a0),(a1)
0001E5C0 3368 0002 0008             		move.w	2(a0),8(a1)
0001E5C6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E5CC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E5D2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E5D8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E5DE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E5E4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E5EA D0FC 0020                  		adda.w	#$20,a0
0001E5EE D2FC 0048                  		adda.w	#$48,a1
0001E5F2 3290                       		move.w	(a0),(a1)
0001E5F4 3368 0002 0008             		move.w	2(a0),8(a1)
0001E5FA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E600 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E606 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E60C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E612 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E618 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E61E D0FC 0020                  		adda.w	#$20,a0
0001E622 D2FC 0048                  		adda.w	#$48,a1
0001E626 3290                       		move.w	(a0),(a1)
0001E628 3368 0002 0008             		move.w	2(a0),8(a1)
0001E62E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E634 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E63A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E640 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E646 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E64C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E652 D0FC 0020                  		adda.w	#$20,a0
0001E656 D2FC 0048                  		adda.w	#$48,a1
0001E65A 3290                       		move.w	(a0),(a1)
0001E65C 3368 0002 0008             		move.w	2(a0),8(a1)
0001E662 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E668 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E66E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E674 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E67A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E680 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E686 D0FC 0020                  		adda.w	#$20,a0
0001E68A D2FC 0048                  		adda.w	#$48,a1
0001E68E 4E75                       		rts	
0001E690                            ; End of function SS_AniWallsRings
0001E690                            
0001E690                            ; ===========================================================================
0001E690 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E6A0 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E6B0 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E6C0 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E6D0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E6E0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E6F0 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E700 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E710                            ; ---------------------------------------------------------------------------
0001E710                            ; Subroutine to	remove items when you collect them in the special stage
0001E710                            ; ---------------------------------------------------------------------------
0001E710                            
0001E710                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E710                            
0001E710                            
0001E710                            SS_RemoveCollectedItem:
0001E710 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E716 303C 001F                  		move.w	#$1F,d0
0001E71A                            
0001E71A                            loc_1B4C4:
0001E71A 4A12                       		tst.b	(a2)
0001E71C 6700                       		beq.s	locret_1B4CE
0001E71E 504A                       		addq.w	#8,a2
0001E720 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E724                            
0001E724                            locret_1B4CE:
0001E724 4E75                       		rts	
0001E726                            ; End of function SS_RemoveCollectedItem
0001E726                            
0001E726                            ; ---------------------------------------------------------------------------
0001E726                            ; Subroutine to	animate	special	stage items when you touch them
0001E726                            ; ---------------------------------------------------------------------------
0001E726                            
0001E726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E726                            
0001E726                            
0001E726                            SS_AniItems:
0001E726 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E72C 3E3C 001F                  		move.w	#$1F,d7
0001E730                            
0001E730                            loc_1B4DA:
0001E730 7000                       		moveq	#0,d0
0001E732 1010                       		move.b	(a0),d0
0001E734 6700                       		beq.s	loc_1B4E8
0001E736 E548                       		lsl.w	#2,d0
0001E738 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E73C 4E91                       		jsr	(a1)
0001E73E                            
0001E73E                            loc_1B4E8:
0001E73E 5048                       		addq.w	#8,a0
0001E740                            
0001E740                            loc_1B4EA:
0001E740 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E744                            
0001E744 4E75                       		rts	
0001E746                            ; End of function SS_AniItems
0001E746                            
0001E746                            ; ===========================================================================
0001E746 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E74A 0000 0000                  		dc.l SS_AniBumper
0001E74E 0000 0000                  		dc.l SS_Ani1Up
0001E752 0000 0000                  		dc.l SS_AniReverse
0001E756 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E75A 0000 0000                  		dc.l SS_AniGlassBlock
0001E75E                            ; ===========================================================================
0001E75E                            
0001E75E                            SS_AniRingSparks:
0001E75E 5328 0002                  		subq.b	#1,2(a0)
0001E762 6A00                       		bpl.s	locret_1B530
0001E764 117C 0005 0002             		move.b	#5,2(a0)
0001E76A 7000                       		moveq	#0,d0
0001E76C 1028 0003                  		move.b	3(a0),d0
0001E770 5228 0003                  		addq.b	#1,3(a0)
0001E774 2268 0004                  		movea.l	4(a0),a1
0001E778 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E77C 1280                       		move.b	d0,(a1)
0001E77E 6600                       		bne.s	locret_1B530
0001E780 4290                       		clr.l	(a0)
0001E782 42A8 0004                  		clr.l	4(a0)
0001E786                            
0001E786                            locret_1B530:
0001E786 4E75                       		rts	
0001E788                            ; ===========================================================================
0001E788 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E78E                            ; ===========================================================================
0001E78E                            
0001E78E                            SS_AniBumper:
0001E78E 5328 0002                  		subq.b	#1,2(a0)
0001E792 6A00                       		bpl.s	locret_1B566
0001E794 117C 0007 0002             		move.b	#7,2(a0)
0001E79A 7000                       		moveq	#0,d0
0001E79C 1028 0003                  		move.b	3(a0),d0
0001E7A0 5228 0003                  		addq.b	#1,3(a0)
0001E7A4 2268 0004                  		movea.l	4(a0),a1
0001E7A8 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E7AC 6600                       		bne.s	loc_1B564
0001E7AE 4290                       		clr.l	(a0)
0001E7B0 42A8 0004                  		clr.l	4(a0)
0001E7B4 12BC 0025                  		move.b	#$25,(a1)
0001E7B8 4E75                       		rts	
0001E7BA                            ; ===========================================================================
0001E7BA                            
0001E7BA                            loc_1B564:
0001E7BA 1280                       		move.b	d0,(a1)
0001E7BC                            
0001E7BC                            locret_1B566:
0001E7BC 4E75                       		rts	
0001E7BE                            ; ===========================================================================
0001E7BE 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E7C4                            ; ===========================================================================
0001E7C4                            
0001E7C4                            SS_Ani1Up:
0001E7C4 5328 0002                  		subq.b	#1,2(a0)
0001E7C8 6A00                       		bpl.s	locret_1B596
0001E7CA 117C 0005 0002             		move.b	#5,2(a0)
0001E7D0 7000                       		moveq	#0,d0
0001E7D2 1028 0003                  		move.b	3(a0),d0
0001E7D6 5228 0003                  		addq.b	#1,3(a0)
0001E7DA 2268 0004                  		movea.l	4(a0),a1
0001E7DE 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E7E2 1280                       		move.b	d0,(a1)
0001E7E4 6600                       		bne.s	locret_1B596
0001E7E6 4290                       		clr.l	(a0)
0001E7E8 42A8 0004                  		clr.l	4(a0)
0001E7EC                            
0001E7EC                            locret_1B596:
0001E7EC 4E75                       		rts	
0001E7EE                            ; ===========================================================================
0001E7EE 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E7F4                            ; ===========================================================================
0001E7F4                            
0001E7F4                            SS_AniReverse:
0001E7F4 5328 0002                  		subq.b	#1,2(a0)
0001E7F8 6A00                       		bpl.s	locret_1B5CC
0001E7FA 117C 0007 0002             		move.b	#7,2(a0)
0001E800 7000                       		moveq	#0,d0
0001E802 1028 0003                  		move.b	3(a0),d0
0001E806 5228 0003                  		addq.b	#1,3(a0)
0001E80A 2268 0004                  		movea.l	4(a0),a1
0001E80E 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E812 6600                       		bne.s	loc_1B5CA
0001E814 4290                       		clr.l	(a0)
0001E816 42A8 0004                  		clr.l	4(a0)
0001E81A 12BC 002B                  		move.b	#$2B,(a1)
0001E81E 4E75                       		rts	
0001E820                            ; ===========================================================================
0001E820                            
0001E820                            loc_1B5CA:
0001E820 1280                       		move.b	d0,(a1)
0001E822                            
0001E822                            locret_1B5CC:
0001E822 4E75                       		rts	
0001E824                            ; ===========================================================================
0001E824 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E82A                            ; ===========================================================================
0001E82A                            
0001E82A                            SS_AniEmeraldSparks:
0001E82A 5328 0002                  		subq.b	#1,2(a0)
0001E82E 6A00                       		bpl.s	locret_1B60C
0001E830 117C 0005 0002             		move.b	#5,2(a0)
0001E836 7000                       		moveq	#0,d0
0001E838 1028 0003                  		move.b	3(a0),d0
0001E83C 5228 0003                  		addq.b	#1,3(a0)
0001E840 2268 0004                  		movea.l	4(a0),a1
0001E844 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E848 1280                       		move.b	d0,(a1)
0001E84A 6600                       		bne.s	locret_1B60C
0001E84C 4290                       		clr.l	(a0)
0001E84E 42A8 0004                  		clr.l	4(a0)
0001E852 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E862                            
0001E862                            locret_1B60C:
0001E862 4E75                       		rts	
0001E864                            ; ===========================================================================
0001E864 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E86A                            ; ===========================================================================
0001E86A                            
0001E86A                            SS_AniGlassBlock:
0001E86A 5328 0002                  		subq.b	#1,2(a0)
0001E86E 6A00                       		bpl.s	locret_1B640
0001E870 117C 0001 0002             		move.b	#1,2(a0)
0001E876 7000                       		moveq	#0,d0
0001E878 1028 0003                  		move.b	3(a0),d0
0001E87C 5228 0003                  		addq.b	#1,3(a0)
0001E880 2268 0004                  		movea.l	4(a0),a1
0001E884 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E888 1280                       		move.b	d0,(a1)
0001E88A 6600                       		bne.s	locret_1B640
0001E88C 12A8 0004                  		move.b	4(a0),(a1)
0001E890 4290                       		clr.l	(a0)
0001E892 42A8 0004                  		clr.l	4(a0)
0001E896                            
0001E896                            locret_1B640:
0001E896 4E75                       		rts	
0001E898                            ; ===========================================================================
0001E898 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E8A2                            
0001E8A2                            ; ---------------------------------------------------------------------------
0001E8A2                            ; Special stage	layout pointers
0001E8A2                            ; ---------------------------------------------------------------------------
0001E8A2                            SS_LayoutIndex:
0001E8A2 0000 0000                  		dc.l SS_1
0001E8A6 0000 0000                  		dc.l SS_2
0001E8AA 0000 0000                  		dc.l SS_3
0001E8AE 0000 0000                  		dc.l SS_4
0001E8B2 0000 0000                  		dc.l SS_5
0001E8B6 0000 0000                  		dc.l SS_6
0001E8BA                            		even
0001E8BA                            
0001E8BA                            ; ---------------------------------------------------------------------------
0001E8BA                            ; Special stage start locations
0001E8BA                            ; ---------------------------------------------------------------------------
0001E8BA                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001E8BA                            ; ---------------------------------------------------------------------------
0001E8BA                            ; Special stage start locations
0001E8BA                            ; ---------------------------------------------------------------------------
0001E8BA                            
0001E8BA                            		incbin	"startpos\ss1.bin"
0001E8BE                            		incbin	"startpos\ss2.bin"
0001E8C2                            		incbin	"startpos\ss3.bin"
0001E8C6                            		incbin	"startpos\ss4.bin"
0001E8CA                            		incbin	"startpos\ss5.bin"
0001E8CE                            		incbin	"startpos\ss6.bin"
0001E8D2                            		even
0001E8D2                            		even
0001E8D2                            
0001E8D2                            ; ---------------------------------------------------------------------------
0001E8D2                            ; Subroutine to	load special stage layout
0001E8D2                            ; ---------------------------------------------------------------------------
0001E8D2                            
0001E8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8D2                            
0001E8D2                            
0001E8D2                            SS_Load:
0001E8D2 7000                       		moveq	#0,d0
0001E8D4 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001E8D8 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001E8DC 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001E8E2 6500                       		blo.s	SS_ChkEmldNum
0001E8E4 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001E8EA                            
0001E8EA                            SS_ChkEmldNum:
0001E8EA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001E8F0 6700                       		beq.s	SS_LoadData	; if yes, branch
0001E8F2 7200                       		moveq	#0,d1
0001E8F4 1238 FE57                  		move.b	(v_emeralds).w,d1
0001E8F8 5301                       		subq.b	#1,d1
0001E8FA 6500                       		blo.s	SS_LoadData
0001E8FC 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001E900                            
0001E900                            SS_ChkEmldLoop:	
0001E900 B033 1000                  		cmp.b	(a3,d1.w),d0
0001E904 6600                       		bne.s	SS_ChkEmldRepeat
0001E906 60CA                       		bra.s	SS_Load
0001E908                            ; ===========================================================================
0001E908                            
0001E908                            SS_ChkEmldRepeat:
0001E908 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001E90C                            
0001E90C                            SS_LoadData:
0001E90C E548                       		lsl.w	#2,d0
0001E90E 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001E912 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001E916 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001E91A 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001E91E 43F9 00FF 4000             		lea	($FF4000).l,a1
0001E924 303C 0000                  		move.w	#0,d0
0001E928 4EB9 0000 1604             		jsr	(EniDec).l
0001E92E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E934 303C 0FFF                  		move.w	#$FFF,d0
0001E938                            
0001E938                            SS_ClrRAM3:
0001E938 4299                       		clr.l	(a1)+
0001E93A 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001E93E                            
0001E93E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E944 41F9 00FF 4000             		lea	($FF4000).l,a0
0001E94A 723F                       		moveq	#$3F,d1
0001E94C                            
0001E94C                            loc_1B6F6:
0001E94C 743F                       		moveq	#$3F,d2
0001E94E                            
0001E94E                            loc_1B6F8:
0001E94E 12D8                       		move.b	(a0)+,(a1)+
0001E950 51CA FFFC                  		dbf	d2,loc_1B6F8
0001E954                            
0001E954 43E9 0040                  		lea	$40(a1),a1
0001E958 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001E95C                            
0001E95C 43F9 00FF 4008             		lea	($FF4008).l,a1
0001E962 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001E968 724D                       		moveq	#$4D,d1
0001E96A                            
0001E96A                            loc_1B714:
0001E96A 22D8                       		move.l	(a0)+,(a1)+
0001E96C 32FC 0000                  		move.w	#0,(a1)+
0001E970 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001E976 32D8                       		move.w	(a0)+,(a1)+
0001E978 51C9 FFF0                  		dbf	d1,loc_1B714
0001E97C                            
0001E97C 43F9 00FF 4400             		lea	($FF4400).l,a1
0001E982 323C 003F                  		move.w	#$3F,d1
0001E986                            
0001E986                            loc_1B730:
0001E986                            
0001E986 4299                       		clr.l	(a1)+
0001E988 51C9 FFFC                  		dbf	d1,loc_1B730
0001E98C                            
0001E98C 4E75                       		rts	
0001E98E                            ; End of function SS_Load
0001E98E                            
0001E98E                            ; ===========================================================================
0001E98E                            
0001E98E                            SS_MapIndex:
0001E98E                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001E98E                            ; ---------------------------------------------------------------------------
0001E98E                            ; Special stage	mappings and VRAM pointers
0001E98E                            ; ---------------------------------------------------------------------------
0001E98E 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001E992 0142                       	dc.w $142		; VRAM setting
0001E994 0000 0000                  	dc.l Map_SSWalls
0001E998 0142                       	dc.w $142
0001E99A 0000 0000                  	dc.l Map_SSWalls
0001E99E 0142                       	dc.w $142
0001E9A0 0000 0000                  	dc.l Map_SSWalls
0001E9A4 0142                       	dc.w $142
0001E9A6 0000 0000                  	dc.l Map_SSWalls
0001E9AA 0142                       	dc.w $142
0001E9AC 0000 0000                  	dc.l Map_SSWalls
0001E9B0 0142                       	dc.w $142
0001E9B2 0000 0000                  	dc.l Map_SSWalls
0001E9B6 0142                       	dc.w $142
0001E9B8 0000 0000                  	dc.l Map_SSWalls
0001E9BC 0142                       	dc.w $142
0001E9BE 0000 0000                  	dc.l Map_SSWalls
0001E9C2 0142                       	dc.w $142
0001E9C4 0000 0000                  	dc.l Map_SSWalls
0001E9C8 2142                       	dc.w $2142
0001E9CA 0000 0000                  	dc.l Map_SSWalls
0001E9CE 2142                       	dc.w $2142
0001E9D0 0000 0000                  	dc.l Map_SSWalls
0001E9D4 2142                       	dc.w $2142
0001E9D6 0000 0000                  	dc.l Map_SSWalls
0001E9DA 2142                       	dc.w $2142
0001E9DC 0000 0000                  	dc.l Map_SSWalls
0001E9E0 2142                       	dc.w $2142
0001E9E2 0000 0000                  	dc.l Map_SSWalls
0001E9E6 2142                       	dc.w $2142
0001E9E8 0000 0000                  	dc.l Map_SSWalls
0001E9EC 2142                       	dc.w $2142
0001E9EE 0000 0000                  	dc.l Map_SSWalls
0001E9F2 2142                       	dc.w $2142
0001E9F4 0000 0000                  	dc.l Map_SSWalls
0001E9F8 2142                       	dc.w $2142
0001E9FA 0000 0000                  	dc.l Map_SSWalls
0001E9FE 4142                       	dc.w $4142
0001EA00 0000 0000                  	dc.l Map_SSWalls
0001EA04 4142                       	dc.w $4142
0001EA06 0000 0000                  	dc.l Map_SSWalls
0001EA0A 4142                       	dc.w $4142
0001EA0C 0000 0000                  	dc.l Map_SSWalls
0001EA10 4142                       	dc.w $4142
0001EA12 0000 0000                  	dc.l Map_SSWalls
0001EA16 4142                       	dc.w $4142
0001EA18 0000 0000                  	dc.l Map_SSWalls
0001EA1C 4142                       	dc.w $4142
0001EA1E 0000 0000                  	dc.l Map_SSWalls
0001EA22 4142                       	dc.w $4142
0001EA24 0000 0000                  	dc.l Map_SSWalls
0001EA28 4142                       	dc.w $4142
0001EA2A 0000 0000                  	dc.l Map_SSWalls
0001EA2E 4142                       	dc.w $4142
0001EA30 0000 0000                  	dc.l Map_SSWalls
0001EA34 6142                       	dc.w $6142
0001EA36 0000 0000                  	dc.l Map_SSWalls
0001EA3A 6142                       	dc.w $6142
0001EA3C 0000 0000                  	dc.l Map_SSWalls
0001EA40 6142                       	dc.w $6142
0001EA42 0000 0000                  	dc.l Map_SSWalls
0001EA46 6142                       	dc.w $6142
0001EA48 0000 0000                  	dc.l Map_SSWalls
0001EA4C 6142                       	dc.w $6142
0001EA4E 0000 0000                  	dc.l Map_SSWalls
0001EA52 6142                       	dc.w $6142
0001EA54 0000 0000                  	dc.l Map_SSWalls
0001EA58 6142                       	dc.w $6142
0001EA5A 0000 0000                  	dc.l Map_SSWalls
0001EA5E 6142                       	dc.w $6142
0001EA60 0000 0000                  	dc.l Map_SSWalls
0001EA64 6142                       	dc.w $6142
0001EA66 0001 0C22                  	dc.l Map_Bump
0001EA6A 023B                       	dc.w $23B
0001EA6C 0000 0000                  	dc.l Map_SS_R
0001EA70 0570                       	dc.w $570
0001EA72 0000 0000                  	dc.l Map_SS_R
0001EA76 0251                       	dc.w $251
0001EA78 0000 0000                  	dc.l Map_SS_R
0001EA7C 0370                       	dc.w $370
0001EA7E 0000 0000                  	dc.l Map_SS_Up
0001EA82 0263                       	dc.w $263
0001EA84 0000 0000                  	dc.l Map_SS_Down
0001EA88 0263                       	dc.w $263
0001EA8A 0000 0000                  	dc.l Map_SS_R
0001EA8E 22F0                       	dc.w $22F0
0001EA90 0000 0000                  	dc.l Map_SS_Glass
0001EA94 0470                       	dc.w $470
0001EA96 0000 0000                  	dc.l Map_SS_Glass
0001EA9A 05F0                       	dc.w $5F0
0001EA9C 0000 0000                  	dc.l Map_SS_Glass
0001EAA0 65F0                       	dc.w $65F0
0001EAA2 0000 0000                  	dc.l Map_SS_Glass
0001EAA6 25F0                       	dc.w $25F0
0001EAA8 0000 0000                  	dc.l Map_SS_Glass
0001EAAC 45F0                       	dc.w $45F0
0001EAAE 0000 0000                  	dc.l Map_SS_R
0001EAB2 02F0                       	dc.w $2F0
0001EAB4 0101 0C22                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EAB8 023B                       	dc.w $23B
0001EABA 0201 0C22                  	dc.l Map_Bump+$2000000
0001EABE 023B                       	dc.w $23B
0001EAC0 0000 0000                  	dc.l Map_SS_R
0001EAC4 0797                       	dc.w $797
0001EAC6 0000 0000                  	dc.l Map_SS_R
0001EACA 07A0                       	dc.w $7A0
0001EACC 0000 0000                  	dc.l Map_SS_R
0001EAD0 07A9                       	dc.w $7A9
0001EAD2 0000 0000                  	dc.l Map_SS_R
0001EAD6 0797                       	dc.w $797
0001EAD8 0000 0000                  	dc.l Map_SS_R
0001EADC 07A0                       	dc.w $7A0
0001EADE 0000 0000                  	dc.l Map_SS_R
0001EAE2 07A9                       	dc.w $7A9
0001EAE4 0000 BD5A                  	dc.l Map_Ring
0001EAE8 2798                       	dc.w $2798
0001EAEA 0000 0000                  	dc.l Map_SS_Chaos3
0001EAEE 0770                       	dc.w $770
0001EAF0 0000 0000                  	dc.l Map_SS_Chaos3
0001EAF4 2770                       	dc.w $2770
0001EAF6 0000 0000                  	dc.l Map_SS_Chaos3
0001EAFA 4770                       	dc.w $4770
0001EAFC 0000 0000                  	dc.l Map_SS_Chaos3
0001EB00 6770                       	dc.w $6770
0001EB02 0000 0000                  	dc.l Map_SS_Chaos1
0001EB06 0770                       	dc.w $770
0001EB08 0000 0000                  	dc.l Map_SS_Chaos2
0001EB0C 0770                       	dc.w $770
0001EB0E 0000 0000                  	dc.l Map_SS_R
0001EB12 04F0                       	dc.w $4F0
0001EB14 0400 BD5A                  	dc.l Map_Ring+$4000000
0001EB18 2798                       	dc.w $2798
0001EB1A 0500 BD5A                  	dc.l Map_Ring+$5000000
0001EB1E 2798                       	dc.w $2798
0001EB20 0600 BD5A                  	dc.l Map_Ring+$6000000
0001EB24 2798                       	dc.w $2798
0001EB26 0700 BD5A                  	dc.l Map_Ring+$7000000
0001EB2A 2798                       	dc.w $2798
0001EB2C 0000 0000                  	dc.l Map_SS_Glass
0001EB30 23F0                       	dc.w $23F0
0001EB32 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EB36 23F0                       	dc.w $23F0
0001EB38 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EB3C 23F0                       	dc.w $23F0
0001EB3E 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EB42 23F0                       	dc.w $23F0
0001EB44 0000 0000                  	dc.l Map_SS_R+$2000000
0001EB48 04F0                       	dc.w $4F0
0001EB4A 0000 0000                  	dc.l Map_SS_Glass
0001EB4E 05F0                       	dc.w $5F0
0001EB50 0000 0000                  	dc.l Map_SS_Glass
0001EB54 65F0                       	dc.w $65F0
0001EB56 0000 0000                  	dc.l Map_SS_Glass
0001EB5A 25F0                       	dc.w $25F0
0001EB5C 0000 0000                  	dc.l Map_SS_Glass
0001EB60 45F0                       	dc.w $45F0
0001EB60 45F0                       	dc.w $45F0
0001EB62                            
0001EB62                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EB62                            ; ---------------------------------------------------------------------------
0001EB62                            ; Sprite mappings - special stage "R" block
0001EB62                            ; ---------------------------------------------------------------------------
0001EB62                            Map_SS_R_internal:
0001EB62 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EB64 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EB66 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EB68 01                         byte_1B912:	dc.b 1
0001EB69 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB6E 01                         byte_1B918:	dc.b 1
0001EB6F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EB74 00                         byte_1B91E:	dc.b 0
0001EB76 00                         		even
0001EB76 00                         		even
0001EB76                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EB76                            ; ---------------------------------------------------------------------------
0001EB76                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EB76                            ; ---------------------------------------------------------------------------
0001EB76                            Map_SS_Glass_internal:
0001EB76 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EB78 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EB7A 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EB7C 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EB7E 01                         byte_1B928:	dc.b 1
0001EB7F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB84 01                         byte_1B92E:	dc.b 1
0001EB85 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EB8A 01                         byte_1B934:	dc.b 1
0001EB8B F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EB90 01                         byte_1B93A:	dc.b 1
0001EB91 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EB96                            		even
0001EB96                            		even
0001EB96                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EB96                            ; ---------------------------------------------------------------------------
0001EB96                            ; Sprite mappings - special stage "UP" block
0001EB96                            ; ---------------------------------------------------------------------------
0001EB96                            Map_SS_Up_internal:
0001EB96 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EB98 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EB9A 01                         byte_1B944:	dc.b 1
0001EB9B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EBA0 01                         byte_1B94A:	dc.b 1
0001EBA1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EBA6                            		even
0001EBA6                            		even
0001EBA6                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EBA6                            ; ---------------------------------------------------------------------------
0001EBA6                            ; Sprite mappings - special stage "DOWN" block
0001EBA6                            ; ---------------------------------------------------------------------------
0001EBA6                            Map_SS_Down_internal:
0001EBA6 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EBA8 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EBAA 01                         byte_1B954:	dc.b 1
0001EBAB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EBB0 01                         byte_1B95A:	dc.b 1
0001EBB1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EBB6                            		even
0001EBB6                            		even
0001EBB6                            		include	"_maps\SS Chaos Emeralds.asm"
0001EBB6                            ; ---------------------------------------------------------------------------
0001EBB6                            ; Sprite mappings - special stage chaos	emeralds
0001EBB6                            ; ---------------------------------------------------------------------------
0001EBB6 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EBB8 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EBBA 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EBBC 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EBBE 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EBC0 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EBC2 01                         byte_1B96C:	dc.b 1
0001EBC3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EBC8 01                         byte_1B972:	dc.b 1
0001EBC9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EBCE 01                         byte_1B978:	dc.b 1
0001EBCF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EBD4 01                         byte_1B97E:	dc.b 1
0001EBD5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EBDA                            		even
0001EBDA                            		even
0001EBDA                            
0001EBDA                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EBDA                            ; ---------------------------------------------------------------------------
0001EBDA                            ; Object 09 - Sonic (special stage)
0001EBDA                            ; ---------------------------------------------------------------------------
0001EBDA                            
0001EBDA                            SonicSpecial:
0001EBDA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EBDE 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EBE0 6100 0000                  		bsr.w	SS_FixCamera
0001EBE4 6000 0000                  		bra.w	DebugMode
0001EBE8                            ; ===========================================================================
0001EBE8                            
0001EBE8                            Obj09_Normal:
0001EBE8 7000                       		moveq	#0,d0
0001EBEA 1028 0024                  		move.b	obRoutine(a0),d0
0001EBEE 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EBF2 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EBF6                            ; ===========================================================================
0001EBF6 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EBF8 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EBFA 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EBFC 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EBFE                            ; ===========================================================================
0001EBFE                            
0001EBFE                            Obj09_Main:	; Routine 0
0001EBFE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EC02 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EC08 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EC0E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EC16 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EC1C 117C 0004 0001             		move.b	#4,obRender(a0)
0001EC22 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EC28 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EC2E 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EC34 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EC3A                            
0001EC3A                            Obj09_ChkDebug:	; Routine 2
0001EC3A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EC3E 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EC40 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EC46 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EC48 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EC4E                            
0001EC4E                            Obj09_NoDebug:
0001EC4E 117C 0000 0030             		move.b	#0,$30(a0)
0001EC54 7000                       		moveq	#0,d0
0001EC56 1028 0022                  		move.b	obStatus(a0),d0
0001EC5A 0240 0002                  		andi.w	#2,d0
0001EC5E 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EC62 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EC66 4EB9 0001 66FC             		jsr	(Sonic_LoadGfx).l
0001EC6C 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001EC72                            ; ===========================================================================
0001EC72 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EC74 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EC76                            ; ===========================================================================
0001EC76                            
0001EC76                            Obj09_OnWall:
0001EC76 6100 0000                  		bsr.w	Obj09_Jump
0001EC7A 6100 0000                  		bsr.w	Obj09_Move
0001EC7E 6100 0000                  		bsr.w	Obj09_Fall
0001EC82 6000                       		bra.s	Obj09_Display
0001EC84                            ; ===========================================================================
0001EC84                            
0001EC84                            Obj09_InAir:
0001EC84 6100 0000                  		bsr.w	nullsub_2
0001EC88 6100 0000                  		bsr.w	Obj09_Move
0001EC8C 6100 0000                  		bsr.w	Obj09_Fall
0001EC90                            
0001EC90                            Obj09_Display:
0001EC90 6100 0000                  		bsr.w	Obj09_ChkItems
0001EC94 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EC98 4EB9 0000 F6EA             		jsr	(SpeedToPos).l
0001EC9E 6100 0000                  		bsr.w	SS_FixCamera
0001ECA2 3038 F780                  		move.w	(v_ssangle).w,d0
0001ECA6 D078 F782                  		add.w	(v_ssrotate).w,d0
0001ECAA 31C0 F780                  		move.w	d0,(v_ssangle).w
0001ECAE 4EB9 0001 6364             		jsr	(Sonic_Animate).l
0001ECB4 4E75                       		rts	
0001ECB6                            
0001ECB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECB6                            
0001ECB6                            
0001ECB6                            Obj09_Move:
0001ECB6 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001ECBC 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001ECBE 6100 0000                  		bsr.w	Obj09_MoveLeft
0001ECC2                            
0001ECC2                            Obj09_ChkRight:
0001ECC2 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001ECC8 6700                       		beq.s	loc_1BA78	; if not, branch
0001ECCA 6100 0000                  		bsr.w	Obj09_MoveRight
0001ECCE                            
0001ECCE                            loc_1BA78:
0001ECCE 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001ECD2 0200 000C                  		andi.b	#btnL+btnR,d0
0001ECD6 6600                       		bne.s	loc_1BAA8
0001ECD8 3028 0020                  		move.w	obInertia(a0),d0
0001ECDC 6700                       		beq.s	loc_1BAA8
0001ECDE 6B00                       		bmi.s	loc_1BA9A
0001ECE0 0440 000C                  		subi.w	#$C,d0
0001ECE4 6400                       		bcc.s	loc_1BA94
0001ECE6 303C 0000                  		move.w	#0,d0
0001ECEA                            
0001ECEA                            loc_1BA94:
0001ECEA 3140 0020                  		move.w	d0,obInertia(a0)
0001ECEE 6000                       		bra.s	loc_1BAA8
0001ECF0                            ; ===========================================================================
0001ECF0                            
0001ECF0                            loc_1BA9A:
0001ECF0 0640 000C                  		addi.w	#$C,d0
0001ECF4 6400                       		bcc.s	loc_1BAA4
0001ECF6 303C 0000                  		move.w	#0,d0
0001ECFA                            
0001ECFA                            loc_1BAA4:
0001ECFA 3140 0020                  		move.w	d0,obInertia(a0)
0001ECFE                            
0001ECFE                            loc_1BAA8:
0001ECFE 1038 F780                  		move.b	(v_ssangle).w,d0
0001ED02 0600 0020                  		addi.b	#$20,d0
0001ED06 0200 00C0                  		andi.b	#$C0,d0
0001ED0A 4400                       		neg.b	d0
0001ED0C 4EB9 0000 37AE             		jsr	(CalcSine).l
0001ED12 C3E8 0020                  		muls.w	obInertia(a0),d1
0001ED16 D3A8 0008                  		add.l	d1,obX(a0)
0001ED1A C1E8 0020                  		muls.w	obInertia(a0),d0
0001ED1E D1A8 000C                  		add.l	d0,obY(a0)
0001ED22 48E7 C000                  		movem.l	d0-d1,-(sp)
0001ED26 2428 000C                  		move.l	obY(a0),d2
0001ED2A 2628 0008                  		move.l	obX(a0),d3
0001ED2E 6100 0000                  		bsr.w	sub_1BCE8
0001ED32 6700                       		beq.s	loc_1BAF2
0001ED34 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001ED38 93A8 0008                  		sub.l	d1,obX(a0)
0001ED3C 91A8 000C                  		sub.l	d0,obY(a0)
0001ED40 317C 0000 0020             		move.w	#0,obInertia(a0)
0001ED46 4E75                       		rts	
0001ED48                            ; ===========================================================================
0001ED48                            
0001ED48                            loc_1BAF2:
0001ED48 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001ED4C 4E75                       		rts	
0001ED4E                            ; End of function Obj09_Move
0001ED4E                            
0001ED4E                            
0001ED4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED4E                            
0001ED4E                            
0001ED4E                            Obj09_MoveLeft:
0001ED4E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001ED54 3028 0020                  		move.w	obInertia(a0),d0
0001ED58 6700                       		beq.s	loc_1BB06
0001ED5A 6A00                       		bpl.s	loc_1BB1A
0001ED5C                            
0001ED5C                            loc_1BB06:
0001ED5C 0440 000C                  		subi.w	#$C,d0
0001ED60 0C40 F800                  		cmpi.w	#-$800,d0
0001ED64 6E00                       		bgt.s	loc_1BB14
0001ED66 303C F800                  		move.w	#-$800,d0
0001ED6A                            
0001ED6A                            loc_1BB14:
0001ED6A 3140 0020                  		move.w	d0,obInertia(a0)
0001ED6E 4E75                       		rts	
0001ED70                            ; ===========================================================================
0001ED70                            
0001ED70                            loc_1BB1A:
0001ED70 0440 0040                  		subi.w	#$40,d0
0001ED74 6400                       		bcc.s	loc_1BB22
0001ED76 4E71                       		nop	
0001ED78                            
0001ED78                            loc_1BB22:
0001ED78 3140 0020                  		move.w	d0,obInertia(a0)
0001ED7C 4E75                       		rts	
0001ED7E                            ; End of function Obj09_MoveLeft
0001ED7E                            
0001ED7E                            
0001ED7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED7E                            
0001ED7E                            
0001ED7E                            Obj09_MoveRight:
0001ED7E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001ED84 3028 0020                  		move.w	obInertia(a0),d0
0001ED88 6B00                       		bmi.s	loc_1BB48
0001ED8A 0640 000C                  		addi.w	#$C,d0
0001ED8E 0C40 0800                  		cmpi.w	#$800,d0
0001ED92 6D00                       		blt.s	loc_1BB42
0001ED94 303C 0800                  		move.w	#$800,d0
0001ED98                            
0001ED98                            loc_1BB42:
0001ED98 3140 0020                  		move.w	d0,obInertia(a0)
0001ED9C 6000                       		bra.s	locret_1BB54
0001ED9E                            ; ===========================================================================
0001ED9E                            
0001ED9E                            loc_1BB48:
0001ED9E 0640 0040                  		addi.w	#$40,d0
0001EDA2 6400                       		bcc.s	loc_1BB50
0001EDA4 4E71                       		nop	
0001EDA6                            
0001EDA6                            loc_1BB50:
0001EDA6 3140 0020                  		move.w	d0,obInertia(a0)
0001EDAA                            
0001EDAA                            locret_1BB54:
0001EDAA 4E75                       		rts	
0001EDAC                            ; End of function Obj09_MoveRight
0001EDAC                            
0001EDAC                            
0001EDAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDAC                            
0001EDAC                            
0001EDAC                            Obj09_Jump:
0001EDAC 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EDB0 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EDB4 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EDB6 1038 F780                  		move.b	(v_ssangle).w,d0
0001EDBA 0200 00FC                  		andi.b	#$FC,d0
0001EDBE 4400                       		neg.b	d0
0001EDC0 0400 0040                  		subi.b	#$40,d0
0001EDC4 4EB9 0000 37AE             		jsr	(CalcSine).l
0001EDCA C3FC 0680                  		muls.w	#$680,d1
0001EDCE E081                       		asr.l	#8,d1
0001EDD0 3141 0010                  		move.w	d1,obVelX(a0)
0001EDD4 C1FC 0680                  		muls.w	#$680,d0
0001EDD8 E080                       		asr.l	#8,d0
0001EDDA 3140 0012                  		move.w	d0,obVelY(a0)
0001EDDE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EDEE                            
0001EDEE                            Obj09_NoJump:
0001EDEE 4E75                       		rts	
0001EDF0                            ; End of function Obj09_Jump
0001EDF0                            
0001EDF0                            
0001EDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDF0                            
0001EDF0                            
0001EDF0                            nullsub_2:
0001EDF0 4E75                       		rts	
0001EDF2                            ; End of function nullsub_2
0001EDF2                            
0001EDF2                            ; ===========================================================================
0001EDF2                            ; ---------------------------------------------------------------------------
0001EDF2                            ; unused subroutine to limit Sonic's upward vertical speed
0001EDF2                            ; ---------------------------------------------------------------------------
0001EDF2 323C FC00                  		move.w	#-$400,d1
0001EDF6 B268 0012                  		cmp.w	obVelY(a0),d1
0001EDFA 6F00                       		ble.s	locret_1BBB4
0001EDFC 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EE00 0200 0070                  		andi.b	#btnABC,d0
0001EE04 6600                       		bne.s	locret_1BBB4
0001EE06 3141 0012                  		move.w	d1,obVelY(a0)
0001EE0A                            
0001EE0A                            locret_1BBB4:
0001EE0A 4E75                       		rts	
0001EE0C                            ; ---------------------------------------------------------------------------
0001EE0C                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EE0C                            ; ---------------------------------------------------------------------------
0001EE0C                            
0001EE0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE0C                            
0001EE0C                            
0001EE0C                            SS_FixCamera:
0001EE0C 3428 000C                  		move.w	obY(a0),d2
0001EE10 3628 0008                  		move.w	obX(a0),d3
0001EE14 3038 F700                  		move.w	(v_screenposx).w,d0
0001EE18 0443 00A0                  		subi.w	#$A0,d3
0001EE1C 6500                       		bcs.s	loc_1BBCE
0001EE1E 9043                       		sub.w	d3,d0
0001EE20 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EE24                            
0001EE24                            loc_1BBCE:
0001EE24 3038 F704                  		move.w	(v_screenposy).w,d0
0001EE28 0442 0070                  		subi.w	#$70,d2
0001EE2C 6500                       		bcs.s	locret_1BBDE
0001EE2E 9042                       		sub.w	d2,d0
0001EE30 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EE34                            
0001EE34                            locret_1BBDE:
0001EE34 4E75                       		rts	
0001EE36                            ; End of function SS_FixCamera
0001EE36                            
0001EE36                            ; ===========================================================================
0001EE36                            
0001EE36                            Obj09_ExitStage:
0001EE36 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EE3C 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EE42 6600                       		bne.s	loc_1BBF4
0001EE44 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EE4A                            
0001EE4A                            loc_1BBF4:
0001EE4A 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EE50 6D00                       		blt.s	loc_1BC12
0001EE52 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EE58 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EE5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EE62 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EE68                            
0001EE68                            loc_1BC12:
0001EE68 3038 F780                  		move.w	(v_ssangle).w,d0
0001EE6C D078 F782                  		add.w	(v_ssrotate).w,d0
0001EE70 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EE74 4EB9 0001 6364             		jsr	(Sonic_Animate).l
0001EE7A 4EB9 0001 66FC             		jsr	(Sonic_LoadGfx).l
0001EE80 6100 FF8A                  		bsr.w	SS_FixCamera
0001EE84 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001EE8A                            ; ===========================================================================
0001EE8A                            
0001EE8A                            Obj09_Exit2:
0001EE8A 5368 0038                  		subq.w	#1,$38(a0)
0001EE8E 6600                       		bne.s	loc_1BC40
0001EE90 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EE96                            
0001EE96                            loc_1BC40:
0001EE96 4EB9 0001 6364             		jsr	(Sonic_Animate).l
0001EE9C 4EB9 0001 66FC             		jsr	(Sonic_LoadGfx).l
0001EEA2 6100 FF68                  		bsr.w	SS_FixCamera
0001EEA6 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
0001EEAC                            
0001EEAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEAC                            
0001EEAC                            
0001EEAC                            Obj09_Fall:
0001EEAC 2428 000C                  		move.l	obY(a0),d2
0001EEB0 2628 0008                  		move.l	obX(a0),d3
0001EEB4 1038 F780                  		move.b	(v_ssangle).w,d0
0001EEB8 0200 00FC                  		andi.b	#$FC,d0
0001EEBC 4EB9 0000 37AE             		jsr	(CalcSine).l
0001EEC2 3828 0010                  		move.w	obVelX(a0),d4
0001EEC6 48C4                       		ext.l	d4
0001EEC8 E184                       		asl.l	#8,d4
0001EECA C1FC 002A                  		muls.w	#$2A,d0
0001EECE D084                       		add.l	d4,d0
0001EED0 3828 0012                  		move.w	obVelY(a0),d4
0001EED4 48C4                       		ext.l	d4
0001EED6 E184                       		asl.l	#8,d4
0001EED8 C3FC 002A                  		muls.w	#$2A,d1
0001EEDC D284                       		add.l	d4,d1
0001EEDE D680                       		add.l	d0,d3
0001EEE0 6100 0000                  		bsr.w	sub_1BCE8
0001EEE4 6700                       		beq.s	loc_1BCB0
0001EEE6 9680                       		sub.l	d0,d3
0001EEE8 7000                       		moveq	#0,d0
0001EEEA 3140 0010                  		move.w	d0,obVelX(a0)
0001EEEE 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EEF4 D481                       		add.l	d1,d2
0001EEF6 6100 0000                  		bsr.w	sub_1BCE8
0001EEFA 6700                       		beq.s	loc_1BCC6
0001EEFC 9481                       		sub.l	d1,d2
0001EEFE 7200                       		moveq	#0,d1
0001EF00 3141 0012                  		move.w	d1,obVelY(a0)
0001EF04 4E75                       		rts	
0001EF06                            ; ===========================================================================
0001EF06                            
0001EF06                            loc_1BCB0:
0001EF06 D481                       		add.l	d1,d2
0001EF08 6100 0000                  		bsr.w	sub_1BCE8
0001EF0C 6700                       		beq.s	loc_1BCD4
0001EF0E 9481                       		sub.l	d1,d2
0001EF10 7200                       		moveq	#0,d1
0001EF12 3141 0012                  		move.w	d1,obVelY(a0)
0001EF16 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EF1C                            
0001EF1C                            loc_1BCC6:
0001EF1C E080                       		asr.l	#8,d0
0001EF1E E081                       		asr.l	#8,d1
0001EF20 3140 0010                  		move.w	d0,obVelX(a0)
0001EF24 3141 0012                  		move.w	d1,obVelY(a0)
0001EF28 4E75                       		rts	
0001EF2A                            ; ===========================================================================
0001EF2A                            
0001EF2A                            loc_1BCD4:
0001EF2A E080                       		asr.l	#8,d0
0001EF2C E081                       		asr.l	#8,d1
0001EF2E 3140 0010                  		move.w	d0,obVelX(a0)
0001EF32 3141 0012                  		move.w	d1,obVelY(a0)
0001EF36 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EF3C 4E75                       		rts	
0001EF3E                            ; End of function Obj09_Fall
0001EF3E                            
0001EF3E                            
0001EF3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF3E                            
0001EF3E                            
0001EF3E                            sub_1BCE8:
0001EF3E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EF44 7800                       		moveq	#0,d4
0001EF46 4842                       		swap	d2
0001EF48 3802                       		move.w	d2,d4
0001EF4A 4842                       		swap	d2
0001EF4C 0644 0044                  		addi.w	#$44,d4
0001EF50 88FC 0018                  		divu.w	#$18,d4
0001EF54 C8FC 0080                  		mulu.w	#$80,d4
0001EF58 D3C4                       		adda.l	d4,a1
0001EF5A 7800                       		moveq	#0,d4
0001EF5C 4843                       		swap	d3
0001EF5E 3803                       		move.w	d3,d4
0001EF60 4843                       		swap	d3
0001EF62 0644 0014                  		addi.w	#$14,d4
0001EF66 88FC 0018                  		divu.w	#$18,d4
0001EF6A D2C4                       		adda.w	d4,a1
0001EF6C 7A00                       		moveq	#0,d5
0001EF6E 1819                       		move.b	(a1)+,d4
0001EF70 6100                       		bsr.s	sub_1BD30
0001EF72 1819                       		move.b	(a1)+,d4
0001EF74 6100                       		bsr.s	sub_1BD30
0001EF76 D2FC 007E                  		adda.w	#$7E,a1
0001EF7A 1819                       		move.b	(a1)+,d4
0001EF7C 6100                       		bsr.s	sub_1BD30
0001EF7E 1819                       		move.b	(a1)+,d4
0001EF80 6100                       		bsr.s	sub_1BD30
0001EF82 4A05                       		tst.b	d5
0001EF84 4E75                       		rts	
0001EF86                            ; End of function sub_1BCE8
0001EF86                            
0001EF86                            
0001EF86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF86                            
0001EF86                            
0001EF86                            sub_1BD30:
0001EF86 6700                       		beq.s	locret_1BD44
0001EF88 0C04 0028                  		cmpi.b	#$28,d4
0001EF8C 6700                       		beq.s	locret_1BD44
0001EF8E 0C04 003A                  		cmpi.b	#$3A,d4
0001EF92 6500                       		bcs.s	loc_1BD46
0001EF94 0C04 004B                  		cmpi.b	#$4B,d4
0001EF98 6400                       		bcc.s	loc_1BD46
0001EF9A                            
0001EF9A                            locret_1BD44:
0001EF9A 4E75                       		rts	
0001EF9C                            ; ===========================================================================
0001EF9C                            
0001EF9C                            loc_1BD46:
0001EF9C 1144 0030                  		move.b	d4,$30(a0)
0001EFA0 2149 0032                  		move.l	a1,$32(a0)
0001EFA4 7AFF                       		moveq	#-1,d5
0001EFA6 4E75                       		rts	
0001EFA8                            ; End of function sub_1BD30
0001EFA8                            
0001EFA8                            
0001EFA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFA8                            
0001EFA8                            
0001EFA8                            Obj09_ChkItems:
0001EFA8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EFAE 7800                       		moveq	#0,d4
0001EFB0 3828 000C                  		move.w	obY(a0),d4
0001EFB4 0644 0050                  		addi.w	#$50,d4
0001EFB8 88FC 0018                  		divu.w	#$18,d4
0001EFBC C8FC 0080                  		mulu.w	#$80,d4
0001EFC0 D3C4                       		adda.l	d4,a1
0001EFC2 7800                       		moveq	#0,d4
0001EFC4 3828 0008                  		move.w	obX(a0),d4
0001EFC8 0644 0020                  		addi.w	#$20,d4
0001EFCC 88FC 0018                  		divu.w	#$18,d4
0001EFD0 D2C4                       		adda.w	d4,a1
0001EFD2 1811                       		move.b	(a1),d4
0001EFD4 6600                       		bne.s	Obj09_ChkCont
0001EFD6 4A28 003A                  		tst.b	$3A(a0)
0001EFDA 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001EFDE 7800                       		moveq	#0,d4
0001EFE0 4E75                       		rts	
0001EFE2                            ; ===========================================================================
0001EFE2                            
0001EFE2                            Obj09_ChkCont:
0001EFE2 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001EFE6 6600                       		bne.s	Obj09_Chk1Up
0001EFE8 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001EFEC 6600                       		bne.s	Obj09_GetCont
0001EFEE 14BC 0001                  		move.b	#1,(a2)
0001EFF2 2549 0004                  		move.l	a1,4(a2)
0001EFF6                            
0001EFF6                            Obj09_GetCont:
0001EFF6 4EB9 0000 B8C2             		jsr	(CollectRing).l
0001EFFC 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F002 6500                       		bcs.s	Obj09_NoCont
0001F004 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F00A 6600                       		bne.s	Obj09_NoCont
0001F00C 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F01A                            
0001F01A                            Obj09_NoCont:
0001F01A 7800                       		moveq	#0,d4
0001F01C 4E75                       		rts	
0001F01E                            ; ===========================================================================
0001F01E                            
0001F01E                            Obj09_Chk1Up:
0001F01E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F022 6600                       		bne.s	Obj09_ChkEmer
0001F024 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F028 6600                       		bne.s	Obj09_Get1Up
0001F02A 14BC 0003                  		move.b	#3,(a2)
0001F02E 2549 0004                  		move.l	a1,4(a2)
0001F032                            
0001F032                            Obj09_Get1Up:
0001F032 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F036 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F044 7800                       		moveq	#0,d4
0001F046 4E75                       		rts	
0001F048                            ; ===========================================================================
0001F048                            
0001F048                            Obj09_ChkEmer:
0001F048 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F04C 6500                       		bcs.s	Obj09_ChkGhost
0001F04E 0C04 0040                  		cmpi.b	#$40,d4
0001F052 6200                       		bhi.s	Obj09_ChkGhost
0001F054 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F058 6600                       		bne.s	Obj09_GetEmer
0001F05A 14BC 0005                  		move.b	#5,(a2)
0001F05E 2549 0004                  		move.l	a1,4(a2)
0001F062                            
0001F062                            Obj09_GetEmer:
0001F062 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F068 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F06A 0404 003B                  		subi.b	#$3B,d4
0001F06E 7000                       		moveq	#0,d0
0001F070 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F074 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F078 1584 0000                  		move.b	d4,(a2,d0.w)
0001F07C 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F080                            
0001F080                            Obj09_NoEmer:
0001F08A 7800                       		moveq	#0,d4
0001F08C 4E75                       		rts	
0001F08E                            ; ===========================================================================
0001F08E                            
0001F08E                            Obj09_ChkGhost:
0001F08E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F092 6600                       		bne.s	Obj09_ChkGhostTag
0001F094 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F09A                            
0001F09A                            Obj09_ChkGhostTag:
0001F09A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F09E 6600                       		bne.s	Obj09_NoGhost
0001F0A0 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F0A6 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F0A8 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F0AE                            
0001F0AE                            Obj09_NoGhost:
0001F0AE 78FF                       		moveq	#-1,d4
0001F0B0 4E75                       		rts	
0001F0B2                            ; ===========================================================================
0001F0B2                            
0001F0B2                            Obj09_MakeGhostSolid:
0001F0B2 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F0B8 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F0BA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F0C0 723F                       		moveq	#$3F,d1
0001F0C2                            
0001F0C2                            Obj09_GhostLoop2:
0001F0C2 743F                       		moveq	#$3F,d2
0001F0C4                            
0001F0C4                            Obj09_GhostLoop:
0001F0C4 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F0C8 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F0CA 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F0CE                            
0001F0CE                            Obj09_NoReplace:
0001F0CE 5249                       		addq.w	#1,a1
0001F0D0 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F0D4 43E9 0040                  		lea	$40(a1),a1
0001F0D8 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F0DC                            
0001F0DC                            Obj09_GhostNotSolid:
0001F0DC 4228 003A                  		clr.b	$3A(a0)
0001F0E0 7800                       		moveq	#0,d4
0001F0E2 4E75                       		rts	
0001F0E4                            ; End of function Obj09_ChkItems
0001F0E4                            
0001F0E4                            
0001F0E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0E4                            
0001F0E4                            
0001F0E4                            Obj09_ChkItems2:
0001F0E4 1028 0030                  		move.b	$30(a0),d0
0001F0E8 6600                       		bne.s	Obj09_ChkBumper
0001F0EA 5328 0036                  		subq.b	#1,$36(a0)
0001F0EE 6A00                       		bpl.s	loc_1BEA0
0001F0F0 117C 0000 0036             		move.b	#0,$36(a0)
0001F0F6                            
0001F0F6                            loc_1BEA0:
0001F0F6 5328 0037                  		subq.b	#1,$37(a0)
0001F0FA 6A00                       		bpl.s	locret_1BEAC
0001F0FC 117C 0000 0037             		move.b	#0,$37(a0)
0001F102                            
0001F102                            locret_1BEAC:
0001F102 4E75                       		rts	
0001F104                            ; ===========================================================================
0001F104                            
0001F104                            Obj09_ChkBumper:
0001F104 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F108 6600                       		bne.s	Obj09_GOAL
0001F10A 2228 0032                  		move.l	$32(a0),d1
0001F10E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F114 3401                       		move.w	d1,d2
0001F116 0241 007F                  		andi.w	#$7F,d1
0001F11A C2FC 0018                  		mulu.w	#$18,d1
0001F11E 0441 0014                  		subi.w	#$14,d1
0001F122 EE4A                       		lsr.w	#7,d2
0001F124 0242 007F                  		andi.w	#$7F,d2
0001F128 C4FC 0018                  		mulu.w	#$18,d2
0001F12C 0442 0044                  		subi.w	#$44,d2
0001F130 9268 0008                  		sub.w	obX(a0),d1
0001F134 9468 000C                  		sub.w	obY(a0),d2
0001F138 4EB9 0000 3A40             		jsr	(CalcAngle).l
0001F13E 4EB9 0000 37AE             		jsr	(CalcSine).l
0001F144 C3FC F900                  		muls.w	#-$700,d1
0001F148 E081                       		asr.l	#8,d1
0001F14A 3141 0010                  		move.w	d1,obVelX(a0)
0001F14E C1FC F900                  		muls.w	#-$700,d0
0001F152 E080                       		asr.l	#8,d0
0001F154 3140 0012                  		move.w	d0,obVelY(a0)
0001F158 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F15E 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F162 6600                       		bne.s	Obj09_BumpSnd
0001F164 14BC 0002                  		move.b	#2,(a2)
0001F168 2028 0032                  		move.l	$32(a0),d0
0001F16C 5380                       		subq.l	#1,d0
0001F16E 2540 0004                  		move.l	d0,4(a2)
0001F172                            
0001F172                            Obj09_BumpSnd:
0001F17C                            ; ===========================================================================
0001F17C                            
0001F17C                            Obj09_GOAL:
0001F17C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F180 6600                       		bne.s	Obj09_UPblock
0001F182 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F190 4E75                       		rts	
0001F192                            ; ===========================================================================
0001F192                            
0001F192                            Obj09_UPblock:
0001F192 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F196 6600                       		bne.s	Obj09_DOWNblock
0001F198 4A28 0036                  		tst.b	$36(a0)
0001F19C 6600 0000                  		bne.w	Obj09_NoGlass
0001F1A0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F1A6 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F1AC 6700                       		beq.s	Obj09_UPsnd
0001F1AE E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F1B2 2268 0032                  		movea.l	$32(a0),a1
0001F1B6 5389                       		subq.l	#1,a1
0001F1B8 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F1BC                            
0001F1BC                            Obj09_UPsnd:
0001F1C6                            ; ===========================================================================
0001F1C6                            
0001F1C6                            Obj09_DOWNblock:
0001F1C6 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F1CA 6600                       		bne.s	Obj09_Rblock
0001F1CC 4A28 0036                  		tst.b	$36(a0)
0001F1D0 6600 0000                  		bne.w	Obj09_NoGlass
0001F1D4 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F1DA 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F1E0 6600                       		bne.s	Obj09_DOWNsnd
0001F1E2 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F1E6 2268 0032                  		movea.l	$32(a0),a1
0001F1EA 5389                       		subq.l	#1,a1
0001F1EC 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F1F0                            
0001F1F0                            Obj09_DOWNsnd:
0001F1FA                            ; ===========================================================================
0001F1FA                            
0001F1FA                            Obj09_Rblock:
0001F1FA 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F1FE 6600                       		bne.s	Obj09_ChkGlass
0001F200 4A28 0037                  		tst.b	$37(a0)
0001F204 6600 0000                  		bne.w	Obj09_NoGlass
0001F208 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F20E 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F212 6600                       		bne.s	Obj09_RevStage
0001F214 14BC 0004                  		move.b	#4,(a2)
0001F218 2028 0032                  		move.l	$32(a0),d0
0001F21C 5380                       		subq.l	#1,d0
0001F21E 2540 0004                  		move.l	d0,4(a2)
0001F222                            
0001F222                            Obj09_RevStage:
0001F222 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F230                            ; ===========================================================================
0001F230                            
0001F230                            Obj09_ChkGlass:
0001F230 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F234 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F236 0C00 002E                  		cmpi.b	#$2E,d0
0001F23A 6700                       		beq.s	Obj09_Glass
0001F23C 0C00 002F                  		cmpi.b	#$2F,d0
0001F240 6700                       		beq.s	Obj09_Glass
0001F242 0C00 0030                  		cmpi.b	#$30,d0
0001F246 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F248                            
0001F248                            Obj09_Glass:
0001F248 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F24C 6600                       		bne.s	Obj09_GlassSnd
0001F24E 14BC 0006                  		move.b	#6,(a2)
0001F252 2268 0032                  		movea.l	$32(a0),a1
0001F256 5389                       		subq.l	#1,a1
0001F258 2549 0004                  		move.l	a1,4(a2)
0001F25C 1011                       		move.b	(a1),d0
0001F25E 5200                       		addq.b	#1,d0		; change glass type when touched
0001F260 0C00 0030                  		cmpi.b	#$30,d0
0001F264 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F266 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F268                            
0001F268                            Obj09_GlassUpdate:
0001F268 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F26C                            
0001F26C                            Obj09_GlassSnd:
0001F276                            ; ===========================================================================
0001F276                            
0001F276                            Obj09_NoGlass:
0001F276 4E75                       		rts	
0001F278                            ; End of function Obj09_ChkItems2
0001F278                            ; End of function Obj09_ChkItems2
0001F278                            
0001F278                            		include	"_incObj\10.asm"
0001F278                            ; ---------------------------------------------------------------------------
0001F278                            ; Object 10 - After-Image
0001F278                            ; ---------------------------------------------------------------------------
0001F278                            
0001F278                            Obj10:
0001F278 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F27E 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F282                            
0001F282 7000                             moveq   #0,d0
0001F284 1028 0024                        move.b   obRoutine(a0),d0
0001F288 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F28C 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F290                            
0001F290                            ; ===========================================================================
0001F290                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F290                            ; ===========================================================================
0001F290                            Afterimage_Index:
0001F290 0000                             dc.w NoAfterImage-Afterimage_Index
0001F292 0000                             dc.w NoAfterImage-Afterimage_Index
0001F294 0000                             dc.w NoAfterImage-Afterimage_Index
0001F296 0000                             dc.w AfterimageStart-Afterimage_Index
0001F298 0000                             dc.w NoAfterImage-Afterimage_Index
0001F29A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F29C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F29E 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F2A0 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F2A2                            ; ===========================================================================
0001F2A2                            NoAfterImage:
0001F2A2 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F2A6 4E75                             rts
0001F2A8                            ; ===========================================================================
0001F2A8                            AfterimageStart:
0001F2A8 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F2AE 6000                             bra.s   Afterimage_Show
0001F2B0                            ; ===========================================================================
0001F2B0                            AfterimageLPrio:
0001F2B0 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F2B4                            ; ===========================================================================
0001F2B4                            Afterimage_Show:
0001F2B4 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F2B8 4EB9 0000 3788                   jsr   (RandomNumber).l         ; get a random number
0001F2BE 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F2C2 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F2C4 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F2C6                            
0001F2C6                            AfterimageException:
0001F2C6 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F2CC 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F2D2 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F2D8 4EF9 0000 F6FE                   jmp   DisplaySprite
0001F2DE                            ; ===========================================================================
0001F2DE                            AfterimageEnd:
0001F2DE 4EF9 0000 F73E                   jmp   DeleteObject
0001F2DE 4EF9 0000 F73E                   jmp   DeleteObject
0001F2E4                            
0001F2E4                            		include	"_inc\AnimateLevelGfx.asm"
0001F2E4                            ; ---------------------------------------------------------------------------
0001F2E4                            ; Subroutine to	animate	level graphics
0001F2E4                            ; ---------------------------------------------------------------------------
0001F2E4                            
0001F2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2E4                            
0001F2E4                            
0001F2E4                            AnimateLevelGfx:
0001F2E4                            		;tst.w	(f_pause).w	; is the game paused?
0001F2E4                            		;bne.s	@ispaused	; if yes, branch
0001F2E4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F2EA 6100 0000                  		bsr.w	AniArt_GiantRing
0001F2EE 7000                       		moveq	#0,d0
0001F2F0 1038 FE10                  		move.b	(v_zone).w,d0
0001F2F4 D040                       		add.w	d0,d0
0001F2F6 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F2FA 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F2FE                            
0001F2FE                            	@ispaused:
0001F2FE 4E75                       		rts	
0001F300                            
0001F300                            ; ===========================================================================
0001F300 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F304 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F308 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F30C 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F30E                            ; ===========================================================================
0001F30E                            ; ---------------------------------------------------------------------------
0001F30E                            ; Animated pattern routine - Green Hill
0001F30E                            ; ---------------------------------------------------------------------------
0001F30E                            
0001F30E                            AniArt_GHZ:
0001F30E                            
0001F30E                            AniArt_GHZ_Waterfall:
0001F30E                            
0001F30E =00000008                  @size:		equ 8	; number of tiles per frame
0001F30E                            
0001F30E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F312 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F314                            
0001F314 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F31A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F320 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F324 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F328 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F32C 6700                       		beq.s	@isframe0	; branch if frame 0
0001F32E 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F332                            
0001F332                            	@isframe0:
0001F33C 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F340 6000 0000                  		bra.w	LoadTiles
0001F344                            ; ===========================================================================
0001F344                            
0001F344                            AniArt_GHZ_Bigflower:
0001F344                            
0001F344 =00000010                  @size:		equ 16	; number of tiles per frame
0001F344                            
0001F344 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F348 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F34A                            
0001F34A 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F350 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F356 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F35A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F35E 0240 0001                  		andi.w	#1,d0
0001F362 6700                       		beq.s	@isframe0
0001F364 43E9 0200                  		lea	@size*$20(a1),a1
0001F368                            
0001F368                            	@isframe0:
0001F372 323C 000F                  		move.w	#@size-1,d1
0001F376 6000 0000                  		bra.w	LoadTiles
0001F37A                            ; ===========================================================================
0001F37A                            
0001F37A                            AniArt_GHZ_Smallflower:
0001F37A                            
0001F37A =0000000C                  @size:		equ 12	; number of tiles per frame
0001F37A                            
0001F37A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F37E 6A00                       		bpl.s	@end
0001F380                            
0001F380 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F386 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F38A 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F38E 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F392 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F396 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F39A 6600                       		bne.s	@isframe1	; if not, branch
0001F39C 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F3A2                            
0001F3A2                            	@isframe1:
0001F3A2 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F3A4 3200                       		move.w	d0,d1
0001F3A6 D040                       		add.w	d0,d0
0001F3A8 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F3B4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F3BA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F3BE 323C 000B                  		move.w	#@size-1,d1
0001F3C2 6100 0000                  		bsr.w	LoadTiles
0001F3C6                            
0001F3C6                            @end:
0001F3C6 4E75                       		rts	
0001F3C8                            
0001F3C8 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F3CC                            ; ===========================================================================
0001F3CC                            ; ---------------------------------------------------------------------------
0001F3CC                            ; Animated pattern routine - Marble
0001F3CC                            ; ---------------------------------------------------------------------------
0001F3CC                            
0001F3CC                            AniArt_MZ:
0001F3CC                            
0001F3CC                            AniArt_MZ_Lava:
0001F3CC                            
0001F3CC =00000008                  @size:		equ 8	; number of tiles per frame
0001F3CC                            
0001F3CC 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F3D0 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F3D2                            
0001F3D2 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F3D8 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F3DE 7000                       		moveq	#0,d0
0001F3E0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F3E4 5200                       		addq.b	#1,d0		; increment frame counter
0001F3E6 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F3EA 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F3EC 7000                       		moveq	#0,d0
0001F3EE                            
0001F3EE                            	@frame01or2:
0001F3EE 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F3F2 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F3F6 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F402 323C 0007                  		move.w	#@size-1,d1
0001F406 6100 0000                  		bsr.w	LoadTiles
0001F40A                            
0001F40A                            AniArt_MZ_Magma:
0001F40A 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F40E 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F410                            		
0001F410 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F416 7000                       		moveq	#0,d0
0001F418 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F41C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F422 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F424 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F430 7600                       		moveq	#0,d3
0001F432 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F436 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F43A 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F43E 343C 0003                  		move.w	#3,d2
0001F442                            
0001F442                            	@loop:
0001F442 3003                       		move.w	d3,d0
0001F444 D040                       		add.w	d0,d0
0001F446 0240 001E                  		andi.w	#$1E,d0
0001F44A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F450 3033 0000                  		move.w	(a3,d0.w),d0
0001F454 47F3 0000                  		lea	(a3,d0.w),a3
0001F458 224C                       		movea.l	a4,a1
0001F45A 323C 001F                  		move.w	#$1F,d1
0001F45E 4E93                       		jsr	(a3)
0001F460 5843                       		addq.w	#4,d3
0001F462 51CA FFDE                  		dbf	d2,@loop
0001F466 4E75                       		rts	
0001F468                            ; ===========================================================================
0001F468                            
0001F468                            AniArt_MZ_Torch:
0001F468                            
0001F468 =00000006                  @size:		equ 6	; number of tiles per frame
0001F468                            
0001F468 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F46C 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F470                            		
0001F470 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F476 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F47C 7000                       		moveq	#0,d0
0001F47E 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F482 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F486 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F48C C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F490 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F49C 323C 0005                  		move.w	#@size-1,d1
0001F4A0 6000 0000                  		bra.w	LoadTiles
0001F4A4                            
0001F4A4                            @end:
0001F4A4 4E75                       		rts	
0001F4A6                            ; ===========================================================================
0001F4A6                            ; ---------------------------------------------------------------------------
0001F4A6                            ; Animated pattern routine - Scrap Brain
0001F4A6                            ; ---------------------------------------------------------------------------
0001F4A6                            
0001F4A6                            AniArt_SBZ:
0001F4A6                            
0001F4A6 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F4A6                            
0001F4A6 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F4AA 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F4AC                            		
0001F4AC 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F4B0 6000                       		bra.s	@chk_smokepuff2
0001F4B2                            ; ===========================================================================
0001F4B2                            
0001F4B2                            @smokepuff:
0001F4B2 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F4B6 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F4B8                            		
0001F4B8 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F4BE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F4CE 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F4D2 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F4D6 0240 0007                  		andi.w	#7,d0
0001F4DA 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F4DC 5340                       		subq.w	#1,d0
0001F4DE C0FC 0180                  		mulu.w	#@size*$20,d0
0001F4E2 43F1 0000                  		lea	(a1,d0.w),a1
0001F4E6 323C 000B                  		move.w	#@size-1,d1
0001F4EA 6000 0000                  		bra.w	LoadTiles
0001F4EE                            ; ===========================================================================
0001F4EE                            
0001F4EE                            @untilnextpuff:
0001F4EE 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F4F4                            
0001F4F4                            @clearsky:
0001F4F4 323C 0005                  		move.w	#(@size/2)-1,d1
0001F4F8 6100 0000                  		bsr.w	LoadTiles
0001F4FC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F502 323C 0005                  		move.w	#(@size/2)-1,d1
0001F506 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F50A                            ; ===========================================================================
0001F50A                            
0001F50A                            @chk_smokepuff2:
0001F50A 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F50E 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F510                            		
0001F510 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F514 6000                       		bra.s	@end
0001F516                            ; ===========================================================================
0001F516                            
0001F516                            @smokepuff2:
0001F516 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F51A 6A00                       		bpl.s	@end		; branch if not 0
0001F51C                            		
0001F51C 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F522 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F532 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F536 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F53A 0240 0007                  		andi.w	#7,d0
0001F53E 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F540 5340                       		subq.w	#1,d0
0001F542 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F546 43F1 0000                  		lea	(a1,d0.w),a1
0001F54A 323C 000B                  		move.w	#@size-1,d1
0001F54E 6000 0000                  		bra.w	LoadTiles
0001F552                            ; ===========================================================================
0001F552                            
0001F552                            @untilnextpuff2:
0001F552 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F558 609A                       		bra.s	@clearsky
0001F55A                            ; ===========================================================================
0001F55A                            
0001F55A                            @end:
0001F55A 4E75                       		rts	
0001F55C                            ; ===========================================================================
0001F55C                            ; ---------------------------------------------------------------------------
0001F55C                            ; Animated pattern routine - ending sequence
0001F55C                            ; ---------------------------------------------------------------------------
0001F55C                            
0001F55C                            AniArt_Ending:
0001F55C                            
0001F55C                            AniArt_Ending_BigFlower:
0001F55C                            
0001F55C =00000010                  @size:		equ 16	; number of tiles per frame
0001F55C                            
0001F55C 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F560 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F562                            		
0001F562 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F568 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F56E 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F572 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F576 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F57A 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F57E 6700                       		beq.s	@isframe0	; branch if frame 0
0001F580 43E9 0200                  		lea	@size*$20(a1),a1
0001F584 45EA 0200                  		lea	@size*$20(a2),a2
0001F588                            
0001F588                            	@isframe0:
0001F592 323C 000F                  		move.w	#@size-1,d1
0001F596 6100 0000                  		bsr.w	LoadTiles
0001F59A 224A                       		movea.l	a2,a1
0001F5A6 323C 000F                  		move.w	#@size-1,d1
0001F5AA 6000 0000                  		bra.w	LoadTiles
0001F5AE                            ; ===========================================================================
0001F5AE                            
0001F5AE                            AniArt_Ending_SmallFlower:
0001F5AE                            
0001F5AE =0000000C                  @size:		equ 12	; number of tiles per frame
0001F5AE                            
0001F5AE 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F5B2 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F5B4                            		
0001F5B4 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F5BA 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F5BE 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F5C2 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F5C6 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F5CA EF48                       		lsl.w	#7,d0		; multiply by $80
0001F5CC 3200                       		move.w	d0,d1
0001F5CE D040                       		add.w	d0,d0
0001F5D0 D041                       		add.w	d1,d0		; multiply by 3
0001F5DC 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F5E2 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F5E6 323C 000B                  		move.w	#@size-1,d1
0001F5EA 6000 0000                  		bra.w	LoadTiles
0001F5EE                            ; ===========================================================================
0001F5EE 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F5F6                            ; ===========================================================================
0001F5F6                            
0001F5F6                            AniArt_Ending_Flower3:
0001F5F6                            
0001F5F6 =00000010                  @size:		equ 16	; number of tiles per frame
0001F5F6                            
0001F5F6 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F5FA 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F5FC                            		
0001F5FC 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F602 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F606 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F60A 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F60E 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F612 E148                       		lsl.w	#8,d0		; multiply by $100
0001F614 D040                       		add.w	d0,d0		; multiply by 2
0001F620 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F624 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F628 323C 000F                  		move.w	#@size-1,d1
0001F62C 6000 0000                  		bra.w	LoadTiles
0001F630                            ; ===========================================================================
0001F630 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F634                            ; ===========================================================================
0001F634                            
0001F634                            AniArt_Ending_Flower4:
0001F634                            
0001F634 =00000010                  @size:		equ 16	; number of tiles per frame
0001F634                            
0001F634 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F638 6A00                       		bpl.s	@end		; branch if not 0
0001F63A                            		
0001F63A 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F640 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F644 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F648 0240 0003                  		andi.w	#3,d0
0001F64C 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F650 E148                       		lsl.w	#8,d0		; multiply by $100
0001F652 D040                       		add.w	d0,d0		; multiply by 2
0001F65E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F662 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F666 323C 000F                  		move.w	#@size-1,d1
0001F66A 6000 0000                  		bra.w	LoadTiles
0001F66E                            ; ===========================================================================
0001F66E                            
0001F66E                            @end:
0001F66E 4E75                       		rts	
0001F670                            ; ===========================================================================
0001F670                            
0001F670                            AniArt_none:
0001F670 4E75                       		rts	
0001F672                            
0001F672                            ; ---------------------------------------------------------------------------
0001F672                            ; Subroutine to	transfer graphics to VRAM
0001F672                            
0001F672                            ; input:
0001F672                            ;	a1 = source address
0001F672                            ;	a6 = vdp_data_port ($C00000)
0001F672                            ;	d1 = number of tiles to load (minus one)
0001F672                            ; ---------------------------------------------------------------------------
0001F672                            
0001F672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F672                            
0001F672                            
0001F672                            LoadTiles:
0001F672 2C99                       		move.l	(a1)+,(a6)
0001F674 2C99                       		move.l	(a1)+,(a6)
0001F676 2C99                       		move.l	(a1)+,(a6)
0001F678 2C99                       		move.l	(a1)+,(a6)
0001F67A 2C99                       		move.l	(a1)+,(a6)
0001F67C 2C99                       		move.l	(a1)+,(a6)
0001F67E 2C99                       		move.l	(a1)+,(a6)
0001F680 2C99                       		move.l	(a1)+,(a6)
0001F682 51C9 FFEE                  		dbf	d1,LoadTiles
0001F686 4E75                       		rts	
0001F688                            ; End of function LoadTiles
0001F688                            
0001F688                            ; ===========================================================================
0001F688                            ; ---------------------------------------------------------------------------
0001F688                            ; Animated pattern routine - more Marble Zone
0001F688                            ; ---------------------------------------------------------------------------
0001F688 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F68C 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F690 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F694 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F698 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F69C 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F6A0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F6A4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F6A8                            ; ===========================================================================
0001F6A8                            
0001F6A8                            loc_1C3EE:
0001F6A8 2C91                       		move.l	(a1),(a6)
0001F6AA 43E9 0010                  		lea	$10(a1),a1
0001F6AE 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F6B2 4E75                       		rts	
0001F6B4                            ; ===========================================================================
0001F6B4                            
0001F6B4                            loc_1C3FA:
0001F6B4 2029 0002                  		move.l	2(a1),d0
0001F6B8 1029 0001                  		move.b	1(a1),d0
0001F6BC E098                       		ror.l	#8,d0
0001F6BE 2C80                       		move.l	d0,(a6)
0001F6C0 43E9 0010                  		lea	$10(a1),a1
0001F6C4 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F6C8 4E75                       		rts	
0001F6CA                            ; ===========================================================================
0001F6CA                            
0001F6CA                            loc_1C410:
0001F6CA 2CA9 0002                  		move.l	2(a1),(a6)
0001F6CE 43E9 0010                  		lea	$10(a1),a1
0001F6D2 51C9 FFF6                  		dbf	d1,loc_1C410
0001F6D6 4E75                       		rts	
0001F6D8                            ; ===========================================================================
0001F6D8                            
0001F6D8                            loc_1C41E:
0001F6D8 2029 0004                  		move.l	4(a1),d0
0001F6DC 1029 0003                  		move.b	3(a1),d0
0001F6E0 E098                       		ror.l	#8,d0
0001F6E2 2C80                       		move.l	d0,(a6)
0001F6E4 43E9 0010                  		lea	$10(a1),a1
0001F6E8 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F6EC 4E75                       		rts	
0001F6EE                            ; ===========================================================================
0001F6EE                            
0001F6EE                            loc_1C434:
0001F6EE 2CA9 0004                  		move.l	4(a1),(a6)
0001F6F2 43E9 0010                  		lea	$10(a1),a1
0001F6F6 51C9 FFF6                  		dbf	d1,loc_1C434
0001F6FA 4E75                       		rts	
0001F6FC                            ; ===========================================================================
0001F6FC                            
0001F6FC                            loc_1C442:
0001F6FC 2029 0006                  		move.l	6(a1),d0
0001F700 1029 0005                  		move.b	5(a1),d0
0001F704 E098                       		ror.l	#8,d0
0001F706 2C80                       		move.l	d0,(a6)
0001F708 43E9 0010                  		lea	$10(a1),a1
0001F70C 51C9 FFEE                  		dbf	d1,loc_1C442
0001F710 4E75                       		rts	
0001F712                            ; ===========================================================================
0001F712                            
0001F712                            loc_1C458:
0001F712 2CA9 0006                  		move.l	6(a1),(a6)
0001F716 43E9 0010                  		lea	$10(a1),a1
0001F71A 51C9 FFF6                  		dbf	d1,loc_1C458
0001F71E 4E75                       		rts	
0001F720                            ; ===========================================================================
0001F720                            
0001F720                            loc_1C466:
0001F720 2029 0008                  		move.l	8(a1),d0
0001F724 1029 0007                  		move.b	7(a1),d0
0001F728 E098                       		ror.l	#8,d0
0001F72A 2C80                       		move.l	d0,(a6)
0001F72C 43E9 0010                  		lea	$10(a1),a1
0001F730 51C9 FFEE                  		dbf	d1,loc_1C466
0001F734 4E75                       		rts	
0001F736                            ; ===========================================================================
0001F736                            
0001F736                            loc_1C47C:
0001F736 2CA9 0008                  		move.l	8(a1),(a6)
0001F73A 43E9 0010                  		lea	$10(a1),a1
0001F73E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F742 4E75                       		rts	
0001F744                            ; ===========================================================================
0001F744                            
0001F744                            loc_1C48A:
0001F744 2029 000A                  		move.l	$A(a1),d0
0001F748 1029 0009                  		move.b	9(a1),d0
0001F74C E098                       		ror.l	#8,d0
0001F74E 2C80                       		move.l	d0,(a6)
0001F750 43E9 0010                  		lea	$10(a1),a1
0001F754 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F758 4E75                       		rts	
0001F75A                            ; ===========================================================================
0001F75A                            
0001F75A                            loc_1C4A0:
0001F75A 2CA9 000A                  		move.l	$A(a1),(a6)
0001F75E 43E9 0010                  		lea	$10(a1),a1
0001F762 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F766 4E75                       		rts	
0001F768                            ; ===========================================================================
0001F768                            
0001F768                            loc_1C4AE:
0001F768 2029 000C                  		move.l	$C(a1),d0
0001F76C 1029 000B                  		move.b	$B(a1),d0
0001F770 E098                       		ror.l	#8,d0
0001F772 2C80                       		move.l	d0,(a6)
0001F774 43E9 0010                  		lea	$10(a1),a1
0001F778 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F77C 4E75                       		rts	
0001F77E                            ; ===========================================================================
0001F77E                            
0001F77E                            loc_1C4C4:
0001F77E 2CA9 000C                  		move.l	$C(a1),(a6)
0001F782 43E9 0010                  		lea	$10(a1),a1
0001F786 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F78A 4E75                       		rts	
0001F78C                            ; ===========================================================================
0001F78C                            
0001F78C                            loc_1C4D2:
0001F78C 2029 000C                  		move.l	$C(a1),d0
0001F790 E198                       		rol.l	#8,d0
0001F792 1011                       		move.b	0(a1),d0
0001F794 2C80                       		move.l	d0,(a6)
0001F796 43E9 0010                  		lea	$10(a1),a1
0001F79A 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F79E 4E75                       		rts	
0001F7A0                            ; ===========================================================================
0001F7A0                            
0001F7A0                            loc_1C4E8:
0001F7A0 3CA9 000E                  		move.w	$E(a1),(a6)
0001F7A4 3C91                       		move.w	0(a1),(a6)
0001F7A6 43E9 0010                  		lea	$10(a1),a1
0001F7AA 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F7AE 4E75                       		rts	
0001F7B0                            ; ===========================================================================
0001F7B0                            
0001F7B0                            loc_1C4FA:
0001F7B0 2011                       		move.l	0(a1),d0
0001F7B2 1029 000F                  		move.b	$F(a1),d0
0001F7B6 E098                       		ror.l	#8,d0
0001F7B8 2C80                       		move.l	d0,(a6)
0001F7BA 43E9 0010                  		lea	$10(a1),a1
0001F7BE 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F7C2 4E75                       		rts	
0001F7C4                            
0001F7C4                            ; ---------------------------------------------------------------------------
0001F7C4                            ; Animated pattern routine - giant ring
0001F7C4                            ; ---------------------------------------------------------------------------
0001F7C4                            
0001F7C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F7C4                            
0001F7C4                            
0001F7C4                            AniArt_GiantRing:
0001F7C4                            
0001F7C4 =0000000E                  @size:		equ 14
0001F7C4                            
0001F7C4 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F7C8 6600                       		bne.s	@loadTiles		; If so, get to work
0001F7CA 4E75                       		rts	
0001F7CC                            ; ===========================================================================
0001F7CC                            ; loc_1C518:
0001F7CC                            @loadTiles:
0001F7CC 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F7D2 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F7D8 7000                       		moveq	#0,d0
0001F7DA 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F7DE 43F1 0000                  		lea	(a1,d0.w),a1
0001F7E2                            		; Turn VRAM address into VDP command
0001F7E2 0640 8000                  		addi.w	#$8000,d0
0001F7E6 E588                       		lsl.l	#2,d0
0001F7E8 E448                       		lsr.w	#2,d0
0001F7EA 0040 4000                  		ori.w	#$4000,d0
0001F7EE 4840                       		swap	d0
0001F7F0                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F7F0 2D40 0004                  		move.l	d0,4(a6)
0001F7F4                            
0001F7F4 323C 000D                  		move.w	#@size-1,d1
0001F7F8 6000 FE78                  		bra.w	LoadTiles
0001F7FC                            
0001F7FC                            ; End of function AniArt_GiantRing
0001F7FC                            ; End of function AniArt_GiantRing
0001F7FC                            
0001F7FC                            		include	"_incObj\21 HUD.asm"
0001F7FC                            ; ---------------------------------------------------------------------------
0001F7FC                            ; Object 21 - SCORE, TIME, RINGS
0001F7FC                            ; ---------------------------------------------------------------------------
0001F7FC                            
0001F7FC                            HUD:
0001F7FC 7000                       		moveq	#0,d0
0001F7FE 1028 0024                  		move.b	obRoutine(a0),d0
0001F802 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F806 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F80A                            ; ===========================================================================
0001F80A 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F80C 0000                       		dc.w HUD_Flash-HUD_Index
0001F80E                            ; ===========================================================================
0001F80E                            
0001F80E                            HUD_Main:	; Routine 0
0001F80E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F812 317C 0090 0008             		move.w	#$90,obX(a0)
0001F818 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F81E 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F826 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F82C 117C 0000 0001             		move.b	#0,obRender(a0)
0001F832 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F838                            
0001F838                            HUD_Flash:	; Routine 2
0001F838 7000                       		moveq	#0,d0
0001F83A 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F840 6600                       		bne.s	@display
0001F842 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F846 6600                       		bne.s	@norings	; if so, branch
0001F848 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F84A                            ; ===========================================================================
0001F84A                            
0001F84A                            @norings:
0001F84A 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F850 6600                       		bne.s	@display	; if not, branch
0001F852 5440                       		addq.w	#2,d0		; make time counter flash red
0001F854                            
0001F854                            	@display:
0001F854 1140 001A                  		move.b	d0,obFrame(a0)
0001F858 4EF9 0000 F6FE             		jmp	DisplaySprite
0001F858 4EF9 0000 F6FE             		jmp	DisplaySprite
0001F85E                            Map_HUD:	include	"_maps\HUD.asm"
0001F85E                            ; ---------------------------------------------------------------------------
0001F85E                            ; Sprite mappings - SCORE, TIME, RINGS
0001F85E                            ; ---------------------------------------------------------------------------
0001F85E                            Map_HUD_internal:
0001F85E 0000                       		dc.w @allyellow-Map_HUD_internal
0001F860 0000                       		dc.w @ringred-Map_HUD_internal
0001F862 0000                       		dc.w @timered-Map_HUD_internal
0001F864 0000                       		dc.w @allred-Map_HUD_internal
0001F866 0A                         @allyellow:	dc.b $A
0001F867 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F86C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F871 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F876 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F87B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F880 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F885 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F88A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F88F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F894 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F899 00                         		dc.b 0
0001F89A 0A                         @ringred:	dc.b $A
0001F89B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F8A0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F8A5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F8AA 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F8AF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F8B4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F8B9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F8BE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F8C3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F8C8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F8CD 00                         		dc.b 0
0001F8CE 0A                         @timered:	dc.b $A
0001F8CF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F8D4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F8D9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F8DE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F8E3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F8E8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F8ED A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F8F2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F8F7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F8FC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F901 00                         		dc.b 0
0001F902 0A                         @allred:	dc.b $A
0001F903 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F908 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F90D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F912 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F917 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F91C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F921 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F926 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F92B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F930 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F936 00                         		even
0001F936 00                         		even
0001F936                            
0001F936                            ; ---------------------------------------------------------------------------
0001F936                            ; Add points subroutine
0001F936                            ; ---------------------------------------------------------------------------
0001F936                            
0001F936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F936                            
0001F936                            
0001F936                            AddPoints:
0001F936 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001F93C                            
0001F93C                            
0001F93C 47F8 FE26                  			lea     (v_score).w,a3
0001F940 D193                       			add.l   d0,(a3)
0001F942 223C 000F 423F             			move.l  #999999,d1
0001F948 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001F94A 6200                       			bhi.s   @belowmax ; if yes, branch
0001F94C 2681                       			move.l  d1,(a3) ; reset score to 999999
0001F94E                            		@belowmax:
0001F94E 2013                       			move.l  (a3),d0
0001F950 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001F954 6500                       			blo.s   @noextralife ; if not, branch
0001F956                            
0001F956 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001F95E 4A38 FFF8                  			tst.b   (v_megadrive).w
0001F962 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001F964 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001F968 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001F976                            
0001F976                            @locret_1C6B6:
0001F976                            @noextralife:
0001F976 4E75                       		rts	
0001F978                            ; End of function AddPoints
0001F978                            
0001F978                            		include	"_inc\HUD_Update.asm"
0001F978                            ; ---------------------------------------------------------------------------
0001F978                            ; Subroutine to	update the HUD
0001F978                            ; ---------------------------------------------------------------------------
0001F978                            
0001F978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F978                            
0001F978                            hudVRAM:	macro loc
0001F978                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001F978                            		endm
0001F978                            
0001F978                            
0001F978                            HUD_Update:
0001F978 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001F97C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001F980 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001F984 6700                       		beq.s	@chkrings	; if not, branch
0001F986                            
0001F986 4238 FE1F                  		clr.b	(f_scorecount).w
0001F98A 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001F990 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001F994 6100 0000                  		bsr.w	Hud_Score
0001F998                            
0001F998                            	@chkrings:
0001F998 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001F99C 6700                       		beq.s	@chktime	; if not, branch
0001F99E 6A00                       		bpl.s	@notzero
0001F9A0 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001F9A4                            
0001F9A4                            	@notzero:
0001F9A4 4238 FE1D                  		clr.b	(f_ringcount).w
0001F9A8 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001F9AE 7200                       		moveq	#0,d1
0001F9B0 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001F9B4 6100 0000                  		bsr.w	Hud_Rings
0001F9B8                            
0001F9B8                            	@chktime:
0001F9B8 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001F9BC 6700                       		beq.s	@chklives	; if not, branch
0001F9BE 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001F9C2 6600                       		bne.s	@chklives	; if yes, branch
0001F9C4 43F8 FE22                  		lea	(v_time).w,a1
0001F9C8 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001F9CE 6700                       		beq.s	TimeOver	; if yes, branch
0001F9D0                            
0001F9D0 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001F9D2 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001F9D6 6500                       		bcs.s	@chklives
0001F9D8 12BC 0000                  		move.b	#0,(a1)
0001F9DC 5221                       		addq.b	#1,-(a1)	; increment second counter
0001F9DE 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001F9E2 6500                       		bcs.s	@updatetime
0001F9E4 12BC 0000                  		move.b	#0,(a1)
0001F9E8 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001F9EA 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001F9EE 6500                       		bcs.s	@updatetime
0001F9F0 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001F9F4                            
0001F9F4                            	@updatetime:
0001F9F4 203C 5E40 0003             		hudVRAM	$DE40
0001F9FA 7200                       		moveq	#0,d1
0001F9FC 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FA00 6100 0000                  		bsr.w	Hud_Mins
0001FA04 203C 5EC0 0003             		hudVRAM	$DEC0
0001FA0A 7200                       		moveq	#0,d1
0001FA0C 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FA10 6100 0000                  		bsr.w	Hud_Secs
0001FA14                            
0001FA14                            	@chklives:
0001FA14 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FA18 6700                       		beq.s	@chkbonus	; if not, branch
0001FA1A 4238 FE1C                  		clr.b	(f_lifecount).w
0001FA1E 6100 0000                  		bsr.w	Hud_Lives
0001FA22                            
0001FA22                            	@chkbonus:
0001FA22 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FA26 6700                       		beq.s	@finish		; if not, branch
0001FA28 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FA36 7200                       		moveq	#0,d1
0001FA38 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FA3C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FA40 7200                       		moveq	#0,d1
0001FA42 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FA46 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FA4A                            
0001FA4A                            	@finish:
0001FA4A 4E75                       		rts	
0001FA4C                            ; ===========================================================================
0001FA4C                            
0001FA4C                            TimeOver:
0001FA4C 4238 FE1E                  		clr.b	(f_timecount).w
0001FA50 41F8 D000                  		lea	(v_player).w,a0
0001FA54 2448                       		movea.l	a0,a2
0001FA56 6100 E83A                  		bsr.w	KillSonic
0001FA5A 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FA60 4E75                       		rts	
0001FA62                            ; ===========================================================================
0001FA62                            
0001FA62                            HudDebug:
0001FA62 6100 0000                  		bsr.w	HudDb_XY
0001FA66 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FA6A 6700                       		beq.s	@objcounter	; if not, branch
0001FA6C 6A00                       		bpl.s	@notzero
0001FA6E 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FA72                            
0001FA72                            	@notzero:
0001FA72 4238 FE1D                  		clr.b	(f_ringcount).w
0001FA76 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FA7C 7200                       		moveq	#0,d1
0001FA7E 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FA82 6100 0000                  		bsr.w	Hud_Rings
0001FA86                            
0001FA86                            	@objcounter:
0001FA86 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FA8C 7200                       		moveq	#0,d1
0001FA8E 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FA92 6100 0000                  		bsr.w	Hud_Secs
0001FA96 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FA9A 6700                       		beq.s	@chkbonus	; if not, branch
0001FA9C 4238 FE1C                  		clr.b	(f_lifecount).w
0001FAA0 6100 0000                  		bsr.w	Hud_Lives
0001FAA4                            
0001FAA4                            	@chkbonus:
0001FAA4 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FAA8 6700                       		beq.s	@finish		; if not, branch
0001FAAA 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FAB8 7200                       		moveq	#0,d1
0001FABA 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FABE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FAC2 7200                       		moveq	#0,d1
0001FAC4 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FAC8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FACC                            
0001FACC                            	@finish:
0001FACC 4E75                       		rts	
0001FACE                            ; End of function HUD_Update
0001FACE                            
0001FACE                            ; ---------------------------------------------------------------------------
0001FACE                            ; Subroutine to	load "0" on the	HUD
0001FACE                            ; ---------------------------------------------------------------------------
0001FACE                            
0001FACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FACE                            
0001FACE                            
0001FACE                            Hud_LoadZero:
0001FAD8 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FADC 343C 0002                  		move.w	#2,d2
0001FAE0 6000                       		bra.s	loc_1C83E
0001FAE2                            ; End of function Hud_LoadZero
0001FAE2                            
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2                            
0001FAE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FAE2                            
0001FAE2                            
0001FAE2                            Hud_Base:
0001FAE2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FAE8 6100 0000                  		bsr.w	Hud_Lives
0001FAF6 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FAFA 343C 000E                  		move.w	#$E,d2
0001FAFE                            
0001FAFE                            loc_1C83E:
0001FAFE 43FA 0000                  		lea	Art_Hud(pc),a1
0001FB02                            
0001FB02                            loc_1C842:
0001FB02 323C 000F                  		move.w	#$F,d1
0001FB06 101A                       		move.b	(a2)+,d0
0001FB08 6B00                       		bmi.s	loc_1C85E
0001FB0A 4880                       		ext.w	d0
0001FB0C EB48                       		lsl.w	#5,d0
0001FB0E 47F1 0000                  		lea	(a1,d0.w),a3
0001FB12                            
0001FB12                            loc_1C852:
0001FB12 2C9B                       		move.l	(a3)+,(a6)
0001FB14 51C9 FFFC                  		dbf	d1,loc_1C852
0001FB18                            
0001FB18                            loc_1C858:
0001FB18 51CA FFE8                  		dbf	d2,loc_1C842
0001FB1C                            
0001FB1C 4E75                       		rts	
0001FB1E                            ; ===========================================================================
0001FB1E                            
0001FB1E                            loc_1C85E:
0001FB1E 2CBC 0000 0000             		move.l	#0,(a6)
0001FB24 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FB28                            
0001FB28 60EE                       		bra.s	loc_1C858
0001FB2A                            ; End of function Hud_Base
0001FB2A                            
0001FB2A                            ; ===========================================================================
0001FB2A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FB36 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FB3A                            ; ---------------------------------------------------------------------------
0001FB3A                            ; Subroutine to	load debug mode	numbers	patterns
0001FB3A                            ; ---------------------------------------------------------------------------
0001FB3A                            
0001FB3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB3A                            
0001FB3A                            
0001FB3A                            HudDb_XY:
0001FB44 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FB48 4841                       		swap	d1
0001FB4A 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FB4E 6100                       		bsr.s	HudDb_XY2
0001FB50 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FB54 4841                       		swap	d1
0001FB56 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FB5A                            ; End of function HudDb_XY
0001FB5A                            
0001FB5A                            
0001FB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB5A                            
0001FB5A                            
0001FB5A                            HudDb_XY2:
0001FB5A 7C07                       		moveq	#7,d6
0001FB5C 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FB62                            
0001FB62                            HudDb_XYLoop:
0001FB62 E959                       		rol.w	#4,d1
0001FB64 3401                       		move.w	d1,d2
0001FB66 0242 000F                  		andi.w	#$F,d2
0001FB6A 0C42 000A                  		cmpi.w	#$A,d2
0001FB6E 6500                       		bcs.s	loc_1C8B2
0001FB70 5E42                       		addq.w	#7,d2
0001FB72                            
0001FB72                            loc_1C8B2:
0001FB72 EB4A                       		lsl.w	#5,d2
0001FB74 47F1 2000                  		lea	(a1,d2.w),a3
0001FB78 2C9B                       		move.l	(a3)+,(a6)
0001FB7A 2C9B                       		move.l	(a3)+,(a6)
0001FB7C 2C9B                       		move.l	(a3)+,(a6)
0001FB7E 2C9B                       		move.l	(a3)+,(a6)
0001FB80 2C9B                       		move.l	(a3)+,(a6)
0001FB82 2C9B                       		move.l	(a3)+,(a6)
0001FB84 2C9B                       		move.l	(a3)+,(a6)
0001FB86 2C9B                       		move.l	(a3)+,(a6)
0001FB88 4841                       		swap	d1
0001FB8A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FB8E                            
0001FB8E 4E75                       		rts	
0001FB90                            ; End of function HudDb_XY2
0001FB90                            
0001FB90                            ; ---------------------------------------------------------------------------
0001FB90                            ; Subroutine to	load rings numbers patterns
0001FB90                            ; ---------------------------------------------------------------------------
0001FB90                            
0001FB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB90                            
0001FB90                            
0001FB90                            Hud_Rings:
0001FB90 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FB96 7C02                       		moveq	#2,d6
0001FB98 6000                       		bra.s	Hud_LoadArt
0001FB9A                            ; End of function Hud_Rings
0001FB9A                            
0001FB9A                            ; ---------------------------------------------------------------------------
0001FB9A                            ; Subroutine to	load score numbers patterns
0001FB9A                            ; ---------------------------------------------------------------------------
0001FB9A                            
0001FB9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB9A                            
0001FB9A                            
0001FB9A                            Hud_Score:
0001FB9A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FBA0 7C05                       		moveq	#5,d6
0001FBA2                            
0001FBA2                            Hud_LoadArt:
0001FBA2 7800                       		moveq	#0,d4
0001FBA4 43FA 0000                  		lea	Art_Hud(pc),a1
0001FBA8                            
0001FBA8                            Hud_ScoreLoop:
0001FBA8 7400                       		moveq	#0,d2
0001FBAA 261A                       		move.l	(a2)+,d3
0001FBAC                            
0001FBAC                            loc_1C8EC:
0001FBAC 9283                       		sub.l	d3,d1
0001FBAE 6500                       		bcs.s	loc_1C8F4
0001FBB0 5242                       		addq.w	#1,d2
0001FBB2 60F8                       		bra.s	loc_1C8EC
0001FBB4                            ; ===========================================================================
0001FBB4                            
0001FBB4                            loc_1C8F4:
0001FBB4 D283                       		add.l	d3,d1
0001FBB6 4A42                       		tst.w	d2
0001FBB8 6700                       		beq.s	loc_1C8FE
0001FBBA 383C 0001                  		move.w	#1,d4
0001FBBE                            
0001FBBE                            loc_1C8FE:
0001FBBE 4A44                       		tst.w	d4
0001FBC0 6700                       		beq.s	loc_1C92C
0001FBC2 ED4A                       		lsl.w	#6,d2
0001FBC4 2D40 0004                  		move.l	d0,4(a6)
0001FBC8 47F1 2000                  		lea	(a1,d2.w),a3
0001FBCC 2C9B                       		move.l	(a3)+,(a6)
0001FBCE 2C9B                       		move.l	(a3)+,(a6)
0001FBD0 2C9B                       		move.l	(a3)+,(a6)
0001FBD2 2C9B                       		move.l	(a3)+,(a6)
0001FBD4 2C9B                       		move.l	(a3)+,(a6)
0001FBD6 2C9B                       		move.l	(a3)+,(a6)
0001FBD8 2C9B                       		move.l	(a3)+,(a6)
0001FBDA 2C9B                       		move.l	(a3)+,(a6)
0001FBDC 2C9B                       		move.l	(a3)+,(a6)
0001FBDE 2C9B                       		move.l	(a3)+,(a6)
0001FBE0 2C9B                       		move.l	(a3)+,(a6)
0001FBE2 2C9B                       		move.l	(a3)+,(a6)
0001FBE4 2C9B                       		move.l	(a3)+,(a6)
0001FBE6 2C9B                       		move.l	(a3)+,(a6)
0001FBE8 2C9B                       		move.l	(a3)+,(a6)
0001FBEA 2C9B                       		move.l	(a3)+,(a6)
0001FBEC                            
0001FBEC                            loc_1C92C:
0001FBEC 0680 0040 0000             		addi.l	#$400000,d0
0001FBF2 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FBF6                            
0001FBF6 4E75                       		rts	
0001FBF8                            
0001FBF8                            ; End of function Hud_Score
0001FBF8                            ; End of function Hud_Score
0001FBF8                            
0001FBF8                            ; ---------------------------------------------------------------------------
0001FBF8                            ; Subroutine to	load countdown numbers on the continue screen
0001FBF8                            ; ---------------------------------------------------------------------------
0001FBF8                            
0001FBF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBF8                            
0001FBF8                            
0001FBF8                            ContScrCounter:
0001FC02 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FC08 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FC0E 7C01                       		moveq	#1,d6
0001FC10 7800                       		moveq	#0,d4
0001FC12 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FC16                            
0001FC16                            ContScr_Loop:
0001FC16 7400                       		moveq	#0,d2
0001FC18 261A                       		move.l	(a2)+,d3
0001FC1A                            
0001FC1A                            loc_1C95A:
0001FC1A 9283                       		sub.l	d3,d1
0001FC1C 6500                       		blo.s	loc_1C962
0001FC1E 5242                       		addq.w	#1,d2
0001FC20 60F8                       		bra.s	loc_1C95A
0001FC22                            ; ===========================================================================
0001FC22                            
0001FC22                            loc_1C962:
0001FC22 D283                       		add.l	d3,d1
0001FC24 ED4A                       		lsl.w	#6,d2
0001FC26 47F1 2000                  		lea	(a1,d2.w),a3
0001FC2A 2C9B                       		move.l	(a3)+,(a6)
0001FC2C 2C9B                       		move.l	(a3)+,(a6)
0001FC2E 2C9B                       		move.l	(a3)+,(a6)
0001FC30 2C9B                       		move.l	(a3)+,(a6)
0001FC32 2C9B                       		move.l	(a3)+,(a6)
0001FC34 2C9B                       		move.l	(a3)+,(a6)
0001FC36 2C9B                       		move.l	(a3)+,(a6)
0001FC38 2C9B                       		move.l	(a3)+,(a6)
0001FC3A 2C9B                       		move.l	(a3)+,(a6)
0001FC3C 2C9B                       		move.l	(a3)+,(a6)
0001FC3E 2C9B                       		move.l	(a3)+,(a6)
0001FC40 2C9B                       		move.l	(a3)+,(a6)
0001FC42 2C9B                       		move.l	(a3)+,(a6)
0001FC44 2C9B                       		move.l	(a3)+,(a6)
0001FC46 2C9B                       		move.l	(a3)+,(a6)
0001FC48 2C9B                       		move.l	(a3)+,(a6)
0001FC4A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FC4E                            
0001FC4E 4E75                       		rts	
0001FC50                            ; End of function ContScrCounter
0001FC50                            
0001FC50                            ; ===========================================================================
0001FC50                            
0001FC50                            		include	"_inc\HUD (part 2).asm"
0001FC50                            ; ---------------------------------------------------------------------------
0001FC50                            ; HUD counter sizes
0001FC50                            ; ---------------------------------------------------------------------------
0001FC50 0001 86A0                  Hud_100000:	dc.l 100000
0001FC54 0000 2710                  Hud_10000:	dc.l 10000
0001FC58 0000 03E8                  Hud_1000:	dc.l 1000
0001FC5C 0000 0064                  Hud_100:	dc.l 100
0001FC60 0000 000A                  Hud_10:		dc.l 10
0001FC64 0000 0001                  Hud_1:		dc.l 1
0001FC68                            
0001FC68                            ; ---------------------------------------------------------------------------
0001FC68                            ; Subroutine to	load time numbers patterns
0001FC68                            ; ---------------------------------------------------------------------------
0001FC68                            
0001FC68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC68                            
0001FC68                            
0001FC68                            Hud_Mins:
0001FC68 45F9 0001 FC64             		lea	(Hud_1).l,a2
0001FC6E 7C00                       		moveq	#0,d6
0001FC70 6000                       		bra.s	loc_1C9BA
0001FC72                            ; End of function Hud_Mins
0001FC72                            
0001FC72                            
0001FC72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC72                            
0001FC72                            
0001FC72                            Hud_Secs:
0001FC72 45F9 0001 FC60             		lea	(Hud_10).l,a2
0001FC78 7C01                       		moveq	#1,d6
0001FC7A                            
0001FC7A                            loc_1C9BA:
0001FC7A 7800                       		moveq	#0,d4
0001FC7C 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC80                            
0001FC80                            Hud_TimeLoop:
0001FC80 7400                       		moveq	#0,d2
0001FC82 261A                       		move.l	(a2)+,d3
0001FC84                            
0001FC84                            loc_1C9C4:
0001FC84 9283                       		sub.l	d3,d1
0001FC86 6500                       		bcs.s	loc_1C9CC
0001FC88 5242                       		addq.w	#1,d2
0001FC8A 60F8                       		bra.s	loc_1C9C4
0001FC8C                            ; ===========================================================================
0001FC8C                            
0001FC8C                            loc_1C9CC:
0001FC8C D283                       		add.l	d3,d1
0001FC8E 4A42                       		tst.w	d2
0001FC90 6700                       		beq.s	loc_1C9D6
0001FC92 383C 0001                  		move.w	#1,d4
0001FC96                            
0001FC96                            loc_1C9D6:
0001FC96 ED4A                       		lsl.w	#6,d2
0001FC98 2D40 0004                  		move.l	d0,4(a6)
0001FC9C 47F1 2000                  		lea	(a1,d2.w),a3
0001FCA0 2C9B                       		move.l	(a3)+,(a6)
0001FCA2 2C9B                       		move.l	(a3)+,(a6)
0001FCA4 2C9B                       		move.l	(a3)+,(a6)
0001FCA6 2C9B                       		move.l	(a3)+,(a6)
0001FCA8 2C9B                       		move.l	(a3)+,(a6)
0001FCAA 2C9B                       		move.l	(a3)+,(a6)
0001FCAC 2C9B                       		move.l	(a3)+,(a6)
0001FCAE 2C9B                       		move.l	(a3)+,(a6)
0001FCB0 2C9B                       		move.l	(a3)+,(a6)
0001FCB2 2C9B                       		move.l	(a3)+,(a6)
0001FCB4 2C9B                       		move.l	(a3)+,(a6)
0001FCB6 2C9B                       		move.l	(a3)+,(a6)
0001FCB8 2C9B                       		move.l	(a3)+,(a6)
0001FCBA 2C9B                       		move.l	(a3)+,(a6)
0001FCBC 2C9B                       		move.l	(a3)+,(a6)
0001FCBE 2C9B                       		move.l	(a3)+,(a6)
0001FCC0 0680 0040 0000             		addi.l	#$400000,d0
0001FCC6 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FCCA                            
0001FCCA 4E75                       		rts	
0001FCCC                            ; End of function Hud_Secs
0001FCCC                            
0001FCCC                            ; ---------------------------------------------------------------------------
0001FCCC                            ; Subroutine to	load time/ring bonus numbers patterns
0001FCCC                            ; ---------------------------------------------------------------------------
0001FCCC                            
0001FCCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCCC                            
0001FCCC                            
0001FCCC                            Hud_TimeRingBonus:
0001FCCC 45F9 0001 FC58             		lea	(Hud_1000).l,a2
0001FCD2 7C03                       		moveq	#3,d6
0001FCD4 7800                       		moveq	#0,d4
0001FCD6 43FA 0000                  		lea	Art_Hud(pc),a1
0001FCDA                            
0001FCDA                            Hud_BonusLoop:
0001FCDA 7400                       		moveq	#0,d2
0001FCDC 261A                       		move.l	(a2)+,d3
0001FCDE                            
0001FCDE                            loc_1CA1E:
0001FCDE 9283                       		sub.l	d3,d1
0001FCE0 6500                       		bcs.s	loc_1CA26
0001FCE2 5242                       		addq.w	#1,d2
0001FCE4 60F8                       		bra.s	loc_1CA1E
0001FCE6                            ; ===========================================================================
0001FCE6                            
0001FCE6                            loc_1CA26:
0001FCE6 D283                       		add.l	d3,d1
0001FCE8 4A42                       		tst.w	d2
0001FCEA 6700                       		beq.s	loc_1CA30
0001FCEC 383C 0001                  		move.w	#1,d4
0001FCF0                            
0001FCF0                            loc_1CA30:
0001FCF0 4A44                       		tst.w	d4
0001FCF2 6700                       		beq.s	Hud_ClrBonus
0001FCF4 ED4A                       		lsl.w	#6,d2
0001FCF6 47F1 2000                  		lea	(a1,d2.w),a3
0001FCFA 2C9B                       		move.l	(a3)+,(a6)
0001FCFC 2C9B                       		move.l	(a3)+,(a6)
0001FCFE 2C9B                       		move.l	(a3)+,(a6)
0001FD00 2C9B                       		move.l	(a3)+,(a6)
0001FD02 2C9B                       		move.l	(a3)+,(a6)
0001FD04 2C9B                       		move.l	(a3)+,(a6)
0001FD06 2C9B                       		move.l	(a3)+,(a6)
0001FD08 2C9B                       		move.l	(a3)+,(a6)
0001FD0A 2C9B                       		move.l	(a3)+,(a6)
0001FD0C 2C9B                       		move.l	(a3)+,(a6)
0001FD0E 2C9B                       		move.l	(a3)+,(a6)
0001FD10 2C9B                       		move.l	(a3)+,(a6)
0001FD12 2C9B                       		move.l	(a3)+,(a6)
0001FD14 2C9B                       		move.l	(a3)+,(a6)
0001FD16 2C9B                       		move.l	(a3)+,(a6)
0001FD18 2C9B                       		move.l	(a3)+,(a6)
0001FD1A                            
0001FD1A                            loc_1CA5A:
0001FD1A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FD1E                            
0001FD1E 4E75                       		rts	
0001FD20                            ; ===========================================================================
0001FD20                            
0001FD20                            Hud_ClrBonus:
0001FD20 7A0F                       		moveq	#$F,d5
0001FD22                            
0001FD22                            Hud_ClrBonusLoop:
0001FD22 2CBC 0000 0000             		move.l	#0,(a6)
0001FD28 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FD2C                            
0001FD2C 60EC                       		bra.s	loc_1CA5A
0001FD2E                            ; End of function Hud_TimeRingBonus
0001FD2E                            
0001FD2E                            ; ---------------------------------------------------------------------------
0001FD2E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FD2E                            ; ---------------------------------------------------------------------------
0001FD2E                            
0001FD2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD2E                            
0001FD2E                            
0001FD2E                            Hud_Lives:
0001FD2E 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FD34 7200                       		moveq	#0,d1
0001FD36 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FD3A 45F9 0001 FC60             		lea	(Hud_10).l,a2
0001FD40 7C01                       		moveq	#1,d6
0001FD42 7800                       		moveq	#0,d4
0001FD44 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FD48                            
0001FD48                            Hud_LivesLoop:
0001FD48 2D40 0004                  		move.l	d0,4(a6)
0001FD4C 7400                       		moveq	#0,d2
0001FD4E 261A                       		move.l	(a2)+,d3
0001FD50                            
0001FD50                            loc_1CA90:
0001FD50 9283                       		sub.l	d3,d1
0001FD52 6500                       		bcs.s	loc_1CA98
0001FD54 5242                       		addq.w	#1,d2
0001FD56 60F8                       		bra.s	loc_1CA90
0001FD58                            ; ===========================================================================
0001FD58                            
0001FD58                            loc_1CA98:
0001FD58 D283                       		add.l	d3,d1
0001FD5A 4A42                       		tst.w	d2
0001FD5C 6700                       		beq.s	loc_1CAA2
0001FD5E 383C 0001                  		move.w	#1,d4
0001FD62                            
0001FD62                            loc_1CAA2:
0001FD62 4A44                       		tst.w	d4
0001FD64 6700                       		beq.s	Hud_ClrLives
0001FD66                            
0001FD66                            loc_1CAA6:
0001FD66 EB4A                       		lsl.w	#5,d2
0001FD68 47F1 2000                  		lea	(a1,d2.w),a3
0001FD6C 2C9B                       		move.l	(a3)+,(a6)
0001FD6E 2C9B                       		move.l	(a3)+,(a6)
0001FD70 2C9B                       		move.l	(a3)+,(a6)
0001FD72 2C9B                       		move.l	(a3)+,(a6)
0001FD74 2C9B                       		move.l	(a3)+,(a6)
0001FD76 2C9B                       		move.l	(a3)+,(a6)
0001FD78 2C9B                       		move.l	(a3)+,(a6)
0001FD7A 2C9B                       		move.l	(a3)+,(a6)
0001FD7C                            
0001FD7C                            loc_1CABC:
0001FD7C 0680 0040 0000             		addi.l	#$400000,d0
0001FD82 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FD86                            
0001FD86 4E75                       		rts	
0001FD88                            ; ===========================================================================
0001FD88                            
0001FD88                            Hud_ClrLives:
0001FD88 4A46                       		tst.w	d6
0001FD8A 67DA                       		beq.s	loc_1CAA6
0001FD8C 7A07                       		moveq	#7,d5
0001FD8E                            
0001FD8E                            Hud_ClrLivesLoop:
0001FD8E 2CBC 0000 0000             		move.l	#0,(a6)
0001FD94 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FD98 60E2                       		bra.s	loc_1CABC
0001FD9A                            ; End of function Hud_Lives
0001FD9A                            ; End of function Hud_Lives
0001FD9A                            
0001FD9A                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
0002009A                            		even
0002009A                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
000201DA                            		even
000201DA                            
000201DA                            		include	"_incObj\DebugMode.asm"
000201DA                            ; ---------------------------------------------------------------------------
000201DA                            ; When debug mode is currently in use
000201DA                            ; ---------------------------------------------------------------------------
000201DA                            
000201DA                            DebugMode:
000201DA 7000                       		moveq	#0,d0
000201DC 1038 FE08                  		move.b	(v_debuguse).w,d0
000201E0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
000201E4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
000201E8                            ; ===========================================================================
000201E8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
000201EA 0000                       		dc.w Debug_Action-Debug_Index
000201EC                            ; ===========================================================================
000201EC                            
000201EC                            Debug_Main:	; Routine 0
000201EC 5438 FE08                  		addq.b	#2,(v_debuguse).w
000201F0 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
000201F6 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
000201FC 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020202 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020208 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0002020E 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020214 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0002021A 117C 0000 001A             		move.b	#0,obFrame(a0)
00020220 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020226 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0002022C 6600                       		bne.s	@islevel	; if not, branch
0002022E                            
0002022E 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00020234 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
0002023A 7006                       		moveq	#6,d0		; use 6th debug	item list
0002023C 6000                       		bra.s	@selectlist
0002023E                            ; ===========================================================================
0002023E                            
0002023E                            @islevel:
0002023E 7000                       		moveq	#0,d0
00020240 1038 FE10                  		move.b	(v_zone).w,d0
00020244                            
00020244                            @selectlist:
00020244 45F9 0000 0000             		lea	(DebugList).l,a2
0002024A D040                       		add.w	d0,d0
0002024C D4F2 0000                  		adda.w	(a2,d0.w),a2
00020250 3C1A                       		move.w	(a2)+,d6
00020252 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020256 6200                       		bhi.s	@noreset	; if not, branch
00020258 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
0002025E                            
0002025E                            	@noreset:
0002025E 6100 0000                  		bsr.w	Debug_ShowItem
00020262 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020268 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
0002026E                            
0002026E                            Debug_Action:	; Routine 2
0002026E 7006                       		moveq	#6,d0
00020270 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020276 6700                       		beq.s	@isntlevel
00020278                            
00020278 7000                       		moveq	#0,d0
0002027A 1038 FE10                  		move.b	(v_zone).w,d0
0002027E                            
0002027E                            	@isntlevel:
0002027E 45F9 0000 0000             		lea	(DebugList).l,a2
00020284 D040                       		add.w	d0,d0
00020286 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002028A 3C1A                       		move.w	(a2)+,d6
0002028C 6100 0000                  		bsr.w	Debug_Control
00020290 4EF9 0000 F6FE             		jmp	(DisplaySprite).l
00020296                            
00020296                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020296                            
00020296                            
00020296                            Debug_Control:
00020296 7800                       		moveq	#0,d4
00020298 323C 0001                  		move.w	#1,d1
0002029C 1838 F605                  		move.b	(v_jpadpress1).w,d4
000202A0 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
000202A4 6600                       		bne.s	@dirpressed	; if yes, branch
000202A6                            
000202A6 1038 F604                  		move.b	(v_jpadhold1).w,d0
000202AA 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
000202AE 6600                       		bne.s	@dirheld	; if yes, branch
000202B0                            
000202B0 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000202B6 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000202BC 6000 0000                  		bra.w	Debug_ChgItem
000202C0                            ; ===========================================================================
000202C0                            
000202C0                            @dirheld:
000202C0 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000202C4 6600                       		bne.s	loc_1D01C
000202C6 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000202CC 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000202D0 6600                       		bne.s	@dirpressed
000202D2 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000202D8                            
000202D8                            @dirpressed:
000202D8 1838 F604                  		move.b	(v_jpadhold1).w,d4
000202DC                            
000202DC                            loc_1D01C:
000202DC 7200                       		moveq	#0,d1
000202DE 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000202E2 5241                       		addq.w	#1,d1
000202E4 4841                       		swap	d1
000202E6 E881                       		asr.l	#4,d1
000202E8 2428 000C                  		move.l	obY(a0),d2
000202EC 2628 0008                  		move.l	obX(a0),d3
000202F0 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000202F4 6700                       		beq.s	loc_1D03C	; if not, branch
000202F6 9481                       		sub.l	d1,d2
000202F8 6400                       		bcc.s	loc_1D03C
000202FA 7400                       		moveq	#0,d2
000202FC                            
000202FC                            loc_1D03C:
000202FC 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020300 6700                       		beq.s	loc_1D052	; if not, branch
00020302 D481                       		add.l	d1,d2
00020304 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002030A 6500                       		bcs.s	loc_1D052
0002030C 243C 07FF 0000             		move.l	#$7FF0000,d2
00020312                            
00020312                            loc_1D052:
00020312 0804 0002                  		btst	#bitL,d4
00020316 6700                       		beq.s	loc_1D05E
00020318 9681                       		sub.l	d1,d3
0002031A 6400                       		bcc.s	loc_1D05E
0002031C 7600                       		moveq	#0,d3
0002031E                            
0002031E                            loc_1D05E:
0002031E 0804 0003                  		btst	#bitR,d4
00020322 6700                       		beq.s	loc_1D066
00020324 D681                       		add.l	d1,d3
00020326                            
00020326                            loc_1D066:
00020326 2142 000C                  		move.l	d2,obY(a0)
0002032A 2143 0008                  		move.l	d3,obX(a0)
0002032E                            
0002032E                            Debug_ChgItem:
0002032E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00020334 6700                       		beq.s	@createitem	; if not, branch
00020336 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002033C 6700                       		beq.s	@nextitem	; if not, branch
0002033E 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00020342 6400                       		bcc.s	@display
00020344 DD38 FE06                  		add.b	d6,(v_debugitem).w
00020348 6000                       		bra.s	@display
0002034A                            ; ===========================================================================
0002034A                            
0002034A                            @nextitem:
0002034A 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00020350 6700                       		beq.s	@createitem	; if not, branch
00020352 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020356 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
0002035A 6200                       		bhi.s	@display
0002035C 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00020362                            
00020362                            	@display:
00020362 6000 0000                  		bra.w	Debug_ShowItem
00020366                            ; ===========================================================================
00020366                            
00020366                            @createitem:
00020366 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002036C 6700                       		beq.s	@backtonormal	; if not, branch
0002036E 4EB9 0000 FB8A             		jsr	(FindFreeObj).l
00020374 6600                       		bne.s	@backtonormal
00020376 3368 0008 0008             		move.w	obX(a0),obX(a1)
0002037C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020382 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020386 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002038C 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020392 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020398 7000                       		moveq	#0,d0
0002039A 1038 FE06                  		move.b	(v_debugitem).w,d0
0002039E E748                       		lsl.w	#3,d0
000203A0 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
000203A6 4E75                       		rts	
000203A8                            ; ===========================================================================
000203A8                            
000203A8                            @backtonormal:
000203A8 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
000203AE 6700                       		beq.s	@stayindebug	; if not, branch
000203B0 7000                       		moveq	#0,d0
000203B2 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
000203B6 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000203BE 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000203C4 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000203C8 3140 000A                  		move.w	d0,obX+2(a0)
000203CC 3140 000E                  		move.w	d0,obY+2(a0)
000203D0 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000203D6 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000203DC 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000203E2 6600                       		bne.s	@stayindebug	; if not, branch
000203E4                            
000203E4 4278 F780                  		clr.w	(v_ssangle).w
000203E8 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000203EE 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000203F6 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000203FC 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020402 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020408 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0002040E                            
0002040E                            	@stayindebug:
0002040E 4E75                       		rts	
00020410                            ; End of function Debug_Control
00020410                            
00020410                            
00020410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020410                            
00020410                            
00020410                            Debug_ShowItem:
00020410 7000                       		moveq	#0,d0
00020412 1038 FE06                  		move.b	(v_debugitem).w,d0
00020416 E748                       		lsl.w	#3,d0
00020418 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
0002041E 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00020424 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
0002042A 4E75                       		rts	
0002042C                            ; End of function Debug_ShowItem
0002042C                            ; End of function Debug_ShowItem
0002042C                            		include	"_inc\DebugList.asm"
0002042C                            ; ---------------------------------------------------------------------------
0002042C                            ; Debug	mode item lists
0002042C                            ; ---------------------------------------------------------------------------
0002042C                            DebugList:
0002042C 0000                       	dc.w @GHZ-DebugList
0002042E 0000                       	dc.w @LZ-DebugList
00020430 0000                       	dc.w @MZ-DebugList
00020432 0000                       	dc.w @SLZ-DebugList
00020434 0000                       	dc.w @SYZ-DebugList
00020436 0000                       	dc.w @SBZ-DebugList
00020438 0000                       	dc.w @Ending-DebugList
0002043A                            
0002043A                            dbug:	macro map,object,subtype,frame,vram
0002043A                            	dc.l map+(object<<24)
0002043A                            	dc.b subtype,frame
0002043A                            	dc.w vram
0002043A                            	endm
0002043A                            
0002043A                            @GHZ:
0002043A 0000                       	dc.w (@GHZend-@GHZ-2)/8
0002043C                            
0002043C                            ;		mappings	object		subtype	frame	VRAM setting
0002043C 2500 BD5A 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00020444 2600 C520 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002044C 1F00 B13A 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020454 2200 B5C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002045C 2B00 CC5C 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00020464 3600 F0A8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002046C 1800 9AF4 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020474 3B00 F1CE 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0002047C 4001 1766 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020484 4100 FE1C 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002048C 4201 0042 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020494 4401 0350 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0002049C 7901 9F94 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000204A4 4B00 BDAA 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
000204AC 7D01 A156 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
000204B4                            	@GHZend:
000204B4                            
000204B4                            @LZ:
000204B4 0000                       	dc.w (@LZend-@LZ-2)/8
000204B6                            
000204B6                            ;		mappings	object		subtype	frame	VRAM setting
000204B6 2500 BD5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000204BE 2600 C520 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000204C6 4100 FE1C 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000204CE 2C00 CD02 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000204D6 2D00 CEEE 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000204DE 1601 411A 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000204E6 1601 411A 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000204EE 3300 E36C 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000204F6 3200 DF2C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000204FE 3600 F0A8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020506 5201 21F0 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0002050E 6101 4342 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
00020516 6101 4342 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
0002051E 6101 4342 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
00020526 6201 4496 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
0002052E 6101 4342 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
00020536 6101 4342 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
0002053E 6301 47F8 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00020546 6001 4064 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0002054E 6401 4B46 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00020556 6501 4CCE 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0002055E 6501 4CCE 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00020566 0B01 34B0 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
0002056E 0C01 3580 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020576 7901 9F94 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002057E                            	@LZend:
0002057E                            
0002057E                            @MZ:
0002057E 0000                       	dc.w (@MZend-@MZ-2)/8
00020580                            
00020580                            ;		mappings	object		subtype	frame	VRAM setting
00020580 2500 BD5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020588 2600 C520 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020590 2200 B5C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020598 3600 F0A8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000205A0 4100 FE1C 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000205A8 1300 D3FC 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
000205B0 4601 0A00 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
000205B8 6E01 9030 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000205C0 6A01 89E8 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000205C8 3300 E36C 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000205D0 1E00 A852 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000205D8 5101 1F24 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000205E0 5201 219A 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000205E8 5300 A136 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000205F0 5401 12CC 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000205F8 5501 238E 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020600 7801 9C00 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020608 7901 9F94 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020610                            	@MZend:
00020610                            
00020610                            @SLZ:
00020610 0000                       	dc.w (@SLZend-@SLZ-2)/8
00020612                            
00020612                            ;		mappings	object		subtype	frame	VRAM setting
00020612 2500 BD5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002061A 2600 C520 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020622 5901 2ED8 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
0002062A 5300 A136 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00020632 1800 9B52 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
0002063A 5A01 3012 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00020642 5B01 31CA 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
0002064A 5D01 379E 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00020652 5E01 3B30 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
0002065A 4100 FE1C 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020662 1300 D3FC 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
0002066A 1C00 A254 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020672 5F01 3DAE 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002067A 6001 4064 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020682 7901 9F94 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002068A                            	@SLZend:
0002068A                            
0002068A                            @SYZ:
0002068A 0000                       	dc.w (@SYZend-@SYZ-2)/8
0002068C                            
0002068C                            ;		mappings	object		subtype	frame	VRAM setting
0002068C 2500 BD5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020694 2600 C520 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002069C 3600 F0A8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206A4 4100 FE1C 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000206AC 4301 02A2 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
000206B4 1201 0A7E 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
000206BC 4701 0C22 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
000206C4 1F00 B13A 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000206CC 2200 B5C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206D4 5001 19F6 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
000206DC 1800 9B40 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000206E4 5601 2898 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000206EC 3200 DF2C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000206F4 7801 9C00 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000206FC 7901 9F94 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020704                            	@SYZend:
00020704                            
00020704                            @SBZ:
00020704 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020706                            
00020706                            ;		mappings	object		subtype	frame	VRAM setting
00020706 2500 BD5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002070E 2600 C520 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020716 5F01 3DAE 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002071E 6001 4064 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020726 7801 9C00 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
0002072E 1501 2C34 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020736 6701 84D6 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
0002073E 5201 219A 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020746 3200 DF2C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002074E 6901 8730 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020756 6901 878A 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
0002075E 6A01 89E8 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020766 5300 A136 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
0002076E 5201 219A 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020776 6B01 8DB8 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
0002077E 2A00 A3E4 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020786 6B01 8DB8 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
0002078E 6A01 89E8 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020796 6B01 8DB8 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
0002079E 6A01 89E8 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
000207A6 6B01 8DB8 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
000207AE 6C01 8F7A 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
000207B6 6D01 06F2 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
000207BE 6D01 06F2 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
000207C6 6E01 9030 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000207CE 7001 9476 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
000207D6 7101 3644 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
000207DE 1E00 A852 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000207E6 7901 9F94 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207EE                            	@SBZend:
000207EE                            
000207EE                            @Ending:
000207EE 0000                       	dc.w (@Endingend-@Ending-2)/8
000207F0                            
000207F0                            ;		mappings	object		subtype	frame	VRAM setting
000207F0 2500 BD5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207F8 2500 BD5A 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020800                            	@Endingend:
00020800                            
00020800                            	even
00020800                            	even
00020800                            		include	"_inc\LevelHeaders.asm"
00020800                            ; ---------------------------------------------------------------------------
00020800                            ; Level Headers
00020800                            ; ---------------------------------------------------------------------------
00020800                            
00020800                            LevelHeaders:
00020800                            
00020800                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020800                            	dc.l (plc1<<24)+lvlgfx
00020800                            	dc.l (plc2<<24)+sixteen
00020800                            	dc.l twofivesix
00020800                            	dc.b 0, music, pal, pal
00020800                            	endm
00020800                            
00020800                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020800                            ; music (unused), palette (unused), palette
00020800                            
00020800                            ;		1st PLC				2nd PLC				256x256 data			palette
00020800                            ;				level gfx*			16x16 data			music*
00020800                            
00020800 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020810 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020820 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020830 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020840 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020850 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020860 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020870                            	even
00020870                            
00020870                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020870                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020870                            		include	"_inc\Pattern Load Cues.asm"
00020870                            ; ---------------------------------------------------------------------------
00020870                            ; Pattern load cues
00020870                            ; ---------------------------------------------------------------------------
00020870                            ArtLoadCues:
00020870                            
00020870 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020872 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020874 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020876 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020878                            PLC_Levels:
00020878 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0002087A 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
0002087C 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
0002087E 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020880 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020882 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020884 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020886 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020888 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0002088A 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
0002088C 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
0002088E 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020890 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020892 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020894 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020896 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020898 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
0002089A                            PLC_Animals:
0002089A 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
0002089C 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
0002089E 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
000208A0 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
000208A2 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
000208A4 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
000208A6 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
000208A8 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
000208AA 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
000208AC 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
000208AE 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
000208B0 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
000208B2                            
000208B2                            plcm:	macro gfx,vram
000208B2                            	dc.l gfx
000208B2                            	dc.w vram
000208B2                            	endm
000208B2                            
000208B2                            ; ---------------------------------------------------------------------------
000208B2                            ; Pattern load cues - standard block 1
000208B2                            ; ---------------------------------------------------------------------------
000208B2 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
000208B4 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
000208BA 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
000208C0 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
000208C6 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
000208CC 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
000208D2                            	PLC_Mainend:
000208D2                            ; ---------------------------------------------------------------------------
000208D2                            ; Pattern load cues - standard block 2
000208D2                            ; ---------------------------------------------------------------------------
000208D2 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
000208D4 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
000208DA                            	PLC_Main2end:
000208DA                            ; ---------------------------------------------------------------------------
000208DA                            ; Pattern load cues - explosion
000208DA                            ; ---------------------------------------------------------------------------
000208DA 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
000208DC 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000208E2                            	PLC_Explodeend:
000208E2                            ; ---------------------------------------------------------------------------
000208E2                            ; Pattern load cues - game/time	over
000208E2                            ; ---------------------------------------------------------------------------
000208E2 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000208E4 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000208EA                            	PLC_GameOverend:
000208EA                            ; ---------------------------------------------------------------------------
000208EA                            ; Pattern load cues - Green Hill
000208EA                            ; ---------------------------------------------------------------------------
000208EA 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000208EC 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000208F2 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000208F8 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000208FE 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020904 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
0002090A 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020910 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020916 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
0002091C 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020922 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020928 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0002092E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020934                            
00020934 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020936 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
0002093C 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020942 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020948 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
0002094E 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020954 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
0002095A                            	PLC_GHZ2end:
0002095A                            ; ---------------------------------------------------------------------------
0002095A                            ; Pattern load cues - Labyrinth
0002095A                            ; ---------------------------------------------------------------------------
0002095A 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
0002095C 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020962                            		;plcm	Nem_LzBlock1, $3C00	; block
00020962                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020962                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020962 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020968 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
0002096E 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020974 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
0002097A 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020980 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020986 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
0002098C 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020992                            
00020992 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020994 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
0002099A 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
000209A0 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
000209A6 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
000209AC 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
000209B2 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
000209B8 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
000209BE 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000209C4 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
000209CA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000209D0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000209D6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000209DC                            	PLC_LZ2end:
000209DC                            ; ---------------------------------------------------------------------------
000209DC                            ; Pattern load cues - Marble
000209DC                            ; ---------------------------------------------------------------------------
000209DC 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
000209DE 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
000209E4 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
000209EA 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000209F0 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
000209F6 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000209FC 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020A02 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020A08 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020A0E 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020A14 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020A1A                            
00020A1A 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020A1C 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020A22 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020A28                            		;plcm	Nem_MzSwitch, $A260	; switch
00020A28 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A2E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A34 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A3A 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020A40 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020A46                            	PLC_MZ2end:
00020A46                            ; ---------------------------------------------------------------------------
00020A46                            ; Pattern load cues - Star Light
00020A46                            ; ---------------------------------------------------------------------------
00020A46 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020A48 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020A4E 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020A54 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020A5A 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020A60 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020A66 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020A6C 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020A72 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A78 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A7E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A84                            
00020A84 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020A86 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020A8C 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020A92 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020A98 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020A9E 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020AA4 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020AAA                            	PLC_SLZ2end:
00020AAA                            ; ---------------------------------------------------------------------------
00020AAA                            ; Pattern load cues - Spring Yard
00020AAA                            ; ---------------------------------------------------------------------------
00020AAA 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020AAC 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020AB2                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020AB2                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020AB2 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020AB8 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020ABE 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020AC4 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020ACA 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020AD0 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020AD6                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020AD6                            
00020AD6 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020AD8                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020AD8 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020ADE 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020AE4 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020AEA                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020AEA 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020AF0                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020AF0 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020AF6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020AFC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B02 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B08                            	PLC_SYZ2end:
00020B08                            ; ---------------------------------------------------------------------------
00020B08                            ; Pattern load cues - Scrap Brain
00020B08                            ; ---------------------------------------------------------------------------
00020B08 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020B0A 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020B10 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020B16                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020B16                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020B16                            		;plcm	Nem_Girder, $5E00	; girder
00020B16 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020B1C 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020B22                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020B22 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020B28 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020B2E 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020B34 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020B3A                            
00020B3A 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020B3C                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020B3C 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020B42 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020B48                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020B48 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020B4E 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020B54 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020B5A 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020B60 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020B66 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B6C 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B72 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B78                            	PLC_SBZ2end:
00020B78                            ; ---------------------------------------------------------------------------
00020B78                            ; Pattern load cues - title card
00020B78                            ; ---------------------------------------------------------------------------
00020B78 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020B7A 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020B80                            	PLC_TitleCardend:
00020B80                            ; ---------------------------------------------------------------------------
00020B80                            ; Pattern load cues - act 3 boss
00020B80                            ; ---------------------------------------------------------------------------
00020B80 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020B82 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020B88 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020B8E 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020B94 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020B9A 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020BA0 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020BA6                            	PLC_Bossend:
00020BA6                            ; ---------------------------------------------------------------------------
00020BA6                            ; Pattern load cues - act 1/2 signpost
00020BA6                            ; ---------------------------------------------------------------------------
00020BA6 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020BA8 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020BAE 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020BB4 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020BBA                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020BBA                            	PLC_Signpostend:
00020BBA                            ; ---------------------------------------------------------------------------
00020BBA                            ; Pattern load cues - beta special stage warp effect
00020BBA                            ; ---------------------------------------------------------------------------
00020BBA                            PLC_Warp:
00020BBA                            	PLC_Warpend:
00020BBA                            ; ---------------------------------------------------------------------------
00020BBA                            ; Pattern load cues - special stage
00020BBA                            ; ---------------------------------------------------------------------------
00020BBA 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020BBC 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020BC2 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020BC8 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020BCE 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020BD4 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020BDA 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020BE0 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020BE6 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020BEC 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020BF2 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020BF8 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020BFE 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020C04 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020C0A 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020C10                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020C10                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020C10                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020C10                            	PLC_SpeStageend:
00020C10                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020C10                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020C10                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020C10                            ; ---------------------------------------------------------------------------
00020C10                            ; Pattern load cues - GHZ animals
00020C10                            ; ---------------------------------------------------------------------------
00020C10 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020C12 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020C18 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020C1E                            	PLC_GHZAnimalsend:
00020C1E                            ; ---------------------------------------------------------------------------
00020C1E                            ; Pattern load cues - LZ animals
00020C1E                            ; ---------------------------------------------------------------------------
00020C1E 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020C20 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020C26 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020C2C                            	PLC_LZAnimalsend:
00020C2C                            ; ---------------------------------------------------------------------------
00020C2C                            ; Pattern load cues - MZ animals
00020C2C                            ; ---------------------------------------------------------------------------
00020C2C 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020C2E 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020C34 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020C3A                            	PLC_MZAnimalsend:
00020C3A                            ; ---------------------------------------------------------------------------
00020C3A                            ; Pattern load cues - SLZ animals
00020C3A                            ; ---------------------------------------------------------------------------
00020C3A 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020C3C 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020C42 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020C48                            	PLC_SLZAnimalsend:
00020C48                            ; ---------------------------------------------------------------------------
00020C48                            ; Pattern load cues - SYZ animals
00020C48                            ; ---------------------------------------------------------------------------
00020C48 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020C4A 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020C50 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020C56                            	PLC_SYZAnimalsend:
00020C56                            ; ---------------------------------------------------------------------------
00020C56                            ; Pattern load cues - SBZ animals
00020C56                            ; ---------------------------------------------------------------------------
00020C56 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020C58 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020C5E 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020C64                            	PLC_SBZAnimalsend:
00020C64                            ; ---------------------------------------------------------------------------
00020C64                            ; Pattern load cues - special stage results screen
00020C64                            ; ---------------------------------------------------------------------------
00020C64 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020C66 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020C6C 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020C72                            	PLC_SpeStResultend:
00020C72                            ; ---------------------------------------------------------------------------
00020C72                            ; Pattern load cues - ending sequence
00020C72                            ; ---------------------------------------------------------------------------
00020C72 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020C74 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020C7A 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020C80 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020C86                            		;plcm	Nem_EndFlower, $7400	; flowers
00020C86 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020C8C 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020C92 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020C98 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020C9E 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020CA4 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020CAA 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020CB0 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020CB6 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020CBC 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020CC2                            	PLC_Endingend:
00020CC2                            ; ---------------------------------------------------------------------------
00020CC2                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020CC2                            ; ---------------------------------------------------------------------------
00020CC2 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020CC4 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020CCA 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020CD0 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020CD6                            	PLC_TryAgainend:
00020CD6                            ; ---------------------------------------------------------------------------
00020CD6                            ; Pattern load cues - Eggman on SBZ 2
00020CD6                            ; ---------------------------------------------------------------------------
00020CD6 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020CD8 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020CDE 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020CE4 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020CEA                            	PLC_EggmanSBZ2end:
00020CEA                            ; ---------------------------------------------------------------------------
00020CEA                            ; Pattern load cues - final boss
00020CEA                            ; ---------------------------------------------------------------------------
00020CEA 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020CEC 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020CF2 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020CF8 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020CFE 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020D04 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D0A                            	PLC_FZBossend:
00020D0A                            ; ---------------------------------------------------------------------------
00020D0A                            ; Pattern load cues - Eggman
00020D0A                            ; ---------------------------------------------------------------------------
00020D0A 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020D0C 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020D12 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020D18 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020D1E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D24 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D2A 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D30                            	PLC_Eggend:
00020D30                            		even
00020D30                            ; ---------------------------------------------------------------------------
00020D30                            ; Pattern load cue IDs
00020D30                            ; ---------------------------------------------------------------------------
00020D30 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020D30 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020D30 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020D30 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020D30 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020D30 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020D30 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020D30 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020D30 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020D30 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020D30 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020D30 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020D30 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020D30 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020D30 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020D30 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020D30 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020D30 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020D30 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020D30 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020D30 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020D30 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020D30 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020D30 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020D30 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020D30 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020D30 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020D30 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020D30 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020D30 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020D30 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020D30 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020D30 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020D30 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020D30                            
00020E00                            			dcb.b	$300,$FF
00021100                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021570                            			even
00021570                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002166C                            			even
0002166C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002174C                            		even
0002174C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022BB8                            		even
00022BB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024652                            		even
00024652                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024686                            		even
00024686                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000248B6                            		even		
000248B6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024974                            		even
00024974                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00024E1C                            		even
00024E1C                            
00024E1C                            Map_Sonic:	include	"_maps\Sonic.asm"
00024E1C                            ; --------------------------------------------------------------------------------
00024E1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00024E1C                            ; --------------------------------------------------------------------------------
00024E1C                            
00024E1C                            SME_Lx_Kl:	
00024E1C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00024E20 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00024E24 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00024E28 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
00024E2C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00024E30 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00024E34 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00024E38 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
00024E3C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00024E40 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00024E44 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00024E48 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
00024E4C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00024E50 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00024E54 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00024E58 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
00024E5C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00024E60 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00024E64 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00024E68 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
00024E6C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00024E70 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00024E74 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00024E78 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
00024E7C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00024E80 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00024E84 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00024E88 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
00024E8C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00024E90 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00024E94 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00024E98 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
00024E9C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
00024EA0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
00024EA4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
00024EA8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
00024EAC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
00024EB0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
00024EB4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
00024EB8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
00024EBC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
00024EC0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
00024EC4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
00024EC8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
00024ECC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
00024ED0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
00024ED4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
00024ED8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
00024EDC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
00024EE0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
00024EE4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
00024EE8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
00024EEC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
00024EF0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
00024EF4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
00024EF8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
00024EFC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00024F00 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00024F04 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00024F08 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
00024F0C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00024F10 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00024F14 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00024F18 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
00024F1C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00024F20 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00024F24 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00024F28 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
00024F2C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00024F30 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00024F34 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00024F38 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
00024F3C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00024F40 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00024F44 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00024F48 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
00024F4C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00024F50 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00024F54 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00024F58 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
00024F5C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
00024F5E 00                         SME_Lx_Kl_142:	dc.b 0	
00024F5F 04                         SME_Lx_Kl_143:	dc.b 4	
00024F60 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F65 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00024F6A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00024F6F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024F74 09                         SME_Lx_Kl_158:	dc.b 9	
00024F75 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F7A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024F7F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024F84 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024F89 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024F8E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024F93 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00024F98 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00024F9D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00024FA2 0A                         SME_Lx_Kl_186:	dc.b $A	
00024FA3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024FA8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024FAD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024FB2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024FB7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024FBC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FC1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00024FC6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00024FCB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00024FD0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00024FD5 04                         SME_Lx_Kl_1B9:	dc.b 4	
00024FD6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00024FDB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FE0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00024FE5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024FEA 03                         SME_Lx_Kl_1CE:	dc.b 3	
00024FEB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FF0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FF5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024FFA 03                         SME_Lx_Kl_1DE:	dc.b 3	
00024FFB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025000 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025005 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002500A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002500B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025010 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025015 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002501A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002501F 02                         SME_Lx_Kl_203:	dc.b 2	
00025020 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025025 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002502A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002502B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025030 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025035 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002503A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002503B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025040 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025045 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002504A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002504B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025050 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025055 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002505A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002505B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025060 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025065 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002506A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002506F 03                         SME_Lx_Kl_253:	dc.b 3	
00025070 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025075 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002507A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002507F 07                         SME_Lx_Kl_263:	dc.b 7	
00025080 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025085 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002508A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002508F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025094 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025099 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002509E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000250A3 05                         SME_Lx_Kl_287:	dc.b 5	
000250A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000250A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000250AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000250B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000250B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000250BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000250BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000250C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000250C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000250C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000250CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000250D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000250D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000250D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000250DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000250E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000250E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000250ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000250EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000250F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000250F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000250F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000250FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025103 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025108 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025109 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002510E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025113 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025118 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002511D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025122 05                         SME_Lx_Kl_306:	dc.b 5	
00025123 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025128 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002512D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025132 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025137 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002513C 06                         SME_Lx_Kl_320:	dc.b 6	
0002513D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025142 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025147 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002514C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025151 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025156 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002515B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002515C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025161 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025166 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002516B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025170 03                         SME_Lx_Kl_354:	dc.b 3	
00025171 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025176 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002517B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025180 05                         SME_Lx_Kl_364:	dc.b 5	
00025181 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025186 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002518B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025190 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025195 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002519A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002519B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000251A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000251A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000251AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000251AF 03                         SME_Lx_Kl_393:	dc.b 3	
000251B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000251B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000251BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000251BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000251C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000251C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000251CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000251CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000251D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000251D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000251DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000251DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000251E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000251E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000251EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000251EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000251F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000251F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000251FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000251FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025204 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025205 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002520A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002520F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025214 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025219 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002521E 04                         SME_Lx_Kl_402:	dc.b 4	
0002521F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025224 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025229 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002522E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025233 02                         SME_Lx_Kl_417:	dc.b 2	
00025234 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025239 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002523E 03                         SME_Lx_Kl_422:	dc.b 3	
0002523F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025244 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025249 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002524E 03                         SME_Lx_Kl_432:	dc.b 3	
0002524F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025254 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025259 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002525E 06                         SME_Lx_Kl_442:	dc.b 6	
0002525F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025264 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025269 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002526E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025273 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025278 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002527D 06                         SME_Lx_Kl_461:	dc.b 6	
0002527E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025283 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025288 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002528D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025292 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025297 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002529C 04                         SME_Lx_Kl_480:	dc.b 4	
0002529D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000252A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000252A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000252AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000252B1 03                         SME_Lx_Kl_495:	dc.b 3	
000252B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000252B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000252BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000252C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000252C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000252C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000252CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000252D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000252D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000252DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000252DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000252E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000252E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000252EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000252F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000252F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000252F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000252FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025300 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025301 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025306 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002530B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025310 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025315 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002531A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002531B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025320 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025325 02                         SME_Lx_Kl_509:	dc.b 2	
00025326 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002532B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025330 02                         SME_Lx_Kl_514:	dc.b 2	
00025331 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025336 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002533B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002533C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025341 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025346 02                         SME_Lx_Kl_52A:	dc.b 2	
00025347 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002534C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025351 02                         SME_Lx_Kl_535:	dc.b 2	
00025352 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025357 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002535C 02                         SME_Lx_Kl_540:	dc.b 2	
0002535D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025362 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025367 02                         SME_Lx_Kl_54B:	dc.b 2	
00025368 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002536D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025372 04                         SME_Lx_Kl_556:	dc.b 4	
00025373 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025378 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002537D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025382 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025387 03                         SME_Lx_Kl_56B:	dc.b 3	
00025388 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002538D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025392 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025397 03                         SME_Lx_Kl_57B:	dc.b 3	
00025398 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002539D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000253A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000253B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000253CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000253DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000253ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000253F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000253FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025402 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025407 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025408 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002540D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025412 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025413 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025418 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002541D 02                         SME_Lx_Kl_601:	dc.b 2	
0002541E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025423 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025428 02                         SME_Lx_Kl_60C:	dc.b 2	
00025429 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002542E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025433 02                         SME_Lx_Kl_617:	dc.b 2	
00025434 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025439 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002543E 02                         SME_Lx_Kl_622:	dc.b 2	
0002543F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025444 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025449 02                         SME_Lx_Kl_62D:	dc.b 2	
0002544A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002544F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025454 04                         SME_Lx_Kl_638:	dc.b 4	
00025455 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002545A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002545F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025464 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025469 03                         SME_Lx_Kl_64D:	dc.b 3	
0002546A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002546F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025474 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025479 02                         SME_Lx_Kl_65D:	dc.b 2	
0002547A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002547F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025484 03                         SME_Lx_Kl_668:	dc.b 3	
00025485 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002548A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002548F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025494 04                         SME_Lx_Kl_678:	dc.b 4	
00025495 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002549A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002549F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000254A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000254A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000254AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000254AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000254B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000254BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000254BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000254C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000254C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000254CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000254CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000254D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000254E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000254F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000254FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000254FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025504 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025509 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002550E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025513 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025518 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002551D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025522 09                         SME_Lx_Kl_706:	dc.b 9	
00025523 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025528 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002552D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025532 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025537 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002553C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025541 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025546 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002554B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025550 03                         SME_Lx_Kl_734:	dc.b 3	
00025551 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025556 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002555B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025560 03                         SME_Lx_Kl_744:	dc.b 3	
00025561 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025566 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002556B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025570 03                         SME_Lx_Kl_754:	dc.b 3	
00025571 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025576 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002557B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025580 05                         SME_Lx_Kl_764:	dc.b 5	
00025581 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025586 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002558B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025590 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025595 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002559A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002559B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000255A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000255A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000255AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000255AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000255B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000255B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000255BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000255BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000255C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000255C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000255CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000255D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000255DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000255DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000255E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000255EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000255F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000255F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000255FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025603 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025604 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025609 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002560E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025613 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025618 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025619 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002561E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025623 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025628 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002562D 04                         SME_Lx_Kl_811:	dc.b 4	
0002562E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025633 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025638 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002563D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025642 01                         SME_Lx_Kl_826:	dc.b 1	
00025643 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025648 01                         SME_Lx_Kl_82C:	dc.b 1	
00025649 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002564E 01                         SME_Lx_Kl_832:	dc.b 1	
0002564F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025654 01                         SME_Lx_Kl_838:	dc.b 1	
00025655 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002565A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002565B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025660 01                         SME_Lx_Kl_844:	dc.b 1	
00025661 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025666 01                         SME_Lx_Kl_84A:	dc.b 1	
00025667 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002566C 03                         SME_Lx_Kl_850:	dc.b 3	
0002566D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025672 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025677 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002567C 01                         SME_Lx_Kl_860:	dc.b 1	
0002567D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025682 02                         SME_Lx_Kl_866:	dc.b 2	
00025683 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025688 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002568D 01                         SME_Lx_Kl_871:	dc.b 1	
0002568E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025693 02                         SME_Lx_Kl_877:	dc.b 2	
00025694 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025699 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002569E 01                         SME_Lx_Kl_882:	dc.b 1	
0002569F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000256A4 04                         SME_Lx_Kl_888:	dc.b 4	
000256A5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000256AA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000256AF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256B4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000256B9 07                         SME_Lx_Kl_89D:	dc.b 7	
000256BA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000256BF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000256C4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000256C9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000256CE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000256D3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000256D8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000256DD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000256DE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000256E3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000256E8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000256ED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256F2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000256F7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000256F8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000256FD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025702 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025707 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025708 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002570D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025712 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025713 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025718 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002571D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025722 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025727 04                         SME_Lx_Kl_90B:	dc.b 4	
00025728 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002572D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025732 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025737 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002573C 04                         SME_Lx_Kl_920:	dc.b 4	
0002573D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025742 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025747 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002574C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025751 09                         SME_Lx_Kl_935:	dc.b 9	
00025752 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025757 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002575C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025761 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025766 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002576B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025770 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025775 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002577A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002577F 03                         SME_Lx_Kl_963:	dc.b 3	
00025780 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025785 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002578A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002578F 03                         SME_Lx_Kl_973:	dc.b 3	
00025790 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025795 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002579A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002579F 02                         SME_Lx_Kl_983:	dc.b 2	
000257A0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000257A5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
000257AA 00                         SME_Lx_Kl_98E:	dc.b 0	
000257AB 08                         SME_Lx_Kl_98F:	dc.b 8	
000257AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257B1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257B6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257BB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257C0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257C5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257CA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000257CF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000257D4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000257D5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257DA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257DF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257E4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257E9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257EE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257F3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000257F8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000257F9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257FE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025803 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025808 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
0002580D 03                         SME_Lx_Kl_9F1:	dc.b 3	
0002580E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025813 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025818 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
0002581D 03                         SME_Lx_Kl_A01:	dc.b 3	
0002581E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025823 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025828 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
0002582D 03                         SME_Lx_Kl_A11:	dc.b 3	
0002582E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025833 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025838 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
0002583D 02                         SME_Lx_Kl_A21:	dc.b 2	
0002583E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025843 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025848 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025849 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002584E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025853 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025858 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025859 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002585E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025863 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025868 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025869 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
0002586E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025873 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025878 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025879 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002587E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025883 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025888 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025889 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
0002588E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025893 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025898 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
0002589D 08                         SME_Lx_Kl_A81:	dc.b 8	
0002589E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
000258A3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
000258A8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
000258AD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
000258B2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
000258B7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
000258BC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
000258C1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000258C6 04                         SME_Lx_Kl_AAA:	dc.b 4	
000258C7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258CC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258D1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258D6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258DB 04                         SME_Lx_Kl_ABF:	dc.b 4	
000258DC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258E1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258E6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258EB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258F0 05                         SME_Lx_Kl_AD4:	dc.b 5	
000258F1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000258F6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000258FB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025900 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025905 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
0002590A 05                         SME_Lx_Kl_AEE:	dc.b 5	
0002590B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025910 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025915 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
0002591A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
0002591F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025924 02                         SME_Lx_Kl_B08:	dc.b 2	
00025925 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
0002592A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002592F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025930 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025935 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
0002593A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002593F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025944 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025949 03                         SME_Lx_Kl_B2D:	dc.b 3	
0002594A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002594F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025954 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025959 05                         SME_Lx_Kl_B3D:	dc.b 5	
0002595A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002595F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025964 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025969 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
0002596E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025973 02                         SME_Lx_Kl_B57:	dc.b 2	
00025974 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025979 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002597E 03                         SME_Lx_Kl_B62:	dc.b 3	
0002597F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025984 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025989 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002598E 03                         SME_Lx_Kl_B72:	dc.b 3	
0002598F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025994 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025999 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002599E 03                         SME_Lx_Kl_B82:	dc.b 3	
0002599F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
000259A4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
000259A9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
000259AE 02                         SME_Lx_Kl_B92:	dc.b 2	
000259AF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000259B4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
000259B9 03                         SME_Lx_Kl_B9D:	dc.b 3	
000259BA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
000259BF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
000259C4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000259C9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
000259CA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000259CF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000259D4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000259D9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000259DE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000259E3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000259E8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000259ED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000259F2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000259F7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000259FC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025A01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025A02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025A07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025A0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025A11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025A16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025A1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025A20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025A21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025A26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025A2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025A30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025A31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025A36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025A3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025A40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025A45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025A4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025A4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025A54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025A55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025A5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025A5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025A60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025A6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025A74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025A75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025A7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025A85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025A8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025A94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025A95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025A9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025A9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025AA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025AA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025AAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025AB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025AB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025ABB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025ABC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025AC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025AC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025ACC                            		even
00025ACC                            		even
00025ACC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025ACC                            ; --------------------------------------------------------------------------------
00025ACC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025ACC                            
00025ACC                            SME_vJmm3:	
00025ACC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025AD0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025AD4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025AD8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025ADC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025AE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025AE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025AE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025AEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025AF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025AF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025AF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025AFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025B00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025B04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025B08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025B0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025B10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025B14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025B18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025B1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025B20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025B24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025B28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025B2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025B30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025B34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025B38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025B3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025B40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025B44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025B48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025B4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025B50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025B54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025B58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025B5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025B60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025B64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025B68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025B6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025B70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025B74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025B78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025B7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025B80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025B84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025B88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025B8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025B90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025B94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025B98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025B9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025BA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025BA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025BA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025BAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025BB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025BB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025BB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025BBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025BC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025BC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025BC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025BCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025BD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025BD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025BD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025BDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025BE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025BE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025BE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025BEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025BF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025BF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025BF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025BFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025C00 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025C04 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025C08 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025C0C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025C0E 00                         SME_vJmm3_142:	dc.b 0	
00025C0F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025C18 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025C2B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025C40 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025C49 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025C50 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025C57 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025C60 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025C65 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025C6C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025C73 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025C7A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025C83 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025C8A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025C99 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025CA4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025CAB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025CB2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025CBB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025CC0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025CC7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025CD2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025CDD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025CEA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025CF3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025CFA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025D05 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025D0E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025D15 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025D20 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025D29 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025D2E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025D33 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025D3E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025D47 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025D4C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025D53 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025D5A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025D67 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025D74 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025D7D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025D84 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025D8F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025D98 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025D9F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025DAA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025DAF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025DB4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025DB9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025DBE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025DC3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025DC8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025DCD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025DD2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025DDB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025DE2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025DE9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025DF0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025DF9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00025E00 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00025E07 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00025E0E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00025E13 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00025E18 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
00025E1D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00025E22 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00025E27 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
00025E2C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00025E31 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00025E36 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00025E3F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00025E46 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
00025E4B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00025E52 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00025E5B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00025E62 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00025E67 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00025E6E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00025E75 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00025E7C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00025E8F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00025EA2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00025EA9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00025EB0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00025EB7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00025EC2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00025EC9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00025ED0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00025EDB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00025EE6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00025EEF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00025EF8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00025F01 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00025F0A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
00025F0D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00025F10 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00025F13 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00025F16 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00025F19 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
00025F1C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
00025F1F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00025F26 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00025F29 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
00025F2E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00025F31 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00025F36 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00025F39 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00025F42 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00025F51 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00025F5C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00025F63 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00025F68 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00025F71 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00025F7A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00025F83 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00025F96 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00025F9D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00025FA4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
00025FA9 00                         SME_vJmm3_4DD:	dc.b 0	
00025FAA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00025FBB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00025FCA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00025FD3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025FDA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FE1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FE8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
00025FEB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FF2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FF9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026000 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026007 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026010 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026021 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002602A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026033 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002603E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026049 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002604E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026059 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026060 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002606B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026070 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026077 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002607E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026085 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002608A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026091 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000260A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000260B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000260BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000260CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000260D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000260D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000260E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000260E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000260F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000260F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000260F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000260F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000260FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026100 00                         		even
00026100 00                         		even
00026100                            
00026100                            ; ---------------------------------------------------------------------------
00026100                            ; Uncompressed graphics	- Sonic
00026100                            ; ---------------------------------------------------------------------------
00026100                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C700                            		even
0003C700                            ; ---------------------------------------------------------------------------
0003C700                            ; Compressed graphics - various
0003C700                            ; ---------------------------------------------------------------------------
0003C700                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CA60                            		even
0003CA60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CDC0                            		even
0003CDC0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D120                            		even
0003D120                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D480                            		even
0003D480                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003D900                            		even
0003D900                            
0003D900                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003D900                            ; ---------------------------------------------------------------------------
0003D900                            ; Sprite mappings - walls of the special stage
0003D900                            ; ---------------------------------------------------------------------------
0003D900                            Map_SSWalls_internal:
0003D900 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003D902 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003D904 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003D906 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003D908 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003D90A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003D90C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003D90E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003D910 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003D912 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003D914 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003D916 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003D918 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003D91A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003D91C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003D91E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003D920 01                         byte_2C584:	dc.b 1
0003D921 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003D926 01                         byte_2C58A:	dc.b 1
0003D927 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003D92C 01                         byte_2C590:	dc.b 1
0003D92D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003D932 01                         byte_2C596:	dc.b 1
0003D933 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003D938 01                         byte_2C59C:	dc.b 1
0003D939 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003D93E 01                         byte_2C5A2:	dc.b 1
0003D93F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003D944 01                         byte_2C5A8:	dc.b 1
0003D945 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003D94A 01                         byte_2C5AE:	dc.b 1
0003D94B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003D950 01                         byte_2C5B4:	dc.b 1
0003D951 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003D956 01                         byte_2C5BA:	dc.b 1
0003D957 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003D95C 01                         byte_2C5C0:	dc.b 1
0003D95D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003D962 01                         byte_2C5C6:	dc.b 1
0003D963 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003D968 01                         byte_2C5CC:	dc.b 1
0003D969 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003D96E 01                         byte_2C5D2:	dc.b 1
0003D96F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003D974 01                         byte_2C5D8:	dc.b 1
0003D975 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003D97A 01                         byte_2C5DE:	dc.b 1
0003D97B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003D980                            		even
0003D980                            		even
0003D980                            
0003D980                            ; ---------------------------------------------------------------------------
0003D980                            ; Compressed graphics - special stage
0003D980                            ; ---------------------------------------------------------------------------
0003D980                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E2B8                            		even
0003E2B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E3EC                            		even
0003E3EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F07C                            		even
0003F07C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F37C                            		even
0003F37C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003F870                            		even
0003F870                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003F95E                            		even
0003F95E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FA2E                            		even
0003FA2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FB24                            		even
0003FB24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FB82                            		even
0003FB82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FC14                            		even
0003FC14                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FCD6                            		even
0003FCD6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FDA4                            		even
0003FDA4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0003FE70                            		even
0003FE70                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0003FF38                            		even
0003FF38                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040002                            		even
00040002                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000400D2                            		even
000400D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000402C6                            		even
000402C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004042E                            		even
0004042E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000404DE                            		even
000404DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000405B8                            		even
000405B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004063C                            		even
0004063C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
000407BA                            		even
000407BA                            ; ---------------------------------------------------------------------------
000407BA                            ; Compressed graphics - GHZ stuff
000407BA                            ; ---------------------------------------------------------------------------
000407BA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
0004081C                            		even
0004081C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040936                            		even
00040936                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040A54                            		even
00040A54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040A9C                            		even
00040A9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040C3A                            		even
00040C3A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040CB6                            		even
00040CB6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00040ECA                            		even
00040ECA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00040FF6                            		even
00040FF6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004114A                            		even
0004114A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000411FA                            		even
000411FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004125A                            		even
0004125A                            ; ---------------------------------------------------------------------------
0004125A                            ; Compressed graphics - LZ stuff
0004125A                            ; ---------------------------------------------------------------------------
0004125A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041332                            		even
00041332                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041B26                            		even
00041B26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041CB8 00                         		even
00041CB8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00041E22                            		even
00041E22                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042462 00                         		even
00042462                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042504 00                         		even
00042504                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042588                            		even
00042588                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000426E4                            		even
000426E4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004276A                            		even
0004276A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000428D8                            		even
000428D8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042DBA                            		even
00042DBA                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00042F2A                            		even
00042F2A                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000431E2                            		even
000431E2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043328                            		even
00043328                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043452                            		even
00043452                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000435D8 00                         		even
000435D8                            ; ---------------------------------------------------------------------------
000435D8                            ; Compressed graphics - MZ stuff
000435D8                            ; ---------------------------------------------------------------------------
000435D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043866                            		even
00043866                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043924                            		even
00043924                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000439FC                            		even
000439FC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043A50                            		even
00043A50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043D6E 00                         		even
00043D6E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044684                            		even
00044684                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
0004481A                            		even
0004481A                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
000448A2                            		even
000448A2                            ; ---------------------------------------------------------------------------
000448A2                            ; Compressed graphics - SLZ stuff
000448A2                            ; ---------------------------------------------------------------------------
000448A2                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044ADE                            		even
00044ADE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044C24                            		even
00044C24                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00044E68                            		even
00044E68                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00044F04 00                         		even
00044F04                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00044FE6                            		even
00044FE6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
000451C8                            		even
000451C8                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000452D4                            		even
000452D4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045378                            		even
00045378                            ; ---------------------------------------------------------------------------
00045378                            ; Compressed graphics - SYZ stuff
00045378                            ; ---------------------------------------------------------------------------
00045378                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00045508                            		even
00045508                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004556A                            		even
0004556A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004563A 00                         		even
0004563A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
000458C8                            		even
000458C8                            ; ---------------------------------------------------------------------------
000458C8                            ; Compressed graphics - SBZ stuff
000458C8                            ; ---------------------------------------------------------------------------
000458C8                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0004591C                            		even
0004591C                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045BB8                            		even
00045BB8                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045DA8                            		even
00045DA8                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00045F46                            		even
00045F46                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046276                            		even
00046276                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046454                            		even
00046454                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
000464AC                            		even
000464AC                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004665E 00                         		even
0004665E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004675C                            		even
0004675C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
000468EA                            		even
000468EA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046984                            		even
00046984                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
000469DC                            		even
000469DC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046AD8                            		even
00046AD8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046BEE                            		even
00046BEE                            ; ---------------------------------------------------------------------------
00046BEE                            ; Compressed graphics - enemies
00046BEE                            ; ---------------------------------------------------------------------------
00046BEE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00047036 00                         		even
00047036                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
00047526 00                         		even
00047526                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0004780A 00                         		even
0004780A                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047B7E 00                         		even
00047B7E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047D66                            		even
00047D66                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048494 00                         		even
00048494                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0004871C 00                         		even
0004871C                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
000489B8 00                         		even
000489B8                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00048F8C                            		even
00048F8C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0004921E                            		even
0004921E                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049868 00                         		even
00049868                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049CA4                            		even
00049CA4                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
00049FB2 00                         		even
00049FB2                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A212                            		even
0004A212                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A510                            		even
0004A510                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A73C 00                         		even
0004A73C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004A8CA                            		even
0004A8CA                            ; ---------------------------------------------------------------------------
0004A8CA                            ; Compressed graphics - various
0004A8CA                            ; ---------------------------------------------------------------------------
0004A8CA                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004AF18 00                         		even
0004AF18                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B090 00                         		even
0004B090                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B1B4                            		even
0004B1B4                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B308 00                         		even
0004B308                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B7B2                            		even
0004B7B2                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004BE26                            		even
0004BE26                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004BEC0 00                         		even
0004BEC0                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C052                            		even
0004C052                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C170 00                         		even
0004C170                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C25C                            		even
0004C25C                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C7D4 00                         		even
0004C7D4                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004C8BE                            		even
0004C8BE                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CA32                            		even
0004CA32                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CDBA 00                         		even
0004CDBA                            ; ---------------------------------------------------------------------------
0004CDBA                            ; Compressed graphics - continue screen
0004CDBA                            ; ---------------------------------------------------------------------------
0004CDBA                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D08E 00                         		even
0004D08E                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D328 00                         		even
0004D328                            ; ---------------------------------------------------------------------------
0004D328                            ; Compressed graphics - animals
0004D328                            ; ---------------------------------------------------------------------------
0004D328                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D480                            		even
0004D480                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D5DC                            		even
0004D5DC                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D758                            		even
0004D758                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D874                            		even
0004D874                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004D9EE                            		even
0004D9EE                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DB28                            		even
0004DB28                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DC84                            		even
0004DC84                            ; ---------------------------------------------------------------------------
0004DC84                            ; Compressed graphics - primary patterns and block mappings
0004DC84                            ; ---------------------------------------------------------------------------
0004DC84                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E686                            		even
0004E686                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0004FF2E                            		even
0004FF2E                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
000514BE                            		even
000514BE                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
000538A8                            		even
000538A8                            Blk16_TS:	incbin	"map16\TS.bin"
00053B2C                            		even
00053B2C                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054C6A                            		even
00054C6A                            Blk256_TS:	incbin	"map256\TS.bin"
00055818                            		even
00055818                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056A94                            		even
00056A94                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
00059F66                            		even
00059F66                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D424                            		even
0005D424                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DC12                            		even
0005DC12                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000606AA                            		even
000606AA                            		incbin	"map256\MZ (JP1).bin"
00062654                            		even
00062654                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062CD6                            		even
00062CD6                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066740                            		even
00066740                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068B4A                            		even
00068B4A                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
000696D0                            		even
000696D0                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CAC0                            		even
0006CAC0                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DE78                            		even
0006DE78                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EA72                            		even
0006EA72                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000712B4                            		even
000712B4                            		incbin	"map256\SBZ (JP1).bin"
00071E40                            		even
00071E40                            ; ---------------------------------------------------------------------------
00071E40                            ; Compressed graphics - bosses and ending sequence
00071E40                            ; ---------------------------------------------------------------------------
00071E40                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000726BC 00                         		even
000726BC                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000729A6                            		even
000729A6                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0007322A                            		even
0007322A                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073A56                            		even
00073A56                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074224 00                         		even
00074224                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
000747A4                            		even
000747A4                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000748C4                            		even
000748C4                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074ACC 00                         		even
00074ACC                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075CAA                            		even
00075CAA                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000765EE                            		even
000765EE                            		even
000765EE                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076B7E                            		even
00076B7E                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076E06                            		even
00076E06                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077404                            		even
00077404                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0007768C                            		even
0007768C                            
0007768C FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
000776CC                            ; ---------------------------------------------------------------------------
000776CC                            ; Collision data
000776CC                            ; ---------------------------------------------------------------------------
000776CC                            AngleMap:	incbin	"collide\Angle Map.bin"
000777CC                            		even
000777CC                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
000787CC                            		even
000787CC                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
000797CC                            		even
000797CC                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0007998A 00                         		even
0007998A                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079C48                            		even
00079C48                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079DC2 00                         		even
00079DC2                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
00079FB6                            		even
00079FB6                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A1A2 00                         		even
0007A1A2                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A372 00                         		even
0007A372                            ; ---------------------------------------------------------------------------
0007A372                            ; Special Stage layouts
0007A372                            ; ---------------------------------------------------------------------------
0007A372                            SS_1:		incbin	"sslayout\1.bin"
0007A5EC                            		even
0007A5EC                            SS_2:		incbin	"sslayout\2.bin"
0007A9FE                            		even
0007A9FE                            SS_3:		incbin	"sslayout\3.bin"
0007AD5A                            		even
0007AD5A                            SS_4:		incbin	"sslayout\4.bin"
0007B234                            		even
0007B234                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B6E4                            			even
0007B6E4                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007B9D6                            		even
0007B9D6                            ; ---------------------------------------------------------------------------
0007B9D6                            ; Animated uncompressed graphics
0007B9D6                            ; ---------------------------------------------------------------------------
0007B9D6                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BBD6                            		even
0007BBD6                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007BFD6                            		even
0007BFD6                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C456                            		even
0007C456                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C756                            		even
0007C756                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CD56                            		even
0007CD56                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D056                            		even
0007D056                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DAD6                            		even
0007DAD6                            
0007DAD6                            ; ---------------------------------------------------------------------------
0007DAD6                            ; Level	layout index
0007DAD6                            ; ---------------------------------------------------------------------------
0007DAD6                            Level_Index:
0007DAD6                            		; GHZ
0007DAD6 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DADC 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DAE2 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DAE8 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DAEE                            		; LZ
0007DAEE 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DAF4 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DAFA 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DB00 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DB06                            		; MZ
0007DB06 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DB0C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DB12 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DB18 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DB1E                            		; SLZ
0007DB1E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DB24 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DB2A 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DB30 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DB36                            		; SYZ
0007DB36 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DB3C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DB42 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DB48 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DB4E                            		; SBZ
0007DB4E 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DB54 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DB5A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DB60 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DB66                            		; Ending
0007DB66 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DB6C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DB72 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DB78 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DB7E                            
0007DB7E                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DDB0                            		even
0007DDB0 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DDB4                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007DED6                            		even
0007DED6 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007DEDA                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007DFFC                            		even
0007DFFC                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E03E                            		even
0007E03E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E042 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E046                            
0007E046                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E108                            		even
0007E108                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E20A                            		even
0007E20A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E20E                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E2A8                            		even
0007E2A8 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E2AC                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E3C6                            		even
0007E3C6 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E3CA                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E484                            		even
0007E484 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E488                            
0007E488                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E57A                            		even
0007E57A                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E69C                            		even
0007E69C                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E78E                            		even
0007E78E                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007E8B0                            		even
0007E8B0 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007E8B4                            Level_MZ3:	incbin	"levels\mz3.bin"
0007E926                            		even
0007E926                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EA48                            		even
0007EA48 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EA4C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EA50                            
0007EA50                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EB62                            		even
0007EB62                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007EBDC                            		even
0007EBDC                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007ECCC                            		even
0007ECCC                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007EDE6                            		even
0007EDE6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007EDEA                            
0007EDEA                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007EEEE                            		even
0007EEEE                            		incbin	"levels\syzbg (JP1).bin"
0007EF28                            		even
0007EF28 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007EF2C                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F030                            		even
0007F030 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F034                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F18E 00                         		even
0007F18E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F192 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F196                            
0007F196                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F2B8                            		even
0007F2B8                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F2F6                            		even
0007F2F6                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F438                            		even
0007F438                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F5A2                            		even
0007F5A2 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F5A6 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F5AA                            Level_End:	incbin	"levels\ending.bin"
0007F5DA 00                         		even
0007F5DA 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F5DE                            
0007F5DE                            
0007F5DE                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
0008021E                            		even
0008021E                            
00080300                            
00080300                            ; ---------------------------------------------------------------------------
00080300                            ; Sprite locations index
00080300                            ; ---------------------------------------------------------------------------
00080300                            ObjPos_Index:
00080300                            		; GHZ
00080300 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080304 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080308 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008030C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080310                            		; LZ
00080310 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080314 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080318 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008031C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080320                            		; MZ
00080320 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080324 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080328 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008032C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080330                            		; SLZ
00080330 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080334 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080338 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008033C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080340                            		; SYZ
00080340 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080344 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080348 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008034C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080350                            		; SBZ
00080350 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080354 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080358 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008035C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080360                            		; Ending
00080360 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080364 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080368 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008036C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080370                            		; --- Put extra object data here. ---
00080370                            ObjPosLZPlatform_Index:
00080370 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080374 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080378 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008037C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080380                            ObjPosSBZPlatform_Index:
00080380 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080384 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080388 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008038C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080390 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080396                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
000809F6                            		even
000809F6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00080E46                            		even
00080E46                            		incbin	"objpos\ghz3 (JP1).bin"
000810AA                            		even
000810AA                            		incbin	"objpos\lz1 (JP1).bin"
000810E0                            		even
000810E0                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
00081422                            		even
00081422                            		incbin	"objpos\lz3 (JP1).bin"
000819E6                            		even
000819E6                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082076                            		even
00082076                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
000820A8                            		even
000820A8                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
000820DA                            		even
000820DA                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
0008210C                            		even
0008210C                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
0008213E                            		even
0008213E                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082188                            		even
00082188                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
000821C6                            		even
000821C6                            		incbin	"objpos\mz1 (JP1).bin"
000827A8                            		even
000827A8                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082B86                            		even
00082B86                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082DD8                            		even
00082DD8                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
0008330C                            		even
0008330C                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
0008377A                            		even
0008377A                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083D5C                            		even
00083D5C                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083DB6                            		even
00083DB6                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083DE0                            		even
00083DE0                            		incbin	"objpos\syz3 (JP1).bin"
00083E10                            		even
00083E10                            		incbin	"objpos\sbz1 (JP1).bin"
00083E58                            		even
00083E58                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00083E82                            		even
00083E82                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00083EBE                            		even
00083EBE                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00083EF0                            		even
00083EF0                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00083F22                            		even
00083F22                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00083F54                            		even
00083F54                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00083F86                            		even
00083F86                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00083FB8                            		even
00083FB8                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00083FF0                            		even
00083FF0                            ObjPos_End:	incbin	"objpos\ending.bin"
0008414C                            		even
0008414C FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00084152                            
00084152                            		dcb.b $63C,$FF
0008478E                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
0008478E                            
0008478E                            SoundDriver:	include "s1.sounddriver.asm"
0008478E                            ; ---------------------------------------------------------------------------
0008478E                            ; Modified (early?) SMPS 68k Type 1b
0008478E                            ; ---------------------------------------------------------------------------
0008478E                            ; Go_SoundTypes:
0008478E 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00084792                            ; Go_SoundD0:
00084792 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084796 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0008479A 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
0008479E                            ; off_719A0:
0008479E 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
000847A2 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
000847A6                            ; ---------------------------------------------------------------------------
000847A6                            ; PSG instruments used in music
000847A6                            ; ---------------------------------------------------------------------------
000847A6                            PSG_Index:
000847A6 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
000847B2 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000847BE 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000847CA                            PSG1:		incbin	"sound/psg/psg1.bin"
000847E1                            PSG2:		incbin	"sound/psg/psg2.bin"
000847E8                            PSG3:		incbin	"sound/psg/psg3.bin"
000847F9                            PSG4:		incbin	"sound/psg/psg4.bin"
00084804                            PSG6:		incbin	"sound/psg/psg6.bin"
00084813                            PSG5:		incbin	"sound/psg/psg5.bin"
0008483D                            PSG7:		incbin	"sound/psg/psg7.bin"
00084859                            PSG8:		incbin	"sound/psg/psg8.bin"
00084881                            PSG9:		incbin	"sound/psg/psg9.bin"
00084892                            ; ---------------------------------------------------------------------------
00084892                            ; New tempos for songs during speed shoes
00084892                            ; ---------------------------------------------------------------------------
00084892                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00084892                            ; tempos while speed shoes are active. If you don't want that, you should add
00084892                            ; their "correct" sped-up main tempos to the list.
00084892                            ; byte_71A94:
00084892                            SpeedUpIndex:
00084892 07                         		dc.b 7		; GHZ
00084893 72                         		dc.b $72	; LZ
00084894 73                         		dc.b $73	; MZ
00084895 26                         		dc.b $26	; SLZ
00084896 15                         		dc.b $15	; SYZ
00084897 08                         		dc.b 8		; SBZ
00084898 FF                         		dc.b $FF	; Invincibility
00084899 05                         		dc.b 5		; Extra Life
0008489A                            		;dc.b ?		; Special Stage
0008489A                            		;dc.b ?		; Title Screen
0008489A                            		;dc.b ?		; Ending
0008489A                            		;dc.b ?		; Boss
0008489A                            		;dc.b ?		; FZ
0008489A                            		;dc.b ?		; Sonic Got Through
0008489A                            		;dc.b ?		; Game Over
0008489A                            		;dc.b ?		; Continue Screen
0008489A                            		;dc.b ?		; Credits
0008489A                            		;dc.b ?		; Drowning
0008489A                            		;dc.b ?		; Get Emerald
0008489A                            
0008489A                            ; ---------------------------------------------------------------------------
0008489A                            ; Music	Pointers
0008489A                            ; ---------------------------------------------------------------------------
0008489A                            MusicIndex:
0008489A 0000 0000                  ptr_mus81:	dc.l Music81
0008489E 0000 0000                  ptr_mus82:	dc.l Music82
000848A2 0000 0000                  ptr_mus83:	dc.l Music83
000848A6 0000 0000                  ptr_mus84:	dc.l Music84
000848AA 0000 0000                  ptr_mus85:	dc.l Music85
000848AE 0000 0000                  ptr_mus86:	dc.l Music86
000848B2 0000 0000                  ptr_mus87:	dc.l Music87
000848B6 0000 0000                  ptr_mus88:	dc.l Music88
000848BA 0000 0000                  ptr_mus89:	dc.l Music89
000848BE 0000 0000                  ptr_mus8A:	dc.l Music8A
000848C2 0000 0000                  ptr_mus8B:	dc.l Music8B
000848C6 0000 0000                  ptr_mus8C:	dc.l Music8C
000848CA 0000 0000                  ptr_mus8D:	dc.l Music8D
000848CE 0000 0000                  ptr_mus8E:	dc.l Music8E
000848D2 0000 0000                  ptr_mus8F:	dc.l Music8F
000848D6 0000 0000                  ptr_mus90:	dc.l Music90
000848DA 0000 0000                  ptr_mus91:	dc.l Music91
000848DE 0000 0000                  ptr_mus92:	dc.l Music92
000848E2 0000 0000                  ptr_mus93:	dc.l Music93
000848E6 0000 0000                  ptr_mus94:	dc.l Music94
000848EA 0000 0000                  ptr_mus95:	dc.l Music95
000848EE 0000 0000                  ptr_mus96:	dc.l Music96
000848F2 0000 0000                  ptr_mus97:	dc.l Music97
000848F6 0000 0000                  ptr_mus98:	dc.l Music98
000848FA                            ptr_musend
000848FA                            ; ---------------------------------------------------------------------------
000848FA                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000848FA                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000848FA                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000848FA                            ; any music or SFX can override it (as long as it can override whatever was
000848FA                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000848FA                            ; will only override special SFX and music will only override music.
000848FA                            ; ---------------------------------------------------------------------------
000848FA                            ; SoundTypes:
000848FA                            SoundPriorities:
000848FA 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084909 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084919 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084929 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084939 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084949 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084959 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
0008495E                            
0008495E                            ; ---------------------------------------------------------------------------
0008495E                            ; Subroutine to update music more than once per frame
0008495E                            ; (Called by horizontal & vert. interrupts)
0008495E                            ; ---------------------------------------------------------------------------
0008495E                            
0008495E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008495E                            
0008495E                            ; sub_71B4C:
0008495E                            UpdateMusic:
0008495E 33FC 0100 00A1 1100        		stopZ80
00084966 4E71                       		nop	
00084968 4E71                       		nop	
0008496A 4E71                       		nop	
0008496C                            ; loc_71B5A:
0008496C                            @updateloop:
0008496C 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084974 66F6                       		bne.s	@updateloop			; If so, wait
00084976                            
00084976 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
0008497E 6700                       		beq.s	@driverinput			; Branch if yes
00084980 33FC 0000 00A1 1100        		startZ80
00084988 4E71                       		nop	
0008498A 4E71                       		nop	
0008498C 4E71                       		nop	
0008498E 4E71                       		nop	
00084990 4E71                       		nop	
00084992 60CA                       		bra.s	UpdateMusic
00084994                            ; ===========================================================================
00084994                            ; loc_71B82:
00084994                            @driverinput:
00084994 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
0008499A 422E 000E                  		clr.b	f_voice_selector(a6)
0008499E 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000849A2 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000849A6 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
000849AA 6600                       		bne.s	@skipdelay
000849AC 4EBA 0000                  		jsr	TempoWait(pc)
000849B0                            ; loc_71B9E:
000849B0                            @skipdelay:
000849B0 102E 0004                  		move.b	v_fadeout_counter(a6),d0
000849B4 6700                       		beq.s	@skipfadeout
000849B6 4EBA 0000                  		jsr	DoFadeOut(pc)
000849BA                            ; loc_71BA8:
000849BA                            @skipfadeout:
000849BA 4A2E 0024                  		tst.b	f_fadein_flag(a6)
000849BE 6700                       		beq.s	@skipfadein
000849C0 4EBA 0000                  		jsr	DoFadeIn(pc)
000849C4                            ; loc_71BB2:
000849C4                            @skipfadein:
000849C4                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
000849C4 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
000849C8 6700                       		beq.s	@nosndinput		; if not, branch
000849CA 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000849CE                            ; loc_71BBC:
000849CE                            @nosndinput:
000849CE 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000849D4 6700                       		beq.s	@nonewsound		; If yes, branch
000849D6 4EBA 0000                  		jsr	PlaySoundID(pc)
000849DA                            ; loc_71BC8:
000849DA                            @nonewsound:
000849DA 4A38 C901                  		tst.b	($FFFFC901).w
000849DE 6700                       		beq.s	@cont
000849E0 5338 C901                  		subq.b	#1,($FFFFC901).w
000849E4                            		
000849E4                            @cont:
000849E4 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000849E8 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000849EA 6A00                       		bpl.s	@dacdone		; Branch if not
000849EC 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000849F0                            ; loc_71BD4:
000849F0                            @dacdone:
000849F0 422E 0008                  		clr.b	f_updating_dac(a6)
000849F4 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000849F6                            ; loc_71BDA:
000849F6                            @bgmfmloop:
000849F6 DAFC 0030                  		adda.w	#TrackSz,a5
000849FA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849FC 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000849FE 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084A02                            ; loc_71BE6:
00084A02                            @bgmfmnext:
00084A02 51CF FFF2                  		dbf	d7,@bgmfmloop
00084A06                            
00084A06 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084A08                            ; loc_71BEC:
00084A08                            @bgmpsgloop:
00084A08 DAFC 0030                  		adda.w	#TrackSz,a5
00084A0C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084A0E 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084A10 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084A14                            ; loc_71BF8:
00084A14                            @bgmpsgnext:
00084A14 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084A18                            
00084A18 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084A1E 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084A20                            ; loc_71C04:
00084A20                            @sfxfmloop:
00084A20 DAFC 0030                  		adda.w	#TrackSz,a5
00084A24 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084A26 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084A28 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084A2C                            ; loc_71C10:
00084A2C                            @sfxfmnext:
00084A2C 51CF FFF2                  		dbf	d7,@sfxfmloop
00084A30                            
00084A30 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084A32                            ; loc_71C16:
00084A32                            @sfxpsgloop:
00084A32 DAFC 0030                  		adda.w	#TrackSz,a5
00084A36 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084A38 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084A3A 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084A3E                            ; loc_71C22:
00084A3E                            @sfxpsgnext:
00084A3E 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084A42                            		
00084A42 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084A48 DAFC 0030                  		adda.w	#TrackSz,a5
00084A4C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084A4E 6A00                       		bpl.s	@specfmdone		; Branch if not
00084A50 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084A54                            ; loc_71C38:
00084A54                            @specfmdone:
00084A54 DAFC 0030                  		adda.w	#TrackSz,a5
00084A58 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084A5A 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084A5C 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084A60                            ; loc_71C44:
00084A60                            DoStartZ80:
00084A60 33FC 0000 00A1 1100        		startZ80
00084A68 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084A6E 6700                       		beq.s @end ; if not, branch
00084A70 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084A76 6600                       		bne.s @end ; if not, branch
00084A78 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084A7E 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084A82                            
00084A82                            	@end:
00084A82 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084A86 4E75                       		rts
00084A88                            ; End of function UpdateMusic
00084A88                            
00084A88                            
00084A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A88                            
00084A88                            ; sub_71C4E: UpdateDAC:
00084A88                            DACUpdateTrack:
00084A88 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084A8C 6600                       		bne.s	@locret				; Return if not
00084A8E 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084A94                            ;DACDoNext:
00084A94 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084A98                            ; loc_71C5E:
00084A98                            @sampleloop:
00084A98 7A00                       		moveq	#0,d5
00084A9A 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084A9C 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084AA0 6500                       		blo.s	@notcoord	; Branch if not
00084AA2 4EBA 0000                  		jsr	CoordFlag(pc)
00084AA6 60F0                       		bra.s	@sampleloop
00084AA8                            ; ===========================================================================
00084AA8                            ; loc_71C6E:
00084AA8                            @notcoord:
00084AA8 4A05                       		tst.b	d5			; Is it a sample?
00084AAA 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084AAC 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084AB0 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084AB2 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084AB4 534C                       		subq.w	#1,a4			; Put byte back
00084AB6 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084ABC 6000                       		bra.s	@gotsampleduration
00084ABE                            ; ===========================================================================
00084ABE                            ; loc_71C84:
00084ABE                            @gotduration:
00084ABE 4EBA 0000                  		jsr	SetDuration(pc)
00084AC2                            ; loc_71C88:
00084AC2                            @gotsampleduration:
00084AC2 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084AC6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084ACA 6600                       		bne.s	@locret			; Return if yes
00084ACC 7000                       		moveq	#0,d0
00084ACE 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084AD2 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084AD6 6700                       		beq.s	@locret			; Return if yes
00084AD8 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084ADC 6600                       		bne.s	@timpani		; Various timpani
00084ADE 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084AE4                            ; locret_71CAA:
00084AE4                            @locret:
00084AE4 4E75                       		rts	
00084AE6                            ; ===========================================================================
00084AE6                            ; loc_71CAC:
00084AE6                            @timpani:
00084AE6 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084AEA 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084AEE                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084AEE                            		; use this value from then on.
00084AEE 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084AF4 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084AFC 4E75                       		rts	
00084AFE                            ; End of function DACUpdateTrack
00084AFE                            
00084AFE                            ; ===========================================================================
00084AFE                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084AFE                            ; Also, $8C-$8D are so slow you may want to skip them.
00084AFE                            ; byte_71CC4:
00084AFE 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084B04                            
00084B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B04                            
00084B04                            ; sub_71CCA:
00084B04                            FMUpdateTrack:
00084B04 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084B08 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084B0A 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084B0E 4EBA 0000                  		jsr	FMDoNext(pc)
00084B12 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084B16 6000 0000                  		bra.w	FMNoteOn
00084B1A                            ; ===========================================================================
00084B1A                            ; loc_71CE0:
00084B1A                            @notegoing:
00084B1A 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084B1E 4EBA 0000                  		jsr	DoModulation(pc)
00084B22 6000 0000                  		bra.w	FMUpdateFreq
00084B26                            ; End of function FMUpdateTrack
00084B26                            
00084B26                            
00084B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B26                            
00084B26                            ; sub_71CEC:
00084B26                            FMDoNext:
00084B26 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084B2A 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084B2E                            ; loc_71CF4:
00084B2E                            @noteloop:
00084B2E 7A00                       		moveq	#0,d5
00084B30 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084B32 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084B36 6500                       		blo.s	@gotnote	; Branch if not
00084B38 4EBA 0000                  		jsr	CoordFlag(pc)
00084B3C 60F0                       		bra.s	@noteloop
00084B3E                            ; ===========================================================================
00084B3E                            ; loc_71D04:
00084B3E                            @gotnote:
00084B3E 4EBA 0000                  		jsr	FMNoteOff(pc)
00084B42 4A05                       		tst.b	d5		; Is this a note?
00084B44 6A00                       		bpl.s	@gotduration	; Branch if not
00084B46 4EBA 0000                  		jsr	FMSetFreq(pc)
00084B4A 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084B4C 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084B4E 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084B50 6000 0000                  		bra.w	FinishTrackUpdate
00084B54                            ; ===========================================================================
00084B54                            ; loc_71D1A:
00084B54                            @gotduration:
00084B54 4EBA 0000                  		jsr	SetDuration(pc)
00084B58 6000 0000                  		bra.w	FinishTrackUpdate
00084B5C                            ; End of function FMDoNext
00084B5C                            
00084B5C                            
00084B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B5C                            
00084B5C                            ; sub_71D22:
00084B5C                            FMSetFreq:
00084B5C 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084B60 6700                       		beq.s	TrackSetRest
00084B62 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084B66 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084B6A E34D                       		lsl.w	#1,d5
00084B6C 41FA 0000                  		lea	FMFrequencies(pc),a0
00084B70 3C30 5000                  		move.w	(a0,d5.w),d6
00084B74 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084B78 4E75                       		rts	
00084B7A                            ; End of function FMSetFreq
00084B7A                            
00084B7A                            
00084B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B7A                            
00084B7A                            ; sub_71D40:
00084B7A                            SetDuration:
00084B7A 1005                       		move.b	d5,d0
00084B7C 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084B80                            ; loc_71D46:
00084B80                            @multloop:
00084B80 5301                       		subq.b	#1,d1
00084B82 6700                       		beq.s	@donemult
00084B84 D005                       		add.b	d5,d0
00084B86 60F8                       		bra.s	@multloop
00084B88                            ; ===========================================================================
00084B88                            ; loc_71D4E:
00084B88                            @donemult:
00084B88 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084B8C 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084B90 4E75                       		rts	
00084B92                            ; End of function SetDuration
00084B92                            
00084B92                            ; ===========================================================================
00084B92                            ; loc_71D58:
00084B92                            TrackSetRest:
00084B92 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084B96 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084B9A                            
00084B9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B9A                            
00084B9A                            ; sub_71D60:
00084B9A                            FinishTrackUpdate:
00084B9A 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084B9E 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084BA4 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084BA8 6600                       		bne.s	@locret				; If so, branch
00084BAA 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084BB0 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084BB4 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084BB8 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084BBA 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084BBE 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084BC2 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084BC6 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084BCA 1018                       		move.b	(a0)+,d0			; Get steps
00084BCC E208                       		lsr.b	#1,d0				; Halve them
00084BCE 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084BD2 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084BD6                            ; locret_71D9C:
00084BD6                            @locret:
00084BD6 4E75                       		rts	
00084BD8                            ; End of function FinishTrackUpdate
00084BD8                            
00084BD8                            
00084BD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BD8                            
00084BD8                            ; sub_71D9E: NoteFillUpdate
00084BD8                            NoteTimeoutUpdate:
00084BD8 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084BDC 6700                       		beq.s	@locret
00084BDE 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084BE2 6600                       		bne.s	@locret				; Return if it hasn't expired
00084BE4 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084BE8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084BEC 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084BF0 4EBA 0000                  		jsr	FMNoteOff(pc)
00084BF4 584F                       		addq.w	#4,sp				; Do not return to caller
00084BF6 4E75                       		rts	
00084BF8                            ; ===========================================================================
00084BF8                            ; loc_71DBE:
00084BF8                            @psgnoteoff:
00084BF8 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084BFC 584F                       		addq.w	#4,sp		; Do not return to caller
00084BFE                            ; locret_71DC4:
00084BFE                            @locret:
00084BFE 4E75                       		rts	
00084C00                            ; End of function NoteTimeoutUpdate
00084C00                            
00084C00                            
00084C00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C00                            
00084C00                            ; sub_71DC6:
00084C00                            DoModulation:
00084C00 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084C02 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084C06 6700                       		beq.s	@locret				; Return if not
00084C08 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084C0C 6700                       		beq.s	@waitdone			; If yes, branch
00084C0E 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084C12 4E75                       		rts	
00084C14                            ; ===========================================================================
00084C14                            ; loc_71DDA:
00084C14                            @waitdone:
00084C14 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084C18 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084C1A 4E75                       		rts	
00084C1C                            ; ===========================================================================
00084C1C                            ; loc_71DE2:
00084C1C                            @updatemodulation:
00084C1C 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084C20 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084C26 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084C2A 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084C2C 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084C32 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084C36 4E75                       		rts	
00084C38                            ; ===========================================================================
00084C38                            ; loc_71DFE:
00084C38                            @calcfreq:
00084C38 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084C3C 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084C40 4886                       		ext.w	d6
00084C42 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084C46 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084C4A DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084C4E 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084C50                            ; locret_71E16:
00084C50                            @locret:
00084C50 4E75                       		rts	
00084C52                            ; End of function DoModulation
00084C52                            
00084C52                            
00084C52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C52                            
00084C52                            ; sub_71E18:
00084C52                            FMPrepareNote:
00084C52 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084C56 6600                       		bne.s	locret_71E48		; Return if so
00084C58 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084C5C 6700                       		beq.s	FMSetRest		; Branch if zero
00084C5E                            ; loc_71E24:
00084C5E                            FMUpdateFreq:
00084C5E 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084C62 4880                       		ext.w	d0
00084C64 DC40                       		add.w	d0,d6			; Add note frequency
00084C66 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C6A 6600                       		bne.s	locret_71E48		; Return if so
00084C6C 3206                       		move.w	d6,d1
00084C6E E049                       		lsr.w	#8,d1
00084C70 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084C74 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084C78 1206                       		move.b	d6,d1
00084C7A 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084C7E 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084C82                            ; locret_71E48:
00084C82                            locret_71E48:
00084C82 4E75                       		rts	
00084C84                            ; ===========================================================================
00084C84                            ; loc_71E4A:
00084C84                            FMSetRest:
00084C84 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084C88 4E75                       		rts	
00084C8A                            ; End of function FMPrepareNote
00084C8A                            
00084C8A                            ; ===========================================================================
00084C8A                            ; loc_71E50:
00084C8A                            PauseMusic:
00084C8A 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084C8C 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084C92 6700 0000                  		beq.w	@unpausedallfm
00084C96 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084C9C 7602                       		moveq	#2,d3
00084C9E 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084CA2 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084CA4                            ; loc_71E6A:
00084CA4                            @killpanloop:
00084CA4 4EBA 0000                  		jsr	WriteFMI(pc)
00084CA8 4EBA 0000                  		jsr	WriteFMII(pc)
00084CAC 5200                       		addq.b	#1,d0
00084CAE 51CB FFF4                  		dbf	d3,@killpanloop
00084CB2                            
00084CB2 7602                       		moveq	#2,d3
00084CB4 7028                       		moveq	#$28,d0		; Key on/off register
00084CB6                            ; loc_71E7C:
00084CB6                            @noteoffloop:
00084CB6 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084CB8 4EBA 0000                  		jsr	WriteFMI(pc)
00084CBC 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084CBE 4EBA 0000                  		jsr	WriteFMI(pc)
00084CC2 51CB FFF2                  		dbf	d3,@noteoffloop
00084CC6                            
00084CC6 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084CCA 6000 FD94                  		bra.w	DoStartZ80
00084CCE                            ; ===========================================================================
00084CCE                            ; loc_71E94:
00084CCE                            @unpausemusic:
00084CCE 422E 0003                  		clr.b	f_pausemusic(a6)
00084CD2 7630                       		moveq	#TrackSz,d3
00084CD4 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084CD8 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084CDA                            ; loc_71EA0:
00084CDA                            @bgmfmloop:
00084CDA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084CDE 6700                       		beq.s	@bgmfmnext		; Branch if not
00084CE0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084CE4 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084CE6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084CEA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084CEE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084CF2                            ; loc_71EB8:
00084CF2                            @bgmfmnext:
00084CF2 DAC3                       		adda.w	d3,a5
00084CF4 51CC FFE4                  		dbf	d4,@bgmfmloop
00084CF8                            
00084CF8 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084CFC 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084CFE                            ; loc_71EC4:
00084CFE                            @sfxfmloop:
00084CFE 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084D02 6700                       		beq.s	@sfxfmnext		; Branch if not
00084D04 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084D08 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084D0A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084D0E 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084D12 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084D16                            ; loc_71EDC:
00084D16                            @sfxfmnext:
00084D16 DAC3                       		adda.w	d3,a5
00084D18 51CC FFE4                  		dbf	d4,@sfxfmloop
00084D1C                            
00084D1C 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084D20 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084D24 6700                       		beq.s	@unpausedallfm		; Branch if not
00084D26 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084D2A 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084D2C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084D30 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084D34 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084D38                            ; loc_71EFE:
00084D38                            @unpausedallfm:
00084D38 6000 FD26                  		bra.w	DoStartZ80
00084D3C                            
00084D3C                            ; ---------------------------------------------------------------------------
00084D3C                            ; Subroutine to	play a sound or	music track
00084D3C                            ; ---------------------------------------------------------------------------
00084D3C                            
00084D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D3C                            
00084D3C                            ; Sound_Play:
00084D3C                            CycleSoundQueue:
00084D3C 2079 0008 478E             		movea.l	(Go_SoundPriorities).l,a0
00084D42 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084D46 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084D48 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084D4A                            ; loc_71F12:
00084D4A                            @inputloop:
00084D4A 1011                       		move.b	(a1),d0			; move track number to d0
00084D4C 1200                       		move.b	d0,d1
00084D4E 4219                       		clr.b	(a1)+			; Clear entry
00084D50 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084D54 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084D56 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084D5C 6700                       		beq.s	@havesound		; If yes, branch
00084D5E 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084D62 6000                       		bra.s	@nextinput
00084D64                            ; ===========================================================================
00084D64                            ; loc_71F2C:
00084D64                            @havesound:
00084D64 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084D68 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084D6C B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084D6E 6500                       		blo.s	@nextinput		; Branch if yes
00084D70 1602                       		move.b	d2,d3			; Store new priority
00084D72 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084D76                            ; loc_71F3E:
00084D76                            @nextinput:
00084D76 51CC FFD2                  		dbf	d4,@inputloop
00084D7A                            
00084D7A 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084D7C 6B00                       		bmi.s	@locret
00084D7E 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084D80                            ; locret_71F4A:
00084D80                            @locret:
00084D80 4E75                       		rts	
00084D82                            ; End of function CycleSoundQueue
00084D82                            
00084D82                            
00084D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D82                            
00084D82                            ; Sound_ChkValue:
00084D82                            PlaySoundID:
00084D82 7E00                       		moveq	#0,d7
00084D84 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084D88 6700 0000                  		beq.w	StopAllSound
00084D8C 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084D8E 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084D94                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084D94                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084D94                            		; See LevSel_NoCheat for more.
00084D94 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084D98 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084D9C 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084DA0 6500 0000                  		blo.w	@locret			; Return if yes
00084DA4 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084DA8 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084DAC 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084DB0 6500 0000                  		blo.w	@locret			; Return if yes
00084DB4 0C07 00D1                  		cmpi.b	#$D1,d7
00084DB8 6500 0000                  		bcs.w	Sound_PlaySpecial
00084DBC 0C07 00DF                  		cmp.b	#$DF,d7
00084DC0 6F00 0000                  		ble.w	Sound_D1toDF
00084DC4 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084DC8 6500 0000                  		blo.w	@locret			; Return if yes
00084DCC 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084DD0 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084DD2                            ; locret_71F8C:
00084DD2                            @locret:
00084DD2 4E75                       		rts	
00084DD4                            ; ===========================================================================
00084DD4                            
00084DD4                            Sound_E0toE4:
00084DD4 0407 00E0                  		subi.b	#flg__First,d7
00084DD8 E54F                       		lsl.w	#2,d7
00084DDA 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084DDE                            ; ===========================================================================
00084DDE                            
00084DDE                            Sound_ExIndex:
00084DDE 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084DE2 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084DE6 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084DEA 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084DEE 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084DF2                            ptr_flgend
00084DF2                            ; ===========================================================================
00084DF2                            ; ---------------------------------------------------------------------------
00084DF2                            ; Play "Say-gaa" PCM sound
00084DF2                            ; ---------------------------------------------------------------------------
00084DF2                            ; Sound_E1: PlaySega:
00084DF2                            PlaySegaSound:
00084DF2 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084DFA 33FC 0000 00A1 1100        		startZ80
00084E02 323C 0011                  		move.w	#$11,d1
00084E06                            ; loc_71FC0:
00084E06                            @busyloop_outer:
00084E06 303C FFFF                  		move.w	#-1,d0
00084E0A                            ; loc_71FC4:
00084E0A                            @busyloop:
00084E0A 4E71                       		nop	
00084E0C 51C8 FFFC                  		dbf	d0,@busyloop
00084E10                            
00084E10 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084E14                            
00084E14 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084E16 4E75                       		rts	
00084E18                            ; ===========================================================================
00084E18                            ; ---------------------------------------------------------------------------
00084E18                            ; Play music track $81-$9F
00084E18                            ; ---------------------------------------------------------------------------
00084E18                            ; Sound_81to9F:
00084E18                            Sound_PlayBGM:
00084E18 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084E1C 6600                       		bne.s	@bgmnot1up		; if not, branch
00084E1E 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084E22 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084E26 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084E2A 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084E2C                            ; loc_71FE6:
00084E2C                            @clearsfxloop:
00084E2C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084E30 DAFC 0030                  		adda.w	#TrackSz,a5
00084E34 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084E38                            
00084E38 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084E3C 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084E3E                            ; loc_71FF8:
00084E3E                            @cleartrackplayloop:
00084E3E 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084E42 DAFC 0030                  		adda.w	#TrackSz,a5
00084E46 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084E4A                            
00084E4A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084E4C 204E                       		movea.l	a6,a0
00084E4E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084E52 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084E56                            ; loc_72012:
00084E56                            @backupramloop:
00084E56 22D8                       		move.l	(a0)+,(a1)+
00084E58 51C8 FFFC                  		dbf	d0,@backupramloop
00084E5C                            
00084E5C 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084E62 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084E64 6000                       		bra.s	@bgm_loadMusic
00084E66                            ; ===========================================================================
00084E66                            ; loc_72024:
00084E66                            @bgmnot1up:
00084E66 422E 0027                  		clr.b	f_1up_playing(a6)
00084E6A 422E 0026                  		clr.b	v_fadein_counter(a6)
00084E6E                            ; loc_7202C:
00084E6E                            @bgm_loadMusic:
00084E6E 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084E72 2879 0008 479E             		movea.l	(Go_SpeedUpIndex).l,a4
00084E78 0407 0081                  		subi.b	#bgm__First,d7
00084E7C 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00084E82 2879 0008 4796             		movea.l	(Go_MusicIndex).l,a4
00084E88 E54F                       		lsl.w	#2,d7
00084E8A 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00084E8E 7000                       		moveq	#0,d0
00084E90 3014                       		move.w	(a4),d0			; load voice pointer
00084E92 D08C                       		add.l	a4,d0			; It is a relative pointer
00084E94 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00084E98 102C 0005                  		move.b	5(a4),d0		; load tempo
00084E9C 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00084EA0                            		;tst.b	f_speedup(a6)
00084EA0                            		;beq.s	@nospeedshoes
00084EA0                            		;move.b	v_speeduptempo(a6),d0
00084EA0                            ; loc_72068:
00084EA0                            ;@nospeedshoes:
00084EA0 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00084EA4 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00084EA8 7200                       		moveq	#0,d1
00084EAA 264C                       		movea.l	a4,a3
00084EAC 5C4C                       		addq.w	#6,a4			; Point past header
00084EAE 7E00                       		moveq	#0,d7
00084EB0 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00084EB4 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00084EB8 5307                       		subq.b	#1,d7
00084EBA 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00084EBE 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00084EC2 7C30                       		moveq	#TrackSz,d6
00084EC4 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00084EC8 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00084ECC 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00084ED0                            ; loc_72098:
00084ED0                            @bmg_fmloadloop:
00084ED0 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084ED4 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084ED8 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084EDC 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084EE0 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00084EE4 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084EE8 7000                       		moveq	#0,d0
00084EEA 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00084EEC D08B                       		add.l	a3,d0				; Relative pointer
00084EEE 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084EF2 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00084EF6 D2C6                       		adda.w	d6,a1
00084EF8 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00084EFC                            		
00084EFC 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00084F02 6600                       		bne.s	@silencefm6
00084F04 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00084F06 7200                       		moveq	#0,d1		; Disable DAC
00084F08 4EBA 0000                  		jsr	WriteFMI(pc)
00084F0C 6000 0000                  		bra.w	@bgm_fmdone
00084F10                            ; ===========================================================================
00084F10                            ; loc_720D8:
00084F10                            @silencefm6:
00084F10 7028                       		moveq	#$28,d0		; Key on/off register
00084F12 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00084F14 4EBA 0000                  		jsr	WriteFMI(pc)
00084F18 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00084F1C 727F                       		moveq	#$7F,d1		; Total silence
00084F1E 4EBA 0000                  		jsr	WriteFMII(pc)
00084F22 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00084F26 727F                       		moveq	#$7F,d1		; Total silence
00084F28 4EBA 0000                  		jsr	WriteFMII(pc)
00084F2C 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00084F30 727F                       		moveq	#$7F,d1		; Total silence
00084F32 4EBA 0000                  		jsr	WriteFMII(pc)
00084F36 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00084F3A 727F                       		moveq	#$7F,d1		; Total silence
00084F3C 4EBA 0000                  		jsr	WriteFMII(pc)
00084F40 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00084F44 123C 00C0                  		move.b	#$C0,d1		; Stereo
00084F48 4EBA 0000                  		jsr	WriteFMII(pc)
00084F4C                            ; loc_72114:
00084F4C                            @bgm_fmdone:
00084F4C 7E00                       		moveq	#0,d7
00084F4E 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00084F52 6700                       		beq.s	@bgm_psgdone	; branch if zero
00084F54 5307                       		subq.b	#1,d7
00084F56 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00084F5A 45FA 0000                  		lea	PSGInitBytes(pc),a2
00084F5E                            ; loc_72126:
00084F5E                            @bgm_psgloadloop:
00084F5E 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084F62 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084F66 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084F6A 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084F6E 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084F72 7000                       		moveq	#0,d0
00084F74 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00084F76 D08B                       		add.l	a3,d0				; Relative pointer
00084F78 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084F7C 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00084F80 101C                       		move.b	(a4)+,d0			; load redundant byte
00084F82 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00084F86 D2C6                       		adda.w	d6,a1
00084F88 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00084F8C                            ; loc_72154:
00084F8C                            @bgm_psgdone:
00084F8C 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00084F90 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00084F92                            ; loc_7215A:
00084F92                            @sfxstoploop:
00084F92 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00084F94 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00084F98 7000                       		moveq	#0,d0
00084F9A 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00084F9E 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00084FA0 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00084FA2 E508                       		lsl.b	#2,d0			; Convert to index
00084FA4 6000                       		bra.s	@gotchannelindex
00084FA6                            ; ===========================================================================
00084FA6                            ; loc_7216E:
00084FA6                            @sfxpsgchannel:
00084FA6 E608                       		lsr.b	#3,d0		; Convert to index
00084FA8                            ; loc_72170:
00084FA8                            @gotchannelindex:
00084FA8 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00084FAC 2070 0000                  		movea.l	(a0,d0.w),a0
00084FB0 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00084FB4                            ; loc_7217C:
00084FB4                            @sfxnext:
00084FB4 D2C6                       		adda.w	d6,a1
00084FB6 51CF FFDA                  		dbf	d7,@sfxstoploop
00084FBA                            
00084FBA 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084FBE 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00084FC0 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084FC6                            ; loc_7218E:
00084FC6                            @checkspecialpsg:
00084FC6 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084FCA 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00084FCC 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084FD2                            ; loc_7219A:
00084FD2                            @sendfmnoteoff:
00084FD2 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084FD6 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00084FD8                            ; loc_721A0:
00084FD8                            @fmnoteoffloop:
00084FD8 4EBA 0000                  		jsr	FMNoteOff(pc)
00084FDC DAC6                       		adda.w	d6,a5
00084FDE 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00084FE2 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00084FE4                            ; loc_721AC:
00084FE4                            @psgnoteoffloop:
00084FE4 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084FE8 DAC6                       		adda.w	d6,a5
00084FEA 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00084FEE                            ; loc_721B6:
00084FEE                            @locdblret:
00084FEE 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00084FF0 4E75                       		rts	
00084FF2                            ; ===========================================================================
00084FF2                            ; byte_721BA:
00084FF2 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00084FFA 00                         		even
00084FFA                            ; byte_721C2:
00084FFA 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00084FFE 00                         		even
00084FFE                            ; ===========================================================================
00084FFE                            ; ---------------------------------------------------------------------------
00084FFE                            ; Play Spin Dash sound effect
00084FFE                            ; ---------------------------------------------------------------------------
00084FFE                            Sound_D1toDF:
00084FFE 4A2E 0027                  		tst.b	$27(a6)
00085002 6600 0000                  		bne.w	loc_722C6
00085006 4A2E 0004                  		tst.b	4(a6)
0008500A 6600 0000                  		bne.w	loc_722C6
0008500E 4A2E 0024                  		tst.b	$24(a6)
00085012 6600 0000                  		bne.w	loc_722C6
00085016 4238 C900                  		clr.b	($FFFFC900).w
0008501A 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
0008501E 6600                       		bne.s	@cont3	; if not, branch
00085020 3F00                       		move.w	d0,-(sp)
00085022 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00085026 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
0008502A 6600                       		bne.s	@cont1		; if it is, branch
0008502C 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00085030                            		
00085030                            @cont1:
00085030 5200                       		addq.b	#1,d0
00085032 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00085036 6400                       		bcc.s	@cont2		; if it has, branch
00085038 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
0008503C                            		
0008503C                            @cont2:
0008503C 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00085042 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00085048 301F                       		move.w	(sp)+,d0
0008504A                            		
0008504A                            @cont3:	
0008504A 2079 0008 479A             		movea.l	(Go_SoundIndex).l,a0
00085050 0407 00A0                  		sub.b	#$A0,d7
00085054 6000                       		bra.s	SoundEffects_Common
00085056                            ; ---------------------------------------------------------------------------
00085056                            ; Play normal sound effect
00085056                            ; ---------------------------------------------------------------------------
00085056                            ; Sound_A0toCF:
00085056                            Sound_PlaySFX:
00085056 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0008505A 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0008505E 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00085062 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085066 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0008506A 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008506E 4238 C900                  		clr.b	($FFFFC900).w
00085072 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00085076 6600                       		bne.s	Sound_notB5		; if not, branch
00085078 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
0008507C 6600                       		bne.s	loc_721EE		; Branch if not
0008507E 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00085082                            
00085082                            loc_721EE:
00085082 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00085088                            
00085088                            Sound_notB5:
00085088 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
0008508C 6600                       		bne.s	Sound_notA7		; if not, branch
0008508E 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00085092 6600 0000                  		bne.w	locret_722C4			; Return if not
00085096 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
0008509C                            		
0008509C                            Sound_notA7:
0008509C 2079 0008 479A             		movea.l	(Go_SoundIndex).l,a0
000850A2 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
000850A6                            
000850A6                            SoundEffects_Common:		
000850A6 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
000850A8 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
000850AC 224B                       		movea.l	a3,a1
000850AE 7200                       		moveq	#0,d1
000850B0 3219                       		move.w	(a1)+,d1		; Voice pointer
000850B2 D28B                       		add.l	a3,d1			; Relative pointer
000850B4 1A19                       		move.b	(a1)+,d5		; Dividing timing	
000850B6                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
000850B6                            		; index entry is above $3F will cause a crash. This is actually the same way that
000850B6                            		; this bug is fixed in Ristar's driver.
000850B6 7E00                       		moveq	#0,d7	
000850B8 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
000850BA 5307                       		subq.b	#1,d7
000850BC 7C30                       		moveq	#TrackSz,d6
000850BE                            
000850BE                            loc_72228:
000850BE 7600                       		moveq	#0,d3
000850C0 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
000850C4 1803                       		move.b	d3,d4
000850C6 6B00                       		bmi.s	loc_72244	; Branch if PSG
000850C8 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
000850CA E54B                       		lsl.w	#2,d3
000850CC 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000850D0 2A75 3000                  		movea.l	(a5,d3.w),a5
000850D4 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
000850D8 6000                       		bra.s	loc_7226E
000850DA                            ; ===========================================================================
000850DA                            
000850DA                            loc_72244:
000850DA E64B                       		lsr.w	#3,d3
000850DC 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000850E0 2A75 3000                  		movea.l	(a5,d3.w),a5
000850E4 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
000850E8 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
000850EC 6600                       		bne.s	loc_7226E	; Branch if not
000850EE 1004                       		move.b	d4,d0
000850F0 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000850F4 13C0 00C0 0011             		move.b	d0,(psg_input).l
000850FA 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000850FE 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085104                            
00085104                            loc_7226E:
00085104 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00085108 2A75 3000                  		movea.l	(a5,d3.w),a5
0008510C 244D                       		movea.l	a5,a2
0008510E 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00085110                            
00085110                            loc_72276:
00085110 429A                       		clr.l	(a2)+
00085112 51C8 FFFC                  		dbf	d0,loc_72276
00085116                            
00085116 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00085118 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
0008511C 7000                       		moveq	#0,d0
0008511E 3019                       		move.w	(a1)+,d0			; Track data pointer
00085120 D08B                       		add.l	a3,d0				; Relative pointer
00085122 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00085126 3B59 0008                  		move.w	(a1)+,8(a5)
0008512A 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
0008512E 6700                       		beq.s	@cont		; if not, branch
00085130 3F00                       		move.w	d0,-(sp)
00085132 1038 C902                  		move.b	($FFFFC902).w,d0
00085136 D12D 0008                  		add.b	d0,8(a5)
0008513A 301F                       		move.w	(sp)+,d0
0008513C                            		
0008513C                            @cont:
0008513C 1B7C 0001 000E             		move.b	#1,$E(a5)
00085142 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00085146 4A04                       		tst.b	d4				; Is this a PSG channel?
00085148 6B00                       		bmi.s	loc_722A8		; Branch if yes
0008514A 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085150 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00085154                            
00085154                            loc_722A8:
00085154 51CF FF68                  		dbf	d7,loc_72228
00085158                            
00085158 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0008515C 6A00                       		bpl.s	loc_722B8				; Branch if not
0008515E 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085164                            
00085164                            loc_722B8:
00085164 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00085168 6A00                       		bpl.s	locret_722C4						; Branch if not
0008516A 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085170                            
00085170                            locret_722C4:
00085170 4E75                       		rts	
00085172                            ; ===========================================================================
00085172                            
00085172                            loc_722C6:
00085172 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00085174 4E75                       		rts	
00085176                            ; ===========================================================================
00085176                            ; ---------------------------------------------------------------------------
00085176                            ; RAM addresses for FM and PSG channel variables used by the SFX
00085176                            ; ---------------------------------------------------------------------------
00085176                            ; dword_722CC: BGMChannelRAM:
00085176                            SFX_BGMChannelRAM:
00085176 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
0008517A 0000 0000                  		dc.l 0
0008517E 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085182 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00085186 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
0008518A 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
0008518E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00085192 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00085196                            ; dword_722EC: SFXChannelRAM:
00085196                            SFX_SFXChannelRAM:
00085196 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
0008519A 0000 0000                  		dc.l 0
0008519E 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000851A2 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
000851A6 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
000851AA 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
000851AE 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
000851B2 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
000851B6                            ; ===========================================================================
000851B6                            ; ---------------------------------------------------------------------------
000851B6                            ; Play GHZ waterfall sound
000851B6                            ; ---------------------------------------------------------------------------
000851B6                            ; Sound_D0toDF:
000851B6                            Sound_PlaySpecial:
000851B6 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000851BA 6600 0000                  		bne.w	@locret			; Return if so
000851BE 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000851C2 6600 0000                  		bne.w	@locret			; Exit if it is
000851C6 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000851CA 6600 0000                  		bne.w	@locret			; Exit if it is
000851CE 2079 0008 4792             		movea.l	(Go_SpecSoundIndex).l,a0
000851D4 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000851D8 E54F                       		lsl.w	#2,d7
000851DA 2670 7000                  		movea.l	(a0,d7.w),a3
000851DE 224B                       		movea.l	a3,a1
000851E0 7000                       		moveq	#0,d0
000851E2 3019                       		move.w	(a1)+,d0			; Voice pointer
000851E4 D08B                       		add.l	a3,d0				; Relative pointer
000851E6 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
000851EA 1A19                       		move.b	(a1)+,d5			; Dividing timing
000851EC                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
000851EC                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
000851EC 7E00                       		moveq	#0,d7	
000851EE 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
000851F0 5307                       		subq.b	#1,d7
000851F2 7C30                       		moveq	#TrackSz,d6
000851F4                            ; loc_72348:
000851F4                            @sfxloadloop:
000851F4 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000851F8 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000851FA 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085200 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085204 6000                       		bra.s	@sfxinitpsg
00085206                            ; ===========================================================================
00085206                            ; loc_7235A:
00085206                            @sfxoverridepsg:
00085206 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008520C 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085210                            ; loc_72364:
00085210                            @sfxinitpsg:
00085210 244D                       		movea.l	a5,a2
00085212 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00085214                            ; loc_72368:
00085214                            @clearsfxtrackram:
00085214 429A                       		clr.l	(a2)+
00085216 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0008521A                            
0008521A 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
0008521C 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00085220 7000                       		moveq	#0,d0
00085222 3019                       		move.w	(a1)+,d0			; Track data pointer
00085224 D08B                       		add.l	a3,d0				; Relative pointer
00085226 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0008522A 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
0008522E 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00085234 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00085238 4A04                       		tst.b	d4				; Is this a PSG channel?
0008523A 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
0008523C 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085242                            ; loc_72396:
00085242                            @sfxpsginitdone:
00085242 51CF FFB0                  		dbf	d7,@sfxloadloop
00085246                            
00085246 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
0008524A 6A00                       		bpl.s	@doneoverride					; Branch if not
0008524C 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085252                            ; loc_723A6:
00085252                            @doneoverride:
00085252 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00085256 6A00                       		bpl.s	@locret						; Branch if not
00085258 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008525E 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00085262 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085268 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
0008526C 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085272                            ; locret_723C6:
00085272                            @locret:
00085272 4E75                       		rts	
00085274                            ; End of function PlaySoundID
00085274                            
00085274                            ; ===========================================================================
00085274                            ; ---------------------------------------------------------------------------
00085274                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00085274                            ; ---------------------------------------------------------------------------
00085274                            ; The first block would have been used for overriding the music tracks
00085274                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00085274                            ; The third block would be used to set up the Special SFX
00085274                            ; The second block, however, is for the SFX tracks, which have a higher priority
00085274                            ; and would be checked for if they're currently playing
00085274                            ; If they are, then the third block would be used again, this time to mark
00085274                            ; the new tracks as 'currently playing'
00085274                            
00085274                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00085274                            
00085274                            ; BGMFM4PSG3RAM:
00085274                            ;SpecSFX_BGMChannelRAM:
00085274 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085278 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
0008527C                            ; SFXFM4PSG3RAM:
0008527C                            ;SpecSFX_SFXChannelRAM:
0008527C 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00085280 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00085284                            ; SpecialSFXFM4PSG3RAM:
00085284                            ;SpecSFX_SpecSFXChannelRAM:
00085284 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00085288 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
0008528C                            
0008528C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008528C                            
0008528C                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
0008528C                            StopSFX:
0008528C 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008528E 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00085292 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00085294                            ; loc_723EA:
00085294                            @trackloop:
00085294 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00085296 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
0008529A 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0008529E 7600                       		moveq	#0,d3
000852A0 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
000852A4 6B00                       		bmi.s	@trackpsg			; Branch if PSG
000852A6 4EBA 0000                  		jsr	FMNoteOff(pc)
000852AA 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
000852AE 6600                       		bne.s	@getfmpointer					; Branch if not
000852B0 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000852B4 6A00                       		bpl.s	@getfmpointer					; Branch if not
000852B6                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
000852B6                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
000852B6                            		; is playing its sound!
000852B6 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000852BA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
000852BE 6000                       		bra.s	@gotfmpointer
000852C0                            ; ===========================================================================
000852C0                            ; loc_72416:
000852C0                            @getfmpointer:
000852C0 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
000852C2 E50B                       		lsl.b	#2,d3
000852C4 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
000852C8 264D                       		movea.l	a5,a3
000852CA 2A70 3000                  		movea.l	(a0,d3.w),a5
000852CE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
000852D2                            ; loc_72428:
000852D2                            @gotfmpointer:
000852D2 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000852D6 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000852DA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000852DE 4EBA 0000                  		jsr	SetVoice(pc)
000852E2 2A4B                       		movea.l	a3,a5
000852E4 6000                       		bra.s	@nexttrack
000852E6                            ; ===========================================================================
000852E6                            ; loc_7243C:
000852E6                            @trackpsg:
000852E6 4EBA 0000                  		jsr	PSGNoteOff(pc)
000852EA 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
000852EE 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
000852F2 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000852F4 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
000852F8 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000852FA E60B                       		lsr.b	#3,d3
000852FC 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00085300 2070 3000                  		movea.l	(a0,d3.w),a0
00085304                            ; loc_7245A:
00085304                            @gotpsgpointer:
00085304 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085308 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
0008530C 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00085312 6600                       		bne.s	@nexttrack			; Branch if not
00085314 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
0008531C                            ; loc_72472:
0008531C                            @nexttrack:
0008531C DAFC 0030                  		adda.w	#TrackSz,a5
00085320 51CF FF72                  		dbf	d7,@trackloop
00085324                            
00085324 4E75                       		rts	
00085326                            ; End of function StopSFX
00085326                            
00085326                            
00085326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085326                            
00085326                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00085326                            StopSpecialSFX:
00085326 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008532A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008532C 6A00                       		bpl.s	@fadedfm		; Branch if not
0008532E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085332 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085336 6600                       		bne.s	@fadedfm		; Branch if not
00085338 4EBA 0000                  		jsr	SendFMNoteOff(pc)
0008533C 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085340 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085344 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085348 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008534A 6A00                       		bpl.s	@fadedfm		; Branch if not
0008534C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085350 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085354 4EBA 0000                  		jsr	SetVoice(pc)
00085358                            ; loc_724AE:
00085358                            @fadedfm:
00085358 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
0008535C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008535E 6A00                       		bpl.s	@fadedpsg		; Branch if not
00085360 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085364 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085368 6600                       		bne.s	@fadedpsg		; Return if not
0008536A 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
0008536E 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00085372 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085376 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0008537A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008537C 6A00                       		bpl.s	@fadedpsg		; Return if not
0008537E 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00085384 6600                       		bne.s	@fadedpsg			; Return if not
00085386 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
0008538E                            ; locret_724E4:
0008538E                            @fadedpsg:
0008538E 4E75                       		rts	
00085390                            ; End of function StopSpecialSFX
00085390                            
00085390                            ; ===========================================================================
00085390                            ; ---------------------------------------------------------------------------
00085390                            ; Fade out music
00085390                            ; ---------------------------------------------------------------------------
00085390                            ; Sound_E0:
00085390                            FadeOutMusic:
00085390 4EBA FEFA                  		jsr	StopSFX(pc)
00085394 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00085398 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
0008539E 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
000853A4 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
000853A8 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
000853AC 4E75                       		rts	
000853AE                            
000853AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000853AE                            
000853AE                            ; sub_72504:
000853AE                            DoFadeOut:
000853AE 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
000853B2 6700                       		beq.s	@continuefade		; Branch if yes
000853B4 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
000853B8 4E75                       		rts	
000853BA                            ; ===========================================================================
000853BA                            ; loc_72510:
000853BA                            @continuefade:
000853BA 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
000853BE 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
000853C2 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
000853C8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000853CC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000853CE                            ; loc_72524:
000853CE                            @fmloop:
000853CE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000853D0 6A00                       		bpl.s	@nextfm			; Branch if not
000853D2 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000853D6 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
000853D8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000853DC 6000                       		bra.s	@nextfm
000853DE                            ; ===========================================================================
000853DE                            ; loc_72534:
000853DE                            @sendfmtl:
000853DE 4EBA 0000                  		jsr	SendVoiceTL(pc)
000853E2                            ; loc_72538:
000853E2                            @nextfm:
000853E2 DAFC 0030                  		adda.w	#TrackSz,a5
000853E6 51CF FFE6                  		dbf	d7,@fmloop
000853EA                            
000853EA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000853EC                            ; loc_72542:
000853EC                            @psgloop:
000853EC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000853EE 6A00                       		bpl.s	@nextpsg		; branch if not
000853F0 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000853F4 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
000853FA 6500                       		blo.s	@sendpsgvol		; Branch if not
000853FC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085400 6000                       		bra.s	@nextpsg
00085402                            ; ===========================================================================
00085402                            ; loc_72558:
00085402                            @sendpsgvol:
00085402 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00085406 4EBA 0000                  		jsr	SetPSGVolume(pc)
0008540A                            ; loc_72560:
0008540A                            @nextpsg:
0008540A DAFC 0030                  		adda.w	#TrackSz,a5
0008540E 51CF FFDC                  		dbf	d7,@psgloop
00085412                            
00085412 4E75                       		rts	
00085414                            ; End of function DoFadeOut
00085414                            
00085414                            
00085414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085414                            
00085414                            ; sub_7256A:
00085414                            FMSilenceAll:
00085414 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00085416 7028                       		moveq	#$28,d0		; FM key on/off register
00085418                            ; loc_7256E:
00085418                            @noteoffloop:
00085418 1203                       		move.b	d3,d1
0008541A 4EBA 0000                  		jsr	WriteFMI(pc)
0008541E 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00085420 4EBA 0000                  		jsr	WriteFMI(pc)
00085424 51CB FFF2                  		dbf	d3,@noteoffloop
00085428                            
00085428 7040                       		moveq	#$40,d0		; Set TL on FM channels...
0008542A 727F                       		moveq	#$7F,d1		; ... to total attenuation...
0008542C 7802                       		moveq	#2,d4		; ... for all 3 channels...
0008542E                            ; loc_72584:
0008542E                            @channelloop:
0008542E 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00085430                            ; loc_72586:
00085430                            @channeltlloop:
00085430 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00085434 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00085438 5840                       		addq.w	#4,d0		; Next TL operator
0008543A 51CB FFF4                  		dbf	d3,@channeltlloop
0008543E                            
0008543E 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00085442 51CC FFEA                  		dbf	d4,@channelloop
00085446                            
00085446 4E75                       		rts	
00085448                            ; End of function FMSilenceAll
00085448                            
00085448                            ; ===========================================================================
00085448                            ; ---------------------------------------------------------------------------
00085448                            ; Stop music
00085448                            ; ---------------------------------------------------------------------------
00085448                            ; Sound_E4: StopSoundAndMusic:
00085448                            StopAllSound:
00085448 702B                       		moveq	#$2B,d0		; Enable/disable DAC
0008544A 123C 0080                  		move.b	#$80,d1		; Enable DAC
0008544E 4EBA 0000                  		jsr	WriteFMI(pc)
00085452 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00085454 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00085456 4EBA 0000                  		jsr	WriteFMI(pc)
0008545A 204E                       		movea.l	a6,a0
0008545C                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
0008545C                            		; Remove the '-$10' to fix this.
0008545C 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00085460                            ; loc_725B6:
00085460                            @clearramloop:
00085460 4298                       		clr.l	(a0)+
00085462 51C8 FFFC                  		dbf	d0,@clearramloop
00085466                            
00085466 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
0008546C 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00085470 6000 0000                  		bra.w	PSGSilenceAll
00085474                            
00085474                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085474                            
00085474                            ; sub_725CA:
00085474                            InitMusicPlayback:
00085474 204E                       		movea.l	a6,a0
00085476                            		; Save several values
00085476 1216                       		move.b	v_sndprio(a6),d1
00085478 142E 0027                  		move.b	f_1up_playing(a6),d2
0008547C 162E 002A                  		move.b	f_speedup(a6),d3
00085480 182E 0026                  		move.b	v_fadein_counter(a6),d4
00085484                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00085484 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00085488 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
0008548C                            ; loc_725E4:
0008548C                            @clearramloop:
0008548C 4298                       		clr.l	(a0)+
0008548E 51C8 FFFC                  		dbf	d0,@clearramloop
00085492                            
00085492                            		; Restore the values saved above
00085492 1C81                       		move.b	d1,v_sndprio(a6)
00085494 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00085498 1D43 002A                  		move.b	d3,f_speedup(a6)
0008549C 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
000854A0 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
000854A4 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000854AA                            		; DANGER! This silences ALL channels, even the ones being used
000854AA                            		; by SFX, and not music! @sendfmnoteoff does this already, and
000854AA                            		; doesn't affect SFX channels, either.
000854AA                            		; This should be replaced with an 'rts'.
000854AA 4EBA FF68                  		jsr	FMSilenceAll(pc)
000854AE 6000 0000                  		bra.w	PSGSilenceAll
000854B2                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
000854B2                            		; don't do a very good job of setting up the music tracks.
000854B2                            		; Tracks that aren't defined in a music file's header don't have
000854B2                            		; their channels defined, meaning @sendfmnoteoff won't silence
000854B2                            		; hardware properly. In combination with removing the above
000854B2                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
000854B2                            		; notes.
000854B2                            		; To fix this, I suggest using this code, instead of an 'rts':
000854B2                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
000854B2                            		;lea	FMDACInitBytes(pc),a2
000854B2                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
000854B2                            		;bsr.s	@writeloop
000854B2                            		;lea	PSGInitBytes(pc),a2
000854B2                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
000854B2                            
000854B2                            ;@writeloop:
000854B2                            		;move.b	(a2)+,(a1)		; Write track's channel byte
000854B2                            		;lea	TrackSz(a1),a1		; Next track
000854B2                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
000854B2                            
000854B2                            		;rts
000854B2                            	
000854B2                            ; End of function InitMusicPlayback
000854B2                            
000854B2                            
000854B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854B2                            
000854B2                            ; sub_7260C:
000854B2                            TempoWait:
000854B2 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
000854B8 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
000854BC 7030                       		moveq	#TrackSz,d0
000854BE 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
000854C0                            ; loc_7261A:
000854C0                            @tempoloop:
000854C0 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
000854C2 D0C0                       		adda.w	d0,a0	; Advance to next track
000854C4 51C9 FFFA                  		dbf	d1,@tempoloop
000854C8                            
000854C8 4E75                       		rts	
000854CA                            ; End of function TempoWait
000854CA                            
000854CA                            ; ===========================================================================
000854CA                            ; ---------------------------------------------------------------------------
000854CA                            ; Speed	up music
000854CA                            ; ---------------------------------------------------------------------------
000854CA                            ; Sound_E2:
000854CA                            SpeedUpMusic:
000854CA 4A2E 0027                  		tst.b	f_1up_playing(a6)
000854CE 6600                       		bne.s	@speedup_1up
000854D0 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
000854D6 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
000854DC 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
000854E2 4E75                       		rts	
000854E4                            ; ===========================================================================
000854E4                            ; loc_7263E:
000854E4                            @speedup_1up:
000854E4 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
000854EA 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000854F0 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000854F6 4E75                       		rts	
000854F8                            ; ===========================================================================
000854F8                            ; ---------------------------------------------------------------------------
000854F8                            ; Change music back to normal speed
000854F8                            ; ---------------------------------------------------------------------------
000854F8                            ; Sound_E3:
000854F8                            SlowDownMusic:
000854F8 4A2E 0027                  		tst.b	f_1up_playing(a6)
000854FC 6600                       		bne.s	@slowdown_1up
000854FE 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00085504 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
0008550A 422E 002A                  		clr.b	f_speedup(a6)
0008550E 4E75                       		rts	
00085510                            ; ===========================================================================
00085510                            ; loc_7266A:
00085510                            @slowdown_1up:
00085510 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00085516 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0008551C 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00085520 4E75                       		rts	
00085522                            
00085522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085522                            
00085522                            ; sub_7267C:
00085522                            DoFadeIn:
00085522 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00085526 6700                       		beq.s	@continuefade		; Branch if yes
00085528 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
0008552C 4E75                       		rts	
0008552E                            ; ===========================================================================
0008552E                            ; loc_72688:
0008552E                            @continuefade:
0008552E 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00085532 6700                       		beq.s	@fadedone		; Branch if yes
00085534 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00085538 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
0008553E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085542 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085544                            ; loc_7269E:
00085544                            @fmloop:
00085544 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085546 6A00                       		bpl.s	@nextfm			; Branch if not
00085548 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0008554C 4EBA 0000                  		jsr	SendVoiceTL(pc)
00085550                            ; loc_726AA:
00085550                            @nextfm:
00085550 DAFC 0030                  		adda.w	#TrackSz,a5
00085554 51CF FFEE                  		dbf	d7,@fmloop
00085558 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
0008555A                            ; loc_726B4:
0008555A                            @psgloop:
0008555A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008555C 6A00                       		bpl.s	@nextpsg		; Branch if not
0008555E 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085562 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00085566 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
0008556A 6500                       		blo.s	@sendpsgvol		; Branch if yes
0008556C 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0008556E                            ; loc_726C8:
0008556E                            @sendpsgvol:
0008556E 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085572                            ; loc_726CC:
00085572                            @nextpsg:
00085572 DAFC 0030                  		adda.w	#TrackSz,a5
00085576 51CF FFE2                  		dbf	d7,@psgloop
0008557A 4E75                       		rts	
0008557C                            ; ===========================================================================
0008557C                            ; loc_726D6:
0008557C                            @fadedone:
0008557C 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00085582 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00085586 4E75                       		rts	
00085588                            ; End of function DoFadeIn
00085588                            
00085588                            ; ===========================================================================
00085588                            ; loc_726E2:
00085588                            FMNoteOn:
00085588 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
0008558C 6600                       		bne.s	@locret		; Return if so
0008558E 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085592 6600                       		bne.s	@locret		; Return if so
00085594 7028                       		moveq	#$28,d0		; Note on/off register
00085596 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0008559A 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0008559E 6000 0000                  		bra.w	WriteFMI
000855A2                            ; ===========================================================================
000855A2                            ; locret_726FC:
000855A2                            @locret:
000855A2 4E75                       		rts	
000855A4                            
000855A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855A4                            
000855A4                            ; sub_726FE:
000855A4                            FMNoteOff:
000855A4 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
000855A8 6600                       		bne.s	locret_72714	; Return if yes
000855AA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000855AE 6600                       		bne.s	locret_72714	; Return if yes
000855B0                            ; loc_7270A:
000855B0                            SendFMNoteOff:
000855B0 7028                       		moveq	#$28,d0		; Note on/off register
000855B2 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
000855B6 6000 0000                  		bra.w	WriteFMI
000855BA                            ; ===========================================================================
000855BA                            
000855BA                            locret_72714:
000855BA 4E75                       		rts	
000855BC                            ; End of function FMNoteOff
000855BC                            
000855BC                            ; ===========================================================================
000855BC                            ; loc_72716:
000855BC                            WriteFMIorIIMain:
000855BC 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
000855C0 6600                       		bne.s	@locret		; Return if yes
000855C2 6000 0000                  		bra.w	WriteFMIorII
000855C6                            ; ===========================================================================
000855C6                            ; locret_72720:
000855C6                            @locret:
000855C6 4E75                       		rts	
000855C8                            
000855C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855C8                            
000855C8                            ; sub_72722:
000855C8                            WriteFMIorII:
000855C8 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
000855CE 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
000855D0 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
000855D4                            ; End of function WriteFMIorII
000855D4                            
000855D4                            
000855D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855D4                            
000855D4                            ; The reason I think this is an *early* SMPS 68k Type 1b
000855D4                            ; is because this subroutine is the one from Type 1a:
000855D4                            ; other Type 1b drivers have a newer, optimised version.
000855D4                            ; The driver itself is Type 1b, with this odd exception.
000855D4                            
000855D4                            ; sub_7272E:
000855D4                            WriteFMI:
000855D4 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000855DA 0802 0007                  		btst	#7,d2		; Is FM busy?
000855DE 66F4                       		bne.s	WriteFMI	; Loop if so
000855E0 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
000855E6 4E71                       		nop	
000855E8 4E71                       		nop	
000855EA 4E71                       		nop	
000855EC                            ; loc_72746:
000855EC                            @waitloop:
000855EC 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000855F2 0802 0007                  		btst	#7,d2		; Is FM busy?
000855F6 66F4                       		bne.s	@waitloop	; Loop if so
000855F8                            
000855F8 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000855FE 4E75                       		rts	
00085600                            ; End of function WriteFMI
00085600                            
00085600                            ; ===========================================================================
00085600                            ; loc_7275A:
00085600                            WriteFMIIPart:
00085600 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00085604 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00085608 D002                       		add.b	d2,d0			; Add in to destination register
0008560A                            
0008560A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008560A                            
0008560A                            ; sub_72764:
0008560A                            WriteFMII:
0008560A 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085610 0802 0007                  		btst	#7,d2		; Is FM busy?
00085614 66F4                       		bne.s	WriteFMII	; Loop if so
00085616 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
0008561C 4E71                       		nop	
0008561E 4E71                       		nop	
00085620 4E71                       		nop	
00085622                            ; loc_7277C:
00085622                            @waitloop:
00085622 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085628 0802 0007                  		btst	#7,d2		; Is FM busy?
0008562C 66F4                       		bne.s	@waitloop	; Loop if so
0008562E                            
0008562E 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00085634 4E75                       		rts	
00085636                            ; End of function WriteFMII
00085636                            
00085636                            ; ===========================================================================
00085636                            ; ---------------------------------------------------------------------------
00085636                            ; FM Note Values: b-0 to a#8
00085636                            ; ---------------------------------------------------------------------------
00085636                            ; word_72790: FM_Notes:
00085636                            FMFrequencies:
00085636 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
0008564E 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085666 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0008567E 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085696 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
000856AE 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
000856C6 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
000856DE 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000856F6                            
000856F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856F6                            
000856F6                            ; sub_72850:
000856F6                            PSGUpdateTrack:
000856F6 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000856FA 6600                       		bne.s	@notegoing
000856FC 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00085700 4EBA 0000                  		jsr	PSGDoNext(pc)
00085704 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00085708 6000 0000                  		bra.w	PSGDoVolFX
0008570C                            ; ===========================================================================
0008570C                            ; loc_72866:
0008570C                            @notegoing:
0008570C 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00085710 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00085714 4EBA F4EA                  		jsr	DoModulation(pc)
00085718 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
0008571C 4E75                       		rts
0008571E                            ; End of function PSGUpdateTrack
0008571E                            
0008571E                            
0008571E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008571E                            
0008571E                            ; sub_72878:
0008571E                            PSGDoNext:
0008571E 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00085722 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00085726                            ; loc_72880:
00085726                            @noteloop:
00085726 7A00                       		moveq	#0,d5
00085728 1A1C                       		move.b	(a4)+,d5	; Get byte from track
0008572A 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0008572E 6500                       		blo.s	@gotnote	; Branch if not
00085730 4EBA 0000                  		jsr	CoordFlag(pc)
00085734 60F0                       		bra.s	@noteloop
00085736                            ; ===========================================================================
00085736                            ; loc_72890:
00085736                            @gotnote:
00085736 4A05                       		tst.b	d5		; Is it a note?
00085738 6A00                       		bpl.s	@gotduration	; Branch if not
0008573A 4EBA 0000                  		jsr	PSGSetFreq(pc)
0008573E 1A1C                       		move.b	(a4)+,d5	; Get another byte
00085740 4A05                       		tst.b	d5		; Is it a duration?
00085742 6A00                       		bpl.s	@gotduration	; Branch if yes
00085744 534C                       		subq.w	#1,a4		; Put byte back
00085746 6000 F452                  		bra.w	FinishTrackUpdate
0008574A                            ; ===========================================================================
0008574A                            ; loc_728A4:
0008574A                            @gotduration:
0008574A 4EBA F42E                  		jsr	SetDuration(pc)
0008574E 6000 F44A                  		bra.w	FinishTrackUpdate
00085752                            ; End of function PSGDoNext
00085752                            
00085752                            
00085752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085752                            
00085752                            ; sub_728AC:
00085752                            PSGSetFreq:
00085752 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085756 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085758 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
0008575C 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00085760 E34D                       		lsl.w	#1,d5
00085762 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085766 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
0008576C 6000 F42C                  		bra.w	FinishTrackUpdate
00085770                            ; ===========================================================================
00085770                            ; loc_728CA:
00085770                            @restpsg:
00085770 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085774 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
0008577A 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0008577E 6000 0000                  		bra.w	PSGNoteOff
00085782                            ; End of function PSGSetFreq
00085782                            
00085782                            
00085782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085782                            
00085782                            ; sub_728DC:
00085782                            PSGDoNoteOn:
00085782 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085786 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085788                            ; End of function PSGDoNoteOn
00085788                            
00085788                            
00085788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085788                            
00085788                            ; sub_728E2:
00085788                            PSGUpdateFreq:
00085788 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
0008578C 4880                       		ext.w	d0
0008578E DC40                       		add.w	d0,d6		; Add to frequency
00085790 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085794 6600                       		bne.s	@locret		; Return if yes
00085796 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0008579A 6600                       		bne.s	@locret		; Return if yes
0008579C 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
000857A0 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
000857A4 6600                       		bne.s	@notnoise	; Branch if not
000857A6 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
000857AA                            ; loc_72904:
000857AA                            @notnoise:
000857AA 3206                       		move.w	d6,d1
000857AC 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
000857B0 8001                       		or.b	d1,d0		; Latch tone data to channel
000857B2 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
000857B4 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
000857B8 13C0 00C0 0011             		move.b	d0,(psg_input).l
000857BE 13C6 00C0 0011             		move.b	d6,(psg_input).l
000857C4                            ; locret_7291E:
000857C4                            @locret:
000857C4 4E75                       		rts	
000857C6                            ; End of function PSGUpdateFreq
000857C6                            
000857C6                            ; ===========================================================================
000857C6                            ; loc_72920:
000857C6                            PSGSetRest:
000857C6 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
000857CA 4E75                       		rts	
000857CC                            
000857CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857CC                            
000857CC                            ; sub_72926:
000857CC                            PSGUpdateVolFX:
000857CC 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
000857D0 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
000857D4                            ; loc_7292E:
000857D4                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
000857D4 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
000857D8 7000                       		moveq	#0,d0
000857DA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
000857DE 6700                       		beq.s	SetPSGVolume
000857E0 2079 0008 47A2             		movea.l	(Go_PSGIndex).l,a0
000857E6 5340                       		subq.w	#1,d0
000857E8 E548                       		lsl.w	#2,d0
000857EA 2070 0000                  		movea.l	(a0,d0.w),a0
000857EE 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
000857F2 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000857F6 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000857FA 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000857FE 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00085800 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00085804 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00085806                            ; loc_72960:
00085806                            @gotflutter:
00085806 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00085808 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
0008580C 6500                       		blo.s	SetPSGVolume	; Branch if not
0008580E 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00085810                            ; End of function PSGUpdateVolFX
00085810                            
00085810                            
00085810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085810                            
00085810                            ; sub_7296A:
00085810                            SetPSGVolume:
00085810 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085814 6600                       		bne.s	locret_7298A	; Return if so
00085816 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008581A 6600                       		bne.s	locret_7298A	; Return if so
0008581C 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00085820 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00085822                            ; loc_7297C:
00085822                            PSGSendVolume:
00085822 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00085826 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
0008582A 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085830                            
00085830                            locret_7298A:
00085830 4E75                       		rts	
00085832                            ; ===========================================================================
00085832                            ; loc_7298C: PSGCheckNoteFill:
00085832                            PSGCheckNoteTimeout:
00085832 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00085836 67EA                       		beq.s	PSGSendVolume			; Branch if not
00085838 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
0008583C 66E4                       		bne.s	PSGSendVolume			; Branch if not
0008583E 4E75                       		rts	
00085840                            ; End of function SetPSGVolume
00085840                            
00085840                            ; ===========================================================================
00085840                            ; loc_7299A: FlutterDone:
00085840                            VolEnvHold:
00085840 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00085844 4E75                       		rts	
00085846                            
00085846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085846                            
00085846                            ; sub_729A0:
00085846                            PSGNoteOff:
00085846 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008584A 6600                       		bne.s	locret_729B4	; Return if so
0008584C                            ; loc_729A6:
0008584C                            SendPSGNoteOff:
0008584C 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00085850 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085854 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008585A                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0008585A                            		; risk of music accidentally playing noise because it can't detect if
0008585A                            		; the PSG4/noise channel needs muting on track initialisation.
0008585A                            		; S&K's driver fixes it by doing this:
0008585A 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
0008585E 6600                       		bne.s	locret_729B4
00085860 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085868                            
00085868                            locret_729B4:
00085868 4E75                       		rts	
0008586A                            ; End of function PSGNoteOff
0008586A                            
0008586A                            
0008586A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008586A                            
0008586A                            ; sub_729B6:
0008586A                            PSGSilenceAll:
0008586A 41F9 00C0 0011             		lea	(psg_input).l,a0
00085870 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085874 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085878 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
0008587C 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085880 4E75                       		rts	
00085882                            ; End of function PSGSilenceAll
00085882                            
00085882                            ; ===========================================================================
00085882                            ; word_729CE:
00085882                            PSGFrequencies:
00085882 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085892 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
000858A2 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
000858B2 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
000858C2 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
000858D2 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000858E2 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
000858F2 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00085902 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
0008590E                            
0008590E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008590E                            
0008590E                            ; sub_72A5A:
0008590E                            CoordFlag:
0008590E 0445 00E0                  		subi.w	#$E0,d5
00085912 E54D                       		lsl.w	#2,d5
00085914 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085918                            ; End of function CoordFlag
00085918                            
00085918                            ; ===========================================================================
00085918                            ; loc_72A64:
00085918                            coordflagLookup:
00085918 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
0008591C                            ; ===========================================================================
0008591C 6000 0000                  		bra.w	cfDetune		; $E1
00085920                            ; ===========================================================================
00085920 6000 0000                  		bra.w	cfSetCommunication	; $E2
00085924                            ; ===========================================================================
00085924 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085928                            ; ===========================================================================
00085928 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
0008592C                            ; ===========================================================================
0008592C 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085930                            ; ===========================================================================
00085930 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085934                            ; ===========================================================================
00085934 6000 0000                  		bra.w	cfHoldNote		; $E7
00085938                            ; ===========================================================================
00085938 6000 0000                  		bra.w	cfNoteTimeout		; $E8
0008593C                            ; ===========================================================================
0008593C 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085940                            ; ===========================================================================
00085940 6000 0000                  		bra.w	cfSetTempo		; $EA
00085944                            ; ===========================================================================
00085944 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085948                            ; ===========================================================================
00085948 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
0008594C                            ; ===========================================================================
0008594C 6000 0000                  		bra.w	cfClearPush		; $ED
00085950                            ; ===========================================================================
00085950 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085954                            ; ===========================================================================
00085954 6000 0000                  		bra.w	cfSetVoice		; $EF
00085958                            ; ===========================================================================
00085958 6000 0000                  		bra.w	cfModulation		; $F0
0008595C                            ; ===========================================================================
0008595C 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085960                            ; ===========================================================================
00085960 6000 0000                  		bra.w	cfStopTrack		; $F2
00085964                            ; ===========================================================================
00085964 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085968                            ; ===========================================================================
00085968 6000 0000                  		bra.w	cfDisableModulation	; $F4
0008596C                            ; ===========================================================================
0008596C 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085970                            ; ===========================================================================
00085970 6000 0000                  		bra.w	cfJumpTo		; $F6
00085974                            ; ===========================================================================
00085974 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085978                            ; ===========================================================================
00085978 6000 0000                  		bra.w	cfJumpToGosub		; $F8
0008597C                            ; ===========================================================================
0008597C 6000 0000                  		bra.w	cfOpF9			; $F9
00085980                            ; ===========================================================================
00085980                            ; loc_72ACC:
00085980                            cfPanningAMSFMS:
00085980 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085982 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085986 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085988 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
0008598C 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085990 8200                       		or.b	d0,d1			; Mask in new value
00085992 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085996 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0008599A 6000 FC20                  		bra.w	WriteFMIorIIMain
0008599E                            ; ===========================================================================
0008599E                            
0008599E                            locret_72AEA:
0008599E 4E75                       		rts	
000859A0                            ; ===========================================================================
000859A0                            ; loc_72AEC: cfAlterNotes:
000859A0                            cfDetune:
000859A0 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
000859A4 4E75                       		rts	
000859A6                            ; ===========================================================================
000859A6                            ; loc_72AF2: cfUnknown1:
000859A6                            cfSetCommunication:
000859A6 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
000859AA 4E75                       		rts	
000859AC                            ; ===========================================================================
000859AC                            ; loc_72AF8:
000859AC                            cfJumpReturn:
000859AC 7000                       		moveq	#0,d0
000859AE 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
000859B2 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
000859B6 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
000859BE 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
000859C0 5800                       		addq.b	#4,d0			; Actually 'pop' value
000859C2 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
000859C6 4E75                       		rts	
000859C8                            ; ===========================================================================
000859C8                            ; loc_72B14:
000859C8                            cfFadeInToPrevious:
000859C8 204E                       		movea.l	a6,a0
000859CA 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000859CE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000859D2                            ; loc_72B1E:
000859D2                            @restoreramloop:
000859D2 20D9                       		move.l	(a1)+,(a0)+
000859D4 51C8 FFFC                  		dbf	d0,@restoreramloop
000859D8                            
000859D8 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000859DE 264D                       		movea.l	a5,a3
000859E0 1C3C 0028                  		move.b	#$28,d6
000859E4 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000859E8 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000859EA 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000859EE                            ; loc_72B3A:
000859EE                            @fmloop:
000859EE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000859F2 6700                       		beq.s	@nextfm		; Branch if not
000859F4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000859F8 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000859FC 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085A00 6600                       		bne.s	@nextfm		; Branch if yes
00085A02 7000                       		moveq	#0,d0
00085A04 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085A08 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085A0C 4EBA 0000                  		jsr	SetVoice(pc)
00085A10                            ; loc_72B5C:
00085A10                            @nextfm:
00085A10 DAFC 0030                  		adda.w	#TrackSz,a5
00085A14 51CF FFD8                  		dbf	d7,@fmloop
00085A18                            
00085A18 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085A1A                            ; loc_72B66:
00085A1A                            @psgloop:
00085A1A 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085A1E 6700                       		beq.s	@nextpsg	; Branch if not
00085A20 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085A24 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085A28 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085A2C                            ; loc_72B78:
00085A2C                            @nextpsg:
00085A2C DAFC 0030                  		adda.w	#TrackSz,a5
00085A30 51CF FFE8                  		dbf	d7,@psgloop
00085A34                            		
00085A34 2A4B                       		movea.l	a3,a5
00085A36 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085A3C 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085A42 422E 0027                  		clr.b	f_1up_playing(a6)
00085A46 33FC 0000 00A1 1100        		startZ80
00085A4E 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085A50 4E75                       		rts	
00085A52                            ; ===========================================================================
00085A52                            ; loc_72B9E:
00085A52                            cfSetTempoDivider:
00085A52 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085A56 4E75                       		rts	
00085A58                            ; ===========================================================================
00085A58                            ; loc_72BA4: cfSetVolume:
00085A58                            cfChangeFMVolume:
00085A58 101C                       		move.b	(a4)+,d0		; Get parameter
00085A5A D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085A5E 6000 0000                  		bra.w	SendVoiceTL
00085A62                            ; ===========================================================================
00085A62                            ; loc_72BAE: cfPreventAttack:
00085A62                            cfHoldNote:
00085A62 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085A66 4E75                       		rts	
00085A68                            ; ===========================================================================
00085A68                            ; loc_72BB4: cfNoteFill
00085A68                            cfNoteTimeout:
00085A68 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085A6C 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085A70 4E75                       		rts	
00085A72                            ; ===========================================================================
00085A72                            ; loc_72BBE: cfAddKey:
00085A72                            cfChangeTransposition:
00085A72 101C                       		move.b	(a4)+,d0		; Get parameter
00085A74 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085A78 4E75                       		rts	
00085A7A                            ; ===========================================================================
00085A7A                            ; loc_72BC6:
00085A7A                            cfSetTempo:
00085A7A 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085A7E 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085A82 4E75                       		rts	
00085A84                            ; ===========================================================================
00085A84                            ; loc_72BD0: cfSetTempoMod:
00085A84                            cfSetTempoDividerAll:
00085A84 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085A88 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085A8A 7230                       		moveq	#TrackSz,d1
00085A8C 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085A8E                            ; loc_72BDA:
00085A8E                            @trackloop:
00085A8E 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085A92 D0C1                       		adda.w	d1,a0
00085A94 51CA FFF8                  		dbf	d2,@trackloop
00085A98                            
00085A98 4E75                       		rts	
00085A9A                            ; ===========================================================================
00085A9A                            ; loc_72BE6: cfChangeVolume:
00085A9A                            cfChangePSGVolume:
00085A9A 101C                       		move.b	(a4)+,d0		; Get volume change
00085A9C D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085AA0 4E75                       		rts	
00085AA2                            ; ===========================================================================
00085AA2                            ; loc_72BEE:
00085AA2                            cfClearPush:
00085AA2 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085AA6 4E75                       		rts	
00085AA8                            ; ===========================================================================
00085AA8                            ; loc_72BF4:
00085AA8                            cfStopSpecialFM4:
00085AA8 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085AAC 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085AB0 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085AB4 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085AB8 6B00                       		bmi.s	@locexit					; Branch if yes
00085ABA 264D                       		movea.l	a5,a3
00085ABC 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085AC0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085AC4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085AC8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085ACC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085AD0 4EBA 0000                  		jsr	SetVoice(pc)
00085AD4 2A4B                       		movea.l	a3,a5
00085AD6                            ; loc_72C22:
00085AD6                            @locexit:
00085AD6 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085AD8 4E75                       		rts	
00085ADA                            ; ===========================================================================
00085ADA                            ; loc_72C26:
00085ADA                            cfSetVoice:
00085ADA 7000                       		moveq	#0,d0
00085ADC 101C                       		move.b	(a4)+,d0		; Get new voice
00085ADE 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085AE2 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085AE6 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085AEA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085AEE 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085AF2 6700                       		beq.s	SetVoice		; If yes, branch
00085AF4 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085AF8 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085AFC 6B00                       		bmi.s	SetVoice		; If yes, branch
00085AFE 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085B02                            
00085B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B02                            
00085B02                            ; sub_72C4E:
00085B02                            SetVoice:
00085B02 5340                       		subq.w	#1,d0
00085B04 6B00                       		bmi.s	@havevoiceptr
00085B06 323C 0019                  		move.w	#25,d1
00085B0A                            ; loc_72C56:
00085B0A                            @voicemultiply:
00085B0A D2C1                       		adda.w	d1,a1
00085B0C 51C8 FFFC                  		dbf	d0,@voicemultiply
00085B10                            ; loc_72C5C:
00085B10                            @havevoiceptr:
00085B10 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085B12 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085B16 1801                       		move.b	d1,d4
00085B18 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085B1C 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085B20 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085B24 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085B26                            ; loc_72C72:
00085B26                            @sendvoiceloop:
00085B26 101A                       		move.b	(a2)+,d0
00085B28 1219                       		move.b	(a1)+,d1
00085B2A 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085B2E 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085B32                            
00085B32 7A03                       		moveq	#3,d5
00085B34 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085B38 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085B3C 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085B40                            ; loc_72C8C:
00085B40                            @sendtlloop:
00085B40 101A                       		move.b	(a2)+,d0
00085B42 1219                       		move.b	(a1)+,d1
00085B44 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085B46 6400                       		bcc.s	@sendtl		; Branch if not
00085B48 D203                       		add.b	d3,d1		; Include additional attenuation
00085B4A                            ; loc_72C96:
00085B4A                            @sendtl:
00085B4A 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085B4E 51CD FFF0                  		dbf	d5,@sendtlloop
00085B52                            		
00085B52 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085B56 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085B5A 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085B5E                            
00085B5E                            locret_72CAA:
00085B5E 4E75                       		rts	
00085B60                            ; End of function SetVoice
00085B60                            
00085B60                            ; ===========================================================================
00085B60                            ; byte_72CAC:
00085B60 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085B68                            
00085B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B68                            
00085B68                            ; sub_72CB4:
00085B68                            SendVoiceTL:
00085B68 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085B6C 6600                       		bne.s	@locret		; Return if so
00085B6E 7000                       		moveq	#0,d0
00085B70 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085B74 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085B78 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085B7C 6700                       		beq.s	@gotvoiceptr
00085B7E                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085B7E                            		; of a6!
00085B7E 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085B82 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085B86 6B00                       		bmi.s	@gotvoiceptr
00085B88 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085B8C                            ; loc_72CD8:
00085B8C                            @gotvoiceptr:
00085B8C 5340                       		subq.w	#1,d0
00085B8E 6B00                       		bmi.s	@gotvoice
00085B90 323C 0019                  		move.w	#25,d1
00085B94                            ; loc_72CE0:
00085B94                            @voicemultiply:
00085B94 D2C1                       		adda.w	d1,a1
00085B96 51C8 FFFC                  		dbf	d0,@voicemultiply
00085B9A                            ; loc_72CE6:
00085B9A                            @gotvoice:
00085B9A D2FC 0015                  		adda.w	#21,a1				; Want TL
00085B9E 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085BA2 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085BA6 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085BAA 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085BAE 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085BB2 6B00                       		bmi.s	@locret				; If negative, stop
00085BB4 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085BB6                            ; loc_72D02:
00085BB6                            @sendtlloop:
00085BB6 101A                       		move.b	(a2)+,d0
00085BB8 1219                       		move.b	(a1)+,d1
00085BBA E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085BBC 6400                       		bcc.s	@senttl		; Branch if not
00085BBE D203                       		add.b	d3,d1		; Include additional attenuation
00085BC0 6500                       		bcs.s	@senttl		; Branch on overflow
00085BC2 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085BC6                            ; loc_72D12:
00085BC6                            @senttl:
00085BC6 51CD FFEE                  		dbf	d5,@sendtlloop
00085BCA                            ; locret_72D16:
00085BCA                            @locret:
00085BCA 4E75                       		rts	
00085BCC                            ; End of function SendVoiceTL
00085BCC                            
00085BCC                            ; ===========================================================================
00085BCC                            ; byte_72D18:
00085BCC                            FMInstrumentOperatorTable:
00085BCC 30                         		dc.b  $30		; Detune/multiple operator 1
00085BCD 38                         		dc.b  $38		; Detune/multiple operator 3
00085BCE 34                         		dc.b  $34		; Detune/multiple operator 2
00085BCF 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085BD0 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085BD1 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085BD2 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085BD3 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085BD4 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085BD5 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085BD6 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085BD7 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085BD8 70                         		dc.b  $70		; Secondary decay rate operator 1
00085BD9 78                         		dc.b  $78		; Secondary decay rate operator 3
00085BDA 74                         		dc.b  $74		; Secondary decay rate operator 2
00085BDB 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085BDC 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085BDD 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085BDE 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085BDF 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085BE0                            FMInstrumentOperatorTable_End
00085BE0                            ; byte_72D2C:
00085BE0                            FMInstrumentTLTable:
00085BE0 40                         		dc.b  $40		; Total level operator 1
00085BE1 48                         		dc.b  $48		; Total level operator 3
00085BE2 44                         		dc.b  $44		; Total level operator 2
00085BE3 4C                         		dc.b  $4C		; Total level operator 4
00085BE4                            FMInstrumentTLTable_End
00085BE4                            ; ===========================================================================
00085BE4                            ; loc_72D30:
00085BE4                            cfModulation:
00085BE4 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085BE8 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085BEC 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085BF0 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085BF4 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085BF8 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085BFA E208                       		lsr.b	#1,d0				; ... divided by 2...
00085BFC 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085C00 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085C04 4E75                       		rts	
00085C06                            ; ===========================================================================
00085C06                            ; loc_72D52:
00085C06                            cfEnableModulation:
00085C06 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085C0A 4E75                       		rts	
00085C0C                            ; ===========================================================================
00085C0C                            ; loc_72D58:
00085C0C                            cfStopTrack:
00085C0C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085C10 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085C14 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085C18 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085C1A 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085C1E 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085C22 4EBA F980                  		jsr	FMNoteOff(pc)
00085C26 6000                       		bra.s	@stoppedchannel
00085C28                            ; ===========================================================================
00085C28                            ; loc_72D74:
00085C28                            @stoppsg:
00085C28 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085C2C                            ; loc_72D78:
00085C2C                            @stoppedchannel:
00085C2C 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085C30 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085C34 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085C36 7000                       		moveq	#0,d0
00085C38 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085C3C 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085C3E 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085C42 264D                       		movea.l	a5,a3
00085C44 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085C48 6600                       		bne.s	@getpointer		; Branch if not
00085C4A 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085C4E 6A00                       		bpl.s	@getpointer		; Branch if not
00085C50 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085C54 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085C58 6000                       		bra.s	@gotpointer
00085C5A                            ; ===========================================================================
00085C5A                            ; loc_72DA8:
00085C5A                            @getpointer:
00085C5A 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085C5C E508                       		lsl.b	#2,d0
00085C5E 2A70 0000                  		movea.l	(a0,d0.w),a5
00085C62 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085C64 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085C66 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085C6A                            ; loc_72DB8:
00085C6A                            @gotpointer:
00085C6A 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085C6E 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085C72 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085C76 4EBA FE8A                  		jsr	SetVoice(pc)
00085C7A                            ; loc_72DC8:
00085C7A                            @novoiceupd:
00085C7A 2A4B                       		movea.l	a3,a5
00085C7C 6000                       		bra.s	@locexit
00085C7E                            ; ===========================================================================
00085C7E                            ; loc_72DCC:
00085C7E                            @getpsgptr:
00085C7E 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085C82 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085C84 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085C86 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085C8A 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085C8C 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085C90 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085C92                            ; loc_72DE0:
00085C92                            @getchannelptr:
00085C92 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085C96 E608                       		lsr.b	#3,d0
00085C98 2070 0000                  		movea.l	(a0,d0.w),a0
00085C9C                            ; loc_72DEA:
00085C9C                            @gotchannelptr:
00085C9C 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085CA0 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085CA4 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085CAA 6600                       		bne.s	@locexit			; Branch if not
00085CAC 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085CB4                            ; loc_72E02:
00085CB4                            @locexit:
00085CB4 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085CB6 4E75                       		rts	
00085CB8                            ; ===========================================================================
00085CB8                            ; loc_72E06:
00085CB8                            cfSetPSGNoise:
00085CB8 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085CBE 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085CC2 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085CC6 6600                       		bne.s	@locret				; Return if yes
00085CC8 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085CD0                            ; locret_72E1E:
00085CD0                            @locret:
00085CD0 4E75                       		rts	
00085CD2                            ; ===========================================================================
00085CD2                            ; loc_72E20:
00085CD2                            cfDisableModulation:
00085CD2 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085CD6 4E75                       		rts	
00085CD8                            ; ===========================================================================
00085CD8                            ; loc_72E26:
00085CD8                            cfSetPSGTone:
00085CD8 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085CDC 4E75                       		rts	
00085CDE                            ; ===========================================================================
00085CDE                            ; loc_72E2C:
00085CDE                            cfJumpTo:
00085CDE 101C                       		move.b	(a4)+,d0	; High byte of offset
00085CE0 E148                       		lsl.w	#8,d0		; Shift it into place
00085CE2 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085CE4 D8C0                       		adda.w	d0,a4		; Add to current position
00085CE6 534C                       		subq.w	#1,a4		; Put back one byte
00085CE8 4E75                       		rts	
00085CEA                            ; ===========================================================================
00085CEA                            ; loc_72E38:
00085CEA                            cfRepeatAtPos:
00085CEA 7000                       		moveq	#0,d0
00085CEC 101C                       		move.b	(a4)+,d0			; Loop index
00085CEE 121C                       		move.b	(a4)+,d1			; Repeat count
00085CF0 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085CF4 6600                       		bne.s	@loopexists			; Branch if yes
00085CF6 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085CFA                            ; loc_72E48:
00085CFA                            @loopexists:
00085CFA 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085CFE 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085D00 544C                       		addq.w	#2,a4				; Skip target address
00085D02 4E75                       		rts	
00085D04                            ; ===========================================================================
00085D04                            ; loc_72E52:
00085D04                            cfJumpToGosub:
00085D04 7000                       		moveq	#0,d0
00085D06 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085D0A 5900                       		subq.b	#4,d0				; Add space for another target
00085D0C 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085D10 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085D14 60C8                       		bra.s	cfJumpTo
00085D16                            ; ===========================================================================
00085D16                            ; loc_72E64:
00085D16                            cfOpF9:
00085D16 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085D1A 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085D1E 4EBA F8B4                  		jsr	WriteFMI(pc)
00085D22 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085D26 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085D2A 6000 F8A8                  		bra.w	WriteFMI
00085D2E                            ; ===========================================================================
00085D2E                            
00085D2E                            Kos_Z80:
00085D2E                            		incbin	"sound\z80.bin", 0, $15
00085D43 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085D44                            		incbin	"sound\z80.bin", $16, 6
00085D4A 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085D4B                            		incbin	"sound\z80.bin", $1D, $93
00085DDE 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085DE0                            		incbin	"sound\z80.bin", $B2, 1
00085DE1 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085DE3                            		incbin	"sound\z80.bin", $B5, $16AB
00087484                            		even
00087484                            
00087484                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
000887A8 00                         		even
000887A8                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0008A030                            		even
0008A030                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000919B0 00                         		even
000919B0                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000931C4 00                         		even
000931C4                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00093F6A                            		even
00093F6A                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
00095322                            		even
00095322                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095C1A 00                         		even
00095C1A                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095C1A                            extralifejingle_Header:
00095C1A                            	smpsHeaderStartSong 1
00095C1C 0703                       	smpsHeaderChan      $07, $03
00095C1E 0100                       	smpsHeaderTempo     $01, $00
00095C20                            
00095C24 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095C28 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095C2C 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095C30 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095C34 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095C38 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095C4E                            
00095C4E                            ; DAC Data
00095C4E                            extralifejingle_DAC:
00095C4E 807F 55                    	dc.b	nRst, $7F, $55
00095C51 E4                         	smpsFade
00095C52                            ; PSG1 Data
00095C52                            extralifejingle_PSG1:
00095C52                            ; PSG2 Data
00095C52                            extralifejingle_PSG2:
00095C52                            ; PSG3 Data
00095C52                            extralifejingle_PSG3:
00095C52 F2                         	smpsStop
00095C53                            
00095C53                            ; FM1 Data
00095C53                            extralifejingle_FM1:
00095C53 EF00                       	smpsSetvoice        $00
00095C55 E616                       	smpsAlterVol        $16
00095C57 E0C0                       	smpsPan             panCenter, $00
00095C59 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095C65 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095C69 F2                         	smpsStop
00095C6A                            
00095C6A                            ; FM2 Data
00095C6A                            extralifejingle_FM2:
00095C6A EF01                       	smpsSetvoice        $01
00095C6C E616                       	smpsAlterVol        $16
00095C6E E0C0                       	smpsPan             panCenter, $00
00095C70 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095C7C A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095C80 F2                         	smpsStop
00095C81                            
00095C81                            ; FM3 Data
00095C81                            extralifejingle_FM3:
00095C81 EF01                       	smpsSetvoice        $01
00095C83 E616                       	smpsAlterVol        $16
00095C85 E0C0                       	smpsPan             panCenter, $00
00095C87 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095C93 B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095C97 F2                         	smpsStop
00095C98                            
00095C98                            ; FM4 Data
00095C98                            extralifejingle_FM4:
00095C98 EF02                       	smpsSetvoice        $02
00095C9A E0C0                       	smpsPan             panCenter, $00
00095C9C 8001                       	dc.b	nRst, $01
00095C9E E616                       	smpsAlterVol        $16
00095CA0 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095CAC C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095CB0 F2                         	smpsStop
00095CB1                            
00095CB1                            ; FM5 Data
00095CB1                            extralifejingle_FM5:
00095CB1 EF03                       	smpsSetvoice        $03
00095CB3 E602                       	smpsAlterVol        $02
00095CB5 E0C0                       	smpsPan             panCenter, $00
00095CB7 8001                       	dc.b	nRst, $01
00095CB9 EF05                       	smpsSetvoice        $05
00095CBB E60A                       	smpsAlterVol        $0A
00095CBD E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095CC9 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095CD5 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095CE1 C1C4 80                    	dc.b	nE5, nG5, nRst
00095CE4 F2                         	smpsStop
00095CE5                            
00095CE5                            ; FM6 Data
00095CE5                            extralifejingle_FM6:
00095CE5 EF04                       	smpsSetvoice        $04
00095CE7 E607                       	smpsAlterVol        $07
00095CE9 E0C0                       	smpsPan             panCenter, $00
00095CEB 8001                       	dc.b	nRst, $01
00095CED EF06                       	smpsSetvoice        $06
00095CEF E6F9                       	smpsAlterVol        $F9
00095CF1 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095CF8 F2                         	smpsStop
00095CF9                            
00095CF9                            extralifejingle_Voices:
00095CF9                            ;	Voice $00
00095CF9                            ;	$3A
00095CF9                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095CF9                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095CF9                            	smpsVcAlgorithm     $02
00095CF9                            	smpsVcFeedback      $07
00095CF9                            	smpsVcUnusedBits    $00
00095CF9                            	smpsVcDetune        $03, $07, $07, $03
00095CF9                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095CF9                            	smpsVcRateScale     $00, $00, $00, $00
00095CF9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095CF9                            	smpsVcAmpMod        $00, $00, $00, $00
00095CF9                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095CF9                            	smpsVcDecayRate2    $00, $00, $00, $00
00095CF9                            	smpsVcDecayLevel    $00, $00, $00, $00
00095CF9                            	smpsVcReleaseRate   $05, $03, $03, $03
00095D12                            
00095D12                            ;	Voice $01
00095D12                            ;	$3A
00095D12                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095D12                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095D12                            	smpsVcAlgorithm     $02
00095D12                            	smpsVcFeedback      $07
00095D12                            	smpsVcUnusedBits    $00
00095D12                            	smpsVcDetune        $03, $07, $07, $03
00095D12                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095D12                            	smpsVcRateScale     $00, $00, $00, $00
00095D12                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095D12                            	smpsVcAmpMod        $00, $00, $00, $00
00095D12                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095D12                            	smpsVcDecayRate2    $00, $00, $00, $00
00095D12                            	smpsVcDecayLevel    $00, $00, $00, $00
00095D12                            	smpsVcReleaseRate   $05, $03, $03, $03
00095D2B                            
00095D2B                            ;	Voice $02
00095D2B                            ;	$3A
00095D2B                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095D2B                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095D2B                            	smpsVcAlgorithm     $02
00095D2B                            	smpsVcFeedback      $07
00095D2B                            	smpsVcUnusedBits    $00
00095D2B                            	smpsVcDetune        $03, $07, $07, $03
00095D2B                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095D2B                            	smpsVcRateScale     $00, $00, $00, $00
00095D2B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095D2B                            	smpsVcAmpMod        $00, $00, $00, $00
00095D2B                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095D2B                            	smpsVcDecayRate2    $00, $00, $00, $00
00095D2B                            	smpsVcDecayLevel    $00, $00, $00, $00
00095D2B                            	smpsVcReleaseRate   $05, $03, $03, $03
00095D44                            
00095D44                            ;	Voice $03
00095D44                            ;	$00
00095D44                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095D44                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095D44                            	smpsVcAlgorithm     $00
00095D44                            	smpsVcFeedback      $00
00095D44                            	smpsVcUnusedBits    $00
00095D44                            	smpsVcDetune        $00, $00, $00, $00
00095D44                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095D44                            	smpsVcRateScale     $00, $00, $00, $00
00095D44                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095D44                            	smpsVcAmpMod        $00, $00, $00, $00
00095D44                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095D44                            	smpsVcDecayRate2    $00, $00, $00, $00
00095D44                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095D44                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095D5D                            
00095D5D                            ;	Voice $04
00095D5D                            ;	$03
00095D5D                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095D5D                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095D5D                            	smpsVcAlgorithm     $03
00095D5D                            	smpsVcFeedback      $00
00095D5D                            	smpsVcUnusedBits    $00
00095D5D                            	smpsVcDetune        $03, $04, $04, $06
00095D5D                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095D5D                            	smpsVcRateScale     $00, $00, $00, $00
00095D5D                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095D5D                            	smpsVcAmpMod        $00, $00, $00, $00
00095D5D                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095D5D                            	smpsVcDecayRate2    $06, $04, $00, $01
00095D5D                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095D5D                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095D76                            
00095D76                            ;	Voice $05
00095D76                            ;	$34
00095D76                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095D76                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095D76                            	smpsVcAlgorithm     $04
00095D76                            	smpsVcFeedback      $06
00095D76                            	smpsVcUnusedBits    $00
00095D76                            	smpsVcDetune        $07, $00, $07, $03
00095D76                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095D76                            	smpsVcRateScale     $00, $01, $00, $02
00095D76                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095D76                            	smpsVcAmpMod        $00, $00, $00, $00
00095D76                            	smpsVcDecayRate1    $08, $07, $07, $14
00095D76                            	smpsVcDecayRate2    $00, $00, $00, $00
00095D76                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095D76                            	smpsVcReleaseRate   $07, $07, $04, $06
00095D8F                            
00095D8F                            ;	Voice $06
00095D8F                            ;	$30
00095D8F                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095D8F                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095D8F                            	smpsVcAlgorithm     $00
00095D8F                            	smpsVcFeedback      $06
00095D8F                            	smpsVcUnusedBits    $00
00095D8F                            	smpsVcDetune        $00, $00, $00, $00
00095D8F                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095D8F                            	smpsVcRateScale     $01, $00, $00, $02
00095D8F                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095D8F                            	smpsVcAmpMod        $00, $00, $00, $00
00095D8F                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095D8F                            	smpsVcDecayRate2    $08, $05, $18, $08
00095D8F                            	smpsVcDecayLevel    $01, $00, $00, $06
00095D8F                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095DA8                            
00095DA8                            
00095DA8                            		even
00095DA8                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
00096600 00                         		even
00096600                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096B20                            		even
00096B20                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096DE2 00                         		even
00096DE2                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097C3A                            		even
00097C3A                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00097E86 00                         		even
00097E86                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000981BC 00                         		even
000981BC                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00098368 00                         		even
00098368                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00098576 00                         		even
00098576                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
0009885A 00                         		even
0009885A                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00098F8A 00                         		even
00098F8A                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00099058                            		even
00099058                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000994C6 00                         		even
000994C6                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
00099FBC                            		even
00099FBC                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AB9E                            		even
0009AB9E                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009BEA4 00                         		even
0009BEA4                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009BEA4                            PasswordEntry_Header:
0009BEA4                            	smpsHeaderStartSong 3
0009BEA6 0603                       	smpsHeaderChan      $06, $03
0009BEA8 0105                       	smpsHeaderTempo     $01, $05
0009BEAA                            
0009BEAE 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009BEB2 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009BEB6 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009BEBA 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009BEBE 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009BED4                            
0009BED4                            ; FM1 Data
0009BED4                            PasswordEntry_FM1:
0009BED4 EF00                       	smpsSetvoice        $00
0009BEDB                            
0009BEDB                            PasswordEntry_Jump00:
0009BEDB CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009BEE7 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009BEF3 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009BEFF C918 CB                    	dc.b	nC6, $18, nD6
0009BF02 F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009BF05                            
0009BF05                            ; FM2 Data
0009BF05                            PasswordEntry_FM2:
0009BF05 EF01                       	smpsSetvoice        $01
0009BF07                            
0009BF07                            PasswordEntry_Jump03:
0009BF07 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009BF13 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009BF1F AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009BF2B AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009BF35 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009BF38                            
0009BF38                            ; FM3 Data
0009BF38                            PasswordEntry_FM3:
0009BF38 E080                       	smpsPan             panLeft, $00
0009BF3A EF02                       	smpsSetvoice        $02
0009BF3C                            
0009BF3C                            PasswordEntry_Jump02:
0009BF3C C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009BF48 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009BF54 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009BF60 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009BF6C C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009BF78 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009BF84 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009BF90 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009BF9C BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009BFA8 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BFB4 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BFBC F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009BFBF                            
0009BFBF                            ; FM4 Data
0009BFBF                            PasswordEntry_FM4:
0009BFBF E040                       	smpsPan             panRight, $00
0009BFC1 EF02                       	smpsSetvoice        $02
0009BFC3                            
0009BFC3                            PasswordEntry_Jump01:
0009BFC3 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009BFCF BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009BFDB BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009BFE7 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009BFF3 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009BFFF BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009C00B C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C017 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009C023 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009C02F BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C03B BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C043 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009C046                            
0009C046                            ; FM5 Data
0009C046                            PasswordEntry_FM5:
0009C046 EF00                       	smpsSetvoice        $00
0009C048 E1FB                       	smpsAlterNote       $FB
0009C04A 800C                       	dc.b	nRst, $0C
0009C04C F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009C04F                            
0009C04F                            ; PSG1 Data
0009C04F                            PasswordEntry_PSG1:
0009C04F C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C05B CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C067 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C073 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C07F C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C08B C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C097 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C09B F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C09E                            
0009C09E                            ; PSG2 Data
0009C09E                            PasswordEntry_PSG2:
0009C09E E1FF                       	smpsAlterNote       $FF
0009C0A0 800C                       	dc.b	nRst, $0C
0009C0A2 F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C0A5                            
0009C0A5                            ; PSG3 Data
0009C0A5                            PasswordEntry_PSG3:
0009C0A5 F502                       	smpsPSGvoice        fTone_02
0009C0A7 F3E7                       	smpsPSGform         $E7
0009C0A9 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C0B5 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C0C1 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C0C8 F503                       	smpsPSGvoice        fTone_03
0009C0CA C5                         	dc.b	nAb5
0009C0CB F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C0CE                            
0009C0CE                            ; DAC Data
0009C0CE                            PasswordEntry_DAC:
0009C0CE 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C0DA 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C0E2 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C0E7 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C0F3 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C0FB                            
0009C0FB                            PasswordEntry_Loop00:
0009C0FB 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C107 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C10F F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C114 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C120 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C12A F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C12D                            
0009C12D                            PasswordEntry_Voices:
0009C12D                            ;	Voice $00
0009C12D                            ;	$04
0009C12D                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C12D                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C12D                            	smpsVcAlgorithm     $04
0009C12D                            	smpsVcFeedback      $00
0009C12D                            	smpsVcUnusedBits    $00
0009C12D                            	smpsVcDetune        $00, $00, $00, $00
0009C12D                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C12D                            	smpsVcRateScale     $00, $00, $00, $00
0009C12D                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C12D                            	smpsVcAmpMod        $00, $00, $00, $00
0009C12D                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C12D                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C12D                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C12D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C146                            
0009C146                            ;	Voice $01
0009C146                            ;	$39
0009C146                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C146                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C146                            	smpsVcAlgorithm     $01
0009C146                            	smpsVcFeedback      $07
0009C146                            	smpsVcUnusedBits    $00
0009C146                            	smpsVcDetune        $00, $04, $06, $00
0009C146                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C146                            	smpsVcRateScale     $01, $01, $01, $00
0009C146                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C146                            	smpsVcAmpMod        $00, $00, $00, $00
0009C146                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C146                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C146                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C146                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C15F                            
0009C15F                            ;	Voice $02
0009C15F                            ;	$2C
0009C15F                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C15F                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C15F                            	smpsVcAlgorithm     $04
0009C15F                            	smpsVcFeedback      $05
0009C15F                            	smpsVcUnusedBits    $00
0009C15F                            	smpsVcDetune        $00, $02, $00, $04
0009C15F                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C15F                            	smpsVcRateScale     $00, $00, $00, $00
0009C15F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C15F                            	smpsVcAmpMod        $00, $00, $00, $00
0009C15F                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C15F                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C15F                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C15F                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C178                            
0009C178                            
0009C178                            		even		
0009C178                            ; ---------------------------------------------------------------------------
0009C178                            ; Sound	effect pointers
0009C178                            ; ---------------------------------------------------------------------------
0009C178                            SoundIndex:
0009C178 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009C17C 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009C180 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009C184 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009C188 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009C18C 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009C190 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009C194 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009C198 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009C19C 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009C1A0 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009C1A4 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009C1A8 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009C1AC 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009C1B0 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009C1B4 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009C1B8 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009C1BC 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009C1C0 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009C1C4 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009C1C8 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009C1CC 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009C1D0 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009C1D4 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009C1D8 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009C1DC 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009C1E0 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009C1E4 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009C1E8 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009C1EC 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009C1F0 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009C1F4 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009C1F8 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009C1FC 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009C200 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009C204 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009C208 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009C20C 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009C210 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009C214 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009C218 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009C21C 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009C220 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009C224 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009C228 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009C22C 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009C230 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009C234 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009C238                            ptr_sndend
0009C238                            ; ---------------------------------------------------------------------------
0009C238                            ; Special sound effect pointers
0009C238                            ; ---------------------------------------------------------------------------
0009C238                            SpecSoundIndex:
0009C238 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009C23C 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009C240 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009C244 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009C248 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009C24C 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009C250                            ptr_specend
0009C250                            SoundA0:	include	"sound/sfx/Jump.asm"
0009C250                            SndA0_Jump_Header:
0009C250                            	smpsHeaderStartSong 1
0009C252 01                         	smpsHeaderTempoSFX  $01
0009C253 01                         	smpsHeaderChanSFX   $01
0009C254                            
0009C25A                            
0009C25A                            ; PSG2 Data
0009C25A                            SndA0_Jump_PSG2:
0009C25A F500                       	smpsPSGvoice        $00
0009C25C 9E05                       	dc.b	nF2, $05
0009C263 A315                       	dc.b	nBb2, $15
0009C265 F2                         	smpsStop
0009C266                            
0009C266                            ; Song seems to not use any FM voices
0009C266                            SndA0_Jump_Voices:
0009C266                            SndA0_Jump_Voices:
0009C266                            		even
0009C266                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009C290                            		even
0009C290                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009C290                            SndDF_Header:
0009C290                            	smpsHeaderStartSong 3
0009C292 01                         	smpsHeaderTempoSFX  $01
0009C293 01                         	smpsHeaderChanSFX   $01
0009C294                            
0009C29A                            
0009C29A                            ; FM5 Data
0009C29A                            SndDF_FM5:
0009C29A EF00                       	smpsSetvoice        $00
0009C29C                            
0009C29C                            SndDF_Loop00:
0009C29C F800 00                    	smpsCall            SndDF_Call00
0009C29F E905                       	smpsAlterPitch $05
0009C2A1 E608                       	smpsFMAlterVol      $08
0009C2A3 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009C2A8 E9EC                       	smpsAlterPitch $EC
0009C2AA E6E0                       	smpsFMAlterVol      $E0
0009C2AC F2                         	smpsStop
0009C2AD                            
0009C2AD                            SndDF_Call00:
0009C2AD 9902                       	dc.b	nC2, $02
0009C2AF E901                       	smpsAlterPitch $01
0009C2B1 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C2B6 E9F6                       	smpsAlterPitch $F6
0009C2B8 E3                         	smpsReturn
0009C2B9                            
0009C2B9                            SndDF_Voices:
0009C2B9                            ;	Voice $00
0009C2B9                            ;	$07
0009C2B9                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C2B9                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C2B9                            	smpsVcAlgorithm     $07
0009C2B9                            	smpsVcFeedback      $00
0009C2B9                            	smpsVcUnusedBits    $00
0009C2B9                            	smpsVcDetune        $00, $00, $00, $00
0009C2B9                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C2B9                            	smpsVcRateScale     $00, $00, $00, $00
0009C2B9                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C2B9                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2B9                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C2B9                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C2B9                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C2B9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2D2                            		even
0009C2D2                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C304                            		even
0009C304                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C348 00                         		even
0009C348                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C348                            SndD2_Header:
0009C348                            	smpsHeaderStartSong 3
0009C34A 01                         	smpsHeaderTempoSFX  $01
0009C34B 01                         	smpsHeaderChanSFX   $01
0009C34C                            
0009C352                            
0009C352                            ; FM4 Data
0009C352                            SndD2_FM4:
0009C352 EF00                       	smpsSetvoice        $00
0009C359 C645                       	dc.b	nA5, $45
0009C35B F2                         	smpsStop
0009C35C                            
0009C35C                            SndD2_Voices:
0009C35C                            ;	Voice $00
0009C35C                            ;	$04
0009C35C                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C35C                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C35C                            	smpsVcAlgorithm     $04
0009C35C                            	smpsVcFeedback      $00
0009C35C                            	smpsVcUnusedBits    $00
0009C35C                            	smpsVcDetune        $04, $00, $00, $02
0009C35C                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C35C                            	smpsVcRateScale     $00, $00, $00, $00
0009C35C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C35C                            	smpsVcAmpMod        $00, $00, $00, $00
0009C35C                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C35C                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C35C                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C35C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C376 00                         		even
0009C376                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C3A6                            		even
0009C3A6                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C3D6                            		even
0009C3D6                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C40A                            		even
0009C40A                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C41C                            		even
0009C41C                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C41C                            SndA2_Header:
0009C41C                            	smpsHeaderStartSong 3
0009C41E 01                         	smpsHeaderTempoSFX  $01
0009C41F 02                         	smpsHeaderChanSFX   $02
0009C420                            
0009C42C                            
0009C42C                            ; FM3 Data
0009C42C                            SndA2_FM3:
0009C42C EF00                       	smpsSetvoice        $00
0009C433 8106                       	dc.b	nC0, $06
0009C435                            
0009C435                            SndA2_Loop00:
0009C435 810E                       	dc.b	nC0, $0E
0009C437 E60E                       	smpsAlterVol      $0E
0009C439 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C43E F2                         	smpsStop
0009C43F                            
0009C43F                            ; FM4 Data
0009C43F                            SndA2_FM4:
0009C43F EF01                       	smpsSetvoice        $01
0009C441 A606 14                    	dc.b	nCs3, $06, $14
0009C444 F2                         	smpsStop
0009C445                            
0009C445                            SndA2_Voices:
0009C445                            ;	Voice $00
0009C445                            ;	$F9
0009C445                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C445                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C445                            	smpsVcAlgorithm     $01
0009C445                            	smpsVcFeedback      $07
0009C445                            	smpsVcUnusedBits    $03
0009C445                            	smpsVcDetune        $03, $01, $03, $02
0009C445                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C445                            	smpsVcRateScale     $00, $00, $00, $00
0009C445                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C445                            	smpsVcAmpMod        $00, $00, $00, $00
0009C445                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C445                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C445                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C445                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C45E                            
0009C45E                            ;	Voice $01
0009C45E                            ;	$00
0009C45E                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C45E                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C45E                            	smpsVcAlgorithm     $00
0009C45E                            	smpsVcFeedback      $00
0009C45E                            	smpsVcUnusedBits    $00
0009C45E                            	smpsVcDetune        $00, $00, $00, $00
0009C45E                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C45E                            	smpsVcRateScale     $00, $00, $03, $03
0009C45E                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C45E                            	smpsVcAmpMod        $00, $00, $00, $00
0009C45E                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C45E                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C45E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C45E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C478 00                         		even
0009C478                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C478                            Sound_3E_Header:
0009C478                            	smpsHeaderStartSong 3
0009C47A 01                         	smpsHeaderTempoSFX  $01
0009C47B 01                         	smpsHeaderChanSFX   $01
0009C47C                            
0009C482                            
0009C482                            ; FM5 Data
0009C482                            Sound_3E_3F_40_41_FM5:
0009C482 EF00                       	smpsSetvoice        $00
0009C484 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C489 F2                         	smpsStop
0009C48A                            
0009C48A                            Sound_3E_Voices:
0009C48A                            ;	Voice $00
0009C48A                            ;	$0C
0009C48A                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C48A                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C48A                            	smpsVcAlgorithm     $04
0009C48A                            	smpsVcFeedback      $01
0009C48A                            	smpsVcUnusedBits    $00
0009C48A                            	smpsVcDetune        $03, $03, $02, $00
0009C48A                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C48A                            	smpsVcRateScale     $00, $00, $00, $00
0009C48A                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C48A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C48A                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C48A                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C48A                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C48A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C4A3                            
0009C4A3                            
0009C4A4 00                         		even
0009C4A4                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C4D8                            		even
0009C4D8                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C50E                            		even
0009C50E                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C50E                            Sound_70_Header:
0009C50E                            	smpsHeaderStartSong 3
0009C510 01                         	smpsHeaderTempoSFX  $01
0009C511 02                         	smpsHeaderChanSFX   $02
0009C512                            
0009C51E                            
0009C51E                            ; FM5 Data
0009C51E                            Sound_70_FM5:
0009C51E EF00                       	smpsSetvoice        $00
0009C520 8001                       	dc.b	nRst, $01
0009C527 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C52B F2                         	smpsStop
0009C52C                            
0009C52C                            ; PSG3 Data
0009C52C                            Sound_70_PSG3:
0009C52C F500                       	smpsPSGvoice        sTone_0D
0009C52E 800B                       	dc.b	nRst, $0B
0009C530 F3E7                       	smpsPSGform         $E7
0009C532 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C535                            
0009C535                            Sound_70_Loop00:
0009C535 02                         	dc.b	$02
0009C536 EC01                       	smpsPSGAlterVol     $01
0009C538 E7                         	dc.b	smpsNoAttack
0009C539 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C53E F2                         	smpsStop
0009C53F                            
0009C53F                            Sound_70_Voices:
0009C53F                            ;	Voice $00
0009C53F                            ;	$FA
0009C53F                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C53F                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C53F                            	smpsVcAlgorithm     $02
0009C53F                            	smpsVcFeedback      $07
0009C53F                            	smpsVcUnusedBits    $03
0009C53F                            	smpsVcDetune        $00, $00, $00, $00
0009C53F                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C53F                            	smpsVcRateScale     $00, $00, $00, $00
0009C53F                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C53F                            	smpsVcAmpMod        $00, $00, $00, $00
0009C53F                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C53F                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C53F                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C53F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C558                            
0009C558                            
0009C558                            		even
0009C558                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C586                            		even
0009C586                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C5B8                            		even
0009C5B8                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C5E4                            		even
0009C5E4                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C634                            		even
0009C634                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C67E                            		even
0009C67E                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C6DA                            		even
0009C6DA                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C708                            		even
0009C708                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C708                            SpikesSFX_Header:
0009C708                            	smpsHeaderStartSong 3
0009C70A 01                         	smpsHeaderTempoSFX  $01
0009C70B 02                         	smpsHeaderChanSFX   $02
0009C70C                            
0009C718                            
0009C718                            ; FM6 Data
0009C718                            SndB7_FM4:
0009C718 EF01                       	smpsSetvoice        $01
0009C71F B105                       	dc.b	nC4, $05
0009C721 F1                         	smpsModOn
0009C722 E10A                       	smpsAlterNote       $0A
0009C724 E601                       	smpsAlterVol        $01
0009C726 F2                         	smpsStop
0009C727                            
0009C727                            ; FM5 Data
0009C727                            SndB7_FM5:
0009C727 8005                       	dc.b	nRst, $05			 
0009C729 EF00                       	smpsSetvoice        $00
0009C72B DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C731 F2                         	smpsStop
0009C732                            
0009C732                            SndB7_Voices:
0009C732                            ;	Voice $00
0009C732                            ;	$34
0009C732                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C732                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C732                            	smpsVcAlgorithm     $04
0009C732                            	smpsVcFeedback      $06
0009C732                            	smpsVcUnusedBits    $00
0009C732                            	smpsVcDetune        $0D, $00, $00, $00
0009C732                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C732                            	smpsVcRateScale     $00, $00, $00, $00
0009C732                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C732                            	smpsVcAmpMod        $00, $00, $00, $00
0009C732                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C732                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C732                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C732                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C74B                            
0009C74B                            ;	Voice $01
0009C74B                            ;	$FA
0009C74B                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C74B                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C74B                            	smpsVcAlgorithm     $02
0009C74B                            	smpsVcFeedback      $07
0009C74B                            	smpsVcUnusedBits    $03
0009C74B                            	smpsVcDetune        $03, $01, $03, $02
0009C74B                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C74B                            	smpsVcRateScale     $00, $00, $00, $00
0009C74B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C74B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C74B                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C74B                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C74B                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C74B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C764                            		even
0009C764                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C7A0                            		even
0009C7A0                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C7A0                            SndBD_Header:
0009C7A0                            	smpsHeaderStartSong 3
0009C7A2 01                         	smpsHeaderTempoSFX  $01
0009C7A3 01                         	smpsHeaderChanSFX   $01
0009C7A4                            
0009C7AA                            
0009C7AA                            ; FM6 Data
0009C7AA                            SndBD_FM3:
0009C7AA EF00                       	smpsSetvoice        $00
0009C7AC                            
0009C7AC                            SndBD_Loop00:
0009C7AC C009                       	dc.b	nEb5, $09
0009C7AE F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C7B3 F2                         	smpsStop
0009C7B4                            
0009C7B4                            SndBD_Voices:
0009C7B4                            ;	Voice $00
0009C7B4                            ;	$02
0009C7B4                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C7B4                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C7B4                            	smpsVcAlgorithm     $02
0009C7B4                            	smpsVcFeedback      $00
0009C7B4                            	smpsVcUnusedBits    $00
0009C7B4                            	smpsVcDetune        $00, $02, $05, $00
0009C7B4                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C7B4                            	smpsVcRateScale     $00, $00, $00, $00
0009C7B4                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C7B4                            	smpsVcAmpMod        $00, $00, $00, $00
0009C7B4                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C7B4                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C7B4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C7B4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C7CE 00                         		even
0009C7CE                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C7CE                            Sound_59_Header:
0009C7CE                            	smpsHeaderStartSong 3
0009C7D0 01                         	smpsHeaderTempoSFX  $01
0009C7D1 04                         	smpsHeaderChanSFX   $04
0009C7D2                            
0009C7EA                            
0009C7EA                            ; FM3 Data
0009C7EA                            Sound_59_FM3:
0009C7EA E040                       	smpsPan             panRight, $00
0009C7EC 8002                       	dc.b	nRst, $02
0009C7EE F600 00                    	smpsJump            Sound_59_FM4
0009C7F1                            
0009C7F1                            ; FM5 Data
0009C7F1                            Sound_59_FM5:
0009C7F1 E080                       	smpsPan             panLeft, $00
0009C7F3 8001                       	dc.b	nRst, $01
0009C7F5                            
0009C7F5                            ; FM4 Data
0009C7F5                            Sound_59_FM4:
0009C7F5 EF00                       	smpsSetvoice        $00
0009C7FC 8110                       	dc.b	nC0, $10
0009C7FE F2                         	smpsStop
0009C7FF                            
0009C7FF                            ; PSG3 Data
0009C7FF                            Sound_59_PSG3:
0009C804 F3E7                       	smpsPSGform         $E7
0009C806                            
0009C806                            Sound_59_Loop00:
0009C806 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C809 EC03                       	smpsPSGAlterVol     $03
0009C80B F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C810 F2                         	smpsStop
0009C811                            
0009C811                            Sound_59_Voices:
0009C811                            ;	Voice $00
0009C811                            ;	$F9
0009C811                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C811                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C811                            	smpsVcAlgorithm     $01
0009C811                            	smpsVcFeedback      $07
0009C811                            	smpsVcUnusedBits    $03
0009C811                            	smpsVcDetune        $03, $01, $03, $02
0009C811                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C811                            	smpsVcRateScale     $00, $00, $00, $00
0009C811                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C811                            	smpsVcAmpMod        $00, $00, $00, $00
0009C811                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C811                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C811                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C811                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C82A                            
0009C82A                            
0009C82A                            		even
0009C82A                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C852                            		even
0009C852                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009C87E                            		even
0009C87E                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009C87E                            Sound_B6_Header:
0009C87E                            	smpsHeaderStartSong 3
0009C880 01                         	smpsHeaderTempoSFX  $01
0009C881 02                         	smpsHeaderChanSFX   $02
0009C882                            
0009C88E                            
0009C88E                            ; FM5 Data
0009C88E                            Sound_B6_FM5:
0009C88E EF00                       	smpsSetvoice        $00
0009C895 CD0F                       	dc.b	nE6, $0F
0009C897 F2                         	smpsStop
0009C898                            
0009C898                            ; PSG3 Data
0009C898                            Sound_B6_PSG3:
0009C898 F507                       	smpsPSGvoice        sTone_1D
0009C89A 8006                       	dc.b	nRst, $06
0009C8A1 F3E7                       	smpsPSGform         $E7
0009C8A3 CD4F                       	dc.b	nE6, $4F
0009C8A5 F2                         	smpsStop
0009C8A6                            
0009C8A6                            Sound_B6_Voices:
0009C8A6                            ;	Voice $00
0009C8A6                            ;	$3D
0009C8A6                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009C8A6                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009C8A6                            	smpsVcAlgorithm     $05
0009C8A6                            	smpsVcFeedback      $07
0009C8A6                            	smpsVcUnusedBits    $00
0009C8A6                            	smpsVcDetune        $00, $00, $00, $00
0009C8A6                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009C8A6                            	smpsVcRateScale     $00, $00, $00, $00
0009C8A6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C8A6                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8A6                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009C8A6                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C8A6                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C8A6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C8BF                            
0009C8BF                            
0009C8C0 00                         		even
0009C8C0                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009C914                            		even
0009C914                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009C94E                            		even
0009C94E                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009C9C0                            		even
0009C9C0                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009C9EE                            		even
0009C9EE                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009CA28                            		even
0009CA28                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009CA28                            SndC1_Header:
0009CA28                            	smpsHeaderStartSong 3
0009CA2A 01                         	smpsHeaderTempoSFX  $01
0009CA2B 01                         	smpsHeaderChanSFX   $01
0009CA2C                            
0009CA32                            
0009CA32                            ; FM4 Data
0009CA32                            SndC1_FM4:
0009CA32 EF00                       	smpsSetvoice        $00
0009CA34 D506 40                    	dc.b	nC7, $06, $40
0009CA37 F2                         	smpsStop
0009CA38                            
0009CA38                            SndC1_Voices:
0009CA38                            ;	Voice $00
0009CA38                            ;	$38
0009CA38                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009CA38                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009CA38                            	smpsVcAlgorithm     $00
0009CA38                            	smpsVcFeedback      $07
0009CA38                            	smpsVcUnusedBits    $00
0009CA38                            	smpsVcDetune        $00, $00, $00, $00
0009CA38                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009CA38                            	smpsVcRateScale     $00, $00, $00, $00
0009CA38                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CA38                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA38                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009CA38                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CA38                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CA38                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA52 00                         		even
0009CA52                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009CACC                            		even
0009CACC                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009CAF4                            		even
0009CAF4                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009CAF4                            Sound_B0_Header:
0009CAF4                            	smpsHeaderStartSong 3
0009CAF6 01                         	smpsHeaderTempoSFX  $01
0009CAF7 03                         	smpsHeaderChanSFX   $03
0009CAF8                            
0009CB0A                            
0009CB0A                            ; FM5 Data
0009CB0A                            Sound_B0_FM5:
0009CB0A EF00                       	smpsSetvoice        $00
0009CB0C 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009CB12 F2                         	smpsStop
0009CB13                            
0009CB13                            ; FM4 Data
0009CB13                            Sound_B0_FM4:
0009CB13 EF01                       	smpsSetvoice        $01
0009CB15 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009CB19 F2                         	smpsStop
0009CB1A                            
0009CB1A                            ; FM3 Data
0009CB1A                            Sound_B0_FM3:
0009CB1A EF02                       	smpsSetvoice        $02
0009CB1C 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009CB23 F2                         	smpsStop
0009CB24                            
0009CB24                            Sound_B0_Voices:
0009CB24                            ;	Voice $00
0009CB24                            ;	$3B
0009CB24                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009CB24                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009CB24                            	smpsVcAlgorithm     $03
0009CB24                            	smpsVcFeedback      $07
0009CB24                            	smpsVcUnusedBits    $00
0009CB24                            	smpsVcDetune        $00, $00, $00, $00
0009CB24                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009CB24                            	smpsVcRateScale     $02, $00, $00, $00
0009CB24                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009CB24                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB24                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009CB24                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CB24                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CB24                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB3D                            
0009CB3D                            ;	Voice $01
0009CB3D                            ;	$04
0009CB3D                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009CB3D                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009CB3D                            	smpsVcAlgorithm     $04
0009CB3D                            	smpsVcFeedback      $00
0009CB3D                            	smpsVcUnusedBits    $00
0009CB3D                            	smpsVcDetune        $04, $07, $07, $03
0009CB3D                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009CB3D                            	smpsVcRateScale     $00, $00, $00, $00
0009CB3D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CB3D                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB3D                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009CB3D                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009CB3D                            	smpsVcDecayLevel    $00, $01, $00, $01
0009CB3D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB56                            
0009CB56                            ;	Voice $02
0009CB56                            ;	$3C
0009CB56                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009CB56                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009CB56                            	smpsVcAlgorithm     $04
0009CB56                            	smpsVcFeedback      $07
0009CB56                            	smpsVcUnusedBits    $00
0009CB56                            	smpsVcDetune        $00, $00, $00, $00
0009CB56                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009CB56                            	smpsVcRateScale     $00, $00, $00, $00
0009CB56                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009CB56                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB56                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009CB56                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009CB56                            	smpsVcDecayLevel    $02, $09, $09, $01
0009CB56                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB6F                            
0009CB6F                            
0009CB70 00                         		even
0009CB70                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009CBB2                            		even
0009CBB2                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009CBE0                            		even
0009CBE0                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009CBF2                            		even
0009CBF2                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009CC20                            		even
0009CC20                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009CC4E                            		even
0009CC4E                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009CC9A                            		even
0009CC9A                            SoundCC:	include	"sound/sfx/Spring.asm"
0009CC9A                            Spring_Header:
0009CC9A                            	smpsHeaderStartSong 1
0009CC9C 01                         	smpsHeaderTempoSFX  $01
0009CC9D 01                         	smpsHeaderChanSFX   $01
0009CC9E                            
0009CCA4                            
0009CCA4                            ; FM6 Data
0009CCA4                            Spring_FM6:
0009CCA4 EF00                       	smpsSetvoice        $00
0009CCA6 8001                       	dc.b	nRst, $01
0009CCAD B006                       	dc.b	nB3, $06
0009CCAF F4                         	smpsModOff
0009CCB0 EF01                       	smpsSetvoice        $01
0009CCB2                            
0009CCB2                            Spring_Loop00:
0009CCB2 BD02                       	dc.b	nC5, $02
0009CCB4 E601                       	smpsAlterVol      $01
0009CCB6 E7                         	dc.b	smpsNoAttack
0009CCB7 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CCBC F2                         	smpsStop
0009CCBD                            
0009CCBD                            Spring_Voices:
0009CCBD                            ;	Voice $00
0009CCBD                            ;	$20
0009CCBD                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CCBD                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CCBD                            	smpsVcAlgorithm     $00
0009CCBD                            	smpsVcFeedback      $04
0009CCBD                            	smpsVcUnusedBits    $00
0009CCBD                            	smpsVcDetune        $03, $03, $03, $03
0009CCBD                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CCBD                            	smpsVcRateScale     $02, $02, $03, $03
0009CCBD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCBD                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCBD                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CCBD                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CCBD                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CCBD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CCD6                            
0009CCD6                            ;	Voice $01
0009CCD6                            ;	$20
0009CCD6                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CCD6                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CCD6                            	smpsVcAlgorithm     $00
0009CCD6                            	smpsVcFeedback      $04
0009CCD6                            	smpsVcUnusedBits    $00
0009CCD6                            	smpsVcDetune        $03, $03, $03, $03
0009CCD6                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CCD6                            	smpsVcRateScale     $02, $02, $02, $02
0009CCD6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCD6                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCD6                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CCD6                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CCD6                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CCD6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CCF0 00                         		even
0009CCF0                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CCF0                            Snd99_Header:
0009CCF0                            	smpsHeaderStartSong 3
0009CCF2 01                         	smpsHeaderTempoSFX  $01
0009CCF3 01                         	smpsHeaderChanSFX   $01
0009CCF4                            
0009CCFA                            
0009CCFA                            ; FM4 Data
0009CCFA                            Snd99_FM4:
0009CCFA EF00                       	smpsSetvoice        $00
0009CCFC B502                       	dc.b	nE4, $02
0009CCFE F2                         	smpsStop
0009CCFF                            
0009CCFF                            Snd99_Voices:
0009CCFF                            ;	Voice $00
0009CCFF                            ;	$07
0009CCFF                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CCFF                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CCFF                            	smpsVcAlgorithm     $07
0009CCFF                            	smpsVcFeedback      $00
0009CCFF                            	smpsVcUnusedBits    $00
0009CCFF                            	smpsVcDetune        $00, $00, $00, $00
0009CCFF                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CCFF                            	smpsVcRateScale     $00, $00, $00, $00
0009CCFF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCFF                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCFF                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CCFF                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CCFF                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CCFF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD18                            		even
0009CD18                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CD46                            		even
0009CD46                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CD46                            SignpostCD_Header:
0009CD46                            	smpsHeaderStartSong 3
0009CD48 01                         	smpsHeaderTempoSFX  $01
0009CD49 02                         	smpsHeaderChanSFX   $02
0009CD4A                            
0009CD56                            
0009CD56                            ; FM5 Data
0009CD56                            Snd9D_FM5:
0009CD56 8004                       	dc.b	nRst, $04
0009CD58                            
0009CD58                            ; FM4 Data
0009CD58                            Snd9D_FM4:
0009CD58 EF00                       	smpsSetvoice        $00
0009CD5A                            
0009CD5A                            Snd9D_Loop00:
0009CD5A B405                       	dc.b	nEb4, $05
0009CD5C E604                       	smpsFMAlterVol      $04
0009CD5E F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009CD63 F2                         	smpsStop
0009CD64                            
0009CD64                            Snd9D_Voices:
0009CD64                            ;	Voice $00
0009CD64                            ;	$F4
0009CD64                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009CD64                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009CD64                            	smpsVcAlgorithm     $04
0009CD64                            	smpsVcFeedback      $06
0009CD64                            	smpsVcUnusedBits    $03
0009CD64                            	smpsVcDetune        $00, $00, $00, $00
0009CD64                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009CD64                            	smpsVcRateScale     $00, $00, $00, $00
0009CD64                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CD64                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD64                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009CD64                            	smpsVcDecayRate2    $08, $05, $00, $00
0009CD64                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009CD64                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD7E 00                         		even
0009CD7E                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009CDB8                            		even
0009CDB8                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009CDB8                            Sound_41_Header:
0009CDB8                            	smpsHeaderStartSong 3
0009CDBA 01                         	smpsHeaderTempoSFX  $01
0009CDBB 01                         	smpsHeaderChanSFX   $01
0009CDBC                            
0009CDC2                            	
0009CDC2                            Sound41_FM5:
0009CDC2 EF00                       	smpsSetvoice        $00
0009CDC4 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CDC9 F2                         	smpsStop
0009CDCA                            
0009CDCA                            Sound_41_Voices:
0009CDCA                            ;	Voice $00
0009CDCA                            ;	$36
0009CDCA                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CDCA                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009CDCA                            	smpsVcAlgorithm     $06
0009CDCA                            	smpsVcFeedback      $06
0009CDCA                            	smpsVcUnusedBits    $00
0009CDCA                            	smpsVcDetune        $00, $00, $01, $00
0009CDCA                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009CDCA                            	smpsVcRateScale     $00, $00, $00, $00
0009CDCA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CDCA                            	smpsVcAmpMod        $00, $00, $00, $00
0009CDCA                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CDCA                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009CDCA                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CDCA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CDE3                            
0009CDE3                            
0009CDE4 00                         		even
0009CDE4                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009CDE4                            Snd9B_Header:
0009CDE4                            	smpsHeaderStartSong 3
0009CDE6 01                         	smpsHeaderTempoSFX  $01
0009CDE7 01                         	smpsHeaderChanSFX   $01
0009CDE8                            
0009CDEE                            
0009CDEE                            ; FM5 Data
0009CDEE                            Snd9B_FM5:
0009CDEE EF00                       	smpsSetvoice        $00
0009CDF0 8001                       	dc.b	nRst, $01
0009CDF7 CA25                       	dc.b	nCs6, $25
0009CDF9 F4                         	smpsModOff
0009CDFA                            
0009CDFA                            Snd9B_Loop00:
0009CDFA E7                         	dc.b	smpsNoAttack
0009CDFB E601                       	smpsFMAlterVol      $01
0009CDFD D102                       	dc.b	nAb6, $02
0009CDFF F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009CE04 F2                         	smpsStop
0009CE05                            
0009CE05                            Snd9B_Voices:
0009CE05                            ;	Voice $00
0009CE05                            ;	$3C
0009CE05                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009CE05                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009CE05                            	smpsVcAlgorithm     $04
0009CE05                            	smpsVcFeedback      $07
0009CE05                            	smpsVcUnusedBits    $00
0009CE05                            	smpsVcDetune        $00, $00, $04, $00
0009CE05                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009CE05                            	smpsVcRateScale     $00, $00, $00, $00
0009CE05                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009CE05                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE05                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009CE05                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CE05                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CE05                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE1E                            
0009CE1E                            
0009CE1E                            		even		
0009CE1E                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009CEB6                            		even
0009CEB6                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009CEC2                            		even				
0009CEC2                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009CEFE                            		even			
0009CEFE                            		; Don't let Sega sample cross $8000-byte boundary
0009CEFE                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 0FCC                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 1EFE                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 0EFC                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 107A                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 107A                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1604                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1604                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1604                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 21A8                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 0FCC                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 377C                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 1E58                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 377C                  		jsr	WaitForVBla				
000A6ACA 46FC 2700                  		move	#$2700,sr
000A6ACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6AD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADA 46FC 2300                  		move	#$2300,sr
000A6ADE 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE4 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AEE                            
000A6AEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF0 60CE                       		bra.s	OptionScreen_Main
000A6AF2                            ; ===========================================================================
000A6AF2                            ; loc_909A:
000A6AF2                            OptionScreen_Select:
000A6AF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AF6 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AF8 7000                       		moveq	#0,d0
000A6AFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B00 4E75                       		rts
000A6B02                            ; ===========================================================================
000A6B02                            ; loc_90B6:
000A6B02                            OptionScreen_Select_Not1P:
000A6B02 5300                       		subq.b	#1,d0
000A6B04 6600                       		bne.s	OptionScreen_Select_Other
000A6B06 60B8                       		bra.s	OptionScreen_Main
000A6B08                            ; ===========================================================================
000A6B08                            ; loc_90D8:
000A6B08                            OptionScreen_Select_Other:
000A6B08 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B0E 4E75                       		rts
000A6B10                            
000A6B10                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B10                            
000A6B10                            ;sub_90E0:
000A6B10                            OptionScreen_Controls:
000A6B10 7400                       		moveq	#0,d2
000A6B12 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B16 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1A 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B1E 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B20 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B22 6400                       		bcc.s	Option_Controls_Down
000A6B24 143C 0002                  		move.b	#2,d2
000A6B28                            
000A6B28                            Option_Controls_Down:
000A6B28 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B2C 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B2E 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B30 0C02 0003                  		cmpi.b	#3,d2
000A6B34 6500                       		blo.s	Option_Controls_Refresh
000A6B36 7400                       		moveq	#0,d2
000A6B38                            
000A6B38                            Option_Controls_Refresh:
000A6B38 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B3C E54A                       		lsl.w	#2,d2
000A6B3E 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B42 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B46 3411                       		move.w	(a1),d2
000A6B48 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B4C 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B4E 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B50 6400                       		bcc.s	Option_Controls_Right
000A6B52 1403                       		move.b	d3,d2
000A6B54                            
000A6B54                            Option_Controls_Right:
000A6B54 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B58 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5A 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B5C B403                       		cmp.b	d3,d2
000A6B5E 6300                       		bls.s	Option_Controls_Button_A
000A6B60 7400                       		moveq	#0,d2
000A6B62                            
000A6B62                            Option_Controls_Button_A:
000A6B62 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B66 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B68 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B6C B403                       		cmp.b	d3,d2
000A6B6E 6300                       		bls.s	Option_Controls_Refresh2
000A6B70 7400                       		moveq	#0,d2
000A6B72                            
000A6B72                            Option_Controls_Refresh2:
000A6B72 3282                       		move.w	d2,(a1)
000A6B74                            
000A6B74                            Option_Controls_NoMove:
000A6B74 4E75                       		rts
000A6B76                            ; End of function OptionScreen_Controls
000A6B76                            
000A6B76                            ; ===========================================================================
000A6B76                            ; word_917A:
000A6B76                            OptionScreen_Choices:
000A6B76 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7A 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B7E 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B82                            		even
000A6B82                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B82                            
000A6B82                            
000A6B82                            OptionScreen_DrawSelected:
000A6B82 6100 0000                  		bsr.w	loc_9268
000A6B86 7200                       		moveq	#0,d1
000A6B88 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B8C E749                       		lsl.w	#3,d1
000A6B8E 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B94 47F3 1000                  		lea	(a3,d1.w),a3
000A6B98 303C 6000                  		move.w	#$6000,d0
000A6B9C 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA2 225B                       		movea.l	(a3)+,a1
000A6BA4 6100 FE80                  		bsr.w	MenuScreenTextToRAM
000A6BA8 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BAE 7200                       		moveq	#0,d1
000A6BB0 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BB6 6700                       		beq.s	loc_9186
000A6BB8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BBC E549                       		lsl.w	#2,d1
000A6BBE 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC2 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BC6 3211                       		move.w	(a1),d1
000A6BC8 E549                       		lsl.w	#2,d1
000A6BCA                            
000A6BCA                            loc_9186:		
000A6BCA 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BCE 6100 FE56                  		bsr.w	MenuScreenTextToRAM
000A6BD2                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD2                            		;bne.s	loc2_9186
000A6BD2                            		;lea	($FFFF00C2).l,a2
000A6BD2                            		;bsr.w	loc_9296
000A6BD2                            
000A6BD2                            loc2_9186:		
000A6BD2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BD8 201B                       		move.l	(a3)+,d0
000A6BDA 7215                       		moveq	#$15,d1
000A6BDC 7407                       		moveq	#7,d2
000A6BDE 4EF8 1050                  		jmp	TilemapToVRAM
000A6BE2                            ; ===========================================================================
000A6BE2                            
000A6BE2                            OptionScreen_DrawUnselected:
000A6BE2 6100 0000                  		bsr.w	loc_9268
000A6BE6 7200                       		moveq	#0,d1
000A6BE8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BEC E749                       		lsl.w	#3,d1
000A6BEE 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF4 47F3 1000                  		lea	(a3,d1.w),a3
000A6BF8 7000                       		moveq	#0,d0
000A6BFA 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C00 225B                       		movea.l	(a3)+,a1
000A6C02 6100 FE22                  		bsr.w	MenuScreenTextToRAM
000A6C06 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C0C 7200                       		moveq	#0,d1
000A6C0E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C14 6700                       		beq.s	loc2_91F8
000A6C16 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1A E549                       		lsl.w	#2,d1
000A6C1C 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C20 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C24 3211                       		move.w	(a1),d1
000A6C26 E549                       		lsl.w	#2,d1
000A6C28                            
000A6C28                            loc2_91F8		
000A6C28 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C2C 6100 FDF8                  		bsr.w	MenuScreenTextToRAM
000A6C30                            		;cmpi.b	#2,(Options_menu_box).w
000A6C30                            		;bne.s	loc3_91F8
000A6C30                            		;lea	($FFFF0222).l,a2
000A6C30                            		;bsr.w	loc_9296
000A6C30                            
000A6C30                            loc3_91F8		
000A6C30 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C36 201B                       		move.l	(a3)+,d0
000A6C38 7215                       		moveq	#$15,d1
000A6C3A 7407                       		moveq	#7,d2
000A6C3C 4EF8 1050                  		jmp	TilemapToVRAM
000A6C40                            ; ===========================================================================
000A6C40                            
000A6C40                            loc_9268:
000A6C40 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C46 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4A 6A00                       		bpl.s	loc2_9268
000A6C4C 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C52                            
000A6C52                            loc2_9268:
000A6C52 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C56 6700                       		beq.s	loc3_9268
000A6C58 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C5E                            
000A6C5E                            loc3_9268:
000A6C5E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C64 6600                       		bne.s	loc4_9268		; rts
000A6C66 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C6C                            
000A6C6C                            loc4_9268:
000A6C6C 4E75                       		rts
000A6C6E                            ; ===========================================================================
000A6C6E                            
000A6C6E                            loc_9296:
000A6C6E 4E75                       		rts
000A6C70                            
000A6C70                            Dynamic_Menu:
000A6C70 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C74                            
000A6C74                            loc_3FF30:
000A6C74 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C76                            
000A6C76                            loc_3FF32:
000A6C76 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C78 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C7A 7000                       	moveq	#0,d0
000A6C7C 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6C80 B02A 0006                  	cmp.b	6(a2),d0
000A6C84 6500                       	blo.s	loc_3FF48
000A6C86 7000                       	moveq	#0,d0
000A6C88 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6C8C                            
000A6C8C                            loc_3FF48:
000A6C8C 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6C90 1692                       	move.b	(a2),(a3)	; set timer
000A6C92 6A00                       	bpl.s	loc_3FF56
000A6C94 D040                       	add.w	d0,d0
000A6C96 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6C9A                            
000A6C9A                            loc_3FF56:
000A6C9A 1032 0008                  	move.b	8(a2,d0.w),d0
000A6C9E EB48                       	lsl.w	#5,d0
000A6CA0 342A 0004                  	move.w	4(a2),d2
000A6CA4 2212                       	move.l	(a2),d1
000A6CA6 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CAC D280                       	add.l	d0,d1
000A6CAE 7600                       	moveq	#0,d3
000A6CB0 162A 0007                  	move.b	7(a2),d3
000A6CB4 E94B                       	lsl.w	#4,d3
000A6CB6 4EB9 0000 11A2             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CBC                            
000A6CBC                            loc_3FF78:
000A6CBC 102A 0006                  	move.b	6(a2),d0
000A6CC0 4A12                       	tst.b	(a2)
000A6CC2 6A00                       	bpl.s	loc_3FF82
000A6CC4 D000                       	add.b	d0,d0
000A6CC6                            
000A6CC6                            loc_3FF82:
000A6CC6 5200                       	addq.b	#1,d0
000A6CC8 0240 00FE                  	andi.w	#$FE,d0
000A6CCC 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CD0 544B                       	addq.w	#2,a3
000A6CD2 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CD6 4E75                       	rts
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ; MENU ANIMATION SCRIPT
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ;word_87C6:
000A6CD8                            Anim_SonicMilesBG:
000A6CD8 0000                       	dc.w   0
000A6CDA                            ; Sonic/Miles animated background
000A6CDA 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6CDE 0020                       	dc.w $20
000A6CE0 06                         	dc.b 6
000A6CE1 0A                         	dc.b $A
000A6CE2 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6CE4 0A05                       	dc.b  $A,  5	; 2
000A6CE6 1405                       	dc.b $14,  5	; 4
000A6CE8 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6CEA 1405                       	dc.b $14,  5	; 8
000A6CEC 0A05                       	dc.b  $A,  5	; 10	
000A6CEE                            ; ===========================================================================
000A6CEE                            ; off_92BA:
000A6CEE                            OptScrBoxData:
000A6CEE                            
000A6CEE 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CF2 4192                       		dc.w $4192
000A6CF4 0003                       		dc.w 3
000A6CF6 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CFA 4592                       		dc.w $4592
000A6CFC 0003                       		dc.w 3
000A6CFE 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D02 4992                       		dc.w $4992
000A6D04 0003                       		dc.w 3
000A6D06                            
000A6D06                            off_92D2:
000A6D06 0000 0000                  		dc.l TextOptScr_Default
000A6D0A 0000 0000                  		dc.l TextOptScr_Original
000A6D0E 0000 0000                  		dc.l TextOptScr_Beta
000A6D12 0000 0000                  		dc.l TextOptScr_Midnight
000A6D16 0000 0000                  		dc.l TextOptScr_C2
000A6D1A 0000 0000                  		dc.l TextOptScr_Clackers
000A6D1E 0000 0000                  		dc.l TextOptScr_RHS
000A6D22 0000 0000                  		dc.l TextOptScr_Socket
000A6D26 0000 0000                  		dc.l TextOptScr_Cringe
000A6D2A 0000 0000                  		dc.l TextOptScr_Dark		
000A6D2E                            off_92DE:
000A6D2E 0000 0000                  		dc.l TextOptScr_Default
000A6D32 0000 0000                  		dc.l TextOptScr_Original
000A6D36 0000 0000                  		dc.l TextOptScr_Beta
000A6D3A 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3E 0000 0000                  		dc.l TextOptScr_C2
000A6D42 0000 0000                  		dc.l TextOptScr_Clackers
000A6D46 0000 0000                  		dc.l TextOptScr_RHS
000A6D4A 0000 0000                  		dc.l TextOptScr_Socket
000A6D4E 0000 0000                  		dc.l TextOptScr_Cringe
000A6D52 0000 0000                  		dc.l TextOptScr_Dark	
000A6D56                            off_92EA:
000A6D56 0000 0000                  		dc.l TextOptScr_On
000A6D5A 0000 0000                  		dc.l TextOptScr_Off
000A6D5E                            off_92F2:
000A6D5E 0000 0000                  		dc.l TextOptScr_Null
000A6D62 0000 0000                  		dc.l TextOptScr_Null2
000A6D66                            ; ===========================================================================
000A6D66                            
000A6E85                            ; ============================================================================
000A6E85                            
000A6E85                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A7386 00                         		even
000A7386                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7532                            		even
000A7532                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7A9C                            		even
000A7A9C                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B1C                            		even
000A7B1C                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B48                            		even
000A7B48                            		even
000A7B48                            
000A7B48                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253CC                                        even
001253CC                            
001253CC                            Art_Dust:	incbin	artunc\spindust.bin
00126D0C                            
00126D0C                            ; ===============================================================
00126D0C                            ; ---------------------------------------------------------------
00126D0C                            ; Error handling module
00126D0C                            ; ---------------------------------------------------------------
00126D0C                             
00126D0C 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D10 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D1A 01                                 dc.b    1               ; extended stack frame
00126D1C 00                                 even
00126D1C                             
00126D1C 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D20 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D2E 01                                 dc.b    1               ; extended stack frame
00126D30 00                                 even
00126D30                             
00126D30 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D34 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D48 00                                 dc.b    0               ; extended stack frame
00126D4A 00                                 even
00126D4A                             
00126D4A 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D4E 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D5A 00                                 dc.b    0               ; extended stack frame
00126D5C 00                                 even
00126D5C                             
00126D5C 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D60 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D70 00                                 dc.b    0               ; extended stack frame
00126D72 00                                 even
00126D72                             
00126D72 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D76 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D88 00                                 dc.b    0               ; extended stack frame
00126D8A 00                                 even
00126D8A                             
00126D8A 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D8E 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DA2 00                                 dc.b    0               ; extended stack frame
00126DA4 00                                 even
00126DA4                             
00126DA4 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DA8 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DAE 00                                 dc.b    0               ; extended stack frame
00126DB0 00                                 even
00126DB0                             
00126DB0 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DB4 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DC7 00                                 dc.b    0               ; extended stack frame
00126DC8                                    even
00126DC8                             
00126DC8 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DCC 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DDF 00                                 dc.b    0               ; extended stack frame
00126DE0                                    even
00126DE0                             
00126DE0 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DE4 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DF4 00                                 dc.b    0               ; extended stack frame
00126DF6 00                                 even
00126DF6                             
00126DF6                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275DA                            
001275DA                            ; end of 'ROM'
001275DA                            		even
001275DA                            EndOfRom:
001275DA                            
001275DA                            
