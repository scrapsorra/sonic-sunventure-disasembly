00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000                            
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F16 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F1C                            
00000F1C                            	@nochg:
00000F1C 4A78 F614                  		tst.w	(v_demolength).w
00000F20 6700 0000                  		beq.w	@end
00000F24 5378 F614                  		subq.w	#1,(v_demolength).w
00000F28                            
00000F28                            	@end:
00000F28 4E75                       		rts	
00000F2A                            
00000F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2A                            
00000F2A                            
00000F2A                            sub_106E:
00000F2A 33FC 0100 00A1 1100        		stopZ80
00000F32 0839 0000 00A1 1100 66F6   		waitZ80
00000F3C 6100 0000                  		bsr.w	ReadJoypads
00000F40 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F44 6600                       		bne.s	@waterabove	; if yes, branch
00000F46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6A 6000                       		bra.s	@waterbelow
00000F6C                            
00000F6C                            	@waterabove:
00000F6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F90                            
00000F90                            	@waterbelow:
00000F90 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB4 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FD8 33FC 0000 00A1 1100        		startZ80
00000FE0 4E75                       		rts	
00000FE2                            ; End of function sub_106E
00000FE2                            
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            ; Horizontal interrupt
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            
00000FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE2                            
00000FE2                            
00000FE2                            HBlank:
00000FE2 46FC 2700                  		disable_ints
00000FE6 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEA 6700                       		beq.s	@nochg		; if not, branch
00000FEC 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FF6 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000FFC 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001000 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001008 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100A 2298                       		move.l	(a0)+,(a1)
0000100C 2298                       		move.l	(a0)+,(a1)
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000104E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001052 4A38 F64F                  		tst.b	($FFFFF64F).w
00001056 6600                       		bne.s	loc_119E
00001058                            
00001058                            	@nochg:
00001058 4E73                       		rte	
0000105A                            ; ===========================================================================
0000105A                            
0000105A                            loc_119E:
0000105A 4238 F64F                  		clr.b	($FFFFF64F).w
0000105E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001062 6100 FC98                  		bsr.w	Demo_Time
00001066 4EB9 0000 0000             		jsr	(UpdateMusic).l
0000106C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001070 4E73                       		rte	
00001072                            ; End of function HBlank
00001072                            
00001072                            ; ---------------------------------------------------------------------------
00001072                            ; Subroutine to	initialise joypads
00001072                            ; ---------------------------------------------------------------------------
00001072                            
00001072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001072                            
00001072                            
00001072                            JoypadInit:
00001072 33FC 0100 00A1 1100        		stopZ80
0000107A 0839 0000 00A1 1100 66F6   		waitZ80
00001084 7040                       		moveq	#$40,d0
00001086 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000108C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001092 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00001098 33FC 0000 00A1 1100        		startZ80
000010A0 4E75                       		rts	
000010A2                            ; End of function JoypadInit
000010A2                            
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; Subroutine to	read joypad input, and send it to the RAM
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A2                            
000010A2                            
000010A2                            ReadJoypads:
000010A2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010AC 6100                       		bsr.s	@read		; do the first joypad
000010AE 5449                       		addq.w	#2,a1		; do the second	joypad
000010B0                            
000010B0                            	@read:
000010B0 12BC 0000                  		move.b	#0,(a1)
000010B4 4E71                       		nop	
000010B6 4E71                       		nop	
000010B8 1011                       		move.b	(a1),d0
000010BA E508                       		lsl.b	#2,d0
000010BC 0200 00C0                  		andi.b	#$C0,d0
000010C0 12BC 0040                  		move.b	#$40,(a1)
000010C4 4E71                       		nop	
000010C6 4E71                       		nop	
000010C8 1211                       		move.b	(a1),d1
000010CA 0201 003F                  		andi.b	#$3F,d1
000010CE 8001                       		or.b	d1,d0
000010D0 4600                       		not.b	d0
000010D2 1210                       		move.b	(a0),d1
000010D4 B101                       		eor.b	d0,d1
000010D6 10C0                       		move.b	d0,(a0)+
000010D8 C200                       		and.b	d0,d1
000010DA 10C1                       		move.b	d1,(a0)+
000010DC 4E75                       		rts	
000010DE                            ; End of function ReadJoypads
000010DE                            
000010DE                            
000010DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010DE                            
000010DE                            
000010DE                            VDPSetupGame:
000010DE 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E4 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F0 7E12                       		moveq	#$12,d7
000010F2                            
000010F2                            	@setreg:
000010F2 309A                       		move.w	(a2)+,(a0)
000010F4 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010F8                            
000010F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000010FE 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001102 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001108 7000                       		moveq	#0,d0
0000110A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001114 3E3C 003F                  		move.w	#$3F,d7
00001118                            
00001118                            	@clrCRAM:
00001118 3280                       		move.w	d0,(a1)
0000111A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000111E                            
0000111E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001122 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001126 2F01                       		move.l	d1,-(sp)
00001128 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114A                            
0000114A                            	@waitforDMA:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001150 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00001156 221F                       		move.l	(sp)+,d1
00001158 4E75                       		rts	
0000115A                            ; End of function VDPSetupGame
0000115A                            
0000115A                            ; ===========================================================================
0000115A 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
0000115C 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
0000115E 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001160 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001162 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001164 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00001166 8600                       		dc.w $8600		; unused
00001168 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116A 8800                       		dc.w $8800		; unused
0000116C 8900                       		dc.w $8900		; unused
0000116E 8A00                       		dc.w $8A00		; default H.interrupt register
00001170 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001172 8C81                       		dc.w $8C81		; 40-cell display mode
00001174 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00001176 8E00                       		dc.w $8E00		; unused
00001178 8F02                       		dc.w $8F02		; set VDP increment size
0000117A 9001                       		dc.w $9001		; 64-cell hscroll size
0000117C 9100                       		dc.w $9100		; window horizontal position
0000117E 9200                       		dc.w $9200		; window vertical position
00001180                            
00001180                            ; ---------------------------------------------------------------------------
00001180                            ; Subroutine to	clear the screen
00001180                            ; ---------------------------------------------------------------------------
00001180                            
00001180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001180                            
00001180                            
00001180                            ClearScreen:
00001180 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A2                            
000011A2                            	@wait1:
000011A2 3215                       		move.w	(a5),d1
000011A4 0801 0001                  		btst	#1,d1
000011A8 66F8                       		bne.s	@wait1
000011AA                            
000011AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011AE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D0                            
000011D0                            	@wait2:
000011D0 3215                       		move.w	(a5),d1
000011D2 0801 0001                  		btst	#1,d1
000011D6 66F8                       		bne.s	@wait2
000011D8                            
000011D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000011DC 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E0 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E4                            
000011E4 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011E8 7000                       		moveq	#0,d0
000011EA 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011EE                            
000011EE                            	@clearsprites:
000011EE 22C0                       		move.l	d0,(a1)+
000011F0 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F4                            
000011F4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011F8 7000                       		moveq	#0,d0
000011FA 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
000011FE                            
000011FE                            	@clearhscroll:
000011FE 22C0                       		move.l	d0,(a1)+
00001200 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001204 4E75                       		rts	
00001206                            ; End of function ClearScreen
00001206                            
00001206                            ; ---------------------------------------------------------------------------
00001206                            ; Subroutine to	load the sound driver
00001206                            ; ---------------------------------------------------------------------------
00001206                            
00001206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001206                            
00001206                            
00001206                            SoundDriverLoad:
00001206 4E71                       		nop	
00001208 33FC 0100 00A1 1100        		stopZ80
00001210 33FC 0100 00A1 1200        		resetZ80
00001218 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000121E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001224 6100 0000                  		bsr.w	KosDec		; decompress
00001228 33FC 0000 00A1 1200        		resetZ80a
00001230 4E71                       		nop	
00001232 4E71                       		nop	
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 33FC 0100 00A1 1200        		resetZ80
00001240 33FC 0000 00A1 1100        		startZ80
00001248 4E75                       		rts	
0000124A                            ; End of function SoundDriverLoad
0000124A                            
0000124A                            		include	"_incObj\sub PlaySound.asm"
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            ; Subroutine to	play a music track
0000124A                            
0000124A                            ; input:
0000124A                            ;	d0 = track to play
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            
0000124A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124A                            
0000124A                            
0000124A                            PlaySound:
0000124A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000124E 4E75                       		rts	
00001250                            ; End of function PlaySound
00001250                            
00001250                            ; ---------------------------------------------------------------------------
00001250                            ; Subroutine to	play a sound effect
00001250                            ; ---------------------------------------------------------------------------
00001250                            
00001250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001250                            
00001250                            
00001250                            PlaySound_Special:
00001250 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001254 4E75                       		rts	
00001256                            ; End of function PlaySound_Special
00001256                            
00001256                            ; ===========================================================================
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Unused sound/music subroutine
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            PlaySound_Unused:
00001256 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125A 4E75                       		rts	
0000125A 4E75                       		rts	
0000125C                            		include	"_inc\PauseGame.asm"
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            ; Subroutine to	pause the game
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            
0000125C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000125C                            
0000125C                            
0000125C                            PauseGame:
0000125C 4E71                       		nop	
0000125E 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001262 6700                       		beq.s	Unpause		; if not, branch
00001264 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00001268 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001270 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001272                            
00001272                            Pause_StopGame:
00001272 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00001278 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
0000127E                            
0000127E                            Pause_Loop:
0000127E 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001284 6100 0000                  		bsr.w	WaitForVBla
00001288 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
0000128C 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000128E 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001294 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001296 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
0000129C 4E71                       		nop	
0000129E 6000                       		bra.s	Pause_EndMusic
000012A0                            ; ===========================================================================
000012A0                            
000012A0                            Pause_ChkBC:
000012A0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012A6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012A8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012AE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B0                            
000012B0                            Pause_ChkStart:
000012B0 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012B6 67C6                       		beq.s	Pause_Loop	; if not, branch
000012B8                            
000012B8                            Pause_EndMusic:
000012B8 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012BE                            
000012BE                            Unpause:
000012BE 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C4                            
000012C4                            Pause_DoNothing:
000012C4 4E75                       		rts	
000012C6                            ; ===========================================================================
000012C6                            
000012C6                            Pause_SlowMo:
000012C6 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012CC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D2 4E75                       		rts	
000012D4                            ; End of function PauseGame
000012D4                            ; End of function PauseGame
000012D4                            
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D4                            
000012D4                            ; input:
000012D4                            ;	a1 = tile map address
000012D4                            ;	d0 = VRAM address
000012D4                            ;	d1 = width (cells)
000012D4                            ;	d2 = height (cells)
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            
000012D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D4                            
000012D4                            
000012D4                            TilemapToVRAM:
000012D4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DA 283C 0080 0000             		move.l	#$800000,d4
000012E0                            
000012E0                            	Tilemap_Line:
000012E0 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E4 3601                       		move.w	d1,d3
000012E6                            
000012E6                            	Tilemap_Cell:
000012E6 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012E8 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012EC D084                       		add.l	d4,d0		; goto next line
000012EE 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F2 4E75                       		rts	
000012F4                            ; End of function TilemapToVRAM
000012F4                            
000012F4                            		include	"_inc\Nemesis Decompression.asm"
000012F4                            ; ==============================================================================
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Nemesis decompression routine
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Optimized by vladikcomper
000012F4                            ; ------------------------------------------------------------------------------
000012F4                             
000012F4                            NemDec_RAM:
000012F4 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012F8 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012FC 6000                           bra.s   NemDec_Main
000012FE                             
000012FE                            ; ------------------------------------------------------------------------------
000012FE                            NemDec:
000012FE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001302 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001308 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000130C                             
0000130C                            NemDec_Main:
0000130C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001310 3418                           move.w  (a0)+,d2        ; get number of patterns
00001312 6A00                           bpl.s   @0          ; are we in Mode 0?
00001314 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001318 E74A                       @0  lsl.w   #3,d2
0000131A 3A42                           movea.w d2,a5
0000131C 7607                           moveq   #7,d3
0000131E 7400                           moveq   #0,d2
00001320 7800                           moveq   #0,d4
00001322 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001326 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001328 E145                           asl.w   #8,d5           ; shift up by a byte
0000132A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000132C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001330 6100                           bsr.s   NemDec2
00001332 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001336 4E75                           rts
00001338                             
00001338                            ; ---------------------------------------------------------------------------
00001338                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001338                            ; ---------------------------------------------------------------------------
00001338                             
00001338                            NemDec2:
00001338 3E06                           move.w  d6,d7
0000133A 5147                           subq.w  #8,d7           ; get shift value
0000133C 3205                           move.w  d5,d1
0000133E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001340 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001344 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001346 0241 00FF                      andi.w  #$FF,d1
0000134A D241                           add.w   d1,d1
0000134C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001350 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001354 6400                           bcc.s   @0          ; if not, branch
00001356 5046                           addq.w  #8,d6
00001358 E145                           asl.w   #8,d5
0000135A 1A18                           move.b  (a0)+,d5        ; read next byte
0000135C 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001360 3001                           move.w  d1,d0
00001362 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001366 0240 00F0                      andi.w  #$F0,d0
0000136A                             
0000136A                            NemDec_GetRepeatCount:
0000136A E848                           lsr.w   #4,d0           ; get repeat count
0000136C                             
0000136C                            NemDec_WritePixel:
0000136C E98C                           lsl.l   #4,d4           ; shift up by a nybble
0000136E 8801                           or.b    d1,d4           ; write pixel
00001370 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001374 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001376                            ; ---------------------------------------------------------------------------
00001376                             
00001376                            NemPCD_NewRow:
00001376 7800                           moveq   #0,d4           ; reset row
00001378 7607                           moveq   #7,d3           ; reset nybble counter
0000137A                             
0000137A                            NemDec_WritePixelLoop:
0000137A 51C8 FFF0                      dbf d0,NemDec_WritePixel
0000137E 60B8                           bra.s   NemDec2
00001380                            ; ---------------------------------------------------------------------------
00001380                             
00001380                            NemDec_InlineData:
00001380 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001382 0C46 0009                      cmpi.w  #9,d6
00001386 6400                           bcc.s   @0
00001388 5046                           addq.w  #8,d6
0000138A E145                           asl.w   #8,d5
0000138C 1A18                           move.b  (a0)+,d5
0000138E 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001390 3205                           move.w  d5,d1
00001392 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001394 3001                           move.w  d1,d0
00001396 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139A 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000139E 0C46 0009                      cmpi.w  #9,d6
000013A2 64C6                           bcc.s   NemDec_GetRepeatCount
000013A4 5046                           addq.w  #8,d6
000013A6 E145                           asl.w   #8,d5
000013A8 1A18                           move.b  (a0)+,d5
000013AA 60BE                           bra.s   NemDec_GetRepeatCount
000013AC                             
000013AC                            ; ---------------------------------------------------------------------------
000013AC                            ; Subroutines to output decompressed entry
000013AC                            ; Selected depending on current decompression mode
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemPCD_WriteRowToVDP:
000013AC                            loc_1502:
000013AC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemPCD_WriteRowToVDP_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 2882                           move.l  d2,(a4)         ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66B6                           bne.s   NemPCD_NewRow
000013C0 4E75                           rts
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec_WriteRowToRAM:
000013C2 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C4 534D                           subq.w  #1,a5
000013C6 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C8 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            NemDec_WriteRowToRAM_XOR:
000013CC B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CE 28C2                           move.l  d2,(a4)+        ; and write the result
000013D0 534D                           subq.w  #1,a5
000013D2 380D                           move.w  a5,d4
000013D4 66A0                           bne.s   NemPCD_NewRow
000013D6 4E75                           rts
000013D8                             
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013D8                            ; ---------------------------------------------------------------------------
000013D8                             
000013D8                            NemDec_BuildCodeTable:
000013D8 1018                           move.b  (a0)+,d0        ; read first byte
000013DA                             
000013DA                            @ChkEnd:
000013DA 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013DE 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E0 4E75                           rts
000013E2                            ; ---------------------------------------------------------------------------
000013E2                             
000013E2                            @NewPalIndex:
000013E2 3E00                           move.w  d0,d7
000013E4                             
000013E4                            @ItemLoop:
000013E4 1018                           move.b  (a0)+,d0        ; read next byte
000013E6 6BF2                           bmi.s   @ChkEnd         ; ~~
000013E8 1200                           move.b  d0,d1
000013EA 0247 000F                      andi.w  #$F,d7          ; get palette index
000013EE 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F2 8E41                           or.w    d1,d7           ; combine the two
000013F4 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013F8 1200                           move.b  d0,d1
000013FA E149                           lsl.w   #8,d1
000013FC 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013FE 7208                           moveq   #8,d1
00001400 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001402 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001404 1018                           move.b  (a0)+,d0        ; get code
00001406 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001408 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000140C 60D6                           bra.s   @ItemLoop       ; repeat
0000140E                            ; ---------------------------------------------------------------------------
0000140E                             
0000140E                            @ItemShortCode:
0000140E 1018                           move.b  (a0)+,d0        ; get code
00001410 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001412 D040                           add.w   d0,d0           ; get index into code table
00001414 7A01                           moveq   #1,d5
00001416 E36D                           lsl.w   d1,d5
00001418 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000141E                             
0000141E                            @ItemShortCodeLoop:
0000141E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001420 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001424 60BE                           bra.s   @ItemLoop
00001424 60BE                           bra.s   @ItemLoop
00001426                            
00001426                              
00001426                                pusho	; buffer local label symbol config
00001426                                opt ws+  ; change local label symbol to '.'
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO ResetDMAQueue
00001426                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001426                            ; Performs all queued DMA transfers and clears the DMA queue.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a1,a5	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE InitDMAQueue
00001426                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001426                            ; Must be called before the queue is used, and the queue expects that only it
00001426                            ; write to this region of RAM.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a0,d0,d1	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001426                            ; Queues a DMA with parameters given in registers.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	AssumeSourceAddressInBytes (default 1)
00001426                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001426                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001426                            ; 	Use128kbSafeDMA (default 0)
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001426                            ; 		set to 0)
00001426                            ; 	d2	Destination address
00001426                            ; 	d3	Transfer length (in words)
00001426                            ; Output:
00001426                            ; 	d0,d1,d2,d3,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001426                            ; * 184(29/9) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; With Use128kbSafeDMA = 1, runs in:
00001426                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001426                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001426                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001426                            ;   fills the queue (second piece is discarded)
00001426                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001426                            ;   space for both pieces (both pieces queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001426                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001426                            ; edited to make sure the adresss given is correct.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001426                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001426                            ; discarded. However, all callers must be edited to make sure the adresss given
00001426                            ; in the correct form. You can use the dmaSource function for that.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO QueueStaticDMA
00001426                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001426                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001426                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001426                            ; Output:
00001426                            ; 	d0,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001426                            ; * 122(21/8) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressInBytes
00001426                            ;
00001426                            ; This option makes the function work as a drop-in replacement of the original
00001426                            ; functions. If you modify all callers to supply a position in words instead of
00001426                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001426 =00000001                  AssumeSourceAddressInBytes = 1
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressIsRAMSafe
00001426                            ;
00001426                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001426                            ; source address is given to the function in a way that makes them safe to use
00001426                            ; with RAM sources. You need to edit all callers to ensure this.
00001426                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001426 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001426                            ; ===========================================================================
00001426                            ; option: UseRAMSourceSafeDMA
00001426                            ;
00001426                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001426                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001426                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001426 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001426                            ; ===========================================================================
00001426                            ; option: Use128kbSafeDMA
00001426                            ;
00001426                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001426                            ; disabled by default because you can simply align the art in ROM and avoid the
00001426                            ; issue altogether. It is here so that you have a high-performance routine to do
00001426                            ; the job in situations where you can't align it in ROM.
00001426 =00000001                  Use128kbSafeDMA = 1
00001426                            ; ===========================================================================
00001426                            ; option UseVIntSafeDMA
00001426                            ;
00001426                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001426                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001426                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001426                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001426                            ; restore interrupts after.
00001426 =00000000                  UseVIntSafeDMA = 0
00001426                            ; ===========================================================================
00001426                            
00001426                            
00001426                            ; Convenience macros, for increased maintainability of the code.
00001426 =00000027                  DMA = %100111
00001426 =00000021                  VRAM = %100001
00001426                            ; Like vdpComm, but starting from an address contained in a register
00001426 =00000001                  vdpCommReg_defined = 1
00001426                            vdpCommReg macro reg,type,rwd,clr
00001426                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001426                            	if ((\type&\rwd)&3)<>0
00001426                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001426                            	endif
00001426                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001426                            	swap	\reg								; Put all bits in proper places
00001426                            	if \clr <> 0
00001426                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001426                            	endif
00001426                            	if ((\type&\rwd)&$FC)=$20
00001426                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001426                            	elseif ((\type&\rwd)&$FC)<>0
00001426                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001426                            	endif
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  intMacros_defined = 1
00001426                            enableInts macro
00001426                            	move	#$2300,sr
00001426                            	endm
00001426                            
00001426                            disableInts macro
00001426                            	move	#$2700,sr
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  DMAEntry_defined = 1
00001426                                    rsreset
00001426 =00000000                  DMAEntry.Reg94:		rs.b	1
00001426                            			  
00001426 =00000001                  DMAEntry.Size:      rs.b    0
00001426 =00000001                  DMAEntry.SizeH:		rs.b	1
00001426 =00000002                  DMAEntry.Reg93:		rs.b	1
00001426 =00000003                  DMAEntry.Source:    rs.b    0
00001426 =00000003                  DMAEntry.SizeL:		rs.b	1
00001426 =00000004                  DMAEntry.Reg97:		rs.b	1
00001426 =00000005                  DMAEntry.SrcH:		rs.b	1
00001426 =00000006                  DMAEntry.Reg96:		rs.b	1
00001426 =00000007                  DMAEntry.SrcM:		rs.b	1
00001426 =00000008                  DMAEntry.Reg95:		rs.b	1
00001426 =00000009                  DMAEntry.SrcL:		rs.b	1
00001426 =0000000A                  DMAEntry.Command:	rs.l	1
00001426 =0000000E                  DMAEntry.len:   rs.w    0
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001426                            ; ---------------------------------------------------------------------------
00001426                            						
00001426                            										   
00001426                            									   
00001426                            	  
00001426                            																			 
00001426                            							  
00001426 =00000001                  QueueStaticDMA_defined = 1
00001426                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001426                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001426                            ; crosses a 128kB boundary, or has size 0.
00001426                            QueueStaticDMA macro src,length,dest
00001426                                local   len
00001426                            		if ((\src)&1)<>0
00001426                            			inform 3,"DMA queued from odd source \1!"
00001426                            		endif
00001426                            		if ((\length)&1)<>0
00001426                            			inform 3,"DMA an odd number of bytes \2!"
00001426                            		endif
00001426                            		if (\length)=0
00001426                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001426                            		endif
00001426                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001426                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001426                            		endif
00001426                            	  
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	sr,-(sp)										; Save current interrupt mask
00001426                            		disableInts												; Mask off interrupts
00001426                            	endif ; UseVIntSafeDMA=1
00001426                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001426                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001426                            	beq.s	.done												; Return if there's no more room in the buffer
00001426                            	len: = ((length>>1)&$7FFF)
00001426                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001426                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001426                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001426                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001426                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001426                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001426                            .done:
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001426                            	endif ;UseVIntSafeDMA=1
00001426                            	endm
00001426                            
00001426                                
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ResetDMAQueue: macro
00001426                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001426                            	endm
00001426                            ; ===========================================================================
00001426                            
00001426                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001426                            
00001426                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001426                            Add_To_DMA_Queue:
00001426                            QueueDMATransfer:
00001426 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001430                            
00001430 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001432 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001436 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143A 7000                       	moveq	#0,d0											; We need a zero on d0
0000143C                            
0000143C                            		; Detect if transfer crosses 128KB boundary
0000143C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000143C                            		; (1) d3.w = 0 => 128kB transfer
0000143C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000143C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000143C                            		; (2) d3.w != 0
0000143C                            		;   (a) if there is carry on d1.w + d3.w
0000143C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000143C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000143C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000143C                            		; The reason this works is that carry on d1.w + d3.w means that
0000143C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000143C                            		; d1.w + d3.w > $10000.
0000143C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000143E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001440 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001442                            	; It does not cross a 128kB boundary. So just finish writing it.
00001442 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001446                            
00001446                            .finishxfer:
00001446                            	; Command to specify destination address and begin DMA
00001446 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001452 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
00001456 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
00001458 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
0000145C                            
0000145C                            .done:
0000145C 4E75                       	rts
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            .doubletransfer:
0000145E                            		; We need to split the DMA into two parts, since it crosses a 128kB block
0000145E D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001460 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001464                            
00001464 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
00001468 67DC                       		beq.s	.finishxfer									; Branch if not
0000146A                            
0000146A                            		; Get second transfer's source, destination, and length
0000146A 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
0000146C D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
0000146E D040                       		add.w	d0,d0										; Convert to number of bytes
00001470 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001472                            
00001472                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001472                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001480 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001484                            
00001484                            		; Do second transfer
00001484 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001488 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
0000148C                            
0000148C                            		; Command to specify destination address and begin DMA
00001496 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149A 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
0000149C                            
0000149C 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A0 4E75                       		rts
000014A2                            ; End of function QueueDMATransfer
000014A2                            ; ===========================================================================
000014A2                            
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            ; Subroutine for issuing all VDP commands that were queued
000014A2                            ; (by earlier calls to QueueDMATransfer)
000014A2                            ; Resets the queue when it's done
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            
000014A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A2                            
000014A2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A2                            Process_DMA_Queue:
000014A2                            ProcessDMAQueue:
000014A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014A6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AA                            ; ---------------------------------------------------------------------------
000014AA                            .jump_table:
000014AA 4E75                       	rts
000014AC                            	rept 6
000014AC                            		trap	#0											; Just in case
000014AC 4E40 4E40 4E40 4E40 4E40+  	endr
000014B8                            ; ---------------------------------------------------------------------------
000014B8 =00000001                      c: = 1
000014B8                            	rept QueueSlotCount
000014B8                            		lea	(vdp_control_port).l,a5
000014B8                            		lea	(VDP_Command_Buffer).w,a1
000014B8                            		if c<>QueueSlotCount
000014B8                            			bra.w	.jump0 - c*8
000014B8                            		endif
000014B8                                c: = c + 1
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            	rept QueueSlotCount
000015B0                            		move.l	(a1)+,(a5)									; Transfer length
000015B0                            		move.l	(a1)+,(a5)									; Source address high
000015B0                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B0                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B0 2A99 2A99 2A99 3A99 2A99+  	endr
00001640                            
00001640                            .jump0:
00001640 31FC C800 C8FC             	ResetDMAQueue
00001646 4E75                       	rts
00001648                            ; End of function ProcessDMAQueue
00001648                            ; ===========================================================================
00001648                            
00001648                            ; ---------------------------------------------------------------------------
00001648                            ; Subroutine for initializing the DMA queue.
00001648                            ; ---------------------------------------------------------------------------
00001648                            
00001648                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            InitDMAQueue:
00001648 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000164C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000164E 223C 9397 9695             	move.l	#$93979695,d1
00001654 =00000000                      c: = 0
00001654                            	rept QueueSlotCount
00001654                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001654                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001654                                c: = c + DMAEntry.len
00001654 1080 03C8 0002 1140 000E+  	endr
000016E2                            
000016E2 31FC C800 C8FC             	ResetDMAQueue
000016E8 4E75                       	rts
000016EA                            ; End of function ProcessDMAQueue
000016EA                            ; ===========================================================================
000016EA                            
000016EA                            
000016EA                                popo	; buffer local label symbol config
000016EA                            
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ARGUMENTS
000016EA                            ; d0 = index of PLC list
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            ; LoadPLC:
000016EA                            AddPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
000016FE 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001702                            
00001702                            	@findspace:
00001702 4A92                       		tst.l	(a2)		; is space available in RAM?
00001704 6700                       		beq.s	@copytoRAM	; if yes, branch
00001706 5C4A                       		addq.w	#6,a2		; if not, try next space
00001708 60F8                       		bra.s	@findspace
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            @copytoRAM:
0000170A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000170C 6B00                       		bmi.s	@skip
0000170E                            
0000170E                            	@loop:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001712 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001716                            
00001716                            	@skip:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171A 4E75                       		rts	
0000171C                            ; End of function AddPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            ; Queue pattern load requests, but clear the PLQ first
0000171C                            
0000171C                            ; ARGUMENTS
0000171C                            ; d0 = index of PLC list (see ArtLoadCues)
0000171C                            
0000171C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000171C                            ;	  (or hacker) is responsible for making sure that no more than
0000171C                            ;	  16 load requests are copied into the buffer.
0000171C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000171C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000171C                            
0000171C                            ; LoadPLC2:
0000171C                            NewPLC:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001730 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001732 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001736 3019                       		move.w	(a1)+,d0	; get length of PLC
00001738 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173A                            
0000173A                            	@loop:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000173E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001742                            
00001742                            	@skip:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function NewPLC
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001748                            
00001748                            
00001748                            ClearPLC:
00001748 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000174C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000174E                            
0000174E                            	@loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,@loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC:
00001756 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175A 6700                       		beq.s	Rplc_Exit
0000175C 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001760 6600                       		bne.s	Rplc_Exit
00001762 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001766 47F9 0000 13AC             		lea	(NemPCD_WriteRowToVDP).l,a3
0000176C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001780 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001792 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            Rplc_Exit:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            ; sub_165E:
000017C8                            ProcessDPLC2:
000017C8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:
000017E0 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017F8 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001814                            
00001814                            loc_16AA:
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000181C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000182C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:
00001846 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function ProcessDPLC2
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            QuickPLC:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; get length of PLC
00001868                            
00001868                            	Qplc_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000187E 6100 FA7E                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001886 4E75                       		rts	
00001888                            ; End of function QuickPLC
00001888                            
00001888                            		include	"_inc\Enigma Decompression.asm"
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            
00001888                            ; input:
00001888                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001888                            ;	a0 = source address
00001888                            ;	a1 = destination address
00001888                            
00001888                            ; usage:
00001888                            ;	lea	(source).l,a0
00001888                            ;	lea	(destination).l,a1
00001888                            ;	move.w	#arttile,d0
00001888                            ;	bsr.w	EniDec
00001888                            
00001888                            ; See http://www.segaretro.org/Enigma_compression for format description
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3		; store starting art tile
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2		; store incremental copy word
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4		; store literal copy word
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018A6 7C10                       		moveq	#16,d6		; initial shift value
000018A8                            ; loc_173E:
000018A8                            Eni_Loop:
000018A8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018B6 3401                       		move.w	d1,d2		; and copy it
000018B8 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018BC 6400                       		bhs.s	@sevenbitentry
000018BE 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            ; loc_1758:
000018C2                            @sevenbitentry:
000018C2 6100 0000                  		bsr.w	EniDec_FetchByte
000018C6 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            ; loc_1768:
000018D2                            EniDec_00:
000018D2 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D4 524A                       		addq.w	#1,a2		; increment it
000018D6 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DA 60CC                       		bra.s	Eni_Loop
000018DC                            ; ===========================================================================
000018DC                            ; loc_1772:
000018DC                            EniDec_01:
000018DC 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018DE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E2 60C4                       		bra.s	Eni_Loop
000018E4                            ; ===========================================================================
000018E4                            ; loc_177A:
000018E4                            EniDec_100:
000018E4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018E8                            ; loc_177E:
000018E8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EA 51CA FFFC                  		dbf	d2,@loop	; repeat
000018EE                            
000018EE 60B8                       		bra.s	Eni_Loop
000018F0                            ; ===========================================================================
000018F0                            ; loc_1786:
000018F0                            EniDec_101:
000018F0 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F4                            ; loc_178A:
000018F4 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018F6 5241                       		addq.w	#1,d1		; increment
000018F8 51CA FFFA                  		dbf	d2,@loop	; repeat
000018FC                            
000018FC 60AA                       		bra.s	Eni_Loop
000018FE                            ; ===========================================================================
000018FE                            ; loc_1794:
000018FE                            EniDec_110:
000018FE 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001902                            ; loc_1798:
00001902 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001904 5341                       		subq.w	#1,d1		; decrement
00001906 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190A                            
0000190A 609C                       		bra.s	Eni_Loop
0000190C                            ; ===========================================================================
0000190C                            ; loc_17A2:
0000190C                            EniDec_111:
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	EniDec_Done
00001912                            ; loc_17A8:
00001912 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001916 32C1                       		move.w	d1,(a1)+	; copy it
00001918 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000191C                            
0000191C 608A                       		bra.s	Eni_Loop
0000191E                            ; ===========================================================================
0000191E                            ; loc_17B4:
0000191E                            EniDec_Index:
0000191E 60B2                       		bra.s	EniDec_00
00001920 60B0                       		bra.s	EniDec_00
00001922 60B8                       		bra.s	EniDec_01
00001924 60B6                       		bra.s	EniDec_01
00001926 60BC                       		bra.s	EniDec_100
00001928 60C6                       		bra.s	EniDec_101
0000192A 60D2                       		bra.s	EniDec_110
0000192C 60DE                       		bra.s	EniDec_111
0000192E                            ; ===========================================================================
0000192E                            ; loc_17C4:
0000192E                            EniDec_Done:
0000192E 5348                       		subq.w	#1,a0		; go back by one byte
00001930 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001934 6600                       		bne.s	@notnewbyte	; if not, branch
00001936 5348                       		subq.w	#1,a0		; and another one if needed
00001938                            ; loc_17CE:
00001938                            @notnewbyte:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000193C 6400                       		bcc.s	@evenbyte	; if not, branch
0000193E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001940                            ; loc_17D6:
00001940                            @evenbyte:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            
00001946                            ; ---------------------------------------------------------------------------
00001946                            ; Part of the Enigma decompressor
00001946                            ; Fetches an inline copy value and stores it in d1
00001946                            ; ---------------------------------------------------------------------------
00001946                            
00001946                            ; =============== S U B R O U T I N E =======================================
00001946                            
00001946                            ; loc_17DC:
00001946                            EniDec_FetchInlineValue:
00001946 360B                       		move.w	a3,d3		; copy starting art tile
00001948 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194A D201                       		add.b	d1,d1		; is the priority bit set?
0000194C 6400                       		bcc.s	@skippriority	; if not, branch
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001952 6700                       		beq.s	@skippriority	; if not, branch
00001954 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
00001958                            ; loc_17EE:
00001958                            @skippriority:
00001958 D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195A 6400                       		bcc.s	@skiphighpal	; if not, branch
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	@skiphighpal
00001962 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001966                            ; loc_17FC:
00001966                            @skiphighpal:
00001966 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001968 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	@skiplowpal
00001970 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001974                            ; loc_180A:
00001974                            @skiplowpal:
00001974 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001976 6400                       		bcc.s	@skipyflip	; if not, branch
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	@skipyflip
0000197E 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001982                            ; loc_1818:
00001982                            @skipyflip:
00001982 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001984 6400                       		bcc.s	@skipxflip	; if not, branch
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	@skipxflip
0000198C 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001990                            ; loc_1826:
00001990                            @skipxflip:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001996 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#16,d6
0000199E 4447                       		neg.w	d7		; calculate bit deficit
000019A0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A2 1A10                       		move.b	(a0),d5		; get next byte
000019A4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019AE                            ; loc_1844:
000019AE                            @maskvalue:
000019AE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019B6 D243                       		add.w	d3,d1		; add starting art tile
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5	; get next word
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            ; loc_1856:
000019C0                            @enoughbits:
000019C0 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C2 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019CC D243                       		add.w	d3,d1	; add starting art tile
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	EniDec_FetchByte
000019D2                            ; ===========================================================================
000019D2                            ; loc_1868:
000019D2                            @justenough:
000019D2 7C10                       		moveq	#16,d6	; reset shift value
000019D4 60D8                       		bra.s	@maskvalue
000019D6                            ; ===========================================================================
000019D6                            ; word_186C:
000019D6                            EniDec_Masks:
000019D6 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019DE 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019E6 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019EE 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            ; sub_188C:
000019F6                            EniDec_FetchByte:
000019F6 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019F8 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
000019FC 6400                       		bhs.s	@locret	; if not, branch
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            @locret:
00001A04 4E75                       		rts	
00001A06                            ; End of function EniDec_FetchByte
00001A06                            ; End of function EniDec_FetchByte
00001A06                            		include	"_inc\Kosinski Decompression.asm"
00001A06                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A06                            ; (sometimes called KOZINSKI decompression)
00001A06                            ;
00001A06                            ; ARGUMENTS:
00001A06                            ; a0 = source address
00001A06                            ; a1 = destination address
00001A06                            ;
00001A06                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A06                            ; New faster version by written by vladikcomper, with additional improvements by
00001A06                            ; MarkeyJester and Flamewing
00001A06                            ; Converted to ASM68K by Beta Filter.
00001A06                            ; ---------------------------------------------------------------------------
00001A06 =00000001                  Kos_UseLUT: equ 1
00001A06 =00000003                  Kos_LoopUnroll: equ 3
00001A06 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A06                            
00001A06                            Kos_RunBitStream macro
00001A06                                dbra    d2,@skip\@
00001A06                                moveq   #7,d2                   ; Set repeat count to 8.
00001A06                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A06                                not.w   d3                      ; Have all 16 bits been used up?
00001A06                                bne.s   @skip\@                   ; Branch if not.
00001A06                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A06                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A06                                if Kos_UseLUT=1
00001A06                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A06                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A06                                endif
00001A06                            @skip\@
00001A06                                endm
00001A06                            
00001A06                            Kos_ReadBit macro
00001A06                                if Kos_UseLUT=1
00001A06                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A06                                else
00001A06                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A06                                endif
00001A06                                endm
00001A06                            ; ===========================================================================
00001A06                            ; KozDec@193A:
00001A06                            KosDec:
00001A06 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A08 7000                           moveq   #0,d0
00001A0A 7200                           moveq   #0,d1
00001A0C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A10 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A12 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A14 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A18 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A1C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A1E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A20 6000                           bra.s   @FetchNewCode
00001A22                            ; ---------------------------------------------------------------------------
00001A22                            @FetchCodeLoop:
00001A22                                ; Code 1 (Uncompressed byte).
00001A3A 12D8                           move.b  (a0)+,(a1)+
00001A3C                            
00001A3C                            @FetchNewCode:
00001A3E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A40                            
00001A40                                ; Codes 00 and 01.
00001A40 7AFF                           moveq   #-1,d5
00001A42 4BD1                           lea (a1),a5
00001A5E 6500 0000                      bcs.w   @Code_01
00001A62                            
00001A62                                ; Code 00 (Dictionary ref. short).
00001A7C 6500                           bcs.s   @Copy45
00001A98 6500                           bcs.s   @Copy3
00001AB2 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB4 DAC5                           adda.w  d5,a5
00001AB6 12DD                           move.b  (a5)+,(a1)+
00001AB8 12DD                           move.b  (a5)+,(a1)+
00001ABA 6080                           bra.s   @FetchNewCode
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            @Copy3:
00001AD4 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AD6 DAC5                           adda.w  d5,a5
00001AD8 12DD                           move.b  (a5)+,(a1)+
00001ADA 12DD                           move.b  (a5)+,(a1)+
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 6000 FF5C                      bra.w   @FetchNewCode
00001AE2                            ; ---------------------------------------------------------------------------
00001AE2                            @Copy45:
00001AFC 6500                           bcs.s   @Copy5
00001B16 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B18 DAC5                           adda.w  d5,a5
00001B1A 12DD                           move.b  (a5)+,(a1)+
00001B1C 12DD                           move.b  (a5)+,(a1)+
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 6000 FF18                      bra.w   @FetchNewCode
00001B26                            ; ---------------------------------------------------------------------------
00001B26                            @Copy5:
00001B3E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B40 DAC5                           adda.w  d5,a5
00001B42 12DD                           move.b  (a5)+,(a1)+
00001B44 12DD                           move.b  (a5)+,(a1)+
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 6000 FEEE                      bra.w   @FetchNewCode
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            @Code_01:
00001B50 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B52                                ; Code 01 (Dictionary ref. long / special).
00001B6A 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B6C 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B6E 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B70 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B72 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B74 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B76 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B78                            
00001B78                                ; special mode (extended counter)
00001B78 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7A 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B7C 5304                           subq.b  #1,d4
00001B7E 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B82                            
00001B82 DAC5                           adda.w  d5,a5
00001B84 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B86 3C04                           move.w  d4,d6
00001B88 4646                           not.w   d6
00001B8A CC47                           and.w   d7,d6
00001B8C DC46                           add.w   d6,d6
00001B8E E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B90 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B94                            ; ---------------------------------------------------------------------------
00001B94                            @largecopy:
00001B94                                rept (1<<Kos_LoopUnroll)
00001B94                                move.b  (a5)+,(a1)+
00001B94 12DD 12DD 12DD 12DD 12DD+      endr
00001BA4 51CC FFEE                      dbra    d4,@largecopy
00001BA8 6000 FE92                      bra.w   @FetchNewCode
00001BAC                            ; ---------------------------------------------------------------------------
00001BAC                            @StreamCopy:
00001BAC DAC5                           adda.w  d5,a5
00001BAE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB0 BF44                           eor.w   d7,d4
00001BB2 D844                           add.w   d4,d4
00001BB4 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BB8                            ; ---------------------------------------------------------------------------
00001BB8                            @mediumcopy:
00001BB8                                rept 8
00001BB8                                move.b  (a5)+,(a1)+
00001BB8 12DD 12DD 12DD 12DD 12DD+      endr
00001BC8 6000 FE72                      bra.w   @FetchNewCode
00001BCC                            ; ---------------------------------------------------------------------------
00001BCC                            @Quit:
00001BCC 4E75                           rts                             ; End of function KosDec.
00001BCE                            ; ===========================================================================
00001BCE                            KosDec_ByteMap:
00001BCE 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BDE 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BEE 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001BFE 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C0E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C1E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C2E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C3E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C4E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C5E 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C6E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C7E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C8E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001C9E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CAE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CBE 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CCE                            ; ===========================================================================
00001CCE                            ; ===========================================================================
00001CCE                            
00001CCE                            		include	"_inc\PaletteCycle.asm"
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            ; Palette cycling routine loading subroutine
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            
00001CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CCE                            
00001CCE                            
00001CCE                            PaletteCycle:
00001CCE 7400                       		moveq	#0,d2
00001CD0 7000                       		moveq	#0,d0
00001CD2 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CD6 D040                       		add.w	d0,d0
00001CD8 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CDC 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE0                            ; End of function PaletteCycle
00001CE0                            
00001CE0                            ; ===========================================================================
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0                            ; Palette cycling routines
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE2 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE4 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CE6 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CE8 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CEC 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CEE                            
00001CEE                            
00001CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CEE                            
00001CEE                            
00001CEE                            PCycle_Title:
00001CEE 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF4 6000                       		bra.s	PCycGHZ_Go
00001CF6                            ; ===========================================================================
00001CF6                            
00001CF6                            PCycle_GHZ:
00001CF6 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001CFC                            
00001CFC                            PCycGHZ_Go:
00001CFC 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D00 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D02                            
00001D02 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D08 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D0C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D10 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D14 E748                       		lsl.w	#3,d0
00001D16 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D22                            
00001D22                            PCycGHZ_Skip:
00001D22 4E75                       		rts	
00001D24                            ; End of function PCycle_GHZ
00001D24                            
00001D24                            
00001D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D24                            
00001D24                            
00001D24                            PCycle_LZ:
00001D24                            ; Waterfalls
00001D24 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D28 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2A                            
00001D2A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D30 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D34 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D38 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D3C E748                       		lsl.w	#3,d0
00001D3E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D4C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D52                            
00001D52                            	PCycLZ_NotSBZ3:
00001D52 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D5E 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D62 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D66 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            PCycLZ_Skip1:
00001D6A                            ; Conveyor belts
00001D6A                            		;move.w	(v_framecount).w,d0
00001D6A                            		;andi.w	#7,d0
00001D6A                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6A                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6A                            		;moveq	#1,d1
00001D6A                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6A                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6A                            		;neg.w	d1
00001D6A                            
00001D6A                            	;PCycLZ_NoRev:
00001D6A                            		;move.w	(v_pal_buffer).w,d0
00001D6A                            		;andi.w	#3,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;cmpi.w	#3,d0
00001D6A                            		;bcs.s	loc_1A0A
00001D6A                            		;move.w	d0,d1
00001D6A                            		;moveq	#0,d0
00001D6A                            		;tst.w	d1
00001D6A                            		;bpl.s	loc_1A0A
00001D6A                            		;moveq	#2,d0
00001D6A                            
00001D6A                            ;loc_1A0A:
00001D6A                            		;move.w	d0,(v_pal_buffer).w
00001D6A                            		;add.w	d0,d0
00001D6A                            		;move.w	d0,d1
00001D6A                            		;add.w	d0,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;lea	(Pal_LZCyc2).l,a0
00001D6A                            		;lea	(v_pal_dry+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            		;lea	(Pal_LZCyc3).l,a0
00001D6A                            		;lea	(v_pal_water+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            ;PCycLZ_Skip2:
00001D6A 4E75                       		rts	
00001D6C                            ; End of function PCycle_LZ
00001D6C                            
00001D6C                            ; ===========================================================================
00001D6C 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D74                            ; ===========================================================================
00001D74                            
00001D74                            PCycle_MZ:
00001D74 4E75                       		rts	
00001D76                            
00001D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D76                            
00001D76                            
00001D76                            PalCycle_SLZ:
00001D76 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7A 6A00                       		bpl.s	locret_1A80
00001D7C 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D82 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D86 5240                       		addq.w	#1,d0
00001D88 0C40 0006                  		cmpi.w	#6,d0
00001D8C 6500                       		bcs.s	loc_1A60
00001D8E 7000                       		moveq	#0,d0
00001D90                            
00001D90                            loc_1A60:
00001D90 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D94 3200                       		move.w	d0,d1
00001D96 D241                       		add.w	d1,d1
00001D98 D041                       		add.w	d1,d0
00001D9A D040                       		add.w	d0,d0
00001D9C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB0                            
00001DB0                            locret_1A80:
00001DB0 4E75                       		rts	
00001DB2                            ; End of function PalCycle_SLZ
00001DB2                            
00001DB2                            
00001DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB2                            
00001DB2                            
00001DB2                            PalCycle_SYZ:
00001DB2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DB6 6A00                       		bpl.s	locret_1AC6
00001DB8 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DBE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC2 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DC6 0240 0003                  		andi.w	#3,d0
00001DCA E548                       		lsl.w	#2,d0
00001DCC 3200                       		move.w	d0,d1
00001DCE D040                       		add.w	d0,d0
00001DD0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DD6 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DDE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DE8 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DEC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DF6                            
00001DF6                            locret_1AC6:
00001DF6 4E75                       		rts	
00001DF8                            ; End of function PalCycle_SYZ
00001DF8                            
00001DF8                            
00001DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DF8                            
00001DF8                            
00001DF8                            PalCycle_SBZ:
00001DF8 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001DFE 4A38 FE11                  		tst.b	(v_act).w
00001E02 6700                       		beq.s	loc_1ADA
00001E04 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0A                            
00001E0A                            loc_1ADA:
00001E0A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E0E 321A                       		move.w	(a2)+,d1
00001E10                            
00001E10                            loc_1AE0:
00001E10 5311                       		subq.b	#1,(a1)
00001E12 6B00                       		bmi.s	loc_1AEA
00001E14 5489                       		addq.l	#2,a1
00001E16 5C8A                       		addq.l	#6,a2
00001E18 6000                       		bra.s	loc_1B06
00001E1A                            ; ===========================================================================
00001E1A                            
00001E1A                            loc_1AEA:
00001E1A 12DA                       		move.b	(a2)+,(a1)+
00001E1C 1011                       		move.b	(a1),d0
00001E1E 5200                       		addq.b	#1,d0
00001E20 B01A                       		cmp.b	(a2)+,d0
00001E22 6500                       		bcs.s	loc_1AF6
00001E24 7000                       		moveq	#0,d0
00001E26                            
00001E26                            loc_1AF6:
00001E26 12C0                       		move.b	d0,(a1)+
00001E28 0240 000F                  		andi.w	#$F,d0
00001E2C D040                       		add.w	d0,d0
00001E2E 305A                       		movea.w	(a2)+,a0
00001E30 365A                       		movea.w	(a2)+,a3
00001E32 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E36                            
00001E36                            loc_1B06:
00001E36 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E3E 6A00                       		bpl.s	locret_1B64
00001E40 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E46 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E4C 4A38 FE11                  		tst.b	(v_act).w
00001E50 6700                       		beq.s	loc_1B2E
00001E52 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E58 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E5E                            
00001E5E                            loc_1B2E:
00001E5E 72FF                       		moveq	#-1,d1
00001E60 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E64 6700                       		beq.s	loc_1B38
00001E66 4441                       		neg.w	d1
00001E68                            
00001E68                            loc_1B38:
00001E68 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E6C 0240 0003                  		andi.w	#3,d0
00001E70 D041                       		add.w	d1,d0
00001E72 0C40 0003                  		cmpi.w	#3,d0
00001E76 6500                       		bcs.s	loc_1B52
00001E78 3200                       		move.w	d0,d1
00001E7A 7000                       		moveq	#0,d0
00001E7C 4A41                       		tst.w	d1
00001E7E 6A00                       		bpl.s	loc_1B52
00001E80 7002                       		moveq	#2,d0
00001E82                            
00001E82                            loc_1B52:
00001E82 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E86 D040                       		add.w	d0,d0
00001E88 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E90 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E94                            
00001E94                            locret_1B64:
00001E94 4E75                       		rts	
00001E96                            ; End of function PalCycle_SBZ
00001E96                            ; End of function PalCycle_SBZ
00001E96                            
00001E96                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EB6                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001ED6                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EF6                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F08                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F82                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FA6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FC6                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FD6                            
00001FD6                            		include	"_inc\SBZ Palette Scripts.asm"
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            ; Scrap Brain Zone palette cycling script
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            
00001FD6                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FD6                            	dc.b duration, colors
00001FD6                            	dc.w paladdress, ramaddress
00001FD6                            	endm
00001FD6                            
00001FD6                            ; duration in frames, number of colors, palette address, RAM address
00001FD6                            
00001FD6                            Pal_SBZCycList1:
00001FD6 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FD8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FDE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE4 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEA 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF0 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FF6 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001FFC 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002002 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002008 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000200E                            end_SBZCycList1:
0000200E                            	even
0000200E                            
0000200E                            Pal_SBZCycList2:
0000200E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002010 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002016 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000201C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002022 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002028 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000202E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002034 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203A                            end_SBZCycList2:
0000203A                            	even
0000203A                            	even
0000203A                            
0000203A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205A                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206A                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00002076                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00002086                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00002096                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020B6                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C0                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D0                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            ; Subroutine to	fade in from black
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            
000020DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020DC                            
000020DC                            
000020DC                            PaletteFadeIn:
000020DC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E2                            
000020E2                            PalFadeIn_Alt:				; start position and size are already set
000020E2 7000                       		moveq	#0,d0
000020E4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000020EC D0C0                       		adda.w	d0,a0
000020EE 7200                       		moveq	#cBlack,d1
000020F0 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F4                            
000020F4                            	@fill:
000020F4 30C1                       		move.w	d1,(a0)+
000020F6 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FA                            
000020FA 383C 0015                  		move.w	#$15,d4
000020FE                            
000020FE                            	@mainloop:
000020FE 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002104 6100 0000                  		bsr.w	WaitForVBla
00002108 6100                       		bsr.s	FadeIn_FromBlack
0000210A 6100 F64A                  		bsr.w	RunPLC
0000210E 51CC FFEE                  		dbf	d4,@mainloop
00002112 4E75                       		rts	
00002114                            ; End of function PaletteFadeIn
00002114                            
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            FadeIn_FromBlack:
00002114 7000                       		moveq	#0,d0
00002116 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000211E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002122 D0C0                       		adda.w	d0,a0
00002124 D2C0                       		adda.w	d0,a1
00002126 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212A                            
0000212A                            	@addcolour:
0000212A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000212C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002130                            
00002130 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002136 6600                       		bne.s	@exit		; if not, branch
00002138                            
00002138 7000                       		moveq	#0,d0
0000213A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000213E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002142 1038 F626                  		move.b	(v_pfade_start).w,d0
00002146 D0C0                       		adda.w	d0,a0
00002148 D2C0                       		adda.w	d0,a1
0000214A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000214E                            
0000214E                            	@addcolour2:
0000214E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002150 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002154                            
00002154                            @exit:
00002154 4E75                       		rts	
00002156                            ; End of function FadeIn_FromBlack
00002156                            
00002156                            
00002156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002156                            
00002156                            
00002156                            FadeIn_AddColour:
00002156                            @addblue:
00002156 3419                       		move.w	(a1)+,d2
00002158 3610                       		move.w	(a0),d3
0000215A B642                       		cmp.w	d2,d3		; is colour already at threshold level?
0000215C 6700                       		beq.s	@next		; if yes, branch
0000215E 3203                       		move.w	d3,d1
00002160 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002164 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002166 6200                       		bhi.s	@addgreen	; if yes, branch
00002168 30C1                       		move.w	d1,(a0)+	; update palette
0000216A 4E75                       		rts	
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            @addgreen:
0000216C 3203                       		move.w	d3,d1
0000216E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002172 B242                       		cmp.w	d2,d1
00002174 6200                       		bhi.s	@addred
00002176 30C1                       		move.w	d1,(a0)+	; update palette
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            @addred:
0000217A 5458                       		addq.w	#2,(a0)+	; increase red value
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @next:
0000217E 5448                       		addq.w	#2,a0		; next colour
00002180 4E75                       		rts	
00002182                            ; End of function FadeIn_AddColour
00002182                            
00002182                            
00002182                            ; ---------------------------------------------------------------------------
00002182                            ; Subroutine to fade out to black
00002182                            ; ---------------------------------------------------------------------------
00002182                            
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            PaletteFadeOut:
00002182 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002188 383C 0015                  		move.w	#$15,d4
0000218C                            
0000218C                            	@mainloop:
0000218C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002192 6100 0000                  		bsr.w	WaitForVBla
00002196 6100                       		bsr.s	FadeOut_ToBlack
00002198 6100 F5BC                  		bsr.w	RunPLC
0000219C 51CC FFEE                  		dbf	d4,@mainloop
000021A0 4E75                       		rts	
000021A2                            ; End of function PaletteFadeOut
000021A2                            
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            FadeOut_ToBlack:
000021A2 7000                       		moveq	#0,d0
000021A4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021A8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021AC D0C0                       		adda.w	d0,a0
000021AE 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B2                            
000021B2                            	@decolour:
000021B2 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B4 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021B8                            
000021B8 7000                       		moveq	#0,d0
000021BA 41F8 FA80                  		lea	(v_pal_water).w,a0
000021BE 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C2 D0C0                       		adda.w	d0,a0
000021C4 1038 F627                  		move.b	(v_pfade_size).w,d0
000021C8                            
000021C8                            	@decolour2:
000021C8 6100                       		bsr.s	FadeOut_DecColour
000021CA 51C8 FFFC                  		dbf	d0,@decolour2
000021CE 4E75                       		rts	
000021D0                            ; End of function FadeOut_ToBlack
000021D0                            
000021D0                            
000021D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D0                            
000021D0                            
000021D0                            FadeOut_DecColour:
000021D0                            @dered:
000021D0 3410                       		move.w	(a0),d2
000021D2 6700                       		beq.s	@next
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 6700                       		beq.s	@degreen
000021DC 5558                       		subq.w	#2,(a0)+	; decrease red value
000021DE 4E75                       		rts	
000021E0                            ; ===========================================================================
000021E0                            
000021E0                            @degreen:
000021E0 3202                       		move.w	d2,d1
000021E2 0241 00E0                  		andi.w	#$E0,d1
000021E6 6700                       		beq.s	@deblue
000021E8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021EC 4E75                       		rts	
000021EE                            ; ===========================================================================
000021EE                            
000021EE                            @deblue:
000021EE 3202                       		move.w	d2,d1
000021F0 0241 0E00                  		andi.w	#$E00,d1
000021F4 6700                       		beq.s	@next
000021F6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FA 4E75                       		rts	
000021FC                            ; ===========================================================================
000021FC                            
000021FC                            @next:
000021FC 5448                       		addq.w	#2,a0
000021FE 4E75                       		rts	
00002200                            ; End of function FadeOut_DecColour
00002200                            
00002200                            ; ---------------------------------------------------------------------------
00002200                            ; Subroutine to	fade in from white (Special Stage)
00002200                            ; ---------------------------------------------------------------------------
00002200                            
00002200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002200                            
00002200                            
00002200                            PaletteWhiteIn:
00002200 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002206 7000                       		moveq	#0,d0
00002208 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000220C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002210 D0C0                       		adda.w	d0,a0
00002212 323C 0EEE                  		move.w	#cWhite,d1
00002216 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221A                            
0000221A                            	@fill:
0000221A 30C1                       		move.w	d1,(a0)+
0000221C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002220                            
00002220 383C 0015                  		move.w	#$15,d4
00002224                            
00002224                            	@mainloop:
00002224 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222A 6100 0000                  		bsr.w	WaitForVBla
0000222E 6100                       		bsr.s	WhiteIn_FromWhite
00002230 6100 F524                  		bsr.w	RunPLC
00002234 51CC FFEE                  		dbf	d4,@mainloop
00002238 4E75                       		rts	
0000223A                            ; End of function PaletteWhiteIn
0000223A                            
0000223A                            
0000223A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223A                            
0000223A                            
0000223A                            WhiteIn_FromWhite:
0000223A 7000                       		moveq	#0,d0
0000223C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002240 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002244 1038 F626                  		move.b	(v_pfade_start).w,d0
00002248 D0C0                       		adda.w	d0,a0
0000224A D2C0                       		adda.w	d0,a1
0000224C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002250                            
00002250                            	@decolour:
00002250 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002252 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002256                            
00002256 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000225C 6600                       		bne.s	@exit		; if not, branch
0000225E 7000                       		moveq	#0,d0
00002260 41F8 FA80                  		lea	(v_pal_water).w,a0
00002264 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002268 1038 F626                  		move.b	(v_pfade_start).w,d0
0000226C D0C0                       		adda.w	d0,a0
0000226E D2C0                       		adda.w	d0,a1
00002270 1038 F627                  		move.b	(v_pfade_size).w,d0
00002274                            
00002274                            	@decolour2:
00002274 6100                       		bsr.s	WhiteIn_DecColour
00002276 51C8 FFFC                  		dbf	d0,@decolour2
0000227A                            
0000227A                            	@exit:
0000227A 4E75                       		rts	
0000227C                            ; End of function WhiteIn_FromWhite
0000227C                            
0000227C                            
0000227C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227C                            
0000227C                            
0000227C                            WhiteIn_DecColour:
0000227C                            @deblue:
0000227C 3419                       		move.w	(a1)+,d2
0000227E 3610                       		move.w	(a0),d3
00002280 B642                       		cmp.w	d2,d3
00002282 6700                       		beq.s	@next
00002284 3203                       		move.w	d3,d1
00002286 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228A 6500                       		blo.s	@degreen
0000228C B242                       		cmp.w	d2,d1
0000228E 6500                       		blo.s	@degreen
00002290 30C1                       		move.w	d1,(a0)+
00002292 4E75                       		rts	
00002294                            ; ===========================================================================
00002294                            
00002294                            @degreen:
00002294 3203                       		move.w	d3,d1
00002296 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229A 6500                       		blo.s	@dered
0000229C B242                       		cmp.w	d2,d1
0000229E 6500                       		blo.s	@dered
000022A0 30C1                       		move.w	d1,(a0)+
000022A2 4E75                       		rts	
000022A4                            ; ===========================================================================
000022A4                            
000022A4                            @dered:
000022A4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @next:
000022A8 5448                       		addq.w	#2,a0
000022AA 4E75                       		rts	
000022AC                            ; End of function WhiteIn_DecColour
000022AC                            
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            ; Subroutine to fade to white (Special Stage)
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            
000022AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AC                            
000022AC                            
000022AC                            PaletteWhiteOut:
000022AC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B2 383C 0015                  		move.w	#$15,d4
000022B6                            
000022B6                            	@mainloop:
000022B6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022BC 6100 0000                  		bsr.w	WaitForVBla
000022C0 6100                       		bsr.s	WhiteOut_ToWhite
000022C2 6100 F492                  		bsr.w	RunPLC
000022C6 51CC FFEE                  		dbf	d4,@mainloop
000022CA 4E75                       		rts	
000022CC                            ; End of function PaletteWhiteOut
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteOut_ToWhite:
000022CC 7000                       		moveq	#0,d0
000022CE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D2 1038 F626                  		move.b	(v_pfade_start).w,d0
000022D6 D0C0                       		adda.w	d0,a0
000022D8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022DC                            
000022DC                            	@addcolour:
000022DC 6100                       		bsr.s	WhiteOut_AddColour
000022DE 51C8 FFFC                  		dbf	d0,@addcolour
000022E2                            
000022E2 7000                       		moveq	#0,d0
000022E4 41F8 FA80                  		lea	(v_pal_water).w,a0
000022E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022EC D0C0                       		adda.w	d0,a0
000022EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F2                            
000022F2                            	@addcolour2:
000022F2 6100                       		bsr.s	WhiteOut_AddColour
000022F4 51C8 FFFC                  		dbf	d0,@addcolour2
000022F8 4E75                       		rts	
000022FA                            ; End of function WhiteOut_ToWhite
000022FA                            
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            WhiteOut_AddColour:
000022FA                            @addred:
000022FA 3410                       		move.w	(a0),d2
000022FC 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002300 6700                       		beq.s	@next
00002302 3202                       		move.w	d2,d1
00002304 0241 000E                  		andi.w	#$E,d1
00002308 0C41 000E                  		cmpi.w	#cRed,d1
0000230C 6700                       		beq.s	@addgreen
0000230E 5458                       		addq.w	#2,(a0)+	; increase red value
00002310 4E75                       		rts	
00002312                            ; ===========================================================================
00002312                            
00002312                            @addgreen:
00002312 3202                       		move.w	d2,d1
00002314 0241 00E0                  		andi.w	#$E0,d1
00002318 0C41 00E0                  		cmpi.w	#cGreen,d1
0000231C 6700                       		beq.s	@addblue
0000231E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002322 4E75                       		rts	
00002324                            ; ===========================================================================
00002324                            
00002324                            @addblue:
00002324 3202                       		move.w	d2,d1
00002326 0241 0E00                  		andi.w	#$E00,d1
0000232A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000232E 6700                       		beq.s	@next
00002330 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002334 4E75                       		rts	
00002336                            ; ===========================================================================
00002336                            
00002336                            @next:
00002336 5448                       		addq.w	#2,a0
00002338 4E75                       		rts	
0000233A                            ; End of function WhiteOut_AddColour
0000233A                            
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            ; Palette cycling routine - Sega logo
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            
0000233A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233A                            
0000233A                            
0000233A                            PalCycle_Sega:
0000233A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000233E 6600                       		bne.s	loc_206A
00002340 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002344 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234A 7205                       		moveq	#5,d1
0000234C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002350                            
00002350                            loc_2020:
00002350 6A00                       		bpl.s	loc_202A
00002352 5448                       		addq.w	#2,a0
00002354 5341                       		subq.w	#1,d1
00002356 5440                       		addq.w	#2,d0
00002358 60F6                       		bra.s	loc_2020
0000235A                            ; ===========================================================================
0000235A                            
0000235A                            loc_202A:
0000235A 3400                       		move.w	d0,d2
0000235C 0242 001E                  		andi.w	#$1E,d2
00002360 6600                       		bne.s	loc_2034
00002362 5440                       		addq.w	#2,d0
00002364                            
00002364                            loc_2034:
00002364 0C40 0060                  		cmpi.w	#$60,d0
00002368 6400                       		bhs.s	loc_203E
0000236A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000236E                            
0000236E                            loc_203E:
0000236E 5440                       		addq.w	#2,d0
00002370 51C9 FFE8                  		dbf	d1,loc_202A
00002374                            
00002374 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002378 5440                       		addq.w	#2,d0
0000237A 3400                       		move.w	d0,d2
0000237C 0242 001E                  		andi.w	#$1E,d2
00002380 6600                       		bne.s	loc_2054
00002382 5440                       		addq.w	#2,d0
00002384                            
00002384                            loc_2054:
00002384 0C40 0064                  		cmpi.w	#$64,d0
00002388 6D00                       		blt.s	loc_2062
0000238A 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002390 70F4                       		moveq	#-$C,d0
00002392                            
00002392                            loc_2062:
00002392 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002396 7001                       		moveq	#1,d0
00002398 4E75                       		rts	
0000239A                            ; ===========================================================================
0000239A                            
0000239A                            loc_206A:
0000239A 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000239E 6A00                       		bpl.s	loc_20BC
000023A0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023A6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AA 0640 000C                  		addi.w	#$C,d0
000023AE 0C40 0030                  		cmpi.w	#$30,d0
000023B2 6500                       		blo.s	loc_2088
000023B4 7000                       		moveq	#0,d0
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            loc_2088:
000023B8 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023BC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C2 41F0 0000                  		lea	(a0,d0.w),a0
000023C6 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CA 22D8                       		move.l	(a0)+,(a1)+
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 3298                       		move.w	(a0)+,(a1)
000023D0 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D4 7000                       		moveq	#0,d0
000023D6 722C                       		moveq	#$2C,d1
000023D8                            
000023D8                            loc_20A8:
000023D8 3400                       		move.w	d0,d2
000023DA 0242 001E                  		andi.w	#$1E,d2
000023DE 6600                       		bne.s	loc_20B2
000023E0 5440                       		addq.w	#2,d0
000023E2                            
000023E2                            loc_20B2:
000023E2 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E6 5440                       		addq.w	#2,d0
000023E8 51C9 FFEE                  		dbf	d1,loc_20A8
000023EC                            
000023EC                            loc_20BC:
000023EC 7001                       		moveq	#1,d0
000023EE 4E75                       		rts	
000023F0                            ; End of function PalCycle_Sega
000023F0                            
000023F0                            ; ===========================================================================
000023F0                            
000023F0                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000023FC                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load palettes
0000242C                            
0000242C                            ; input:
0000242C                            ;	d0 = index number for palette
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load pallets
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            PalLoad1:
0000242C 1238 FE11                  		move.b ($FFFFFE11),d1
00002430 43F9 0000 0000             		lea (PalPointers).l,a1
00002436 0C01 0000                  		cmp.b #0,d1
0000243A 6700 0000                  		beq.w PalLoad1_Continue
0000243E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002444 0C01 0001                  		cmp.b #1,d1
00002448 6700 0000                  		beq.w PalLoad1_Continue
0000244C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002452                            
00002452                            PalLoad1_Continue:
00002452 E748                       		lsl.w #3,d0
00002454 D2C0                       		adda.w d0,a1
00002456 2459                       		movea.l (a1)+,a2
00002458 3659                       		movea.w (a1)+,a3
0000245A D6FC 0080                  		adda.w #$80,a3
0000245E 3E19                       		move.w (a1)+,d7
00002460                            
00002460                            loc_2110:
00002460 26DA                       		move.l (a2)+,(a3)+
00002462 51CF FFFC                  		dbf d7,loc_2110
00002466 4E75                       		rts
00002468                             ; End of function PalLoad1
00002468                            
00002468                            
00002468                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002468                            
00002468                            PalLoad2:
00002468 1238 FE11                  		move.b ($FFFFFE11),d1
0000246C 43F9 0000 0000             		lea (PalPointers).l,a1
00002472 0C01 0000                  		cmp.b #0,d1
00002476 6700 0000                  		beq.w PalLoad2_Continue
0000247A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002480 0C01 0001                  		cmp.b #1,d1
00002484 6700 0000                  		beq.w PalLoad2_Continue
00002488 43F9 0000 0000             		lea (PalPointers3).l,a1
0000248E                            
0000248E                            
0000248E                            PalLoad2_Continue:
0000248E E748                       		lsl.w #3,d0
00002490 D2C0                       		adda.w d0,a1
00002492 2459                       		movea.l (a1)+,a2
00002494 3659                       		movea.w (a1)+,a3
00002496 3E19                       		move.w (a1)+,d7
00002498                            
00002498                            loc_2128:
00002498 26DA                       		move.l (a2)+,(a3)+
0000249A 51CF FFFC                  		dbf d7,loc_2128
0000249E 4E75                       		rts
000024A0                            ; End of function PalLoad2
000024A0                            
000024A0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A0                            
000024A0                            
000024A0                            PalLoad_Loop: ;Quick load - TIS
000024A0                                    
000024A0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024A6 4E75                               rts
000024A8                            
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            ; Underwater pallet loading subroutine
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            
000024A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A8                            
000024A8                            PalLoad3_Water:
000024A8 1238 FE11                  		move.b ($FFFFFE11),d1
000024AC 43F9 0000 0000             		lea (PalPointers).l,a1
000024B2 0C01 0000                  		cmp.b #0,d1
000024B6 6700 0000                  		beq.w PalLoad3_Continue
000024BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C0 0C01 0001                  		cmp.b #1,d1
000024C4 6700 0000                  		beq.w PalLoad3_Continue
000024C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024CE                            
000024CE                            PalLoad3_Continue:
000024CE E748                       		lsl.w #3,d0
000024D0 D2C0                       		adda.w d0,a1
000024D2 2459                       		movea.l (a1)+,a2
000024D4 3659                       		movea.w (a1)+,a3
000024D6 96FC 0080                  		suba.w #$80,a3
000024DA 3E19                       		move.w (a1)+,d7
000024DC                            
000024DC                            loc_2144:
000024DC 26DA                       		move.l (a2)+,(a3)+
000024DE 51CF FFFC                  		dbf d7,loc_2144
000024E2 4E75                       		rts
000024E4                            ; End of function PalLoad3_Water
000024E4                            
000024E4                            
000024E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E4                            
000024E4                            
000024E4                            PalLoad4_Water:
000024E4 1238 FE11                  		move.b ($FFFFFE11),d1
000024E8 43F9 0000 0000             		lea (PalPointers).l,a1
000024EE 0C01 0000                  		cmp.b #0,d1
000024F2 6700 0000                  		beq.w PalLoad4_Continue
000024F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000024FC 0C01 0001                  		cmp.b #1,d1
00002500 6700 0000                  		beq.w PalLoad4_Continue
00002504 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250A                            
0000250A                            PalLoad4_Continue:
0000250A E748                       		lsl.w #3,d0
0000250C D2C0                       		adda.w d0,a1
0000250E 2459                       		movea.l (a1)+,a2
00002510 3659                       		movea.w (a1)+,a3
00002512 96FC 0100                  		suba.w #$100,a3
00002516 3E19                       		move.w (a1)+,d7
00002518                            loc_2160:
00002518 26DA                       		move.l (a2)+,(a3)+
0000251A 51CF FFFC                  		dbf d7,loc_2160
0000251E 4E75                       		rts
00002520                             ; End of function PalLoad4_Water
00002520                            
00002520                            ; ===========================================================================
00002520                            
00002520                            		include	"_inc\Palette Pointers.asm"
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Palette pointers
00002520                            ; ---------------------------------------------------------------------------
00002520                            
00002520                            palp:	macro paladdress,ramaddress,colors
00002520                            	dc.l paladdress
00002520                            	dc.w ramaddress, (colors>>1)-1
00002520                            	endm
00002520                            
00002520                            PalPointers:
00002520                            
00002520                            ; palette address, RAM address, colors
00002520                            
00002520 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002528 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002530 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002538 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002540                            Pal_Levels:
00002540 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002548 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002550 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002558 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002560 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002568 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002570 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002578 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002580 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002588 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002590 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002598 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025A8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B0 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025B8 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C0 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025C8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025D8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025E8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025F8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002600 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002608 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002610 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002618 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002620 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
00002628 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002630 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
00002638 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002640 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
00002648 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002650 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
00002658 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002660 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
00002668 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002670 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
00002678 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002680 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002688 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002690 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002698 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A0                            			even
000026A0                            
000026A0                            PalPointers2:
000026A0                            
000026A0                            ; palette address, RAM address, colors
000026A0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A0 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026A8 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B0 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026B8 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C0                            Pal_Levels_2:
000026C0 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026C8 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D0 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026D8 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E0 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026E8 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F0 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026F8 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002700 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002708 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002710 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002718 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002720 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002728 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002730 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002738 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002740 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002748 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002750 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002758 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002760 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002768 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002770 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002778 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002780 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002788 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002790 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002798 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A0 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027A8 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B0 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027B8 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C0 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027C8 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D0 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002800 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002808 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002810 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002818 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002820                            			even
00002820                            			
00002820                            PalPointers3:
00002820                            			
00002820                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002820 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002828 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002830 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002838 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002840                            Pal_Levels_3:
00002840 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002848 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002850 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002858 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002860 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002868 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002870 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002878 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002880 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002888 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002890 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002898 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028A8 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B0 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028B8 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028C8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028D8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E0 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028E8 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F0 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028F8 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002900 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002908 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002910 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002918 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002920 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002928 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002930 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002938 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002940 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002948 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002950 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002958 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002960 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002968 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002970 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002978 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002980 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002988 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002990 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002998 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A0                            			even
000029A0                            
000029A0                            
000029A0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A0 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A0 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A0 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A0 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A0 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A0 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A0 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A0 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A0 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A0 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A0 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A0 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A0 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A0 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A0 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A0 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A0 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A0 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A0 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A0 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A0 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A0 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A0 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A0 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A0 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A0 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A0 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A0 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A0 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A0 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A0 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A0 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers2.asm"
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers3.asm"
000029A0                            		
000029A0                            
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            ; Palette data
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A20                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B20                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B40                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C00                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C60                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC0                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D20                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D80                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E00                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E80                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F00                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F60                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC0                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003020                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003080                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E0                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003140                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003200                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003260                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C0                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003320                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003400                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003480                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C0                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E0                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003560                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003620                            Pal_Options:	incbin	"palette\Options.bin"
000036A0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C0                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E0                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003700                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003720                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003740                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003760                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003780                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C0                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E0                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003800                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003820                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003840                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003860                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003880                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C0                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E0                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003900                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003920                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003940                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003960                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003980                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C0                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E0                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            ; Subroutine to	wait for VBlank routines to complete
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            
00003A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A00                            
00003A00                            
00003A00                            WaitForVBla:
00003A00 46FC 2300                  		enable_ints
00003A04                            
00003A04                            	@wait:
00003A04 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A08 66FA                       		bne.s	@wait		; if not, branch
00003A0A 4E75                       		rts	
00003A0C                            ; End of function WaitForVBla
00003A0C                            
00003A0C                            		include	"_incObj\sub RandomNumber.asm"
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            ; Subroutine to	generate a pseudo-random number	in d0
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            
00003A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A0C                            
00003A0C                            
00003A0C                            RandomNumber:
00003A0C 2238 F636                  		move.l	(v_random).w,d1
00003A10 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A12 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A18                            
00003A18                            	@scramble:
00003A18 2001                       		move.l	d1,d0
00003A1A E581                       		asl.l	#2,d1
00003A1C D280                       		add.l	d0,d1
00003A1E E781                       		asl.l	#3,d1
00003A20 D280                       		add.l	d0,d1
00003A22 3001                       		move.w	d1,d0
00003A24 4841                       		swap	d1
00003A26 D041                       		add.w	d1,d0
00003A28 3200                       		move.w	d0,d1
00003A2A 4841                       		swap	d1
00003A2C 21C1 F636                  		move.l	d1,(v_random).w
00003A30 4E75                       		rts	
00003A30 4E75                       		rts	
00003A32                            		include	"_incObj\sub CalcSine.asm"
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            ; Subroutine calculate a sine
00003A32                            
00003A32                            ; input:
00003A32                            ;	d0 = angle
00003A32                            
00003A32                            ; output:
00003A32                            ;	d0 = sine
00003A32                            ;	d1 = cosine
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            
00003A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A32                            
00003A32                            
00003A32                            CalcSine:
00003A32 0240 00FF                          andi.w  #$FF,d0
00003A36 5040                               addq.w  #8,d0
00003A38 D040                               add.w   d0,d0
00003A3A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A3E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A42 4E75                               rts
00003A44                            ; End of function CalcSine
00003A44                            
00003A44                            ; ===========================================================================
00003A44                            
00003A44                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC4                            
00003CC4                            ; ===========================================================================
00003CC4                            ; ===========================================================================
00003CC4                            		include	"_incObj\sub CalcAngle.asm"
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            ; Subroutine calculate an angle
00003CC4                            
00003CC4                            ; input:
00003CC4                            ;	d1 = x-axis distance
00003CC4                            ;	d2 = y-axis distance
00003CC4                            
00003CC4                            ; output:
00003CC4                            ;	d0 = angle
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            
00003CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC4                            
00003CC4                            
00003CC4                            CalcAngle:
00003CC4 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CC8 7600                       		moveq	#0,d3
00003CCA 7800                       		moveq	#0,d4
00003CCC 3601                       		move.w	d1,d3
00003CCE 3802                       		move.w	d2,d4
00003CD0 8843                       		or.w	d3,d4
00003CD2 6700                       		beq.s	loc_2D04
00003CD4 3802                       		move.w	d2,d4
00003CD6 4A43                       		tst.w	d3
00003CD8 6A00 0000                  		bpl.w	loc_2CC2
00003CDC 4443                       		neg.w	d3
00003CDE                            
00003CDE                            loc_2CC2:
00003CDE 4A44                       		tst.w	d4
00003CE0 6A00 0000                  		bpl.w	loc_2CCA
00003CE4 4444                       		neg.w	d4
00003CE6                            
00003CE6                            loc_2CCA:
00003CE6 B843                       		cmp.w	d3,d4
00003CE8 6400 0000                  		bcc.w	loc_2CDC
00003CEC E18C                       		lsl.l	#8,d4
00003CEE 88C3                       		divu.w	d3,d4
00003CF0 7000                       		moveq	#0,d0
00003CF2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CF6 6000                       		bra.s	loc_2CE6
00003CF8                            ; ===========================================================================
00003CF8                            
00003CF8                            loc_2CDC:
00003CF8 E18B                       		lsl.l	#8,d3
00003CFA 86C4                       		divu.w	d4,d3
00003CFC 7040                       		moveq	#$40,d0
00003CFE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D02                            
00003D02                            loc_2CE6:
00003D02 4A41                       		tst.w	d1
00003D04 6A00 0000                  		bpl.w	loc_2CF2
00003D08 4440                       		neg.w	d0
00003D0A 0640 0080                  		addi.w	#$80,d0
00003D0E                            
00003D0E                            loc_2CF2:
00003D0E 4A42                       		tst.w	d2
00003D10 6A00 0000                  		bpl.w	loc_2CFE
00003D14 4440                       		neg.w	d0
00003D16 0640 0100                  		addi.w	#$100,d0
00003D1A                            
00003D1A                            loc_2CFE:
00003D1A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D1E 4E75                       		rts	
00003D20                            ; ===========================================================================
00003D20                            
00003D20                            loc_2D04:
00003D20 303C 0040                  		move.w	#$40,d0
00003D24 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D28 4E75                       		rts	
00003D2A                            ; End of function CalcAngle
00003D2A                            
00003D2A                            ; ===========================================================================
00003D2A                            
00003D2A                            Angle_Data:	incbin	"misc\angles.bin"
00003E2C                            
00003E2C                            ; ===========================================================================
00003E2C                            ; ===========================================================================
00003E2C                            
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            ; Sega screen
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            
00003E2C                            GM_Sega:
00003E34 6100 D912                  		bsr.w	ClearPLC
00003E38 6100 E348                  		bsr.w	PaletteFadeOut
00003E3C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E42 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E46 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E4E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E52 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E56 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5A 46FC 2700                  		disable_ints
00003E5E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E62 0200 00BF                  		andi.b	#$BF,d0
00003E66 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E6C 6100 D312                  		bsr.w	ClearScreen
00003E7A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E80 6100 D47C                  		bsr.w	NemDec
00003E84 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E90 303C 0000                  		move.w	#0,d0
00003E94 6100 D9F2                  		bsr.w	EniDec
00003E98                            
00003E98 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EAC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC0                            
00003EC0 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC4 6B00                       			bmi.s   @loadpal
00003EC6 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDA                            
00003EDA                            	@loadpal:
00003EDA 7000                       		moveq	#palid_SegaBG,d0
00003EDC 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE0 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EE6 7E3F                               moveq    #$3F,d7
00003EE8                             
00003EE8                                .loop:
00003EE8 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EEC 51CF FFFA                          dbf        d7,.loop
00003EF0 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF4 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F00 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F06 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F0C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F10 0000 0040                  		ori.b	#$40,d0
00003F14 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1A                            
00003F1A                            Sega_WaitPal:
00003F1A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F20 6100 FADE                  		bsr.w	WaitForVBla
00003F24 6100 E414                  		bsr.w	PalCycle_Sega
00003F28 66F0                       		bne.s	Sega_WaitPal
00003F2A                            
00003F32 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F38 6100 FAC6                  		bsr.w	WaitForVBla
00003F3C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F42                            
00003F42                            Sega_WaitEnd:
00003F42 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F48 6100 FAB6                  		bsr.w	WaitForVBla
00003F4C 4A78 F614                  		tst.w	(v_demolength).w
00003F50 6700                       		beq.s	Sega_GotoTitle
00003F52 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F58 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5A                            
00003F5A                            Sega_GotoTitle:
00003F5A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F60 4E75                       		rts	
00003F62                            ; ===========================================================================
00003F62                            
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            ; Title	screen
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            
00003F62                            GM_Title:
00003F6A 6100 D7DC                  		bsr.w	ClearPLC
00003F6E 6100 E212                  		bsr.w	PaletteFadeOut
00003F72 46FC 2700                  		disable_ints
00003F76 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F80 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F84 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F88 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F8C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F90 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F94 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F98 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003F9C 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA0 6100 D1DE                  		bsr.w	ClearScreen
00003FA4 4EB9 0000 0000             		jsr		SHC2022 
00003FAA                            
00003FAA 43F8 D000                  		lea	(v_objspace).w,a1
00003FAE 7000                       		moveq	#0,d0
00003FB0 323C 07FF                  		move.w	#$7FF,d1
00003FB4                            
00003FB4                            	Tit_ClrObj1:
00003FB4 22C0                       		move.l	d0,(a1)+
00003FB6 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBA                            
00003FC4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCA 6100 D332                  		bsr.w	NemDec
00003FD8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FDE 6100 D31E                  		bsr.w	NemDec
00003FE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FE8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FEE 303C 0000                  		move.w	#0,d0
00003FF2 6100 D894                  		bsr.w	EniDec
00003FF6                            
00003FF6 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400A                            
0000400A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000400E 7000                       		moveq	#cBlack,d0
00004010 323C 001F                  		move.w	#$1F,d1
00004014                            
00004014                            	Tit_ClrPal:
00004014 22C0                       		move.l	d0,(a1)+
00004016 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401A                            
0000401A 4EB9 0000 0000             		jsr		LoadPlayerPal
00004020 6100 E40A                  		bsr.w	PalLoad1
00004024 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004030 4EB9 0000 0000             		jsr	(BuildSprites).l
00004036 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403A 46FC 2700                  		disable_ints
00004048 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000404E 6100 D2AE                  		bsr.w	NemDec
0000405C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004062 6100 D29A                  		bsr.w	NemDec
00004066 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004074 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
0000407A 323C 028F                  		move.w	#$28F,d1
0000407E                            
0000407E                            	Tit_LoadText:
0000407E 3C9D                       		move.w	(a5)+,(a6)
00004080 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00004084                            
00004084 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
0000408A 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00004090 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00004096 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
0000409C 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040A2 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040A8 6100 0000                  		bsr.w	LevelSizeLoad
000040AC 6100 0000                  		bsr.w	DeformLayers
000040B0 43F8 B000                  		lea	(v_16x16).w,a1
000040B4 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040BA 303C 0000                  		move.w	#0,d0
000040BE 6100 D7C8                  		bsr.w	EniDec
000040C2 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040C8 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040CE 6100 D936                  		bsr.w	KosDec
000040D2 6100 0000                  		bsr.w	LevelLayoutLoad
000040D6 6100 E0AA                  		bsr.w	PaletteFadeOut
000040DA 46FC 2700                  		disable_ints
000040DE 6100 D0A0                  		bsr.w	ClearScreen
000040E2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000040E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000040EE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000040F2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000040F6 343C 6000                  		move.w	#$6000,d2
000040FA 6100 0000                  		bsr.w	DrawChunks
000040FE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004104 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000410A 303C 0000                  		move.w	#0,d0
0000410E 6100 D778                  		bsr.w	EniDec
00004112                            
00004112 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004126                            
00004130 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004136 6100 D1C6                  		bsr.w	NemDec
0000413A 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000413C 6100 E2EE                  		bsr.w	PalLoad1
00004148 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
0000414E 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004154 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004158 7000                       		moveq	#0,d0
0000415A 323C 0007                  		move.w	#7,d1
0000415E                            
0000415E                            	Tit_ClrObj2:
0000415E 22C0                       		move.l	d0,(a1)+
00004160 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004164                            
00004164 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
0000416A 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004170 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004174                            
00004174 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004178 6A00                       			bpl.s   @isjap		; if yes, branch
0000417A                            
0000417A 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004180 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00004186                            	@isjap:
00004186 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
0000418C 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00004192 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004198 6100 0000                  		bsr.w	DeformLayers
0000419C 4EB9 0000 0000             		jsr	(BuildSprites).l
000041A2 7000                       		moveq	#plcid_Main,d0
000041A4 6100 D576                  		bsr.w	NewPLC
000041A8 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041AE 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041B4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041B8 0000 0040                  		ori.b	#$40,d0
000041BC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041C2 6100 DF18                  		bsr.w	PaletteFadeIn
000041C6                            
000041C6                            Tit_MainLoop:
000041C6 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041CC 6100 F832                  		bsr.w	WaitForVBla
000041D0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041D6 6100 0000                  		bsr.w	DeformLayers
000041DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000041E0 6100 DB0C                  		bsr.w	PCycle_Title
000041E4 6100 D570                  		bsr.w	RunPLC
000041E8 3038 D008                  		move.w	(v_objspace+obX).w,d0
000041EC 5440                       		addq.w	#2,d0
000041EE 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
000041F2 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
000041F6 6500                       		blo.s	Tit_ChkRegion	; if not, branch
000041F8                            
000041F8 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
000041FE 4E75                       		rts	
00004200                            ; ===========================================================================
00004200                            
00004200                            Tit_ChkRegion:
00004200 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004204 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004206                            
00004206 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000420C 6000                       		bra.s	Tit_EnterCheat
0000420E                            
0000420E                            	Tit_RegionJap:
0000420E 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004214                            
00004214                            Tit_EnterCheat:
00004214 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004218 D0C0                       		adda.w	d0,a0
0000421A 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
0000421E 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004222 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004224 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004226 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000422A 4A00                       		tst.b	d0
0000422C 6600                       		bne.s	Tit_CountC
0000422E 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004232 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004236 E249                       		lsr.w	#1,d1
00004238 0241 0003                  		andi.w	#3,d1
0000423C 6700                       		beq.s	Tit_PlayRing
0000423E 4A38 FFF8                  		tst.b	(v_megadrive).w
00004242 6A00                       		bpl.s	Tit_PlayRing
00004244 7201                       		moveq	#1,d1
00004246 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
0000424A                            
0000424A                            	Tit_PlayRing:
0000424A 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004258 6000                       		bra.s	Tit_CountC
0000425A                            ; ===========================================================================
0000425A                            
0000425A                            Tit_ResetCheat:
0000425A 4A00                       		tst.b	d0
0000425C 6700                       		beq.s	Tit_CountC
0000425E 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004264 6700                       		beq.s	Tit_CountC
00004266 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
0000426C                            
0000426C                            Tit_CountC:
0000426C 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004270 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004274 6700                       		beq.s	loc_3230	; if not, branch
00004276 4EF9 0000 0000             		jmp		MenuScreen ; increment C counter
0000427C                            
0000427C                            loc_3230:
0000427C 4A78 F614                  		tst.w	(v_demolength).w
00004280 6700 0000                  		beq.w	GotoDemo
00004284 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000428A 6700 FF3A                  		beq.w	Tit_MainLoop	; if not, branch
0000428E                            
0000428E                            Tit_ChkLevSel:
0000428E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00004292 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004296 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
0000429C 6700 0000                  		beq.w	PlayLevel	; if not, play level
000042A0                            
000042A0 7002                       		moveq	#palid_LevelSel,d0
000042A2 6100 E1C4                  		bsr.w	PalLoad2	; load level select palette
000042A6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042AA 7000                       		moveq	#0,d0
000042AC 323C 00DF                  		move.w	#$DF,d1
000042B0                            
000042B0                            	Tit_ClrScroll1:
000042B0 22C0                       		move.l	d0,(a1)+
000042B2 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042B6                            
000042B6 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042BA 46FC 2700                  		disable_ints
000042BE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042CE 323C 03FF                  		move.w	#$3FF,d1
000042D2                            
000042D2                            	Tit_ClrScroll2:
000042D2 2C80                       		move.l	d0,(a6)
000042D4 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
000042D8                            
000042D8 6100 0000                  		bsr.w	LevSelTextLoad
000042DC                            
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            ; Level	Select
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            
000042DC                            LevelSelect:
000042DC 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000042E2 6100 F71C                  		bsr.w	WaitForVBla
000042E6 6100 0000                  		bsr.w	LevSelControls
000042EA 6100 D46A                  		bsr.w	RunPLC
000042EE 4AB8 F680                  		tst.l	(v_plc_buffer).w
000042F2 66E8                       		bne.s	LevelSelect
000042F4 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000042FA 67E0                       		beq.s	LevelSelect	; if not, branch
000042FC 3038 FF82                  		move.w	(v_levselitem).w,d0
00004300 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004304 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004306 3038 FF84                  		move.w	(v_levselsound).w,d0
0000430A 0640 0080                  		addi.w	#$80,d0
0000430E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004312 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004314 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004318 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000431A                            
0000431A                            LevSel_PlaySnd:
0000431A 6100 CF34                  		bsr.w	PlaySound_Special
0000431E 60BC                       		bra.s	LevelSelect
00004320                            ; ===========================================================================
00004320                            
00004320                            LevSel_Ending:
00004320 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004326 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000432C 4E75                       		rts	
0000432E                            ; ===========================================================================
0000432E                            
0000432E                            LevSel_Credits:
0000432E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000433C 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004342 4E75                       		rts	
00004344                            ; ===========================================================================
00004344                            
00004344                            LevSel_Level_SS:
00004344 D040                       		add.w	d0,d0
00004346 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
0000434A 6B00 FF90                  		bmi.w	LevelSelect
0000434E 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004352 6600                       		bne.s	LevSel_Level	; if not, branch
00004354 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000435A 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000435E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004364 7000                       		moveq	#0,d0
00004366 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000436A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000436E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004372 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000437A 4E75                       		rts	
0000437C                            ; ===========================================================================
0000437C                            
0000437C                            LevSel_Level:
0000437C 0240 3FFF                  		andi.w	#$3FFF,d0
00004380 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004384                            
00004384                            PlayLevel:
00004384 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000438A 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004390 7000                       		moveq	#0,d0
00004392 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004396 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439A 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000439E 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043A2 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043A6 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043AA 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043AE 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043B4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043C4 4E75                       		rts	
000043C6                            ; ===========================================================================
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            ; Level	select - level pointers
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            		; correct level order
000043C6 0000                       		dc.b id_GHZ, 0
000043C8 0001                       		dc.b id_GHZ, 1
000043CA 0002                       		dc.b id_GHZ, 2
000043CC 0200                       		dc.b id_MZ, 0
000043CE 0201                       		dc.b id_MZ, 1
000043D0 0202                       		dc.b id_MZ, 2
000043D2 0400                       		dc.b id_SYZ, 0
000043D4 0401                       		dc.b id_SYZ, 1
000043D6 0402                       		dc.b id_SYZ, 2
000043D8 0100                       		dc.b id_LZ, 0
000043DA 0101                       		dc.b id_LZ, 1
000043DC 0102                       		dc.b id_LZ, 2
000043DE 0300                       		dc.b id_SLZ, 0
000043E0 0301                       		dc.b id_SLZ, 1
000043E2 0302                       		dc.b id_SLZ, 2
000043E4 0500                       		dc.b id_SBZ, 0
000043E6 0501                       		dc.b id_SBZ, 1
000043E8 0103                       		dc.b id_LZ, 3
000043EA 0502                       		dc.b id_SBZ, 2
000043EC 0700                       		dc.b id_SS, 0		; Special Stage
000043EE 8000                       		dc.w $8000		; Sound Test
000043F0                            		even
000043F0                            ; ---------------------------------------------------------------------------
000043F0                            ; Level	select codes
000043F0                            ; ---------------------------------------------------------------------------
000043F0 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000043F8                            		even
000043F8                            
000043F8 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000043FE                            		even
000043FE                            ; ===========================================================================
000043FE                            
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            ; Demo mode
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            
000043FE                            GotoDemo:
000043FE 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004404                            
00004404                            loc_33B6:
00004404 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000440A 6100 F5F4                  		bsr.w	WaitForVBla
0000440E 6100 0000                  		bsr.w	DeformLayers
00004412 6100 D8BA                  		bsr.w	PaletteCycle
00004416 6100 D33E                  		bsr.w	RunPLC
0000441A 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000441E 5440                       		addq.w	#2,d0
00004420 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004424 0C40 1C00                  		cmpi.w	#$1C00,d0
00004428 6500                       		blo.s	loc_33E4
0000442A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004430 4E75                       		rts	
00004432                            ; ===========================================================================
00004432                            
00004432                            loc_33E4:
00004432 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004438 6600 FE54                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000443C 4A78 F614                  		tst.w	(v_demolength).w
00004440 6600 FFC2                  		bne.w	loc_33B6
0000444C 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004450 0240 0007                  		andi.w	#7,d0
00004454 D040                       		add.w	d0,d0
00004456 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000445A 31C0 FE10                  		move.w	d0,(v_zone).w
0000445E 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004462 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004468 6500                       		blo.s	loc_3422	; if yes, branch
0000446A 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004470                            
00004470                            loc_3422:
00004470 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
00004476 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
0000447C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004480 6600                       		bne.s	Demo_Level	; if not, branch
00004482 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004488 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
0000448C 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004490                            
00004490                            Demo_Level:
00004490 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004496 7000                       		moveq	#0,d0
00004498 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000449C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044A0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044A4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044AC 4E75                       		rts	
000044AE                            ; ===========================================================================
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            ; Levels used in demos
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044B6                            		even
000044B6                            
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            ; Subroutine to	change what you're selecting in the level select
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            
000044B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B6                            
000044B6                            
000044B6                            LevSelControls:
000044B6 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044BA 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044BE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044C0 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044C4 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044C6                            
000044C6                            LevSel_UpDown:
000044C6 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044CC 1238 F604                  		move.b	(v_jpadhold1).w,d1
000044D0 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
000044D4 6700                       		beq.s	LevSel_SndTest	; if not, branch
000044D6 3038 FF82                  		move.w	(v_levselitem).w,d0
000044DA 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
000044DE 6700                       		beq.s	LevSel_Down	; if not, branch
000044E0 5340                       		subq.w	#1,d0		; move up 1 selection
000044E2 6400                       		bhs.s	LevSel_Down
000044E4 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
000044E6                            
000044E6                            LevSel_Down:
000044E6 0801 0001                  		btst	#bitDn,d1	; is down pressed?
000044EA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000044EC 5240                       		addq.w	#1,d0		; move down 1 selection
000044EE 0C40 0015                  		cmpi.w	#$15,d0
000044F2 6500                       		blo.s	LevSel_Refresh
000044F4 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000044F6                            
000044F6                            LevSel_Refresh:
000044F6 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000044FA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000044FE 4E75                       		rts	
00004500                            ; ===========================================================================
00004500                            
00004500                            LevSel_SndTest:
00004500 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004506 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004508 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000450C 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004510 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004512 3038 FF84                  		move.w	(v_levselsound).w,d0
00004516 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000451A 6700                       		beq.s	LevSel_Right	; if not, branch
0000451C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000451E 6400                       		bhs.s	LevSel_Right
00004520 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00004522                            
00004522                            LevSel_Right:
00004522 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004526 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004528 5240                       		addq.w	#1,d0		; add 1	to sound test
0000452A 0C40 0050                  		cmpi.w	#$50,d0
0000452E 6500                       		blo.s	LevSel_Refresh2
00004530 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004532                            
00004532                            LevSel_Refresh2:
00004532 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004536 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000453A                            
0000453A                            LevSel_NoMove:
0000453A 4E75                       		rts	
0000453C                            ; End of function LevSelControls
0000453C                            
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            ; Subroutine to load level select text
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            
0000453C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000453C                            
0000453C                            
0000453C                            LevSelTextLoad:
0000453C                            
0000453C =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000453C                            					; $E210 is a VRAM address
0000453C                            
0000453C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004542 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004548 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000454E 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004552 7214                       		moveq	#$14,d1		; number of lines of text
00004554                            
00004554                            	LevSel_DrawAll:
00004554 2D44 0004                  		move.l	d4,4(a6)
00004558 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000455C 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004562 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004566                            
00004566 7000                       		moveq	#0,d0
00004568 3038 FF82                  		move.w	(v_levselitem).w,d0
0000456C 3200                       		move.w	d0,d1
0000456E 283C 6210 0003             		move.l	#textpos,d4
00004574 EF48                       		lsl.w	#7,d0
00004576 4840                       		swap	d0
00004578 D880                       		add.l	d0,d4
0000457A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004580 E749                       		lsl.w	#3,d1
00004582 3001                       		move.w	d1,d0
00004584 D241                       		add.w	d1,d1
00004586 D240                       		add.w	d0,d1
00004588 D2C1                       		adda.w	d1,a1
0000458A 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
0000458E 2D44 0004                  		move.l	d4,4(a6)
00004592 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
00004596 363C E680                  		move.w	#$E680,d3
0000459A 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045A0 6600                       		bne.s	LevSel_DrawSnd
000045A2 363C C680                  		move.w	#$C680,d3
000045A6                            
000045A6                            LevSel_DrawSnd:
000045B0 3038 FF84                  		move.w	(v_levselsound).w,d0
000045B4 0640 0080                  		addi.w	#$80,d0
000045B8 1400                       		move.b	d0,d2
000045BA E808                       		lsr.b	#4,d0
000045BC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045C0 1002                       		move.b	d2,d0
000045C2 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045C6 4E75                       		rts	
000045C8                            ; End of function LevSelTextLoad
000045C8                            
000045C8                            
000045C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045C8                            
000045C8                            
000045C8                            LevSel_ChgSnd:
000045C8 0240 000F                  		andi.w	#$F,d0
000045CC 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
000045D0 6500                       		blo.s	LevSel_Numb	; if not, branch
000045D2 5E00                       		addi.b	#7,d0		; use alpha characters
000045D4                            
000045D4                            	LevSel_Numb:
000045D4 D043                       		add.w	d3,d0
000045D6 3C80                       		move.w	d0,(a6)
000045D8 4E75                       		rts	
000045DA                            ; End of function LevSel_ChgSnd
000045DA                            
000045DA                            
000045DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045DA                            
000045DA                            
000045DA                            LevSel_ChgLine:
000045DA 7417                       		moveq	#$17,d2		; number of characters per line
000045DC                            
000045DC                            	LevSel_LineLoop:
000045DC 7000                       		moveq	#0,d0
000045DE 1019                       		move.b	(a1)+,d0	; get character
000045E0 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
000045E2 3CBC 0000                  		move.w	#0,(a6)		; use blank character
000045E6 51CA FFF4                  		dbf	d2,LevSel_LineLoop
000045EA 4E75                       		rts	
000045EC                            
000045EC                            
000045EC                            	LevSel_CharOk:
000045EC D043                       		add.w	d3,d0		; combine char with VRAM setting
000045EE 3C80                       		move.w	d0,(a6)		; send to VRAM
000045F0 51CA FFEA                  		dbf	d2,LevSel_LineLoop
000045F4 4E75                       		rts	
000045F6                            ; End of function LevSel_ChgLine
000045F6                            
000045F6                            ; ===========================================================================
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            ; Level	select menu text
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            		incbin	"misc\Level Select Text (JP1).bin"
000047EE                            		even
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            ; Music	playlist
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            MusicList:
000047EE 00                         		dc.b bgm_GHZ    ; GHZ1
000047EF 00                                 	dc.b bgm_LZ    ; GHZ2
000047F0 00                                 	dc.b bgm_LZ   ; GHZ3
000047F1 00                                 	dc.b bgm_LZ    ; GHZ4
000047F2 00                                 	dc.b bgm_Stop    ; LZ1
000047F3 00                                 	dc.b bgm_Stop   ; LZ2
000047F4 00                                 	dc.b bgm_Stop    ; LZ3
000047F5 00                                 	dc.b bgm_SBZ3    ; LZ4
000047F6 00                                 	dc.b bgm_MZ    ; MZ1
000047F7 00                                 	dc.b bgm_SBZ    ; MZ2
000047F8 00                                 	dc.b bgm_SBZ    ; MZ3
000047F9 00                                 	dc.b bgm_SBZ    ; MZ4
000047FA 00                                 	dc.b bgm_LZ    ; SLZ1
000047FB 00                                 	dc.b bgm_LZ    ; SLZ2
000047FC 00                                 	dc.b bgm_LZ    ; SLZ3
000047FD 00                                 	dc.b bgm_LZ    ; SLZ4
000047FE 00                                 	dc.b bgm_SYZ    ; SYZ1
000047FF 00                                 	dc.b bgm_SLZ    ; SYZ2
00004800 00                                 	dc.b bgm_SLZ    ; SYZ3
00004801 00                                 	dc.b bgm_SLZ    ; SYZ4
00004802 00                                 	dc.b bgm_SBZ    ; SBZ1
00004803 00                                 	dc.b bgm_SBZ    ; SBZ2
00004804 00                                 	dc.b bgm_FZ		; SBZ3
00004805 00                                 	dc.b bgm_SBZ    ; SBZ4
00004806 00                                 	dc.b bgm_GHZ    ; GHZ1
00004807 00                                 	dc.b bgm_GHZ    ; GHZ1
00004808 00                                 	dc.b bgm_GHZ    ; GHZ1
00004809 00                                 	dc.b bgm_GHZ    ; GHZ1
0000480A                                    	even
0000480A                            ; ===========================================================================
0000480A                            
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            ; Level
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            
0000480A                            GM_Level:
0000480A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004810 4A78 FFF0                  		tst.w	(f_demo).w
00004814 6B00                       		bmi.s	Level_NoMusicFade
0000481E                            
0000481E                            	Level_NoMusicFade:
0000481E 6100 CF28                  		bsr.w	ClearPLC
00004822 6100 D95E                  		bsr.w	PaletteFadeOut
00004826 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000482A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000482C 46FC 2700                  		disable_ints
0000483A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004840 6100 CABC                  		bsr.w	NemDec
00004844 46FC 2300                  		enable_ints
00004848 7000                       		moveq	#0,d0
0000484A 1038 FE10                  		move.b	(v_zone).w,d0
0000484E E948                       		lsl.w	#4,d0
00004850 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004856 45F2 0000                  		lea	(a2,d0.w),a2
0000485A 7000                       		moveq	#0,d0
0000485C 1012                       		move.b	(a2),d0
0000485E 6700                       		beq.s	loc_37FC
00004860 6100 CE88                  		bsr.w	AddPLC		; load level patterns
00004864                            
00004864                            loc_37FC:
00004864 7000                       		moveq	#plcid_Main2,d0
00004866 6100 CE82                  		bsr.w	AddPLC		; load standard	patterns
0000486A                            
0000486A                            Level_ClrRam:
0000486A 43F8 D000                  		lea	(v_objspace).w,a1
0000486E 7000                       		moveq	#0,d0
00004870 323C 07FF                  		move.w	#$7FF,d1
00004874                            
00004874                            	Level_ClrObjRam:
00004874 22C0                       		move.l	d0,(a1)+
00004876 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000487A                            
0000487A 43F8 F628                  		lea	($FFFFF628).w,a1
0000487E 7000                       		moveq	#0,d0
00004880 323C 0015                  		move.w	#$15,d1
00004884                            
00004884                            	Level_ClrVars1:
00004884 22C0                       		move.l	d0,(a1)+
00004886 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
0000488A                            
0000488A 43F8 F700                  		lea	(v_screenposx).w,a1
0000488E 7000                       		moveq	#0,d0
00004890 323C 003F                  		move.w	#$3F,d1
00004894                            
00004894                            	Level_ClrVars2:
00004894 22C0                       		move.l	d0,(a1)+
00004896 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000489A                            
0000489A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000489E 7000                       		moveq	#0,d0
000048A0 323C 0047                  		move.w	#$47,d1
000048A4                            
000048A4                            	Level_ClrVars3:
000048A4 22C0                       		move.l	d0,(a1)+
000048A6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048AA                            
000048AA 46FC 2700                  		disable_ints
000048AE 6100 C8D0                  		bsr.w	ClearScreen
000048B2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048B8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048BC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048C0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048C4 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048C8 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048CC 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000048D0 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000048D4 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
000048DA 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000048DE 31FC C800 C8FC             		ResetDMAQueue	
000048E4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000048EA 6600                       		bne.s	Level_LoadPal	; if not, branch
000048EC                            
000048EC 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
000048F0 7000                       		moveq	#0,d0
000048F2 1038 FE11                  		move.b	(v_act).w,d0
000048F6 D040                       		add.w	d0,d0
000048F8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000048FE 3031 0000                  		move.w	(a1,d0.w),d0
00004902 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004906 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000490A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000490E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004912 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004916 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000491C                            
0000491C                            Level_LoadPal:
0000491C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004922 46FC 2300                  		move	#$2300,sr
00004926 4EB9 0000 0000             		jsr		LoadPlayerPal
0000492C 6100 DB3A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004930 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004936 6600                       		bne.s	Level_GetBgm	; if not, branch
00004938 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000493E 6100 DB68                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004942 4A38 FE30                  		tst.b	($FFFFFE30).w
00004946 6700                       		beq.s	Level_GetBgm
00004948 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000494E                            
0000494E                            	Level_GetBgm:
0000494E 4A78 FFF0                  		tst.w	(f_demo).w
00004952 6B00                               	bmi.s	Level_SkipTtlCard
00004954 7000                               	moveq	#0,d0
00004956 3038 FE10                  		move.w	(v_zone).w,d0
0000495A E418                       		ror.b	#2,d0
0000495C EC48                       		lsr.w   #6,d0
0000495E 43F9 0000 47EE                     	lea	(MusicList).l,a1 ; load    music playlist
00004964 1031 0000                          	move.b	(a1,d0.w),d0
00004968 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
0000496C 6100 C8DC                          	bsr.w	PlaySound    ; play music
00004970 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004976                            
00004976                            
00004976                            Level_TtlCardLoop:
00004976 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
0000497C 6100 F082                  		bsr.w	WaitForVBla
00004980 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004986 4EB9 0000 0000             		jsr	(BuildSprites).l
0000498C 6100 CDC8                  		bsr.w	RunPLC
00004990 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004994 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004998 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
0000499A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
0000499E 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049A0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049A6                            
000049A6                            	Level_SkipTtlCard:
000049A6 4EB9 0000 0000             		jsr		LoadPlayerPal
000049AC 6100 DA7E                  		bsr.w	PalLoad1	; load Sonic's palette
000049B0 6100 0000                  		bsr.w	LevelSizeLoad
000049B4 6100 0000                  		bsr.w	DeformLayers
000049B8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049BE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049C2 6100 0000                  		bsr.w	LoadTilesFromStart
000049C6 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049CC 6100 0000                  		bsr.w	ColIndexLoad
000049D0 6100 0000                  		bsr.w	LZWaterFeatures
000049D4 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000049DA 4A78 FFF0                  		tst.w	(f_demo).w
000049DE 6B00                       		bmi.s	Level_ChkDebug
000049E0 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000049E6                            
000049E6                            Level_ChkDebug:
000049E6 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000049EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000049EC 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
000049F2 6700                       		beq.s	Level_ChkWater	; if not, branch
000049F4 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000049FA                            
000049FA                            Level_ChkWater:
000049FA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A00 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A06 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A0C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A0E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A14 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A1A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A20 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A26                            
00004A26                            Level_LoadObj:
00004A26 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A2C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A32 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A38 7000                       		moveq	#0,d0
00004A3A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A3E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A40 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A44 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A48 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A4C                            
00004A4C                            	Level_SkipClr:
00004A4C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A50 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A54 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A58 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A5C 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A60 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A64 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A68 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004A6C 31C0 FE02                  		move.w	d0,(f_restart).w
00004A70 31C0 FE04                  		move.w	d0,(v_framecount).w
00004A74 6100 0000                  		bsr.w	OscillateNumInit
00004A78 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004A7E 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004A84 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004A8A 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004A90 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004A96 7000                       		moveq	#0,d0
00004A98 1038 FE10                  		move.b	(v_zone).w,d0
00004A9C E548                       		lsl.w	#2,d0
00004A9E 2271 0000                  		movea.l	(a1,d0.w),a1
00004AA2 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004AA6 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004AA8 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004AAE 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AB2 5340                       		subq.w	#1,d0
00004AB4 E548                       		lsl.w	#2,d0
00004AB6 2271 0000                  		movea.l	(a1,d0.w),a1
00004ABA                            
00004ABA                            Level_Demo:
00004ABA 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AC0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AC4 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004ACA 4A78 FFF0                  		tst.w	(f_demo).w
00004ACE 6A00                       		bpl.s	Level_ChkWaterPal
00004AD0 31FC 021C F614             		move.w	#540,(v_demolength).w
00004AD6 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004ADC 6600                       		bne.s	Level_ChkWaterPal
00004ADE 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004AE4                            
00004AE4                            Level_ChkWaterPal:
00004AE4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004AEA 6600                       		bne.s	Level_Delay	; if not, branch
00004AEC 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004AEE 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004AF4 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004AF6 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004AF8                            
00004AF8                            	Level_WtrNotSbz:
00004AF8 6100 D9EA                  		bsr.w	PalLoad4_Water
00004AFC                            
00004AFC                            Level_Delay:
00004AFC 323C 0003                  		move.w	#3,d1
00004B00                            
00004B00                            	Level_DelayLoop:
00004B00 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B06 6100 EEF8                  		bsr.w	WaitForVBla
00004B0A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B0E                            
00004B0E 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B14 6100 D5CC                  		bsr.w	PalFadeIn_Alt
00004B18 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B1C 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B1E 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B22 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B26 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B2A 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B2E 6000                       		bra.s	Level_StartGame
00004B30                            ; ===========================================================================
00004B30                            
00004B30                            Level_ClrCardArt:
00004B30 7000                       		moveq	#plcid_Explode,d0
00004B32 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion gfx
00004B38 7000                       		moveq	#0,d0
00004B3A 1038 FE10                  		move.b	(v_zone).w,d0
00004B3E 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B42 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B48                            
00004B48                            Level_StartGame:
00004B48 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B4E                            
00004B4E                            ; ---------------------------------------------------------------------------
00004B4E                            ; Main level loop (when	all title card and loading sequences are finished)
00004B4E                            ; ---------------------------------------------------------------------------
00004B4E                            
00004B4E                            Level_MainLoop:
00004B4E 6100 C70C                  		bsr.w	PauseGame
00004B52 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B58 6100 EEA6                  		bsr.w	WaitForVBla
00004B5C 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B60 6100 0000                  		bsr.w	MoveSonicInDemo
00004B64 6100 0000                  		bsr.w	LZWaterFeatures
00004B68 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B6E 4A78 FE02                  			tst.w   (f_restart).w
00004B72 6600 FC96                  			bne     GM_Level
00004B76 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004B7A 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004B7C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004B82 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004B84                            
00004B84                            	Level_DoScroll:
00004B84 6100 0000                  		bsr.w	DeformLayers
00004B88                            
00004B88                            	Level_SkipScroll:
00004B88 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B8E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004B94 6100 D138                  		bsr.w	PaletteCycle
00004B98 6100 CBBC                  		bsr.w	RunPLC
00004B9C 6100 0000                  		bsr.w	OscillateNumDo
00004BA0 6100 0000                  		bsr.w	SynchroAnimate
00004BA4 6100 0000                  		bsr.w	SignpostArtLoad
00004BA8                            
00004BA8 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BAE 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BB0 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BB6 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BBA 4E75                       		rts	
00004BBC                            ; ===========================================================================
00004BBC                            
00004BBC                            Level_ChkDemo:
00004BBC 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BC0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BC2 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BC6 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BC8 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BCE 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004BD2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BD8 4E75                       		rts	
00004BDA                            ; ===========================================================================
00004BDA                            
00004BDA                            Level_EndDemo:
00004BDA 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BE0 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004BE2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BE8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004BEC 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004BEE 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004BF4                            
00004BF4                            Level_FadeDemo:
00004BF4 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004BFA 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C00 4278 F794                  		clr.w	(v_palchgspeed).w
00004C04                            
00004C04                            	Level_FDLoop:
00004C04 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C0A 6100 EDF4                  		bsr.w	WaitForVBla
00004C0E 6100 0000                  		bsr.w	MoveSonicInDemo
00004C12 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C18 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C1E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C24 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C28 6A00                       		bpl.s	loc_3BC8
00004C2A 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C30 6100 D570                  		bsr.w	FadeOut_ToBlack
00004C34                            
00004C34                            loc_3BC8:
00004C34 4A78 F614                  		tst.w	(v_demolength).w
00004C38 66CA                       		bne.s	Level_FDLoop
00004C3A 4E75                       		rts	
00004C3C                            ; ===========================================================================
00004C3C                            
00004C3C                            		include	"_inc\LZWaterFeatures.asm"
00004C3C                            ; ---------------------------------------------------------------------------
00004C3C                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C3C                            ; ---------------------------------------------------------------------------
00004C3C                            
00004C3C                            LZWaterFeatures:
00004C3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C42 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C44 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C48 6600                       			bne.s	@setheight
00004C4A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C50 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C52                            
00004C52 6100 0000                  		bsr.w	LZWindTunnels
00004C56 6100 0000                  		bsr.w	LZWaterSlides
00004C5A 6100 0000                  		bsr.w	LZDynamicWater
00004C5E                            
00004C5E                            @setheight:
00004C5E 4238 F64E                  		clr.b	(f_wtr_state).w
00004C62 7000                       		moveq	#0,d0
00004C64 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C68 E248                       		lsr.w	#1,d0
00004C6A D078 F648                  		add.w	(v_waterpos2).w,d0
00004C6E 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004C72 3038 F646                  		move.w	(v_waterpos1).w,d0
00004C76 9078 F704                  		sub.w	(v_screenposy).w,d0
00004C7A 6400                       		bcc.s	@isbelow
00004C7C 4A40                       		tst.w	d0
00004C7E 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004C80                            
00004C80 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004C86 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004C8C                            
00004C8C                            	@isbelow:
00004C8C 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004C90 6500                       		bcs.s	@isvisible	; if yes, branch
00004C92 303C 00DF                  		move.w	#223,d0
00004C96                            
00004C96                            	@isvisible:
00004C96 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004C9A                            
00004C9A                            @notlabyrinth:
00004C9A 4E75                       		rts	
00004C9C                            ; ===========================================================================
00004C9C                            ; ---------------------------------------------------------------------------
00004C9C                            ; Initial water heights
00004C9C                            ; ---------------------------------------------------------------------------
00004C9C 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004C9E 0328                       		dc.w $328	; Labyrinth 2
00004CA0 0900                       		dc.w $900	; Labyrinth 3
00004CA2 0228                       		dc.w $228	; Scrap Brain 3
00004CA4                            		even
00004CA4                            ; ===========================================================================
00004CA4                            
00004CA4                            ; ---------------------------------------------------------------------------
00004CA4                            ; Labyrinth dynamic water routines
00004CA4                            ; ---------------------------------------------------------------------------
00004CA4                            
00004CA4                            LZDynamicWater:
00004CA4 7000                       		moveq	#0,d0
00004CA6 1038 FE11                  		move.b	(v_act).w,d0
00004CAA D040                       		add.w	d0,d0
00004CAC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CB0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CB4 7200                       		moveq	#0,d1
00004CB6 1238 F64C                  		move.b	(f_water).w,d1
00004CBA 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CBE 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CC2 6700                       		beq.s	@exit		; if water level is correct, branch
00004CC4 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CC6 4441                       		neg.w	d1		; set water to move up instead
00004CC8                            
00004CC8                            	@movewater:
00004CC8 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004CCC                            
00004CCC                            	@exit:
00004CCC 4E75                       		rts	
00004CCE                            ; ===========================================================================
00004CCE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004CD0 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004CD2 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004CD4 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004CD6                            ; ===========================================================================
00004CD6                            
00004CD6                            DynWater_LZ1:
00004CD6 4E75                       		rts	
00004CD8                            ; ===========================================================================
00004CD8                            
00004CD8                            DynWater_LZ2:
00004CD8 3038 F700                  		move.w	(v_screenposx).w,d0
00004CDC 323C 0328                  		move.w	#$328,d1
00004CE0 0C40 0500                  		cmpi.w	#$500,d0
00004CE4 6500                       		bcs.s	@setwater
00004CE6 323C 03C8                  		move.w	#$3C8,d1
00004CEA 0C40 0B00                  		cmpi.w	#$B00,d0
00004CEE 6500                       		bcs.s	@setwater
00004CF0 323C 0428                  		move.w	#$428,d1
00004CF4                            
00004CF4                            	@setwater:
00004CF4 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004CF8 4E75                       		rts	
00004CFA                            ; ===========================================================================
00004CFA                            
00004CFA                            DynWater_LZ3:
00004CFA 3038 F700                  		move.w	(v_screenposx).w,d0
00004CFE 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D02 6600                       		bne.s	@routine2
00004D04                            
00004D04 323C 0900                  		move.w	#$900,d1
00004D08 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D0C 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D0E 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D14 6500                       		bcs.s	@setwaterlz3
00004D16 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D1C 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D1E                            
00004D1E 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D22 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D28 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D36                            
00004D36                            	@setwaterlz3:
00004D36 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D3A 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D3E 4E75                       		rts	
00004D40                            ; ===========================================================================
00004D40                            
00004D40                            @routine2:
00004D40 5302                       		subq.b	#1,d2
00004D42 6600                       		bne.s	@routine3
00004D44 323C 04C8                  		move.w	#$4C8,d1
00004D48 0C40 0770                  		cmpi.w	#$770,d0
00004D4C 6500                       		bcs.s	@setwater2
00004D4E 323C 0308                  		move.w	#$308,d1
00004D52 0C40 1400                  		cmpi.w	#$1400,d0
00004D56 6500                       		bcs.s	@setwater2
00004D58 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D5E 6700                       		beq.s	@sonicislow
00004D60 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D66 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D68 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004D6E 6400                       		bcc.s	@setwater2
00004D70                            
00004D70                            @sonicislow:
00004D70 323C 0508                  		move.w	#$508,d1
00004D74 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004D78 0C40 1770                  		cmpi.w	#$1770,d0
00004D7C 6500                       		bcs.s	@setwater2
00004D7E 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004D84                            
00004D84                            	@setwater2:
00004D84 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D88 4E75                       		rts	
00004D8A                            ; ===========================================================================
00004D8A                            
00004D8A                            @routine3:
00004D8A 5302                       		subq.b	#1,d2
00004D8C 6600                       		bne.s	@routine4
00004D8E 323C 0508                  		move.w	#$508,d1
00004D92 0C40 1860                  		cmpi.w	#$1860,d0
00004D96 6500                       		bcs.s	@setwater3
00004D98 323C 0188                  		move.w	#$188,d1
00004D9C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DA0 6400                       		bcc.s	@loc_3DC6
00004DA2 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DA6 6600                       		bne.s	@setwater3
00004DA8                            
00004DA8                            	@loc_3DC6:
00004DA8 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DAE                            
00004DAE                            	@setwater3:
00004DAE 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DB2 4E75                       		rts	
00004DB4                            ; ===========================================================================
00004DB4                            
00004DB4                            @routine4:
00004DB4 5302                       		subq.b	#1,d2
00004DB6 6600                       		bne.s	@routine5
00004DB8 323C 0188                  		move.w	#$188,d1
00004DBC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DC0 6500                       		bcs.s	@setwater4
00004DC2 323C 0900                  		move.w	#$900,d1
00004DC6 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DCA 6500                       		bcs.s	@setwater4
00004DCC 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004DD2 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004DD8 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004DDE 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004DE4 4E75                       		rts	
00004DE6                            ; ===========================================================================
00004DE6                            
00004DE6                            @setwater4:
00004DE6 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DEA 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DEE 4E75                       		rts	
00004DF0                            ; ===========================================================================
00004DF0                            
00004DF0                            @routine5:
00004DF0 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004DF4 6500                       		bcs.s	@dontset	; if not, branch
00004DF6 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004DFC                            
00004DFC                            	@dontset:
00004DFC 4E75                       		rts	
00004DFE                            ; ===========================================================================
00004DFE                            
00004DFE                            DynWater_SBZ3:
00004DFE 323C 0228                  		move.w	#$228,d1
00004E02 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E08 6500                       		bcs.s	@setwater
00004E0A 323C 04C8                  		move.w	#$4C8,d1
00004E0E                            
00004E0E                            	@setwater:
00004E0E 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E12 4E75                       		rts
00004E14                            
00004E14                            ; ---------------------------------------------------------------------------
00004E14                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E14                            ; ---------------------------------------------------------------------------
00004E14                            
00004E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E14                            
00004E14                            
00004E14                            LZWindTunnels:
00004E14 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E18 6600 0000                  		bne.w	@quit	; if yes, branch
00004E1C 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E22 7000                       		moveq	#0,d0
00004E24 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E28 E748                       		lsl.w	#3,d0		; multiply by 8
00004E2A D4C0                       		adda.w	d0,a2		; add to address for data
00004E2C 7200                       		moveq	#0,d1
00004E2E 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E32 6600                       		bne.s	@notact1	; if not, branch
00004E34 7201                       		moveq	#1,d1
00004E36 514A                       		subq.w	#8,a2		; use different data for act 1
00004E38                            
00004E38                            	@notact1:
00004E38 43F8 D000                  		lea	(v_player).w,a1
00004E3C                            
00004E3C                            @chksonic:
00004E3C 3029 0008                  		move.w	obX(a1),d0
00004E40 B052                       		cmp.w	(a2),d0
00004E42 6500 0000                  		bcs.w	@chknext
00004E46 B06A 0004                  		cmp.w	4(a2),d0
00004E4A 6400 0000                  		bcc.w	@chknext
00004E4E 3429 000C                  		move.w	obY(a1),d2
00004E52 B46A 0002                  		cmp.w	2(a2),d2
00004E56 6500                       		bcs.s	@chknext
00004E58 B46A 0006                  		cmp.w	6(a2),d2
00004E5C 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E5E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E62 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E66 6600                       		bne.s	@skipsound	; if not, branch
00004E72                            
00004E72                            	@skipsound:
00004E72 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004E76 6600 0000                  		bne.w	@quit	; if yes, branch
00004E7A 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004E80 6400                       		bcc.s	@clrquit	; if yes, branch
00004E82 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004E88 0440 0080                  		subi.w	#$80,d0
00004E8C B052                       		cmp.w	(a2),d0
00004E8E 6400                       		bcc.s	@movesonic
00004E90 7002                       		moveq	#2,d0
00004E92 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004E98 6600                       		bne.s	@notact2	; if not, branch
00004E9A 4440                       		neg.w	d0
00004E9C                            
00004E9C                            	@notact2:
00004E9C D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004EA0                            
00004EA0                            @movesonic:
00004EA0 5869 0008                  		addq.w	#4,obX(a1)
00004EA4 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EAA 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EB0 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EB6 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EBC 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EC2 6700                       		beq.s	@down		; if not, branch
00004EC4 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004EC8                            
00004EC8                            	@down:
00004EC8 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004ECE 6700                       		beq.s	@end		; if not, branch
00004ED0 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004ED4                            
00004ED4                            	@end:
00004ED4 4E75                       		rts	
00004ED6                            ; ===========================================================================
00004ED6                            
00004ED6                            @chknext:
00004ED6 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004ED8 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004EDC 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004EE0 6700                       		beq.s	@quit		; if yes, branch
00004EE2 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004EE8                            
00004EE8                            @clrquit:
00004EE8 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004EEC                            
00004EEC                            @quit:
00004EEC 4E75                       		rts	
00004EEE                            ; End of function LZWindTunnels
00004EEE                            
00004EEE                            ; ===========================================================================
00004EEE                            
00004EEE                            		;    left, top,  right, bottom boundaries
00004EEE 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004EF6 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004EFE 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F06 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F0E 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F16                            		even
00004F16                            
00004F16                            ; ---------------------------------------------------------------------------
00004F16                            ; Labyrinth Zone water slide subroutine
00004F16                            ; ---------------------------------------------------------------------------
00004F16                            
00004F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F16                            
00004F16                            
00004F16                            LZWaterSlides:
00004F16 43F8 D000                  		lea	(v_player).w,a1
00004F1A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F20 6600                       		bne.s	loc_3F6A	; if not, branch
00004F22 3029 000C                  		move.w	obY(a1),d0
00004F26 E248                       		lsr.w	#1,d0
00004F28 0240 0380                  		andi.w	#$380,d0
00004F2C 1229 0008                  		move.b	obX(a1),d1
00004F30 0241 007F                  		andi.w	#$7F,d1
00004F34 D041                       		add.w	d1,d0
00004F36 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F3A 1032 0000                  		move.b	(a2,d0.w),d0
00004F3E 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F42 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F44                            
00004F44                            loc_3F62:
00004F44 B022                       		cmp.b	-(a2),d0
00004F46 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F4A 6700                       		beq.s	LZSlide_Move
00004F4C                            
00004F4C                            loc_3F6A:
00004F4C 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F50 6700                       		beq.s	locret_3F7A
00004F52 337C 0005 003E             		move.w	#5,$3E(a1)
00004F58 4238 F7CA                  		clr.b	(f_jumponly).w
00004F5C                            
00004F5C                            locret_3F7A:
00004F5C 4E75                       		rts	
00004F5E                            ; ===========================================================================
00004F5E                            
00004F5E                            LZSlide_Move:
00004F5E 0C41 0003                  		cmpi.w	#3,d1
00004F62 6400                       		bcc.s	loc_3F84
00004F64 4E71                       		nop	
00004F66                            
00004F66                            loc_3F84:
00004F66 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004F6C 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004F70 1340 0020                  		move.b	d0,obInertia(a1)
00004F74 6A00                       		bpl.s	loc_3F9A
00004F76 08E9 0000 0022             		bset	#0,obStatus(a1)
00004F7C                            
00004F7C                            loc_3F9A:
00004F7C 4229 0021                  		clr.b	obInertia+1(a1)
00004F80 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004F86 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004F8C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F90 0200 001F                  		andi.b	#$1F,d0
00004F94 6600                       		bne.s	locret_3FBE
00004FA0                            
00004FA0                            locret_3FBE:
00004FA0 4E75                       		rts	
00004FA2                            ; End of function LZWaterSlides
00004FA2                            
00004FA2                            ; ===========================================================================
00004FA2                            ; byte_3FC0:
00004FA2                            Slide_Speeds:
00004FA2 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FAA 00                         		even
00004FAA                            
00004FAA                            Slide_Chunks:
00004FAA 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FAB                            ; byte_3FCF
00004FAB                            Slide_Chunks_End
00004FAC 00                         		even
00004FAC 00                         		even
00004FAC                            		include	"_inc\MoveSonicInDemo.asm"
00004FAC                            ; ---------------------------------------------------------------------------
00004FAC                            ; Subroutine to	move Sonic in demo mode
00004FAC                            ; ---------------------------------------------------------------------------
00004FAC                            
00004FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FAC                            
00004FAC                            
00004FAC                            MoveSonicInDemo:
00004FAC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FB0 6600                       		bne.s	MDemo_On	; if yes, branch
00004FB2 4E75                       		rts	
00004FB4                            ; ===========================================================================
00004FB4                            
00004FB4                            ; This is an unused subroutine for recording a demo
00004FB4                            
00004FB4                            DemoRecorder:
00004FB4 43F9 0008 0000             		lea	($80000).l,a1
00004FBA 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FBE D2C0                       		adda.w	d0,a1
00004FC0 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FC4 B011                       		cmp.b	(a1),d0
00004FC6 6600                       		bne.s	@next
00004FC8 5229 0001                  		addq.b	#1,1(a1)
00004FCC 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004FD2 6700                       		beq.s	@next
00004FD4 4E75                       		rts	
00004FD6                            
00004FD6                            	@next:
00004FD6 1340 0002                  		move.b	d0,2(a1)
00004FDA 137C 0000 0003             		move.b	#0,3(a1)
00004FE0 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004FE4 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00004FEA 4E75                       		rts	
00004FEC                            ; ===========================================================================
00004FEC                            
00004FEC                            MDemo_On:
00004FEC 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004FF0 6A00                       		bpl.s	@dontquit	; if not, branch
00004FF2 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004FF6 6B00                       		bmi.s	@dontquit	; if yes, branch
00004FF8 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004FFE                            
00004FFE                            	@dontquit:
00004FFE 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005004 7000                       		moveq	#0,d0
00005006 1038 FE10                  		move.b	(v_zone).w,d0
0000500A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005010 6600                       		bne.s	@notspecial	; if not, branch
00005012 7006                       		moveq	#6,d0		; use demo #6
00005014                            
00005014                            	@notspecial:
00005014 E548                       		lsl.w	#2,d0
00005016 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000501A 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000501E 6A00                       		bpl.s	@notcredits	; if not, branch
00005020 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005026 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000502A 5340                       		subq.w	#1,d0
0000502C E548                       		lsl.w	#2,d0
0000502E 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005032                            
00005032                            	@notcredits:
00005032 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005036 D2C0                       		adda.w	d0,a1
00005038 1011                       		move.b	(a1),d0
0000503A 41F8 F604                  		lea	(v_jpadhold1).w,a0
0000503E 1200                       		move.b	d0,d1
00005040 7400                       			moveq	#0,d2
00005042 B500                       		eor.b	d2,d0
00005044 10C1                       		move.b	d1,(a0)+
00005046 C001                       		and.b	d1,d0
00005048 10C0                       		move.b	d0,(a0)+
0000504A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000504E 6400                       		bcc.s	@end
00005050 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005056 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000505A                            
0000505A                            	@end:
0000505A 4E75                       		rts	
0000505C                            ; End of function MoveSonicInDemo
0000505C                            
0000505C                            ; ===========================================================================
0000505C                            ; ---------------------------------------------------------------------------
0000505C                            ; Demo sequence	pointers
0000505C                            ; ---------------------------------------------------------------------------
0000505C 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005060 0000 0000                  		dc.l Demo_GHZ
00005064 0000 0000                  		dc.l Demo_MZ
00005068 0000 0000                  		dc.l Demo_MZ
0000506C 0000 0000                  		dc.l Demo_SYZ
00005070 0000 0000                  		dc.l Demo_SYZ
00005074 0000 0000                  		dc.l Demo_SS
00005078 0000 0000                  		dc.l Demo_SS
0000507C                            
0000507C 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005080 0000 0000                  		dc.l Demo_EndMZ
00005084 0000 0000                  		dc.l Demo_EndSYZ
00005088 0000 0000                  		dc.l Demo_EndLZ
0000508C 0000 0000                  		dc.l Demo_EndSLZ
00005090 0000 0000                  		dc.l Demo_EndSBZ1
00005094 0000 0000                  		dc.l Demo_EndSBZ2
00005098 0000 0000                  		dc.l Demo_EndGHZ2
0000509C                            
0000509C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050AC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050BC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000050CC                            		even
000050CC                            		even
000050CC                            
000050CC                            ; ---------------------------------------------------------------------------
000050CC                            ; Collision index pointer loading subroutine
000050CC                            ; ---------------------------------------------------------------------------
000050CC                            
000050CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050CC                            
000050CC                            
000050CC                            ColIndexLoad:
000050CC 7000                       		moveq	#0,d0
000050CE 1038 FE10                  		move.b	(v_zone).w,d0
000050D2 E548                       		lsl.w	#2,d0
000050D4 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
000050DA 4E75                       		rts	
000050DC                            ; End of function ColIndexLoad
000050DC                            
000050DC                            ; ===========================================================================
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            ; Collision index pointers
000050DC                            ; ---------------------------------------------------------------------------
000050DC 0000 0000                  ColPointers:	dc.l Col_GHZ
000050E0 0000 0000                  		dc.l Col_LZ
000050E4 0000 0000                  		dc.l Col_MZ
000050E8 0000 0000                  		dc.l Col_SLZ
000050EC 0000 0000                  		dc.l Col_SYZ
000050F0 0000 0000                  		dc.l Col_SBZ
000050F4                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
000050F4                            
000050F4                            		include	"_inc\Oscillatory Routines.asm"
000050F4                            ; ---------------------------------------------------------------------------
000050F4                            ; Oscillating number subroutines
000050F4                            ; ---------------------------------------------------------------------------
000050F4                            
000050F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050F4                            
000050F4                            ; Initialise the values
000050F4                            
000050F4                            OscillateNumInit:
000050F4 43F8 FE5E                  		lea	(v_oscillate).w,a1
000050F8 45F9 0000 0000             		lea	(@baselines).l,a2
000050FE 7220                       		moveq	#$20,d1
00005100                            
00005100                            	@loop:
00005100 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005102 51C9 FFFC                  		dbf	d1,@loop
00005106 4E75                       		rts	
00005108                            
00005108                            
00005108                            ; ===========================================================================
00005108 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000510A 0080 0000                  		dc.w $80, 0
0000510E 0080 0000                  		dc.w $80, 0
00005112 0080 0000                  		dc.w $80, 0
00005116 0080 0000                  		dc.w $80, 0
0000511A 0080 0000                  		dc.w $80, 0
0000511E 0080 0000                  		dc.w $80, 0
00005122 0080 0000                  		dc.w $80, 0
00005126 0080 0000                  		dc.w $80, 0
0000512A 0080 0000                  		dc.w $80, 0
0000512E 50F0 011E                  		dc.w $50F0, $11E
00005132 2080 00B4                  		dc.w $2080, $B4
00005136 3080 010E                  		dc.w $3080, $10E
0000513A 5080 01C2                  		dc.w $5080, $1C2
0000513E 7080 0276                  		dc.w $7080, $276
00005142 0080 0000                  		dc.w $80, 0
00005146 0080 0000                  		dc.w $80, 0
0000514A                            		even
0000514A                            
0000514A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000514A                            
0000514A                            ; Oscillate values
0000514A                            
0000514A                            OscillateNumDo:
0000514A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005150 6400                       		bcc.s	@end		; if yes, branch
00005152 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005156 45F9 0000 0000             		lea	(@settings).l,a2
0000515C 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
0000515E 720F                       		moveq	#$F,d1
00005160                            
00005160                            @loop:
00005160 341A                       		move.w	(a2)+,d2	; get frequency
00005162 381A                       		move.w	(a2)+,d4	; get amplitude
00005164 0303                       		btst	d1,d3		; check oscillation direction
00005166 6600                       		bne.s	@down		; branch if 1
00005168                            
00005168                            	@up:
00005168 3029 0002                  		move.w	2(a1),d0	; get current rate
0000516C D042                       		add.w	d2,d0		; add frequency
0000516E 3340 0002                  		move.w	d0,2(a1)
00005172 D151                       		add.w	d0,0(a1)	; add rate to value
00005174 B811                       		cmp.b	0(a1),d4
00005176 6200                       		bhi.s	@next
00005178 03C3                       		bset	d1,d3
0000517A 6000                       		bra.s	@next
0000517C                            
0000517C                            	@down:
0000517C 3029 0002                  		move.w	2(a1),d0
00005180 9042                       		sub.w	d2,d0
00005182 3340 0002                  		move.w	d0,2(a1)
00005186 D151                       		add.w	d0,0(a1)
00005188 B811                       		cmp.b	0(a1),d4
0000518A 6300                       		bls.s	@next
0000518C 0383                       		bclr	d1,d3
0000518E                            
0000518E                            	@next:
0000518E 5849                       		addq.w	#4,a1
00005190 51C9 FFCE                  		dbf	d1,@loop
00005194 31C3 FE5E                  		move.w	d3,(v_oscillate).w
00005198                            
00005198                            @end:
00005198 4E75                       		rts	
0000519A                            ; End of function OscillateNumDo
0000519A                            
0000519A                            ; ===========================================================================
0000519A 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
0000519E 0002 0018                  		dc.w 2,	$18
000051A2 0002 0020                  		dc.w 2,	$20
000051A6 0002 0030                  		dc.w 2,	$30
000051AA 0004 0020                  		dc.w 4,	$20
000051AE 0008 0008                  		dc.w 8,	8
000051B2 0008 0040                  		dc.w 8,	$40
000051B6 0004 0040                  		dc.w 4,	$40
000051BA 0002 0050                  		dc.w 2,	$50
000051BE 0002 0050                  		dc.w 2,	$50
000051C2 0002 0020                  		dc.w 2,	$20
000051C6 0003 0030                  		dc.w 3,	$30
000051CA 0005 0050                  		dc.w 5,	$50
000051CE 0007 0070                  		dc.w 7,	$70
000051D2 0002 0010                  		dc.w 2,	$10
000051D6 0002 0010                  		dc.w 2,	$10
000051DA                            		even
000051DA                            		even
000051DA                            
000051DA                            ; ---------------------------------------------------------------------------
000051DA                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
000051DA                            ; ---------------------------------------------------------------------------
000051DA                            
000051DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051DA                            
000051DA                            
000051DA                            SynchroAnimate:
000051DA                            
000051DA                            ; Used for GHZ spiked log
000051DA                            Sync1:
000051DA 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
000051DE 6A00                       		bpl.s	Sync2		; if not, branch
000051E0 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
000051E6 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
000051EA 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
000051F0                            
000051F0                            ; Used for rings and giant rings
000051F0                            Sync2:
000051F0 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
000051F4 6A00                       		bpl.s	Sync3
000051F6 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
000051FC 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005200 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005206                            
00005206                            ; Used for nothing
00005206                            Sync3:
00005206 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000520A 6A00                       		bpl.s	Sync4
0000520C 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005212 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005216 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000521C 6500                       		blo.s	Sync4
0000521E 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005224                            
00005224                            ; Used for bouncing rings
00005224                            Sync4:
00005224 4A38 FEC6                  		tst.b	(v_ani3_time).w
00005228 6700                       		beq.s	SyncEnd
0000522A 7000                       		moveq	#0,d0
0000522C 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005230 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005234 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00005238 EF58                       		rol.w	#7,d0
0000523A 0240 0003                  		andi.w	#3,d0
0000523E 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005242 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005246                            
00005246                            SyncEnd:
00005246 4E75                       		rts	
00005248                            ; End of function SynchroAnimate
00005248                            
00005248                            ; ---------------------------------------------------------------------------
00005248                            ; End-of-act signpost pattern loading subroutine
00005248                            ; ---------------------------------------------------------------------------
00005248                            
00005248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005248                            
00005248                            
00005248                            SignpostArtLoad:
00005248 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000524C 6600 0000                  		bne.w	@exit		; if yes, branch
00005250 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005256 6700                       		beq.s	@exit		; if yes, branch
00005258                            
00005258 3038 F700                  		move.w	(v_screenposx).w,d0
0000525C 3238 F72A                  		move.w	(v_limitright2).w,d1
00005260 0441 0100                  		subi.w	#$100,d1
00005264 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005266 6D00                       		blt.s	@exit		; if not, branch
00005268 4A38 FE1E                  		tst.b	(f_timecount).w
0000526C 6700                       		beq.s	@exit
0000526E B278 F728                  		cmp.w	(v_limitleft2).w,d1
00005272 6700                       		beq.s	@exit
00005274 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
00005278 7000                       		moveq	#plcid_Signpost,d0
0000527A 6000 C4A0                  		bra.w	NewPLC		; load signpost	patterns
0000527E                            
0000527E                            	@exit:
0000527E 4E75                       		rts	
00005280                            ; End of function SignpostArtLoad
00005280                            
00005280                            ; ===========================================================================
00005280                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005300                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005430                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054B0                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055B0                            ; ===========================================================================
000055B0                            
000055B0                            ; ---------------------------------------------------------------------------
000055B0                            ; Special Stage
000055B0                            ; ---------------------------------------------------------------------------
000055B0                            
000055B0                            GM_Special:
000055B8 6100 CCF2                  		bsr.w	PaletteWhiteOut
000055BC 46FC 2700                  		disable_ints
000055C0 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055C6 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055CA 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000055CE 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
000055D4 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
000055D8 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000055DC 0200 00BF                  		andi.b	#$BF,d0
000055E0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000055E6 6100 BB98                  		bsr.w	ClearScreen
000055EA 46FC 2300                  		enable_ints
000055EE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005610                            
00005610                            	SS_WaitForDMA:
00005610 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005612 0801 0001                  		btst	#1,d1		; is DMA running?
00005616 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
00005618 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000561C 6100 0000                  		bsr.w	SS_BGLoad
00005620 7000                       		moveq	#plcid_SpecialStage,d0
00005622 6100 C232                  		bsr.w	QuickPLC	; load special stage patterns
00005626                            
00005626 43F8 D000                  		lea	(v_objspace).w,a1
0000562A 7000                       		moveq	#0,d0
0000562C 323C 07FF                  		move.w	#$7FF,d1
00005630                            	SS_ClrObjRam:
00005630 22C0                       		move.l	d0,(a1)+
00005632 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005636                            
00005636 43F8 F700                  		lea	(v_screenposx).w,a1
0000563A 7000                       		moveq	#0,d0
0000563C 323C 003F                  		move.w	#$3F,d1
00005640                            	SS_ClrRam1:
00005640 22C0                       		move.l	d0,(a1)+
00005642 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005646                            
00005646 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000564A 7000                       		moveq	#0,d0
0000564C 323C 0027                  		move.w	#$27,d1
00005650                            	SS_ClrRam2:
00005650 22C0                       		move.l	d0,(a1)+
00005652 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005656                            
00005656 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000565A 7000                       		moveq	#0,d0
0000565C 323C 007F                  		move.w	#$7F,d1
00005660                            	SS_ClrNemRam:
00005660 22C0                       		move.l	d0,(a1)+
00005662 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005666                            
00005666 4238 F64E                  		clr.b	(f_wtr_state).w
0000566A 4278 FE02                  		clr.w	(f_restart).w
0000566E 700A                       		moveq	#palid_Special,d0
00005670 6100 CDBA                  		bsr.w	PalLoad1	; load special stage palette
00005674 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
0000567A 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005682 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
0000568A 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005690 6100 0000                  		bsr.w	PalCycle_SS
00005694 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
00005698 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056A6 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056AC 43F9 0000 505C             		lea	(DemoDataPtr).l,a1
000056B2 7006                       		moveq	#6,d0
000056B4 E548                       		lsl.w	#2,d0
000056B6 2271 0000                  		movea.l	(a1,d0.w),a1
000056BA 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056C0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056C4 4278 FE20                  		clr.w	(v_rings).w
000056C8 4238 FE1B                  		clr.b	(v_lifecount).w
000056CC 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
000056D2 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000056D8 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000056DC 6700                       		beq.s	SS_NoDebug	; if not, branch
000056DE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
000056E4 6700                       		beq.s	SS_NoDebug	; if not, branch
000056E6 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000056EC                            
000056EC                            	SS_NoDebug:
000056EC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000056F0 0000 0040                  		ori.b	#$40,d0
000056F4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000056FA 6100 CB04                  		bsr.w	PaletteWhiteIn
000056FE                            
000056FE                            ; ---------------------------------------------------------------------------
000056FE                            ; Main Special Stage loop
000056FE                            ; ---------------------------------------------------------------------------
000056FE                            
000056FE                            SS_MainLoop:
000056FE 6100 BB5C                  		bsr.w	PauseGame
00005702 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
00005708 6100 E2F6                  		bsr.w	WaitForVBla
0000570C 6100 F89E                  		bsr.w	MoveSonicInDemo
00005710 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005716 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000571C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005722 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005728 6100 0000                  		bsr.w	SS_BGAnimate
0000572C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005730 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005732 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005736 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000573A                            
0000573A                            	SS_ChkEnd:
0000573A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005740 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005744                            
00005744 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005748 6600 0000                  		bne.w	SS_ToLevel
0000574C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005752 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005758 6500                       		blo.s	SS_Finish	; if not, branch
0000575A 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000575E                            
0000575E                            SS_Finish:
0000575E 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005764 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000576A 4278 F794                  		clr.w	(v_palchgspeed).w
0000576E                            
0000576E                            	SS_FinLoop:
0000576E 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005774 6100 E28A                  		bsr.w	WaitForVBla
00005778 6100 F832                  		bsr.w	MoveSonicInDemo
0000577C 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005782 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005788 4EB9 0000 0000             		jsr	(BuildSprites).l
0000578E 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005794 6100 0000                  		bsr.w	SS_BGAnimate
00005798 5378 F794                  		subq.w	#1,(v_palchgspeed).w
0000579C 6A00                       		bpl.s	loc_47D4
0000579E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057A4 6100 CB26                  		bsr.w	WhiteOut_ToWhite
000057A8                            
000057A8                            loc_47D4:
000057A8 4A78 F614                  		tst.w	(v_demolength).w
000057AC 66C0                       		bne.s	SS_FinLoop
000057AE                            
000057AE 46FC 2700                  		disable_ints
000057B2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057B8 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057BC 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057C0 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057C4 6100 B9BA                  		bsr.w	ClearScreen
000057D2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000057D8 6100 BB24                  		bsr.w	NemDec
000057DC 4EB9 0000 0000             		jsr	(Hud_Base).l
000057E2 31FC C800 C8FC             		ResetDMAQueue	
000057E8 46FC 2300                  		enable_ints
000057EC 7011                       		moveq	#palid_SSResult,d0
000057EE 6100 CC78                  		bsr.w	PalLoad2	; load results screen palette
000057F2 7000                       		moveq	#plcid_Main,d0
000057F4 6100 BF26                  		bsr.w	NewPLC
000057F8 7000                       		moveq	#plcid_SSResult,d0
000057FA 6100 BEEE                  		bsr.w	AddPLC		; load results screen patterns
000057FE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005804 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000580A 3038 FE20                  		move.w	(v_rings).w,d0
0000580E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005812 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005820                            
00005820 43F8 D000                  		lea	(v_objspace).w,a1
00005824 7000                       		moveq	#0,d0
00005826 323C 07FF                  		move.w	#$7FF,d1
0000582A                            	SS_EndClrObjRam:
0000582A 22C0                       		move.l	d0,(a1)+
0000582C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005830                            
00005830 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005836                            
00005836                            SS_NormalExit:
00005836 6100 BA24                  		bsr.w	PauseGame
0000583A 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005840 6100 E1BE                  		bsr.w	WaitForVBla
00005844 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000584A 4EB9 0000 0000             		jsr	(BuildSprites).l
00005850 6100 BF04                  		bsr.w	RunPLC
00005854 4A78 FE02                  		tst.w	(f_restart).w
00005858 67DC                       		beq.s	SS_NormalExit
0000585A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000585E 66D6                       		bne.s	SS_NormalExit
00005868 6100 CA42                  		bsr.w	PaletteWhiteOut
0000586C 4E75                       		rts	
0000586E                            ; ===========================================================================
0000586E                            
0000586E                            SS_ToSegaScreen:
0000586E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005874 4E75                       		rts
00005876                            
00005876 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
0000587C 67F0                       		beq.s	SS_ToSegaScreen
0000587E 4E75                       		rts
00005880                            
00005880                            ; ---------------------------------------------------------------------------
00005880                            ; Special stage	background loading subroutine
00005880                            ; ---------------------------------------------------------------------------
00005880                            
00005880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005880                            
00005880                            
00005880                            SS_BGLoad:
00005880 43F9 00FF 0000             		lea	($FF0000).l,a1
00005886 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000588C 303C 4051                  		move.w	#$4051,d0
00005890 6100 BFF6                  		bsr.w	EniDec
00005894 263C 5000 0001             		move.l	#$50000001,d3
0000589A 45F9 00FF 0080             		lea	($FF0080).l,a2
000058A0 7E06                       		moveq	#6,d7
000058A2                            
000058A2                            loc_48BE:
000058A2 2003                       		move.l	d3,d0
000058A4 7C03                       		moveq	#3,d6
000058A6 7800                       		moveq	#0,d4
000058A8 0C47 0003                  		cmpi.w	#3,d7
000058AC 6400                       		bhs.s	loc_48CC
000058AE 7801                       		moveq	#1,d4
000058B0                            
000058B0                            loc_48CC:
000058B0 7A07                       		moveq	#7,d5
000058B2                            
000058B2                            loc_48CE:
000058B2 224A                       		movea.l	a2,a1
000058B4 0A04 0001                  		eori.b	#1,d4
000058B8 6600                       		bne.s	loc_48E2
000058BA 0C47 0006                  		cmpi.w	#6,d7
000058BE 6600                       		bne.s	loc_48F2
000058C0 43F9 00FF 0000             		lea	($FF0000).l,a1
000058C6                            
000058C6                            loc_48E2:
000058C6 48E7 F800                  		movem.l	d0-d4,-(sp)
000058CA 7207                       		moveq	#7,d1
000058CC 7407                       		moveq	#7,d2
000058CE 6100 BA04                  		bsr.w	TilemapToVRAM
000058D2 4CDF 001F                  		movem.l	(sp)+,d0-d4
000058D6                            
000058D6                            loc_48F2:
000058D6 0680 0010 0000             		addi.l	#$100000,d0
000058DC 51CD FFD4                  		dbf	d5,loc_48CE
000058E0 0680 0380 0000             		addi.l	#$3800000,d0
000058E6 0A04 0001                  		eori.b	#1,d4
000058EA 51CE FFC4                  		dbf	d6,loc_48CC
000058EE 0683 1000 0000             		addi.l	#$10000000,d3
000058F4 6A00                       		bpl.s	loc_491C
000058F6 4843                       		swap	d3
000058F8 0683 0000 C000             		addi.l	#$C000,d3
000058FE 4843                       		swap	d3
00005900                            
00005900                            loc_491C:
00005900 D4FC 0080                  		adda.w	#$80,a2
00005904 51CF FF9C                  		dbf	d7,loc_48BE
00005908 43F9 00FF 0000             		lea	($FF0000).l,a1
0000590E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005914 303C 4000                  		move.w	#$4000,d0
00005918 6100 BF6E                  		bsr.w	EniDec
0000591C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005922 203C 4000 0003             		move.l	#$40000003,d0
00005928 723F                       		moveq	#$3F,d1
0000592A 741F                       		moveq	#$1F,d2
0000592C 6100 B9A6                  		bsr.w	TilemapToVRAM
00005930 43F9 00FF 0000             		lea	($FF0000).l,a1
00005936 203C 5000 0003             		move.l	#$50000003,d0
0000593C 723F                       		moveq	#$3F,d1
0000593E 743F                       		moveq	#$3F,d2
00005940 6100 B992                  		bsr.w	TilemapToVRAM
00005944 4E75                       		rts	
00005946                            ; End of function SS_BGLoad
00005946                            
00005946                            ; ---------------------------------------------------------------------------
00005946                            ; Palette cycling routine - special stage
00005946                            ; ---------------------------------------------------------------------------
00005946                            
00005946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005946                            
00005946                            
00005946                            PalCycle_SS:
00005946 4A78 F63A                  		tst.w	(f_pause).w
0000594A 6600                       		bne.s	locret_49E6
0000594C 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005950 6A00                       		bpl.s	locret_49E6
00005952 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005958 3038 F79A                  		move.w	(v_palss_num).w,d0
0000595C 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005960 0240 001F                  		andi.w	#$1F,d0
00005964 E548                       		lsl.w	#2,d0
00005966 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000596C D0C0                       		adda.w	d0,a0
0000596E 1018                       		move.b	(a0)+,d0
00005970 6A00                       		bpl.s	loc_4992
00005972 303C 01FF                  		move.w	#$1FF,d0
00005976                            
00005976                            loc_4992:
00005976 31C0 F79C                  		move.w	d0,(v_palss_time).w
0000597A 7000                       		moveq	#0,d0
0000597C 1018                       		move.b	(a0)+,d0
0000597E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005982 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005988 43F1 0000                  		lea	(a1,d0.w),a1
0000598C 303C 8200                  		move.w	#-$7E00,d0
00005990 1019                       		move.b	(a1)+,d0
00005992 3C80                       		move.w	d0,(a6)
00005994 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005998 303C 8400                  		move.w	#-$7C00,d0
0000599C 1018                       		move.b	(a0)+,d0
0000599E 3C80                       		move.w	d0,(a6)
000059A0 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059AA 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059B2 7000                       		moveq	#0,d0
000059B4 1018                       		move.b	(a0)+,d0
000059B6 6B00                       		bmi.s	loc_49E8
000059B8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059BE D2C0                       		adda.w	d0,a1
000059C0 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059C4 24D9                       		move.l	(a1)+,(a2)+
000059C6 24D9                       		move.l	(a1)+,(a2)+
000059C8 24D9                       		move.l	(a1)+,(a2)+
000059CA                            
000059CA                            locret_49E6:
000059CA 4E75                       		rts	
000059CC                            ; ===========================================================================
000059CC                            
000059CC                            loc_49E8:
000059CC 3238 F79E                  		move.w	($FFFFF79E).w,d1
000059D0 0C40 008A                  		cmpi.w	#$8A,d0
000059D4 6500                       		blo.s	loc_49F4
000059D6 5241                       		addq.w	#1,d1
000059D8                            
000059D8                            loc_49F4:
000059D8 C2FC 002A                  		mulu.w	#$2A,d1
000059DC 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000059E2 D2C1                       		adda.w	d1,a1
000059E4 0240 007F                  		andi.w	#$7F,d0
000059E8 0880 0000                  		bclr	#0,d0
000059EC 6700                       		beq.s	loc_4A18
000059EE 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
000059F2 24D1                       		move.l	(a1),(a2)+
000059F4 24E9 0004                  		move.l	4(a1),(a2)+
000059F8 24E9 0008                  		move.l	8(a1),(a2)+
000059FC                            
000059FC                            loc_4A18:
000059FC D2FC 000C                  		adda.w	#$C,a1
00005A00 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A04 0C40 000A                  		cmpi.w	#$A,d0
00005A08 6500                       		blo.s	loc_4A2E
00005A0A 0440 000A                  		subi.w	#$A,d0
00005A0E 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A12                            
00005A12                            loc_4A2E:
00005A12 3200                       		move.w	d0,d1
00005A14 D040                       		add.w	d0,d0
00005A16 D041                       		add.w	d1,d0
00005A18 D2C0                       		adda.w	d0,a1
00005A1A 24D9                       		move.l	(a1)+,(a2)+
00005A1C 34D9                       		move.w	(a1)+,(a2)+
00005A1E 4E75                       		rts	
00005A20                            ; End of function PalCycle_SS
00005A20                            
00005A20                            ; ===========================================================================
00005A20 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A30                            
00005A30 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A40 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A50 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A60 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005A70 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005A80 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005A90 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AA0                            		even
00005AA0 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005AAE                            		even
00005AAE                            
00005AAE                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005AF6                            		even
00005AF6                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BC8                            		even
00005BC8                            
00005BC8                            ; ---------------------------------------------------------------------------
00005BC8                            ; Subroutine to	make the special stage background animated
00005BC8                            ; ---------------------------------------------------------------------------
00005BC8                            
00005BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BC8                            
00005BC8                            
00005BC8                            SS_BGAnimate:
00005BC8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005BCC 6600                       		bne.s	loc_4BF6
00005BCE 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005BD4 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BDA                            
00005BDA                            loc_4BF6:
00005BDA 0C40 0008                  		cmpi.w	#8,d0
00005BDE 6400                       		bhs.s	loc_4C4E
00005BE0 0C40 0006                  		cmpi.w	#6,d0
00005BE4 6600                       		bne.s	loc_4C10
00005BE6 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005BEA 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005BEE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BF4                            
00005BF4                            loc_4C10:
00005BF4 7000                       		moveq	#0,d0
00005BF6 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005BFA 4440                       		neg.w	d0
00005BFC 4840                       		swap	d0
00005BFE 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C04 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C08 7609                       		moveq	#9,d3
00005C0A                            
00005C0A                            loc_4C26:
00005C0A 302B 0002                  		move.w	2(a3),d0
00005C0E 6100 DE22                  		bsr.w	CalcSine
00005C12 7400                       		moveq	#0,d2
00005C14 1419                       		move.b	(a1)+,d2
00005C16 C1C2                       		muls.w	d2,d0
00005C18 E080                       		asr.l	#8,d0
00005C1A 36C0                       		move.w	d0,(a3)+
00005C1C 1419                       		move.b	(a1)+,d2
00005C1E 4882                       		ext.w	d2
00005C20 D55B                       		add.w	d2,(a3)+
00005C22 51CB FFE6                  		dbf	d3,loc_4C26
00005C26 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C2A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C30 6000                       		bra.s	loc_4C7E
00005C32                            ; ===========================================================================
00005C32                            
00005C32                            loc_4C4E:
00005C32 0C40 000C                  		cmpi.w	#$C,d0
00005C36 6600                       		bne.s	loc_4C74
00005C38 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C3C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C40 243C 0001 8000             		move.l	#$18000,d2
00005C46 7206                       		moveq	#6,d1
00005C48                            
00005C48                            loc_4C64:
00005C48 2013                       		move.l	(a3),d0
00005C4A 9082                       		sub.l	d2,d0
00005C4C 26C0                       		move.l	d0,(a3)+
00005C4E 0482 0000 2000             		subi.l	#$2000,d2
00005C54 51C9 FFF2                  		dbf	d1,loc_4C64
00005C58                            
00005C58                            loc_4C74:
00005C58 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C5C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C62                            
00005C62                            loc_4C7E:
00005C62 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C66 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C6A 4440                       		neg.w	d0
00005C6C 4840                       		swap	d0
00005C6E 7600                       		moveq	#0,d3
00005C70 161A                       		move.b	(a2)+,d3
00005C72 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005C76 4442                       		neg.w	d2
00005C78 0242 00FF                  		andi.w	#$FF,d2
00005C7C E54A                       		lsl.w	#2,d2
00005C7E                            
00005C7E                            loc_4C9A:
00005C7E 301B                       		move.w	(a3)+,d0
00005C80 544B                       		addq.w	#2,a3
00005C82 7200                       		moveq	#0,d1
00005C84 121A                       		move.b	(a2)+,d1
00005C86 5341                       		subq.w	#1,d1
00005C88                            
00005C88                            loc_4CA4:
00005C88 2380 2000                  		move.l	d0,(a1,d2.w)
00005C8C 5842                       		addq.w	#4,d2
00005C8E 0242 03FC                  		andi.w	#$3FC,d2
00005C92 51C9 FFF4                  		dbf	d1,loc_4CA4
00005C96 51CB FFE6                  		dbf	d3,loc_4C9A
00005C9A 4E75                       		rts	
00005C9C                            ; End of function SS_BGAnimate
00005C9C                            
00005C9C                            ; ===========================================================================
00005C9C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CA8                            		even
00005CA8 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CB0                            		even
00005CB0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CC4                            		even
00005CC4                            
00005CC4                            ; ===========================================================================
00005CC4                            
00005CC4                            ; ---------------------------------------------------------------------------
00005CC4                            ; Continue screen
00005CC4                            ; ---------------------------------------------------------------------------
00005CC4                            
00005CC4                            GM_Continue:
00005CC4 6100 C4BC                  		bsr.w	PaletteFadeOut
00005CC8 46FC 2700                  		disable_ints
00005CCC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005CD0 0200 00BF                  		andi.b	#$BF,d0
00005CD4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005CDA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005CE0 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005CE4 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005CE8 6100 B496                  		bsr.w	ClearScreen
00005CEC                            
00005CEC 43F8 D000                  		lea	(v_objspace).w,a1
00005CF0 7000                       		moveq	#0,d0
00005CF2 323C 07FF                  		move.w	#$7FF,d1
00005CF6                            	Cont_ClrObjRam:
00005CF6 22C0                       		move.l	d0,(a1)+
00005CF8 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005CFC                            
00005D06 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D0C 6100 B5F0                  		bsr.w	NemDec
00005D1A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D20 6100 B5DC                  		bsr.w	NemDec
00005D2E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D34 6100 B5C8                  		bsr.w	NemDec
00005D38 720A                       		moveq	#10,d1
00005D3A 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D40 7012                       		moveq	#palid_Continue,d0
00005D42 6100 C6E8                  		bsr.w	PalLoad1	; load continue	screen palette
00005D4E 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D54 42B8 F700                  		clr.l	(v_screenposx).w
00005D58 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D60 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005D66 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005D6C 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005D72 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005D78 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005D7E 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005D84 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005D8A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005D90 4EB9 0000 0000             		jsr	(BuildSprites).l
00005D96 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D9A 0000 0040                  		ori.b	#$40,d0
00005D9E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DA4 6100 C336                  		bsr.w	PaletteFadeIn
00005DA8                            
00005DA8                            ; ---------------------------------------------------------------------------
00005DA8                            ; Continue screen main loop
00005DA8                            ; ---------------------------------------------------------------------------
00005DA8                            
00005DA8                            Cont_MainLoop:
00005DA8 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DAE 6100 DC50                  		bsr.w	WaitForVBla
00005DB2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DB8 6400                       		bhs.s	loc_4DF2
00005DBA 46FC 2700                  		disable_ints
00005DBE 3238 F614                  		move.w	(v_demolength).w,d1
00005DC2 82FC 003C                  		divu.w	#$3C,d1
00005DC6 0281 0000 000F             		andi.l	#$F,d1
00005DCC 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005DD2 46FC 2300                  		enable_ints
00005DD6                            
00005DD6                            loc_4DF2:
00005DD6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DDC 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DE2 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005DE8 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005DEA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DF0 64B6                       		bhs.s	Cont_MainLoop
00005DF2 4A78 F614                  		tst.w	(v_demolength).w
00005DF6 6600 FFB0                  		bne.w	Cont_MainLoop
00005DFA 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E00 4E75                       		rts	
00005E02                            ; ===========================================================================
00005E02                            
00005E02                            Cont_GotoLevel:
00005E02 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E08 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E0E 7000                       		moveq	#0,d0
00005E10 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E14 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E18 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E1C 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E20 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E24 4E75                       		rts	
00005E26                            ; ===========================================================================
00005E26                            
00005E26                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            ; Object 80 - Continue screen elements
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            
00005E26                            ContScrItem:
00005E26 7000                       		moveq	#0,d0
00005E28 1028 0024                  		move.b	$24(a0),d0
00005E2C 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E30 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E34                            ; ===========================================================================
00005E34 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E36 0000                       		dc.w CSI_Display-CSI_Index
00005E38 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E3A 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E3C                            ; ===========================================================================
00005E3C                            
00005E3C                            CSI_Main:	; Routine 0
00005E3C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E40 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E48 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E4E 117C 0000 0001             		move.b	#0,obRender(a0)
00005E54 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E5A 317C 0120 0008             		move.w	#$120,obX(a0)
00005E60 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005E66 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005E6C                            
00005E6C                            CSI_Display:	; Routine 2
00005E6C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005E72                            ; ===========================================================================
00005E72                            
00005E72                            	CSI_MiniSonicPos:
00005E72 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005E84 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005E90                            
00005E90                            CSI_MakeMiniSonic:
00005E90                            		; Routine 4
00005E90 2248                       		movea.l	a0,a1
00005E92 45F9 0000 5E72             		lea	(CSI_MiniSonicPos).l,a2
00005E98 7200                       		moveq	#0,d1
00005E9A 1238 FE18                  		move.b	(v_continues).w,d1
00005E9E 5501                       		subq.b	#2,d1
00005EA0 6400                       		bcc.s	CSI_MoreThan1
00005EA2 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005EA8                            
00005EA8                            	CSI_MoreThan1:
00005EA8 7601                       		moveq	#1,d3
00005EAA 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EAE 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EB0                            
00005EB0 7600                       		moveq	#0,d3
00005EB2 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EB4                            
00005EB4                            	CSI_FewerThan16:
00005EB4 1401                       		move.b	d1,d2
00005EB6 0202 0001                  		andi.b	#1,d2
00005EBA                            
00005EBA                            CSI_MiniSonicLoop:
00005EBA 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EBE 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005EC2 4A02                       		tst.b	d2		; do you have an even number of continues?
00005EC4 6700                       		beq.s	CSI_Even	; if yes, branch
00005EC6 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005ECC                            
00005ECC                            	CSI_Even:
00005ECC 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005ED2 137C 0006 001A             		move.b	#6,obFrame(a1)
00005ED8 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005EDE 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005EE6 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005EEC 137C 0000 0001             		move.b	#0,obRender(a1)
00005EF2 43E9 0040                  		lea	$40(a1),a1
00005EF6 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005EFA                            
00005EFA 43E9 FFC0                  		lea	-$40(a1),a1
00005EFE 1343 0028                  		move.b	d3,obSubtype(a1)
00005F02                            
00005F02                            CSI_ChkDel:	; Routine 6
00005F02 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F06 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F08 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F0E 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F10 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F14 0200 0001                  		andi.b	#1,d0
00005F18 6600                       		bne.s	CSI_Animate
00005F1A 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F1E 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F20 4E75                       		rts	
00005F22                            
00005F22                            CSI_Animate:
00005F22 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F26 0200 000F                  		andi.b	#$F,d0
00005F2A 6600                       		bne.s	CSI_Display2
00005F2C 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F32                            
00005F32                            	CSI_Display2:
00005F32 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F38                            ; ===========================================================================
00005F38                            
00005F38                            CSI_Delete:
00005F38 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F38 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F3E                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F3E                            ; ---------------------------------------------------------------------------
00005F3E                            ; Object 81 - Sonic on the continue screen
00005F3E                            ; ---------------------------------------------------------------------------
00005F3E                            
00005F3E                            ContSonic:
00005F3E 7000                       		moveq	#0,d0
00005F40 1028 0024                  		move.b	obRoutine(a0),d0
00005F44 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F48 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F4C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F52                            ; ===========================================================================
00005F52 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F54 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F56 0000                       		dc.w CSon_Animate-CSon_Index
00005F58 0000                       		dc.w CSon_Run-CSon_Index
00005F5A                            ; ===========================================================================
00005F5A                            
00005F5A                            CSon_Main:	; Routine 0
00005F5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F5E 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005F64 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005F6A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005F72 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005F78 117C 0004 0001             		move.b	#4,obRender(a0)
00005F7E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005F84 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005F8A 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005F90                            
00005F90                            CSon_ChkLand:	; Routine 2
00005F90 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005F96 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005F98                            
00005F98 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F9C 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FA0 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FA8 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FAE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FB4 6000                       		bra.s	CSon_Animate
00005FB6                            
00005FB6                            CSon_ShowFall:
00005FB6 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FBC 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005FC2 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005FC8                            ; ===========================================================================
00005FC8                            
00005FC8                            CSon_Animate:	; Routine 4
00005FC8 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005FCC 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005FCE 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00005FD4 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005FDA                            
00005FDA                            CSon_GetUp:
00005FDA 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FDE 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FE6 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FEC 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00005FF2 4268 0020                  		clr.w	obInertia(a0)
00005FF6 5168 000C                  		subq.w	#8,obY(a0)
00006002                            
00006002                            CSon_Run:	; Routine 6
00006002 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006008 6600                       		bne.s	CSon_AddInertia	; if too low, branch
0000600A 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006010 6000                       		bra.s	CSon_ShowRun
00006012                            
00006012                            CSon_AddInertia:
00006012 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006018                            
00006018                            CSon_ShowRun:
00006018 4EB9 0000 0000             		jsr	(SpeedToPos).l
0000601E 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006024 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006024 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000602A                            		include	"_anim\Continue Screen Sonic.asm"
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            ; Animation script - Sonic on the continue screen
0000602A                            ; ---------------------------------------------------------------------------
0000602A 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
0000602C 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
00006038 00                         		even
00006038 00                         		even
00006038                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00006038                            ; ---------------------------------------------------------------------------
00006038                            ; Sprite mappings - Continue screen
00006038                            ; ---------------------------------------------------------------------------
00006038                            Map_ContScr_internal:
00006038 0000                       		dc.w M_Cont_text-Map_ContScr_internal
0000603A 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
0000603C 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
0000603E 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00006040 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00006042 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006044 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006046 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
00006048 0B                         M_Cont_text:	dc.b $B
00006049 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000604E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006053 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006058 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000605D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006062 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00006067 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000606C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006071 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00006076 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000607B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006080 03                         M_Cont_Sonic1:	dc.b 3
00006081 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00006086 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000608B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006090 03                         M_Cont_Sonic2:	dc.b 3
00006091 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00006096 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000609B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060A0 03                         M_Cont_Sonic3:	dc.b 3
000060A1 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000060A6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060AB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060B0 02                         M_Cont_oval:	dc.b 2
000060B1 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000060B6 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000060BB 01                         M_Cont_Mini1:	dc.b 1
000060BC 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000060C1 01                         M_Cont_Mini2:	dc.b 1
000060C2 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000060C8 00                         		even
000060C8 00                         		even
000060C8                            
000060C8                            ; ===========================================================================
000060C8                            ; ---------------------------------------------------------------------------
000060C8                            ; Ending sequence in Green Hill	Zone
000060C8                            ; ---------------------------------------------------------------------------
000060C8                            
000060C8                            GM_Ending:
000060D0 6100 C0B0                  		bsr.w	PaletteFadeOut
000060D4                            
000060D4 43F8 D000                  		lea	(v_objspace).w,a1
000060D8 7000                       		moveq	#0,d0
000060DA 323C 07FF                  		move.w	#$7FF,d1
000060DE                            	End_ClrObjRam:
000060DE 22C0                       		move.l	d0,(a1)+
000060E0 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000060E4                            
000060E4 43F8 F628                  		lea	($FFFFF628).w,a1
000060E8 7000                       		moveq	#0,d0
000060EA 323C 0015                  		move.w	#$15,d1
000060EE                            	End_ClrRam1:
000060EE 22C0                       		move.l	d0,(a1)+
000060F0 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
000060F4                            
000060F4 43F8 F700                  		lea	(v_screenposx).w,a1
000060F8 7000                       		moveq	#0,d0
000060FA 323C 003F                  		move.w	#$3F,d1
000060FE                            	End_ClrRam2:
000060FE 22C0                       		move.l	d0,(a1)+
00006100 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006104                            
00006104 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006108 7000                       		moveq	#0,d0
0000610A 323C 0047                  		move.w	#$47,d1
0000610E                            	End_ClrRam3:
0000610E 22C0                       		move.l	d0,(a1)+
00006110 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006114                            
00006114 46FC 2700                  		disable_ints
00006118 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000611C 0200 00BF                  		andi.b	#$BF,d0
00006120 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006126 6100 B058                  		bsr.w	ClearScreen
0000612A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006130 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006134 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006138 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000613C 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006140 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006144 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006148 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000614C 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006152 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00006156 31FC 001E FE14             		move.w	#30,(v_air).w
0000615C 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006162 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00006168 6700                       		beq.s	End_LoadData	; if yes, branch
0000616A 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006170                            
00006170                            End_LoadData:
00006170 7000                       		moveq	#plcid_Ending,d0
00006172 6100 B6E2                  		bsr.w	QuickPLC	; load ending sequence patterns
00006176 4EB9 0000 0000             		jsr	(Hud_Base).l
0000617C 6100 0000                  		bsr.w	LevelSizeLoad
00006180 6100 0000                  		bsr.w	DeformLayers
00006184 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000618A 6100 0000                  		bsr.w	LevelDataLoad
0000618E 6100 0000                  		bsr.w	LoadTilesFromStart
00006192 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000619A 46FC 2300                  		enable_ints
0000619E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061A4 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061A8 6100 B85C                  		bsr.w	KosDec
000061AC 4EB9 0000 0000             		jsr		LoadPlayerPal
000061B2 6100 C278                  		bsr.w	PalLoad1	; load Sonic's palette
000061BE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000061C4 6700                       		beq.s	End_LoadSonic	; if not, branch
000061C6 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000061CC                            
000061CC                            End_LoadSonic:
000061CC 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000061D2 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
000061D8 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
000061DE 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
000061E4 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
000061EA 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000061F0 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000061F6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000061FC 4EB9 0000 0000             		jsr	(BuildSprites).l
00006202 7000                       		moveq	#0,d0
00006204 31C0 FE20                  		move.w	d0,(v_rings).w
00006208 21C0 FE22                  		move.l	d0,(v_time).w
0000620C 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006210 11C0 FE2C                  		move.b	d0,(v_shield).w
00006214 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006218 11C0 FE2E                  		move.b	d0,(v_shoes).w
0000621C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006220 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006224 31C0 FE02                  		move.w	d0,(f_restart).w
00006228 31C0 FE04                  		move.w	d0,(v_framecount).w
0000622C 6100 EEC6                  		bsr.w	OscillateNumInit
00006230 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006236 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
0000623C 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006242 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006248 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000624E 6100 D7B0                  		bsr.w	WaitForVBla
00006252 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006256 0000 0040                  		ori.b	#$40,d0
0000625A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006260 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006266 6100 BE74                  		bsr.w	PaletteFadeIn
0000626A                            
0000626A                            ; ---------------------------------------------------------------------------
0000626A                            ; Main ending sequence loop
0000626A                            ; ---------------------------------------------------------------------------
0000626A                            
0000626A                            End_MainLoop:
0000626A 6100 AFF0                  		bsr.w	PauseGame
0000626E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006274 6100 D78A                  		bsr.w	WaitForVBla
00006278 5278 FE04                  		addq.w	#1,(v_framecount).w
0000627C 6100 0000                  		bsr.w	End_MoveSonic
00006280 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006286 6100 0000                  		bsr.w	DeformLayers
0000628A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006290 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006296 6100 BA36                  		bsr.w	PaletteCycle
0000629A 6100 EEAE                  		bsr.w	OscillateNumDo
0000629E 6100 EF3A                  		bsr.w	SynchroAnimate
000062A2 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062A8 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062AA                            
000062AA 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062B8 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000062BE 4E75                       		rts	
000062C0                            ; ===========================================================================
000062C0                            
000062C0                            End_ChkEmerald:
000062C0 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000062C4 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000062C8                            
000062C8 4278 FE02                  		clr.w	(f_restart).w
000062CC 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000062D2 4278 F794                  		clr.w	(v_palchgspeed).w
000062D6                            
000062D6                            	End_AllEmlds:
000062D6 6100 AF84                  		bsr.w	PauseGame
000062DA 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062E0 6100 D71E                  		bsr.w	WaitForVBla
000062E4 5278 FE04                  		addq.w	#1,(v_framecount).w
000062E8 6100 0000                  		bsr.w	End_MoveSonic
000062EC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062F2 6100 0000                  		bsr.w	DeformLayers
000062F6 4EB9 0000 0000             		jsr	(BuildSprites).l
000062FC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006302 6100 EE46                  		bsr.w	OscillateNumDo
00006306 6100 EED2                  		bsr.w	SynchroAnimate
0000630A 5378 F794                  		subq.w	#1,(v_palchgspeed).w
0000630E 6A00                       		bpl.s	End_SlowFade
00006310 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00006316 6100 BFB4                  		bsr.w	WhiteOut_ToWhite
0000631A                            
0000631A                            	End_SlowFade:
0000631A 4A78 FE02                  		tst.w	(f_restart).w
0000631E 6700 FFB6                  		beq.w	End_AllEmlds
00006322 4278 FE02                  		clr.w	(f_restart).w
00006326 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
0000632C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006332 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00006338 47F8 F700                  		lea	(v_screenposx).w,a3
0000633C 49F8 A400                  		lea	(v_lvllayout).w,a4
00006340 343C 4000                  		move.w	#$4000,d2
00006344 6100 0000                  		bsr.w	DrawChunks
00006348 7013                       		moveq	#palid_Ending,d0
0000634A 6100 C0E0                  		bsr.w	PalLoad1	; load ending palette
0000634E 6100 BEB0                  		bsr.w	PaletteWhiteIn
00006352 6000 FF16                  		bra.w	End_MainLoop
00006356                            
00006356                            ; ---------------------------------------------------------------------------
00006356                            ; Subroutine controlling Sonic on the ending sequence
00006356                            ; ---------------------------------------------------------------------------
00006356                            
00006356                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006356                            
00006356                            
00006356                            End_MoveSonic:
00006356 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000635A 6600                       		bne.s	End_MoveSon2
0000635C 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006362 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006364                            
00006364 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006368 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
0000636E 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006374 4E75                       		rts	
00006376                            ; ===========================================================================
00006376                            
00006376                            End_MoveSon2:
00006376 5500                       		subq.b	#2,d0
00006378 6600                       		bne.s	End_MoveSon3
0000637A 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006380 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006382                            
00006382 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006386 7000                       		moveq	#0,d0
00006388 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
0000638C 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006390 31C0 D020                  		move.w	d0,(v_player+obInertia).w
00006394 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
0000639A 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063A0 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063A6 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063AC 4E75                       		rts	
000063AE                            ; ===========================================================================
000063AE                            
000063AE                            End_MoveSon3:
000063AE 5500                       		subq.b	#2,d0
000063B0 6600                       		bne.s	End_MoveSonExit
000063B2 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063B6 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063BC 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000063C2 4278 D024                  		clr.w	(v_player+obRoutine).w
000063C6                            
000063C6                            End_MoveSonExit:
000063C6 4E75                       		rts	
000063C8                            ; End of function End_MoveSonic
000063C8                            
000063C8                            ; ===========================================================================
000063C8                            
000063C8                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000063C8                            ; ---------------------------------------------------------------------------
000063C8                            ; Object 87 - Sonic on ending sequence
000063C8                            ; ---------------------------------------------------------------------------
000063C8                            
000063C8                            EndSonic:
000063C8 7000                       		moveq	#0,d0
000063CA 1028 0025                  		move.b	ob2ndRout(a0),d0
000063CE 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
000063D2 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
000063D6 4EF9 0000 0000             		jmp	(DisplaySprite).l
000063DC                            ; ===========================================================================
000063DC 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
000063E0 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
000063E4 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
000063E8 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
000063EC 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000063F0                            
000063F0 =00000030                  eson_time:	equ $30	; time to wait between events
000063F0                            ; ===========================================================================
000063F0                            
000063F0                            ESon_Main:	; Routine 0
000063F0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000063F6 6700                       		beq.s	ESon_Main2	; if yes, branch
000063F8 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
000063FE 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006404 4E75                       		rts	
00006406                            ; ===========================================================================
00006406                            
00006406                            ESon_Main2:
00006406 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000640A 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006412 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006418 117C 0004 0001             		move.b	#4,obRender(a0)
0000641E 4228 0022                  		clr.b	obStatus(a0)
00006422 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006428 117C 0000 001A             		move.b	#0,obFrame(a0)
0000642E 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006434                            
00006434                            ESon_MakeEmeralds:
00006434                            		; Routine 2
00006434 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
00006438 6600                       		bne.s	ESon_Wait
0000643A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000643E 317C 0001 001C             		move.w	#1,obAnim(a0)
00006444 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000644A                            
0000644A                            	ESon_Wait:
0000644A 4E75                       		rts	
0000644C                            ; ===========================================================================
0000644C                            
0000644C                            Obj87_LookUp:	; Routine 6
0000644C 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006454 6600                       		bne.s	locret_5480
00006456 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
0000645C 317C 005A 0030             		move.w	#90,eson_time(a0)
00006462 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006466                            
00006466                            locret_5480:
00006466 4E75                       		rts	
00006468                            ; ===========================================================================
00006468                            
00006468                            Obj87_ClrObjRam:
00006468                            		; Routine 8
00006468 5368 0030                  		subq.w	#1,eson_time(a0)
0000646C 6600                       		bne.s	ESon_Wait2
0000646E 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006472 323C 00FF                  		move.w	#$FF,d1
00006476                            
00006476                            Obj87_ClrLoop:
00006476 4299                       		clr.l	(a1)+
00006478 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000647C 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006482 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006486 117C 0001 001C             		move.b	#1,obAnim(a0)
0000648C 317C 003C 0030             		move.w	#60,eson_time(a0)
00006492                            
00006492                            ESon_Wait2:
00006492 4E75                       		rts	
00006494                            ; ===========================================================================
00006494                            
00006494                            Obj87_MakeLogo:	; Routine $C
00006494 5368 0030                  		subq.w	#1,eson_time(a0)
00006498 6600                       		bne.s	ESon_Wait3
0000649A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000649E 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064A4 117C 0002 001C             		move.b	#2,obAnim(a0)
000064AA 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064B0                            
000064B0                            ESon_Wait3:
000064B0 4E75                       		rts	
000064B2                            ; ===========================================================================
000064B2                            
000064B2                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064B2 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064B8 4EF9 0000 0000             		jmp	(AnimateSprite).l
000064BE                            ; ===========================================================================
000064BE                            
000064BE                            Obj87_Leap:	; Routine $10
000064BE 5368 0030                  		subq.w	#1,eson_time(a0)
000064C2 6600                       		bne.s	ESon_Wait4
000064C4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064C8 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000064D0 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000064D6 117C 0004 0001             		move.b	#4,obRender(a0)
000064DC 4228 0022                  		clr.b	obStatus(a0)
000064E0 317C 0100 0018             		move.w	#$100,obPriority(a0)
000064E6 117C 0005 001A             		move.b	#5,obFrame(a0)
000064EC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000064F2 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064F8 60B8                       		bra.s	Obj87_Animate
000064FA                            ; ===========================================================================
000064FA                            
000064FA                            ESon_Wait4:
000064FA 4E75                       		rts	
000064FA 4E75                       		rts	
000064FC                            		include "_anim\Ending Sequence Sonic.asm"
000064FC                            ; ---------------------------------------------------------------------------
000064FC                            ; Animation script - Sonic on the ending sequence
000064FC                            ; ---------------------------------------------------------------------------
000064FC 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
000064FE 0000                       		dc.w byte_552A-AniScript_ESon
00006500 0000                       		dc.w byte_5534-AniScript_ESon
00006502 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006510 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000651A 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006522                            		even
00006522                            		even
00006522                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006522                            ; ---------------------------------------------------------------------------
00006522                            ; Object 88 - chaos emeralds on	the ending sequence
00006522                            ; ---------------------------------------------------------------------------
00006522                            
00006522                            EndChaos:
00006522 7000                       		moveq	#0,d0
00006524 1028 0024                  		move.b	obRoutine(a0),d0
00006528 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
0000652C 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006530 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006536                            ; ===========================================================================
00006536 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
00006538 0000                       		dc.w ECha_Move-ECha_Index
0000653A                            
0000653A =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000653A =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000653A =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000653A =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000653A                            ; ===========================================================================
0000653A                            
0000653A                            ECha_Main:	; Routine 0
0000653A 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006540 6700                       		beq.s	ECha_CreateEms
00006542 588F                       		addq.l	#4,sp
00006544 4E75                       		rts	
00006546                            ; ===========================================================================
00006546                            
00006546                            ECha_CreateEms:
00006546 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
0000654C 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006552 2248                       		movea.l	a0,a1
00006554 7600                       		moveq	#0,d3
00006556 7401                       		moveq	#1,d2
00006558 7205                       		moveq	#5,d1
0000655A                            
0000655A                            	ECha_LoadLoop:
0000655A 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
0000655E 5429 0024                  		addq.b	#2,obRoutine(a1)
00006562 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000656A 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006570 137C 0004 0001             		move.b	#4,obRender(a1)
00006576 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000657C 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006582 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
00006588 1342 001C                  		move.b	d2,obAnim(a1)
0000658C 1342 001A                  		move.b	d2,obFrame(a1)
00006590 5202                       		addq.b	#1,d2
00006592 1343 0026                  		move.b	d3,obAngle(a1)
00006596 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
0000659A 43E9 0040                  		lea	$40(a1),a1
0000659E 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065A2                            
000065A2                            ECha_Move:	; Routine 2
000065A2 3028 003E                  		move.w	echa_angle(a0),d0
000065A6 D168 0026                  		add.w	d0,obAngle(a0)
000065AA 1028 0026                  		move.b	obAngle(a0),d0
000065AE 4EB9 0000 3A32             		jsr	(CalcSine).l
000065B4 7800                       		moveq	#0,d4
000065B6 1828 003C                  		move.b	echa_radius(a0),d4
000065BA C3C4                       		muls.w	d4,d1
000065BC E081                       		asr.l	#8,d1
000065BE C1C4                       		muls.w	d4,d0
000065C0 E080                       		asr.l	#8,d0
000065C2 D268 0038                  		add.w	echa_origX(a0),d1
000065C6 D068 003A                  		add.w	echa_origY(a0),d0
000065CA 3141 0008                  		move.w	d1,obX(a0)
000065CE 3140 000C                  		move.w	d0,obY(a0)
000065D2                            
000065D2                            	ECha_Expand:
000065D2 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
000065D8 6700                       		beq.s	ECha_Rotate
000065DA 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
000065E0                            
000065E0                            	ECha_Rotate:
000065E0 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
000065E6 6700                       		beq.s	ECha_Rise
000065E8 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000065EE                            
000065EE                            	ECha_Rise:
000065EE 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000065F4 6700                       		beq.s	ECha_End
000065F6 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000065FA                            
000065FA                            ECha_End:
000065FA 4E75                       		rts	
000065FA 4E75                       		rts	
000065FC                            		include	"_incObj\89 Ending Sequence STH.asm"
000065FC                            ; ---------------------------------------------------------------------------
000065FC                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000065FC                            ; ---------------------------------------------------------------------------
000065FC                            
000065FC                            EndSTH:
000065FC 7000                       		moveq	#0,d0
000065FE 1028 0024                  		move.b	$24(a0),d0
00006602 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006606 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000660A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006610                            ; ===========================================================================
00006610 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006612 0000                       		dc.w ESth_Move-ESth_Index
00006614 0000                       		dc.w ESth_GotoCredits-ESth_Index
00006616                            
00006616 =00000030                  esth_time:	equ $30		; time until exit
00006616                            ; ===========================================================================
00006616                            
00006616                            ESth_Main:	; Routine 0
00006616 5428 0024                  		addq.b	#2,obRoutine(a0)
0000661A 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006620 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
00006626 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
0000662E 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006634 117C 0000 0001             		move.b	#0,obRender(a0)
0000663A 317C 0000 0018             		move.w	#0,obPriority(a0)
00006640                            
00006640                            ESth_Move:	; Routine 2
00006640 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006646 6700                       		beq.s	ESth_Delay	; if yes, branch
00006648 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
0000664E 4E75                       		rts
00006650                            
00006650                            ESth_Delay:
00006650 5428 0024                  		addq.b	#2,obRoutine(a0)
00006654 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000665A                            
0000665A                            ESth_GotoCredits:
0000665A                            		; Routine 4
0000665A 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
0000665E 6A00                       		bpl.s	ESth_Wait
00006660 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006666                            
00006666                            	ESth_Wait:
00006666 4E75                       		rts
00006668                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
00006668                            ; ---------------------------------------------------------------------------
00006668                            ; Sprite mappings - Sonic on the ending	sequence
00006668                            ; ---------------------------------------------------------------------------
00006668                            Map_ESon_internal:
00006668 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000666A 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
0000666C 0000                       		dc.w M_ESon_Up-Map_ESon_internal
0000666E 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006670 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006672 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
00006674 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
00006676 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
00006678 02                         M_ESon_Hold1:	dc.b 2
00006679 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000667E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006683 03                         M_ESon_Hold2:	dc.b 3
00006684 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006689 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000668E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006693 02                         M_ESon_Up:	dc.b 2
00006694 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006699 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
0000669E 02                         M_ESon_Conf1:	dc.b 2
0000669F EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066A4 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066A9 02                         M_ESon_Conf2:	dc.b 2
000066AA EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066AF FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066B4 03                         M_ESon_Leap1:	dc.b 3
000066B5 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066BA EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000066BF 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000066C4 07                         M_ESon_Leap2:	dc.b 7
000066C5 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000066CA BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000066CF BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000066D4 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000066D9 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000066DE E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000066E3 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000066E8 18                         M_ESon_Leap3:	dc.b $18
000066E9 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000066EE 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000066F3 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000066F8 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000066FD A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006702 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006707 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000670C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006711 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006716 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000671B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006720 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006725 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000672A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000672F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006734 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006739 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000673E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006743 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00006748 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000674D D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006752 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006757 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000675C F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006762 00                         		even
00006762 00                         		even
00006762                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006762                            ; --------------------------------------------------------------------------------
00006762                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006762                            ; --------------------------------------------------------------------------------
00006762                            
00006762                            SME_0ZTmS:	
00006762 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006766 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000676A 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
0000676E 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006770 01                         SME_0ZTmS_E:	dc.b 1	
00006771 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00006776 01                         SME_0ZTmS_14:	dc.b 1	
00006777 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000677C 01                         SME_0ZTmS_1A:	dc.b 1	
0000677D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006782 01                         SME_0ZTmS_20:	dc.b 1	
00006783 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
00006788 01                         SME_0ZTmS_26:	dc.b 1	
00006789 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
0000678E 01                         SME_0ZTmS_2C:	dc.b 1	
0000678F F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006794 01                         SME_0ZTmS_32:	dc.b 1	
00006795 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0000679A                            		even
0000679A                            		even
0000679A                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            Map_ESth_internal:
0000679A 0000                       		dc.w M_ESth_1-Map_ESth_internal
0000679C 03                         M_ESth_1:	dc.b 3
0000679D F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067A2 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067A7 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067AC                            		even
000067AC                            		even
000067AC                            
000067AC                            ; ===========================================================================
000067AC                            ; ---------------------------------------------------------------------------
000067AC                            ; Credits ending sequence
000067AC                            ; ---------------------------------------------------------------------------
000067AC                            
000067AC                            GM_Credits:
000067AC                            		
000067AC 6100 AF9A                  		bsr.w	ClearPLC
000067B0 6100 B9D0                  		bsr.w	PaletteFadeOut
000067B4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067BA 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000067BE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000067C2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000067C6 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000067CA 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000067CE 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000067D2 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
000067D6 4238 F64E                  		clr.b	(f_wtr_state).w
000067DA 6100 A9A4                  		bsr.w	ClearScreen
000067DE                            
000067DE 43F8 D000                  		lea	(v_objspace).w,a1
000067E2 7000                       		moveq	#0,d0
000067E4 323C 07FF                  		move.w	#$7FF,d1
000067E8                            	TryAg_ClrObjRam:
000067E8 22C0                       		move.l	d0,(a1)+
000067EA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000067EE                            
000067EE 7000                       		moveq	#plcid_TryAgain,d0
000067F0 6100 B064                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000067F4                            
000067F4 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000067F8 7000                       		moveq	#0,d0
000067FA 323C 001F                  		move.w	#$1F,d1
000067FE                            	TryAg_ClrPal:
000067FE 22C0                       		move.l	d0,(a1)+
00006800 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006804                            
00006804 7013                       		moveq	#palid_Ending,d0
00006806 6100 BC24                  		bsr.w	PalLoad1	; load ending palette
0000680A 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
0000680E 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006814 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000681A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006820 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
00006826 6100 B8B4                  		bsr.w	PaletteFadeIn
0000682A                            
0000682A                            ; ---------------------------------------------------------------------------
0000682A                            ; "TRY AGAIN" and "END"	screen main loop
0000682A                            ; ---------------------------------------------------------------------------
0000682A                            TryAg_MainLoop:
0000682A 6100 AA30                  		bsr.w	PauseGame
0000682E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006834 6100 D1CA                  		bsr.w	WaitForVBla
00006838 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000683E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006844 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000684A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000684C 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006850 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006852 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006858 67D0                       		beq.s	TryAg_MainLoop
0000685A                            
0000685A                            TryAg_Exit:
0000685A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006860 4E75                       		rts	
00006862                            
00006862                            ; ===========================================================================
00006862                            
00006862                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006862                            ; ---------------------------------------------------------------------------
00006862                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006862                            ; ---------------------------------------------------------------------------
00006862                            
00006862                            EndEggman:
00006862 7000                       		moveq	#0,d0
00006864 1028 0024                  		move.b	obRoutine(a0),d0
00006868 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
0000686C 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006870 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006876                            ; ===========================================================================
00006876 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006878 0000                       		dc.w EEgg_Animate-EEgg_Index
0000687A 0000                       		dc.w EEgg_Juggle-EEgg_Index
0000687C 0000                       		dc.w EEgg_Wait-EEgg_Index
0000687E                            
0000687E =00000030                  eegg_time:	equ $30		; time between juggle motions
0000687E                            ; ===========================================================================
0000687E                            
0000687E                            EEgg_Main:	; Routine 0
0000687E 5428 0024                  		addq.b	#2,obRoutine(a0)
00006882 317C 0120 0008             		move.w	#$120,obX(a0)
00006888 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
0000688E 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006896 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000689C 117C 0000 0001             		move.b	#0,obRender(a0)
000068A2 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068A8 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068AE 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068B4 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068B6                            
000068B6 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068BC 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000068C2 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000068C8 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
000068CE                            
000068CE                            EEgg_Animate:	; Routine 2
000068CE 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
000068D4 4EF9 0000 0000             		jmp	(AnimateSprite).l
000068DA                            ; ===========================================================================
000068DA                            
000068DA                            EEgg_Juggle:	; Routine 4
000068DA 5428 0024                  		addq.b	#2,obRoutine(a0)
000068DE 7002                       		moveq	#2,d0
000068E0 0828 0000 001C             		btst	#0,obAnim(a0)
000068E6 6700                       		beq.s	@noflip
000068E8 4440                       		neg.w	d0
000068EA                            
000068EA                            	@noflip:
000068EA 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
000068EE 7205                       		moveq	#5,d1
000068F0                            
000068F0                            @emeraldloop:
000068F0 1340 003E                  		move.b	d0,$3E(a1)
000068F4 3400                       		move.w	d0,d2
000068F6 E742                       		asl.w	#3,d2
000068F8 D529 0026                  		add.b	d2,obAngle(a1)
000068FC 43E9 0040                  		lea	$40(a1),a1
00006900 51C9 FFEE                  		dbf	d1,@emeraldloop
00006904 5228 001A                  		addq.b	#1,obFrame(a0)
00006908 317C 0070 0030             		move.w	#112,eegg_time(a0)
0000690E                            
0000690E                            EEgg_Wait:	; Routine 6
0000690E 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006912 6A00                       		bpl.s	@nochg		; branch if time remains
00006914 0868 0000 001C             		bchg	#0,obAnim(a0)
0000691A 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006920                            
00006920                            	@nochg:
00006920 4E75                       		rts	
00006920 4E75                       		rts	
00006922                            		include "_anim\Try Again & End Eggman.asm"
00006922                            ; ---------------------------------------------------------------------------
00006922                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006922                            ; ---------------------------------------------------------------------------
00006922 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006924 0000                       		dc.w @tryagain2-Ani_EEgg
00006926 0000                       		dc.w @end-Ani_EEgg
00006928 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
0000692C 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006930 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006942                            		even
00006942                            		even
00006942                            		include	"_incObj\8C Try Again Emeralds.asm"
00006942                            ; ---------------------------------------------------------------------------
00006942                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006942                            ; ---------------------------------------------------------------------------
00006942                            
00006942                            TryChaos:
00006942 7000                       		moveq	#0,d0
00006944 1028 0024                  		move.b	obRoutine(a0),d0
00006948 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
0000694C 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006950 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006956                            ; ===========================================================================
00006956 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006958 0000                       		dc.w TCha_Move-TCha_Index
0000695A                            ; ===========================================================================
0000695A                            
0000695A                            TCha_Main:	; Routine 0
0000695A 2248                       		movea.l	a0,a1
0000695C 7400                       		moveq	#0,d2
0000695E 7600                       		moveq	#0,d3
00006960 7205                       		moveq	#5,d1
00006962 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006966                            
00006966                            @makeemerald:
00006966 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
0000696A 5429 0024                  		addq.b	#2,obRoutine(a1)
0000696E 237C 0000 6762 0004        		move.l	#Map_ECha,obMap(a1)
00006976 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
0000697C 137C 0000 0001             		move.b	#0,obRender(a1)
00006982 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006988 337C 0104 0008             		move.w	#$104,obX(a1)
0000698E 337C 0120 0038             		move.w	#$120,$38(a1)
00006994 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
0000699A 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069A0 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069A6 47F8 FE58                  		lea	(v_emldlist).w,a3
000069AA                            
000069AA                            	@chkemerald:
000069AA 7000                       		moveq	#0,d0
000069AC 1038 FE57                  		move.b	(v_emeralds).w,d0
000069B0 5340                       		subq.w	#1,d0
000069B2 6500                       		bcs.s	@loc_5B42
000069B4                            
000069B4                            	@chkloop:
000069B4 B433 0000                  		cmp.b	(a3,d0.w),d2
000069B8 6600                       		bne.s	@notgot
000069BA 5202                       		addq.b	#1,d2
000069BC 60EC                       		bra.s	@chkemerald
000069BE                            ; ===========================================================================
000069BE                            
000069BE                            	@notgot:
000069BE 51C8 FFF4                  		dbf	d0,@chkloop
000069C2                            
000069C2                            @loc_5B42:
000069C2 1342 001A                  		move.b	d2,obFrame(a1)
000069C6 5229 001A                  		addq.b	#1,obFrame(a1)
000069CA 5202                       		addq.b	#1,d2
000069CC 137C 0080 0026             		move.b	#$80,obAngle(a1)
000069D2 1343 001E                  		move.b	d3,obTimeFrame(a1)
000069D6 1343 001F                  		move.b	d3,obDelayAni(a1)
000069DA 0643 000A                  		addi.w	#10,d3
000069DE 43E9 0040                  		lea	$40(a1),a1
000069E2 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
000069E6                            
000069E6                            TCha_Move:	; Routine 2
000069E6 4A68 003E                  		tst.w	$3E(a0)
000069EA 6700                       		beq.s	locret_5BBA
000069EC 4A28 001E                  		tst.b	obTimeFrame(a0)
000069F0 6700                       		beq.s	loc_5B78
000069F2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000069F6 6600                       		bne.s	loc_5B80
000069F8                            
000069F8                            loc_5B78:
000069F8 3028 003E                  		move.w	$3E(a0),d0
000069FC D168 0026                  		add.w	d0,obAngle(a0)
00006A00                            
00006A00                            loc_5B80:
00006A00 1028 0026                  		move.b	obAngle(a0),d0
00006A04 6700                       		beq.s	loc_5B8C
00006A06 0C00 0080                  		cmpi.b	#$80,d0
00006A0A 6600                       		bne.s	loc_5B96
00006A0C                            
00006A0C                            loc_5B8C:
00006A0C 4268 003E                  		clr.w	$3E(a0)
00006A10 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A16                            
00006A16                            loc_5B96:
00006A16 4EB9 0000 3A32             		jsr	(CalcSine).l
00006A1C 7800                       		moveq	#0,d4
00006A1E 1828 003C                  		move.b	$3C(a0),d4
00006A22 C3C4                       		muls.w	d4,d1
00006A24 E081                       		asr.l	#8,d1
00006A26 C1C4                       		muls.w	d4,d0
00006A28 E080                       		asr.l	#8,d0
00006A2A D268 0038                  		add.w	$38(a0),d1
00006A2E D068 003A                  		add.w	$3A(a0),d0
00006A32 3141 0008                  		move.w	d1,obX(a0)
00006A36 3140 000A                  		move.w	d0,obScreenY(a0)
00006A3A                            
00006A3A                            locret_5BBA:
00006A3A 4E75                       		rts	
00006A3A 4E75                       		rts	
00006A3C                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A3C                            ; ---------------------------------------------------------------------------
00006A3C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A3C                            ; ---------------------------------------------------------------------------
00006A3C                            Map_EEgg_internal:
00006A3C 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A3E 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A40 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A42 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A44 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A46 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A48 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A4A 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A4C 08                         M_EEgg_Try1:	dc.b 8
00006A4D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A52 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A57 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A5C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006A61 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006A66 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006A6B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A70 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006A75 08                         M_EEgg_Try2:	dc.b 8
00006A76 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006A7B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006A80 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006A85 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006A8A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006A8F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006A94 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A99 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006A9E 08                         M_EEgg_Try3:	dc.b 8
00006A9F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AA4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006AA9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006AAE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AB3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AB8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006ABD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AC2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AC7 08                         M_EEgg_Try4:	dc.b 8
00006AC8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006ACD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006AD2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006AD7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006ADC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006AE1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AE6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AEB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AF0 0C                         M_EEgg_End1:	dc.b $C
00006AF1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006AF6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006AFB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B00 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B05 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B0A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B0F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B14 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B19 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B1E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B23 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B28 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B2D 0A                         M_EEgg_End2:	dc.b $A
00006B2E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B33 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B38 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B3D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B42 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B47 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B4C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B51 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B56 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B5B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006B60 0A                         M_EEgg_End3:	dc.b $A
00006B61 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006B66 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006B6B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006B70 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006B75 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006B7A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006B7F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B84 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B89 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006B8E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006B93 0C                         M_EEgg_End4:	dc.b $C
00006B94 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006B99 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006B9E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BA3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BA8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BAD FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BB2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BB7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BBC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006BC1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006BC6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BCB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006BD0                            		even
00006BD0                            		even
00006BD0                            
00006BD0                            ; ---------------------------------------------------------------------------
00006BD0                            ; Ending sequence demos
00006BD0                            ; ---------------------------------------------------------------------------
00006BD0                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006BFE                            		even
00006BFE                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C3E                            		even
00006C3E                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006C6E                            		even
00006C6E                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006C9E                            		even
00006C9E                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006CBE                            		even
00006CBE                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006CDE                            		even
00006CDE                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D0E                            		even
00006D0E                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D3E                            		even
00006D3E                            
00006D3E                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D3E                            ; ---------------------------------------------------------------------------
00006D3E                            ; Subroutine to	load level boundaries and start	locations
00006D3E                            ; ---------------------------------------------------------------------------
00006D3E                            
00006D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D3E                            
00006D3E                            
00006D3E                            LevelSizeLoad:
00006D3E 7000                       		moveq	#0,d0
00006D40 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D44 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D48 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D4C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D50 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D54 3038 FE10                  		move.w	(v_zone).w,d0
00006D58 ED08                       		lsl.b	#6,d0
00006D5A E848                       		lsr.w	#4,d0
00006D5C 3200                       		move.w	d0,d1
00006D5E D040                       		add.w	d0,d0
00006D60 D041                       		add.w	d1,d0
00006D62 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006D66 3018                       		move.w	(a0)+,d0
00006D68 31C0 F730                  		move.w	d0,($FFFFF730).w
00006D6C 2018                       		move.l	(a0)+,d0
00006D6E 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006D72 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006D76 2018                       		move.l	(a0)+,d0
00006D78 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006D7C 21C0 F724                  		move.l	d0,(v_limittop1).w
00006D80 3038 F728                  		move.w	(v_limitleft2).w,d0
00006D84 0640 0240                  		addi.w	#$240,d0
00006D88 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006D8C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006D92 3018                       		move.w	(a0)+,d0
00006D94 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006D98 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006D9E 6000 0000                  		bra.w	LevSz_ChkLamp
00006DA2                            
00006DA2                            ; ===========================================================================
00006DA2                            ; ---------------------------------------------------------------------------
00006DA2                            ; Level size array
00006DA2                            ; ---------------------------------------------------------------------------
00006DA2                            LevelSizeArray:
00006DA2                            		; GHZ
00006DA2 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DAE 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DBA 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006DC6 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006DD2                            		; LZ
00006DD2 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006DDE 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006DEA 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006DF6 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E02                            		; MZ
00006E02 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E0E 0004 0000 17BF 0000 0520+  		dc.w $0004, $0000, $17BF, $0000, $0520, $0060
00006E1A 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E26 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E32                            		; SLZ
00006E32 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E3E 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E4A 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E56 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006E62                            		; SYZ
00006E62 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006E6E 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006E7A 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006E86 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006E92                            		; SBZ
00006E92 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006E9E 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EAA 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EB6 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EC2                            		; Ending
00006EC2 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006ECE 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006EDA 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EE6 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EF2                            
00006EF2                            ; ---------------------------------------------------------------------------
00006EF2                            ; Ending start location array
00006EF2                            ; ---------------------------------------------------------------------------
00006EF2                            EndingStLocArray:
00006EF2                            		include	"_inc\Start Location Array - Ending.asm"
00006EF2                            ; ---------------------------------------------------------------------------
00006EF2                            ; Ending start location array
00006EF2                            ; ---------------------------------------------------------------------------
00006EF2                            
00006EF2                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006EF6                            		incbin	"startpos\mz2 (Credits demo).bin"
00006EFA                            		incbin	"startpos\syz3 (Credits demo).bin"
00006EFE                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F02                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F06                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F0A                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F0E                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F12                            		even
00006F12                            		even
00006F12                            
00006F12                            ; ===========================================================================
00006F12                            
00006F12                            LevSz_ChkLamp:
00006F12 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F16 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F18                            
00006F18 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F1E 3238 D008                  		move.w	(v_player+obX).w,d1
00006F22 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F26 6000                       		bra.s	LevSz_SkipStartPos
00006F28                            ; ===========================================================================
00006F28                            
00006F28                            LevSz_StartLoc:
00006F28 3038 FE10                  		move.w	(v_zone).w,d0
00006F2C ED08                       		lsl.b	#6,d0
00006F2E E848                       		lsr.w	#4,d0
00006F30 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F34 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F38 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F3A                            
00006F3A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F3E 5340                       		subq.w	#1,d0
00006F40 E548                       		lsl.w	#2,d0
00006F42 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F46                            
00006F46                            LevSz_SonicPos:
00006F46 7200                       		moveq	#0,d1
00006F48 3219                       		move.w	(a1)+,d1
00006F4A 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F4E 7000                       		moveq	#0,d0
00006F50 3011                       		move.w	(a1),d0
00006F52 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F56                            
00006F56                            SetScreen:
00006F56                            	LevSz_SkipStartPos:
00006F56 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006F5A 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006F5C 7200                       		moveq	#0,d1
00006F5E                            
00006F5E                            	SetScr_WithinLeft:
00006F5E 3438 F72A                  		move.w	(v_limitright2).w,d2
00006F62 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006F64 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006F66 3202                       		move.w	d2,d1
00006F68                            
00006F68                            	SetScr_WithinRight:
00006F68 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006F6C                            
00006F6C 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006F70 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006F72 7000                       		moveq	#0,d0
00006F74                            
00006F74                            	SetScr_WithinTop:
00006F74 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006F78 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006F7A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006F7E                            
00006F7E                            	SetScr_WithinBottom:
00006F7E 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006F82 6100 0000                  		bsr.w	BgScrollSpeed
00006F86 7000                       		moveq	#0,d0
00006F88 1038 FE10                  		move.b	(v_zone).w,d0
00006F8C E508                       		lsl.b	#2,d0
00006F8E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006F94 4E75                       		rts
00006F96                            ; ===========================================================================
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            ; Sonic start location array
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            ; Sonic start location array
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            
00006F96                            		incbin	"startpos\ghz1.bin"
00006F9A                            		incbin	"startpos\ghz2.bin"
00006F9E                            		incbin	"startpos\ghz3.bin"
00006FA2 0080 00A8                  		dc.w	$80,$A8
00006FA6                            
00006FA6                            		incbin	"startpos\lz1.bin"
00006FAA                            		incbin	"startpos\lz2.bin"
00006FAE                            		incbin	"startpos\lz3.bin"
00006FB2                            		incbin	"startpos\sbz3.bin"
00006FB6                            
00006FB6                            		incbin	"startpos\mz1.bin"
00006FBA                            		incbin	"startpos\mz2.bin"
00006FBE                            		incbin	"startpos\mz3.bin"
00006FC2 0080 00A8                  		dc.w	$80,$A8
00006FC6                            
00006FC6                            		incbin	"startpos\slz1.bin"
00006FCA                            		incbin	"startpos\slz2.bin"
00006FCE                            		incbin	"startpos\slz3.bin"
00006FD2 0080 00A8                  		dc.w	$80,$A8
00006FD6                            
00006FD6                            		incbin	"startpos\syz1.bin"
00006FDA                            		incbin	"startpos\syz2.bin"
00006FDE                            		incbin	"startpos\syz3.bin"
00006FE2 0080 00A8                  		dc.w	$80,$A8
00006FE6                            
00006FE6                            		incbin	"startpos\sbz1.bin"
00006FEA                            		incbin	"startpos\sbz2.bin"
00006FEE                            		incbin	"startpos\fz.bin"
00006FF2 0080 00A8                  		dc.w	$80,$A8
00006FF6                            
00006FF6                            
00006FF6                            		incbin	"startpos\end1.bin"
00006FFA                            		incbin	"startpos\end2.bin"
00006FFE 0080 00A8                  		dc.w	$80,$A8
00007002 0080 00A8                  		dc.w	$80,$A8
00007006                            
00007006                            		even
00007006                            		even
00007006                            
00007006                            ; ---------------------------------------------------------------------------
00007006                            ; Which	256x256	tiles contain loops or roll-tunnels
00007006                            ; ---------------------------------------------------------------------------
00007006                            
00007006                            LoopTileNums:
00007006                            
00007006                            ; 		loop	loop	tunnel	tunnel
00007006                            
00007006 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
0000700A 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
0000700E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007012 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007016 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000701A 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
0000701E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007022                            
00007022                            		even
00007022                            
00007022                            ; ---------------------------------------------------------------------------
00007022                            ; Subroutine to	set scroll speed of some backgrounds
00007022                            ; ---------------------------------------------------------------------------
00007022                            
00007022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007022                            
00007022                            
00007022                            BgScrollSpeed:
00007022 4A38 FE30                  		tst.b	(v_lastlamp).w
00007026 6600                       		bne.s	loc_6206
00007028 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000702C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007030 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007034 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
00007038 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
0000703C                            
0000703C                            loc_6206:
0000703C 7400                       		moveq	#0,d2
0000703E 1438 FE10                  		move.b	(v_zone).w,d2
00007042 D442                       		add.w	d2,d2
00007044 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007048 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000704C                            ; End of function BgScrollSpeed
0000704C                            
0000704C                            ; ===========================================================================
0000704C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007050 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007054 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007058 0000                       		dc.w BgScroll_End-BgScroll_Index
0000705A                            ; ===========================================================================
0000705A                            
0000705A                            BgScroll_GHZ:
0000705A 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000705E 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007062 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007066 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000706A 45F8 A800                  		lea	($FFFFA800).w,a2
0000706E 429A                       		clr.l	(a2)+
00007070 429A                       		clr.l	(a2)+
00007072 429A                       		clr.l	(a2)+
00007074 4E75                       		rts
00007076                            ; ===========================================================================
00007076                            
00007076                            BgScroll_LZ:
00007076 E280                       		asr.l	#1,d0
00007078 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000707C 4E75                       		rts	
0000707E                            ; ===========================================================================
0000707E                            
0000707E                            BgScroll_MZ:
0000707E 4E75                       		rts	
00007080                            ; ===========================================================================
00007080                            
00007080                            BgScroll_SLZ:
00007080 E280                       		asr.l	#1,d0
00007082 0640 00C0                  		addi.w	#$C0,d0
00007086 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000708A 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000708E 4E75                       		rts	
00007090                            ; ===========================================================================
00007090                            
00007090                            BgScroll_SYZ:
00007090 E980                       		asl.l	#4,d0
00007092 2400                       		move.l	d0,d2
00007094 E380                       		asl.l	#1,d0
00007096 D082                       		add.l	d2,d0
00007098 E080                       		asr.l	#8,d0
0000709A 5240                       		addq.w	#1,d0
0000709C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070A0 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070A4 4E75                       		rts	
000070A6                            ; ===========================================================================
000070A6                            
000070A6                            BgScroll_SBZ:
000070A6 0240 07F8                  		andi.w	#$7F8,d0
000070AA E640                       		asr.w	#3,d0
000070AC 5240                       		addq.w	#1,d0
000070AE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070B2 4E75                       		rts	
000070B4                            ; ===========================================================================
000070B4                            
000070B4                            BgScroll_End:
000070B4 3038 F700                  		move.w	(v_screenposx).w,d0
000070B8 E240                       		asr.w	#1,d0
000070BA 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
000070BE 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
000070C2 E440                       		asr.w	#2,d0
000070C4 3200                       		move.w	d0,d1
000070C6 D040                       		add.w	d0,d0
000070C8 D041                       		add.w	d1,d0
000070CA 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
000070CE 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070D2 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070D6 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070DA 45F8 A800                  		lea	($FFFFA800).w,a2
000070DE 429A                       		clr.l	(a2)+
000070E0 429A                       		clr.l	(a2)+
000070E2 429A                       		clr.l	(a2)+
000070E4 4E75                       		rts
000070E4 4E75                       		rts
000070E6                            		include	"_inc\DeformLayers (JP1).asm"
000070E6                            ; ---------------------------------------------------------------------------
000070E6                            ; Background layer deformation subroutines
000070E6                            ; ---------------------------------------------------------------------------
000070E6                            
000070E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070E6                            
000070E6                            
000070E6                            DeformLayers:
000070E6 4A38 F744                  		tst.b	(f_nobgscroll).w
000070EA 6700                       		beq.s	@bgscroll
000070EC 4E75                       		rts	
000070EE                            ; ===========================================================================
000070EE                            
000070EE                            	@bgscroll:
000070EE 4278 F754                  		clr.w	(v_fg_scroll_flags).w
000070F2 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
000070F6 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
000070FA 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
000070FE 6100 0000                  		bsr.w	ScrollHoriz
00007102 6100 0000                  		bsr.w	ScrollVertical
00007106 6100 0000                  		bsr.w	DynamicLevelEvents
0000710A 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007110 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007116 7000                       		moveq	#0,d0
00007118 1038 FE10                  		move.b	(v_zone).w,d0
0000711C D040                       		add.w	d0,d0
0000711E 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007122 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007126                            ; End of function DeformLayers
00007126                            
00007126                            ; ===========================================================================
00007126                            ; ---------------------------------------------------------------------------
00007126                            ; Offset index for background layer deformation	code
00007126                            ; ---------------------------------------------------------------------------
00007126 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000712A 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000712E 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007132 0000                       		dc.w Deform_GHZ-Deform_Index
00007134                            ; ---------------------------------------------------------------------------
00007134                            ; Green	Hill Zone background layer deformation code
00007134                            ; ---------------------------------------------------------------------------
00007134                            
00007134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007134                            
00007134                            
00007134                            Deform_GHZ:
00007134                            	;cmpi.b    #id_Title,(v_gamemode).w
00007134                            	;beq.w    Deform_Title
00007134                            
00007134                            ;Deform_GHZ_Stage:
00007134                            	; block 3 - distant mountains
00007134 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007138 48C4                       		ext.l	d4
0000713A EB84                       		asl.l	#5,d4
0000713C 2204                       		move.l	d4,d1
0000713E E384                       		asl.l	#1,d4
00007140 D881                       		add.l	d1,d4
00007142 7C00                       		moveq	#0,d6
00007144 6100 0000                  		bsr.w	BGScroll_Block3
00007148                            	; block 2 - hills & waterfalls
00007148 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000714C 48C4                       		ext.l	d4
0000714E EF84                       		asl.l	#7,d4
00007150 7C00                       		moveq	#0,d6
00007152 6100 0000                  		bsr.w	BGScroll_Block2
00007156                            	; calculate Y position
00007156 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000715A 3038 F704                  		move.w	(v_screenposy).w,d0
0000715E 0240 07FF                  		andi.w	#$7FF,d0
00007162 EA48                       		lsr.w	#5,d0
00007164 4440                       		neg.w	d0
00007166 0640 0020                  		addi.w	#$20,d0
0000716A 6A00                       		bpl.s	@limitY
0000716C 7000                       		moveq	#0,d0
0000716E                            	@limitY:
0000716E 3800                       		move.w	d0,d4
00007170 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00007174 3038 F700                  		move.w	(v_screenposx).w,d0
00007178 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000717E 6600                       		bne.s	@notTitle
00007180 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007182                            	@notTitle:
00007182 4440                       		neg.w	d0
00007184 4840                       		swap	d0
00007186                            	; auto-scroll clouds
00007186 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000718A 069A 0001 0000             		addi.l	#$10000,(a2)+
00007190 069A 0000 C000             		addi.l	#$C000,(a2)+
00007196 069A 0000 8000             		addi.l	#$8000,(a2)+
0000719C                            	; calculate background scroll	
0000719C 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071A0 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071A4 4440                       		neg.w	d0
000071A6 323C 001F                  		move.w	#$1F,d1
000071AA 9244                       		sub.w	d4,d1
000071AC 6500                       		bcs.s	@gotoCloud2
000071AE                            	@cloudLoop1:		; upper cloud (32px)
000071AE 22C0                       		move.l	d0,(a1)+
000071B0 51C9 FFFC                  		dbf	d1,@cloudLoop1
000071B4                            
000071B4                            	@gotoCloud2:
000071B4 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000071B8 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071BC 4440                       		neg.w	d0
000071BE 323C 000F                  		move.w	#$F,d1
000071C2                            	@cloudLoop2:		; middle cloud (16px)
000071C2 22C0                       		move.l	d0,(a1)+
000071C4 51C9 FFFC                  		dbf	d1,@cloudLoop2
000071C8                            
000071C8 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
000071CC D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071D0 4440                       		neg.w	d0
000071D2 323C 000F                  		move.w	#$F,d1
000071D6                            	@cloudLoop3:		; lower cloud (16px)
000071D6 22C0                       		move.l	d0,(a1)+
000071D8 51C9 FFFC                  		dbf	d1,@cloudLoop3
000071DC                            
000071DC 323C 002F                  		move.w	#$2F,d1
000071E0 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000071E4 4440                       		neg.w	d0
000071E6                            	@mountainLoop:		; distant mountains (48px)
000071E6 22C0                       		move.l	d0,(a1)+
000071E8 51C9 FFFC                  		dbf	d1,@mountainLoop
000071EC                            
000071EC 323C 0027                  		move.w	#$27,d1
000071F0 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000071F4 4440                       		neg.w	d0
000071F6                            	@hillLoop:			; hills & waterfalls (40px)
000071F6 22C0                       		move.l	d0,(a1)+
000071F8 51C9 FFFC                  		dbf	d1,@hillLoop
000071FC                            
000071FC 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007200 3438 F700                  		move.w	(v_screenposx).w,d2
00007204 9440                       		sub.w	d0,d2
00007206 48C2                       		ext.l	d2
00007208 E182                       		asl.l	#8,d2
0000720A 85FC 0068                  		divs.w	#$68,d2
0000720E 48C2                       		ext.l	d2
00007210 E182                       		asl.l	#8,d2
00007212 7600                       		moveq	#0,d3
00007214 3600                       		move.w	d0,d3
00007216 323C 0047                  		move.w	#$47,d1
0000721A D244                       		add.w	d4,d1
0000721C                            	@waterLoop:			; water deformation
0000721C 3003                       		move.w	d3,d0
0000721E 4440                       		neg.w	d0
00007220 22C0                       		move.l	d0,(a1)+
00007222 4843                       		swap	d3
00007224 D682                       		add.l	d2,d3
00007226 4843                       		swap	d3
00007228 51C9 FFF2                  		dbf	d1,@waterLoop
0000722C 4E75                       		rts
0000722E                            ; End of function Deform_GHZ
0000722E                            
0000722E                            Deform_Title:
0000722E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007232 48C4                       		ext.l	d4
00007234 EB84                       		asl.l	#5,d4
00007236 2204                       		move.l	d4,d1
00007238 E384                       		asl.l	#1,d4
0000723A D881                       		add.l	d1,d4
0000723C 7A00                       		moveq	#0,d5
0000723E 6100 0000                  		bsr.w	BGScroll_Block1
00007242 6100 0000                  		bsr.w	BGScroll_Block3
00007246 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000724A 3038 F704                  		move.w	(v_screenposy).w,d0
0000724E 0240 07FF                  		andi.w	#$7FF,d0
00007252 EA48                       		lsr.w	#5,d0
00007254 4440                       		neg.w	d0
00007256 0640 0026                  		addi.w	#$26,d0
0000725A 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000725E 3800                       		move.w	d0,d4
00007260 6100 0000                  		bsr.w	BGScroll_Block3
00007264 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000726A 323C 006F                  		move.w	#$6F,d1
0000726E 9244                       		sub.w	d4,d1
00007270 3038 F700                  		move.w	(v_screenposx).w,d0
00007274 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000727A 6600                       		bne.s	loc_633C
0000727C 7000                       		moveq	#0,d0
0000727E                            
0000727E                            loc_633C:
0000727E 4440                       		neg.w	d0
00007280 4840                       		swap	d0
00007282 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007286 4440                       		neg.w	d0
00007288                            
00007288                            loc_6346:
00007288 22C0                       		move.l	d0,(a1)+
0000728A 51C9 FFFC                  		dbf	d1,loc_6346
0000728E 323C 0027                  		move.w	#$27,d1
00007292 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007296 4440                       		neg.w	d0
00007298                            
00007298                            loc_6356:
00007298 22C0                       		move.l	d0,(a1)+
0000729A 51C9 FFFC                  		dbf	d1,loc_6356
0000729E 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072A2 0640 0000                  		addi.w	#0,d0
000072A6 3438 F700                  		move.w	(v_screenposx).w,d2
000072AA 0642 FE00                  		addi.w	#-$200,d2
000072AE 9440                       		sub.w	d0,d2
000072B0 48C2                       		ext.l	d2
000072B2 E182                       		asl.l	#8,d2
000072B4 85FC 0068                  		divs.w	#$68,d2
000072B8 48C2                       		ext.l	d2
000072BA E182                       		asl.l	#8,d2
000072BC 7600                       		moveq	#0,d3
000072BE 3600                       		move.w	d0,d3
000072C0 323C 0047                  		move.w	#$47,d1
000072C4 D244                       		add.w	d4,d1
000072C6                            
000072C6                            loc_6384:
000072C6 3003                       		move.w	d3,d0
000072C8 4440                       		neg.w	d0
000072CA 22C0                       		move.l	d0,(a1)+
000072CC 4843                       		swap	d3
000072CE D682                       		add.l	d2,d3
000072D0 4843                       		swap	d3
000072D2 51C9 FFF2                  		dbf	d1,loc_6384
000072D6 4E75                       		rts	
000072D8                            
000072D8                            ; ===========================================================================
000072D8                            ; ---------------------------------------------------------------------------
000072D8                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000072D8                            ; ---------------------------------------------------------------------------
000072D8                             
000072D8                            Deform_LZ:
000072D8 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000072DA 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
000072DE 48C4                       		ext.l	d4					; extend to long-word signed
000072E0 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
000072E2 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
000072E6 48C5                       		ext.l	d5					; extend to long-word signed
000072E8 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
000072EA 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
000072EE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
000072F4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
000072F8 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
000072FC 4440                       		neg.w	d0					; reverse
000072FE 4840                       		swap	d0					; send to upper word
00007300 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
00007304 4440                       		neg.w	d0					; reverse
00007306 7600                       		moveq	#$00,d3					; clear d3
00007308 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
0000730C 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007312 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
00007316 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
0000731A 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
0000731E 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007320 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007322 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00007324 3202                       		move.w	d2,d1					; set at maximum
00007326                             
00007326                            DLZ_NoWater:
00007326 9441                       		sub.w	d1,d2					; subtract from water-line count
00007328 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000732A 5301                       		subq.b	#$01,d1					; decrease above water count
0000732C 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000732E                             
0000732E                            DLZ_Above:
0000732E 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007330 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00007334                             
00007334                            DLZ_Water:
00007334 5302                       		subq.b	#$01,d2					; decrease below water count
00007336 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00007338 3200                       		move.w	d0,d1					; copy BG position back to d1
0000733A 4840                       		swap	d0					; move FG position back to lower word in d0
0000733C 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000733E D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007342 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
00007346 D643                       		add.w	d3,d3					; multiply by word size (2)
00007348 D844                       		add.w	d4,d4					; ''
0000734A 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007350 D6C4                       		adda.w	d4,a3					; advance to correct starting point
00007352 1813                       		move.b	(a3),d4					; get current position byte
00007354 E404                       		asr.b	#$02,d4					; get only the position bits
00007356 4884                       		ext.w	d4					; extend to word
00007358 D244                       		add.w	d4,d1					; adjust BG's current position
0000735A 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000735E 1812                       		move.b	(a2),d4					; get current position byte
00007360 E404                       		asr.b	#$02,d4					; get only the position bits
00007362 4884                       		ext.w	d4					; extend to word
00007364 D044                       		add.w	d4,d0					; adjust FG's current position
00007366                             
00007366                            DLZ_Below:
00007366 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
00007368 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
0000736A D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000736C 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000736E 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00007372                             
00007372                            DLZ_Finish:
00007372 4E75                       		rts						; return
00007374                             
00007374                            ; ---------------------------------------------------------------------------
00007374                            ; Scroll data for the FG
00007374                            ; ---------------------------------------------------------------------------
00007374                             
00007374                            DLZ_WaveFG:
00007374                            		rept	$02
00007374                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007374 0001 0400 0401 0800 0801+  		endr
00007774                             
00007774                            ; ---------------------------------------------------------------------------
00007774                            ; Scroll data for the BG
00007774                            ; ---------------------------------------------------------------------------
00007774                             
00007774                            DLZ_WaveBG:	rept	$04
00007774                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00007774                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00007774                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00007774                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00007774                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00007774                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00007774                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00007774                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00007774 FC01 0000 0000 0000 0000+  		endr
00007B74                             
00007B74                            ; ===========================================================================
00007B74                            ; End of function Deform_LZ
00007B74                            
00007B74                            ; ---------------------------------------------------------------------------
00007B74                            ; Marble Zone background layer deformation code
00007B74                            ; ---------------------------------------------------------------------------
00007B74                            
00007B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B74                            
00007B74                            
00007B74                            Deform_MZ:
00007B74                            	; block 1 - dungeon interior
00007B74 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B78 48C4                       		ext.l	d4
00007B7A ED84                       		asl.l	#6,d4
00007B7C 2204                       		move.l	d4,d1
00007B7E E384                       		asl.l	#1,d4
00007B80 D881                       		add.l	d1,d4
00007B82 7C02                       		moveq	#2,d6
00007B84 6100 0000                  		bsr.w	BGScroll_Block1
00007B88                            	; block 3 - mountains
00007B88 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B8C 48C4                       		ext.l	d4
00007B8E ED84                       		asl.l	#6,d4
00007B90 7C06                       		moveq	#6,d6
00007B92 6100 0000                  		bsr.w	BGScroll_Block3
00007B96                            	; block 2 - bushes & antique buildings
00007B96 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B9A 48C4                       		ext.l	d4
00007B9C EF84                       		asl.l	#7,d4
00007B9E 7C04                       		moveq	#4,d6
00007BA0 6100 0000                  		bsr.w	BGScroll_Block2
00007BA4                            	; calculate y-position of background
00007BA4 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BA8 3238 F704                  		move.w	(v_screenposy).w,d1
00007BAC 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007BB0 6500                       		bcs.s	@noYscroll
00007BB2 3401                       		move.w	d1,d2
00007BB4 D241                       		add.w	d1,d1
00007BB6 D242                       		add.w	d2,d1
00007BB8 E441                       		asr.w	#2,d1
00007BBA D041                       		add.w	d1,d0
00007BBC                            	@noYscroll:
00007BBC 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007BC0 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007BC4 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007BC8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007BCE                            	; do something with redraw flags
00007BCE 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007BD2 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007BD6 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007BDA 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007BDE 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007BE2                            	; calculate background scroll buffer
00007BE2 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007BE6 3438 F700                  		move.w	(v_screenposx).w,d2
00007BEA 4442                       		neg.w	d2
00007BEC 3002                       		move.w	d2,d0
00007BEE E440                       		asr.w	#2,d0
00007BF0 9042                       		sub.w	d2,d0
00007BF2 48C0                       		ext.l	d0
00007BF4 E780                       		asl.l	#3,d0
00007BF6 81FC 0005                  		divs.w	#5,d0
00007BFA 48C0                       		ext.l	d0
00007BFC E980                       		asl.l	#4,d0
00007BFE E180                       		asl.l	#8,d0
00007C00 7600                       		moveq	#0,d3
00007C02 3602                       		move.w	d2,d3
00007C04 E243                       		asr.w	#1,d3
00007C06 323C 0004                  		move.w	#4,d1
00007C0A                            	@cloudLoop:		
00007C0A 32C3                       		move.w	d3,(a1)+
00007C0C 4843                       		swap	d3
00007C0E D680                       		add.l	d0,d3
00007C10 4843                       		swap	d3
00007C12 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C16                            
00007C16 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C1A 4440                       		neg.w	d0
00007C1C 323C 0001                  		move.w	#1,d1
00007C20                            	@mountainLoop:		
00007C20 32C0                       		move.w	d0,(a1)+
00007C22 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C26                            
00007C26 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C2A 4440                       		neg.w	d0
00007C2C 323C 0008                  		move.w	#8,d1
00007C30                            	@bushLoop:		
00007C30 32C0                       		move.w	d0,(a1)+
00007C32 51C9 FFFC                  		dbf	d1,@bushLoop
00007C36                            
00007C36 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C3A 4440                       		neg.w	d0
00007C3C 323C 000F                  		move.w	#$F,d1
00007C40                            	@interiorLoop:		
00007C40 32C0                       		move.w	d0,(a1)+
00007C42 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C46                            
00007C46 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C4A 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007C4E 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007C52 3400                       		move.w	d0,d2
00007C54 0C40 0100                  		cmpi.w	#$100,d0
00007C58 6500                       		bcs.s	@limitY
00007C5A 303C 0100                  		move.w	#$100,d0
00007C5E                            	@limitY:
00007C5E 0240 01F0                  		andi.w	#$1F0,d0
00007C62 E648                       		lsr.w	#3,d0
00007C64 45F2 0000                  		lea	(a2,d0),a2
00007C68 6000 0000                  		bra.w	Bg_Scroll_X
00007C6C                            ; End of function Deform_MZ
00007C6C                            
00007C6C                            ; ---------------------------------------------------------------------------
00007C6C                            ; Star Light Zone background layer deformation code
00007C6C                            ; ---------------------------------------------------------------------------
00007C6C                            
00007C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C6C                            
00007C6C                            
00007C6C                            Deform_SLZ:
00007C6C                            	; vertical scrolling
00007C6C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007C70 48C5                       		ext.l	d5
00007C72 EF85                       		asl.l	#7,d5
00007C74 6100 0000                  		bsr.w	Bg_Scroll_Y
00007C78 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C7E                            	; calculate background scroll buffer
00007C7E 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C82 3438 F700                  		move.w	(v_screenposx).w,d2
00007C86 4442                       		neg.w	d2
00007C88 3002                       		move.w	d2,d0
00007C8A E640                       		asr.w	#3,d0
00007C8C 9042                       		sub.w	d2,d0
00007C8E 48C0                       		ext.l	d0
00007C90 E980                       		asl.l	#4,d0
00007C92 81FC 001C                  		divs.w	#$1C,d0
00007C96 48C0                       		ext.l	d0
00007C98 E980                       		asl.l	#4,d0
00007C9A E180                       		asl.l	#8,d0
00007C9C 7600                       		moveq	#0,d3
00007C9E 3602                       		move.w	d2,d3
00007CA0 323C 001B                  		move.w	#$1B,d1
00007CA4                            	@starLoop:		
00007CA4 32C3                       		move.w	d3,(a1)+
00007CA6 4843                       		swap	d3
00007CA8 D680                       		add.l	d0,d3
00007CAA 4843                       		swap	d3
00007CAC 51C9 FFF6                  		dbf	d1,@starLoop
00007CB0                            
00007CB0 3002                       		move.w	d2,d0
00007CB2 E640                       		asr.w	#3,d0
00007CB4 3200                       		move.w	d0,d1
00007CB6 E241                       		asr.w	#1,d1
00007CB8 D041                       		add.w	d1,d0
00007CBA 323C 0004                  		move.w	#4,d1
00007CBE                            	@buildingLoop1:		; distant black buildings
00007CBE 32C0                       		move.w	d0,(a1)+
00007CC0 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007CC4                            
00007CC4 3002                       		move.w	d2,d0
00007CC6 E440                       		asr.w	#2,d0
00007CC8 323C 0004                  		move.w	#4,d1
00007CCC                            	@buildingLoop2:		; closer buildings
00007CCC 32C0                       		move.w	d0,(a1)+
00007CCE 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007CD2                            
00007CD2 3002                       		move.w	d2,d0
00007CD4 E240                       		asr.w	#1,d0
00007CD6 323C 001D                  		move.w	#$1D,d1
00007CDA                            	@bottomLoop:		; bottom part of background
00007CDA 32C0                       		move.w	d0,(a1)+
00007CDC 51C9 FFFC                  		dbf	d1,@bottomLoop
00007CE0                            
00007CE0 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007CE4 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007CE8 3400                       		move.w	d0,d2
00007CEA 0440 00C0                  		subi.w	#$C0,d0
00007CEE 0240 03F0                  		andi.w	#$3F0,d0
00007CF2 E648                       		lsr.w	#3,d0
00007CF4 45F2 0000                  		lea	(a2,d0),a2
00007CF8                            ;-------------------------------------------------------------------------------
00007CF8                            ;-------------------------------------------------------------------------------
00007CF8                            Bg_Scroll_X:
00007CF8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007CFC 323C 000E                  		move.w	#$E,d1
00007D00 3038 F700                  		move.w	(v_screenposx).w,d0
00007D04 4440                       		neg.w	d0
00007D06 4840                       		swap	d0
00007D08 0242 000F                  		andi.w	#$F,d2
00007D0C D442                       		add.w	d2,d2
00007D0E 301A                       		move.w	(a2)+,d0
00007D10 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D14                            	@blockLoop:
00007D14 301A                       		move.w	(a2)+,d0
00007D16                            	@pixelJump:		
00007D16 22C0                       		move.l	d0,(a1)+
00007D18 22C0                       		move.l	d0,(a1)+
00007D1A 22C0                       		move.l	d0,(a1)+
00007D1C 22C0                       		move.l	d0,(a1)+
00007D1E 22C0                       		move.l	d0,(a1)+
00007D20 22C0                       		move.l	d0,(a1)+
00007D22 22C0                       		move.l	d0,(a1)+
00007D24 22C0                       		move.l	d0,(a1)+
00007D26 22C0                       		move.l	d0,(a1)+
00007D28 22C0                       		move.l	d0,(a1)+
00007D2A 22C0                       		move.l	d0,(a1)+
00007D2C 22C0                       		move.l	d0,(a1)+
00007D2E 22C0                       		move.l	d0,(a1)+
00007D30 22C0                       		move.l	d0,(a1)+
00007D32 22C0                       		move.l	d0,(a1)+
00007D34 22C0                       		move.l	d0,(a1)+
00007D36 51C9 FFDC                  		dbf	d1,@blockLoop
00007D3A 4E75                       		rts
00007D3C                            
00007D3C                            ; ---------------------------------------------------------------------------
00007D3C                            ; Spring Yard Zone background layer deformation	code
00007D3C                            ; ---------------------------------------------------------------------------
00007D3C                            
00007D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D3C                            
00007D3C                            
00007D3C                            Deform_SYZ:
00007D3C                            	; vertical scrolling
00007D3C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D40 48C5                       		ext.l	d5
00007D42 E985                       		asl.l	#4,d5
00007D44 2205                       		move.l	d5,d1
00007D46 E385                       		asl.l	#1,d5
00007D48 DA81                       		add.l	d1,d5
00007D4A 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D4E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D54                            	; calculate background scroll buffer
00007D54 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D58 3438 F700                  		move.w	(v_screenposx).w,d2
00007D5C 4442                       		neg.w	d2
00007D5E 3002                       		move.w	d2,d0
00007D60 E640                       		asr.w	#3,d0
00007D62 9042                       		sub.w	d2,d0
00007D64 48C0                       		ext.l	d0
00007D66 E780                       		asl.l	#3,d0
00007D68 81FC 0008                  		divs.w	#8,d0
00007D6C 48C0                       		ext.l	d0
00007D6E E980                       		asl.l	#4,d0
00007D70 E180                       		asl.l	#8,d0
00007D72 7600                       		moveq	#0,d3
00007D74 3602                       		move.w	d2,d3
00007D76 E243                       		asr.w	#1,d3
00007D78 323C 0007                  		move.w	#7,d1
00007D7C                            	@cloudLoop:		
00007D7C 32C3                       		move.w	d3,(a1)+
00007D7E 4843                       		swap	d3
00007D80 D680                       		add.l	d0,d3
00007D82 4843                       		swap	d3
00007D84 51C9 FFF6                  		dbf	d1,@cloudLoop
00007D88                            
00007D88 3002                       		move.w	d2,d0
00007D8A E640                       		asr.w	#3,d0
00007D8C 323C 0004                  		move.w	#4,d1
00007D90                            	@mountainLoop:		
00007D90 32C0                       		move.w	d0,(a1)+
00007D92 51C9 FFFC                  		dbf	d1,@mountainLoop
00007D96                            
00007D96 3002                       		move.w	d2,d0
00007D98 E440                       		asr.w	#2,d0
00007D9A 323C 0005                  		move.w	#5,d1
00007D9E                            	@buildingLoop:		
00007D9E 32C0                       		move.w	d0,(a1)+
00007DA0 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DA4                            
00007DA4 3002                       		move.w	d2,d0
00007DA6 3202                       		move.w	d2,d1
00007DA8 E241                       		asr.w	#1,d1
00007DAA 9041                       		sub.w	d1,d0
00007DAC 48C0                       		ext.l	d0
00007DAE E980                       		asl.l	#4,d0
00007DB0 81FC 000E                  		divs.w	#$E,d0
00007DB4 48C0                       		ext.l	d0
00007DB6 E980                       		asl.l	#4,d0
00007DB8 E180                       		asl.l	#8,d0
00007DBA 7600                       		moveq	#0,d3
00007DBC 3602                       		move.w	d2,d3
00007DBE E243                       		asr.w	#1,d3
00007DC0 323C 000D                  		move.w	#$D,d1
00007DC4                            	@bushLoop:		
00007DC4 32C3                       		move.w	d3,(a1)+
00007DC6 4843                       		swap	d3
00007DC8 D680                       		add.l	d0,d3
00007DCA 4843                       		swap	d3
00007DCC 51C9 FFF6                  		dbf	d1,@bushLoop
00007DD0                            
00007DD0 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007DD4 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007DD8 3400                       		move.w	d0,d2
00007DDA 0240 01F0                  		andi.w	#$1F0,d0
00007DDE E648                       		lsr.w	#3,d0
00007DE0 45F2 0000                  		lea	(a2,d0),a2
00007DE4 6000 FF12                  		bra.w	Bg_Scroll_X
00007DE8                            ; End of function Deform_SYZ
00007DE8                            
00007DE8                            ; ---------------------------------------------------------------------------
00007DE8                            ; Scrap	Brain Zone background layer deformation	code
00007DE8                            ; ---------------------------------------------------------------------------
00007DE8                            
00007DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE8                            
00007DE8                            
00007DE8                            Deform_SBZ:
00007DE8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007DEC 48C4                       		ext.l	d4
00007DEE ED84                       		asl.l	#6,d4
00007DF0 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007DF4 48C5                       		ext.l	d5
00007DF6 E985                       		asl.l	#4,d5
00007DF8 E385                       		asl.l	#1,d5
00007DFA 6100 0000                  		bsr.w	BGScroll_XY
00007DFE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E04 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E08 323C 00DF                  		move.w	#223,d1
00007E0C 3038 F700                  		move.w	(v_screenposx).w,d0
00007E10 4440                       		neg.w	d0
00007E12 4840                       		swap	d0
00007E14 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E18 4440                       		neg.w	d0
00007E1A                            
00007E1A                            loc_6576:
00007E1A 22C0                       		move.l	d0,(a1)+
00007E1C 51C9 FFFC                  		dbf	d1,loc_6576
00007E20 4E75                       		rts	
00007E22                            ;-------------------------------------------------------------------------------
00007E22                            Deform_SBZ2:;loc_68A2:
00007E22 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E26 48C4                       		ext.l	d4
00007E28 ED84                       		asl.l	#6,d4
00007E2A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E2E 48C5                       		ext.l	d5
00007E30 E985                       		asl.l	#4,d5
00007E32 E385                       		asl.l	#1,d5
00007E34 6100 0000                  		bsr.w	BGScroll_XY
00007E38 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E3E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E42 323C 00DF                  		move.w	#223,d1
00007E46 3038 F700                  		move.w	(v_screenposx).w,d0
00007E4A 4440                       		neg.w	d0
00007E4C 4840                       		swap	d0
00007E4E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E52 4440                       		neg.w	d0
00007E54                            
00007E54                            loc_6577:
00007E54 22C0                       		move.l	d0,(a1)+
00007E56 51C9 FFFC                  		dbf	d1,loc_6577
00007E5A 4E75                       		rts	
00007E5C                            
00007E5C                            ; ---------------------------------------------------------------------------
00007E5C                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007E5C                            ; ---------------------------------------------------------------------------
00007E5C                            
00007E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E5C                            
00007E5C                            
00007E5C                            ScrollHoriz:
00007E5C 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007E60 6100                       		bsr.s	MoveScreenHoriz
00007E62 3038 F700                  		move.w	(v_screenposx).w,d0
00007E66 0240 0010                  		andi.w	#$10,d0
00007E6A 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007E6E B300                       		eor.b	d1,d0
00007E70 6600                       		bne.s	@return
00007E72 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007E78 3038 F700                  		move.w	(v_screenposx).w,d0
00007E7C 9044                       		sub.w	d4,d0		; compare new with old screen position
00007E7E 6A00                       		bpl.s	@scrollRight
00007E80                            
00007E80 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007E86 4E75                       		rts	
00007E88                            
00007E88                            	@scrollRight:
00007E88 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007E8E                            
00007E8E                            	@return:
00007E8E 4E75                       		rts	
00007E90                            ; End of function ScrollHoriz
00007E90                            
00007E90                            
00007E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E90                            
00007E90                            MoveScreenHoriz:
00007E90 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007E94 6700 0000                  		beq.w	@cont		
00007E98 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007E9E                            		
00007E9E                            	@cont:		
00007E9E 3038 D008                          move.w    (v_player+obX).w,d0
00007EA2 9078 F700                          sub.w    (v_screenposx).w,d0 ; Sonic's distance from left edge of screen
00007EA6 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007EAA 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007EAC 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007EB0 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007EB2 4278 F73A                          clr.w    (v_scrshiftx).w
00007EB6 4E75                               rts 
00007EB8                            ; ===========================================================================
00007EB8                            
00007EB8                            SH_AheadOfMid:
00007EB8 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007EBC 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007EBE 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007EC2                            
00007EC2                                SH_Ahead16:
00007EC2 D078 F700                          add.w    (v_screenposx).w,d0
00007EC6 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ECA 6D00                               blt.s    SH_SetScreen
00007ECC 3038 F72A                          move.w    (v_limitright2).w,d0
00007ED0                            
00007ED0                            SH_SetScreen:
00007ED0 3200                               move.w    d0,d1
00007ED2 9278 F700                          sub.w    (v_screenposx).w,d1
00007ED6 E141                               asl.w    #8,d1
00007ED8 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007EDC 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007EE0 4E75                               rts 
00007EE2                            ; ===========================================================================
00007EE2                            
00007EE2                            SH_BehindMid:
00007EE2 D078 F700                          add.w    (v_screenposx).w,d0
00007EE6 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007EEA 6EE4                               bgt.s    SH_SetScreen
00007EEC 3038 F728                          move.w    (v_limitleft2).w,d0
00007EF0 60DE                               bra.s    SH_SetScreen
00007EF2                            ; End of function MoveScreenHoriz
00007EF2                            
00007EF2                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007EF2                            
00007EF2                            MoveScreenHorizEXT:
00007EF2 3038 D008                          move.w    (v_player+obX).w,d0
00007EF6 9078 F700                          sub.w    (v_screenposx).w,d0 ; Sonic's distance from left edge of screen
00007EFA 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007EFE 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007F00 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007F02 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007F04                            ; ===========================================================================
00007F04                            
00007F04                            SHEXT_ProperlyFramed:
00007F04 4278 F73A                          clr.w    (v_scrshiftx).w
00007F08 4E75                               rts 
00007F0A                            ; ===========================================================================
00007F0A                            
00007F0A                            SHEXT_AheadOfMid:
00007F0A 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F0E 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007F10 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F14                            
00007F14                            SHEXT_Ahead16:
00007F14 D078 F700                          add.w    (v_screenposx).w,d0
00007F18 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F1C 6D00                               blt.s    SHEXT_SetScreen
00007F1E 3038 F72A                          move.w    (v_limitright2).w,d0
00007F22                            
00007F22                            SHEXT_SetScreen:
00007F22 3200                               move.w    d0,d1
00007F24 9278 F700                          sub.w    (v_screenposx).w,d1
00007F28 E141                               asl.w    #8,d1
00007F2A 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F2E 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F32 4E75                               rts
00007F34                            
00007F34                            ; ===========================================================================
00007F34                            
00007F34                            SHEXT_BehindMid:
00007F34 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007F38 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007F3A 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007F3E                            
00007F3E                            SHEXT_Behind16:
00007F3E D078 F700                          add.w    (v_screenposx).w,d0
00007F42 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007F46 6EDA                               bgt.s    SHEXT_SetScreen
00007F48 3038 F728                          move.w    (v_limitleft2).w,d0
00007F4C 60D4                               bra.s    SHEXT_SetScreen
00007F4E                                  
00007F4E                            ; End of function MoveScreenHoriz
00007F4E                            
00007F4E                            
00007F4E                            ; ---------------------------------------------------------------------------
00007F4E                            ; Subroutine to	scroll the level vertically as Sonic moves
00007F4E                            ; ---------------------------------------------------------------------------
00007F4E                            
00007F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F4E                            
00007F4E                            
00007F4E                            ScrollVertical:
00007F4E 7200                       		moveq	#0,d1
00007F50 3038 D00C                  		move.w	(v_player+obY).w,d0
00007F54 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007F58 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007F5E 6700                       		beq.s	SV_NotRolling	; if not, branch
00007F60 5B40                       		subq.w	#5,d0
00007F62                            
00007F62                            	SV_NotRolling:
00007F62 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007F68 6700                       		beq.s	loc_664A	; if not, branch
00007F6A                            
00007F6A 0640 0020                  		addi.w	#32,d0
00007F6E 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007F72 6500                       		bcs.s	loc_6696
00007F74 0440 0040                  		subi.w	#64,d0
00007F78 6400                       		bcc.s	loc_6696
00007F7A 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007F7E 6600                       		bne.s	loc_66A8
00007F80 6000                       		bra.s	loc_6656
00007F82                            ; ===========================================================================
00007F82                            
00007F82                            loc_664A:
00007F82 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007F86 6600                       		bne.s	loc_665C
00007F88 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007F8C 6600                       		bne.s	loc_66A8
00007F8E                            
00007F8E                            loc_6656:
00007F8E 4278 F73C                  		clr.w	(v_scrshifty).w
00007F92 4E75                       		rts	
00007F94                            ; ===========================================================================
00007F94                            
00007F94                            loc_665C:
00007F94 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007F9A 6600                       		bne.s	loc_6684
00007F9C 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007FA0 6A00                       		bpl.s	loc_666C
00007FA2 4441                       		neg.w	d1
00007FA4                            
00007FA4                            loc_666C:
00007FA4 0C41 0800                  		cmpi.w	#$800,d1
00007FA8 6400                       		bcc.s	loc_6696
00007FAA 323C 0600                  		move.w	#$600,d1
00007FAE 0C40 0006                  		cmpi.w	#6,d0
00007FB2 6E00                       		bgt.s	loc_66F6
00007FB4 0C40 FFFA                  		cmpi.w	#-6,d0
00007FB8 6D00                       		blt.s	loc_66C0
00007FBA 6000                       		bra.s	loc_66AE
00007FBC                            ; ===========================================================================
00007FBC                            
00007FBC                            loc_6684:
00007FBC 323C 0200                  		move.w	#$200,d1
00007FC0 0C40 0002                  		cmpi.w	#2,d0
00007FC4 6E00                       		bgt.s	loc_66F6
00007FC6 0C40 FFFE                  		cmpi.w	#-2,d0
00007FCA 6D00                       		blt.s	loc_66C0
00007FCC 6000                       		bra.s	loc_66AE
00007FCE                            ; ===========================================================================
00007FCE                            
00007FCE                            loc_6696:
00007FCE 323C 1000                  		move.w	#$1000,d1
00007FD2 0C40 0010                  		cmpi.w	#$10,d0
00007FD6 6E00                       		bgt.s	loc_66F6
00007FD8 0C40 FFF0                  		cmpi.w	#-$10,d0
00007FDC 6D00                       		blt.s	loc_66C0
00007FDE 6000                       		bra.s	loc_66AE
00007FE0                            ; ===========================================================================
00007FE0                            
00007FE0                            loc_66A8:
00007FE0 7000                       		moveq	#0,d0
00007FE2 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007FE6                            
00007FE6                            loc_66AE:
00007FE6 7200                       		moveq	#0,d1
00007FE8 3200                       		move.w	d0,d1
00007FEA D278 F704                  		add.w	(v_screenposy).w,d1
00007FEE 4A40                       		tst.w	d0
00007FF0 6A00 0000                  		bpl.w	loc_6700
00007FF4 6000 0000                  		bra.w	loc_66CC
00007FF8                            ; ===========================================================================
00007FF8                            
00007FF8                            loc_66C0:
00007FF8 4441                       		neg.w	d1
00007FFA 48C1                       		ext.l	d1
00007FFC E181                       		asl.l	#8,d1
00007FFE D2B8 F704                  		add.l	(v_screenposy).w,d1
00008002 4841                       		swap	d1
00008004                            
00008004                            loc_66CC:
00008004 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00008008 6E00                       		bgt.s	loc_6724
0000800A 0C41 FF00                  		cmpi.w	#-$100,d1
0000800E 6E00                       		bgt.s	loc_66F0
00008010 0241 07FF                  		andi.w	#$7FF,d1
00008014 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0000801A 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00008020 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00008026 6000                       		bra.s	loc_6724
00008028                            ; ===========================================================================
00008028                            
00008028                            loc_66F0:
00008028 3238 F72C                  		move.w	(v_limittop2).w,d1
0000802C 6000                       		bra.s	loc_6724
0000802E                            ; ===========================================================================
0000802E                            
0000802E                            loc_66F6:
0000802E 48C1                       		ext.l	d1
00008030 E181                       		asl.l	#8,d1
00008032 D2B8 F704                  		add.l	(v_screenposy).w,d1
00008036 4841                       		swap	d1
00008038                            
00008038                            loc_6700:
00008038 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
0000803C 6D00                       		blt.s	loc_6724
0000803E 0441 0800                  		subi.w	#$800,d1
00008042 6500                       		bcs.s	loc_6720
00008044 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0000804A 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00008050 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00008056 6000                       		bra.s	loc_6724
00008058                            ; ===========================================================================
00008058                            
00008058                            loc_6720:
00008058 3238 F72E                  		move.w	(v_limitbtm2).w,d1
0000805C                            
0000805C                            loc_6724:
0000805C 3838 F704                  		move.w	(v_screenposy).w,d4
00008060 4841                       		swap	d1
00008062 2601                       		move.l	d1,d3
00008064 96B8 F704                  		sub.l	(v_screenposy).w,d3
00008068 E09B                       		ror.l	#8,d3
0000806A 31C3 F73C                  		move.w	d3,(v_scrshifty).w
0000806E 21C1 F704                  		move.l	d1,(v_screenposy).w
00008072 3038 F704                  		move.w	(v_screenposy).w,d0
00008076 0240 0010                  		andi.w	#$10,d0
0000807A 1238 F74B                  		move.b	(v_fg_yblock).w,d1
0000807E B300                       		eor.b	d1,d0
00008080 6600                       		bne.s	@return
00008082 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00008088 3038 F704                  		move.w	(v_screenposy).w,d0
0000808C 9044                       		sub.w	d4,d0
0000808E 6A00                       		bpl.s	@scrollBottom
00008090 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00008096 4E75                       		rts	
00008098                            ; ===========================================================================
00008098                            
00008098                            	@scrollBottom:
00008098 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
0000809E                            
0000809E                            	@return:
0000809E 4E75                       		rts	
000080A0                            ; End of function ScrollVertical
000080A0                            
000080A0                            
000080A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A0                            ; Scrolls background and sets redraw flags.
000080A0                            ; d4 - background x offset * $10000
000080A0                            ; d5 - background y offset * $10000
000080A0                            
000080A0                            BGScroll_XY:
000080A0 2438 F708                  		move.l	(v_bgscreenposx).w,d2
000080A4 2002                       		move.l	d2,d0
000080A6 D084                       		add.l	d4,d0
000080A8 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
000080AC 2200                       		move.l	d0,d1
000080AE 4841                       		swap	d1
000080B0 0241 0010                  		andi.w	#$10,d1
000080B4 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
000080B8 B701                       		eor.b	d3,d1
000080BA 6600                       		bne.s	BGScroll_YRelative	; no change in Y
000080BC 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
000080C2 9082                       		sub.l	d2,d0	; new - old
000080C4 6A00                       		bpl.s	@scrollRight
000080C6 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
000080CC 6000                       		bra.s	BGScroll_YRelative
000080CE                            	@scrollRight:
000080CE 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
000080D4                            BGScroll_YRelative:
000080D4 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000080D8 2003                       		move.l	d3,d0
000080DA D085                       		add.l	d5,d0
000080DC 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000080E0 2200                       		move.l	d0,d1
000080E2 4841                       		swap	d1
000080E4 0241 0010                  		andi.w	#$10,d1
000080E8 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000080EC B501                       		eor.b	d2,d1
000080EE 6600                       		bne.s	@return
000080F0 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000080F6 9083                       		sub.l	d3,d0
000080F8 6A00                       		bpl.s	@scrollBottom
000080FA 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008100 4E75                       		rts
00008102                            	@scrollBottom:
00008102 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008108                            	@return:
00008108 4E75                       		rts
0000810A                            ; End of function BGScroll_XY
0000810A                            
0000810A                            Bg_Scroll_Y:
0000810A 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
0000810E 2003                       		move.l	d3,d0
00008110 D085                       		add.l	d5,d0
00008112 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008116 2200                       		move.l	d0,d1
00008118 4841                       		swap	d1
0000811A 0241 0010                  		andi.w	#$10,d1
0000811E 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008122 B501                       		eor.b	d2,d1
00008124 6600                       		bne.s	@return
00008126 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000812C 9083                       		sub.l	d3,d0
0000812E 6A00                       		bpl.s	@scrollBottom
00008130 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00008136 4E75                       		rts
00008138                            	@scrollBottom:
00008138 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
0000813E                            	@return:
0000813E 4E75                       		rts
00008140                            
00008140                            
00008140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008140                            
00008140                            
00008140                            BGScroll_YAbsolute:
00008140 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00008144 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00008148 3200                       		move.w	d0,d1
0000814A 0241 0010                  		andi.w	#$10,d1
0000814E 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008152 B501                       		eor.b	d2,d1
00008154 6600                       		bne.s	@return
00008156 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000815C 9043                       		sub.w	d3,d0
0000815E 6A00                       		bpl.s	@scrollBottom
00008160 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008166 4E75                       		rts
00008168                            	@scrollBottom:
00008168 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
0000816E                            	@return:
0000816E 4E75                       		rts
00008170                            ; End of function BGScroll_YAbsolute
00008170                            
00008170                            
00008170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008170                            ; d6 - bit to set for redraw
00008170                            
00008170                            BGScroll_Block1:
00008170 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008174 2002                       		move.l	d2,d0
00008176 D084                       		add.l	d4,d0
00008178 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
0000817C 2200                       		move.l	d0,d1
0000817E 4841                       		swap	d1
00008180 0241 0010                  		andi.w	#$10,d1
00008184 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008188 B701                       		eor.b	d3,d1
0000818A 6600                       		bne.s	@return
0000818C 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008192 9082                       		sub.l	d2,d0
00008194 6A00                       		bpl.s	@scrollRight
00008196 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000819A 6000                       		bra.s	@return
0000819C                            	@scrollRight:
0000819C 5206                       		addq.b	#1,d6
0000819E 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
000081A2                            	@return:
000081A2 4E75                       		rts
000081A4                            ; End of function BGScroll_Block1
000081A4                            
000081A4                            
000081A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A4                            
000081A4                            
000081A4                            BGScroll_Block2:
000081A4 2438 F710                  		move.l	(v_bg2screenposx).w,d2
000081A8 2002                       		move.l	d2,d0
000081AA D084                       		add.l	d4,d0
000081AC 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
000081B0 2200                       		move.l	d0,d1
000081B2 4841                       		swap	d1
000081B4 0241 0010                  		andi.w	#$10,d1
000081B8 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
000081BC B701                       		eor.b	d3,d1
000081BE 6600                       		bne.s	@return
000081C0 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
000081C6 9082                       		sub.l	d2,d0
000081C8 6A00                       		bpl.s	@scrollRight
000081CA 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000081CE 6000                       		bra.s	@return
000081D0                            	@scrollRight:
000081D0 5206                       		addq.b	#1,d6
000081D2 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000081D6                            	@return:
000081D6 4E75                       		rts
000081D8                            ;-------------------------------------------------------------------------------
000081D8                            BGScroll_Block3:
000081D8 2438 F718                  		move.l	(v_bg3screenposx).w,d2
000081DC 2002                       		move.l	d2,d0
000081DE D084                       		add.l	d4,d0
000081E0 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
000081E4 2200                       		move.l	d0,d1
000081E6 4841                       		swap	d1
000081E8 0241 0010                  		andi.w	#$10,d1
000081EC 1638 F750                  		move.b	(v_bg3_xblock).w,d3
000081F0 B701                       		eor.b	d3,d1
000081F2 6600                       		bne.s	@return
000081F4 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
000081FA 9082                       		sub.l	d2,d0
000081FC 6A00                       		bpl.s	@scrollRight
000081FE 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008202 6000                       		bra.s	@return
00008204                            	@scrollRight:
00008204 5206                       		addq.b	#1,d6
00008206 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
0000820A                            	@return:
0000820A 4E75                       		rts
0000820A 4E75                       		rts
0000820C                            
0000820C                            
0000820C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000820C                            
0000820C                            ; sub_6886:
0000820C                            LoadTilesAsYouMove_BGOnly:
0000820C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008212 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008218 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
0000821C 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008220 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008224 343C 6000                  		move.w	#$6000,d2
00008228 6100 0000                  		bsr.w	DrawBGScrollBlock1
0000822C 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00008230 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00008234 6000 0000                  		bra.w	DrawBGScrollBlock2
00008238                            ; End of function sub_6886
00008238                            
00008238                            ; ---------------------------------------------------------------------------
00008238                            ; Subroutine to	display	correct	tiles as you move
00008238                            ; ---------------------------------------------------------------------------
00008238                            
00008238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008238                            
00008238                            
00008238                            LoadTilesAsYouMove:
00008238 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000823E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008244                            		; First, update the background
00008244 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00008248 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
0000824C 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008250 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00008254 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008258 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
0000825C 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008260 6100 0000                  		bsr.w	DrawBGScrollBlock2
00008264                            		; REV01 added a third scroll block, though, technically,
00008264                            		; the RAM for it was already there in REV00
00008264 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00008268 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
0000826C 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008270                            		; Then, update the foreground
00008270 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00008274 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00008278 49F8 A400                  		lea	(v_lvllayout).w,a4
0000827C 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00008280                            		; The FG's update function is inlined here
00008280 4A12                       		tst.b	(a2)
00008282 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00008284 0892 0000                  		bclr	#0,(a2)
00008288 6700                       		beq.s	loc_6908
0000828A                            		; Draw new tiles at the top
0000828A 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
0000828C 7AF0                       		moveq	#-16,d5 ; X coordinate
0000828E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008292 78F0                       		moveq	#-16,d4 ; Y coordinate
00008294 7AF0                       		moveq	#-16,d5 ; X coordinate
00008296 6100 0000                  		bsr.w	DrawBlocks_LR
0000829A                            
0000829A                            loc_6908:
0000829A 0892 0001                  		bclr	#1,(a2)
0000829E 6700                       		beq.s	loc_6922
000082A0                            		; Draw new tiles at the bottom
000082A0 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
000082A4 7AF0                       		moveq	#-16,d5
000082A6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082AA 383C 00E0                  		move.w	#224,d4
000082AE 7AF0                       		moveq	#-16,d5
000082B0 6100 0000                  		bsr.w	DrawBlocks_LR
000082B4                            
000082B4                            loc_6922:
000082B4 0892 0002                  		bclr	#2,(a2)
000082B8 6700                       		beq.s	loc_6938
000082BA                            		; Draw new tiles on the left
000082BA 78F0                       		moveq	#-16,d4
000082BC 7AF0                       		moveq	#-16,d5
000082BE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082C2 78F0                       		moveq	#-16,d4
000082C4 7AF0                       		moveq	#-16,d5
000082C6 6100 0000                  		bsr.w	DrawBlocks_TB
000082CA                            
000082CA                            loc_6938:
000082CA 0892 0003                  		bclr	#3,(a2)
000082CE 6700                       		beq.s	locret_6952
000082D0                            		; Draw new tiles on the right
000082D0 78F0                       		moveq	#-16,d4
000082D2 3A3C 0140                  		move.w	#320,d5
000082D6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082DA 78F0                       		moveq	#-16,d4
000082DC 3A3C 0140                  		move.w	#320,d5
000082E0 6100 0000                  		bsr.w	DrawBlocks_TB
000082E4                            
000082E4                            locret_6952:
000082E4 4E75                       		rts	
000082E6                            ; End of function LoadTilesAsYouMove
000082E6                            
000082E6                            
000082E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082E6                            
000082E6                            ; sub_6954:
000082E6                            DrawBGScrollBlock1:
000082E6 4A12                       		tst.b	(a2)
000082E8 6700 0000                  		beq.w	locret_69F2
000082EC 0892 0000                  		bclr	#0,(a2)
000082F0 6700                       		beq.s	loc_6972
000082F2                            		; Draw new tiles at the top
000082F2 78F0                       		moveq	#-16,d4
000082F4 7AF0                       		moveq	#-16,d5
000082F6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000082FA 78F0                       		moveq	#-16,d4
000082FC 7AF0                       		moveq	#-16,d5
000082FE 6100 0000                  			bsr.w	DrawBlocks_LR
00008302                            
00008302                            loc_6972:
00008302 0892 0001                  		bclr	#1,(a2)
00008306 6700                       		beq.s	loc_698E
00008308                            		; Draw new tiles at the top
00008308 383C 00E0                  		move.w	#224,d4
0000830C 7AF0                       		moveq	#-16,d5
0000830E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008312 383C 00E0                  		move.w	#224,d4
00008316 7AF0                       		moveq	#-16,d5
00008318 6100 0000                  			bsr.w	DrawBlocks_LR
0000831C                            
0000831C                            loc_698E:
0000831C 0892 0002                  		bclr	#2,(a2)
00008320                            
00008320                            
00008320 6700                       			beq.s	locj_6D56
00008322                            			; Draw new tiles on the left
00008322 78F0                       			moveq	#-16,d4
00008324 7AF0                       			moveq	#-16,d5
00008326 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000832A 78F0                       			moveq	#-16,d4
0000832C 7AF0                       			moveq	#-16,d5
0000832E 6100 0000                  			bsr.w	DrawBlocks_TB
00008332                            	locj_6D56:
00008332                            
00008332 0892 0003                  			bclr	#3,(a2)
00008336 6700                       			beq.s	locj_6D70
00008338                            			; Draw new tiles on the right
00008338 78F0                       			moveq	#-16,d4
0000833A 3A3C 0140                  			move.w	#320,d5
0000833E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008342 78F0                       			moveq	#-16,d4
00008344 3A3C 0140                  			move.w	#320,d5
00008348 6100 0000                  			bsr.w	DrawBlocks_TB
0000834C                            	locj_6D70:
0000834C                            
0000834C 0892 0004                  			bclr	#4,(a2)
00008350 6700                       			beq.s	locj_6D88
00008352                            			; Draw entire row at the top
00008352 78F0                       			moveq	#-16,d4
00008354 7A00                       			moveq	#0,d5
00008356 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000835A 78F0                       			moveq	#-16,d4
0000835C 7A00                       			moveq	#0,d5
0000835E 7C1F                       			moveq	#(512/16)-1,d6
00008360 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008364                            	locj_6D88:
00008364                            
00008364 0892 0005                  			bclr	#5,(a2)
00008368 6700                       			beq.s	locret_69F2
0000836A                            			; Draw entire row at the bottom
0000836A 383C 00E0                  			move.w	#224,d4
0000836E 7A00                       			moveq	#0,d5
00008370 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008374 383C 00E0                  			move.w	#224,d4
00008378 7A00                       			moveq	#0,d5
0000837A 7C1F                       			moveq	#(512/16)-1,d6
0000837C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008380                            
00008380                            locret_69F2:
00008380 4E75                       		rts	
00008382                            ; End of function DrawBGScrollBlock1
00008382                            
00008382                            
00008382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008382                            
00008382                            ; Essentially, this draws everything that isn't scroll block 1
00008382                            ; sub_69F4:
00008382                            DrawBGScrollBlock2:
00008382                            
00008382 4A12                       			tst.b	(a2)
00008384 6700 0000                  			beq.w	locj_6DF2
00008388 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
0000838E 6700 0000                  			beq.w	Draw_SBz
00008392 0892 0000                  			bclr	#0,(a2)
00008396 6700                       			beq.s	locj_6DD2
00008398                            			; Draw new tiles on the left
00008398 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
0000839C 7AF0                       			moveq	#-16,d5
0000839E 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083A2 383C 0070                  			move.w	#224/2,d4
000083A6 7AF0                       			moveq	#-16,d5
000083A8 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
000083AA 6100 0000                  			bsr.w	DrawBlocks_TB_2
000083AE                            	locj_6DD2:
000083AE 0892 0001                  			bclr	#1,(a2)
000083B2 6700                       			beq.s	locj_6DF2
000083B4                            			; Draw new tiles on the right
000083B4 383C 0070                  			move.w	#224/2,d4
000083B8 3A3C 0140                  			move.w	#320,d5
000083BC 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083C0 383C 0070                  			move.w	#224/2,d4
000083C4 3A3C 0140                  			move.w	#320,d5
000083C8 7C02                       			moveq	#3-1,d6
000083CA 6100 0000                  			bsr.w	DrawBlocks_TB_2
000083CE                            	locj_6DF2:
000083CE 4E75                       			rts
000083D0                            ;===============================================================================
000083D0                            	locj_6DF4:
000083D0 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
000083E0 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000083F0 0200                       			dc.b $02,$00						
000083F2                            ;===============================================================================
000083F2                            	Draw_SBz:
000083F2 78F0                       			moveq	#-16,d4
000083F4 0892 0000                  			bclr	#0,(a2)
000083F8 6600                       			bne.s	locj_6E28
000083FA 0892 0001                  			bclr	#1,(a2)
000083FE 6700                       			beq.s	locj_6E72
00008400 383C 00E0                  			move.w	#224,d4
00008404                            	locj_6E28:
00008404 41F9 0000 83D1             			lea	(locj_6DF4+1).l,a0
0000840A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000840E D044                       			add.w	d4,d0
00008410 0240 01F0                  			andi.w	#$1F0,d0
00008414 E848                       			lsr.w	#4,d0
00008416 1030 0000                  			move.b	(a0,d0.w),d0
0000841A 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00008420 3673 0000                  			movea.w	(a3,d0.w),a3
00008424 6700                       			beq.s	locj_6E5E
00008426 7AF0                       			moveq	#-16,d5
00008428 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000842C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008430 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008434 6100 0000                  			bsr.w	DrawBlocks_LR
00008438 6000                       			bra.s	locj_6E72
0000843A                            ;===============================================================================
0000843A                            	locj_6E5E:
0000843A 7A00                       			moveq	#0,d5
0000843C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008440 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008444 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008448 7C1F                       			moveq	#(512/16)-1,d6
0000844A 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000844E                            	locj_6E72:
0000844E 4A12                       			tst.b	(a2)
00008450 6600                       			bne.s	locj_6E78
00008452 4E75                       			rts
00008454                            ;===============================================================================			
00008454                            	locj_6E78:
00008454 78F0                       			moveq	#-16,d4
00008456 7AF0                       			moveq	#-16,d5
00008458 1012                       			move.b	(a2),d0
0000845A 0200 00A8                  			andi.b	#$A8,d0
0000845E 6700                       			beq.s	locj_6E8C
00008460 E208                       			lsr.b	#1,d0
00008462 1480                       			move.b	d0,(a2)
00008464 3A3C 0140                  			move.w	#320,d5
00008468                            	locj_6E8C:
00008468 41F9 0000 83D0             			lea	(locj_6DF4).l,a0
0000846E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008472 0240 01F0                  			andi.w	#$1F0,d0
00008476 E848                       			lsr.w	#4,d0
00008478 41F0 0000                  			lea	(a0,d0.w),a0
0000847C 6000 0000                  			bra.w	locj_6FEC						
00008480                            ;===============================================================================
00008480                            
00008480                            
00008480                            	; locj_6EA4:
00008480                            	DrawBGScrollBlock3:
00008480 4A12                       			tst.b	(a2)
00008482 6700 0000                  			beq.w	locj_6EF0
00008486 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000848C 6700 0000                  			beq.w	Draw_Mz
00008490 0892 0000                  			bclr	#0,(a2)
00008494 6700                       			beq.s	locj_6ED0
00008496                            			; Draw new tiles on the left
00008496 383C 0040                  			move.w	#$40,d4
0000849A 7AF0                       			moveq	#-16,d5
0000849C 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084A0 383C 0040                  			move.w	#$40,d4
000084A4 7AF0                       			moveq	#-16,d5
000084A6 7C02                       			moveq	#3-1,d6
000084A8 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084AC                            	locj_6ED0:
000084AC 0892 0001                  			bclr	#1,(a2)
000084B0 6700                       			beq.s	locj_6EF0
000084B2                            			; Draw new tiles on the right
000084B2 383C 0040                  			move.w	#$40,d4
000084B6 3A3C 0140                  			move.w	#320,d5
000084BA 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084BE 383C 0040                  			move.w	#$40,d4
000084C2 3A3C 0140                  			move.w	#320,d5
000084C6 7C02                       			moveq	#3-1,d6
000084C8 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084CC                            	locj_6EF0:
000084CC 4E75                       			rts
000084CE                            	locj_6EF2:
000084CE 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000084DE 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000084EE 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000084FE 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000850E 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000851E 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000852E 0200                       			dc.b $02,$00
00008530                            ;===============================================================================
00008530                            	Draw_Mz:
00008530 78F0                       			moveq	#-16,d4
00008532 0892 0000                  			bclr	#0,(a2)
00008536 6600                       			bne.s	locj_6F66
00008538 0892 0001                  			bclr	#1,(a2)
0000853C 6700                       			beq.s	locj_6FAE
0000853E 383C 00E0                  			move.w	#224,d4
00008542                            	locj_6F66:
00008542 41F9 0000 84CF             			lea	(locj_6EF2+1).l,a0
00008548 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000854C 0440 0200                  			subi.w	#$200,d0
00008550 D044                       			add.w	d4,d0
00008552 0240 07F0                  			andi.w	#$7F0,d0
00008556 E848                       			lsr.w	#4,d0
00008558 1030 0000                  			move.b	(a0,d0.w),d0
0000855C 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008560 6700                       			beq.s	locj_6F9A
00008562 7AF0                       			moveq	#-16,d5
00008564 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008568 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000856C 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008570 6100 0000                  			bsr.w	DrawBlocks_LR
00008574 6000                       			bra.s	locj_6FAE
00008576                            ;===============================================================================
00008576                            	locj_6F9A:
00008576 7A00                       			moveq	#0,d5
00008578 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000857C 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008580 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008584 7C1F                       			moveq	#(512/16)-1,d6
00008586 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000858A                            	locj_6FAE:
0000858A 4A12                       			tst.b	(a2)
0000858C 6600                       			bne.s	locj_6FB4
0000858E 4E75                       			rts
00008590                            ;===============================================================================			
00008590                            	locj_6FB4:
00008590 78F0                       			moveq	#-16,d4
00008592 7AF0                       			moveq	#-16,d5
00008594 1012                       			move.b	(a2),d0
00008596 0200 00A8                  			andi.b	#$A8,d0
0000859A 6700                       			beq.s	locj_6FC8
0000859C E208                       			lsr.b	#1,d0
0000859E 1480                       			move.b	d0,(a2)
000085A0 3A3C 0140                  			move.w	#320,d5
000085A4                            	locj_6FC8:
000085A4 41F9 0000 84CE             			lea	(locj_6EF2).l,a0
000085AA 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000085AE 0440 0200                  			subi.w	#$200,d0
000085B2 0240 07F0                  			andi.w	#$7F0,d0
000085B6 E848                       			lsr.w	#4,d0
000085B8 41F0 0000                  			lea	(a0,d0.w),a0
000085BC 6000 0000                  			bra.w	locj_6FEC
000085C0                            ;===============================================================================			
000085C0                            	locj_6FE4:
000085C0 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000085C8                            	locj_6FEC:
000085C8 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000085CA 2E3C 0080 0000             			move.l	#$800000,d7
000085D0                            	locj_6FF4:			
000085D0 7000                       			moveq	#0,d0
000085D2 1018                       			move.b	(a0)+,d0
000085D4 0112                       			btst	d0,(a2)
000085D6 6700                       			beq.s	locj_701C
000085D8 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
000085DC 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000085E0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000085E4 6100 0000                  			bsr.w	GetBlockData
000085E8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000085EC 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085F0 6100 0000                  			bsr.w	DrawBlock
000085F4 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000085F8                            	locj_701C:
000085F8 0644 0010                  			addi.w	#16,d4
000085FC 51CE FFD2                  			dbf	d6,locj_6FF4
00008600 4212                       			clr.b	(a2)
00008602 4E75                       			rts			
00008604                            
00008604                            
00008604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008604                            
00008604                            ; Don't be fooled by the name: this function's for drawing from left to right
00008604                            ; when the camera's moving up or down
00008604                            ; DrawTiles_LR:
00008604                            DrawBlocks_LR:
00008604 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
00008606                            ; DrawTiles_LR_2:
00008606                            DrawBlocks_LR_2:
00008606 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
0000860C 2200                       		move.l	d0,d1
0000860E                            
0000860E                            	@loop:
0000860E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008612 6100 0000                  		bsr.w	GetBlockData
00008616 2001                       		move.l	d1,d0
00008618 6100 0000                  		bsr.w	DrawBlock
0000861C 5801                       		addq.b	#4,d1		; Two tiles ahead
0000861E 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00008622 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008626 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
0000862A 51CE FFE2                  		dbf	d6,@loop
0000862E 4E75                       		rts
00008630                            ; End of function DrawBlocks_LR
00008630                            
00008630                            ; DrawTiles_LR_3:
00008630                            DrawBlocks_LR_3:
00008630 2E3C 0080 0000             		move.l	#$800000,d7
00008636 2200                       		move.l	d0,d1
00008638                            
00008638                            	@loop:
00008638 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000863C 6100 0000                  		bsr.w	GetBlockData_2
00008640 2001                       		move.l	d1,d0
00008642 6100 0000                  		bsr.w	DrawBlock
00008646 5801                       		addq.b	#4,d1
00008648 0201 007F                  		andi.b	#$7F,d1
0000864C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008650 0645 0010                  		addi.w	#16,d5
00008654 51CE FFE2                  		dbf	d6,@loop
00008658 4E75                       		rts	
0000865A                            ; End of function DrawBlocks_LR_3
0000865A                            
0000865A                            
0000865A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000865A                            
0000865A                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000865A                            ; when the camera's moving left or right
0000865A                            ; DrawTiles_TB:
0000865A                            DrawBlocks_TB:
0000865A 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000865C                            ; DrawTiles_TB_2:
0000865C                            DrawBlocks_TB_2:
0000865C 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008662 2200                       		move.l	d0,d1
00008664                            
00008664                            	@loop:
00008664 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008668 6100 0000                  		bsr.w	GetBlockData
0000866C 2001                       		move.l	d1,d0
0000866E 6100 0000                  		bsr.w	DrawBlock
00008672 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008676 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000867A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000867E 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008682 51CE FFE0                  		dbf	d6,@loop
00008686 4E75                       		rts	
00008688                            ; End of function DrawBlocks_TB_2
00008688                            
00008688                            
00008688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008688                            
00008688                            ; Draws a block's worth of tiles
00008688                            ; Parameters:
00008688                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008688                            ; a1 = Pointer to block
00008688                            ; a5 = Pointer to VDP command port
00008688                            ; a6 = Pointer to VDP data port
00008688                            ; d0 = VRAM command to access plane
00008688                            ; d2 = VRAM plane A/B specifier
00008688                            ; d7 = Plane row delta
00008688                            ; DrawTiles:
00008688                            DrawBlock:
00008688 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000868A 4840                       		swap	d0
0000868C 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008690 6600                       		bne.s	DrawFlipY
00008692 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008696 6600                       		bne.s	DrawFlipX
00008698 2A80                       		move.l	d0,(a5)
0000869A 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
0000869C D087                       		add.l	d7,d0		; Next row
0000869E 2A80                       		move.l	d0,(a5)
000086A0 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000086A2 4E75                       		rts	
000086A4                            ; ===========================================================================
000086A4                            
000086A4                            DrawFlipX:
000086A4 2A80                       		move.l	d0,(a5)
000086A6 2819                       		move.l	(a1)+,d4
000086A8 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000086AE 4844                       		swap	d4		; Swap the tiles around
000086B0 2C84                       		move.l	d4,(a6)		; Write top two tiles
000086B2 D087                       		add.l	d7,d0		; Next row
000086B4 2A80                       		move.l	d0,(a5)
000086B6 2819                       		move.l	(a1)+,d4
000086B8 0A84 0800 0800             		eori.l	#$8000800,d4
000086BE 4844                       		swap	d4
000086C0 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000086C2 4E75                       		rts	
000086C4                            ; ===========================================================================
000086C4                            
000086C4                            DrawFlipY:
000086C4 0810 0003                  		btst	#3,(a0)
000086C8 6600                       		bne.s	DrawFlipXY
000086CA 2A80                       		move.l	d0,(a5)
000086CC 2A19                       		move.l	(a1)+,d5
000086CE 2819                       		move.l	(a1)+,d4
000086D0 0A84 1000 1000             		eori.l	#$10001000,d4
000086D6 2C84                       		move.l	d4,(a6)
000086D8 D087                       		add.l	d7,d0
000086DA 2A80                       		move.l	d0,(a5)
000086DC 0A85 1000 1000             		eori.l	#$10001000,d5
000086E2 2C85                       		move.l	d5,(a6)
000086E4 4E75                       		rts	
000086E6                            ; ===========================================================================
000086E6                            
000086E6                            DrawFlipXY:
000086E6 2A80                       		move.l	d0,(a5)
000086E8 2A19                       		move.l	(a1)+,d5
000086EA 2819                       		move.l	(a1)+,d4
000086EC 0A84 1800 1800             		eori.l	#$18001800,d4
000086F2 4844                       		swap	d4
000086F4 2C84                       		move.l	d4,(a6)
000086F6 D087                       		add.l	d7,d0
000086F8 2A80                       		move.l	d0,(a5)
000086FA 0A85 1800 1800             		eori.l	#$18001800,d5
00008700 4845                       		swap	d5
00008702 2C85                       		move.l	d5,(a6)
00008704 4E75                       		rts	
00008706                            ; End of function DrawBlocks
00008706                            
00008706                            ; ===========================================================================
00008706                            ; unused garbage
00008706                            
00008706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008706                            
00008706                            ; Gets address of block at a certain coordinate
00008706                            ; Parameters:
00008706                            ; a4 = Pointer to level layout
00008706                            ; d4 = Relative Y coordinate
00008706                            ; d5 = Relative X coordinate
00008706                            ; Returns:
00008706                            ; a0 = Address of block metadata
00008706                            ; a1 = Address of block
00008706                            ; DrawBlocks:
00008706                            GetBlockData:
00008706 DA53                       			add.w	(a3),d5
00008708                            	GetBlockData_2:
00008708 D86B 0004                  			add.w	4(a3),d4
0000870C 43F8 B000                  			lea	(v_16x16).w,a1
00008710                            		; Turn Y coordinate into index into level layout
00008710 3604                       		move.w	d4,d3
00008712 E24B                       		lsr.w	#1,d3
00008714 0243 0380                  		andi.w	#$380,d3
00008718                            		; Turn X coordinate into index into level layout
00008718 E64D                       		lsr.w	#3,d5
0000871A 3005                       		move.w	d5,d0
0000871C EA48                       		lsr.w	#5,d0
0000871E 0240 007F                  		andi.w	#$7F,d0
00008722                            		; Get chunk from level layout
00008722 D043                       		add.w	d3,d0
00008724 76FF                       		moveq	#-1,d3
00008726 1634 0000                  		move.b	(a4,d0.w),d3
0000872A 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
0000872C                            		; Turn chunk ID into index into chunk table
0000872C 5303                       		subq.b	#1,d3
0000872E 0243 007F                  		andi.w	#$7F,d3
00008732 EE5B                       		ror.w	#7,d3
00008734                            		; Turn Y coordinate into index into chunk
00008734 D844                       		add.w	d4,d4
00008736 0244 01E0                  		andi.w	#$1E0,d4
0000873A                            		; Turn X coordinate into index into chunk
0000873A 0245 001E                  		andi.w	#$1E,d5
0000873E                            		; Get block metadata from chunk
0000873E D644                       		add.w	d4,d3
00008740 D645                       		add.w	d5,d3
00008742 2043                       		movea.l	d3,a0
00008744 3610                       		move.w	(a0),d3
00008746                            		; Turn block ID into address
00008746 0243 03FF                  		andi.w	#$3FF,d3
0000874A E74B                       		lsl.w	#3,d3
0000874C D2C3                       		adda.w	d3,a1
0000874E                            
0000874E                            locret_6C1E:
0000874E 4E75                       		rts	
00008750                            ; End of function GetBlockData
00008750                            
00008750                            
00008750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008750                            
00008750                            ; Produces a VRAM plane access command from coordinates
00008750                            ; Parameters:
00008750                            ; d4 = Relative Y coordinate
00008750                            ; d5 = Relative X coordinate
00008750                            ; Returns VDP command in d0
00008750                            Calc_VRAM_Pos:
00008750 DA53                       			add.w	(a3),d5
00008752                            	Calc_VRAM_Pos_2:
00008752 D86B 0004                  			add.w	4(a3),d4
00008756                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008756                            		; Also note that this wraps the value to the size of the plane:
00008756                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008756 0244 00F0                  		andi.w	#$F0,d4
0000875A 0245 01F0                  		andi.w	#$1F0,d5
0000875E                            		; Transform the adjusted coordinates into a VDP command
0000875E E94C                       		lsl.w	#4,d4
00008760 E44D                       		lsr.w	#2,d5
00008762 D845                       		add.w	d5,d4
00008764 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008766 4840                       		swap	d0
00008768 3004                       		move.w	d4,d0
0000876A 4E75                       		rts	
0000876C                            ; End of function Calc_VRAM_Pos
0000876C                            
0000876C                            
0000876C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000876C                            ; not used
0000876C                            
0000876C                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000876C                            ; VRAM layout: the only difference is the high bits of the
0000876C                            ; plane's VRAM address, which are 10 instead of 11.
0000876C                            ; Both the foreground and background are at $C000 and $E000
0000876C                            ; respectively, so this one starting at $8000 makes no sense.
0000876C                            ; sub_6C3C:
0000876C                            Calc_VRAM_Pos_Unknown:
0000876C D86B 0004                  		add.w	4(a3),d4
00008770 DA53                       		add.w	(a3),d5
00008772 0244 00F0                  		andi.w	#$F0,d4
00008776 0245 01F0                  		andi.w	#$1F0,d5
0000877A E94C                       		lsl.w	#4,d4
0000877C E44D                       		lsr.w	#2,d5
0000877E D845                       		add.w	d5,d4
00008780 7002                       		moveq	#2,d0
00008782 4840                       		swap	d0
00008784 3004                       		move.w	d4,d0
00008786 4E75                       		rts	
00008788                            ; End of function Calc_VRAM_Pos_Unknown
00008788                            
00008788                            ; ---------------------------------------------------------------------------
00008788                            ; Subroutine to	load tiles as soon as the level	appears
00008788                            ; ---------------------------------------------------------------------------
00008788                            
00008788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008788                            
00008788                            
00008788                            LoadTilesFromStart:
00008788 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000878E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008794 47F8 F700                  		lea	(v_screenposx).w,a3
00008798 49F8 A400                  		lea	(v_lvllayout).w,a4
0000879C 343C 4000                  		move.w	#$4000,d2
000087A0 6100                       		bsr.s	DrawChunks
000087A2 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000087A6 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000087AA 343C 6000                  		move.w	#$6000,d2
000087AE 4A38 FE10                  			tst.b	(v_zone).w
000087B2 6700 0000                  			beq.w	Draw_GHz_Bg
000087B6 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000087BC 6700 0000                  			beq.w	Draw_Mz_Bg
000087C0 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000087C6 6700 0000                  			beq.w	Draw_SBz_Bg
000087CA 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000087D0 6700 0000                  			beq.w	Draw_GHz_Bg
000087D4                            ; End of function LoadTilesFromStart
000087D4                            
000087D4                            
000087D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087D4                            
000087D4                            
000087D4                            DrawChunks:
000087D4 78F0                       		moveq	#-16,d4
000087D6 7C0F                       		moveq	#((224+16+16)/16)-1,d6
000087D8                            
000087D8                            	@loop:
000087D8 48E7 0E00                  		movem.l	d4-d6,-(sp)
000087DC 7A00                       		moveq	#0,d5
000087DE 3204                       		move.w	d4,d1
000087E0 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000087E4 3801                       		move.w	d1,d4
000087E6 7A00                       		moveq	#0,d5
000087E8 7C1F                       		moveq	#(512/16)-1,d6
000087EA 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000087EE 4CDF 0070                  		movem.l	(sp)+,d4-d6
000087F2 0644 0010                  		addi.w	#16,d4
000087F6 51CE FFE0                  		dbf	d6,@loop
000087FA 4E75                       		rts	
000087FC                            ; End of function DrawChunks
000087FC                            
000087FC                            	Draw_GHz_Bg:
000087FC 7800                       			moveq	#0,d4
000087FE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008800                            	locj_7224:			
00008800 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008804 41F9 0000 0000             			lea	(locj_724a),a0
0000880A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000880E D044                       			add.w	d4,d0
00008810 0240 00F0                  			andi.w	#$F0,d0
00008814 6100 0000                  			bsr.w	locj_72Ba
00008818 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000881C 0644 0010                  			addi.w	#16,d4
00008820 51CE FFDE                  			dbf	d6,locj_7224
00008824 4E75                       			rts
00008826                            	locj_724a:
00008826 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
00008836                            ;-------------------------------------------------------------------------------
00008836                            	Draw_Mz_Bg:;locj_725a:
00008836 78F0                       			moveq	#-16,d4
00008838 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000883A                            	locj_725E:			
0000883A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000883E 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008842 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008846 0440 0200                  			subi.w	#$200,d0
0000884A D044                       			add.w	d4,d0
0000884C 0240 07F0                  			andi.w	#$7F0,d0
00008850 6100 0000                  			bsr.w	locj_72Ba
00008854 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008858 0644 0010                  			addi.w	#16,d4
0000885C 51CE FFDC                  			dbf	d6,locj_725E
00008860 4E75                       			rts
00008862                            ;-------------------------------------------------------------------------------
00008862                            	Draw_SBz_Bg:;locj_7288:
00008862 78F0                       			moveq	#-16,d4
00008864 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008866                            	locj_728C:			
00008866 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000886A 41FA FB65                  			lea	(locj_6DF4+1),a0
0000886E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008872 D044                       			add.w	d4,d0
00008874 0240 01F0                  			andi.w	#$1F0,d0
00008878 6100 0000                  			bsr.w	locj_72Ba
0000887C 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008880 0644 0010                  			addi.w	#16,d4
00008884 51CE FFE0                  			dbf	d6,locj_728C
00008888 4E75                       			rts
0000888A                            ;-------------------------------------------------------------------------------
0000888A                            	locj_72B2:
0000888A F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008892                            	locj_72Ba:
00008892 E848                       			lsr.w	#4,d0
00008894 1030 0000                  			move.b	(a0,d0.w),d0
00008898 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
0000889C 6700                       			beq.s	locj_72da
0000889E 7AF0                       			moveq	#-16,d5
000088A0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000088A4 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000088A8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000088AC 6100 FD56                  			bsr.w	DrawBlocks_LR
000088B0 6000                       			bra.s	locj_72EE
000088B2                            	locj_72da:
000088B2 7A00                       			moveq	#0,d5
000088B4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000088B8 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000088BC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000088C0 7C1F                       			moveq	#(512/16)-1,d6
000088C2 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000088C6                            	locj_72EE:
000088C6 4E75                       			rts
000088C8                            
000088C8                            ; ---------------------------------------------------------------------------
000088C8                            ; Subroutine to load basic level data
000088C8                            ; ---------------------------------------------------------------------------
000088C8                            
000088C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088C8                            
000088C8                            
000088C8                            LevelDataLoad:
000088C8 7000                       		moveq	#0,d0
000088CA 1038 FE10                  		move.b	(v_zone).w,d0
000088CE E948                       		lsl.w	#4,d0
000088D0 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000088D6 45F2 0000                  		lea	(a2,d0.w),a2
000088DA 2F0A                       		move.l	a2,-(sp)
000088DC 588A                       		addq.l	#4,a2
000088DE 205A                       		movea.l	(a2)+,a0
000088E0 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000088E4 303C 0000                  		move.w	#0,d0
000088E8 6100 8F9E                  		bsr.w	EniDec
000088EC 205A                       		movea.l	(a2)+,a0
000088EE 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000088F4 6100 9110                  		bsr.w	KosDec
000088F8 6100 0000                  		bsr.w	LevelLayoutLoad
000088FC 301A                       		move.w	(a2)+,d0
000088FE 3012                       		move.w	(a2),d0
00008900 0240 00FF                  		andi.w	#$FF,d0
00008904 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
0000890A 6600                       		bne.s	@notSBZ3	; if not, branch
0000890C 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
0000890E                            
0000890E                            	@notSBZ3:
0000890E 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
00008914 6700                       		beq.s	@isSBZorFZ	; if yes, branch
00008916 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
0000891C 6600                       		bne.s	@normalpal	; if not, branch
0000891E                            
0000891E                            	@isSBZorFZ:
0000891E 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008920                            
00008920                            	@normalpal:
00008920 6100 9B0A                  		bsr.w	PalLoad1	; load palette (based on d0)
00008924 245F                       		movea.l	(sp)+,a2
00008926 584A                       		addq.w	#4,a2		; read number for 2nd PLC
00008928 7000                       		moveq	#0,d0
0000892A 1012                       		move.b	(a2),d0
0000892C 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
0000892E 6100 8DBA                  		bsr.w	AddPLC		; load pattern load cues
00008932                            
00008932                            	@skipPLC:
00008932 4E75                       		rts	
00008934                            ; End of function LevelDataLoad
00008934                            
00008934                            ; ---------------------------------------------------------------------------
00008934                            ; Level	layout loading subroutine
00008934                            ; ---------------------------------------------------------------------------
00008934                            
00008934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008934                            
00008934                            
00008934                            LevelLayoutLoad:
00008934 47F8 A400                  		lea	(v_lvllayout).w,a3
00008938 323C 01FF                  		move.w	#$1FF,d1
0000893C 7000                       		moveq	#0,d0
0000893E                            
0000893E                            LevLoad_ClrRam:
0000893E 26C0                       		move.l	d0,(a3)+
00008940 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008944                            
00008944 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
00008948 7200                       		moveq	#0,d1
0000894A 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000894E 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008952 7202                       		moveq	#2,d1
00008954                            ; End of function LevelLayoutLoad
00008954                            
00008954                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008954                            
00008954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008954                            
00008954                            
00008954                            LevelLayoutLoad2:
00008954 3038 FE10                  		move.w	(v_zone).w,d0
00008958 ED08                       		lsl.b	#6,d0
0000895A EA48                       		lsr.w	#5,d0
0000895C 3400                       		move.w	d0,d2
0000895E D040                       		add.w	d0,d0
00008960 D042                       		add.w	d2,d0
00008962 D041                       		add.w	d1,d0
00008964 43F9 0000 0000             		lea	(Level_Index).l,a1
0000896A 3031 0000                  		move.w	(a1,d0.w),d0
0000896E 43F1 0000                  		lea	(a1,d0.w),a1
00008972 7200                       		moveq	#0,d1
00008974 3401                       		move.w	d1,d2
00008976 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008978 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000897A                            
0000897A                            LevLoad_NumRows:
0000897A 3001                       		move.w	d1,d0
0000897C 204B                       		movea.l	a3,a0
0000897E                            
0000897E                            LevLoad_Row:
0000897E 10D9                       		move.b	(a1)+,(a0)+
00008980 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008984 47EB 0080                  		lea	$80(a3),a3	; do next row
00008988 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000898C 4E75                       		rts	
0000898E                            ; End of function LevelLayoutLoad2
0000898E                            
0000898E                            		include	"_inc\DynamicLevelEvents.asm"
0000898E                            ; ---------------------------------------------------------------------------
0000898E                            ; Dynamic level events
0000898E                            ; ---------------------------------------------------------------------------
0000898E                            
0000898E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000898E                            
0000898E                            
0000898E                            DynamicLevelEvents:
0000898E 7000                       		moveq	#0,d0
00008990 1038 FE10                  		move.b	(v_zone).w,d0
00008994 D040                       		add.w	d0,d0
00008996 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
0000899A 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
0000899E 7202                       		moveq	#2,d1
000089A0 3038 F726                  		move.w	(v_limitbtm1).w,d0
000089A4 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000089A8 6700                       		beq.s	DLE_NoChg	; if not, branch
000089AA 6400                       		bcc.s	loc_6DAC
000089AC                            
000089AC 4441                       		neg.w	d1
000089AE 3038 F704                  		move.w	(v_screenposy).w,d0
000089B2 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000089B6 6300                       		bls.s	loc_6DA0
000089B8 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000089BC 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000089C2                            
000089C2                            loc_6DA0:
000089C2 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000089C6 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000089CC                            
000089CC                            DLE_NoChg:
000089CC 4E75                       		rts	
000089CE                            ; ===========================================================================
000089CE                            
000089CE                            loc_6DAC:
000089CE 3038 F704                  		move.w	(v_screenposy).w,d0
000089D2 5040                       		addq.w	#8,d0
000089D4 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
000089D8 6500                       		bcs.s	loc_6DC4
000089DA 0838 0001 D022             		btst	#1,(v_player+obStatus).w
000089E0 6700                       		beq.s	loc_6DC4
000089E2 D241                       		add.w	d1,d1
000089E4 D241                       		add.w	d1,d1
000089E6                            
000089E6                            loc_6DC4:
000089E6 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000089EA 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000089F0 4E75                       		rts	
000089F2                            ; End of function DynamicLevelEvents
000089F2                            
000089F2                            ; ===========================================================================
000089F2                            ; ---------------------------------------------------------------------------
000089F2                            ; Offset index for dynamic level events
000089F2                            ; ---------------------------------------------------------------------------
000089F2 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
000089F6 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
000089FA 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
000089FE 0000                       		dc.w DLE_Ending-DLE_Index
00008A00                            ; ===========================================================================
00008A00                            ; ---------------------------------------------------------------------------
00008A00                            ; Green	Hill Zone dynamic level events
00008A00                            ; ---------------------------------------------------------------------------
00008A00                            
00008A00                            DLE_GHZ:
00008A00 7000                       		moveq	#0,d0
00008A02 1038 FE11                  		move.b	(v_act).w,d0
00008A06 D040                       		add.w	d0,d0
00008A08 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008A0C 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008A10                            ; ===========================================================================
00008A10 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008A12 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008A14 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008A16                            ; ===========================================================================
00008A16                            
00008A16                            DLE_GHZ1:
00008A16 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008A1C 6600                       		bne.s	gohere
00008A1E 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008A24 4E75                       		rts
00008A26                            gohere:
00008A26 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008A2C 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008A32 6500                       		bcs.s	locret_6E08	; if not, branch
00008A34 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008A3A                            
00008A3A                            locret_6E08:
00008A3A 4E75                       		rts	
00008A3C                            ; ===========================================================================
00008A3C                            
00008A3C                            DLE_GHZ2:
00008A3C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008A42 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008A48 6500                       		bcs.s	locret_6E3A
00008A4A 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008A50 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008A56 6500                       		bcs.s	locret_6E3A
00008A58 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008A5E 6500                       		bcs.s	loc_6E9A
00008A60 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008A66 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008A6C 6400                       		bcc.s	loc_6E8F
00008A6E 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008A74 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008A7A                            
00008A7A                            loc_6E8F:
00008A7A 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008A80 6400                       		bcc.s	loc_6E9A
00008A82                            
00008A82                            locret_6E3A:
00008A82 4E75                       		rts	
00008A84                            ; ===========================================================================
00008A84                            
00008A84                            loc_6E9A:
00008A84 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008A8A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A8E 4E75                       		rts		
00008A90                            ; ===========================================================================
00008A90                            
00008A90                            DLE_GHZ3:
00008A90 7000                       		moveq	#0,d0
00008A92 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A96 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008A9A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008A9E                            ; ===========================================================================
00008A9E 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008AA0 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008AA2 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008AA4                            ; ===========================================================================
00008AA4                            
00008AA4                            DLE_GHZ3main:
00008AA4 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AAA 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008AB0 6500                       		bcs.s	locret_6E96
00008AB2 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AB8 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008ABE 6500                       		bcs.s	locret_6E96
00008AC0 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008AC6 6500                       		bcs.s	loc_6E98
00008AC8 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008ACE 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008AD4 6400                       		bcc.s	loc_6E8E
00008AD6 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008ADC 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008AE2                            
00008AE2                            loc_6E8E:
00008AE2 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008AE8 6400                       		bcc.s	loc_6E98
00008AEA                            
00008AEA                            locret_6E96:
00008AEA 4E75                       		rts	
00008AEC                            ; ===========================================================================
00008AEC                            
00008AEC                            loc_6E98:
00008AEC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AF2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AF6 4E75                       		rts	
00008AF8                            ; ===========================================================================
00008AF8                            
00008AF8                            DLE_GHZ3boss:
00008AF8 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008AFE 6400                       		bcc.s	loc_6EB0
00008B00 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008B04                            
00008B04                            loc_6EB0:
00008B04 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008B0A 6500                       		bcs.s	locret_6EE8
00008B0C 6100 0000                  		bsr.w	FindFreeObj
00008B10 6600                       		bne.s	loc_6ED0
00008B12 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008B16 337C 1460 0008             		move.w	#$1460,obX(a1)
00008B1C 337C 0280 000C             		move.w	#$280,obY(a1)
00008B22                            
00008B22                            loc_6ED0:
00008B2A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B30 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B34 7000                       		moveq	#plcid_Egg,d0
00008B36 6000 8BB2                  		bra.w	AddPLC		; load boss patterns
00008B3A                            		
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            locret_6EE8:
00008B3A 4E75                       		rts	
00008B3C                            ; ===========================================================================
00008B3C                            
00008B3C                            DLE_GHZ3end:
00008B3C 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008B42 337C 0280 000C             		move.w	#$280,obY(a1)
00008B48 4E75                       		rts	
00008B4A                            ; ===========================================================================
00008B4A                            ; ---------------------------------------------------------------------------
00008B4A                            ; Labyrinth Zone dynamic level events
00008B4A                            ; ---------------------------------------------------------------------------
00008B4A                            
00008B4A                            DLE_LZ:
00008B4A 7000                       		moveq	#0,d0
00008B4C 1038 FE11                  		move.b	(v_act).w,d0
00008B50 D040                       		add.w	d0,d0
00008B52 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008B56 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008B5A                            ; ===========================================================================
00008B5A 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008B5C 0000                       		dc.w DLE_LZ12-DLE_LZx
00008B5E 0000                       		dc.w DLE_LZ3-DLE_LZx
00008B60 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008B62                            ; ===========================================================================
00008B62                            
00008B62                            DLE_LZ12:
00008B62 4E75                       		rts	
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            DLE_LZ3:
00008B64 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008B68 6700                       		beq.s	loc_6F28	; if not, branch
00008B6A 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008B6E 0C11 0007                  		cmpi.b	#7,(a1)
00008B72 6700                       		beq.s	loc_6F28
00008B74 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008B80                            
00008B80                            loc_6F28:
00008B80 4A38 F742                  		tst.b	(v_dle_routine).w
00008B84 6600                       		bne.s	locret_6F64
00008B86 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008B8C 6500                       		bcs.s	locret_6F62
00008B8E 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008B94 6400                       		bcc.s	locret_6F62
00008B96 6100 0000                  		bsr.w	FindFreeObj
00008B9A 6600                       		bne.s	loc_6F4A
00008B9C 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008BA0                            
00008BA0                            loc_6F4A:
00008BA8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BAE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BB2 7000                       		moveq	#plcid_Boss,d0
00008BB4 6000 8B34                  		bra.w	AddPLC		; load boss patterns
00008BB8                            ; ===========================================================================
00008BB8                            
00008BB8                            locret_6F62:
00008BB8 4E75                       		rts	
00008BBA                            ; ===========================================================================
00008BBA                            
00008BBA                            locret_6F64:
00008BBA 4E75                       		rts	
00008BBC                            ; ===========================================================================
00008BBC                            
00008BBC                            DLE_SBZ3:
00008BBC 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008BC2 6500                       		bcs.s	locret_6F8C
00008BC4 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008BCA 6400                       		bcc.s	locret_6F8C	; if not, branch
00008BCC 4238 FE30                  		clr.b	(v_lastlamp).w
00008BD0 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008BD6 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008BDC 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008BE2                            
00008BE2                            locret_6F8C:
00008BE2 4E75                       		rts	
00008BE4                            ; ===========================================================================
00008BE4                            ; ---------------------------------------------------------------------------
00008BE4                            ; Marble Zone dynamic level events
00008BE4                            ; ---------------------------------------------------------------------------
00008BE4                            
00008BE4                            DLE_MZ:
00008BE4 7000                       		moveq	#0,d0
00008BE6 1038 FE11                  		move.b	(v_act).w,d0
00008BEA D040                       		add.w	d0,d0
00008BEC 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008BF0 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008BF4                            ; ===========================================================================
00008BF4 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008BF6 0000                       		dc.w DLE_MZ2-DLE_MZx
00008BF8 0000                       		dc.w DLE_MZ3-DLE_MZx
00008BFA                            ; ===========================================================================
00008BFA                            
00008BFA                            DLE_MZ1:
00008BFA 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C00 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008C06 6500                       		bcs.s	locret_6FE8
00008C08 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008C0E                            
00008C0E                            locret_6FE8:
00008C0E 4E75                       		rts	
00008C10                            
00008C10                            ; ===========================================================================
00008C10                            
00008C10                            DLE_MZ2:
00008C10 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C16 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008C1C 6500                       		bcs.s	locret_6FE9
00008C1E 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008C24                            		
00008C24                            locret_6FE9:
00008C24 4E75                       		rts	
00008C26                            ; ===========================================================================
00008C26                            
00008C26                            DLE_MZ3:
00008C26 7000                       		moveq	#0,d0
00008C28 1038 F742                  		move.b	(v_dle_routine).w,d0
00008C2C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008C30 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008C34                            ; ===========================================================================
00008C34 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008C36 0000                       		dc.w DLE_MZ3end-off_7098
00008C38                            ; ===========================================================================
00008C38                            
00008C38                            DLE_MZ3boss:
00008C38 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008C3E 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008C44 6500                       		bcs.s	locret_70E8
00008C46 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008C4C 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008C52 6500                       		bcs.s	locret_70E8
00008C54 6100 0000                  		bsr.w	FindFreeObj
00008C58 6600                       		bne.s	loc_70D0
00008C5A 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008C5E 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008C64 337C 022C 000C             		move.w	#$22C,obY(a1)
00008C6A                            
00008C6A                            loc_70D0:
00008C72 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C78 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C7C 7000                       		moveq	#plcid_Boss,d0
00008C7E 6000 8A6A                  		bra.w	AddPLC		; load boss patterns
00008C82                            ; ===========================================================================
00008C82                            
00008C82                            locret_70E8:
00008C82 4E75                       		rts	
00008C84                            ; ===========================================================================
00008C84                            
00008C84                            DLE_MZ3end:
00008C84 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008C8A 4E75                       		rts	
00008C8C                            		
00008C8C                            ; ===========================================================================
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            ; Star Light Zone dynamic level events
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            
00008C8C                            DLE_SLZ:
00008C8C 7000                       		moveq	#0,d0
00008C8E 1038 FE11                  		move.b	(v_act).w,d0
00008C92 D040                       		add.w	d0,d0
00008C94 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008C98 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008C9C                            ; ===========================================================================
00008C9C 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008C9E 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008CA0 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008CA2                            ; ===========================================================================
00008CA2                            
00008CA2                            DLE_SLZ12:
00008CA2 4E75                       		rts	
00008CA4                            ; ===========================================================================
00008CA4                            
00008CA4                            DLE_SLZ3:
00008CA4 7000                       		moveq	#0,d0
00008CA6 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CAA 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008CAE 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008CB2                            ; ===========================================================================
00008CB2 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008CB4 0000                       		dc.w DLE_SLZ3boss-off_7118
00008CB6 0000                       		dc.w DLE_SLZ3end-off_7118
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            DLE_SLZ3main:
00008CB8 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008CBE 6500                       		bcs.s	locret_7130
00008CC0 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008CC6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CCA                            
00008CCA                            locret_7130:
00008CCA 4E75                       		rts	
00008CCC                            ; ===========================================================================
00008CCC                            
00008CCC                            DLE_SLZ3boss:
00008CCC 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008CD2 6500                       		bcs.s	locret_715C
00008CD4 6100 0000                  		bsr.w	FindFreeObj
00008CD8 6600                       		bne.s	loc_7144
00008CDA 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008CDE                            
00008CDE                            loc_7144:
00008CE6 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CEC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CF0 7000                       		moveq	#plcid_Boss,d0
00008CF2 6000 89F6                  		bra.w	AddPLC		; load boss patterns
00008CF6                            ; ===========================================================================
00008CF6                            
00008CF6                            locret_715C:
00008CF6 4E75                       		rts	
00008CF8                            ; ===========================================================================
00008CF8                            
00008CF8                            DLE_SLZ3end:
00008CF8 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008CFE 4E75                       		rts
00008D00 4E75                       		rts
00008D02                            ; ===========================================================================
00008D02                            ; ---------------------------------------------------------------------------
00008D02                            ; Spring Yard Zone dynamic level events
00008D02                            ; ---------------------------------------------------------------------------
00008D02                            
00008D02                            DLE_SYZ:
00008D02 7000                       		moveq	#0,d0
00008D04 1038 FE11                  		move.b	(v_act).w,d0
00008D08 D040                       		add.w	d0,d0
00008D0A 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008D0E 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008D12                            ; ===========================================================================
00008D12 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008D14 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008D16 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008D18                            ; ===========================================================================
00008D18                            
00008D18                            DLE_SYZ1:
00008D18 4E75                       		rts	
00008D1A                            ; ===========================================================================
00008D1A                            
00008D1A                            DLE_SYZ2:
00008D1A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D20 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008D26 6500                       		bcs.s	locret_71A2
00008D28 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008D2E 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008D34 6500                       		bcs.s	locret_71A2
00008D36 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D3C                            
00008D3C                            locret_71A2:
00008D3C 4E75                       		rts	
00008D3E                            ; ===========================================================================
00008D3E                            
00008D3E                            DLE_SYZ3:
00008D3E 7000                       		moveq	#0,d0
00008D40 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D44 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008D48 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008D4C                            ; ===========================================================================
00008D4C 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008D4E 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008D50 0000                       		dc.w DLE_SYZ3end-off_71B2
00008D52                            ; ===========================================================================
00008D52                            
00008D52                            DLE_SYZ3main:
00008D52 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008D58 6500                       		bcs.s	locret_71CE
00008D5A 6100 0000                  		bsr.w	FindFreeObj
00008D5E 6600                       		bne.s	locret_71CE
00008D60 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008D64 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D68                            
00008D68                            locret_71CE:
00008D68 4E75                       		rts	
00008D6A                            ; ===========================================================================
00008D6A                            
00008D6A                            DLE_SYZ3boss:
00008D6A 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008D70 6500                       		bcs.s	locret_7200
00008D72 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008D78 6100 0000                  		bsr.w	FindFreeObj
00008D7C 6600                       		bne.s	loc_71EC
00008D7E 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008D82 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D86                            
00008D86                            loc_71EC:
00008D8E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D94 7000                       		moveq	#plcid_Boss,d0
00008D96 6000 8952                  		bra.w	AddPLC		; load boss patterns
00008D9A                            ; ===========================================================================
00008D9A                            
00008D9A                            locret_7200:
00008D9A 4E75                       		rts	
00008D9C                            ; ===========================================================================
00008D9C                            
00008D9C                            DLE_SYZ3end:
00008D9C 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DA2 4E75                       		rts	
00008DA4                            ; ===========================================================================
00008DA4                            ; ---------------------------------------------------------------------------
00008DA4                            ; Scrap	Brain Zone dynamic level events
00008DA4                            ; ---------------------------------------------------------------------------
00008DA4                            
00008DA4                            DLE_SBZ:
00008DA4 7000                       		moveq	#0,d0
00008DA6 1038 FE11                  		move.b	(v_act).w,d0
00008DAA D040                       		add.w	d0,d0
00008DAC 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008DB0 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008DB4                            ; ===========================================================================
00008DB4 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008DB6 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008DB8 0000                       		dc.w DLE_FZ-DLE_SBZx
00008DBA                            ; ===========================================================================
00008DBA                            
00008DBA                            DLE_SBZ1:
00008DBA 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008DC0 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008DC6 6500                       		bcs.s	locret_7242
00008DC8 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008DCE 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008DD4 6500                       		bcs.s	locret_7242
00008DD6 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008DDC                            
00008DDC                            locret_7242:
00008DDC 4E75                       		rts	
00008DDE                            ; ===========================================================================
00008DDE                            
00008DDE                            DLE_SBZ2:
00008DDE 7000                       		moveq	#0,d0
00008DE0 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DE4 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008DE8 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008DEC                            ; ===========================================================================
00008DEC 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008DEE 0000                       		dc.w DLE_SBZ2boss-off_7252
00008DF0 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008DF2 0000                       		dc.w DLE_SBZ2end-off_7252
00008DF4                            ; ===========================================================================
00008DF4                            
00008DF4                            DLE_SBZ2main:
00008DF4 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008DFA 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008E00 6500                       		bcs.s	locret_727A
00008E02 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008E08 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008E0E 6500                       		bcs.s	locret_727A
00008E10 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E14                            
00008E14                            locret_727A:
00008E14 4E75                       		rts	
00008E16                            ; ===========================================================================
00008E16                            
00008E16                            DLE_SBZ2boss:
00008E16 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008E1C 6500                       		bcs.s	locret_7298
00008E1E 6100 0000                  		bsr.w	FindFreeObj
00008E22 6600                       		bne.s	locret_7298
00008E24 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008E28 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E2C 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008E2E 6000 88BA                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008E32                            ; ===========================================================================
00008E32                            
00008E32                            locret_7298:
00008E32 4E75                       		rts	
00008E34                            ; ===========================================================================
00008E34                            
00008E34                            DLE_SBZ2boss2:
00008E34 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008E3A 6500                       		bcs.s	loc_72B6
00008E3C 6100 0000                  		bsr.w	FindFreeObj
00008E40 6600                       		bne.s	loc_72B0
00008E42 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008E46 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E4A                            
00008E4A                            loc_72B0:
00008E4A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E50                            
00008E50                            loc_72B6:
00008E50 6000                       		bra.s	loc_72C2
00008E52                            ; ===========================================================================
00008E52                            
00008E52                            DLE_SBZ2end:
00008E52 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008E58 6500                       		bcs.s	loc_72C2
00008E5A 4E75                       		rts	
00008E5C                            ; ===========================================================================
00008E5C                            
00008E5C                            loc_72C2:
00008E5C 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E62 4E75                       		rts	
00008E64                            ; ===========================================================================
00008E64                            
00008E64                            DLE_FZ:
00008E64 7000                       		moveq	#0,d0
00008E66 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E6A 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008E6E 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008E72                            ; ===========================================================================
00008E72 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008E76 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008E7A 0000                       		dc.w DLE_FZend2-off_72D8
00008E7C                            ; ===========================================================================
00008E7C                            
00008E7C                            DLE_FZmain:
00008E7C 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008E82 6500                       		bcs.s	loc_72F4
00008E84 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E88 7000                       		moveq	#plcid_FZBoss,d0
00008E8A 6100 885E                  		bsr.w	AddPLC		; load FZ boss patterns
00008E8E                            
00008E8E                            loc_72F4:
00008E8E 60CC                       		bra.s	loc_72C2
00008E90                            ; ===========================================================================
00008E90                            
00008E90                            DLE_FZboss:
00008E90 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008E96 6500                       		bcs.s	loc_7312
00008E98 6100 0000                  		bsr.w	FindFreeObj
00008E9C 6600                       		bne.s	loc_7312
00008E9E 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008EA2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EA6 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EAC                            
00008EAC                            loc_7312:
00008EAC 60AE                       		bra.s	loc_72C2
00008EAE                            ; ===========================================================================
00008EAE                            
00008EAE                            DLE_FZend:
00008EAE 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008EB4 6500                       		bcs.s	loc_7320
00008EB6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EBA                            
00008EBA                            loc_7320:
00008EBA 60A0                       		bra.s	loc_72C2
00008EBC                            ; ===========================================================================
00008EBC                            
00008EBC                            locret_7322:
00008EBC 4E75                       		rts	
00008EBE                            ; ===========================================================================
00008EBE                            
00008EBE                            DLE_FZend2:
00008EBE 609C                       		bra.s	loc_72C2
00008EC0                            ; ===========================================================================
00008EC0                            ; ---------------------------------------------------------------------------
00008EC0                            ; Ending sequence dynamic level events (empty)
00008EC0                            ; ---------------------------------------------------------------------------
00008EC0                            
00008EC0                            DLE_Ending:
00008EC0 4E75                       		rts	
00008EC0 4E75                       		rts	
00008EC2                            
00008EC2                            		include	"_incObj\11 Bridge (part 1).asm"
00008EC2                            ; ---------------------------------------------------------------------------
00008EC2                            ; Object 11 - GHZ bridge
00008EC2                            ; ---------------------------------------------------------------------------
00008EC2                            
00008EC2                            Bridge:
00008EC2 7000                       		moveq	#0,d0
00008EC4 1028 0024                  		move.b	obRoutine(a0),d0
00008EC8 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008ECC 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008ED0                            ; ===========================================================================
00008ED0 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008ED4 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008ED8 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008EDC                            ; ===========================================================================
00008EDC                            
00008EDC                            Bri_Main:	; Routine 0
00008EDC 5428 0024                  		addq.b	#2,obRoutine(a0)
00008EE0 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008EE8 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008EEE 117C 0004 0001             		move.b	#4,obRender(a0)
00008EF4 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008EFA 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008F00 3428 000C                  		move.w	obY(a0),d2
00008F04 3628 0008                  		move.w	obX(a0),d3
00008F08 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008F0A 45E8 0028                  		lea	obSubtype(a0),a2
00008F0E 7200                       		moveq	#0,d1
00008F10 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008F12 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008F16 3001                       		move.w	d1,d0
00008F18 E248                       		lsr.w	#1,d0
00008F1A E948                       		lsl.w	#4,d0
00008F1C 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008F1E 5501                       		subq.b	#2,d1
00008F20 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008F22                            
00008F22                            @buildloop:
00008F22 6100 0000                  		bsr.w	FindFreeObj
00008F26 6600                       		bne.s	Bri_Action
00008F28 5228 0028                  		addq.b	#1,obSubtype(a0)
00008F2C B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008F30 6600                       		bne.s	@notleftmost	; if not, branch
00008F32                            
00008F32 0643 0010                  		addi.w	#$10,d3
00008F36 3142 000C                  		move.w	d2,obY(a0)
00008F3A 3142 003C                  		move.w	d2,$3C(a0)
00008F3E 3A08                       		move.w	a0,d5
00008F40 0445 D000                  		subi.w	#$D000,d5
00008F44 EC4D                       		lsr.w	#6,d5
00008F46 0245 007F                  		andi.w	#$7F,d5
00008F4A 14C5                       		move.b	d5,(a2)+
00008F4C 5228 0028                  		addq.b	#1,obSubtype(a0)
00008F50                            
00008F50                            	@notleftmost:
00008F50 3A09                       		move.w	a1,d5
00008F52 0445 D000                  		subi.w	#$D000,d5
00008F56 EC4D                       		lsr.w	#6,d5
00008F58 0245 007F                  		andi.w	#$7F,d5
00008F5C 14C5                       		move.b	d5,(a2)+
00008F5E 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008F64 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008F66 3342 000C                  		move.w	d2,obY(a1)
00008F6A 3342 003C                  		move.w	d2,$3C(a1)
00008F6E 3343 0008                  		move.w	d3,obX(a1)
00008F72 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008F7A 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008F80 137C 0004 0001             		move.b	#4,obRender(a1)
00008F86 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008F8C 137C 0008 0014             		move.b	#8,obActWid(a1)
00008F92 0643 0010                  		addi.w	#$10,d3
00008F96 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008F9A                            
00008F9A                            Bri_Action:	; Routine 2
00008F9A 6100                       		bsr.s	Bri_Solid
00008F9C 4A28 003E                  		tst.b	$3E(a0)
00008FA0 6700                       		beq.s	@display
00008FA2 5928 003E                  		subq.b	#4,$3E(a0)
00008FA6 6100 0000                  		bsr.w	Bri_Bend
00008FAA                            
00008FAA                            	@display:
00008FAA 6100 0000                  		bsr.w	DisplaySprite
00008FAE 6000 0000                  		bra.w	Bri_ChkDel
00008FB2                            
00008FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB2                            
00008FB2                            
00008FB2                            Bri_Solid:
00008FB2 7200                       		moveq	#0,d1
00008FB4 1228 0028                  		move.b	obSubtype(a0),d1
00008FB8 E749                       		lsl.w	#3,d1
00008FBA 3401                       		move.w	d1,d2
00008FBC 5041                       		addq.w	#8,d1
00008FBE D442                       		add.w	d2,d2
00008FC0 43F8 D000                  		lea	(v_player).w,a1
00008FC4 4A69 0012                  		tst.w	obVelY(a1)
00008FC8 6B00 0000                  		bmi.w	Plat_Exit
00008FCC 3029 0008                  		move.w	obX(a1),d0
00008FD0 9068 0008                  		sub.w	obX(a0),d0
00008FD4 D041                       		add.w	d1,d0
00008FD6 6B00 0000                  		bmi.w	Plat_Exit
00008FDA B042                       		cmp.w	d2,d0
00008FDC 6400 0000                  		bcc.w	Plat_Exit
00008FE0 6000                       		bra.s	Plat_NoXCheck
00008FE2                            ; End of function Bri_Solid
00008FE2                            ; End of function Bri_Solid
00008FE2                            
00008FE2                            ; ---------------------------------------------------------------------------
00008FE2                            ; Platform subroutine
00008FE2                            ; ---------------------------------------------------------------------------
00008FE2                            
00008FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FE2                            
00008FE2                            PlatformObject:
00008FE2 43F8 D000                  		lea	(v_player).w,a1
00008FE6 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008FEA 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008FEE                            
00008FEE                            ;		perform x-axis range check
00008FEE 3029 0008                  		move.w	obX(a1),d0
00008FF2 9068 0008                  		sub.w	obX(a0),d0
00008FF6 D041                       		add.w	d1,d0
00008FF8 6B00 0000                  		bmi.w	Plat_Exit
00008FFC D241                       		add.w	d1,d1
00008FFE B041                       		cmp.w	d1,d0
00009000 6400 0000                  		bhs.w	Plat_Exit
00009004                            
00009004                            	Plat_NoXCheck:
00009004 3028 000C                  		move.w	obY(a0),d0
00009008 5140                       		subq.w	#8,d0
0000900A                            
0000900A                            Platform3:
0000900A                            ;		perform y-axis range check
0000900A 3429 000C                  		move.w	obY(a1),d2
0000900E 1229 0016                  		move.b	obHeight(a1),d1
00009012 4881                       		ext.w	d1
00009014 D242                       		add.w	d2,d1
00009016 5841                       		addq.w	#4,d1
00009018 9041                       		sub.w	d1,d0
0000901A 6200 0000                  		bhi.w	Plat_Exit
0000901E 0C40 FFF0                  		cmpi.w	#-$10,d0
00009022 6500 0000                  		blo.w	Plat_Exit
00009026                            
00009026 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000902A 6B00 0000                  		bmi.w	Plat_Exit
0000902E 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00009034 6400 0000                  		bhs.w	Plat_Exit
00009038 D440                       		add.w	d0,d2
0000903A 5642                       		addq.w	#3,d2
0000903C 3342 000C                  		move.w	d2,obY(a1)
00009040 5428 0024                  		addq.b	#2,obRoutine(a0)
00009044                            
00009044                            loc_74AE:
00009044 0829 0003 0022             		btst	#3,obStatus(a1)
0000904A 6700                       		beq.s	loc_74DC
0000904C 7000                       		moveq	#0,d0
0000904E 1029 003D                  		move.b	$3D(a1),d0
00009052 ED48                       		lsl.w	#6,d0
00009054 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000905A 2440                       		movea.l	d0,a2
0000905C 08AA 0003 0022             		bclr	#3,obStatus(a2)
00009062 422A 0025                  		clr.b	ob2ndRout(a2)
00009066 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
0000906C 6600                       		bne.s	loc_74DC
0000906E 552A 0024                  		subq.b	#2,obRoutine(a2)
00009072                            
00009072                            loc_74DC:
00009072 3008                       		move.w	a0,d0
00009074 0440 D000                  		subi.w	#-$3000,d0
00009078 EC48                       		lsr.w	#6,d0
0000907A 0240 007F                  		andi.w	#$7F,d0
0000907E 1340 003D                  		move.b	d0,$3D(a1)
00009082 137C 0000 0026             		move.b	#0,obAngle(a1)
00009088 337C 0000 0012             		move.w	#0,obVelY(a1)
0000908E 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00009094 0829 0001 0022             		btst	#1,obStatus(a1)
0000909A 6700                       		beq.s	loc_7512
0000909C 2F08                       		move.l	a0,-(sp)
0000909E 2049                       		movea.l	a1,a0
000090A0 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
000090A6 205F                       		movea.l	(sp)+,a0
000090A8                            
000090A8                            loc_7512:
000090A8 08E9 0003 0022             		bset	#3,obStatus(a1)
000090AE 08E8 0003 0022             		bset	#3,obStatus(a0)
000090B4                            
000090B4                            Plat_Exit:
000090B4 4E75                       		rts	
000090B6                            ; End of function PlatformObject
000090B6                            
000090B6                            ; ---------------------------------------------------------------------------
000090B6                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000090B6                            ; ---------------------------------------------------------------------------
000090B6                            
000090B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090B6                            
000090B6                            
000090B6                            SlopeObject:
000090B6 43F8 D000                  		lea	(v_player).w,a1
000090BA 4A69 0012                  		tst.w	obVelY(a1)
000090BE 6B00 FFF4                  		bmi.w	Plat_Exit
000090C2 3029 0008                  		move.w	obX(a1),d0
000090C6 9068 0008                  		sub.w	obX(a0),d0
000090CA D041                       		add.w	d1,d0
000090CC 6BE6                       		bmi.s	Plat_Exit
000090CE D241                       		add.w	d1,d1
000090D0 B041                       		cmp.w	d1,d0
000090D2 64E0                       		bhs.s	Plat_Exit
000090D4 0828 0000 0001             		btst	#0,obRender(a0)
000090DA 6700                       		beq.s	loc_754A
000090DC 4640                       		not.w	d0
000090DE D041                       		add.w	d1,d0
000090E0                            
000090E0                            loc_754A:
000090E0 E248                       		lsr.w	#1,d0
000090E2 7600                       		moveq	#0,d3
000090E4 1632 0000                  		move.b	(a2,d0.w),d3
000090E8 3028 000C                  		move.w	obY(a0),d0
000090EC 9043                       		sub.w	d3,d0
000090EE 6000 FF1A                  		bra.w	Platform3
000090F2                            ; End of function SlopeObject
000090F2                            
000090F2                            
000090F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090F2                            
000090F2                            
000090F2                            Swing_Solid:
000090F2 43F8 D000                  		lea	(v_player).w,a1
000090F6 4A69 0012                  		tst.w	obVelY(a1)
000090FA 6B00 FFB8                  		bmi.w	Plat_Exit
000090FE 3029 0008                  		move.w	obX(a1),d0
00009102 9068 0008                  		sub.w	obX(a0),d0
00009106 D041                       		add.w	d1,d0
00009108 6B00 FFAA                  		bmi.w	Plat_Exit
0000910C D241                       		add.w	d1,d1
0000910E B041                       		cmp.w	d1,d0
00009110 6400 FFA2                  		bhs.w	Plat_Exit
00009114 3028 000C                  		move.w	obY(a0),d0
00009118 9043                       		sub.w	d3,d0
0000911A 6000 FEEE                  		bra.w	Platform3
0000911E                            ; End of function Obj15_Solid
0000911E                            
0000911E                            ; ===========================================================================
0000911E                            
0000911E                            		include	"_incObj\11 Bridge (part 2).asm"
0000911E                            
0000911E                            Bri_Platform:	; Routine 4
0000911E 6100                       		bsr.s	Bri_WalkOff
00009120 6100 0000                  		bsr.w	DisplaySprite
00009124 6000 0000                  		bra.w	Bri_ChkDel
00009128                            
00009128                            ; ---------------------------------------------------------------------------
00009128                            ; Subroutine allowing Sonic to walk off a bridge
00009128                            ; ---------------------------------------------------------------------------
00009128                            
00009128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009128                            
00009128                            
00009128                            Bri_WalkOff:
00009128 7200                       		moveq	#0,d1
0000912A 1228 0028                  		move.b	obSubtype(a0),d1
0000912E E749                       		lsl.w	#3,d1
00009130 3401                       		move.w	d1,d2
00009132 5041                       		addq.w	#8,d1
00009134 6100                       		bsr.s	ExitPlatform2
00009136 6400                       		bcc.s	locret_75BE
00009138 E848                       		lsr.w	#4,d0
0000913A 1140 003F                  		move.b	d0,$3F(a0)
0000913E 1028 003E                  		move.b	$3E(a0),d0
00009142 0C00 0040                  		cmpi.b	#$40,d0
00009146 6700                       		beq.s	loc_75B6
00009148 5828 003E                  		addq.b	#4,$3E(a0)
0000914C                            
0000914C                            loc_75B6:
0000914C 6100 0000                  		bsr.w	Bri_Bend
00009150 6100 0000                  		bsr.w	Bri_MoveSonic
00009154                            
00009154                            locret_75BE:
00009154 4E75                       		rts	
00009156                            ; End of function Bri_WalkOff
00009156                            ; End of function Bri_WalkOff
00009156                            
00009156                            ; ---------------------------------------------------------------------------
00009156                            ; Subroutine allowing Sonic to walk or jump off	a platform
00009156                            ; ---------------------------------------------------------------------------
00009156                            
00009156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009156                            
00009156                            
00009156                            ExitPlatform:
00009156 3401                       		move.w	d1,d2
00009158                            
00009158                            ExitPlatform2:
00009158 D442                       		add.w	d2,d2
0000915A 43F8 D000                  		lea	(v_player).w,a1
0000915E 0829 0001 0022             		btst	#1,obStatus(a1)
00009164 6600                       		bne.s	loc_75E0
00009166 3029 0008                  		move.w	obX(a1),d0
0000916A 9068 0008                  		sub.w	obX(a0),d0
0000916E D041                       		add.w	d1,d0
00009170 6B00                       		bmi.s	loc_75E0
00009172 B042                       		cmp.w	d2,d0
00009174 6500                       		blo.s	locret_75F2
00009176                            
00009176                            loc_75E0:
00009176 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000917C 117C 0002 0024             		move.b	#2,obRoutine(a0)
00009182 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009188                            
00009188                            locret_75F2:
00009188 4E75                       		rts	
0000918A                            ; End of function ExitPlatform
0000918A                            
0000918A                            		include	"_incObj\11 Bridge (part 3).asm"
0000918A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000918A                            
0000918A                            
0000918A                            Bri_MoveSonic:
0000918A 7000                       		moveq	#0,d0
0000918C 1028 003F                  		move.b	$3F(a0),d0
00009190 1030 0029                  		move.b	$29(a0,d0.w),d0
00009194 ED48                       		lsl.w	#6,d0
00009196 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000919C 2440                       		movea.l	d0,a2
0000919E 43F8 D000                  		lea	(v_player).w,a1
000091A2 302A 000C                  		move.w	obY(a2),d0
000091A6 5140                       		subq.w	#8,d0
000091A8 7200                       		moveq	#0,d1
000091AA 1229 0016                  		move.b	obHeight(a1),d1
000091AE 9041                       		sub.w	d1,d0
000091B0 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
000091B4 4E75                       		rts	
000091B6                            ; End of function Bri_MoveSonic
000091B6                            
000091B6                            
000091B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091B6                            
000091B6                            
000091B6                            Bri_Bend:
000091B6 1028 003E                  		move.b	$3E(a0),d0
000091BA 6100 A876                  		bsr.w	CalcSine
000091BE 3800                       		move.w	d0,d4
000091C0 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000091C6 7000                       		moveq	#0,d0
000091C8 1028 0028                  		move.b	obSubtype(a0),d0
000091CC E948                       		lsl.w	#4,d0
000091CE 7600                       		moveq	#0,d3
000091D0 1628 003F                  		move.b	$3F(a0),d3
000091D4 3403                       		move.w	d3,d2
000091D6 D640                       		add.w	d0,d3
000091D8 7A00                       		moveq	#0,d5
000091DA 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000091E0 1A35 3000                  		move.b	(a5,d3.w),d5
000091E4 0243 000F                  		andi.w	#$F,d3
000091E8 E94B                       		lsl.w	#4,d3
000091EA 47F4 3000                  		lea	(a4,d3.w),a3
000091EE 45E8 0029                  		lea	$29(a0),a2
000091F2                            
000091F2                            loc_765C:
000091F2 7000                       		moveq	#0,d0
000091F4 101A                       		move.b	(a2)+,d0
000091F6 ED48                       		lsl.w	#6,d0
000091F8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000091FE 2240                       		movea.l	d0,a1
00009200 7000                       		moveq	#0,d0
00009202 101B                       		move.b	(a3)+,d0
00009204 5240                       		addq.w	#1,d0
00009206 C0C5                       		mulu.w	d5,d0
00009208 C0C4                       		mulu.w	d4,d0
0000920A 4840                       		swap	d0
0000920C D069 003C                  		add.w	$3C(a1),d0
00009210 3340 000C                  		move.w	d0,obY(a1)
00009214 51CA FFDC                  		dbf	d2,loc_765C
00009218 7000                       		moveq	#0,d0
0000921A 1028 0028                  		move.b	obSubtype(a0),d0
0000921E 7600                       		moveq	#0,d3
00009220 1628 003F                  		move.b	$3F(a0),d3
00009224 5203                       		addq.b	#1,d3
00009226 9600                       		sub.b	d0,d3
00009228 4403                       		neg.b	d3
0000922A 6B00                       		bmi.s	locret_76CA
0000922C 3403                       		move.w	d3,d2
0000922E E94B                       		lsl.w	#4,d3
00009230 47F4 3000                  		lea	(a4,d3.w),a3
00009234 D6C2                       		adda.w	d2,a3
00009236 5342                       		subq.w	#1,d2
00009238 6500                       		bcs.s	locret_76CA
0000923A                            
0000923A                            loc_76A4:
0000923A 7000                       		moveq	#0,d0
0000923C 101A                       		move.b	(a2)+,d0
0000923E ED48                       		lsl.w	#6,d0
00009240 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009246 2240                       		movea.l	d0,a1
00009248 7000                       		moveq	#0,d0
0000924A 1023                       		move.b	-(a3),d0
0000924C 5240                       		addq.w	#1,d0
0000924E C0C5                       		mulu.w	d5,d0
00009250 C0C4                       		mulu.w	d4,d0
00009252 4840                       		swap	d0
00009254 D069 003C                  		add.w	$3C(a1),d0
00009258 3340 000C                  		move.w	d0,obY(a1)
0000925C 51CA FFDC                  		dbf	d2,loc_76A4
00009260                            
00009260                            locret_76CA:
00009260 4E75                       		rts	
00009262                            ; End of function Bri_Bend
00009262                            
00009262                            ; ===========================================================================
00009262                            ; ---------------------------------------------------------------------------
00009262                            ; GHZ bridge-bending data
00009262                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009262                            ; ---------------------------------------------------------------------------
00009262                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00009372                            		even
00009372                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009472                            		even
00009472                            
00009472                            ; ===========================================================================
00009472                            
00009472                            Bri_ChkDel:
00009490 4E75                       		rts	
00009492                            ; ===========================================================================
00009492                            
00009492                            @deletebridge:
00009492 7400                       		moveq	#0,d2
00009494 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00009498 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000949A 5302                       		subq.b	#1,d2		; subtract 1
0000949C 6500                       		bcs.s	@delparent
0000949E                            
0000949E                            	@loop:
0000949E 7000                       		moveq	#0,d0
000094A0 101A                       		move.b	(a2)+,d0
000094A2 ED48                       		lsl.w	#6,d0
000094A4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000094AA 2240                       		movea.l	d0,a1
000094AC B048                       		cmp.w	a0,d0
000094AE 6700                       		beq.s	@skipdel
000094B0 6100 0000                  		bsr.w	DeleteChild
000094B4                            
000094B4                            	@skipdel:
000094B4 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000094B8                            
000094B8                            @delparent:
000094B8 6100 0000                  		bsr.w	DeleteObject
000094BC 4E75                       		rts	
000094BE                            ; ===========================================================================
000094BE                            
000094BE                            Bri_Delete:	; Routine 6, 8
000094BE 6100 0000                  		bsr.w	DeleteObject
000094C2 4E75                       		rts	
000094C4                            ; ===========================================================================
000094C4                            
000094C4                            Bri_Display:	; Routine $A
000094C4 6100 0000                  		bsr.w	DisplaySprite
000094C8 4E75                       		rts	
000094C8 4E75                       		rts	
000094CA                            Map_Bri:	include	"_maps\Bridge.asm"
000094CA                            ; ---------------------------------------------------------------------------
000094CA                            ; Sprite mappings - GHZ	bridge
000094CA                            ; ---------------------------------------------------------------------------
000094CA                            Map_Bri_internal:
000094CA 0000                       		dc.w M_Bri_Log-Map_Bri_internal
000094CC 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
000094CE 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
000094D0 01                         M_Bri_Log:	dc.b 1
000094D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
000094D6 02                         M_Bri_Stump:	dc.b 2
000094D7 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
000094DC 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000094E1 01                         M_Bri_Rope:	dc.b 1
000094E2 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
000094E8 00                         		even
000094E8 00                         		even
000094E8                            
000094E8                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
000094E8                            ; ---------------------------------------------------------------------------
000094E8                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000094E8                            ;	    - spiked ball on a chain (SBZ)
000094E8                            ; ---------------------------------------------------------------------------
000094E8                            
000094E8                            SwingingPlatform:
000094E8 7000                       		moveq	#0,d0
000094EA 1028 0024                  		move.b	obRoutine(a0),d0
000094EE 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
000094F2 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
000094F6                            ; ===========================================================================
000094F6 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
000094FA 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
000094FE 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009502 0000                       		dc.w Swing_Action-Swing_Index
00009504                            
00009504 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009504 =00000038                  swing_origY:	equ $38		; original y-axis position
00009504                            ; ===========================================================================
00009504                            
00009504                            Swing_Main:	; Routine 0
00009504 5428 0024                  		addq.b	#2,obRoutine(a0)
00009508 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009510 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009516 117C 0004 0001             		move.b	#4,obRender(a0)
0000951C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009522 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009528 117C 0008 0016             		move.b	#8,obHeight(a0)
0000952E 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009534 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000953A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009540 6600                       		bne.s	@notSLZ
00009542                            
00009542 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000954A 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009550 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009556 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000955C 117C 0099 0020             		move.b	#$99,obColType(a0)
00009562                            
00009562                            	@notSLZ:
00009562 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009568 6600                       		bne.s	@length
0000956A                            
0000956A 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009572 317C 0391 0002             		move.w	#$391,obGfx(a0)
00009578 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000957E 117C 0018 0016             		move.b	#$18,obHeight(a0)
00009584 117C 0086 0020             		move.b	#$86,obColType(a0)
0000958A 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009590                            
00009590                            @length:
00009590 1810                       		move.b	0(a0),d4
00009592 7200                       		moveq	#0,d1
00009594 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
00009598 1212                       		move.b	(a2),d1		; move a2 to d1
0000959A 3F01                       		move.w	d1,-(sp)
0000959C 0241 000F                  		andi.w	#$F,d1
000095A0 14FC 0000                  		move.b	#0,(a2)+
000095A4 3601                       		move.w	d1,d3
000095A6 E94B                       		lsl.w	#4,d3
000095A8 5003                       		addq.b	#8,d3
000095AA 1143 003C                  		move.b	d3,$3C(a0)
000095AE 5103                       		subq.b	#8,d3
000095B0 4A28 001A                  		tst.b	obFrame(a0)
000095B4 6700                       		beq.s	@makechain
000095B6 5003                       		addq.b	#8,d3
000095B8 5341                       		subq.w	#1,d1
000095BA                            
000095BA                            @makechain:
000095BA 6100 0000                  		bsr.w	FindFreeObj
000095BE 6600                       		bne.s	@fail
000095C0 5228 0028                  		addq.b	#1,obSubtype(a0)
000095C4 3A09                       		move.w	a1,d5
000095C6 0445 D000                  		subi.w	#$D000,d5
000095CA EC4D                       		lsr.w	#6,d5
000095CC 0245 007F                  		andi.w	#$7F,d5
000095D0 14C5                       		move.b	d5,(a2)+
000095D2 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000095D8 1284                       		move.b	d4,0(a1)	; load swinging	object
000095DA 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000095E0 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000095E6 08A9 0006 0002             		bclr	#6,obGfx(a1)
000095EC 137C 0004 0001             		move.b	#4,obRender(a1)
000095F2 337C 0200 0018             		move.w	#$200,obPriority(a1)
000095F8 137C 0008 0014             		move.b	#8,obActWid(a1)
000095FE 137C 0001 001A             		move.b	#1,obFrame(a1)
00009604 1343 003C                  		move.b	d3,$3C(a1)
00009608 0403 0010                  		subi.b	#$10,d3
0000960C 6400                       		bcc.s	@notanchor
0000960E 137C 0002 001A             		move.b	#2,obFrame(a1)
00009614 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000961A 08E9 0006 0002             		bset	#6,obGfx(a1)
00009620                            
00009620                            	@notanchor:
00009620 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009624                            
00009624                            	@fail:
00009624 3A08                       		move.w	a0,d5
00009626 0445 D000                  		subi.w	#$D000,d5
0000962A EC4D                       		lsr.w	#6,d5
0000962C 0245 007F                  		andi.w	#$7F,d5
00009630 14C5                       		move.b	d5,(a2)+
00009632 317C 4080 0026             		move.w	#$4080,obAngle(a0)
00009638 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000963E 321F                       		move.w	(sp)+,d1
00009640 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009644 6700                       		beq.s	@not1X	; if not, branch
00009646 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
0000964E 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009654 117C 0001 001A             		move.b	#1,obFrame(a0)
0000965A 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009660 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
00009666                            
00009666                            	@not1X:
00009666 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
0000966C 6700                       		beq.s	Swing_Action	; if yes, branch
0000966E                            
0000966E                            Swing_SetSolid:	; Routine 2
0000966E 7200                       		moveq	#0,d1
00009670 1228 0014                  		move.b	obActWid(a0),d1
00009674 7600                       		moveq	#0,d3
00009676 1628 0016                  		move.b	obHeight(a0),d3
0000967A 6100 FA76                  		bsr.w	Swing_Solid
0000967E                            
0000967E                            Swing_Action:	; Routine $C
0000967E 6100 0000                  		bsr.w	Swing_Move
00009682 6100 0000                  		bsr.w	DisplaySprite
00009686 6000 0000                  		bra.w	Swing_ChkDel
0000968A                            ; ===========================================================================
0000968A                            
0000968A                            Swing_Action2:	; Routine 4
0000968A 7200                       		moveq	#0,d1
0000968C 1228 0014                  		move.b	obActWid(a0),d1
00009690 6100 FAC4                  		bsr.w	ExitPlatform
00009694 3F28 0008                  		move.w	obX(a0),-(sp)
00009698 6100 0000                  		bsr.w	Swing_Move
0000969C 341F                       		move.w	(sp)+,d2
0000969E 7600                       		moveq	#0,d3
000096A0 1628 0016                  		move.b	obHeight(a0),d3
000096A4 5203                       		addq.b	#1,d3
000096A6 6100 0000                  		bsr.w	MvSonicOnPtfm
000096AA 6100 0000                  		bsr.w	DisplaySprite
000096AE 6000 0000                  		bra.w	Swing_ChkDel
000096B2                            
000096B2 4E75                       		rts
000096B2 4E75                       		rts
000096B4                            
000096B4                            ; ---------------------------------------------------------------------------
000096B4                            ; Subroutine to	change Sonic's position with a platform
000096B4                            ; ---------------------------------------------------------------------------
000096B4                            
000096B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096B4                            
000096B4                            
000096B4                            MvSonicOnPtfm:
000096B4 43F8 D000                  		lea	(v_player).w,a1
000096B8 3028 000C                  		move.w	obY(a0),d0
000096BC 9043                       		sub.w	d3,d0
000096BE 6000                       		bra.s	MvSonic2
000096C0                            ; End of function MvSonicOnPtfm
000096C0                            
000096C0                            ; ---------------------------------------------------------------------------
000096C0                            ; Subroutine to	change Sonic's position with a platform
000096C0                            ; ---------------------------------------------------------------------------
000096C0                            
000096C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096C0                            
000096C0                            
000096C0                            MvSonicOnPtfm2:
000096C0 43F8 D000                  		lea	(v_player).w,a1
000096C4 3028 000C                  		move.w	obY(a0),d0
000096C8 0440 0009                  		subi.w	#9,d0
000096CC                            
000096CC                            MvSonic2:
000096CC 4A38 F7C8                  		tst.b	(f_lockmulti).w
000096D0 6B00                       		bmi.s	locret_7B62
000096D2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000096D8 6400                       		bhs.s	locret_7B62
000096DA 4A78 FE08                  		tst.w	(v_debuguse).w
000096DE 6600                       		bne.s	locret_7B62
000096E0 7200                       		moveq	#0,d1
000096E2 1229 0016                  		move.b	obHeight(a1),d1
000096E6 9041                       		sub.w	d1,d0
000096E8 3340 000C                  		move.w	d0,obY(a1)
000096EC 9468 0008                  		sub.w	obX(a0),d2
000096F0 9569 0008                  		sub.w	d2,obX(a1)
000096F4                            
000096F4                            locret_7B62:
000096F4 4E75                       		rts	
000096F6                            ; End of function MvSonicOnPtfm2
000096F6                            
000096F6                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
000096F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096F6                            
000096F6                            
000096F6                            Swing_Move:
000096F6 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000096FA 323C 0080                  		move.w	#$80,d1
000096FE 0828 0000 0022             		btst	#0,obStatus(a0)
00009704 6700                       		beq.s	loc_7B78
00009706 4440                       		neg.w	d0
00009708 D041                       		add.w	d1,d0
0000970A                            
0000970A                            loc_7B78:
0000970A 6000                       		bra.s	Swing_Move2
0000970C                            ; End of function Swing_Move
0000970C                            
0000970C                            
0000970C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000970C                            
0000970C                            
0000970C                            Obj48_Move:
0000970C 4A28 003D                  		tst.b	$3D(a0)
00009710 6600                       		bne.s	loc_7B9C
00009712 3028 003E                  		move.w	$3E(a0),d0
00009716 5040                       		addq.w	#8,d0
00009718 3140 003E                  		move.w	d0,$3E(a0)
0000971C D168 0026                  		add.w	d0,obAngle(a0)
00009720 0C40 0200                  		cmpi.w	#$200,d0
00009724 6600                       		bne.s	loc_7BB6
00009726 117C 0001 003D             		move.b	#1,$3D(a0)
0000972C 6000                       		bra.s	loc_7BB6
0000972E                            ; ===========================================================================
0000972E                            
0000972E                            loc_7B9C:
0000972E 3028 003E                  		move.w	$3E(a0),d0
00009732 5140                       		subq.w	#8,d0
00009734 3140 003E                  		move.w	d0,$3E(a0)
00009738 D168 0026                  		add.w	d0,obAngle(a0)
0000973C 0C40 FE00                  		cmpi.w	#-$200,d0
00009740 6600                       		bne.s	loc_7BB6
00009742 117C 0000 003D             		move.b	#0,$3D(a0)
00009748                            
00009748                            loc_7BB6:
00009748 1028 0026                  		move.b	obAngle(a0),d0
0000974C                            ; End of function Obj48_Move
0000974C                            
0000974C                            
0000974C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000974C                            
0000974C                            
0000974C                            Swing_Move2:
0000974C 6100 A2E4                  		bsr.w	CalcSine
00009750 3428 0038                  		move.w	$38(a0),d2
00009754 3628 003A                  		move.w	$3A(a0),d3
00009758 45E8 0028                  		lea	obSubtype(a0),a2
0000975C 7C00                       		moveq	#0,d6
0000975E 1C1A                       		move.b	(a2)+,d6
00009760                            
00009760                            loc_7BCE:
00009760 7800                       		moveq	#0,d4
00009762 181A                       		move.b	(a2)+,d4
00009764 ED4C                       		lsl.w	#6,d4
00009766 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0000976C 2244                       		movea.l	d4,a1
0000976E 7800                       		moveq	#0,d4
00009770 1829 003C                  		move.b	$3C(a1),d4
00009774 2A04                       		move.l	d4,d5
00009776 C9C0                       		muls.w	d0,d4
00009778 E084                       		asr.l	#8,d4
0000977A CBC1                       		muls.w	d1,d5
0000977C E085                       		asr.l	#8,d5
0000977E D842                       		add.w	d2,d4
00009780 DA43                       		add.w	d3,d5
00009782 3344 000C                  		move.w	d4,obY(a1)
00009786 3345 0008                  		move.w	d5,obX(a1)
0000978A 51CE FFD4                  		dbf	d6,loc_7BCE
0000978E 4E75                       		rts	
00009790                            ; End of function Swing_Move2
00009790                            
00009790                            ; ===========================================================================
00009790                            
00009790                            Swing_ChkDel:
000097AE 4E75                       		rts	
000097B0                            ; ===========================================================================
000097B0                            
000097B0                            Swing_DelAll:
000097B0 7400                       		moveq	#0,d2
000097B2 45E8 0028                  		lea	obSubtype(a0),a2
000097B6 141A                       		move.b	(a2)+,d2
000097B8                            
000097B8                            Swing_DelLoop:
000097B8 7000                       		moveq	#0,d0
000097BA 101A                       		move.b	(a2)+,d0
000097BC ED48                       		lsl.w	#6,d0
000097BE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000097C4 2240                       		movea.l	d0,a1
000097C6 6100 0000                  		bsr.w	DeleteChild
000097CA 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000097CE 4E75                       		rts	
000097D0                            ; ===========================================================================
000097D0                            
000097D0                            Swing_Delete:	; Routine 6, 8
000097D0 6100 0000                  		bsr.w	DeleteObject
000097D4 4E75                       		rts	
000097D6                            ; ===========================================================================
000097D6                            
000097D6                            Swing_Display:	; Routine $A
000097D6 6000 0000                  		bra.w	DisplaySprite
000097D6 6000 0000                  		bra.w	DisplaySprite
000097DA                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
000097DA                            ; ---------------------------------------------------------------------------
000097DA                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000097DA                            ; ---------------------------------------------------------------------------
000097DA                            Map_Swing_GHZ_internal:
000097DA 0000                       		dc.w @block-Map_Swing_GHZ_internal
000097DC 0000                       		dc.w @chain-Map_Swing_GHZ_internal
000097DE 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
000097E0 02                         @block:		dc.b 2
000097E1 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000097E6 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000097EB 01                         @chain:		dc.b 1
000097EC F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000097F1 01                         @anchor:	dc.b 1
000097F2 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000097F8 00                         		even
000097F8 00                         		even
000097F8                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000097F8                            ; ---------------------------------------------------------------------------
000097F8                            ; Sprite mappings - SLZ	swinging platforms
000097F8                            ; ---------------------------------------------------------------------------
000097F8                            Map_Swing_SLZ_internal:
000097F8 0000                       		dc.w @block-Map_Swing_SLZ_internal
000097FA 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000097FC 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000097FE 08                         @block:		dc.b 8
000097FF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009804 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009809 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000980E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009813 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009818 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000981D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009822 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009827 01                         @chain:		dc.b 1
00009828 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000982D 01                         @anchor:	dc.b 1
0000982E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009834 00                         		even
00009834 00                         		even
00009834                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009834                            ; ---------------------------------------------------------------------------
00009834                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009834                            ; ---------------------------------------------------------------------------
00009834                            
00009834                            Helix:
00009834 7000                       		moveq	#0,d0
00009836 1028 0024                  		move.b	obRoutine(a0),d0
0000983A 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
0000983E 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009842                            ; ===========================================================================
00009842 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009844 0000                       		dc.w Hel_Action-Hel_Index
00009846 0000                       		dc.w Hel_Action-Hel_Index
00009848 0000                       		dc.w Hel_Delete-Hel_Index
0000984A 0000                       		dc.w Hel_Display-Hel_Index
0000984C                            
0000984C =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
0000984C                            
0000984C                            ;		$29-38 are used for child object addresses
0000984C                            ; ===========================================================================
0000984C                            
0000984C                            Hel_Main:	; Routine 0
0000984C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009850 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
00009858 317C 4398 0002             		move.w	#$4398,obGfx(a0)
0000985E 117C 0007 0022             		move.b	#7,obStatus(a0)
00009864 117C 0004 0001             		move.b	#4,obRender(a0)
0000986A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009870 117C 0008 0014             		move.b	#8,obActWid(a0)
00009876 3428 000C                  		move.w	obY(a0),d2
0000987A 3628 0008                  		move.w	obX(a0),d3
0000987E 1810                       		move.b	0(a0),d4
00009880 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009884 7200                       		moveq	#0,d1
00009886 1212                       		move.b	(a2),d1		; move helix length to d1
00009888 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
0000988C 3001                       		move.w	d1,d0
0000988E E248                       		lsr.w	#1,d0
00009890 E948                       		lsl.w	#4,d0
00009892 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
00009894 5501                       		subq.b	#2,d1
00009896 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
00009898 7C00                       		moveq	#0,d6
0000989A                            
0000989A                            Hel_Build:
0000989A 6100 0000                  		bsr.w	FindFreeObj
0000989E 6600                       		bne.s	Hel_Action
000098A0 5228 0028                  		addq.b	#1,obSubtype(a0)
000098A4 3A09                       		move.w	a1,d5
000098A6 0445 D000                  		subi.w	#$D000,d5
000098AA EC4D                       		lsr.w	#6,d5
000098AC 0245 007F                  		andi.w	#$7F,d5
000098B0 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000098B2 137C 0008 0024             		move.b	#8,obRoutine(a1)
000098B8 1284                       		move.b	d4,0(a1)
000098BA 3342 000C                  		move.w	d2,ObY(a1)
000098BE 3343 0008                  		move.w	d3,obX(a1)
000098C2 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000098C8 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000098CE 137C 0004 0001             		move.b	#4,obRender(a1)
000098D4 337C 0180 0018             		move.w	#$180,obPriority(a1)
000098DA 137C 0008 0014             		move.b	#8,obActWid(a1)
000098E0 1346 003E                  		move.b	d6,hel_frame(a1)
000098E4 5206                       		addq.b	#1,d6
000098E6 0206 0007                  		andi.b	#7,d6
000098EA 0643 0010                  		addi.w	#$10,d3
000098EE B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
000098F2 6600                       		bne.s	Hel_NotCentre	; if not, branch
000098F4                            
000098F4 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000098F8 5206                       		addq.b	#1,d6
000098FA 0206 0007                  		andi.b	#7,d6
000098FE 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009902 5228 0028                  		addq.b	#1,obSubtype(a0)
00009906                            
00009906                            	Hel_NotCentre:
00009906 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000990A                            
0000990A                            Hel_Action:	; Routine 2, 4
0000990A 6100 0000                  		bsr.w	Hel_RotateSpikes
0000990E 6100 0000                  		bsr.w	DisplaySprite
00009912 6000 0000                  		bra.w	Hel_ChkDel
00009916                            
00009916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009916                            
00009916                            
00009916                            Hel_RotateSpikes:
00009916 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000991A 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009920 D028 003E                  		add.b	hel_frame(a0),d0
00009924 0200 0007                  		andi.b	#7,d0
00009928 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000992C 6600                       		bne.s	locret_7DA6
0000992E 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009934                            
00009934                            locret_7DA6:
00009934 4E75                       		rts	
00009936                            ; End of function Hel_RotateSpikes
00009936                            
00009936                            ; ===========================================================================
00009936                            
00009936                            Hel_ChkDel:
00009954 4E75                       		rts	
00009956                            ; ===========================================================================
00009956                            
00009956                            Hel_DelAll:
00009956 7400                       		moveq	#0,d2
00009958 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000995C 141A                       		move.b	(a2)+,d2	; move helix length to d2
0000995E 5502                       		subq.b	#2,d2
00009960 6500                       		bcs.s	Hel_Delete
00009962                            
00009962                            	Hel_DelLoop:
00009962 7000                       		moveq	#0,d0
00009964 101A                       		move.b	(a2)+,d0
00009966 ED48                       		lsl.w	#6,d0
00009968 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000996E 2240                       		movea.l	d0,a1		; get child address
00009970 6100 0000                  		bsr.w	DeleteChild	; delete object
00009974 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009978                            
00009978                            Hel_Delete:	; Routine 6
00009978 6100 0000                  		bsr.w	DeleteObject
0000997C 4E75                       		rts	
0000997E                            ; ===========================================================================
0000997E                            
0000997E                            Hel_Display:	; Routine 8
0000997E 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009982 6000 0000                  		bra.w	DisplaySprite
00009982 6000 0000                  		bra.w	DisplaySprite
00009986                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009986                            ; ---------------------------------------------------------------------------
00009986                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009986                            ; ---------------------------------------------------------------------------
00009986                            Map_Hel_internal:
00009986 0000                       		dc.w byte_7E08-Map_Hel_internal
00009988 0000                       		dc.w byte_7E0E-Map_Hel_internal
0000998A 0000                       		dc.w byte_7E14-Map_Hel_internal
0000998C 0000                       		dc.w byte_7E1A-Map_Hel_internal
0000998E 0000                       		dc.w byte_7E20-Map_Hel_internal
00009990 0000                       		dc.w byte_7E26-Map_Hel_internal
00009992 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009994 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009996 01                         byte_7E08:	dc.b 1
00009997 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
0000999C 01                         byte_7E0E:	dc.b 1
0000999D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000099A2 01                         byte_7E14:	dc.b 1
000099A3 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000099A8 01                         byte_7E1A:	dc.b 1
000099A9 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000099AE 01                         byte_7E20:	dc.b 1
000099AF 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000099B4 01                         byte_7E26:	dc.b 1
000099B5 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000099BA 01                         byte_7E2C:	dc.b 1
000099BB F4                         		dc.b $F4
000099BC                            byte_7E2E:	; reads the 0 below	; not visible
000099BC 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000099C0                            		even
000099C0                            		even
000099C0                            		include	"_incObj\18 Platforms.asm"
000099C0                            ; ---------------------------------------------------------------------------
000099C0                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000099C0                            ; ---------------------------------------------------------------------------
000099C0                            
000099C0                            BasicPlatform:
000099C0 7000                       		moveq	#0,d0
000099C2 1028 0024                  		move.b	obRoutine(a0),d0
000099C6 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000099CA 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000099CE                            ; ===========================================================================
000099CE 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000099D0 0000                       		dc.w Plat_Solid-Plat_Index
000099D2 0000                       		dc.w Plat_Action2-Plat_Index
000099D4 0000                       		dc.w Plat_Delete-Plat_Index
000099D6 0000                       		dc.w Plat_Action-Plat_Index
000099D8                            ; ===========================================================================
000099D8                            
000099D8                            Plat_Main:	; Routine 0
000099D8 5428 0024                  		addq.b	#2,obRoutine(a0)
000099DC 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000099E2 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
000099EA 117C 0020 0014             		move.b	#$20,obActWid(a0)
000099F0 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
000099F6 6600                       		bne.s	@notSYZ
000099F8                            
000099F8 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009A00 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A06                            
00009A06                            	@notSYZ:
00009A06 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009A0C 6600                       		bne.s	@notSLZ
00009A0E 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009A16 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A1C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A22 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009A28                            
00009A28                            	@notSLZ:
00009A28 117C 0004 0001             		move.b	#4,obRender(a0)
00009A2E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A34 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009A3A 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009A40 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009A46 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009A4C 7200                       		moveq	#0,d1
00009A4E 1028 0028                  		move.b	obSubtype(a0),d0
00009A52 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009A56 6600                       		bne.s	@setframe	; if not, branch
00009A58 5201                       		addq.b	#1,d1		; use frame #1
00009A5A 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009A60                            
00009A60                            	@setframe:
00009A60 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009A64                            
00009A64                            Plat_Solid:	; Routine 2
00009A64 4A28 0038                  		tst.b	$38(a0)
00009A68 6700                       		beq.s	loc_7EE0
00009A6A 5928 0038                  		subq.b	#4,$38(a0)
00009A6E                            
00009A6E                            	loc_7EE0:
00009A6E 7200                       		moveq	#0,d1
00009A70 1228 0014                  		move.b	obActWid(a0),d1
00009A74 6100 F56C                  		bsr.w	PlatformObject
00009A78                            
00009A78                            Plat_Action:	; Routine 8
00009A78 6100 0000                  		bsr.w	Plat_Move
00009A7C 6100 0000                  		bsr.w	Plat_Nudge
00009A80 6100 0000                  		bsr.w	DisplaySprite
00009A84 6000 0000                  		bra.w	Plat_ChkDel
00009A88                            ; ===========================================================================
00009A88                            
00009A88                            Plat_Action2:	; Routine 4
00009A88 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009A8E 6700                       		beq.s	loc_7F06
00009A90 5828 0038                  		addq.b	#4,$38(a0)
00009A94                            
00009A94                            	loc_7F06:
00009A94 7200                       		moveq	#0,d1
00009A96 1228 0014                  		move.b	obActWid(a0),d1
00009A9A 6100 F6BA                  		bsr.w	ExitPlatform
00009A9E 3F28 0008                  		move.w	obX(a0),-(sp)
00009AA2 6100 0000                  		bsr.w	Plat_Move
00009AA6 6100 0000                  		bsr.w	Plat_Nudge
00009AAA 341F                       		move.w	(sp)+,d2
00009AAC 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009AB0 6100 0000                  		bsr.w	DisplaySprite
00009AB4 6000 0000                  		bra.w	Plat_ChkDel
00009AB8                            
00009AB8 4E75                       		rts
00009ABA                            
00009ABA                            ; ---------------------------------------------------------------------------
00009ABA                            ; Subroutine to	move platform slightly when you	stand on it
00009ABA                            ; ---------------------------------------------------------------------------
00009ABA                            
00009ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009ABA                            
00009ABA                            
00009ABA                            Plat_Nudge:
00009ABA 1028 0038                  		move.b	$38(a0),d0
00009ABE 6100 9F72                  		bsr.w	CalcSine
00009AC2 323C 0400                  		move.w	#$400,d1
00009AC6 C1C1                       		muls.w	d1,d0
00009AC8 4840                       		swap	d0
00009ACA D068 002C                  		add.w	$2C(a0),d0
00009ACE 3140 000C                  		move.w	d0,obY(a0)
00009AD2 4E75                       		rts	
00009AD4                            ; End of function Plat_Nudge
00009AD4                            
00009AD4                            ; ---------------------------------------------------------------------------
00009AD4                            ; Subroutine to	move platforms
00009AD4                            ; ---------------------------------------------------------------------------
00009AD4                            
00009AD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AD4                            
00009AD4                            
00009AD4                            Plat_Move:
00009AD4 7000                       		moveq	#0,d0
00009AD6 1028 0028                  		move.b	obSubtype(a0),d0
00009ADA 0240 000F                  		andi.w	#$F,d0
00009ADE D040                       		add.w	d0,d0
00009AE0 323B 0000                  		move.w	@index(pc,d0.w),d1
00009AE4 4EFB 1000                  		jmp	@index(pc,d1.w)
00009AE8                            ; End of function Plat_Move
00009AE8                            
00009AE8                            ; ===========================================================================
00009AE8 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009AEC 0000 0000                  		dc.w @type02-@index, @type03-@index
00009AF0 0000 0000                  		dc.w @type04-@index, @type05-@index
00009AF4 0000 0000                  		dc.w @type06-@index, @type07-@index
00009AF8 0000 0000                  		dc.w @type08-@index, @type00-@index
00009AFC 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009B00 0000                       		dc.w @type0C-@index
00009B02                            ; ===========================================================================
00009B02                            
00009B02                            @type00:
00009B02 4E75                       		rts			; platform 00 doesn't move
00009B04                            ; ===========================================================================
00009B04                            
00009B04                            @type05:
00009B04 3028 0032                  		move.w	$32(a0),d0
00009B08 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B0C 4401                       		neg.b	d1		; reverse platform-motion
00009B0E 0601 0040                  		addi.b	#$40,d1
00009B12 6000                       		bra.s	@type01_move
00009B14                            ; ===========================================================================
00009B14                            
00009B14                            @type01:
00009B14 3028 0032                  		move.w	$32(a0),d0
00009B18 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B1C 0401 0040                  		subi.b	#$40,d1
00009B20                            
00009B20                            	@type01_move:
00009B20 4881                       		ext.w	d1
00009B22 D041                       		add.w	d1,d0
00009B24 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009B28 6000 0000                  		bra.w	@chgmotion
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            @type0C:
00009B2C 3028 0034                  		move.w	$34(a0),d0
00009B30 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009B34 4401                       		neg.b	d1		; reverse platform-motion
00009B36 0601 0030                  		addi.b	#$30,d1
00009B3A 6000                       		bra.s	@type02_move
00009B3C                            ; ===========================================================================
00009B3C                            
00009B3C                            @type0B:
00009B3C 3028 0034                  		move.w	$34(a0),d0
00009B40 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009B44 0401 0030                  		subi.b	#$30,d1
00009B48 6000                       		bra.s	@type02_move
00009B4A                            ; ===========================================================================
00009B4A                            
00009B4A                            @type06:
00009B4A 3028 0034                  		move.w	$34(a0),d0
00009B4E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B52 4401                       		neg.b	d1		; reverse platform-motion
00009B54 0601 0040                  		addi.b	#$40,d1
00009B58 6000                       		bra.s	@type02_move
00009B5A                            ; ===========================================================================
00009B5A                            
00009B5A                            @type02:
00009B5A 3028 0034                  		move.w	$34(a0),d0
00009B5E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B62 0401 0040                  		subi.b	#$40,d1
00009B66                            
00009B66                            	@type02_move:
00009B66 4881                       		ext.w	d1
00009B68 D041                       		add.w	d1,d0
00009B6A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009B6E 6000 0000                  		bra.w	@chgmotion
00009B72                            ; ===========================================================================
00009B72                            
00009B72                            @type03:
00009B72 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009B76 6600                       		bne.s	@type03_wait	; if yes, branch
00009B78 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009B7E 6700                       		beq.s	@type03_nomove	; if not, branch
00009B80 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009B86                            
00009B86                            	@type03_nomove:
00009B86 4E75                       		rts	
00009B88                            
00009B88                            	@type03_wait:
00009B88 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009B8C 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009B8E 317C 0020 003A             		move.w	#32,$3A(a0)
00009B94 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009B98 4E75                       		rts	
00009B9A                            ; ===========================================================================
00009B9A                            
00009B9A                            @type04:
00009B9A 4A68 003A                  		tst.w	$3A(a0)
00009B9E 6700                       		beq.s	@loc_8048
00009BA0 5368 003A                  		subq.w	#1,$3A(a0)
00009BA4 6600                       		bne.s	@loc_8048
00009BA6 0828 0003 0022             		btst	#3,obStatus(a0)
00009BAC 6700                       		beq.s	@loc_8042
00009BAE 08E9 0001 0022             		bset	#1,obStatus(a1)
00009BB4 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009BBA 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009BC0 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009BC6 4228 0025                  		clr.b	$25(a0)
00009BCA 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009BD0                            
00009BD0                            	@loc_8042:
00009BD0 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009BD6                            
00009BD6                            	@loc_8048:
00009BD6 2628 002C                  		move.l	$2C(a0),d3
00009BDA 3028 0012                  		move.w	obVelY(a0),d0
00009BDE 48C0                       		ext.l	d0
00009BE0 E180                       		asl.l	#8,d0
00009BE2 D680                       		add.l	d0,d3
00009BE4 2143 002C                  		move.l	d3,$2C(a0)
00009BE8 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009BEE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009BF2 0640 00E0                  		addi.w	#$E0,d0
00009BF6 B068 002C                  		cmp.w	$2C(a0),d0
00009BFA 6400                       		bcc.s	@locret_8074
00009BFC 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009C02                            
00009C02                            	@locret_8074:
00009C02 4E75                       		rts	
00009C04                            ; ===========================================================================
00009C04                            
00009C04                            @type07:
00009C04 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C08 6600                       		bne.s	@type07_wait	; if yes, branch
00009C0A 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009C0E 7000                       		moveq	#0,d0
00009C10 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009C14 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009C16 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009C1A 6700                       		beq.s	@type07_nomove	; if not, branch
00009C1C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009C22                            
00009C22                            	@type07_nomove:
00009C22 4E75                       		rts	
00009C24                            
00009C24                            	@type07_wait:
00009C24 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009C28 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009C2A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009C2E 4E75                       		rts	
00009C30                            ; ===========================================================================
00009C30                            
00009C30                            @type08:
00009C30 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009C34 3028 0034                  		move.w	$34(a0),d0
00009C38 0440 0200                  		subi.w	#$200,d0
00009C3C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009C40 6600                       		bne.s	@type08_nostop	; if not, branch
00009C42 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009C46                            
00009C46                            	@type08_nostop:
00009C46 4E75                       		rts	
00009C48                            ; ===========================================================================
00009C48                            
00009C48                            @type0A:
00009C48 3028 0034                  		move.w	$34(a0),d0
00009C4C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C50 0401 0040                  		subi.b	#$40,d1
00009C54 4881                       		ext.w	d1
00009C56 E241                       		asr.w	#1,d1
00009C58 D041                       		add.w	d1,d0
00009C5A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009C5E                            
00009C5E                            @chgmotion:
00009C5E 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009C64 4E75                       		rts	
00009C66                            ; ===========================================================================
00009C66                            
00009C66                            Plat_ChkDel:
00009C82 4E75                       		rts	
00009C84                            ; ===========================================================================
00009C84                            
00009C84                            Plat_Delete:	; Routine 6
00009C84 6000 0000                  		bra.w	DeleteObject
00009C84 6000 0000                  		bra.w	DeleteObject
00009C88                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009C88                            ; ---------------------------------------------------------------------------
00009C88                            ; Sprite mappings - unused
00009C88                            ; ---------------------------------------------------------------------------
00009C88                            Map_Plat_Unused_internal:
00009C88 0000                       		dc.w @small-Map_Plat_Unused_internal
00009C8A 0000                       		dc.w @large-Map_Plat_Unused_internal
00009C8C 02                         @small:		dc.b 2
00009C8D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009C92 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009C97 0A                         @large:		dc.b $A
00009C98 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009C9D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009CA2 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009CA7 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009CAC 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009CB1 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009CB6 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009CBB 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009CC0 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009CC5 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009CCA                            		even
00009CCA                            		even
00009CCA                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009CCA                            ; ---------------------------------------------------------------------------
00009CCA                            ; Sprite mappings - GHZ	platforms
00009CCA                            ; ---------------------------------------------------------------------------
00009CCA                            Map_Plat_GHZ_internal:
00009CCA 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009CCC 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009CCE 04                         @small:		dc.b 4
00009CCF F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009CD4 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009CD9 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009CDE F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009CE3 0A                         @large:		dc.b $A
00009CE4 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009CE9 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009CEE 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009CF3 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009CF8 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009CFD F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009D02 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009D07 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009D0C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009D11 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009D16                            		even
00009D16                            		even
00009D16                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009D16                            ; ---------------------------------------------------------------------------
00009D16                            ; Sprite mappings - SYZ	platforms
00009D16                            ; ---------------------------------------------------------------------------
00009D16                            Map_Plat_SYZ_internal:
00009D16 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009D18 03                         @platform:	dc.b 3
00009D19 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009D1E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009D23 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009D28                            		even
00009D28                            		even
00009D28                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009D28                            ; ---------------------------------------------------------------------------
00009D28                            ; Sprite mappings - SLZ	platforms
00009D28                            ; ---------------------------------------------------------------------------
00009D28                            Map_Plat_SLZ_internal:
00009D28 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009D2A 02                         @platform:	dc.b 2
00009D2B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009D30 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009D36 00                         		even
00009D36 00                         		even
00009D36                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009D36                            ; ---------------------------------------------------------------------------
00009D36                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009D36                            ; ---------------------------------------------------------------------------
00009D36                            Map_GBall_internal:
00009D36 0000                       		dc.w @shiny-Map_GBall_internal
00009D38 0000                       		dc.w @check1-Map_GBall_internal
00009D3A 0000                       		dc.w @check2-Map_GBall_internal
00009D3C 0000                       		dc.w @check3-Map_GBall_internal
00009D3E 06                         @shiny:		dc.b 6
00009D3F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009D44 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009D49 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009D4E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009D53 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009D58 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009D5D 04                         @check1:	dc.b 4
00009D5E E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009D63 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009D68 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009D6D 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009D72 04                         @check2:	dc.b 4
00009D73 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009D78 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009D7D 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009D82 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009D87 04                         @check3:	dc.b 4
00009D88 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009D8D E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009D92 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009D97 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009D9C                            		even
00009D9C                            		even
00009D9C                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009D9C                            ; ---------------------------------------------------------------------------
00009D9C                            ; Object 1A - GHZ collapsing ledge
00009D9C                            ; ---------------------------------------------------------------------------
00009D9C                            
00009D9C                            CollapseLedge:
00009D9C 7000                       		moveq	#0,d0
00009D9E 1028 0024                  		move.b	obRoutine(a0),d0
00009DA2 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009DA6 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009DAA                            ; ===========================================================================
00009DAA 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009DAE 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009DB2 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009DB6                            
00009DB6 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009DB6 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009DB6                            ; ===========================================================================
00009DB6                            
00009DB6                            Ledge_Main:	; Routine 0
00009DB6 5428 0024                  		addq.b	#2,obRoutine(a0)
00009DBA 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009DC2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009DC8 0028 0004 0001             		ori.b	#4,obRender(a0)
00009DCE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009DD4 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009DDA 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009DE0 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009DE6 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009DEC 08E8 0004 0001             		bset	#4,obRender(a0)
00009DF2                            
00009DF2                            Ledge_Touch:	; Routine 2
00009DF2 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009DF6 6700                       		beq.s	@slope		; if not, branch
00009DF8 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009DFC 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009E00 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009E04                            
00009E04                            	@slope:
00009E04 323C 0030                  		move.w	#$30,d1
00009E08 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009E0E 6100 F2A6                  		bsr.w	SlopeObject
00009E12 6000 0000                  		bra.w	RememberState
00009E16                            ; ===========================================================================
00009E16                            
00009E16                            Ledge_Collapse:	; Routine 4
00009E16 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009E1A 6700 0000                  		beq.w	loc_847A
00009E1E 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009E24 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009E28                            
00009E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E28                            
00009E28                            
00009E28                            Ledge_WalkOff:	; Routine $A
00009E28 323C 0030                  		move.w	#$30,d1
00009E2C 6100 F328                  		bsr.w	ExitPlatform
00009E30 323C 0030                  		move.w	#$30,d1
00009E34 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009E3A 3428 0008                  		move.w	obX(a0),d2
00009E3E 6100 0000                  		bsr.w	SlopeObject2
00009E42 6000 0000                  		bra.w	RememberState
00009E46                            ; End of function Ledge_WalkOff
00009E46                            
00009E46                            ; ===========================================================================
00009E46                            
00009E46                            Ledge_Display:	; Routine 6
00009E46 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009E4A 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009E4C 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009E50 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009E54 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009E58 6000 0000                  		bra.w	DisplaySprite
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            loc_82D0:
00009E5C 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009E60 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009E64 43F8 D000                  		lea	(v_player).w,a1
00009E68 0829 0003 0022             		btst	#3,obStatus(a1)
00009E6E 6700                       		beq.s	loc_82FC
00009E70 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009E74 6600                       		bne.s	locret_8308
00009E76 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009E7C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009E82 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009E88                            
00009E88                            loc_82FC:
00009E88 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009E8E 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009E94                            
00009E94                            locret_8308:
00009E94 4E75                       		rts	
00009E96                            ; ===========================================================================
00009E96                            
00009E96                            Ledge_TimeZero:
00009E96 6100 0000                  		bsr.w	ObjectFall
00009E9A 6100 0000                  		bsr.w	DisplaySprite
00009E9E 4A28 0001                  		tst.b	obRender(a0)
00009EA2 6A00                       		bpl.s	Ledge_Delete
00009EA4 4E75                       		rts	
00009EA6                            ; ===========================================================================
00009EA6                            
00009EA6                            Ledge_Delete:	; Routine 8
00009EA6 6100 0000                  		bsr.w	DeleteObject
00009EAA 4E75                       		rts	
00009EAA 4E75                       		rts	
00009EAC                            		include	"_incObj\53 Collapsing Floors.asm"
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC                            
00009EAC                            CollapseFloor:
00009EAC 7000                       		moveq	#0,d0
00009EAE 1028 0024                  		move.b	obRoutine(a0),d0
00009EB2 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009EB6 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009EBA                            ; ===========================================================================
00009EBA 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009EBE 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009EC2 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009EC6                            
00009EC6 =00000038                  cflo_timedelay:		equ $38
00009EC6 =0000003A                  cflo_collapse_flag:	equ $3A
00009EC6                            ; ===========================================================================
00009EC6                            
00009EC6                            CFlo_Main:	; Routine 0
00009EC6 5428 0024                  		addq.b	#2,obRoutine(a0)
00009ECA 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009ED2 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009ED8 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009EDE 6600                       		bne.s	@notSLZ
00009EE0                            
00009EE0 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009EE6 5428 001A                  		addq.b	#2,obFrame(a0)
00009EEA                            
00009EEA                            	@notSLZ:
00009EEA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009EF0 6600                       		bne.s	@notSBZ
00009EF2 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009EF8                            
00009EF8                            	@notSBZ:
00009EF8 0028 0004 0001             		ori.b	#4,obRender(a0)
00009EFE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009F04 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009F0A 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009F10                            
00009F10                            CFlo_Touch:	; Routine 2
00009F10 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009F14 6700                       		beq.s	@solid		; if not, branch
00009F16 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009F1A 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009F1E 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009F22                            
00009F22                            	@solid:
00009F22 323C 0020                  		move.w	#$20,d1
00009F26 6100 F0BA                  		bsr.w	PlatformObject
00009F2A 4A28 0028                  		tst.b	obSubtype(a0)
00009F2E 6A00                       		bpl.s	@remstate
00009F30 0829 0003 0022             		btst	#3,obStatus(a1)
00009F36 6700                       		beq.s	@remstate
00009F38 08A8 0000 0001             		bclr	#0,obRender(a0)
00009F3E 3029 0008                  		move.w	obX(a1),d0
00009F42 9068 0008                  		sub.w	obX(a0),d0
00009F46 6400                       		bcc.s	@remstate
00009F48 08E8 0000 0001             		bset	#0,obRender(a0)
00009F4E                            
00009F4E                            	@remstate:
00009F4E 6000 0000                  		bra.w	RememberState
00009F52                            ; ===========================================================================
00009F52                            
00009F52                            CFlo_Collapse:	; Routine 4
00009F52 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009F56 6700 0000                  		beq.w	loc_8458
00009F5A 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009F60 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009F64                            
00009F64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F64                            
00009F64                            
00009F64                            CFlo_WalkOff:	; Routine $A
00009F64 323C 0020                  		move.w	#$20,d1
00009F68 6100 F1EC                  		bsr.w	ExitPlatform
00009F6C 3428 0008                  		move.w	obX(a0),d2
00009F70 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009F74 6000 0000                  		bra.w	RememberState
00009F78                            ; End of function CFlo_WalkOff
00009F78                            
00009F78                            ; ===========================================================================
00009F78                            
00009F78                            CFlo_Display:	; Routine 6
00009F78 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009F7C 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009F7E 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009F82 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009F86 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009F8A 6000 0000                  		bra.w	DisplaySprite
00009F8E                            ; ===========================================================================
00009F8E                            
00009F8E                            loc_8402:
00009F8E 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009F92 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009F96 43F8 D000                  		lea	(v_player).w,a1
00009F9A 0829 0003 0022             		btst	#3,obStatus(a1)
00009FA0 6700                       		beq.s	loc_842E
00009FA2 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009FA6 6600                       		bne.s	locret_843A
00009FA8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009FAE 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009FB4 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009FBA                            
00009FBA                            loc_842E:
00009FBA 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009FC0 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009FC6                            
00009FC6                            locret_843A:
00009FC6 4E75                       		rts	
00009FC8                            ; ===========================================================================
00009FC8                            
00009FC8                            CFlo_TimeZero:
00009FC8 6100 0000                  		bsr.w	ObjectFall
00009FCC 6100 0000                  		bsr.w	DisplaySprite
00009FD0 4A28 0001                  		tst.b	obRender(a0)
00009FD4 6A00                       		bpl.s	CFlo_Delete
00009FD6 4E75                       		rts	
00009FD8                            ; ===========================================================================
00009FD8                            
00009FD8                            CFlo_Delete:	; Routine 8
00009FD8 6100 0000                  		bsr.w	DeleteObject
00009FDC 4E75                       		rts	
00009FDE                            ; ===========================================================================
00009FDE                            
00009FDE                            CFlo_Fragment:
00009FDE 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009FE4                            
00009FE4                            loc_8458:
00009FE4 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009FEA 0828 0000 0028             		btst	#0,obSubtype(a0)
00009FF0 6700                       		beq.s	loc_846C
00009FF2 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009FF8                            
00009FF8                            loc_846C:
00009FF8 7207                       		moveq	#7,d1
00009FFA 5228 001A                  		addq.b	#1,obFrame(a0)
00009FFE 6000                       		bra.s	loc_8486
00009FFE 6000                       		bra.s	loc_8486
0000A000                            
0000A000                            ; ===========================================================================
0000A000                            
0000A000                            Ledge_Fragment:
0000A000 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A006                            
0000A006                            loc_847A:
0000A006 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A00C 7218                       		moveq	#$18,d1
0000A00E 5428 001A                  		addq.b	#2,obFrame(a0)
0000A012                            
0000A012                            loc_8486:
0000A012 7000                       		moveq	#0,d0
0000A014 1028 001A                  		move.b	obFrame(a0),d0
0000A018 D040                       		add.w	d0,d0
0000A01A 2668 0004                  		movea.l	obMap(a0),a3
0000A01E D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A022 524B                       		addq.w	#1,a3
0000A024 08E8 0005 0001             		bset	#5,obRender(a0)
0000A02A 1810                       		move.b	0(a0),d4
0000A02C 1A28 0001                  		move.b	obRender(a0),d5
0000A030 2248                       		movea.l	a0,a1
0000A032 6000                       		bra.s	loc_84B2
0000A034                            ; ===========================================================================
0000A034                            
0000A034                            loc_84AA:
0000A034 6100 0000                  		bsr.w	FindFreeObj
0000A038 6600                       		bne.s	loc_84F2
0000A03A 5A4B                       		addq.w	#5,a3
0000A03C                            
0000A03C                            loc_84B2:
0000A03C 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A042 1284                       		move.b	d4,0(a1)
0000A044 234B 0004                  		move.l	a3,obMap(a1)
0000A048 1345 0001                  		move.b	d5,obRender(a1)
0000A04C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A052 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A058 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A05E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A064 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A06A 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A06E B3C8                       		cmpa.l	a0,a1
0000A070 6400                       		bhs.s	loc_84EE
0000A072 6100 0000                  		bsr.w	DisplaySprite1
0000A076                            
0000A076                            loc_84EE:
0000A076 51C9 FFBC                  		dbf	d1,loc_84AA
0000A07A                            
0000A07A                            loc_84F2:
0000A07A 6100 0000                  		bsr.w	DisplaySprite
0000A088                            ; ===========================================================================
0000A088                            ; ---------------------------------------------------------------------------
0000A088                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A088                            ; ---------------------------------------------------------------------------
0000A088 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A098 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A0A2 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A0AA 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A0B2                            
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            
0000A0B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0B2                            
0000A0B2                            
0000A0B2                            SlopeObject2:
0000A0B2 43F8 D000                  		lea	(v_player).w,a1
0000A0B6 0829 0003 0022             		btst	#3,obStatus(a1)
0000A0BC 6700                       		beq.s	locret_856E
0000A0BE 3029 0008                  		move.w	obX(a1),d0
0000A0C2 9068 0008                  		sub.w	obX(a0),d0
0000A0C6 D041                       		add.w	d1,d0
0000A0C8 E248                       		lsr.w	#1,d0
0000A0CA 0828 0000 0001             		btst	#0,obRender(a0)
0000A0D0 6700                       		beq.s	loc_854E
0000A0D2 4640                       		not.w	d0
0000A0D4 D041                       		add.w	d1,d0
0000A0D6                            
0000A0D6                            loc_854E:
0000A0D6 7200                       		moveq	#0,d1
0000A0D8 1232 0000                  		move.b	(a2,d0.w),d1
0000A0DC 3028 000C                  		move.w	obY(a0),d0
0000A0E0 9041                       		sub.w	d1,d0
0000A0E2 7200                       		moveq	#0,d1
0000A0E4 1229 0016                  		move.b	obHeight(a1),d1
0000A0E8 9041                       		sub.w	d1,d0
0000A0EA 3340 000C                  		move.w	d0,obY(a1)
0000A0EE 9468 0008                  		sub.w	obX(a0),d2
0000A0F2 9569 0008                  		sub.w	d2,obX(a1)
0000A0F6                            
0000A0F6                            locret_856E:
0000A0F6 4E75                       		rts	
0000A0F8                            ; End of function SlopeObject2
0000A0F8                            
0000A0F8                            ; ===========================================================================
0000A0F8                            ; ---------------------------------------------------------------------------
0000A0F8                            ; Collision data for GHZ collapsing ledge
0000A0F8                            ; ---------------------------------------------------------------------------
0000A0F8                            Ledge_SlopeData:
0000A0F8                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A128                            		even
0000A128                            
0000A128                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A128                            ; ---------------------------------------------------------------------------
0000A128                            ; Sprite mappings - GHZ	collapsing ledge
0000A128                            ; ---------------------------------------------------------------------------
0000A128                            Map_Ledge_internal:
0000A128 0000                       		dc.w @left-Map_Ledge_internal
0000A12A 0000                       		dc.w @right-Map_Ledge_internal
0000A12C 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A12E 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A130 10                         @left:		dc.b $10
0000A131 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A136 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A13B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A140 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A145 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A14A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A14F F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A154 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A159 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A15E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A163 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A168 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A16D 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A172 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A177 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A17C 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A181 10                         @right:		dc.b $10
0000A182 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A187 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A18C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A191 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A196 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A19B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A1A0 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A1A5 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A1AA F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A1AF F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A1B4 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A1B9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A1BE 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A1C3 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A1C8 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A1CD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A1D2 19                         @leftsmash:	dc.b $19
0000A1D3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A1D8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A1DD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A1E2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A1E7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A1EC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A1F1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A1F6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A1FB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A200 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A205 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A20A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A20F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A214 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A219 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A21E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A223 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A228 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A22D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A232 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A237 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A23C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A241 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A246 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A24B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A250 19                         @rightsmash:	dc.b $19
0000A251 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A256 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A25B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A260 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A265 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A26A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A26F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A274 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A279 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A27E D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A283 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A288 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A28D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A292 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A297 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A29C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A2A1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A2A6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A2AB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2B0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A2B5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A2BA 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A2BF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A2C4 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A2C9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A2CE                            		even
0000A2CE                            		even
0000A2CE                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A2CE                            ; ---------------------------------------------------------------------------
0000A2CE                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A2CE                            ; ---------------------------------------------------------------------------
0000A2CE                            Map_CFlo_internal:
0000A2CE 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A2D0 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A2D2 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A2D4 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A2D6 04                         byte_874E:	dc.b 4
0000A2D7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A2DC 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A2E1 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A2E6 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A2EB 08                         byte_8763:	dc.b 8
0000A2EC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A2F1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A2F6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A2FB F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A300 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A305 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A30A 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A30F 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A314 04                         byte_878C:	dc.b 4
0000A315 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A31A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A31F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A324 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A329 08                         byte_87A1:	dc.b 8
0000A32A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A32F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A334 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A339 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A33E 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A343 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A348 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A34D 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A352                            		even
0000A352                            		even
0000A352                            
0000A352                            		include	"_incObj\1C Scenery.asm"
0000A352                            ; ---------------------------------------------------------------------------
0000A352                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A352                            ; ---------------------------------------------------------------------------
0000A352                            
0000A352                            Scenery:
0000A352 7000                       		moveq	#0,d0
0000A354 1028 0024                  		move.b	obRoutine(a0),d0
0000A358 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A35C 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A360                            ; ===========================================================================
0000A360 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A362 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A364                            ; ===========================================================================
0000A364                            
0000A364                            Scen_Main:	; Routine 0
0000A364 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A368 7000                       		moveq	#0,d0
0000A36A 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A36E C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A372 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A376 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A37A 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A37E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A384 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A388 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A38C 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A390 3028 0018                  		move.w obPriority(a0),d0 
0000A394 E248                       		lsr.w #1,d0 
0000A396 0240 0380                  		andi.w #$380,d0 
0000A39A 3140 0018                  		move.w d0,obPriority(a0)		
0000A39E 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A3A2                            
0000A3A2                            Scen_ChkDel:	; Routine 2
0000A3C0 6000 0000                  		bra.w	DisplaySprite
0000A3C4                            ; ===========================================================================
0000A3C4                            ; ---------------------------------------------------------------------------
0000A3C4                            ; Variables for	object $1C are stored in an array
0000A3C4                            ; ---------------------------------------------------------------------------
0000A3C4 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A3C8 44D8                       		dc.w $44D8		; VRAM setting
0000A3CA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A3CE 0000 0000                  		dc.l Map_Scen
0000A3D2 44D8                       		dc.w $44D8
0000A3D4 0008 0200                  		dc.b 0,	8, 2, 0
0000A3D8 0000 0000                  		dc.l Map_Scen
0000A3DC 44D8                       		dc.w $44D8
0000A3DE 0008 0200                  		dc.b 0,	8, 2, 0
0000A3E2 0000 94CA                  		dc.l Map_Bri
0000A3E6 438E                       		dc.w $438E
0000A3E8 0110 0100                  		dc.b 1,	$10, 1,	0
0000A3EC                            		even
0000A3EC                            		even
0000A3EC                            Map_Scen:	include	"_maps\Scenery.asm"
0000A3EC                            ; ---------------------------------------------------------------------------
0000A3EC                            ; Sprite mappings - SLZ	lava thrower
0000A3EC                            ; ---------------------------------------------------------------------------
0000A3EC                            Map_Scen_internal:
0000A3EC 0000                       		dc.w byte_8858-Map_Scen_internal
0000A3EE 01                         byte_8858:	dc.b 1
0000A3EF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A3F4                            		even
0000A3F4                            		even
0000A3F4                            
0000A3F4                            		include	"_incObj\1D Unused Switch.asm"
0000A3F4                            ; ---------------------------------------------------------------------------
0000A3F4                            ; Object 1D - switch that activates when Sonic touches it
0000A3F4                            ; (this	is not used anywhere in	the game)
0000A3F4                            ; ---------------------------------------------------------------------------
0000A3F4                            
0000A3F4                            MagicSwitch:
0000A3F4 7000                       		moveq	#0,d0
0000A3F6 1028 0024                  		move.b	obRoutine(a0),d0
0000A3FA 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A3FE 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A402                            ; ===========================================================================
0000A402 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A404 0000                       		dc.w Swi_Action-Swi_Index
0000A406 0000                       		dc.w Swi_Delete-Swi_Index
0000A408                            
0000A408 =00000030                  swi_origY:	equ $30		; original y-axis position
0000A408                            ; ===========================================================================
0000A408                            
0000A408                            Swi_Main:	; Routine 0
0000A408 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A40C 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A414 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A41A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A420 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A426 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A42C 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A432                            
0000A432                            Swi_Action:	; Routine 2
0000A432 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A438 323C 0010                  		move.w	#$10,d1
0000A43C 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A440 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A442                            
0000A442 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A446 7001                       		moveq	#1,d0
0000A448 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A44C                            
0000A44C                            Swi_ChkDel:
0000A44C 6100 0000                  		bsr.w	DisplaySprite
0000A46E 4E75                       		rts	
0000A470                            ; ===========================================================================
0000A470                            
0000A470                            Swi_Delete:	; Routine 4
0000A470 6100 0000                  		bsr.w	DeleteObject
0000A474 4E75                       		rts	
0000A476                            
0000A476                            ; ---------------------------------------------------------------------------
0000A476                            ; Subroutine to	check if Sonic touches the object
0000A476                            ; ---------------------------------------------------------------------------
0000A476                            
0000A476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A476                            
0000A476                            
0000A476                            Swi_ChkTouch:
0000A476 43F8 D000                  		lea	(v_player).w,a1
0000A47A 3029 0008                  		move.w	obX(a1),d0
0000A47E 9068 0008                  		sub.w	obX(a0),d0
0000A482 D041                       		add.w	d1,d0
0000A484 6B00                       		bmi.s	Swi_NoTouch
0000A486 D241                       		add.w	d1,d1
0000A488 B041                       		cmp.w	d1,d0
0000A48A 6400                       		bcc.s	Swi_NoTouch
0000A48C 3429 000C                  		move.w	obY(a1),d2
0000A490 1229 0016                  		move.b	obHeight(a1),d1
0000A494 4881                       		ext.w	d1
0000A496 D242                       		add.w	d2,d1
0000A498 3028 000C                  		move.w	obY(a0),d0
0000A49C 0440 0010                  		subi.w	#$10,d0
0000A4A0 9041                       		sub.w	d1,d0
0000A4A2 6200                       		bhi.s	Swi_NoTouch
0000A4A4 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A4A8 6500                       		bcs.s	Swi_NoTouch
0000A4AA 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A4AC 4E75                       		rts	
0000A4AE                            ; ===========================================================================
0000A4AE                            
0000A4AE                            Swi_NoTouch:
0000A4AE 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A4B0 4E75                       		rts	
0000A4B2                            ; End of function Swi_ChkTouch
0000A4B2                            ; End of function Swi_ChkTouch
0000A4B2                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A4B2                            ; ---------------------------------------------------------------------------
0000A4B2                            ; Sprite mappings - Unused switch thingy
0000A4B2                            ; ---------------------------------------------------------------------------
0000A4B2                            Map_Swi_internal:
0000A4B2 0000                       		dc.w byte_891E-Map_Swi_internal
0000A4B4 04                         byte_891E:	dc.b 4
0000A4B5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A4BA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A4BF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A4C4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A4CA 00                         		even
0000A4CA 00                         		even
0000A4CA                            
0000A4CA                            		include	"_incObj\2A SBZ Small Door.asm"
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            ; Object 2A - small vertical door (SBZ)
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            
0000A4CA                            AutoDoor:
0000A4CA 7000                       		moveq	#0,d0
0000A4CC 1028 0024                  		move.b	obRoutine(a0),d0
0000A4D0 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A4D4 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A4D8                            ; ===========================================================================
0000A4D8 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A4DA 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A4DC                            ; ===========================================================================
0000A4DC                            
0000A4DC                            ADoor_Main:	; Routine 0
0000A4DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4E0 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A4E8 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A4EE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A4F4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A4FA                            		;move.b	#4,obPriority(a0)
0000A4FA                            
0000A4FA                            ADoor_OpenShut:	; Routine 2
0000A4FA 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A4FE 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A502 3038 D008                  		move.w	(v_player+obX).w,d0
0000A506 D041                       		add.w	d1,d0
0000A508 B068 0008                  		cmp.w	obX(a0),d0
0000A50C 6500                       		bcs.s	ADoor_Animate
0000A50E 9041                       		sub.w	d1,d0
0000A510 9041                       		sub.w	d1,d0
0000A512 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A516 6400                       		bcc.s	ADoor_Animate	; close door
0000A518 D041                       		add.w	d1,d0
0000A51A B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A51E 6400                       		bcc.s	loc_899A	; if yes, branch
0000A520 0828 0000 0022             		btst	#0,obStatus(a0)
0000A526 6600                       		bne.s	ADoor_Animate
0000A528 6000                       		bra.s	ADoor_Open
0000A52A                            ; ===========================================================================
0000A52A                            
0000A52A                            loc_899A:
0000A52A 0828 0000 0022             		btst	#0,obStatus(a0)
0000A530 6700                       		beq.s	ADoor_Animate
0000A532                            
0000A532                            ADoor_Open:
0000A532 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A538                            
0000A538                            ADoor_Animate:
0000A538 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A53E 6100 0000                  		bsr.w	AnimateSprite
0000A542 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A546 6600                       		bne.s	@remember	; if yes, branch
0000A548 323C 0011                  		move.w	#$11,d1
0000A54C 343C 0020                  		move.w	#$20,d2
0000A550 3602                       		move.w	d2,d3
0000A552 5243                       		addq.w	#1,d3
0000A554 3828 0008                  		move.w	obX(a0),d4
0000A558 6100 0000                  		bsr.w	SolidObject
0000A55C                            
0000A55C                            	@remember:
0000A55C 6000 0000                  		bra.w	RememberState
0000A55C 6000 0000                  		bra.w	RememberState
0000A560                            		include	"_anim\SBZ Small Door.asm"
0000A560                            ; ---------------------------------------------------------------------------
0000A560                            ; Animation script - doors (SBZ)
0000A560                            ; ---------------------------------------------------------------------------
0000A560 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A562 0000                       		dc.w @open-Ani_ADoor
0000A564 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A570 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A57C                            		even
0000A57C                            		even
0000A57C                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A57C                            ; --------------------------------------------------------------------------------
0000A57C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A57C                            ; --------------------------------------------------------------------------------
0000A57C                            
0000A57C                            SME_YnmwF:	
0000A57C 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A580 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A584 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A588 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A58C 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A58E 02                         SME_YnmwF_12:	dc.b 2	
0000A58F E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A594 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A599 02                         SME_YnmwF_1D:	dc.b 2	
0000A59A DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A59F 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A5A4 02                         SME_YnmwF_28:	dc.b 2	
0000A5A5 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A5AA 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A5AF 02                         SME_YnmwF_33:	dc.b 2	
0000A5B0 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A5B5 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A5BA 02                         SME_YnmwF_3E:	dc.b 2	
0000A5BB D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A5C0 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A5C5 02                         SME_YnmwF_49:	dc.b 2	
0000A5C6 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A5CB 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A5D0 02                         SME_YnmwF_54:	dc.b 2	
0000A5D1 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A5D6 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A5DB 02                         SME_YnmwF_5F:	dc.b 2	
0000A5DC C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A5E1 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A5E6 02                         SME_YnmwF_6A:	dc.b 2	
0000A5E7 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A5EC 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A5F2 00                         		even
0000A5F2 00                         		even
0000A5F2                            
0000A5F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5F2                            
0000A5F2                            
0000A5F2                            Obj44_SolidWall:
0000A5F2 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A5F6 6700                       		beq.s	loc_8AA8
0000A5F8 6B00 0000                  		bmi.w	loc_8AC4
0000A5FC 4A40                       		tst.w	d0
0000A5FE 6700 0000                  		beq.w	loc_8A92
0000A602 6B00                       		bmi.s	loc_8A7C
0000A604 4A69 0010                  		tst.w	obVelX(a1)
0000A608 6B00                       		bmi.s	loc_8A92
0000A60A 6000                       		bra.s	loc_8A82
0000A60C                            ; ===========================================================================
0000A60C                            
0000A60C                            loc_8A7C:
0000A60C 4A69 0010                  		tst.w	obVelX(a1)
0000A610 6A00                       		bpl.s	loc_8A92
0000A612                            
0000A612                            loc_8A82:
0000A612 9169 0008                  		sub.w	d0,obX(a1)
0000A616 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A61C 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A622                            
0000A622                            loc_8A92:
0000A622 0829 0001 0022             		btst	#1,obStatus(a1)
0000A628 6600                       		bne.s	loc_8AB6
0000A62A 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A630 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A636 4E75                       		rts	
0000A638                            ; ===========================================================================
0000A638                            
0000A638                            loc_8AA8:
0000A638 0828 0005 0022             		btst	#5,obStatus(a0)
0000A63E 6700                       		beq.s	locret_8AC2
0000A640 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A646                            
0000A646                            loc_8AB6:
0000A646 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A64C 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A652                            
0000A652                            locret_8AC2:
0000A652 4E75                       		rts	
0000A654                            ; ===========================================================================
0000A654                            
0000A654                            loc_8AC4:
0000A654 4A69 0012                  		tst.w	obVelY(a1)
0000A658 6A00                       		bpl.s	locret_8AD8
0000A65A 4A43                       		tst.w	d3
0000A65C 6A00                       		bpl.s	locret_8AD8
0000A65E 9769 000C                  		sub.w	d3,obY(a1)
0000A662 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A668                            
0000A668                            locret_8AD8:
0000A668 4E75                       		rts	
0000A66A                            ; End of function Obj44_SolidWall
0000A66A                            
0000A66A                            
0000A66A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A66A                            
0000A66A                            
0000A66A                            Obj44_SolidWall2:
0000A66A 43F8 D000                  		lea	(v_player).w,a1
0000A66E 3029 0008                  		move.w	obX(a1),d0
0000A672 9068 0008                  		sub.w	obX(a0),d0
0000A676 D041                       		add.w	d1,d0
0000A678 6B00                       		bmi.s	loc_8B48
0000A67A 3601                       		move.w	d1,d3
0000A67C D643                       		add.w	d3,d3
0000A67E B043                       		cmp.w	d3,d0
0000A680 6200                       		bhi.s	loc_8B48
0000A682 1629 0016                  		move.b	obHeight(a1),d3
0000A686 4883                       		ext.w	d3
0000A688 D443                       		add.w	d3,d2
0000A68A 3629 000C                  		move.w	obY(a1),d3
0000A68E 9668 000C                  		sub.w	obY(a0),d3
0000A692 D642                       		add.w	d2,d3
0000A694 6B00                       		bmi.s	loc_8B48
0000A696 3802                       		move.w	d2,d4
0000A698 D844                       		add.w	d4,d4
0000A69A B644                       		cmp.w	d4,d3
0000A69C 6400                       		bhs.s	loc_8B48
0000A69E 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A6A2 6B00                       		bmi.s	loc_8B48
0000A6A4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A6AA 6400                       		bhs.s	loc_8B48
0000A6AC 4A78 FE08                  		tst.w	(v_debuguse).w
0000A6B0 6600                       		bne.s	loc_8B48
0000A6B2 3A00                       		move.w	d0,d5
0000A6B4 B240                       		cmp.w	d0,d1
0000A6B6 6400                       		bhs.s	loc_8B30
0000A6B8 D241                       		add.w	d1,d1
0000A6BA 9041                       		sub.w	d1,d0
0000A6BC 3A00                       		move.w	d0,d5
0000A6BE 4445                       		neg.w	d5
0000A6C0                            
0000A6C0                            loc_8B30:
0000A6C0 3203                       		move.w	d3,d1
0000A6C2 B443                       		cmp.w	d3,d2
0000A6C4 6400                       		bhs.s	loc_8B3C
0000A6C6 9644                       		sub.w	d4,d3
0000A6C8 3203                       		move.w	d3,d1
0000A6CA 4441                       		neg.w	d1
0000A6CC                            
0000A6CC                            loc_8B3C:
0000A6CC BA41                       		cmp.w	d1,d5
0000A6CE 6200                       		bhi.s	loc_8B44
0000A6D0 7801                       		moveq	#1,d4
0000A6D2 4E75                       		rts	
0000A6D4                            ; ===========================================================================
0000A6D4                            
0000A6D4                            loc_8B44:
0000A6D4 78FF                       		moveq	#-1,d4
0000A6D6 4E75                       		rts	
0000A6D8                            ; ===========================================================================
0000A6D8                            
0000A6D8                            loc_8B48:
0000A6D8 7800                       		moveq	#0,d4
0000A6DA 4E75                       		rts	
0000A6DC                            ; End of function Obj44_SolidWall2
0000A6DC                            
0000A6DC                            ; ===========================================================================
0000A6DC                            
0000A6DC                            		include	"_incObj\1E Ball Hog.asm"
0000A6DC                            ; ---------------------------------------------------------------------------
0000A6DC                            ; Object 1E - Ball Hog enemy (SBZ)
0000A6DC                            ; ---------------------------------------------------------------------------
0000A6DC                            
0000A6DC                            BallHog:
0000A6DC 7000                       		moveq	#0,d0
0000A6DE 1028 0024                  		move.b	obRoutine(a0),d0
0000A6E2 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A6E6 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A6EA                            ; ===========================================================================
0000A6EA 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A6EC 0000                       		dc.w Hog_Action-Hog_Index
0000A6EE                            
0000A6EE =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A6EE                            ; ===========================================================================
0000A6EE                            
0000A6EE                            Hog_Main:	; Routine 0
0000A6EE 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A6F4 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A6FA 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A702 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A708 117C 0004 0001             		move.b	#4,obRender(a0)
0000A70E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A714 117C 0005 0020             		move.b	#5,obColType(a0)
0000A71A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A720 6100 0000                  		bsr.w	ObjectFall
0000A724 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A72A 4A41                       		tst.w	d1
0000A72C 6A00                       		bpl.s	@floornotfound
0000A72E D368 000C                  		add.w	d1,obY(a0)
0000A732 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A738 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A73C                            
0000A73C                            	@floornotfound:
0000A73C 4E75                       		rts	
0000A73E                            ; ===========================================================================
0000A73E                            
0000A73E                            Hog_Action:	; Routine 2
0000A73E 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A744 6100 0000                  		bsr.w	AnimateSprite
0000A748 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A74E 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A750 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A754 6700                       		beq.s	@makeball	; if yes, branch
0000A756 6000                       		bra.s	@remember
0000A758                            ; ===========================================================================
0000A758                            
0000A758                            @setlaunchflag:
0000A758 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A75C                            
0000A75C                            @remember:
0000A75C 6000 0000                  		bra.w	RememberState
0000A760                            ; ===========================================================================
0000A760                            
0000A760                            @makeball:
0000A760 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A766 6100 0000                  		bsr.w	FindFreeObj
0000A76A 6600                       		bne.s	@fail
0000A76C 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A770 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A776 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A77C 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A782 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A788 70FC                       		moveq	#-4,d0
0000A78A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A790 6700                       		beq.s	@noflip		; if not, branch
0000A792 4440                       		neg.w	d0
0000A794 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A798                            
0000A798                            	@noflip:
0000A798 D169 0008                  		add.w	d0,obX(a1)
0000A79C 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A7A2 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A7A8                            
0000A7A8                            	@fail:
0000A7A8 60B2                       		bra.s	@remember
0000A7A8 60B2                       		bra.s	@remember
0000A7AA                            		include	"_incObj\20 Cannonball.asm"
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A7AA                            ; ---------------------------------------------------------------------------
0000A7AA                            
0000A7AA                            Cannonball:
0000A7AA 7000                       		moveq	#0,d0
0000A7AC 1028 0024                  		move.b	obRoutine(a0),d0
0000A7B0 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A7B4 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A7B8                            ; ===========================================================================
0000A7B8 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A7BA 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A7BC                            
0000A7BC =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A7BC                            ; ===========================================================================
0000A7BC                            
0000A7BC                            Cbal_Main:	; Routine 0
0000A7BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7C0 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A7C6 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7CE 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A7D4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7DA 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A7E0 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A7E6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A7EC 7000                       		moveq	#0,d0
0000A7EE 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A7F2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A7F6 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A7FA 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A800                            
0000A800                            Cbal_Bounce:	; Routine 2
0000A800 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A806 4A68 0012                  		tst.w	obVelY(a0)
0000A80A 6B00                       		bmi.s	Cbal_ChkExplode
0000A80C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A812 4A41                       		tst.w	d1		; has ball hit the floor?
0000A814 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A816                            
0000A816 D368 000C                  		add.w	d1,obY(a0)
0000A81A 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A820 4A03                       		tst.b	d3
0000A822 6700                       		beq.s	Cbal_ChkExplode
0000A824 6B00                       		bmi.s	loc_8CA4
0000A826 4A68 0010                  		tst.w	obVelX(a0)
0000A82A 6A00                       		bpl.s	Cbal_ChkExplode
0000A82C 4468 0010                  		neg.w	obVelX(a0)
0000A830 6000                       		bra.s	Cbal_ChkExplode
0000A832                            ; ===========================================================================
0000A832                            
0000A832                            loc_8CA4:
0000A832 4A68 0010                  		tst.w	obVelX(a0)
0000A836 6B00                       		bmi.s	Cbal_ChkExplode
0000A838 4468 0010                  		neg.w	obVelX(a0)
0000A83C                            
0000A83C                            Cbal_ChkExplode:
0000A83C 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A840 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A842                            
0000A842                            	Cbal_Explode:
0000A842 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A846 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A84A 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A850 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A854                            ; ===========================================================================
0000A854                            
0000A854                            Cbal_Animate:
0000A854 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A858 6A00                       		bpl.s	Cbal_Display
0000A85A 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A860 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A866                            
0000A866                            Cbal_Display:
0000A866 6100 0000                  		bsr.w	DisplaySprite
0000A86A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A86E 0640 00E0                  		addi.w	#$E0,d0
0000A872 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A876 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A87A 4E75                       		rts	
0000A87A 4E75                       		rts	
0000A87C                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A87C                            ; ---------------------------------------------------------------------------
0000A87C                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A87C                            ; ---------------------------------------------------------------------------
0000A87C                            
0000A87C                            MissileDissolve:
0000A87C 7000                       		moveq	#0,d0
0000A87E 1028 0024                  		move.b	obRoutine(a0),d0
0000A882 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A886 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A88A                            ; ===========================================================================
0000A88A 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A88C 0000                       		dc.w MDis_Animate-MDis_Index
0000A88E                            ; ===========================================================================
0000A88E                            
0000A88E                            MDis_Main:	; Routine 0
0000A88E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A892 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A89A 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A8A0 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8A6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A8AC 117C 0000 0020             		move.b	#0,obColType(a0)
0000A8B2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A8B8 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A8BE 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A8CE                            
0000A8CE                            MDis_Animate:	; Routine 2
0000A8CE 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A8D2 6A00                       		bpl.s	@display
0000A8D4 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A8DA 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A8DE 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A8E4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A8E8                            
0000A8E8                            	@display:
0000A8E8 6000 0000                  		bra.w	DisplaySprite
0000A8EC                            ; ===========================================================================
0000A8EC                            
0000A8EC                            ; ---------------------------------------------------------------------------
0000A8EC                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A8EC                            ; ---------------------------------------------------------------------------
0000A8EC                            
0000A8EC                            ExplosionItem:
0000A8EC 7000                       		moveq	#0,d0
0000A8EE 1028 0024                  		move.b	obRoutine(a0),d0
0000A8F2 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A8F6 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A8FA                            ; ===========================================================================
0000A8FA 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A8FC 0000                       		dc.w ExItem_Main-ExItem_Index
0000A8FE 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A900                            ; ===========================================================================
0000A900                            
0000A900                            ExItem_Animal:	; Routine 0
0000A900 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A904 6100 0000                  		bsr.w	FindFreeObj
0000A908 6600                       		bne.s	ExItem_Main
0000A90A 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A90E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A914 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A91A 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A920                            
0000A920                            ExItem_Main:	; Routine 2
0000A920 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A924 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A92C 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A932 117C 0004 0001             		move.b	#4,obRender(a0)
0000A938 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A93E 117C 0000 0020             		move.b	#0,obColType(a0)
0000A944 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A94A 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A950 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A960                            
0000A960                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A960 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A964 6A00                       		bpl.s	@display
0000A966 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A96C 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A970 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A976 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A97A                            
0000A97A                            	@display:
0000A97A 6000 0000                  		bra.w	DisplaySprite
0000A97E                            ; ===========================================================================
0000A97E                            ; ---------------------------------------------------------------------------
0000A97E                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A97E                            ; ---------------------------------------------------------------------------
0000A97E                            
0000A97E                            ExplosionBomb:
0000A97E 7000                       		moveq	#0,d0
0000A980 1028 0024                  		move.b	obRoutine(a0),d0
0000A984 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A988 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A98C                            ; ===========================================================================
0000A98C 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A98E FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A990                            ; ===========================================================================
0000A990                            
0000A990                            ExBom_Main:	; Routine 0
0000A990 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A994 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A99C 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A9A2 117C 0004 0001             		move.b	#4,obRender(a0)
0000A9A8 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A9AE 117C 0000 0020             		move.b	#0,obColType(a0)
0000A9B4 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A9BA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A9C0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9D0                            		include	"_anim\Ball Hog.asm"
0000A9D0                            ; ---------------------------------------------------------------------------
0000A9D0                            ; Animation script - doors (SBZ)
0000A9D0                            ; ---------------------------------------------------------------------------
0000A9D0 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A9D2 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A9EA 00                         		even
0000A9EA 00                         		even
0000A9EA                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A9EA                            ; --------------------------------------------------------------------------------
0000A9EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A9EA                            ; --------------------------------------------------------------------------------
0000A9EA                            
0000A9EA                            SME_ZER01:	
0000A9EA 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A9EE 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A9F2 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A9F6 02                         SME_ZER01_C:	dc.b 2	
0000A9F7 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A9FC FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AA01 02                         SME_ZER01_17:	dc.b 2	
0000AA02 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AA07 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AA0C 02                         SME_ZER01_22:	dc.b 2	
0000AA0D F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AA12 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AA17 02                         SME_ZER01_2D:	dc.b 2	
0000AA18 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AA1D F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AA22 01                         SME_ZER01_38:	dc.b 1	
0000AA23 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AA28 01                         SME_ZER01_3E:	dc.b 1	
0000AA29 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AA2E                            		even
0000AA2E                            		even
0000AA2E                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AA2E                            ; ---------------------------------------------------------------------------
0000AA2E                            ; Sprite mappings - buzz bomber missile vanishing
0000AA2E                            ; ---------------------------------------------------------------------------
0000AA2E                            Map_MisDissolve_internal:
0000AA2E 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AA30 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AA32 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AA34 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AA36 01                         byte_8EAE:	dc.b 1
0000AA37 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AA3C 01                         byte_8EB4:	dc.b 1
0000AA3D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AA42 01                         byte_8EBA:	dc.b 1
0000AA43 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AA48 01                         byte_8EC0:	dc.b 1
0000AA49 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AA4E                            		even
0000AA4E                            		even
0000AA4E                            		include	"_maps\Explosions.asm"
0000AA4E                            ; ---------------------------------------------------------------------------
0000AA4E                            ; Sprite mappings - explosion from a badnik or monitor
0000AA4E                            ; ---------------------------------------------------------------------------
0000AA4E 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AA52 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AA56 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AA58 01                         byte_8ED0:	dc.b 1
0000AA59 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AA5E 01                         byte_8ED6:	dc.b 1
0000AA5F F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AA64 01                         byte_8EDC:	dc.b 1
0000AA65 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AA6A 04                         byte_8EE2:	dc.b 4
0000AA6B EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AA70 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AA75 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AA7A FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AA7F 04                         byte_8EF7:	dc.b 4
0000AA80 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AA85 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AA8A 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AA8F FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AA94                            		even
0000AA94                            ; ---------------------------------------------------------------------------
0000AA94                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AA94                            ; ---------------------------------------------------------------------------
0000AA94 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AA96 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AA98 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AA9A FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AA9C FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AA9E 01                         byte_8F16:	dc.b 1
0000AA9F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AAA4 01                         byte_8F1C:	dc.b 1
0000AAA5 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AAAA                            		even
0000AAAA                            		even
0000AAAA                            
0000AAAA                            		include	"_incObj\28 Animals.asm"
0000AAAA                            ; ---------------------------------------------------------------------------
0000AAAA                            ; Object 28 - animals
0000AAAA                            ; ---------------------------------------------------------------------------
0000AAAA                            
0000AAAA                            Animals:
0000AAAA 7000                       		moveq	#0,d0
0000AAAC 1028 0024                  		move.b	obRoutine(a0),d0
0000AAB0 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AAB4 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AAB8                            ; ===========================================================================
0000AAB8 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AABC 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AAC0 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000AAC4 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AAC8 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000AACC 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000AAD0 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000AAD4 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AAD8 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AADC 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AAE0 0000                       		dc.w loc_92D6-Anml_Index
0000AAE2                            
0000AAE2 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000AAEE                            
0000AAEE FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000AAF2 0000 0000                  		dc.l Map_Animal1
0000AAF6 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000AAFA 0000 0000                  		dc.l Map_Animal2	; mappings address
0000AAFE FE80 FD00                  		dc.w $FE80, $FD00
0000AB02 0000 0000                  		dc.l Map_Animal1
0000AB06 FEC0 FE80                  		dc.w $FEC0, $FE80
0000AB0A 0000 0000                  		dc.l Map_Animal2
0000AB0E FE40 FD00                  		dc.w $FE40, $FD00
0000AB12 0000 0000                  		dc.l Map_Animal3
0000AB16 FD00 FC00                  		dc.w $FD00, $FC00
0000AB1A 0000 0000                  		dc.l Map_Animal2
0000AB1E FD80 FC80                  		dc.w $FD80, $FC80
0000AB22 0000 0000                  		dc.l Map_Animal3
0000AB26                            
0000AB26 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AB36 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AB46 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AB52                            
0000AB52 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AB66 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AB7A 0000 0000                  		dc.l Map_Animal3
0000AB7E                            
0000AB7E 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AB90 0565 05B3                  		dc.w $565, $5B3
0000AB94                            ; ===========================================================================
0000AB94                            
0000AB94                            Anml_Ending:	; Routine 0
0000AB94 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AB98 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AB9C 7000                       		moveq	#0,d0
0000AB9E 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000ABA2 D040                       		add.w	d0,d0		; multiply d0 by 2
0000ABA4 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000ABA8 0440 0014                  		subi.w	#$14,d0
0000ABAC 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000ABB2 D040                       		add.w	d0,d0
0000ABB4 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000ABBA 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000ABBE 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000ABC4 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000ABCA 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000ABD0 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000ABD6 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ABDC 117C 0004 0001             		move.b	#4,obRender(a0)
0000ABE2 08E8 0000 0001             		bset	#0,obRender(a0)
0000ABE8 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ABEE 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ABF4 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ABFA 6000 0000                  		bra.w	DisplaySprite
0000ABFE                            ; ===========================================================================
0000ABFE                            
0000ABFE                            Anml_FromEnemy:
0000ABFE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AC02 6100 8E08                  		bsr.w	RandomNumber
0000AC06 0240 0001                  		andi.w	#1,d0
0000AC0A 7200                       		moveq	#0,d1
0000AC0C 1238 FE10                  		move.b	(v_zone).w,d1
0000AC10 D241                       		add.w	d1,d1
0000AC12 D240                       		add.w	d0,d1
0000AC14 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AC18 1031 1000                  		move.b	(a1,d1.w),d0
0000AC1C 1140 0030                  		move.b	d0,$30(a0)
0000AC20 E748                       		lsl.w	#3,d0
0000AC22 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AC26 D2C0                       		adda.w	d0,a1
0000AC28 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AC2C 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AC30 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AC34 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AC3A 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AC40 6700                       		beq.s	loc_90C0	; if yes, branch
0000AC42 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AC48                            
0000AC48                            loc_90C0:
0000AC48 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AC4E 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC54 08E8 0000 0001             		bset	#0,obRender(a0)
0000AC5A 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AC60 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AC66 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AC6C 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AC72 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AC78 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AC7C 6600                       		bne.s	loc_911C
0000AC7E 6100 0000                  		bsr.w	FindFreeObj
0000AC82 6600                       		bne.s	Anml_Display
0000AC84 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AC88 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AC8E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AC94 3028 003E                  		move.w	$3E(a0),d0
0000AC98 E248                       		lsr.w	#1,d0
0000AC9A 1340 001A                  		move.b	d0,obFrame(a1)
0000AC9E                            
0000AC9E                            Anml_Display:
0000AC9E 6000 0000                  		bra.w	DisplaySprite
0000ACA2                            ; ===========================================================================
0000ACA2                            
0000ACA2                            loc_911C:
0000ACA2 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000ACA8 4268 0010                  		clr.w	obVelX(a0)
0000ACAC 6000 0000                  		bra.w	DisplaySprite
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            loc_912A:
0000ACB0 4A28 0001                  		tst.b	obRender(a0)
0000ACB4 6A00 0000                  		bpl.w	DeleteObject
0000ACB8 6100 0000                  		bsr.w	ObjectFall
0000ACBC 4A68 0012                  		tst.w	obVelY(a0)
0000ACC0 6B00                       		bmi.s	loc_9180
0000ACC2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ACC8 4A41                       		tst.w	d1
0000ACCA 6A00                       		bpl.s	loc_9180
0000ACCC D368 000C                  		add.w	d1,obY(a0)
0000ACD0 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACD6 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACDC 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ACE2 1028 0030                  		move.b	$30(a0),d0
0000ACE6 D000                       		add.b	d0,d0
0000ACE8 5800                       		addq.b	#4,d0
0000ACEA 1140 0024                  		move.b	d0,obRoutine(a0)
0000ACEE 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ACF2 6700                       		beq.s	loc_9180
0000ACF4 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ACFA 6700                       		beq.s	loc_9180
0000ACFC 4468 0010                  		neg.w	obVelX(a0)
0000AD00 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD06                            
0000AD06                            loc_9180:
0000AD06 6000 0000                  		bra.w	DisplaySprite
0000AD0A                            ; ===========================================================================
0000AD0A                            
0000AD0A                            loc_9184:
0000AD0A 6100 0000                  		bsr.w	ObjectFall
0000AD0E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD14 4A68 0012                  		tst.w	obVelY(a0)
0000AD18 6B00                       		bmi.s	loc_91AE
0000AD1A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD20 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD26 4A41                       		tst.w	d1
0000AD28 6A00                       		bpl.s	loc_91AE
0000AD2A D368 000C                  		add.w	d1,obY(a0)
0000AD2E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD34                            
0000AD34                            loc_91AE:
0000AD34 4A28 0028                  		tst.b	obSubtype(a0)
0000AD38 6600                       		bne.s	loc_9224
0000AD3A 4A28 0001                  		tst.b	obRender(a0)
0000AD3E 6A00 0000                  		bpl.w	DeleteObject
0000AD42 6000 0000                  		bra.w	DisplaySprite
0000AD46                            ; ===========================================================================
0000AD46                            
0000AD46                            loc_91C0:
0000AD46 6100 0000                  		bsr.w	SpeedToPos
0000AD4A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AD50 4A68 0012                  		tst.w	obVelY(a0)
0000AD54 6B00                       		bmi.s	loc_91FC
0000AD56 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD5C 4A41                       		tst.w	d1
0000AD5E 6A00                       		bpl.s	loc_91FC
0000AD60 D368 000C                  		add.w	d1,obY(a0)
0000AD64 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD6A 4A28 0028                  		tst.b	obSubtype(a0)
0000AD6E 6700                       		beq.s	loc_91FC
0000AD70 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AD76 6700                       		beq.s	loc_91FC
0000AD78 4468 0010                  		neg.w	obVelX(a0)
0000AD7C 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD82                            
0000AD82                            loc_91FC:
0000AD82 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AD86 6A00                       		bpl.s	loc_9212
0000AD88 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AD8E 5228 001A                  		addq.b	#1,obFrame(a0)
0000AD92 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AD98                            
0000AD98                            loc_9212:
0000AD98 4A28 0028                  		tst.b	obSubtype(a0)
0000AD9C 6600                       		bne.s	loc_9224
0000AD9E 4A28 0001                  		tst.b	obRender(a0)
0000ADA2 6A00 0000                  		bpl.w	DeleteObject
0000ADA6 6000 0000                  		bra.w	DisplaySprite
0000ADAA                            ; ===========================================================================
0000ADAA                            
0000ADAA                            loc_9224:
0000ADAA 3028 0008                  		move.w	obX(a0),d0
0000ADAE 9078 D008                  		sub.w	(v_player+obX).w,d0
0000ADB2 6500                       		bcs.s	loc_923C
0000ADB4 0440 0180                  		subi.w	#$180,d0
0000ADB8 6A00                       		bpl.s	loc_923C
0000ADBA 4A28 0001                  		tst.b	obRender(a0)
0000ADBE 6A00 0000                  		bpl.w	DeleteObject
0000ADC2                            
0000ADC2                            loc_923C:
0000ADC2 6000 0000                  		bra.w	DisplaySprite
0000ADC6                            ; ===========================================================================
0000ADC6                            
0000ADC6                            loc_9240:
0000ADC6 4A28 0001                  		tst.b	obRender(a0)
0000ADCA 6A00 0000                  		bpl.w	DeleteObject
0000ADCE 5368 0036                  		subq.w	#1,$36(a0)
0000ADD2 6600 0000                  		bne.w	loc_925C
0000ADD6 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000ADDC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ADE2                            
0000ADE2                            loc_925C:
0000ADE2 6000 0000                  		bra.w	DisplaySprite
0000ADE6                            ; ===========================================================================
0000ADE6                            
0000ADE6                            loc_9260:
0000ADE6 6100 0000                  		bsr.w	sub_9404
0000ADEA 6400                       		bcc.s	loc_927C
0000ADEC 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ADF2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADF8 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000ADFE 6000 FF46                  		bra.w	loc_91C0
0000AE02                            ; ===========================================================================
0000AE02                            
0000AE02                            loc_927C:
0000AE02 6000 FFA6                  		bra.w	loc_9224
0000AE06                            ; ===========================================================================
0000AE06                            
0000AE06                            loc_9280:
0000AE06 6100 0000                  		bsr.w	sub_9404
0000AE0A 6A00                       		bpl.s	loc_92B6
0000AE0C 4268 0010                  		clr.w	obVelX(a0)
0000AE10 4268 0032                  		clr.w	$32(a0)
0000AE14 6100 0000                  		bsr.w	SpeedToPos
0000AE18 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE1E 6100 0000                  		bsr.w	loc_93C4
0000AE22 6100 0000                  		bsr.w	loc_93EC
0000AE26 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE2A 6A00                       		bpl.s	loc_92B6
0000AE2C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE32 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE36 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE3C                            
0000AE3C                            loc_92B6:
0000AE3C 6000 FF6C                  		bra.w	loc_9224
0000AE40                            ; ===========================================================================
0000AE40                            
0000AE40                            loc_92BA:
0000AE40 6100 0000                  		bsr.w	sub_9404
0000AE44 6A00                       		bpl.s	loc_9310
0000AE46 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AE4C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE52 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AE58 6000 FEB0                  		bra.w	loc_9184
0000AE5C                            ; ===========================================================================
0000AE5C                            
0000AE5C                            loc_92D6:
0000AE5C 6100 0000                  		bsr.w	ObjectFall
0000AE60 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE66 4A68 0012                  		tst.w	obVelY(a0)
0000AE6A 6B00                       		bmi.s	loc_9310
0000AE6C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE72 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE78 4A41                       		tst.w	d1
0000AE7A 6A00                       		bpl.s	loc_9310
0000AE7C 4628 0029                  		not.b	$29(a0)
0000AE80 6600                       		bne.s	loc_9306
0000AE82 4468 0010                  		neg.w	obVelX(a0)
0000AE86 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE8C                            
0000AE8C                            loc_9306:
0000AE8C D368 000C                  		add.w	d1,obY(a0)
0000AE90 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE96                            
0000AE96                            loc_9310:
0000AE96 6000 FF12                  		bra.w	loc_9224
0000AE9A                            ; ===========================================================================
0000AE9A                            
0000AE9A                            loc_9314:
0000AE9A 6100 0000                  		bsr.w	sub_9404
0000AE9E 6A00                       		bpl.s	loc_932E
0000AEA0 4268 0010                  		clr.w	obVelX(a0)
0000AEA4 4268 0032                  		clr.w	$32(a0)
0000AEA8 6100 0000                  		bsr.w	ObjectFall
0000AEAC 6100 0000                  		bsr.w	loc_93C4
0000AEB0 6100 0000                  		bsr.w	loc_93EC
0000AEB4                            
0000AEB4                            loc_932E:
0000AEB4 6000 FEF4                  		bra.w	loc_9224
0000AEB8                            ; ===========================================================================
0000AEB8                            
0000AEB8                            loc_9332:
0000AEB8 6100 0000                  		bsr.w	sub_9404
0000AEBC 6A00                       		bpl.s	loc_936C
0000AEBE 6100 0000                  		bsr.w	ObjectFall
0000AEC2 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AEC8 4A68 0012                  		tst.w	obVelY(a0)
0000AECC 6B00                       		bmi.s	loc_936C
0000AECE 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AED4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AEDA 4A41                       		tst.w	d1
0000AEDC 6A00                       		bpl.s	loc_936C
0000AEDE 4468 0010                  		neg.w	obVelX(a0)
0000AEE2 0868 0000 0001             		bchg	#0,obRender(a0)
0000AEE8 D368 000C                  		add.w	d1,obY(a0)
0000AEEC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEF2                            
0000AEF2                            loc_936C:
0000AEF2 6000 FEB6                  		bra.w	loc_9224
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            loc_9370:
0000AEF6 6100 0000                  		bsr.w	sub_9404
0000AEFA 6A00                       		bpl.s	loc_93C0
0000AEFC 6100 0000                  		bsr.w	SpeedToPos
0000AF00 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AF06 4A68 0012                  		tst.w	obVelY(a0)
0000AF0A 6B00                       		bmi.s	loc_93AA
0000AF0C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF12 4A41                       		tst.w	d1
0000AF14 6A00                       		bpl.s	loc_93AA
0000AF16 4628 0029                  		not.b	$29(a0)
0000AF1A 6600                       		bne.s	loc_93A0
0000AF1C 4468 0010                  		neg.w	obVelX(a0)
0000AF20 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF26                            
0000AF26                            loc_93A0:
0000AF26 D368 000C                  		add.w	d1,obY(a0)
0000AF2A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF30                            
0000AF30                            loc_93AA:
0000AF30 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF34 6A00                       		bpl.s	loc_93C0
0000AF36 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF3C 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF40 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF46                            
0000AF46                            loc_93C0:
0000AF46 6000 FE62                  		bra.w	loc_9224
0000AF4A                            ; ===========================================================================
0000AF4A                            
0000AF4A                            loc_93C4:
0000AF4A 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF50 4A68 0012                  		tst.w	obVelY(a0)
0000AF54 6B00                       		bmi.s	locret_93EA
0000AF56 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF5C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF62 4A41                       		tst.w	d1
0000AF64 6A00                       		bpl.s	locret_93EA
0000AF66 D368 000C                  		add.w	d1,obY(a0)
0000AF6A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF70                            
0000AF70                            locret_93EA:
0000AF70 4E75                       		rts	
0000AF72                            ; ===========================================================================
0000AF72                            
0000AF72                            loc_93EC:
0000AF72 08E8 0000 0001             		bset	#0,obRender(a0)
0000AF78 3028 0008                  		move.w	obX(a0),d0
0000AF7C 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AF80 6400                       		bcc.s	locret_9402
0000AF82 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AF88                            
0000AF88                            locret_9402:
0000AF88 4E75                       		rts	
0000AF8A                            
0000AF8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF8A                            
0000AF8A                            
0000AF8A                            sub_9404:
0000AF8A 3038 D008                  		move.w	(v_player+obX).w,d0
0000AF8E 9068 0008                  		sub.w	obX(a0),d0
0000AF92 0440 00B8                  		subi.w	#$B8,d0
0000AF96 4E75                       		rts	
0000AF98                            ; End of function sub_9404
0000AF98                            ; End of function sub_9404
0000AF98                            		include	"_incObj\29 Points.asm"
0000AF98                            ; ---------------------------------------------------------------------------
0000AF98                            ; Object 29 - points that appear when you destroy something
0000AF98                            ; ---------------------------------------------------------------------------
0000AF98                            
0000AF98                            Points:
0000AF98 7000                       		moveq	#0,d0
0000AF9A 1028 0024                  		move.b	obRoutine(a0),d0
0000AF9E 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AFA2 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AFA6 6000 0000                  		bra.w	DisplaySprite
0000AFAA                            ; ===========================================================================
0000AFAA 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AFAC 0000                       		dc.w Poi_Slower-Poi_Index
0000AFAE                            ; ===========================================================================
0000AFAE                            
0000AFAE                            Poi_Main:	; Routine 0
0000AFAE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AFB2 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AFBA 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000AFC0 117C 0004 0001             		move.b	#4,obRender(a0)
0000AFC6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AFCC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AFD2 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AFD8                            
0000AFD8                            Poi_Slower:	; Routine 2
0000AFD8 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AFDC 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AFE0 6100 0000                  		bsr.w	SpeedToPos
0000AFE4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AFEA 4E75                       		rts	
0000AFEA 4E75                       		rts	
0000AFEC                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AFEC                            ; ---------------------------------------------------------------------------
0000AFEC                            ; Sprite mappings - animals
0000AFEC                            ; ---------------------------------------------------------------------------
0000AFEC                            Map_Animal1_internal:
0000AFEC 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AFEE 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AFF0 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AFF2 01                         byte_946C:	dc.b 1
0000AFF3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AFF8 01                         byte_9472:	dc.b 1
0000AFF9 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AFFE 01                         byte_9478:	dc.b 1
0000AFFF F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B004                            		even
0000B004                            		even
0000B004                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B004                            ; ---------------------------------------------------------------------------
0000B004                            ; Sprite mappings - animals
0000B004                            ; ---------------------------------------------------------------------------
0000B004                            Map_Animal2_internal:
0000B004 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B006 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B008 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B00A 01                         byte_9484:	dc.b 1
0000B00B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B010 01                         byte_948A:	dc.b 1
0000B011 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B016 01                         byte_9490:	dc.b 1
0000B017 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B01C                            		even
0000B01C                            		even
0000B01C                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B01C                            ; ---------------------------------------------------------------------------
0000B01C                            ; Sprite mappings - animals
0000B01C                            ; ---------------------------------------------------------------------------
0000B01C                            Map_Animal3_internal:
0000B01C 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B01E 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B020 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B022 01                         byte_949C:	dc.b 1
0000B023 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B028 01                         byte_94A2:	dc.b 1
0000B029 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B02E 01                         byte_94A8:	dc.b 1
0000B02F FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B034                            		even
0000B034                            		even
0000B034                            Map_Poi:	include	"_maps\Points.asm"
0000B034                            ; --------------------------------------------------------------------------------
0000B034                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B034                            ; --------------------------------------------------------------------------------
0000B034                            
0000B034                            SME_qLvsg:	
0000B034 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B038 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B03C 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B040 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B042 01                         SME_qLvsg_E:	dc.b 1	
0000B043 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B048 01                         SME_qLvsg_14:	dc.b 1	
0000B049 FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B04E 01                         SME_qLvsg_1A:	dc.b 1	
0000B04F FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B054 01                         SME_qLvsg_20:	dc.b 1	
0000B055 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B05A 01                         SME_qLvsg_26:	dc.b 1	
0000B05B FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B060 02                         SME_qLvsg_2C:	dc.b 2	
0000B061 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B066 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B06B 02                         SME_qLvsg_37:	dc.b 2	
0000B06C FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B071 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B076                            		even
0000B076                            		even
0000B076                            
0000B076                            		include	"_incObj\1F Crabmeat.asm"
0000B076                            ; ---------------------------------------------------------------------------
0000B076                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B076                            ; ---------------------------------------------------------------------------
0000B076                            
0000B076                            Crabmeat:
0000B076 7000                       		moveq	#0,d0
0000B078 1028 0024                  		move.b	obRoutine(a0),d0
0000B07C 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B080 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B084                            ; ===========================================================================
0000B084                            Crab_Index:
0000B084 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B086 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B088 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B08A 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B08C 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B08E                            
0000B08E =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B08E =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B08E =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B08E =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B08E =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B08E                            
0000B08E =00000030                  crab_timedelay:	equ $30
0000B08E =00000032                  crab_mode:	equ $32
0000B08E                            ; ===========================================================================
0000B08E                            
0000B08E                            Crab_Main:	; Routine 0
0000B08E 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B094 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B09A 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B0A2 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B0A8 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0AE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B0B4 117C 0006 0020             		move.b	#6,obColType(a0)
0000B0BA 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B0C0 6100 0000                  		bsr.w	ObjectFall
0000B0C4 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B0CA 4A41                       		tst.w	d1
0000B0CC 6A00                       		bpl.s	@floornotfound
0000B0CE D368 000C                  		add.w	d1,obY(a0)
0000B0D2 1143 0026                  		move.b	d3,obAngle(a0)
0000B0D6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B0DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B0E0                            
0000B0E0                            	@floornotfound:
0000B0E0 4E75                       		rts	
0000B0E2                            ; ===========================================================================
0000B0E2                            
0000B0E2                            Crab_Action:	; Routine 2
0000B0E2 7000                       		moveq	#0,d0
0000B0E4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B0E8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B0EC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B0F0 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B0F6 6100 0000                  		bsr.w	AnimateSprite
0000B0FA 6000 0000                  		bra.w	RememberState
0000B0FE                            ; ===========================================================================
0000B0FE 0000                       @index:		dc.w @waittofire-@index
0000B100 0000                       		dc.w @walkonfloor-@index
0000B102                            ; ===========================================================================
0000B102                            
0000B102                            @waittofire:
0000B102 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B106 6A00                       		bpl.s	@dontmove
0000B108 4A28 0001                  		tst.b	obRender(a0)
0000B10C 6A00                       		bpl.s	@movecrab
0000B10E 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B114 6600                       		bne.s	@fire
0000B116                            
0000B116                            	@movecrab:
0000B116 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B11A 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B120 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B126 6100 0000                  		bsr.w	Crab_SetAni
0000B12A 5600                       		addq.b	#3,d0
0000B12C 1140 001C                  		move.b	d0,obAnim(a0)
0000B130 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B136 6600                       		bne.s	@noflip
0000B138 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B13C                            
0000B13C                            	@dontmove:
0000B13C                            	@noflip:
0000B13C 4E75                       		rts	
0000B13E                            ; ===========================================================================
0000B13E                            
0000B13E                            @fire:
0000B13E 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B144 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B14A 6100 0000                  		bsr.w	FindFreeObj
0000B14E 6600                       		bne.s	@failleft
0000B150 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B154 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B15A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B160 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B166 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B16C 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B172                            
0000B172                            	@failleft:
0000B172 6100 0000                  		bsr.w	FindFreeObj
0000B176 6600                       		bne.s	@failright
0000B178 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B17C 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B182 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B188 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B18E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B194 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B19A                            
0000B19A                            	@failright:
0000B19A 4E75                       		rts	
0000B19C                            ; ===========================================================================
0000B19C                            
0000B19C                            @walkonfloor:
0000B19C 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B1A0 6B00                       		bmi.s	loc_966E
0000B1A2 6100 0000                  		bsr.w	SpeedToPos
0000B1A6 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B1AC 6600                       		bne.s	loc_9654
0000B1AE 3628 0008                  		move.w	obX(a0),d3
0000B1B2 0643 0010                  		addi.w	#$10,d3
0000B1B6 0828 0000 0022             		btst	#0,obStatus(a0)
0000B1BC 6700                       		beq.s	loc_9640
0000B1BE 0443 0020                  		subi.w	#$20,d3
0000B1C2                            
0000B1C2                            loc_9640:
0000B1C2 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B1C8 0C41 FFF8                  		cmpi.w	#-8,d1
0000B1CC 6D00                       		blt.s	loc_966E
0000B1CE 0C41 000C                  		cmpi.w	#$C,d1
0000B1D2 6C00                       		bge.s	loc_966E
0000B1D4 4E75                       		rts	
0000B1D6                            ; ===========================================================================
0000B1D6                            
0000B1D6                            loc_9654:
0000B1D6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B1DC D368 000C                  		add.w	d1,obY(a0)
0000B1E0 1143 0026                  		move.b	d3,obAngle(a0)
0000B1E4 6100 0000                  		bsr.w	Crab_SetAni
0000B1E8 5600                       		addq.b	#3,d0
0000B1EA 1140 001C                  		move.b	d0,obAnim(a0)
0000B1EE 4E75                       		rts	
0000B1F0                            ; ===========================================================================
0000B1F0                            
0000B1F0                            loc_966E:
0000B1F0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B1F4 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B1FA 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B200 6100 0000                  		bsr.w	Crab_SetAni
0000B204 1140 001C                  		move.b	d0,obAnim(a0)
0000B208 4E75                       		rts	
0000B20A                            ; ---------------------------------------------------------------------------
0000B20A                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B20A                            ; ---------------------------------------------------------------------------
0000B20A                            
0000B20A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B20A                            
0000B20A                            
0000B20A                            Crab_SetAni:
0000B20A 7000                       		moveq	#0,d0
0000B20C 1628 0026                  		move.b	obAngle(a0),d3
0000B210 6B00                       		bmi.s	loc_96A4
0000B212 0C03 0006                  		cmpi.b	#6,d3
0000B216 6500                       		bcs.s	locret_96A2
0000B218 7001                       		moveq	#1,d0
0000B21A 0828 0000 0022             		btst	#0,obStatus(a0)
0000B220 6600                       		bne.s	locret_96A2
0000B222 7002                       		moveq	#2,d0
0000B224                            
0000B224                            locret_96A2:
0000B224 4E75                       		rts	
0000B226                            ; ===========================================================================
0000B226                            
0000B226                            loc_96A4:
0000B226 0C03 00FA                  		cmpi.b	#-6,d3
0000B22A 6200                       		bhi.s	locret_96B6
0000B22C 7002                       		moveq	#2,d0
0000B22E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B234 6600                       		bne.s	locret_96B6
0000B236 7001                       		moveq	#1,d0
0000B238                            
0000B238                            locret_96B6:
0000B238 4E75                       		rts	
0000B23A                            ; End of function Crab_SetAni
0000B23A                            
0000B23A                            ; ===========================================================================
0000B23A                            
0000B23A                            Crab_Delete:	; Routine 4
0000B23A 6100 0000                  		bsr.w	DeleteObject
0000B23E 4E75                       		rts	
0000B240                            ; ===========================================================================
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            ; Sub-object - missile that the	Crabmeat throws
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            
0000B240                            Crab_BallMain:	; Routine 6
0000B240 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B244 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B24C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B252 117C 0004 0001             		move.b	#4,obRender(a0)
0000B258 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B25E 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B264 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B26A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B270 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B276                            
0000B276                            Crab_BallMove:	; Routine 8
0000B276 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B27C 6100 0000                  		bsr.w	AnimateSprite
0000B280 6100 0000                  		bsr.w	ObjectFall
0000B284 6100 0000                  		bsr.w	DisplaySprite
0000B288 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B28C 0640 00E0                  		addi.w	#$E0,d0
0000B290 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B294 6500                       		bcs.s	@delete		; if yes, branch
0000B296 4E75                       		rts	
0000B298                            
0000B298                            	@delete:
0000B298 6000 0000                  		bra.w	DeleteObject
0000B298 6000 0000                  		bra.w	DeleteObject
0000B29C                            		include	"_anim\Crabmeat.asm"
0000B29C                            ; ---------------------------------------------------------------------------
0000B29C                            ; Animation script - Crabmeat enemy
0000B29C                            ; ---------------------------------------------------------------------------
0000B29C 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B2A2 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B2A8 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B2AC 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B2B0 00                         		even
0000B2B0 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B2B4 00                         		even
0000B2B4 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B2B8 00                         		even
0000B2B8 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B2BE 00                         		even
0000B2BE 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B2C4 00                         		even
0000B2C4 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B2CA 00                         		even
0000B2CA 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B2CE 00                         		even
0000B2CE 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B2D2                            		even
0000B2D2                            		even
0000B2D2                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B2D2                            ; ---------------------------------------------------------------------------
0000B2D2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B2D2                            ; ---------------------------------------------------------------------------
0000B2D2                            Map_Crab_internal:
0000B2D2 0000                       		dc.w @stand-Map_Crab_internal
0000B2D4 0000                       		dc.w @walk-Map_Crab_internal
0000B2D6 0000                       		dc.w @slope1-Map_Crab_internal
0000B2D8 0000                       		dc.w @slope2-Map_Crab_internal
0000B2DA 0000                       		dc.w @firing-Map_Crab_internal
0000B2DC 0000                       		dc.w @ball1-Map_Crab_internal
0000B2DE 0000                       		dc.w @ball2-Map_Crab_internal
0000B2E0 04                         @stand:		dc.b 4
0000B2E1 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B2E6 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B2EB 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B2F0 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B2F5 04                         @walk:		dc.b 4
0000B2F6 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B2FB F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B300 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B305 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B30A 04                         @slope1:	dc.b 4
0000B30B EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B310 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B315 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B31A FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B31F 04                         @slope2:	dc.b 4
0000B320 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B325 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B32A FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B32F FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B334 06                         @firing:	dc.b 6
0000B335 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B33A F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B33F F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B344 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B349 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B34E 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B353 01                         @ball1:		dc.b 1
0000B354 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B359 01                         @ball2:		dc.b 1
0000B35A F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B360 00                         		even
0000B360 00                         		even
0000B360                            		include	"_incObj\06 Mozzietron.asm"
0000B360                            ; ===========================================================================
0000B360                            ; ---------------------------------------------------------------------------
0000B360                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B360                            ; ---------------------------------------------------------------------------
0000B360                            
0000B360                            Mozzietron:					; XREF: Obj_Index
0000B360 7000                       		moveq	#0,d0
0000B362 1028 0024                  		move.b	$24(a0),d0
0000B366 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B36A 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B36E                            ; ===========================================================================
0000B36E 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B370 0000                       		dc.w MozAction-MozIndex
0000B372 0000                       		dc.w MozDelete-MozIndex
0000B374                            ; ===========================================================================
0000B374                            
0000B374                            MozMain:				; XREF: MozIndex
0000B374 5428 0024                  		addq.b	#2,$24(a0)
0000B378 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B380 317C 0444 0002             		move.w	#$444,2(a0)
0000B386 117C 0004 0001             		move.b	#4,1(a0)
0000B38C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B392 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B398 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B39E                            MozAction:				; XREF: MozIndex
0000B39E 7000                       		moveq	#0,d0
0000B3A0 1028 0025                  		move.b	$25(a0),d0
0000B3A4 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B3A8 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B3AC 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B3B2 6100 0000                  		bsr.w	AnimateSprite
0000B3B6 6000 0000                  		bra.w	RememberState
0000B3BA                            ; ===========================================================================
0000B3BA 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B3BC 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B3BE 0000                       		dc.w MozPinned-MozIndex2
0000B3C0                            ; ===========================================================================
0000B3C0                            
0000B3C0                            MozMove:				; XREF: MozIndex2
0000B3C0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B3C4 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B3C6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B3CC 6600                       		bne.s	MozFire	; if yes, branch
0000B3CE 5428 0025                  		addq.b	#2,$25(a0)
0000B3D2 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B3D8 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B3DE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B3E4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B3EA 6600                       		bne.s	locret_986C	; if not, branch
0000B3EC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B3F0                            
0000B3F0                            locret_986C:
0000B3F0 4E75                       		rts	
0000B3F2                            ; ===========================================================================
0000B3F2                            
0000B3F2                            MozFire:				; XREF: MozMove
0000B3F2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B3F8 6100 0000                  		bsr.w	ObjectFall
0000B3FC 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B402 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B404 6A00                       		bpl.s   @return ; if yes, branch 
0000B406 303C 00B6                  		move.w    #$B6,d0
0000B40A 4EB9 0000 1250             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B410 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B416 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B41A 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B41E 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B422                            		@return:
0000B422 4E75                       	    		rts
0000B424                            		
0000B424                            
0000B424                            ; ===========================================================================
0000B424                            
0000B424                            MozPinned:
0000B424 4E75                               rts
0000B426                                    
0000B426                            ; ===========================================================================
0000B426                            
0000B426                            MozChkDel:				; XREF: Obj55_DropFly
0000B426 4A28 0001                  		tst.b	1(a0)
0000B42A 6A00 0000                  		bpl.w	DeleteObject
0000B42E 4E75                       		rts	
0000B430                            ; ===========================================================================
0000B430                            
0000B430                            MozChkNrSonic:			; XREF: MozIndex2
0000B430                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B430 6B00                       		bmi.s	MozChgDir
0000B432 6100 0000                  		bsr.w	SpeedToPos
0000B436 4A28 0034                  		tst.b	$34(a0)
0000B43A 6600                       		bne.s	locret_992A
0000B43C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B440 9068 0008                  		sub.w	8(a0),d0
0000B444 6A00                       		bpl.s	MozSetNrSonic
0000B446 4440                       		neg.w	d0
0000B448                            
0000B448                            MozSetNrSonic:
0000B448 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B44C 6400                       		bcc.s	locret_992A	; if not, branch
0000B44E 4A28 0001                  		tst.b	1(a0)
0000B452 6A00                       		bpl.s	locret_992A
0000B454 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B45A 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B460 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B466 6000                       		bra.s	MozStop
0000B468                            ; ===========================================================================
0000B468                            
0000B468                            MozChgDir:				; XREF: MozChkNrSonic
0000B468 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B46E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B474 317C 003B 0032             		move.w	#59,$32(a0)
0000B47A                            
0000B47A                            MozStop:				; XREF: MozSetNrSonic
0000B47A 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B47E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B484 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B48A                            
0000B48A                            locret_992A:
0000B48A 4E75                       		rts	
0000B48C                            ; ===========================================================================
0000B48C                            
0000B48C                            MozDelete:				; XREF: MozIndex
0000B48C 6100 0000                  		bsr.w	DeleteObject
0000B490 4E75                       		rts	
0000B490 4E75                       		rts	
0000B492                            		include	"_incObj\22 Buzz Bomber.asm"
0000B492                            ; ===========================================================================
0000B492                            ; ---------------------------------------------------------------------------
0000B492                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B492                            ; ---------------------------------------------------------------------------
0000B492                            
0000B492                            BuzzBomber:
0000B492 7000                       		moveq	#0,d0
0000B494 1028 0024                  		move.b	obRoutine(a0),d0
0000B498 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B49C 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B4A0                            ; ===========================================================================
0000B4A0 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B4A2 0000                       		dc.w Buzz_Action-Buzz_Index
0000B4A4 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B4A6                            
0000B4A6 =00000032                  buzz_timedelay:	equ $32
0000B4A6 =00000034                  buzz_buzzstatus:	equ $34
0000B4A6 =0000003C                  buzz_parent:	equ $3C
0000B4A6                            ; ===========================================================================
0000B4A6                            
0000B4A6                            Buzz_Main:	; Routine 0
0000B4A6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B4AA 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B4B2 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B4B8 117C 0004 0001             		move.b	#4,obRender(a0)
0000B4BE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B4C4 117C 0008 0020             		move.b	#8,obColType(a0)
0000B4CA 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B4D0                            
0000B4D0                            Buzz_Action:	; Routine 2
0000B4D0 7000                       		moveq	#0,d0
0000B4D2 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B4D6 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B4DA 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B4DE 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B4E4 6100 0000                  		bsr.w	AnimateSprite
0000B4E8 6000 0000                  		bra.w	RememberState
0000B4EC                            ; ===========================================================================
0000B4EC 0000                       @index:		dc.w @move-@index
0000B4EE 0000                       		dc.w @chknearsonic-@index
0000B4F0                            ; ===========================================================================
0000B4F0                            
0000B4F0                            @move:
0000B4F0 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B4F4 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B4F6 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B4FC 6600                       		bne.s	@fire		; if yes, branch
0000B4FE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B502 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B508 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B50E 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B514 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B51A 6600                       		bne.s	@noflip		; if not, branch
0000B51C 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B520                            
0000B520                            	@noflip:
0000B520 4E75                       		rts	
0000B522                            ; ===========================================================================
0000B522                            
0000B522                            	@fire:
0000B522 6100 0000                  		bsr.w	FindFreeObj
0000B526 6600                       		bne.s	@fail
0000B528 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B52C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B532 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B538 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B53E 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B544 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B54A 303C 0018                  		move.w	#$18,d0
0000B54E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B554 6600                       		bne.s	@noflip2	; if not, branch
0000B556 4440                       		neg.w	d0
0000B558 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B55C                            
0000B55C                            	@noflip2:
0000B55C D169 0008                  		add.w	d0,obX(a1)
0000B560 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B566 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B56C 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B570 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B576 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B57C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B582                            
0000B582                            	@fail:
0000B582 4E75                       		rts	
0000B584                            ; ===========================================================================
0000B584                            
0000B584                            @chknearsonic:
0000B584 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B588 6B00                       		bmi.s	@chgdirection
0000B58A 6100 0000                  		bsr.w	SpeedToPos
0000B58E 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B592 6600                       		bne.s	@keepgoing
0000B594 3038 D008                  		move.w	(v_player+obX).w,d0
0000B598 9068 0008                  		sub.w	obX(a0),d0
0000B59C 6A00                       		bpl.s	@isleft
0000B59E 4440                       		neg.w	d0
0000B5A0                            
0000B5A0                            	@isleft:
0000B5A0 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B5A4 6400                       		bcc.s	@keepgoing	; if not, branch
0000B5A6 4A28 0001                  		tst.b	obRender(a0)
0000B5AA 6A00                       		bpl.s	@keepgoing
0000B5AC 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B5B2 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B5B8 6000                       		bra.s	@stop
0000B5BA                            ; ===========================================================================
0000B5BA                            
0000B5BA                            	@chgdirection:
0000B5BA 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B5C0 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B5C6 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B5CC                            
0000B5CC                            	@stop:
0000B5CC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B5D0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B5D6 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B5DC                            
0000B5DC                            @keepgoing:
0000B5DC 4E75                       		rts	
0000B5DE                            ; ===========================================================================
0000B5DE                            
0000B5DE                            Buzz_Delete:	; Routine 4
0000B5DE 6100 0000                  		bsr.w	DeleteObject
0000B5E2 4E75                       		rts	
0000B5E2 4E75                       		rts	
0000B5E4                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B5E4                            ; ---------------------------------------------------------------------------
0000B5E4                            ; Object 23 - missile that Buzz	Bomber throws
0000B5E4                            ; ---------------------------------------------------------------------------
0000B5E4                            
0000B5E4                            Missile:
0000B5E4 7000                       		moveq	#0,d0
0000B5E6 1028 0024                  		move.b	obRoutine(a0),d0
0000B5EA 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B5EE 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B5F2                            ; ===========================================================================
0000B5F2 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B5F4 0000                       		dc.w Msl_Animate-Msl_Index
0000B5F6 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B5F8 0000                       		dc.w Msl_Delete-Msl_Index
0000B5FA 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B5FC                            
0000B5FC =0000003C                  msl_parent:	equ $3C
0000B5FC                            ; ===========================================================================
0000B5FC                            
0000B5FC                            Msl_Main:	; Routine 0
0000B5FC 5368 0032                  		subq.w	#1,$32(a0)
0000B600 6A00                       		bpl.s	Msl_ChkCancel
0000B602 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B606 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B60E 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B614 117C 0004 0001             		move.b	#4,obRender(a0)
0000B61A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B620 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B626 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B62C 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B630 6700                       		beq.s	Msl_Animate	; if not, branch
0000B632                            
0000B632 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B638 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B63E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B644 6000                       		bra.s	Msl_Animate2
0000B646                            ; ===========================================================================
0000B646                            
0000B646                            Msl_Animate:	; Routine 2
0000B646 6100                       		bsr.s	Msl_ChkCancel
0000B648 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B64E 6100 0000                  		bsr.w	AnimateSprite
0000B652 6000 0000                  		bra.w	DisplaySprite
0000B656                            
0000B656                            ; ---------------------------------------------------------------------------
0000B656                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B656                            ; destroyed, and if it has, then cancel	the missile
0000B656                            ; ---------------------------------------------------------------------------
0000B656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B656                            
0000B656                            
0000B656                            Msl_ChkCancel:
0000B656 2268 003C                  		movea.l	msl_parent(a0),a1
0000B65A 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B65E 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B660 4E75                       		rts	
0000B662                            ; End of function Msl_ChkCancel
0000B662                            
0000B662                            ; ===========================================================================
0000B662                            
0000B662                            Msl_FromBuzz:	; Routine 4
0000B662 0828 0007 0022             		btst	#7,obStatus(a0)
0000B668 6600                       		bne.s	@explode
0000B66A 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B670 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B676 6100 0000                  		bsr.w	SpeedToPos
0000B67A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B680 6100 0000                  		bsr.w	AnimateSprite
0000B684 6100 0000                  		bsr.w	DisplaySprite
0000B688 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B68C 0640 00E0                  		addi.w	#$E0,d0
0000B690 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B694 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B696 4E75                       		rts	
0000B698                            ; ===========================================================================
0000B698                            
0000B698                            	@explode:
0000B698 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B69C 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B6A2 6000 F1D8                  		bra.w	MissileDissolve
0000B6A6                            ; ===========================================================================
0000B6A6                            
0000B6A6                            Msl_Delete:	; Routine 6
0000B6A6 6100 0000                  		bsr.w	DeleteObject
0000B6AA 4E75                       		rts	
0000B6AC                            ; ===========================================================================
0000B6AC                            
0000B6AC                            Msl_FromNewt:	; Routine 8
0000B6AC 4A28 0001                  		tst.b	obRender(a0)
0000B6B0 6AF4                       		bpl.s	Msl_Delete
0000B6B2 6100 0000                  		bsr.w	SpeedToPos
0000B6B6                            
0000B6B6                            Msl_Animate2:
0000B6B6 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B6BC 6100 0000                  		bsr.w	AnimateSprite
0000B6C0 6100 0000                  		bsr.w	DisplaySprite
0000B6C4 4E75                       		rts	
0000B6C4 4E75                       		rts	
0000B6C6                            		include	"_anim\Mozzietron.asm"
0000B6C6                            ; ---------------------------------------------------------------------------
0000B6C6                            ; Animation script - Buzz Bomber enemy
0000B6C6                            ; ---------------------------------------------------------------------------
0000B6C6 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B6C8 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B6CA 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B6CC 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B6D0 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B6D4 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B6DC 00                         		even
0000B6DC 00                         		even
0000B6DC                            		include	"_anim\Buzz Bomber.asm"
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC                            ; Animation script - Buzz Bomber enemy
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B6DE 0000                       		dc.w @fly2-Ani_Buzz
0000B6E0 0000                       		dc.w @fires-Ani_Buzz
0000B6E2 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B6E6 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B6EA 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B6EE                            		even
0000B6EE                            		even
0000B6EE                            		include	"_anim\Buzz Bomber Missile.asm"
0000B6EE                            ; ---------------------------------------------------------------------------
0000B6EE                            ; Animation script - missile that Buzz Bomber throws
0000B6EE                            ; ---------------------------------------------------------------------------
0000B6EE 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B6F0 0000                       		dc.w @missile-Ani_Missile
0000B6F2 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B6F6 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B6FA                            		even
0000B6FA                            		even
0000B6FA                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B6FA                            ; --------------------------------------------------------------------------------
0000B6FA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B6FA                            ; --------------------------------------------------------------------------------
0000B6FA                            
0000B6FA                            SME_qvHIs:	
0000B6FA 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B6FE 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B702 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B706 02                         SME_qvHIs_C:	dc.b 2	
0000B707 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B70C ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B711 01                         SME_qvHIs_17:	dc.b 1	
0000B712 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B717 02                         SME_qvHIs_1D:	dc.b 2	
0000B718 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B71D F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B722 03                         SME_qvHIs_28:	dc.b 3	
0000B723 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B728 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B72D FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B732 04                         SME_qvHIs_38:	dc.b 4	
0000B733 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B738 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B73D F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B742 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B747 04                         SME_qvHIs_4D:	dc.b 4	
0000B748 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B74D F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B752 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B757 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B75C                            		even
0000B75C                            		even
0000B75C                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B75C                            ; --------------------------------------------------------------------------------
0000B75C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B75C                            ; --------------------------------------------------------------------------------
0000B75C                            
0000B75C                            SME_yccqJ:	
0000B75C 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B760 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B764 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B768 06                         SME_yccqJ_C:	dc.b 6	
0000B769 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B76E F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B773 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B778 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B77D EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B782 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B787 06                         SME_yccqJ_2B:	dc.b 6	
0000B788 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B78D F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B792 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B797 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B79C F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B7A1 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B7A6 06                         SME_yccqJ_4A:	dc.b 6	
0000B7A7 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B7AC F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B7B1 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B7B6 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B7BB EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B7C0 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B7C5 06                         SME_yccqJ_69:	dc.b 6	
0000B7C6 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B7CB F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B7D0 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B7D5 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B7DA F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B7DF F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B7E4 07                         SME_yccqJ_88:	dc.b 7	
0000B7E5 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B7EA 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B7EF 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B7F4 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B7F9 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B7FE 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B803 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B808 04                         SME_yccqJ_AC:	dc.b 4	
0000B809 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B80E 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B813 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B818 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B81E 00                         		even
0000B81E 00                         		even
0000B81E                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            ; Sprite mappings - missile that Buzz Bomber throws
0000B81E                            ; ---------------------------------------------------------------------------
0000B81E                            Map_Missile_internal:
0000B81E 0000                       		dc.w @Flare1-Map_Missile_internal
0000B820 0000                       		dc.w @Flare2-Map_Missile_internal
0000B822 0000                       		dc.w @Ball1-Map_Missile_internal
0000B824 0000                       		dc.w @Ball2-Map_Missile_internal
0000B826 01                         @Flare1:	dc.b 1
0000B827 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B82C 01                         @Flare2:	dc.b 1
0000B82D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B832 01                         @Ball1:		dc.b 1
0000B833 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B838 01                         @Ball2:		dc.b 1
0000B839 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B83E                            		even
0000B83E                            		even
0000B83E                            
0000B83E                            		include	"_incObj\25 & 37 Rings.asm"
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E                            ; Object 25 - rings
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E                            
0000B83E                            Rings:
0000B83E 7000                       		moveq	#0,d0
0000B840 1028 0024                  		move.b	obRoutine(a0),d0
0000B844 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B848 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B84C                            ; ===========================================================================
0000B84C                            Ring_Index:
0000B84C 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B84E 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B850 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B852 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B854 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B856 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B858 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B85A 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B85C 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B85E                            
0000B85E =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B85E =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B85E =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B85E =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B85E =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B85E =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B85E =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B85E =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B85E =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B85E                            ; ---------------------------------------------------------------------------
0000B85E                            ; Distances between rings (format: horizontal, vertical)
0000B85E                            ; ---------------------------------------------------------------------------
0000B85E 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B860 1800                       		dc.b $18, 0		; horizontal normal
0000B862 2000                       		dc.b $20, 0		; horizontal wide
0000B864 0010                       		dc.b 0,	$10		; vertical tight
0000B866 0018                       		dc.b 0,	$18		; vertical normal
0000B868 0020                       		dc.b 0,	$20		; vertical wide
0000B86A 1010                       		dc.b $10, $10		; diagonal
0000B86C 1818                       		dc.b $18, $18
0000B86E 2020                       		dc.b $20, $20
0000B870 F010                       		dc.b $F0, $10
0000B872 E818                       		dc.b $E8, $18
0000B874 E020                       		dc.b $E0, $20
0000B876 1008                       		dc.b $10, 8
0000B878 1810                       		dc.b $18, $10
0000B87A F008                       		dc.b $F0, 8
0000B87C E810                       		dc.b $E8, $10
0000B87E                            ; ===========================================================================
0000B87E                            
0000B87E                            Ring_Main:	; Routine 0
0000B87E 45F8 FC00                  		lea	(v_objstate).w,a2
0000B882 7000                       		moveq	#0,d0
0000B884 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B888 45F2 0002                  		lea	2(a2,d0.w),a2
0000B88C 1812                       		move.b	(a2),d4
0000B88E 1228 0028                  		move.b	obSubtype(a0),d1
0000B892 1001                       		move.b	d1,d0
0000B894 0241 0007                  		andi.w	#7,d1
0000B898 0C41 0007                  		cmpi.w	#7,d1
0000B89C 6600                       		bne.s	loc_9B80
0000B89E 7206                       		moveq	#6,d1
0000B8A0                            
0000B8A0                            	loc_9B80:
0000B8A0 4841                       		swap	d1
0000B8A2 323C 0000                  		move.w	#0,d1
0000B8A6 E808                       		lsr.b	#4,d0
0000B8A8 D040                       		add.w	d0,d0
0000B8AA 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B8AE 4885                       		ext.w	d5
0000B8B0 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B8B4 4886                       		ext.w	d6
0000B8B6 2248                       		movea.l	a0,a1
0000B8B8 3428 0008                  		move.w	obX(a0),d2
0000B8BC 3628 000C                  		move.w	obY(a0),d3
0000B8C0 E20C                       		lsr.b	#1,d4
0000B8C2 6500                       		bcs.s	loc_9C02
0000B8C4 0892 0007                  		bclr	#7,(a2)
0000B8C8 6000                       		bra.s	loc_9BBA
0000B8CA                            ; ===========================================================================
0000B8CA                            
0000B8CA                            Ring_MakeRings:
0000B8CA 4841                       		swap	d1
0000B8CC E20C                       		lsr.b	#1,d4
0000B8CE 6500                       		bcs.s	loc_9C02
0000B8D0 0892 0007                  		bclr	#7,(a2)
0000B8D4 6100 0000                  		bsr.w	FindFreeObj
0000B8D8 6600                       		bne.s	loc_9C0E
0000B8DA                            
0000B8DA                            loc_9BBA:
0000B8DA 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B8DE 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B8E2 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B8E6 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B8EC 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B8F0 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B8F8 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B8FE 137C 0004 0001             		move.b	#4,obRender(a1)
0000B904 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B90A 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B910 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B916 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B91C 1341 0034                  		move.b	d1,$34(a1)
0000B920                            
0000B920                            loc_9C02:
0000B920 5241                       		addq.w	#1,d1
0000B922 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B924 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B926 4841                       		swap	d1
0000B928 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B92C                            
0000B92C                            loc_9C0E:
0000B92C 0812 0000                  		btst	#0,(a2)
0000B930 6600 0000                  		bne.w	DeleteObject
0000B934                            
0000B934                            Ring_Animate:	; Routine 2
0000B934 4A38 F5C9                  		tst.b	(v_gshield).w
0000B938 6700                       		beq.s	@skip
0000B93A 4A28 0001                  		tst.b	obRender(a0)
0000B93E 6A00                       		bpl.s	@skip
0000B940                            		
0000B940 43F8 D000                  		lea (v_player).w,a1
0000B944                            		
0000B944 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B948 9068 0008                  		sub.w	obX(a0),d0
0000B94C 6A00                       		bpl.s	@a1
0000B94E 4440                       		neg.w	d0
0000B950                            		
0000B950                            	@a1:
0000B950 0C40 0040                  		cmpi.w	#$40,d0
0000B954 6200                       		bhi.s	@skip
0000B956                            		
0000B956 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B95A 9068 000C                  		sub.w	obY(a0),d0
0000B95E 6A00                       		bpl.s	@a2
0000B960 4440                       		neg.w	d0
0000B962                            		
0000B962                            	@a2:
0000B962 0C40 0040                  		cmpi.w	#$40,d0
0000B966 6200                       		bhi.s	@skip
0000B968                            		
0000B968 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B96E 45F8 FC00                  		lea	(v_objstate).w,a2
0000B972 7000                       		moveq	#0,d0
0000B974 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B978 1228 0034                  		move.b	$34(a0),d1
0000B97C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B980                            		
0000B980                            	@skip:
0000B980 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B986 6100 0000                  		bsr.w	DisplaySprite
0000B9A6 4E75                       		rts	
0000B9A8                            ; ===========================================================================
0000B9A8                            
0000B9A8                            Ring_Collect:	; Routine 4
0000B9A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B9AC 117C 0000 0020             		move.b	#0,obColType(a0)
0000B9B2 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B9B8 6100 0000                  		bsr.w	CollectRing
0000B9BC 45F8 FC00                  		lea	(v_objstate).w,a2
0000B9C0 7000                       		moveq	#0,d0
0000B9C2 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B9C6 1228 0034                  		move.b	$34(a0),d1
0000B9CA 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B9CE                            
0000B9CE                            Ring_Sparkle:	; Routine 6
0000B9CE 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B9D4 6100 0000                  		bsr.w	AnimateSprite
0000B9D8 6000 0000                  		bra.w	DisplaySprite
0000B9DC                            ; ===========================================================================
0000B9DC                            
0000B9DC                            Ring_Delete:	; Routine 8
0000B9DC 6000 0000                  		bra.w	DeleteObject
0000B9E0                            
0000B9E0                            Ring_Attract:	; Routine $A
0000B9E0 4A38 F5C9                  		tst.b	(v_gshield).w
0000B9E4 6600                       		bne.s	@skip
0000B9E6 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B9EA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B9F0 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B9F6 6000                       		bra.s	@display
0000B9F8                            		
0000B9F8                            	@skip:
0000B9F8 323C 0030                  		move.w	#$30,d1	; horizontal
0000B9FC 3038 D008                  		move.w	(v_player+obX).w,d0
0000BA00 B068 0008                  		cmp.w	obX(a0),d0
0000BA04 6400                       		bcc.s	@a1
0000BA06 4441                       		neg.w	d1
0000BA08 4A68 0010                  		tst.w	obVelX(a0)
0000BA0C 6B00                       		bmi.s	@a2
0000BA0E D241                       		add.w	d1,d1
0000BA10 D241                       		add.w	d1,d1
0000BA12 6000                       		bra.s	@a2
0000BA14                            
0000BA14                            	@a1:
0000BA14 4A68 0010                  		tst.w	obVelX(a0)
0000BA18 6A00                       		bpl.s	@a2
0000BA1A D241                       		add.w	d1,d1
0000BA1C D241                       		add.w	d1,d1
0000BA1E                            
0000BA1E                            	@a2:
0000BA1E D368 0010                  		add.w	d1,obVelX(a0)
0000BA22 323C 0030                  		move.w	#$30,d1	; vertical
0000BA26 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BA2A B068 000C                  		cmp.w	obY(a0),d0
0000BA2E 6400                       		bcc.s	@a3
0000BA30 4441                       		neg.w	d1
0000BA32 4A68 0012                  		tst.w	obVelY(a0)
0000BA36 6B00                       		bmi.s	@a4
0000BA38 D241                       		add.w	d1,d1
0000BA3A D241                       		add.w	d1,d1
0000BA3C 6000                       		bra.s	@a4
0000BA3E                            
0000BA3E                            	@a3:
0000BA3E 4A68 0012                  		tst.w	obVelY(a0)
0000BA42 6A00                       		bpl.s	@a4
0000BA44 D241                       		add.w	d1,d1
0000BA46 D241                       		add.w	d1,d1
0000BA48                            
0000BA48                            	@a4:
0000BA48 D368 0012                  		add.w	d1,obVelY(a0)
0000BA4C 6100 0000                  		bsr.w	SpeedToPos
0000BA50                            		
0000BA50                            	@display:
0000BA50 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BA56 6000 0000                  		bra.w	DisplaySprite
0000BA5A                            
0000BA5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA5A                            
0000BA5A                            
0000BA5A                            CollectRing:
0000BA5A 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BA5E 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BA64 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BA68 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BA6E 6500                       		bcs.s	@playsnd	; if yes, branch
0000BA70 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BA76 6700                       		beq.s	@got100
0000BA78 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BA7E 6500                       		bcs.s	@playsnd	; if yes, branch
0000BA80 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BA86 6600                       		bne.s	@playsnd
0000BA88                            
0000BA88                            	@got100:
0000BA88 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BA8C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BA90 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BA94                            		
0000BA94                            
0000BA94                            	@playsnd:
0000BA94 4EF9 0000 1250             		jmp	(PlaySound_Special).l
0000BA9A                            ; End of function CollectRing
0000BA9A                            
0000BA9A                            ; ===========================================================================
0000BA9A                            ; ---------------------------------------------------------------------------
0000BA9A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BA9A                            ; ---------------------------------------------------------------------------
0000BA9A                            
0000BA9A                            RingLoss:
0000BA9A 7000                       		moveq	#0,d0
0000BA9C 1028 0024                  		move.b	obRoutine(a0),d0
0000BAA0 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BAA4 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BAA8                            ; ===========================================================================
0000BAA8 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BAAA 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BAAC 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BAAE 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BAB0 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BAB2                            ; ===========================================================================
0000BAB2                            
0000BAB2                            RLoss_Count:	; Routine 0
0000BAB2 2248                       		movea.l	a0,a1
0000BAB4 7A00                       		moveq	#0,d5
0000BAB6 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BABA 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BAC0 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BAC2 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BAC6 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BACC 6700                               beq.s   @cont                       ; if not, branch
0000BACE 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BAD4 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BAD6                            @cont:
0000BAD6 BA40                               cmp.w   d0,d5
0000BAD8 6500                               bcs.s   @belowmax
0000BADA 3A00                               move.w  d0,d5
0000BADC                            
0000BADC                            @belowmax:
0000BADC 5345                               subq.w  #1,d5
0000BADE 383C 0288                          move.w  #$288,d4
0000BAE2 6000                       		bra.s	@makerings
0000BAE4                            ; ===========================================================================
0000BAE4                            
0000BAE4                            	@loop:
0000BAE4 6100 0000                  		bsr.w	FindFreeObj
0000BAE8 6600 0000                  		bne.w	@resetcounter
0000BAEC                            
0000BAEC                            @makerings:
0000BAEC 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BAF0 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BAF4 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BAFA 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BB00 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BB06 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BB0C 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BB14 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BB1A 137C 0004 0001             		move.b	#4,obRender(a1)
0000BB20 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BB26 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BB2C 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BB30 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BB32 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BB36 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BB3A 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BB3C E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BB3E E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BB40                            @skiphalvingvel:
0000BB40 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BB44 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BB48 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BB4C                            
0000BB4C                            @resetcounter:
0000BB4C 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BB52 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BB58 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BB5E 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BB60 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BB64 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BB72                            
0000BB72                            RLoss_Bounce:	; Routine 2
0000BB72 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BB78 6100 0000                  		bsr.w	SpeedToPos
0000BB7C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BB82 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BB86 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BB88 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BB8C BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BB90 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BB92 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BB98                            	@skipbounceslow:
0000BB98 6B00                       		bmi.s	@chkdel
0000BB9A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BB9E D007                       		add.b	d7,d0
0000BBA0 0200 0003                  		andi.b	#3,d0
0000BBA4 6600                       		bne.s	@chkdel
0000BBA6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BBAC 4A41                       		tst.w	d1
0000BBAE 6A00                       		bpl.s	@chkdel
0000BBB0 D368 000C                  		add.w	d1,obY(a0)
0000BBB4 3028 0012                  		move.w	obVelY(a0),d0
0000BBB8 E440                       		asr.w	#2,d0
0000BBBA 9168 0012                  		sub.w	d0,obVelY(a0)
0000BBBE 4468 0012                  		neg.w	obVelY(a0)
0000BBC2                            
0000BBC2                            	@chkdel:
0000BBC2 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BBC6 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BBCA 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BBCE 0640 00E0                  		addi.w	#$E0,d0
0000BBD2 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BBD6 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BBDA 4A38 F5C9                  		tst.b	(v_gshield).w
0000BBDE 6700                       		beq.s	@skip
0000BBE0 4A28 0001                  		tst.b	obRender(a0)
0000BBE4 6A00                       		bpl.s	@skip
0000BBE6                            		
0000BBE6 43F8 D000                  		lea (v_player).w,a1
0000BBEA                            		
0000BBEA 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BBEE 9068 0008                  		sub.w	obX(a0),d0
0000BBF2 6A00                       		bpl.s	@a1
0000BBF4 4440                       		neg.w	d0
0000BBF6                            		
0000BBF6                            	@a1:
0000BBF6 0C40 00A0                  		cmpi.w	#$A0,d0
0000BBFA 6200                       		bhi.s	@skip
0000BBFC                            		
0000BBFC 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BC00 9068 000C                  		sub.w	obY(a0),d0
0000BC04 6A00                       		bpl.s	@a2
0000BC06 4440                       		neg.w	d0
0000BC08                            		
0000BC08                            	@a2:
0000BC08 0C40 00A0                  		cmpi.w	#$A0,d0
0000BC0C 6200                       		bhi.s	@skip
0000BC0E                            		
0000BC0E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BC14 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BC18                            		
0000BC18                            	@skip:		
0000BC18 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BC1C D2FC 0080                          adda.w  #$80,a1
0000BC20 0C51 007E                          cmpi.w  #$7E,(a1)
0000BC24 6400                               bcc.s   @cont
0000BC26 5451                               addq.w  #2,(a1)
0000BC28 D2D1                               adda.w  (a1),a1
0000BC2A 3288                               move.w  a0,(a1)
0000BC2C                            		
0000BC2C                            	@cont:
0000BC2C 4E75                               rts		
0000BC2E                            ; ===========================================================================
0000BC2E                            
0000BC2E                            RLoss_Collect:	; Routine 4
0000BC2E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC32 117C 0000 0020             		move.b	#0,obColType(a0)
0000BC38 6100 FE20                  		bsr.w	CollectRing
0000BC3C                            
0000BC3C                            RLoss_Sparkle:	; Routine 6
0000BC3C 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BC42 6100 0000                  		bsr.w	AnimateSprite
0000BC46 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BC4A 0C51 007E                          cmpi.w  #$7E,(a1)
0000BC4E 6400                               bcc.s   @cont
0000BC50 5451                               addq.w  #2,(a1)
0000BC52 D2D1                               adda.w  (a1),a1
0000BC54 3288                               move.w  a0,(a1)
0000BC56                            			
0000BC56                            	@cont:
0000BC56 4E75                               rts
0000BC58                            ; ===========================================================================
0000BC58                            
0000BC58                            RLoss_Delete:	; Routine 8
0000BC58 6000 0000                  		bra.w	DeleteObject
0000BC5C                            
0000BC5C                            ; ----------------------------------------------------------------------------------------------
0000BC5C                            ; Ring Spawn Array 
0000BC5C                            ; ----------------------------------------------------------------------------------------------
0000BC5C                            
0000BC5C FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BC6C FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BC7C FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BC8C FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BC9C FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BCAC FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BCBC FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BCCC FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BCDC                                            even
0000BCDC                            ; ===========================================================================
0000BCDC                            ; -------------------------------------------------------------------------------------
0000BCDC                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BCDC                            ; -------------------------------------------------------------------------------------
0000BCDC                            
0000BCDC                            SpillRingData_Water:
0000BCDC FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BCEC FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BCFC FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BD0C FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BD1C FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BD2C FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BD3C FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BD4C FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BD5C                                            even
0000BD5C                            ; ===========================================================================				
0000BD5C                            ; ===========================================================================				
0000BD5C                            		include	"_incObj\4B Giant Ring.asm"
0000BD5C                            ; ---------------------------------------------------------------------------
0000BD5C                            ; Object 4B - giant ring for entry to special stage
0000BD5C                            ; ---------------------------------------------------------------------------
0000BD5C                            
0000BD5C                            GiantRing:
0000BD5C 7000                       		moveq	#0,d0
0000BD5E 1028 0024                  		move.b	obRoutine(a0),d0
0000BD62 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BD66 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BD6A                            ; ===========================================================================
0000BD6A 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BD6C 0000                       		dc.w GRing_Animate-GRing_Index
0000BD6E 0000                       		dc.w GRing_Collect-GRing_Index
0000BD70 0000                       		dc.w GRing_Delete-GRing_Index
0000BD72                            ; ===========================================================================
0000BD72                            
0000BD72                            GRing_Main:    ; Routine 0
0000BD72 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BD7A 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BD80 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BD86 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BD8C 4A28 0001                  		tst.b	obRender(a0)
0000BD90 6A00                       		bpl.s	GRing_Animate
0000BD92 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BD98 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BD9C 0C38 0001 F5C3             		cmpi.b	#1,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BDA2 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BDA4                            
0000BDA4 4E75                       		rts    
0000BDA6                            ; ===========================================================================
0000BDA6                            
0000BDA6                            GRing_Okay:
0000BDA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BDAA 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BDB0 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BDB6 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BDBC                            
0000BDBC                            GRing_Animate:	; Routine 2
0000BDBC 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BDE0 6000 0000                  		bra.w	DisplaySprite
0000BDE4                            ; ===========================================================================
0000BDE4                            
0000BDE4                            GRing_Collect:	; Routine 4
0000BDE4 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BDE8 117C 0000 0020             		move.b	#0,obColType(a0)
0000BDEE 6100 0000                  		bsr.w	FindFreeObj
0000BDF2 6600 0000                  		bne.w	GRing_PlaySnd
0000BDF6 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BDFA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BE00 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BE06 2348 003C                  		move.l	a0,$3C(a1)
0000BE0A 3038 D008                  		move.w	(v_player+obX).w,d0
0000BE0E B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BE12 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BE14 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BE1A 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BE20 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BE26                            		
0000BE26                            GRing_PlaySnd:
0000BE30 608A                       		bra.s	GRing_Animate
0000BE32                            ; ===========================================================================
0000BE32                            
0000BE32                            GRing_Delete:	; Routine 6
0000BE32 6000 0000                  		bra.w	DeleteObject
0000BE32 6000 0000                  		bra.w	DeleteObject
0000BE36                            		include	"_incObj\7C Ring Flash.asm"
0000BE36                            ; ---------------------------------------------------------------------------
0000BE36                            ; Object 7C - flash effect when	you collect the	giant ring
0000BE36                            ; ---------------------------------------------------------------------------
0000BE36                            
0000BE36                            RingFlash:
0000BE36 7000                       		moveq	#0,d0
0000BE38 1028 0024                  		move.b	obRoutine(a0),d0
0000BE3C 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BE40 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BE44                            ; ===========================================================================
0000BE44 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BE46 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BE48 0000                       		dc.w Flash_Delete-Flash_Index
0000BE4A                            ; ===========================================================================
0000BE4A                            
0000BE4A                            Flash_Main:	; Routine 0
0000BE4A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE4E 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BE56 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BE5C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE62 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BE68 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BE6E 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BE74                            
0000BE74                            Flash_ChkDel:	; Routine 2
0000BE74 6100                       		bsr.s	Flash_Collect
0000BE94 6000 0000                  		bra.w	DisplaySprite
0000BE98                            
0000BE98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE98                            
0000BE98                            
0000BE98                            Flash_Collect:
0000BE98 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BE9C 6A00                       		bpl.s	locret_9F76
0000BE9E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BEA4 5228 001A                  		addq.b	#1,obFrame(a0)
0000BEA8 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BEAE 6400                       		bcc.s	Flash_End	; if yes, branch
0000BEB0 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BEB6 6600                       		bne.s	locret_9F76	; if not, branch
0000BEB8 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BEBC 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BEC2 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BEC8 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BECE 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BED2 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BED6                            
0000BED6                            locret_9F76:
0000BED6 4E75                       		rts	
0000BED8                            ; ===========================================================================
0000BED8                            
0000BED8                            Flash_End:
0000BED8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BEDC 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BEE2 588F                       		addq.l	#4,sp
0000BEE4 4E75                       		rts	
0000BEE6                            ; End of function Flash_Collect
0000BEE6                            
0000BEE6                            ; ===========================================================================
0000BEE6                            
0000BEE6                            Flash_Delete:	; Routine 4
0000BEE6 6000 0000                  		bra.w	DeleteObject
0000BEE6 6000 0000                  		bra.w	DeleteObject
0000BEEA                            
0000BEEA                            		include	"_anim\Rings.asm"
0000BEEA                            ; ---------------------------------------------------------------------------
0000BEEA                            ; Animation script - ring
0000BEEA                            ; ---------------------------------------------------------------------------
0000BEEA 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BEEC 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BEF2                            		even
0000BEF2                            		even
0000BEF2                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BEF2                            ; --------------------------------------------------------------------------------
0000BEF2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BEF2                            ; --------------------------------------------------------------------------------
0000BEF2                            
0000BEF2                            SME_aSMQh:	
0000BEF2 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BEF6 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BEFA 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BEFE 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BF02 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BF06 01                         SME_aSMQh_14:	dc.b 1	
0000BF07 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BF0C 01                         SME_aSMQh_1A:	dc.b 1	
0000BF0D F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BF12 01                         SME_aSMQh_20:	dc.b 1	
0000BF13 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BF18 01                         SME_aSMQh_26:	dc.b 1	
0000BF19 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BF1E 01                         SME_aSMQh_2C:	dc.b 1	
0000BF1F F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BF24 01                         SME_aSMQh_32:	dc.b 1	
0000BF25 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BF2A 01                         SME_aSMQh_38:	dc.b 1	
0000BF2B F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BF30 01                         SME_aSMQh_3E:	dc.b 1	
0000BF31 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BF36 01                         SME_aSMQh_44:	dc.b 1	
0000BF37 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BF3C 01                         SME_aSMQh_4A:	dc.b 1	
0000BF3D F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BF42                            		even
0000BF42                            		even
0000BF42                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BF42                            ; ---------------------------------------------------------------------------
0000BF42                            ; Sprite mappings - giant ring
0000BF42                            ; ---------------------------------------------------------------------------
0000BF42                            Map_GRing_internal:
0000BF42 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BF44 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BF46 0000                       		dc.w byte_A036-Map_GRing_internal
0000BF48 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BF4A 0A                         byte_9FDA:	dc.b $A
0000BF4B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BF50 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BF55 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BF5A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BF5F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BF64 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BF69 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BF6E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BF73 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BF78 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BF7D 08                         byte_A00D:	dc.b 8
0000BF7E E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BF83 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BF88 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BF8D F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BF92 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BF97 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BF9C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BFA1 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BFA6 04                         byte_A036:	dc.b 4
0000BFA7 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BFAC E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BFB1 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BFB6 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BFBB 08                         byte_A04B:	dc.b 8
0000BFBC E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BFC1 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BFC6 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BFCB F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BFD0 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BFD5 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BFDA 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BFDF 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BFE4                            		even
0000BFE4                            		even
0000BFE4                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BFE4                            ; ---------------------------------------------------------------------------
0000BFE4                            ; Sprite mappings - flash effect when you collect the giant ring
0000BFE4                            ; ---------------------------------------------------------------------------
0000BFE4                            Map_Flash_internal:
0000BFE4 0000                       		dc.w byte_A084-Map_Flash_internal
0000BFE6 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BFE8 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BFEA 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BFEC 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BFEE 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BFF0 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BFF2 0000                       		dc.w byte_A103-Map_Flash_internal
0000BFF4 02                         byte_A084:	dc.b 2
0000BFF5 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BFFA 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BFFF 04                         byte_A08F:	dc.b 4
0000C000 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C005 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C00A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C00F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C014 04                         byte_A0A4:	dc.b 4
0000C015 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C01A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C01F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C024 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C029 04                         byte_A0B9:	dc.b 4
0000C02A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C02F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C034 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C039 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C03E 04                         byte_A0CE:	dc.b 4
0000C03F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C044 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C049 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C04E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C053 04                         byte_A0E3:	dc.b 4
0000C054 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C059 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C05E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C063 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C068 02                         byte_A0F8:	dc.b 2
0000C069 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C06E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C073 04                         byte_A103:	dc.b 4
0000C074 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C079 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C07E 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C083 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C088                            		even
0000C088                            		even
0000C088                            		include	"_incObj\26 Monitor.asm"
0000C088                            ; ---------------------------------------------------------------------------
0000C088                            ; Object 26 - monitors
0000C088                            ; ---------------------------------------------------------------------------
0000C088                            
0000C088                            Monitor:
0000C088 7000                       		moveq	#0,d0
0000C08A 1028 0024                  		move.b	obRoutine(a0),d0
0000C08E 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C092 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C096                            ; ===========================================================================
0000C096 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C098 0000                       		dc.w Mon_Solid-Mon_Index
0000C09A 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C09C 0000                       		dc.w Mon_Animate-Mon_Index
0000C09E 0000                       		dc.w Mon_Display-Mon_Index
0000C0A0                            ; ===========================================================================
0000C0A0                            
0000C0A0                            Mon_Main:	; Routine 0
0000C0A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C0A4 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C0AA 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C0B0 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C0B8 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C0BE 117C 0004 0001             		move.b	#4,obRender(a0)
0000C0C4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C0CA 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C0D0 45F8 FC00                  		lea	(v_objstate).w,a2
0000C0D4 7000                       		moveq	#0,d0
0000C0D6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C0DA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C0E0 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C0E6 6700                       		beq.s	@notbroken	; if not, branch
0000C0E8 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C0EE 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C0F4 4E75                       		rts	
0000C0F6                            ; ===========================================================================
0000C0F6                            
0000C0F6                            	@notbroken:
0000C0F6 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C0FC 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C102                            
0000C102                            Mon_Solid:	; Routine 2
0000C102 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C106 6700                       		beq.s	@normal		; if not, branch
0000C108 5500                       		subq.b	#2,d0
0000C10A 6600                       		bne.s	@fall
0000C10C                            
0000C10C                            		; 2nd Routine 2
0000C10C 7200                       		moveq	#0,d1
0000C10E 1228 0014                  		move.b	obActWid(a0),d1
0000C112 0641 000B                  		addi.w	#$B,d1
0000C116 6100 D03E                  		bsr.w	ExitPlatform
0000C11A 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C120 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C124 4228 0025                  		clr.b	ob2ndRout(a0)
0000C128 6000 0000                  		bra.w	Mon_Animate
0000C12C                            ; ===========================================================================
0000C12C                            
0000C12C                            	@ontop:
0000C12C 363C 0010                  		move.w	#$10,d3
0000C130 3428 0008                  		move.w	obX(a0),d2
0000C134 6100 D57E                  		bsr.w	MvSonicOnPtfm
0000C138 6000 0000                  		bra.w	Mon_Animate
0000C13C                            ; ===========================================================================
0000C13C                            
0000C13C                            @fall:		; 2nd Routine 4
0000C13C 6100 0000                  		bsr.w	ObjectFall
0000C140 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C146 4A41                       		tst.w	d1
0000C148 6A00 0000                  		bpl.w	Mon_Animate
0000C14C D368 000C                  		add.w	d1,obY(a0)
0000C150 4268 0012                  		clr.w	obVelY(a0)
0000C154 4228 0025                  		clr.b	ob2ndRout(a0)
0000C158 6000 0000                  		bra.w	Mon_Animate
0000C15C                            ; ===========================================================================
0000C15C                            
0000C15C                            @normal:	; 2nd Routine 0
0000C15C 323C 001A                  		move.w	#$1A,d1
0000C160 343C 000F                  		move.w	#$F,d2
0000C164 6100 0000                  		bsr.w	Mon_SolidSides
0000C168 6700 0000                  		beq.w	loc_A25C
0000C16C 4A69 0012                  		tst.w	obVelY(a1)
0000C170 6B00                       		bmi.s	loc_A20A
0000C172 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C178 6700                       		beq.s	loc_A25C	; if yes, branch
0000C17A 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C180 6700                       		beq.s	loc_A25C	; if yes, branch
0000C182 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C188 6700                       		beq.s	loc_A25C	; if yes, branch
0000C18A                            
0000C18A                            loc_A20A:
0000C18A 4A41                       		tst.w	d1
0000C18C 6A00                       		bpl.s	loc_A220
0000C18E 9769 000C                  		sub.w	d3,obY(a1)
0000C192 6100 CEB0                  		bsr.w	loc_74AE
0000C196 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C19C 6000 0000                  		bra.w	Mon_Animate
0000C1A0                            ; ===========================================================================
0000C1A0                            
0000C1A0                            loc_A220:
0000C1A0 4A40                       		tst.w	d0
0000C1A2 6700 0000                  		beq.w	loc_A246
0000C1A6 6B00                       		bmi.s	loc_A230
0000C1A8 4A69 0010                  		tst.w	obVelX(a1)
0000C1AC 6B00                       		bmi.s	loc_A246
0000C1AE 6000                       		bra.s	loc_A236
0000C1B0                            ; ===========================================================================
0000C1B0                            
0000C1B0                            loc_A230:
0000C1B0 4A69 0010                  		tst.w	obVelX(a1)
0000C1B4 6A00                       		bpl.s	loc_A246
0000C1B6                            
0000C1B6                            loc_A236:
0000C1B6 9169 0008                  		sub.w	d0,obX(a1)
0000C1BA 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C1C0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C1C6                            
0000C1C6                            loc_A246:
0000C1C6 0829 0001 0022             		btst	#1,obStatus(a1)
0000C1CC 6600                       		bne.s	loc_A26A
0000C1CE 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C1D4 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C1DA 6000                       		bra.s	Mon_Animate
0000C1DC                            ; ===========================================================================
0000C1DC                            
0000C1DC                            loc_A25C:
0000C1DC 0828 0005 0022             		btst	#5,obStatus(a0)
0000C1E2 6700                       		beq.s	Mon_Animate
0000C1E4 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C1EA 6700                       		beq.s	loc_A26A	; if so, branch
0000C1EC 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C1F2                            
0000C1F2                            loc_A26A:
0000C1F2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C1F8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C1FE                            
0000C1FE                            Mon_Animate:	; Routine 6
0000C1FE 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C204 6100 0000                  		bsr.w	AnimateSprite
0000C208                            
0000C208                            Mon_Display:	; Routine 8
0000C208 6100 0000                  		bsr.w	DisplaySprite
0000C22A 4E75                       		rts	
0000C22C                            ; ===========================================================================
0000C22C                            
0000C22C                            Mon_BreakOpen:	; Routine 4
0000C22C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C230 117C 0000 0020             		move.b	#0,obColType(a0)
0000C236 6100 0000                  		bsr.w	FindFreeObj
0000C23A 6600                       		bne.s	Mon_Explode
0000C23C 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C240 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C246 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C24C 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C252                            
0000C252                            Mon_Explode:
0000C252 6100 0000                  		bsr.w	FindFreeObj
0000C256 6600                       		bne.s	@fail
0000C258 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C25C 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C260 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C266 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C26C                            
0000C26C                            	@fail:
0000C26C 45F8 FC00                  		lea	(v_objstate).w,a2
0000C270 7000                       		moveq	#0,d0
0000C272 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C276 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C27C 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C282 6000 0000                  		bra.w	DisplaySprite
0000C282 6000 0000                  		bra.w	DisplaySprite
0000C286                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C286                            ; ---------------------------------------------------------------------------
0000C286                            ; Object 2E - contents of monitors
0000C286                            ; ---------------------------------------------------------------------------
0000C286                            
0000C286                            PowerUp:
0000C286 7000                       		moveq	#0,d0
0000C288 1028 0024                  		move.b	obRoutine(a0),d0
0000C28C 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C290 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C294 6000 0000                  		bra.w	DisplaySprite
0000C298                            ; ===========================================================================
0000C298 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C29A 0000                       		dc.w Pow_Move-Pow_Index
0000C29C 0000                       		dc.w Pow_Delete-Pow_Index
0000C29E                            ; ===========================================================================
0000C29E                            
0000C29E                            Pow_Main:	; Routine 0
0000C29E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2A2 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C2A8 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C2AE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C2B4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C2BA 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C2C0 7000                       		moveq	#0,d0
0000C2C2 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C2C6 5400                       		addq.b	#2,d0
0000C2C8 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C2CC 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C2D2 D000                       		add.b	d0,d0
0000C2D4 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C2D8 5249                       		addq.w	#1,a1
0000C2DA 2149 0004                  		move.l	a1,obMap(a0)
0000C2DE                            
0000C2DE                            Pow_Move:	; Routine 2
0000C2DE 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C2E2 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C2E6 6100 0000                  		bsr.w	SpeedToPos
0000C2EA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C2F0 4E75                       		rts	
0000C2F2                            ; ===========================================================================
0000C2F2                            
0000C2F2                            Pow_Checks:
0000C2F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2F6 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C2FC                            
0000C2FC                            Pow_ChkEggman:
0000C2FC 1028 001C                  		move.b	obAnim(a0),d0
0000C300 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C304 6600                       		bne.s	Pow_ChkSonic
0000C306                            		
0000C306 4EF9 0000 0000             		jmp	Spik_Hurt
0000C30C                            		
0000C30C 4E75                       		rts
0000C30E                            ; ===========================================================================
0000C30E                            
0000C30E                            Pow_ChkSonic:
0000C30E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C312 6600                       		bne.s	Pow_ChkShoes
0000C314                            
0000C314                            	ExtraLife:
0000C314 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C318 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C326                            
0000C326                            ; ===========================================================================
0000C326                            
0000C326                            Pow_ChkShoes:
0000C326 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C32A 6600                       		bne.s	Pow_ChkShield
0000C32C                            
0000C32C 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C332 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C338 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C33E 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C344 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C34A 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C34E 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C350 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C356 6300                       			bls.s	Pow_NoMus
0000C362                            ; ===========================================================================
0000C362                            
0000C362                            Pow_NoMus:
0000C362 4E75                       		rts	
0000C364                            ; ===========================================================================
0000C364                            
0000C364                            Pow_ChkShield:
0000C364 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C368 6600                       		bne.s	Pow_ChkInvinc
0000C36A                            
0000C36A 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C370 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C376 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C37C 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C38C                            ; ===========================================================================
0000C38C                            
0000C38C                            Pow_ChkInvinc:
0000C38C 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C390 6600                       		bne.s	Pow_ChkRings
0000C392                            
0000C392 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C398 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C39E 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C3A4 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C3AA 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C3B0 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C3B6 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C3BC 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C3C2 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C3C8 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C3CE 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C3D2 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C3D4 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C3DA 6300                       			bls.s	Pow_NoMusic
0000C3E6                            ; ===========================================================================
0000C3E6                            
0000C3E6                            Pow_NoMusic:
0000C3E6 4E75                       		rts	
0000C3E8                            ; ===========================================================================
0000C3E8                            
0000C3E8                            Pow_ChkRings:
0000C3E8 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C3EC 6600                       		bne.s	Pow_ChkS
0000C3EE                            
0000C3EE 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C3F4 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C3FA 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C400 6500                       		bcs.s	Pow_RingSound
0000C402 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C408 6700 FF0A                  		beq.w	ExtraLife
0000C40C 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C412 6500                       		bcs.s	Pow_RingSound
0000C414 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C41A 6700 FEF8                  		beq.w	ExtraLife
0000C41E                            
0000C41E                            	Pow_RingSound:
0000C428                            ; ===========================================================================
0000C428                            
0000C428                            Pow_ChkS:
0000C428 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C42C 6600                       		bne.s	Pow_ChkSRing
0000C42E                            		
0000C42E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C434 6700                       		beq.s	PowS2	; if yes, branch
0000C436 0404 003B                  		subi.b	#$3B,d4
0000C43A 7000                       		moveq	#0,d0
0000C43C 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C442 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C448 6000                       		bra.s	PowSPlay
0000C44A                            
0000C44A                            PowS2:
0000C44A 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C450 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C456 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C45C 6500                       		bcs.s	PowSPlay
0000C45E 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C464 6700 FEAE                  		beq.w	ExtraLife
0000C468 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C46E 6500                       		bcs.s	PowSPlay
0000C470 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C476 6700 FE9C                  		beq.w	ExtraLife	
0000C47A                            
0000C47A                            PowSPlay:
0000C484                            
0000C484                            		
0000C484                            
0000C484                            
0000C484                            Pow_ChkSRing:
0000C484 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C488 6600                       		bne.s	Pow_ChkRShield
0000C48A                            
0000C48A                            		
0000C48A 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C490 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C496 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C49C 6500                       		bcs.s	Pow_ChkSRingSound
0000C49E 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C4A4 6700 FE6E                  		beq.w	ExtraLife
0000C4A8 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C4AE 6500                       		bcs.s	Pow_ChkSRingSound
0000C4B0 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C4B6 6700 FE5C                  		beq.w	ExtraLife	
0000C4BA                            
0000C4BA                            Pow_ChkSRingSound:
0000C4C4                            
0000C4C4                            
0000C4C4                            Pow_ChkRShield:
0000C4C4 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C4C8 6600                       		bne.s	Pow_ChkGShield
0000C4CA                            
0000C4CA 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C4D0 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C4D6 11FC 0001 F5C8             		move.b	#1,(v_rshield).w ; give Sonic a red shield
0000C4DC 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C4EC                            
0000C4EC                            Pow_ChkGShield:
0000C4EC 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C4F0 6600                       		bne.s	Pow_ChkEnd
0000C4F2                            
0000C4F2                            
0000C4F2 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C4F8 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C4FE 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C504 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)	
0000C514                            
0000C514                            Pow_ChkEnd:
0000C514 4E75                       		rts
0000C516                            ; ===========================================================================
0000C516                            
0000C516                            Pow_Delete:	; Routine 4
0000C516 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C51A 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C51E 4E75                       		rts	
0000C51E 4E75                       		rts	
0000C520                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C520                            ; ---------------------------------------------------------------------------
0000C520                            ; Subroutine to	make the sides of a monitor solid
0000C520                            ; ---------------------------------------------------------------------------
0000C520                            
0000C520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C520                            
0000C520                            
0000C520                            Mon_SolidSides:
0000C520 43F8 D000                  		lea	(v_player).w,a1
0000C524 3029 0008                  		move.w	obX(a1),d0
0000C528 9068 0008                  		sub.w	obX(a0),d0
0000C52C D041                       		add.w	d1,d0
0000C52E 6B00                       		bmi.s	loc_A4E6
0000C530 3601                       		move.w	d1,d3
0000C532 D643                       		add.w	d3,d3
0000C534 B043                       		cmp.w	d3,d0
0000C536 6200                       		bhi.s	loc_A4E6
0000C538 1629 0016                  		move.b	obHeight(a1),d3
0000C53C 4883                       		ext.w	d3
0000C53E D443                       		add.w	d3,d2
0000C540 3629 000C                  		move.w	obY(a1),d3
0000C544 9668 000C                  		sub.w	obY(a0),d3
0000C548 D642                       		add.w	d2,d3
0000C54A 6B00                       		bmi.s	loc_A4E6
0000C54C D442                       		add.w	d2,d2
0000C54E B642                       		cmp.w	d2,d3
0000C550 6400                       		bcc.s	loc_A4E6
0000C552 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C556 6B00                       		bmi.s	loc_A4E6
0000C558 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C55E 6400                       		bcc.s	loc_A4E6
0000C560 4A78 FE08                  		tst.w	(v_debuguse).w
0000C564 6600                       		bne.s	loc_A4E6
0000C566 B240                       		cmp.w	d0,d1
0000C568 6400                       		bcc.s	loc_A4DC
0000C56A D241                       		add.w	d1,d1
0000C56C 9041                       		sub.w	d1,d0
0000C56E                            
0000C56E                            loc_A4DC:
0000C56E 0C43 0010                  		cmpi.w	#$10,d3
0000C572 6500                       		bcs.s	loc_A4EA
0000C574                            
0000C574                            loc_A4E2:
0000C574 7201                       		moveq	#1,d1
0000C576 4E75                       		rts	
0000C578                            ; ===========================================================================
0000C578                            
0000C578                            loc_A4E6:
0000C578 7200                       		moveq	#0,d1
0000C57A 4E75                       		rts	
0000C57C                            ; ===========================================================================
0000C57C                            
0000C57C                            loc_A4EA:
0000C57C 7200                       		moveq	#0,d1
0000C57E 1228 0014                  		move.b	obActWid(a0),d1
0000C582 5841                       		addq.w	#4,d1
0000C584 3401                       		move.w	d1,d2
0000C586 D442                       		add.w	d2,d2
0000C588 D269 0008                  		add.w	obX(a1),d1
0000C58C 9268 0008                  		sub.w	obX(a0),d1
0000C590 6BE2                       		bmi.s	loc_A4E2
0000C592 B242                       		cmp.w	d2,d1
0000C594 64DE                       		bcc.s	loc_A4E2
0000C596 72FF                       		moveq	#-1,d1
0000C598 4E75                       		rts	
0000C59A                            ; End of function Obj26_SolidSides
0000C59A                            ; End of function Obj26_SolidSides
0000C59A                            		include	"_anim\Monitor.asm"
0000C59A                            ; ---------------------------------------------------------------------------
0000C59A                            ; Animation script - monitors
0000C59A                            ; ---------------------------------------------------------------------------
0000C59A 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C5A0 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C5A6 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C5AC 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C5B2 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C5B8 00                         		even
0000C5B8 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C5C4 00                         		even
0000C5C4 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C5D0 00                         		even
0000C5D0 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C5DC 00                         		even
0000C5DC 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C5E8 00                         		even
0000C5E8 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C5F4 00                         		even
0000C5F4 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C600 00                         		even
0000C600 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C60C 00                         		even
0000C60C 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C618 00                         		even
0000C618 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C620 00                         		even
0000C620 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C62C 00                         		even
0000C62C 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C638 00                         		even
0000C638 00                         		even
0000C638                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C638                            ; --------------------------------------------------------------------------------
0000C638                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C638                            ; --------------------------------------------------------------------------------
0000C638                            
0000C638                            SME_fj6lL:	
0000C638 0000 0000                  		dc.w SME_fj6lL_1C-SME_fj6lL, SME_fj6lL_22-SME_fj6lL	
0000C63C 0000 0000                  		dc.w SME_fj6lL_2D-SME_fj6lL, SME_fj6lL_38-SME_fj6lL	
0000C640 0000 0000                  		dc.w SME_fj6lL_43-SME_fj6lL, SME_fj6lL_4E-SME_fj6lL	
0000C644 0000 0000                  		dc.w SME_fj6lL_59-SME_fj6lL, SME_fj6lL_64-SME_fj6lL	
0000C648 0000 0000                  		dc.w SME_fj6lL_6F-SME_fj6lL, SME_fj6lL_7A-SME_fj6lL	
0000C64C 0000 0000                  		dc.w SME_fj6lL_85-SME_fj6lL, SME_fj6lL_90-SME_fj6lL	
0000C650 0000 0000                  		dc.w SME_fj6lL_AA-SME_fj6lL, SME_fj6lL_B5-SME_fj6lL	
0000C654 01                         SME_fj6lL_1C:	dc.b 1	
0000C655 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C65A 02                         SME_fj6lL_22:	dc.b 2	
0000C65B F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C660 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C665 02                         SME_fj6lL_2D:	dc.b 2	
0000C666 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C66B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C670 02                         SME_fj6lL_38:	dc.b 2	
0000C671 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C676 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C67B 02                         SME_fj6lL_43:	dc.b 2	
0000C67C F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C681 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C686 02                         SME_fj6lL_4E:	dc.b 2	
0000C687 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C68C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C691 02                         SME_fj6lL_59:	dc.b 2	
0000C692 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000C697 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C69C 02                         SME_fj6lL_64:	dc.b 2	
0000C69D F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C6A2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6A7 02                         SME_fj6lL_6F:	dc.b 2	
0000C6A8 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C6AD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6B2 02                         SME_fj6lL_7A:	dc.b 2	
0000C6B3 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C6B8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6BD 02                         SME_fj6lL_85:	dc.b 2	
0000C6BE F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C6C3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6C8 05                         SME_fj6lL_90:	dc.b 5	
0000C6C9 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C6CE 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C6D3 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C6D8 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C6DD 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C6E2 02                         SME_fj6lL_AA:	dc.b 2	
0000C6E3 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C6E8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6ED 02                         SME_fj6lL_B5:	dc.b 2	
0000C6EE F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C6F3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C6F8                            		even
0000C6F8                            		even
0000C6F8                            
0000C6F8                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C6F8                            ; ---------------------------------------------------------------------------
0000C6F8                            ; Object 0E - Sonic on the title screen
0000C6F8                            ; ---------------------------------------------------------------------------
0000C6F8                            
0000C6F8                            TitleSonic:
0000C6F8 7000                       		moveq	#0,d0
0000C6FA 1028 0024                  		move.b	obRoutine(a0),d0
0000C6FE 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C702 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C706                            ; ===========================================================================
0000C706 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C708 0000                       		dc.w TSon_Delay-TSon_Index
0000C70A 0000                       		dc.w TSon_Move-TSon_Index
0000C70C 0000                       		dc.w TSon_Animate-TSon_Index
0000C70E                            ; ===========================================================================
0000C70E                            
0000C70E                            TSon_Main:	; Routine 0
0000C70E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C712 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C718 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C71E 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C726 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C72C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C732 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C738 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C73E 6100 0000                  		bsr.w	AnimateSprite
0000C742                            
0000C742                            TSon_Delay:	;Routine 2
0000C742 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C746 6A00                       		bpl.s	@wait		; if time remains, branch
0000C748 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C74C 6000 0000                  		bra.w	DisplaySprite
0000C750                            
0000C750                            	@wait:
0000C750 4E75                       		rts	
0000C752                            ; ===========================================================================
0000C752                            
0000C752                            TSon_Move:	; Routine 4
0000C752 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C756 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C75C 6600                       		bne.s	@display	; if not, branch
0000C75E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C762                            
0000C762                            	@display:
0000C762 6000 0000                  		bra.w	DisplaySprite
0000C766                            
0000C766 4E75                       		rts	
0000C768                            ; ===========================================================================
0000C768                            
0000C768                            TSon_Animate:	; Routine 6
0000C768 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C76E 6100 0000                  		bsr.w	AnimateSprite
0000C772 6000 0000                  		bra.w	DisplaySprite
0000C776                            
0000C776 4E75                       		rts	
0000C776 4E75                       		rts	
0000C778                            		include	"_incObj\0F Press Start and TM.asm"
0000C778                            ; ---------------------------------------------------------------------------
0000C778                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C778                            ; ---------------------------------------------------------------------------
0000C778                            
0000C778                            PSBTM:
0000C778 7000                       		moveq	#0,d0
0000C77A 1028 0024                  		move.b	obRoutine(a0),d0
0000C77E 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C782 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C786 6000 0000                  		bra.w	DisplaySprite
0000C78A                            ; ===========================================================================
0000C78A 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C78C 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C78E 0000                       		dc.w PSB_Exit-PSB_Index
0000C790                            ; ===========================================================================
0000C790                            
0000C790                            PSB_Main:	; Routine 0
0000C790 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C794 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C79A 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C7A0 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C7A8 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C7AE 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C7B4 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C7B6                            
0000C7B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C7BA 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C7C0 6600                       		bne.s	PSB_Exit	; if not, branch
0000C7C2                            
0000C7C2 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C7C8 317C 0170 0008             		move.w	#$170,obX(a0)
0000C7CE 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C7D4                            
0000C7D4                            PSB_Exit:	; Routine 4
0000C7D4 4E75                       		rts	
0000C7D6                            ; ===========================================================================
0000C7D6                            
0000C7D6                            PSB_PrsStart:	; Routine 2
0000C7D6 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C7DC 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C7DC 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C7E0                            
0000C7E0                            		include	"_anim\Title Screen Sonic.asm"
0000C7E0                            ; ---------------------------------------------------------------------------
0000C7E0                            ; Animation script - Sonic on the title screen
0000C7E0                            ; ---------------------------------------------------------------------------
0000C7E0 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C7E2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C7EE 00                         		even
0000C7EE 00                         		even
0000C7EE                            		include	"_anim\Press Start and TM.asm"
0000C7EE                            ; ---------------------------------------------------------------------------
0000C7EE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C7EE                            ; ---------------------------------------------------------------------------
0000C7EE 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C7F0 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C7F4                            		even
0000C7F4                            		even
0000C7F4                            
0000C7F4                            		include	"_incObj\sub AnimateSprite.asm"
0000C7F4                            ; ---------------------------------------------------------------------------
0000C7F4                            ; Subroutine to	animate	a sprite using an animation script
0000C7F4                            ; ---------------------------------------------------------------------------
0000C7F4                            
0000C7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C7F4                            
0000C7F4                            
0000C7F4                            AnimateSprite:
0000C7F4 7000                       		moveq	#0,d0
0000C7F6 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C7FA B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C7FE 6700                       		beq.s	Anim_Run	; if not, branch
0000C800                            
0000C800 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C804 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C80A 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C810                            
0000C810                            Anim_Run:
0000C810 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C814 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C816 D040                       		add.w	d0,d0
0000C818 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C81C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C820 7200                       		moveq	#0,d1
0000C822 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C826 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C82A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C82C                            
0000C82C                            Anim_Next:
0000C82C 1200                       		move.b	d0,d1
0000C82E 0200 001F                  		andi.b	#$1F,d0
0000C832 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C836 1028 0022                  		move.b	obStatus(a0),d0
0000C83A E719                       		rol.b	#3,d1
0000C83C B101                       		eor.b	d0,d1
0000C83E 0201 0003                  		andi.b	#3,d1
0000C842 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C848 8328 0001                  		or.b	d1,obRender(a0)
0000C84C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C850                            
0000C850                            Anim_Wait:
0000C850 4E75                       		rts	
0000C852                            ; ===========================================================================
0000C852                            
0000C852                            Anim_End_FF:
0000C852 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C854 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C856 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C85C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C860 60CA                       		bra.s	Anim_Next
0000C862                            ; ===========================================================================
0000C862                            
0000C862                            Anim_End_FE:
0000C862 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C864 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C866 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C86A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C86E 9200                       		sub.b	d0,d1
0000C870 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C874 60B6                       		bra.s	Anim_Next
0000C876                            ; ===========================================================================
0000C876                            
0000C876                            Anim_End_FD:
0000C876 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C878 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C87A 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C880                            
0000C880                            Anim_End_FC:
0000C880 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C882 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C884 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C888                            
0000C888                            Anim_End_FB:
0000C888 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C88A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C88C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C892 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C896                            
0000C896                            Anim_End_FA:
0000C896 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C898 6600                       		bne.s	Anim_End	; if not, branch
0000C89A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C89E                            
0000C89E                            Anim_End:
0000C89E 4E75                       		rts	
0000C8A0                            ; End of function AnimateSprite
0000C8A0                            ; End of function AnimateSprite
0000C8A0                            
0000C8A0                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C8A0                            ; ---------------------------------------------------------------------------
0000C8A0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C8A0                            ; ---------------------------------------------------------------------------
0000C8A0                            Map_PSB_internal:
0000C8A0 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C8A2 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C8A4 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C8A6 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C8A8 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C8A9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C8AE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C8B3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C8B8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C8BD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C8C2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C8C7 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C8C8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8CD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8D2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8D7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8DC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8E1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8E6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8EB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8F0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8F5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8FA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8FF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C904 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C909 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C90E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C913 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C918 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C91D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C922 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C927 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C92C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C931 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C936 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C93B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C940 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C945 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C94A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C94F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C954 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C959 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C95E 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C95F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C964                            		even
0000C964                            		even
0000C964                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C964                            ; ---------------------------------------------------------------------------
0000C964                            ; Sprite mappings - Sonic on the title screen
0000C964                            ; ---------------------------------------------------------------------------
0000C964                            Map_TSon_internal:
0000C964 0000                       		dc.w byte_A898-Map_TSon_internal
0000C966 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C968 0000                       		dc.w byte_A917-Map_TSon_internal
0000C96A 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C96C 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C96E 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C970 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C972 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C974 0A                         byte_A898:	dc.b $A
0000C975 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C97A 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C97F 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C984 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C989 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C98E 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C993 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C998 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C99D 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C9A2 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C9A7 0F                         byte_A8CB:	dc.b $F
0000C9A8 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C9AD 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C9B2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C9B7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C9BC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C9C1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C9C6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C9CB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C9D0 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C9D5 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C9DA 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C9DF 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C9E4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C9E9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C9EE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C9F3 11                         byte_A917:	dc.b $11
0000C9F4 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C9F9 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C9FE 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CA03 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CA08 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CA0D 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CA12 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CA17 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA1C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA21 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA26 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA2B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA30 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA35 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CA3A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CA3F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CA44 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA49 0D                         byte_A96D:	dc.b $D
0000CA4A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CA4F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CA54 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CA59 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CA5E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CA63 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CA68 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CA6D 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CA72 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CA77 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CA7C 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CA81 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CA86 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CA8B 0B                         byte_A9AF:	dc.b $B
0000CA8C 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CA91 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CA96 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CA9B 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CAA0 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CAA5 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CAAA 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CAAF 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CAB4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CAB9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CABE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CAC3 13                         byte_A9E7:	dc.b $13
0000CAC4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CAC9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CACE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CAD3 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CAD8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CADD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CAE2 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CAE7 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CAEC 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CAF1 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CAF6 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CAFB 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB00 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB05 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB0A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB0F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB14 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB19 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB1E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB23 15                         byte_AA47:	dc.b $15
0000CB24 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB29 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB2E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB33 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CB38 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CB3D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CB42 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB47 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB4C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB51 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB56 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB5B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB60 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB65 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB6A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB6F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB74 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB79 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB7E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB83 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB88 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB8D 16                         byte_AAB1:	dc.b $16
0000CB8E 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CB93 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CB98 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CB9D 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CBA2 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CBA7 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CBAC 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CBB1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBB6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBBB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBC0 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBC5 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBCA 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBCF 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CBD4 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CBD9 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CBDE 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CBE3 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CBE8 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CBED 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CBF2 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CBF7 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CBFC                            		even
0000CBFC                            		even
0000CBFC                            
0000CBFC                            		include	"_incObj\2B Chopper.asm"
0000CBFC                            ; ---------------------------------------------------------------------------
0000CBFC                            ; Object 2B - Chopper enemy (GHZ)
0000CBFC                            ; ---------------------------------------------------------------------------
0000CBFC                            
0000CBFC                            Chopper:
0000CBFC 7000                       		moveq	#0,d0
0000CBFE 1028 0024                  		move.b	obRoutine(a0),d0
0000CC02 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CC06 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CC0A 6000 0000                  		bra.w	RememberState
0000CC0E                            ; ===========================================================================
0000CC0E 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CC10 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CC12                            
0000CC12 =00000030                  chop_origY:	equ $30
0000CC12                            ; ===========================================================================
0000CC12                            
0000CC12                            Chop_Main:	; Routine 0
0000CC12 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CC16 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CC1E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CC24 117C 0004 0001             		move.b	#4,obRender(a0)
0000CC2A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CC30 117C 0009 0020             		move.b	#9,obColType(a0)
0000CC36 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CC3C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CC42 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CC48                            
0000CC48                            Chop_ChgSpeed:	; Routine 2
0000CC48 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CC4E 6100 FBA4                  		bsr.w	AnimateSprite
0000CC52 6100 0000                  		bsr.w	SpeedToPos
0000CC56 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CC5C 3028 0030                  		move.w	chop_origY(a0),d0
0000CC60 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CC64 6400                       		bcc.s	@chganimation	; if not, branch
0000CC66 3140 000C                  		move.w	d0,obY(a0)
0000CC6A 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CC70                            
0000CC70                            	@chganimation:
0000CC70 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CC76 0440 00C0                  		subi.w	#$C0,d0
0000CC7A B068 000C                  		cmp.w	obY(a0),d0
0000CC7E 6400                       		bcc.s	@nochg
0000CC80 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CC86 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CC8A 6B00                       		bmi.s	@nochg		; if not, branch
0000CC8C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CC92                            
0000CC92                            	@nochg:
0000CC92 4E75                       		rts	
0000CC92 4E75                       		rts	
0000CC94                            		include	"_anim\Chopper.asm"
0000CC94                            ; ---------------------------------------------------------------------------
0000CC94                            ; Animation script - Chopper enemy
0000CC94                            ; ---------------------------------------------------------------------------
0000CC94 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CC96 0000                       		dc.w @fast-Ani_Chop
0000CC98 0000                       		dc.w @still-Ani_Chop
0000CC9A 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CC9E 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CCA2 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CCA6 00                         		even
0000CCA6 00                         		even
0000CCA6                            Map_Chop:	include	"_maps\Chopper.asm"
0000CCA6                            ; ---------------------------------------------------------------------------
0000CCA6                            ; Sprite mappings - Chopper enemy (GHZ)
0000CCA6                            ; ---------------------------------------------------------------------------
0000CCA6                            Map_Chop_internal:
0000CCA6 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CCA8 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CCAA 01                         @mouthshut:	dc.b 1
0000CCAB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CCB0 01                         @mouthopen:	dc.b 1
0000CCB1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CCB6                            		even
0000CCB6                            		even
0000CCB6                            		include	"_incObj\2C Jaws.asm"
0000CCB6                            ; ---------------------------------------------------------------------------
0000CCB6                            ; Object 2C - Jaws enemy (LZ)
0000CCB6                            ; ---------------------------------------------------------------------------
0000CCB6                            
0000CCB6                            Jaws:
0000CCB6 7000                       		moveq	#0,d0
0000CCB8 1028 0024                  		move.b	obRoutine(a0),d0
0000CCBC 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CCC0 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CCC4                            ; ===========================================================================
0000CCC4 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CCC6 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CCC8                            
0000CCC8 =00000030                  jaws_timecount:	equ $30
0000CCC8 =00000032                  jaws_timedelay:	equ $32
0000CCC8                            ; ===========================================================================
0000CCC8                            
0000CCC8                            Jaws_Main:	; Routine 0
0000CCC8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCCC 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CCD4 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CCDA 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CCE0 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CCE6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CCEC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CCF2 7000                       		moveq	#0,d0
0000CCF4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CCF8 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CCFA 5340                       		subq.w	#1,d0
0000CCFC 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CD00 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CD04 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CD0A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CD10 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CD12 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CD16                            
0000CD16                            Jaws_Turn:	; Routine 2
0000CD16 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CD1A 6A00                       		bpl.s	@animate	; if time remains, branch
0000CD1C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CD22 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CD26 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CD2C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CD32                            
0000CD32                            	@animate:
0000CD32 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CD38 6100 FABA                  		bsr.w	AnimateSprite
0000CD3C 6100 0000                  		bsr.w	SpeedToPos
0000CD40 6000 0000                  		bra.w	RememberState
0000CD40 6000 0000                  		bra.w	RememberState
0000CD44                            		include	"_anim\Jaws.asm"
0000CD44                            ; ---------------------------------------------------------------------------
0000CD44                            ; Animation script - Jaws enemy
0000CD44                            ; ---------------------------------------------------------------------------
0000CD44 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CD46 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CD4C                            		even
0000CD4C                            		even
0000CD4C                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CD4C                            ; --------------------------------------------------------------------------------
0000CD4C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CD4C                            ; --------------------------------------------------------------------------------
0000CD4C                            
0000CD4C                            SME_O5C0c:	
0000CD4C 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CD50 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CD54 02                         SME_O5C0c_8:	dc.b 2	
0000CD55 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD5A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD5F 02                         SME_O5C0c_13:	dc.b 2	
0000CD60 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD65 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD6A 02                         SME_O5C0c_1E:	dc.b 2	
0000CD6B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD70 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD75 02                         SME_O5C0c_29:	dc.b 2	
0000CD76 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD7B F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD80                            		even
0000CD80                            		even
0000CD80                            		include	"_incObj\2D Burrobot.asm"
0000CD80                            ; ---------------------------------------------------------------------------
0000CD80                            ; Object 2D - Burrobot enemy (LZ)
0000CD80                            ; ---------------------------------------------------------------------------
0000CD80                            
0000CD80                            Burrobot:
0000CD80 7000                       		moveq	#0,d0
0000CD82 1028 0024                  		move.b	obRoutine(a0),d0
0000CD86 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CD8A 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CD8E                            ; ===========================================================================
0000CD8E 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CD90 0000                       		dc.w Burro_Action-Burro_Index
0000CD92                            
0000CD92 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CD92                            ; ===========================================================================
0000CD92                            
0000CD92                            Burro_Main:	; Routine 0
0000CD92 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD96 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CD9C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CDA2 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CDAA 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CDB0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CDB6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CDBC 117C 0005 0020             		move.b	#5,obColType(a0)
0000CDC2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CDC8 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CDCC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CDD2                            
0000CDD2                            Burro_Action:	; Routine 2
0000CDD2 7000                       		moveq	#0,d0
0000CDD4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CDD8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CDDC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CDE0 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CDE6 6100 FA0C                  		bsr.w	AnimateSprite
0000CDEA 6000 0000                  		bra.w	RememberState
0000CDEE                            ; ===========================================================================
0000CDEE 0000                       @index:		dc.w @changedir-@index
0000CDF0 0000                       		dc.w Burro_Move-@index
0000CDF2 0000                       		dc.w Burro_Jump-@index
0000CDF4 0000                       		dc.w Burro_ChkSonic-@index
0000CDF6                            ; ===========================================================================
0000CDF6                            
0000CDF6                            @changedir:
0000CDF6 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CDFA 6A00                       		bpl.s	@nochg
0000CDFC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE00 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE06 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CE0C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE12 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CE18 6700                       		beq.s	@nochg
0000CE1A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CE1E                            
0000CE1E                            	@nochg:
0000CE1E 4E75                       		rts	
0000CE20                            ; ===========================================================================
0000CE20                            
0000CE20                            Burro_Move:
0000CE20 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE24 6B00                       		bmi.s	loc_AD84
0000CE26 6100 0000                  		bsr.w	SpeedToPos
0000CE2A 0868 0000 0032             		bchg	#0,$32(a0)
0000CE30 6600                       		bne.s	loc_AD78
0000CE32 3628 0008                  		move.w	obX(a0),d3
0000CE36 0643 000C                  		addi.w	#$C,d3
0000CE3A 0828 0000 0022             		btst	#0,obStatus(a0)
0000CE40 6600                       		bne.s	loc_AD6A
0000CE42 0443 0018                  		subi.w	#$18,d3
0000CE46                            
0000CE46                            loc_AD6A:
0000CE46 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CE4C 0C41 000C                  		cmpi.w	#$C,d1
0000CE50 6C00                       		bge.s	loc_AD84
0000CE52 4E75                       		rts	
0000CE54                            ; ===========================================================================
0000CE54                            
0000CE54                            loc_AD78:
0000CE54 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CE5A D368 000C                  		add.w	d1,obY(a0)
0000CE5E 4E75                       		rts	
0000CE60                            ; ===========================================================================
0000CE60                            
0000CE60                            loc_AD84:
0000CE60 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CE66 6700                       		beq.s	loc_ADA4
0000CE68 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CE6C 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CE72 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CE78 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CE7E 4E75                       		rts	
0000CE80                            ; ===========================================================================
0000CE80                            
0000CE80                            loc_ADA4:
0000CE80 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE84 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CE8A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CE90 4E75                       		rts	
0000CE92                            ; ===========================================================================
0000CE92                            
0000CE92                            Burro_Jump:
0000CE92 6100 0000                  		bsr.w	SpeedToPos
0000CE96 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CE9C 6B00                       		bmi.s	locret_ADF0
0000CE9E 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CEA4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CEAA 4A41                       		tst.w	d1
0000CEAC 6A00                       		bpl.s	locret_ADF0
0000CEAE D368 000C                  		add.w	d1,obY(a0)
0000CEB2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CEB8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CEBE 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CEC4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CEC8 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CECC                            
0000CECC                            locret_ADF0:
0000CECC 4E75                       		rts	
0000CECE                            ; ===========================================================================
0000CECE                            
0000CECE                            Burro_ChkSonic:
0000CECE 343C 0060                  		move.w	#$60,d2
0000CED2 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CED6 6400                       		bcc.s	locret_AE20
0000CED8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CEDC 9068 000C                  		sub.w	obY(a0),d0
0000CEE0 6400                       		bcc.s	locret_AE20
0000CEE2 0C40 FF80                  		cmpi.w	#-$80,d0
0000CEE6 6500                       		bcs.s	locret_AE20
0000CEE8 4A78 FE08                  		tst.w	(v_debuguse).w
0000CEEC 6600                       		bne.s	locret_AE20
0000CEEE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CEF2 3141 0010                  		move.w	d1,obVelX(a0)
0000CEF6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CEFC                            
0000CEFC                            locret_AE20:
0000CEFC 4E75                       		rts	
0000CEFE                            
0000CEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEFE                            
0000CEFE                            
0000CEFE                            Burro_ChkSonic2:
0000CEFE 323C 0080                  		move.w	#$80,d1
0000CF02 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CF08 3038 D008                  		move.w	(v_player+obX).w,d0
0000CF0C 9068 0008                  		sub.w	obX(a0),d0
0000CF10 6400                       		bcc.s	loc_AE40
0000CF12 4440                       		neg.w	d0
0000CF14 4441                       		neg.w	d1
0000CF16 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CF1C                            
0000CF1C                            loc_AE40:
0000CF1C B042                       		cmp.w	d2,d0
0000CF1E 4E75                       		rts	
0000CF20                            ; End of function Burro_ChkSonic2
0000CF20                            ; End of function Burro_ChkSonic2
0000CF20                            		include	"_anim\Burrobot.asm"
0000CF20                            ; ---------------------------------------------------------------------------
0000CF20                            ; Animation script - Burrobot enemy
0000CF20                            ; ---------------------------------------------------------------------------
0000CF20 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CF22 0000                       		dc.w @walk2-Ani_Burro
0000CF24 0000                       		dc.w @digging-Ani_Burro
0000CF26 0000                       		dc.w @fall-Ani_Burro
0000CF28 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CF2C 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CF30 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CF34 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CF38 00                         		even
0000CF38 00                         		even
0000CF38                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CF38                            ; --------------------------------------------------------------------------------
0000CF38                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CF38                            ; --------------------------------------------------------------------------------
0000CF38                            
0000CF38                            SME_Ag_86:	
0000CF38 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CF3C 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CF40 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CF44 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CF46 02                         SME_Ag_86_E:	dc.b 2	
0000CF47 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CF4C 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CF51 02                         SME_Ag_86_19:	dc.b 2	
0000CF52 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF57 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CF5C 02                         SME_Ag_86_24:	dc.b 2	
0000CF5D E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CF62 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CF67 02                         SME_Ag_86_2F:	dc.b 2	
0000CF68 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CF6D 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CF72 02                         SME_Ag_86_3A:	dc.b 2	
0000CF73 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CF78 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CF7D 02                         SME_Ag_86_45:	dc.b 2	
0000CF7E F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CF83 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CF88 02                         SME_Ag_86_50:	dc.b 2	
0000CF89 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF8E 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CF94 00                         		even
0000CF94 00                         		even
0000CF94                            
0000CF94                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94                            ; Object 2F - large grass-covered platforms (MZ)
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94                            
0000CF94                            LargeGrass:
0000CF94 7000                       		moveq	#0,d0
0000CF96 1028 0024                  		move.b	obRoutine(a0),d0
0000CF9A 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CF9E 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CFA2                            ; ===========================================================================
0000CFA2 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CFA4 0000                       		dc.w LGrass_Action-LGrass_Index
0000CFA6                            
0000CFA6 =0000002A                  lgrass_origX:	equ $2A
0000CFA6 =0000002C                  lgrass_origY:	equ $2C
0000CFA6                            
0000CFA6 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CFA8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CFAA 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CFAC 0140                       		dc.b 1,	$40
0000CFAE 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CFB0 0220                       		dc.b 2,	$20
0000CFB2                            ; ===========================================================================
0000CFB2                            
0000CFB2                            LGrass_Main:	; Routine 0
0000CFB2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFB6 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CFBE 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CFC4 117C 0004 0001             		move.b	#4,obRender(a0)
0000CFCA 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000CFD0 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CFD6 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CFDC 7000                       		moveq	#0,d0
0000CFDE 1028 0028                  		move.b	obSubtype(a0),d0
0000CFE2 E448                       		lsr.w	#2,d0
0000CFE4 0240 001C                  		andi.w	#$1C,d0
0000CFE8 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CFEC 3019                       		move.w	(a1)+,d0
0000CFEE 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CFF2 214A 0030                  		move.l	a2,$30(a0)
0000CFF6 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CFFA 1151 0014                  		move.b	(a1),obActWid(a0)
0000CFFE 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D004 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D00A 08E8 0004 0001             		bset	#4,1(a0)
0000D010                            
0000D010                            LGrass_Action:	; Routine 2
0000D010 6100 0000                  		bsr.w	LGrass_Types
0000D014 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D018 6700                       		beq.s	LGrass_Solid
0000D01A 7200                       		moveq	#0,d1
0000D01C 1228 0014                  		move.b	obActWid(a0),d1
0000D020 0641 000B                  		addi.w	#$B,d1
0000D024 6100 C130                  		bsr.w	ExitPlatform
0000D028 0829 0003 0022             		btst	#3,obStatus(a1)
0000D02E 6600 0000                  		bne.w	LGrass_Slope
0000D032 4228 0025                  		clr.b	ob2ndRout(a0)
0000D036 6000                       		bra.s	LGrass_Display
0000D038                            ; ===========================================================================
0000D038                            
0000D038                            LGrass_Slope:
0000D038 7200                       		moveq	#0,d1
0000D03A 1228 0014                  		move.b	obActWid(a0),d1
0000D03E 0641 000B                  		addi.w	#$B,d1
0000D042 2468 0030                  		movea.l	$30(a0),a2
0000D046 3428 0008                  		move.w	obX(a0),d2
0000D04A 6100 D066                  		bsr.w	SlopeObject2
0000D04E 6000                       		bra.s	LGrass_Display
0000D050                            ; ===========================================================================
0000D050                            
0000D050                            LGrass_Solid:
0000D050 7200                       		moveq	#0,d1
0000D052 1228 0014                  		move.b	obActWid(a0),d1
0000D056 0641 000B                  		addi.w	#$B,d1
0000D05A 343C 0020                  		move.w	#$20,d2
0000D05E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D064 6600                       		bne.s	loc_AF8E
0000D066 343C 0030                  		move.w	#$30,d2
0000D06A                            
0000D06A                            loc_AF8E:
0000D06A 2468 0030                  		movea.l	$30(a0),a2
0000D06E 6100 0000                  		bsr.w	SolidObject2F
0000D072                            
0000D072                            LGrass_Display:
0000D072 6100 0000                  		bsr.w	DisplaySprite
0000D076 6000 0000                  		bra.w	LGrass_ChkDel
0000D07A                            
0000D07A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D07A                            
0000D07A                            
0000D07A                            LGrass_Types:
0000D07A 7000                       		moveq	#0,d0
0000D07C 1028 0028                  		move.b	obSubtype(a0),d0
0000D080 0240 0007                  		andi.w	#7,d0
0000D084 D040                       		add.w	d0,d0
0000D086 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D08A 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D08E                            ; End of function LGrass_Types
0000D08E                            
0000D08E                            ; ===========================================================================
0000D08E 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D090 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D092 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D094 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D096 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D098 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D09A                            ; ===========================================================================
0000D09A                            
0000D09A                            LGrass_Type00:
0000D09A 4E75                       		rts			; type 00 platform doesn't move
0000D09C                            ; ===========================================================================
0000D09C                            
0000D09C                            LGrass_Type01:
0000D09C 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D0A0 323C 0020                  		move.w	#$20,d1
0000D0A4 6000                       		bra.s	LGrass_Move
0000D0A6                            ; ===========================================================================
0000D0A6                            
0000D0A6                            LGrass_Type02:
0000D0A6 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D0AA 323C 0030                  		move.w	#$30,d1
0000D0AE 6000                       		bra.s	LGrass_Move
0000D0B0                            ; ===========================================================================
0000D0B0                            
0000D0B0                            LGrass_Type03:
0000D0B0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D0B4 323C 0040                  		move.w	#$40,d1
0000D0B8 6000                       		bra.s	LGrass_Move
0000D0BA                            ; ===========================================================================
0000D0BA                            
0000D0BA                            LGrass_Type04:
0000D0BA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D0BE 323C 0060                  		move.w	#$60,d1
0000D0C2                            
0000D0C2                            LGrass_Move:
0000D0C2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D0C8 6700                       		beq.s	loc_AFF2
0000D0CA 4440                       		neg.w	d0
0000D0CC D041                       		add.w	d1,d0
0000D0CE                            
0000D0CE                            loc_AFF2:
0000D0CE 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D0D2 9240                       		sub.w	d0,d1
0000D0D4 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D0D8 4E75                       		rts	
0000D0DA                            ; ===========================================================================
0000D0DA                            
0000D0DA                            LGrass_Type05:
0000D0DA 1028 0034                  		move.b	$34(a0),d0
0000D0DE 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D0E2 6600                       		bne.s	loc_B010
0000D0E4 5500                       		subq.b	#2,d0
0000D0E6 6400                       		bcc.s	loc_B01C
0000D0E8 7000                       		moveq	#0,d0
0000D0EA 6000                       		bra.s	loc_B01C
0000D0EC                            ; ===========================================================================
0000D0EC                            
0000D0EC                            loc_B010:
0000D0EC 5800                       		addq.b	#4,d0
0000D0EE 0C00 0040                  		cmpi.b	#$40,d0
0000D0F2 6500                       		bcs.s	loc_B01C
0000D0F4 103C 0040                  		move.b	#$40,d0
0000D0F8                            
0000D0F8                            loc_B01C:
0000D0F8 1140 0034                  		move.b	d0,$34(a0)
0000D0FC 4EB9 0000 3A32             		jsr	(CalcSine).l
0000D102 E848                       		lsr.w	#4,d0
0000D104 3200                       		move.w	d0,d1
0000D106 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D10A 3140 000C                  		move.w	d0,obY(a0)
0000D10E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D114 6600                       		bne.s	loc_B07A
0000D116 4A28 0035                  		tst.b	$35(a0)
0000D11A 6600                       		bne.s	loc_B07A
0000D11C 117C 0001 0035             		move.b	#1,$35(a0)
0000D122 6100 0000                  		bsr.w	FindNextFreeObj
0000D126 6600                       		bne.s	loc_B07A
0000D128 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D12C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D132 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D138 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D13C 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D140 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D146 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D14C 2348 0038                  		move.l	a0,$38(a1)
0000D150 2448                       		movea.l	a0,a2
0000D152 6100                       		bsr.s	sub_B09C
0000D154                            
0000D154                            loc_B07A:
0000D154 7400                       		moveq	#0,d2
0000D156 45E8 0036                  		lea	$36(a0),a2
0000D15A 141A                       		move.b	(a2)+,d2
0000D15C 5302                       		subq.b	#1,d2
0000D15E 6500                       		bcs.s	locret_B09A
0000D160                            
0000D160                            loc_B086:
0000D160 7000                       		moveq	#0,d0
0000D162 101A                       		move.b	(a2)+,d0
0000D164 ED48                       		lsl.w	#6,d0
0000D166 0640 D000                  		addi.w	#$D000,d0
0000D16A 3240                       		movea.w	d0,a1
0000D16C 3341 003C                  		move.w	d1,$3C(a1)
0000D170 51CA FFEE                  		dbf	d2,loc_B086
0000D174                            
0000D174                            locret_B09A:
0000D174 4E75                       		rts	
0000D176                            
0000D176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D176                            
0000D176                            
0000D176                            sub_B09C:
0000D176 45EA 0036                  		lea	$36(a2),a2
0000D17A 7000                       		moveq	#0,d0
0000D17C 1012                       		move.b	(a2),d0
0000D17E 5212                       		addq.b	#1,(a2)
0000D180 45F2 0001                  		lea	1(a2,d0.w),a2
0000D184 3009                       		move.w	a1,d0
0000D186 0440 D000                  		subi.w	#$D000,d0
0000D18A EC48                       		lsr.w	#6,d0
0000D18C 0240 007F                  		andi.w	#$7F,d0
0000D190 1480                       		move.b	d0,(a2)
0000D192 4E75                       		rts	
0000D194                            ; End of function sub_B09C
0000D194                            
0000D194                            ; ===========================================================================
0000D194                            
0000D194                            LGrass_ChkDel:
0000D194 4A28 0035                  		tst.b	$35(a0)
0000D198 6700                       		beq.s	loc_B0C6
0000D19A 4A28 0001                  		tst.b	obRender(a0)
0000D19E 6A00                       		bpl.s	LGrass_DelFlames
0000D1A0                            
0000D1A0                            loc_B0C6:
0000D1BE 4E75                       		rts	
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            LGrass_DelFlames:
0000D1C0 7400                       		moveq	#0,d2
0000D1C2                            
0000D1C2                            loc_B0E8:
0000D1C2 45E8 0036                  		lea	$36(a0),a2
0000D1C6 1412                       		move.b	(a2),d2
0000D1C8 421A                       		clr.b	(a2)+
0000D1CA 5302                       		subq.b	#1,d2
0000D1CC 6500                       		bcs.s	locret_B116
0000D1CE                            
0000D1CE                            loc_B0F4:
0000D1CE 7000                       		moveq	#0,d0
0000D1D0 1012                       		move.b	(a2),d0
0000D1D2 421A                       		clr.b	(a2)+
0000D1D4 ED48                       		lsl.w	#6,d0
0000D1D6 0640 D000                  		addi.w	#$D000,d0
0000D1DA 3240                       		movea.w	d0,a1
0000D1DC 6100 0000                  		bsr.w	DeleteChild
0000D1E0 51CA FFEC                  		dbf	d2,loc_B0F4
0000D1E4 117C 0000 0035             		move.b	#0,$35(a0)
0000D1EA 117C 0000 0034             		move.b	#0,$34(a0)
0000D1F0                            
0000D1F0                            locret_B116:
0000D1F0 4E75                       		rts	
0000D1F2                            ; ===========================================================================
0000D1F2                            ; ---------------------------------------------------------------------------
0000D1F2                            ; Collision data for large moving platforms (MZ)
0000D1F2                            ; ---------------------------------------------------------------------------
0000D1F2                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D23E                            		even
0000D23E                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D26A                            		even
0000D26A                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D2B6                            		even
0000D2B6                            		even
0000D2B6                            		include	"_incObj\35 Burning Grass.asm"
0000D2B6                            ; ---------------------------------------------------------------------------
0000D2B6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D2B6                            ; (appears when	you walk on sinking platforms)
0000D2B6                            ; ---------------------------------------------------------------------------
0000D2B6                            
0000D2B6                            GrassFire:
0000D2B6 7000                       		moveq	#0,d0
0000D2B8 1028 0024                  		move.b	obRoutine(a0),d0
0000D2BC 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D2C0 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D2C4                            ; ===========================================================================
0000D2C4 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D2C6 0000                       		dc.w loc_B238-GFire_Index
0000D2C8 0000                       		dc.w GFire_Move-GFire_Index
0000D2CA                            
0000D2CA =0000002A                  gfire_origX:	equ $2A
0000D2CA                            ; ===========================================================================
0000D2CA                            
0000D2CA                            GFire_Main:	; Routine 0
0000D2CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D2CE 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D2D6 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D2DC 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D2E2 117C 0004 0001             		move.b	#4,obRender(a0)
0000D2E8 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D2EE 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D2F4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D304 4A28 0028                  		tst.b	obSubtype(a0)
0000D308 6700                       		beq.s	loc_B238
0000D30A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D30E 6000 0000                  		bra.w	GFire_Move
0000D312                            ; ===========================================================================
0000D312                            
0000D312                            loc_B238:	; Routine 2
0000D312 2268 0030                  		movea.l	$30(a0),a1
0000D316 3228 0008                  		move.w	obX(a0),d1
0000D31A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D31E 0641 000C                  		addi.w	#$C,d1
0000D322 3001                       		move.w	d1,d0
0000D324 E248                       		lsr.w	#1,d0
0000D326 1031 0000                  		move.b	(a1,d0.w),d0
0000D32A 4440                       		neg.w	d0
0000D32C D068 002C                  		add.w	$2C(a0),d0
0000D330 3400                       		move.w	d0,d2
0000D332 D068 003C                  		add.w	$3C(a0),d0
0000D336 3140 000C                  		move.w	d0,obY(a0)
0000D33A 0C41 0084                  		cmpi.w	#$84,d1
0000D33E 6400                       		bcc.s	loc_B2B0
0000D340 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D348 0C41 0080                  		cmpi.w	#$80,d1
0000D34C 6400                       		bcc.s	loc_B2B0
0000D34E 2028 0008                  		move.l	obX(a0),d0
0000D352 0680 0008 0000             		addi.l	#$80000,d0
0000D358 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D35E 6600                       		bne.s	loc_B2B0
0000D360 6100 0000                  		bsr.w	FindNextFreeObj
0000D364 6600                       		bne.s	loc_B2B0
0000D366 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D36A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D370 3342 002C                  		move.w	d2,$2C(a1)
0000D374 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D37A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D380 2468 0038                  		movea.l	$38(a0),a2
0000D384 6100 FDF0                  		bsr.w	sub_B09C
0000D388                            
0000D388                            loc_B2B0:
0000D388 6000                       		bra.s	GFire_Animate
0000D38A                            ; ===========================================================================
0000D38A                            
0000D38A                            GFire_Move:	; Routine 4
0000D38A 3028 002C                  		move.w	$2C(a0),d0
0000D38E D068 003C                  		add.w	$3C(a0),d0
0000D392 3140 000C                  		move.w	d0,obY(a0)
0000D396                            
0000D396                            GFire_Animate:
0000D396 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D39C 6100 F456                  		bsr.w	AnimateSprite
0000D3A0 6000 0000                  		bra.w	DisplaySprite
0000D3A0 6000 0000                  		bra.w	DisplaySprite
0000D3A4                            		include	"_anim\Burning Grass.asm"
0000D3A4                            ; ---------------------------------------------------------------------------
0000D3A4                            ; Animation script - burning grass that sits on the floor (MZ)
0000D3A4                            ; ---------------------------------------------------------------------------
0000D3A4 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D3A6 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D3AC                            		even
0000D3AC                            		even
0000D3AC                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D3AC                            ; ---------------------------------------------------------------------------
0000D3AC                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D3AC                            ; ---------------------------------------------------------------------------
0000D3AC                            Map_LGrass_internal:
0000D3AC 0000                       		dc.w @wide-Map_LGrass_internal
0000D3AE 0000                       		dc.w @sloped-Map_LGrass_internal
0000D3B0 0000                       		dc.w @narrow-Map_LGrass_internal
0000D3B2 0D                         @wide:		dc.b $D
0000D3B3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D3B8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D3BD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D3C2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D3C7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D3CC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D3D1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D3D6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D3DB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D3E0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D3E5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D3EA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D3EF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D3F4 0A                         @sloped:	dc.b $A
0000D3F5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D3FA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D3FF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D404 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D409 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D40E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D413 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D418 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D41D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D422 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D427 06                         @narrow:	dc.b 6
0000D428 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D42D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D432 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D437 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D43C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D441 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D446                            		even
0000D446                            		even
0000D446                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D446                            ; --------------------------------------------------------------------------------
0000D446                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D446                            ; --------------------------------------------------------------------------------
0000D446                            
0000D446                            SME_gyvTV:	
0000D446 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D44A 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D44E 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D452 01                         SME_gyvTV_C:	dc.b 1	
0000D453 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D458 01                         SME_gyvTV_12:	dc.b 1	
0000D459 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D45E 01                         SME_gyvTV_18:	dc.b 1	
0000D45F F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D464 01                         SME_gyvTV_1E:	dc.b 1	
0000D465 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D46A 01                         SME_gyvTV_24:	dc.b 1	
0000D46B F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D470 01                         SME_gyvTV_2A:	dc.b 1	
0000D471 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D476                            		even
0000D476                            		even
0000D476                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D476                            ; ---------------------------------------------------------------------------
0000D476                            ; Object 30 - large green glass blocks (MZ)
0000D476                            ; ---------------------------------------------------------------------------
0000D476                            
0000D476                            GlassBlock:
0000D476 7000                       		moveq	#0,d0
0000D478 1028 0024                  		move.b	obRoutine(a0),d0
0000D47C 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D480 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D4A2 6000 0000                  		bra.w	DisplaySprite
0000D4A6                            ; ===========================================================================
0000D4A6                            
0000D4A6                            Glass_Delete:
0000D4A6 6000 0000                  		bra.w	DeleteObject
0000D4AA                            ; ===========================================================================
0000D4AA 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D4AC 0000                       		dc.w Glass_Block012-Glass_Index
0000D4AE 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D4B0 0000                       		dc.w Glass_Block34-Glass_Index
0000D4B2 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D4B4                            
0000D4B4 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D4B4 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D4B4                            
0000D4B4 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D4B7 0400 01                    		dc.b 4,	0, 1
0000D4BA 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D4BD 0800 01                    		dc.b 8,	0, 1
0000D4C0                            ; ===========================================================================
0000D4C0                            
0000D4C0                            Glass_Main:	; Routine 0
0000D4C0 45F9 0000 D4B4             		lea	(Glass_Vars1).l,a2
0000D4C6 7201                       		moveq	#1,d1
0000D4C8 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D4CE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D4D4 6500                       		bcs.s	@IsType012	; if yes, branch
0000D4D6                            
0000D4D6 45F9 0000 D4BA             		lea	(Glass_Vars2).l,a2
0000D4DC 7201                       		moveq	#1,d1
0000D4DE 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D4E4                            
0000D4E4                            	@IsType012:
0000D4E4 2248                       		movea.l	a0,a1
0000D4E6 6000                       		bra.s	@Load		; load main object
0000D4E8                            ; ===========================================================================
0000D4E8                            
0000D4E8                            	@Repeat:
0000D4E8 6100 0000                  		bsr.w	FindNextFreeObj
0000D4EC 6600                       		bne.s	@Fail
0000D4EE                            
0000D4EE                            @Load:
0000D4EE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D4F2 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D4F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D4FC 101A                       		move.b	(a2)+,d0
0000D4FE 4880                       		ext.w	d0
0000D500 D068 000C                  		add.w	obY(a0),d0
0000D504 3340 000C                  		move.w	d0,obY(a1)
0000D508 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D510 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D516 137C 0004 0001             		move.b	#4,obRender(a1)
0000D51C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D522 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D528 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D52E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D534 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D538 2348 003C                  		move.l	a0,glass_parent(a1)
0000D53C 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D540                            
0000D540 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D546 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D54C 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D550 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D556                            
0000D556                            	@Fail:
0000D556 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D55C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D562                            
0000D562                            Glass_Block012:	; Routine 2
0000D562 6100 0000                  		bsr.w	Glass_Types
0000D566 323C 002B                  		move.w	#$2B,d1
0000D56A 343C 0048                  		move.w	#$48,d2
0000D56E 363C 0049                  		move.w	#$49,d3
0000D572 3828 0008                  		move.w	obX(a0),d4
0000D576 6000 0000                  		bra.w	SolidObject
0000D57A                            ; ===========================================================================
0000D57A                            
0000D57A                            Glass_Reflect012:
0000D57A                            		; Routine 4
0000D57A 2268 003C                  		movea.l	$3C(a0),a1
0000D57E 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D584 6000 0000                  		bra.w	Glass_Types
0000D588                            ; ===========================================================================
0000D588                            
0000D588                            Glass_Block34:	; Routine 6
0000D588 6100 0000                  		bsr.w	Glass_Types
0000D58C 323C 002B                  		move.w	#$2B,d1
0000D590 343C 0038                  		move.w	#$38,d2
0000D594 363C 0039                  		move.w	#$39,d3
0000D598 3828 0008                  		move.w	obX(a0),d4
0000D59C 6000 0000                  		bra.w	SolidObject
0000D5A0                            ; ===========================================================================
0000D5A0                            
0000D5A0                            Glass_Reflect34:
0000D5A0                            		; Routine 8
0000D5A0 2268 003C                  		movea.l	$3C(a0),a1
0000D5A4 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D5AA 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D5B0 6000 0000                  		bra.w	Glass_Types
0000D5B4                            
0000D5B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5B4                            
0000D5B4                            
0000D5B4                            Glass_Types:
0000D5B4 7000                       		moveq	#0,d0
0000D5B6 1028 0028                  		move.b	obSubtype(a0),d0
0000D5BA 0240 0007                  		andi.w	#7,d0
0000D5BE D040                       		add.w	d0,d0
0000D5C0 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D5C4 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D5C8                            ; End of function Glass_Types
0000D5C8                            
0000D5C8                            ; ===========================================================================
0000D5C8 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D5CA 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D5CC 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D5CE 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D5D0 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D5D2                            ; ===========================================================================
0000D5D2                            
0000D5D2                            Glass_Type00:
0000D5D2 4E75                       		rts	
0000D5D4                            ; ===========================================================================
0000D5D4                            
0000D5D4                            Glass_Type01:
0000D5D4 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D5D8 323C 0040                  		move.w	#$40,d1
0000D5DC 6000                       		bra.s	loc_B514
0000D5DE                            ; ===========================================================================
0000D5DE                            
0000D5DE                            Glass_Type02:
0000D5DE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D5E2 323C 0040                  		move.w	#$40,d1
0000D5E6 4440                       		neg.w	d0
0000D5E8 D041                       		add.w	d1,d0
0000D5EA                            
0000D5EA                            loc_B514:
0000D5EA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D5F0 6700                       		beq.s	loc_B526
0000D5F2 4440                       		neg.w	d0
0000D5F4 D041                       		add.w	d1,d0
0000D5F6 E208                       		lsr.b	#1,d0
0000D5F8 0640 0020                  		addi.w	#$20,d0
0000D5FC                            
0000D5FC                            loc_B526:
0000D5FC 6000 0000                  		bra.w	loc_B5EE
0000D600                            ; ===========================================================================
0000D600                            
0000D600                            Glass_Type03:
0000D600 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D606 6700                       		beq.s	loc_B53E
0000D608 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D60C 0440 0010                  		subi.w	#$10,d0
0000D610 6000 0000                  		bra.w	loc_B5EE
0000D614                            ; ===========================================================================
0000D614                            
0000D614                            loc_B53E:
0000D614 0828 0003 0022             		btst	#3,obStatus(a0)
0000D61A 6600                       		bne.s	loc_B54E
0000D61C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D622 6000                       		bra.s	loc_B582
0000D624                            ; ===========================================================================
0000D624                            
0000D624                            loc_B54E:
0000D624 4A28 0034                  		tst.b	$34(a0)
0000D628 6600                       		bne.s	loc_B582
0000D62A 117C 0001 0034             		move.b	#1,$34(a0)
0000D630 08E8 0000 0035             		bset	#0,$35(a0)
0000D636 6700                       		beq.s	loc_B582
0000D638 08E8 0007 0034             		bset	#7,$34(a0)
0000D63E 317C 0010 0036             		move.w	#$10,$36(a0)
0000D644 117C 000A 0038             		move.b	#$A,$38(a0)
0000D64A 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D650 6600                       		bne.s	loc_B582
0000D652 317C 0040 0036             		move.w	#$40,$36(a0)
0000D658                            
0000D658                            loc_B582:
0000D658 4A28 0034                  		tst.b	$34(a0)
0000D65C 6A00                       		bpl.s	loc_B5AA
0000D65E 4A28 0038                  		tst.b	$38(a0)
0000D662 6700                       		beq.s	loc_B594
0000D664 5328 0038                  		subq.b	#1,$38(a0)
0000D668 6600                       		bne.s	loc_B5AA
0000D66A                            
0000D66A                            loc_B594:
0000D66A 4A68 0032                  		tst.w	glass_dist(a0)
0000D66E 6700                       		beq.s	loc_B5A4
0000D670 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D674 5368 0036                  		subq.w	#1,$36(a0)
0000D678 6600                       		bne.s	loc_B5AA
0000D67A                            
0000D67A                            loc_B5A4:
0000D67A 08A8 0007 0034             		bclr	#7,$34(a0)
0000D680                            
0000D680                            loc_B5AA:
0000D680 3028 0032                  		move.w	glass_dist(a0),d0
0000D684 6000                       		bra.s	loc_B5EE
0000D686                            ; ===========================================================================
0000D686                            
0000D686                            Glass_Type04:
0000D686 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D68C 6700                       		beq.s	Glass_ChkSwitch
0000D68E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D692 0440 0010                  		subi.w	#$10,d0
0000D696 6000                       		bra.s	loc_B5EE
0000D698                            ; ===========================================================================
0000D698                            
0000D698                            Glass_ChkSwitch:
0000D698 4A28 0034                  		tst.b	$34(a0)
0000D69C 6600                       		bne.s	loc_B5E0
0000D69E 45F8 F7E0                  		lea	(f_switch).w,a2
0000D6A2 7000                       		moveq	#0,d0
0000D6A4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D6A8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D6AA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D6AE 6700                       		beq.s	loc_B5EA	; if not, branch
0000D6B0 117C 0001 0034             		move.b	#1,$34(a0)
0000D6B6                            
0000D6B6                            loc_B5E0:
0000D6B6 4A68 0032                  		tst.w	glass_dist(a0)
0000D6BA 6700                       		beq.s	loc_B5EA
0000D6BC 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D6C0                            
0000D6C0                            loc_B5EA:
0000D6C0 3028 0032                  		move.w	glass_dist(a0),d0
0000D6C4                            
0000D6C4                            loc_B5EE:
0000D6C4 3228 0030                  		move.w	$30(a0),d1
0000D6C8 9240                       		sub.w	d0,d1
0000D6CA 3141 000C                  		move.w	d1,obY(a0)
0000D6CE 4E75                       		rts	
0000D6CE 4E75                       		rts	
0000D6D0                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D6D0                            ; --------------------------------------------------------------------------------
0000D6D0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D6D0                            ; --------------------------------------------------------------------------------
0000D6D0                            
0000D6D0                            SME_NEyTf:	
0000D6D0 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D6D4 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D6D6 0C                         SME_NEyTf_6:	dc.b $C	
0000D6D7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D6DC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D6E1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D6E6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D6EB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D6F0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D6F5 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D6FA 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D6FF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D704 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D709 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D70E 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D713 02                         SME_NEyTf_43:	dc.b 2	
0000D714 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D719 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D71E 0A                         SME_NEyTf_4E:	dc.b $A	
0000D71F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D724 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D729 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D72E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D733 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D738 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D73D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D742 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D747 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D74C 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D752 00                         		even
0000D752 00                         		even
0000D752                            		include	"_incObj\31 Chained Stompers.asm"
0000D752                            ; ---------------------------------------------------------------------------
0000D752                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D752                            ; ---------------------------------------------------------------------------
0000D752                            
0000D752                            ChainStomp:
0000D752 7000                       		moveq	#0,d0
0000D754 1028 0024                  		move.b	obRoutine(a0),d0
0000D758 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D75C 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D760                            ; ===========================================================================
0000D760 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D762 0000                       		dc.w loc_B798-CStom_Index
0000D764 0000                       		dc.w loc_B7FE-CStom_Index
0000D766 0000                       		dc.w CStom_Display2-CStom_Index
0000D768 0000                       		dc.w loc_B7E2-CStom_Index
0000D76A                            
0000D76A =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D76A                            
0000D76A 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D76C 0100                       		dc.b 1,	0
0000D76E                            
0000D76E 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D771 041C 01                    		dc.b 4,	$1C, 1
0000D774 08CC 03                    		dc.b 8,	$CC, 3
0000D777 06F0 02                    		dc.b 6,	$F0, 2
0000D77A                            
0000D77A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D77E 5000 7800                  		dc.w $5000, $7800
0000D782 3800 5800                  		dc.w $3800, $5800
0000D786 B800                       		dc.w $B800
0000D788                            ; ===========================================================================
0000D788                            
0000D788                            CStom_Main:	; Routine 0
0000D788 7000                       		moveq	#0,d0
0000D78A 1028 0028                  		move.b	obSubtype(a0),d0
0000D78E 6A00                       		bpl.s	loc_B6CE
0000D790 0240 007F                  		andi.w	#$7F,d0
0000D794 D040                       		add.w	d0,d0
0000D796 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D79A 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D79E 101A                       		move.b	(a2)+,d0
0000D7A0 1140 0028                  		move.b	d0,obSubtype(a0)
0000D7A4                            
0000D7A4                            loc_B6CE:
0000D7A4 0200 000F                  		andi.b	#$F,d0
0000D7A8 D040                       		add.w	d0,d0
0000D7AA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D7AE 4A40                       		tst.w	d0
0000D7B0 6600                       		bne.s	loc_B6E0
0000D7B2 3142 0032                  		move.w	d2,$32(a0)
0000D7B6                            
0000D7B6                            loc_B6E0:
0000D7B6 45F9 0000 D76E             		lea	(CStom_Var).l,a2
0000D7BC 2248                       		movea.l	a0,a1
0000D7BE 7203                       		moveq	#3,d1
0000D7C0 6000                       		bra.s	CStom_MakeStomper
0000D7C2                            ; ===========================================================================
0000D7C2                            
0000D7C2                            CStom_Loop:
0000D7C2 6100 0000                  		bsr.w	FindNextFreeObj
0000D7C6 6600 0000                  		bne.w	CStom_SetSize
0000D7CA                            
0000D7CA                            CStom_MakeStomper:
0000D7CA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D7CE 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D7D2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D7D8 101A                       		move.b	(a2)+,d0
0000D7DA 4880                       		ext.w	d0
0000D7DC D068 000C                  		add.w	obY(a0),d0
0000D7E0 3340 000C                  		move.w	d0,obY(a1)
0000D7E4 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D7EC 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D7F2 137C 0004 0001             		move.b	#4,obRender(a1)
0000D7F8 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D7FE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D804 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D80A 3342 0034                  		move.w	d2,$34(a1)
0000D80E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D814 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D818 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D81E 6600                       		bne.s	loc_B76A
0000D820 5341                       		subq.w	#1,d1
0000D822 1028 0028                  		move.b	obSubtype(a0),d0
0000D826 0240 00F0                  		andi.w	#$F0,d0
0000D82A 0C40 0020                  		cmpi.w	#$20,d0
0000D82E 679A                       		beq.s	CStom_MakeStomper
0000D830 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D836 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D83C 5241                       		addq.w	#1,d1
0000D83E                            
0000D83E                            loc_B76A:
0000D83E 2348 003C                  		move.l	a0,$3C(a1)
0000D842 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D846                            
0000D846 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D84C                            
0000D84C                            CStom_SetSize:
0000D84C 7000                       		moveq	#0,d0
0000D84E 1028 0028                  		move.b	obSubtype(a0),d0
0000D852 E648                       		lsr.w	#3,d0
0000D854 0200 000E                  		andi.b	#$E,d0
0000D858 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D85C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D860 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D864 6000                       		bra.s	loc_B798
0000D866                            ; ===========================================================================
0000D866 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D868 3009                       		dc.b $30, 9
0000D86A 100A                       		dc.b $10, $A
0000D86C                            ; ===========================================================================
0000D86C                            
0000D86C                            loc_B798:	; Routine 2
0000D86C 6100 0000                  		bsr.w	CStom_Types
0000D870 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D876 7200                       		moveq	#0,d1
0000D878 1228 0014                  		move.b	obActWid(a0),d1
0000D87C 0641 000B                  		addi.w	#$B,d1
0000D880 343C 000C                  		move.w	#$C,d2
0000D884 363C 000D                  		move.w	#$D,d3
0000D888 3828 0008                  		move.w	obX(a0),d4
0000D88C 6100 0000                  		bsr.w	SolidObject
0000D890 0828 0003 0022             		btst	#3,obStatus(a0)
0000D896 6700                       		beq.s	CStom_Display
0000D898 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D89E 6400                       		bcc.s	CStom_Display
0000D8A0 2448                       		movea.l	a0,a2
0000D8A2 41F8 D000                  		lea	(v_player).w,a0
0000D8A6 4EB9 0000 0000             		jsr	(KillSonic).l
0000D8AC 204A                       		movea.l	a2,a0
0000D8AE                            
0000D8AE                            CStom_Display:
0000D8AE 6100 0000                  		bsr.w	DisplaySprite
0000D8B2 6000 0000                  		bra.w	CStom_ChkDel
0000D8B6                            ; ===========================================================================
0000D8B6                            
0000D8B6                            loc_B7E2:	; Routine 8
0000D8B6 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D8BC 08E8 0004 0001             		bset	#4,obRender(a0)
0000D8C2 2268 003C                  		movea.l	$3C(a0),a1
0000D8C6 1029 0032                  		move.b	$32(a1),d0
0000D8CA EA08                       		lsr.b	#5,d0
0000D8CC 5600                       		addq.b	#3,d0
0000D8CE 1140 001A                  		move.b	d0,obFrame(a0)
0000D8D2                            
0000D8D2                            loc_B7FE:	; Routine 4
0000D8D2 2268 003C                  		movea.l	$3C(a0),a1
0000D8D6 7000                       		moveq	#0,d0
0000D8D8 1029 0032                  		move.b	$32(a1),d0
0000D8DC D068 0030                  		add.w	$30(a0),d0
0000D8E0 3140 000C                  		move.w	d0,obY(a0)
0000D8E4                            
0000D8E4                            CStom_Display2:	; Routine 6
0000D8E4 6100 0000                  		bsr.w	DisplaySprite
0000D8E8                            
0000D8E8                            CStom_ChkDel:
0000D906 4E75                       		rts	
0000D908                            ; ===========================================================================
0000D908                            
0000D908                            CStom_Types:
0000D908 1028 0028                  		move.b	obSubtype(a0),d0
0000D90C 0240 000F                  		andi.w	#$F,d0
0000D910 D040                       		add.w	d0,d0
0000D912 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D916 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D91A                            ; ===========================================================================
0000D91A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D91C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D91E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D920 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D922 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D924 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D926 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D928                            ; ===========================================================================
0000D928                            
0000D928                            CStom_Type00:
0000D928 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D92C 7000                       		moveq	#0,d0
0000D92E 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D932 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D936 6700                       		beq.s	loc_B8A8	; if not, branch
0000D938 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D93C 6A00                       		bpl.s	loc_B872
0000D93E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D944 6700                       		beq.s	loc_B8A0
0000D946                            
0000D946                            loc_B872:
0000D946 4A68 0032                  		tst.w	$32(a0)
0000D94A 6700                       		beq.s	loc_B8A0
0000D94C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D950 0200 000F                  		andi.b	#$F,d0
0000D954 6600                       		bne.s	loc_B892
0000D956 4A28 0001                  		tst.b	1(a0)
0000D95A 6A00                       		bpl.s	loc_B892
0000D966                            
0000D966                            loc_B892:
0000D966 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D96C 6400                       		bcc.s	CStom_Restart
0000D96E 317C 0000 0032             		move.w	#0,$32(a0)
0000D974                            
0000D974                            loc_B8A0:
0000D974 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D97A 6000                       		bra.s	CStom_Restart
0000D97C                            ; ===========================================================================
0000D97C                            
0000D97C                            loc_B8A8:
0000D97C 3228 0034                  		move.w	$34(a0),d1
0000D980 B268 0032                  		cmp.w	$32(a0),d1
0000D984 6700                       		beq.s	CStom_Restart
0000D986 3028 0012                  		move.w	obVelY(a0),d0
0000D98A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D990 D168 0032                  		add.w	d0,$32(a0)
0000D994 B268 0032                  		cmp.w	$32(a0),d1
0000D998 6200                       		bhi.s	CStom_Restart
0000D99A 3141 0032                  		move.w	d1,$32(a0)
0000D99E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D9A4 4A28 0001                  		tst.b	obRender(a0)
0000D9A8 6A00                       		bpl.s	CStom_Restart
0000D9B4                            
0000D9B4                            CStom_Restart:
0000D9B4 7000                       		moveq	#0,d0
0000D9B6 1028 0032                  		move.b	$32(a0),d0
0000D9BA D068 0030                  		add.w	$30(a0),d0
0000D9BE 3140 000C                  		move.w	d0,obY(a0)
0000D9C2 4E75                       		rts	
0000D9C4                            ; ===========================================================================
0000D9C4                            
0000D9C4                            CStom_Type01:
0000D9C4 4A68 0036                  		tst.w	$36(a0)
0000D9C8 6700                       		beq.s	loc_B938
0000D9CA 4A68 0038                  		tst.w	$38(a0)
0000D9CE 6700                       		beq.s	loc_B902
0000D9D0 5368 0038                  		subq.w	#1,$38(a0)
0000D9D4 6000                       		bra.s	loc_B97C
0000D9D6                            ; ===========================================================================
0000D9D6                            
0000D9D6                            loc_B902:
0000D9D6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D9DA 0200 000F                  		andi.b	#$F,d0
0000D9DE 6600                       		bne.s	loc_B91C
0000D9E0 4A28 0001                  		tst.b	obRender(a0)
0000D9E4 6A00                       		bpl.s	loc_B91C
0000D9F0                            
0000D9F0                            loc_B91C:
0000D9F0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D9F6 6400                       		bcc.s	loc_B97C
0000D9F8 317C 0000 0032             		move.w	#0,$32(a0)
0000D9FE 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA04 317C 0000 0036             		move.w	#0,$36(a0)
0000DA0A 6000                       		bra.s	loc_B97C
0000DA0C                            ; ===========================================================================
0000DA0C                            
0000DA0C                            loc_B938:
0000DA0C 3228 0034                  		move.w	$34(a0),d1
0000DA10 B268 0032                  		cmp.w	$32(a0),d1
0000DA14 6700                       		beq.s	loc_B97C
0000DA16 3028 0012                  		move.w	obVelY(a0),d0
0000DA1A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA20 D168 0032                  		add.w	d0,$32(a0)
0000DA24 B268 0032                  		cmp.w	$32(a0),d1
0000DA28 6200                       		bhi.s	loc_B97C
0000DA2A 3141 0032                  		move.w	d1,$32(a0)
0000DA2E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA34 317C 0001 0036             		move.w	#1,$36(a0)
0000DA3A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DA40 4A28 0001                  		tst.b	obRender(a0)
0000DA44 6A00                       		bpl.s	loc_B97C
0000DA50                            
0000DA50                            loc_B97C:
0000DA50 6000 FF62                  		bra.w	CStom_Restart
0000DA54                            ; ===========================================================================
0000DA54                            
0000DA54                            CStom_Type03:
0000DA54 3038 D008                  		move.w	(v_player+obX).w,d0
0000DA58 9068 0008                  		sub.w	obX(a0),d0
0000DA5C 6400                       		bcc.s	loc_B98C
0000DA5E 4440                       		neg.w	d0
0000DA60                            
0000DA60                            loc_B98C:
0000DA60 0C40 0090                  		cmpi.w	#$90,d0
0000DA64 6400                       		bcc.s	loc_B996
0000DA66 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DA6A                            
0000DA6A                            loc_B996:
0000DA6A 6000 FF48                  		bra.w	CStom_Restart
0000DA6A 6000 FF48                  		bra.w	CStom_Restart
0000DA6E                            		include	"_incObj\45 Sideways Stomper.asm"
0000DA6E                            ; ---------------------------------------------------------------------------
0000DA6E                            ; Object 45 - spiked metal block from beta version (MZ)
0000DA6E                            ; ---------------------------------------------------------------------------
0000DA6E                            
0000DA6E                            SideStomp:
0000DA6E 7000                       		moveq	#0,d0
0000DA70 1028 0024                  		move.b	obRoutine(a0),d0
0000DA74 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DA78 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DA7C                            ; ===========================================================================
0000DA7C 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DA7E 0000                       		dc.w SStom_Solid-SStom_Index
0000DA80 0000                       		dc.w loc_BA8E-SStom_Index
0000DA82 0000                       		dc.w SStom_Display-SStom_Index
0000DA84 0000                       		dc.w SStom_Pole-SStom_Index
0000DA86                            
0000DA86                            		;	routine		frame
0000DA86                            		;		 xpos
0000DA86 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DA89 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DA8C 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DA8F 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DA92                            
0000DA92                            ;word_B9BE:	; Note that this indicates three subtypes
0000DA92 3800                       SStom_Len:	dc.w $3800	; short
0000DA94 A000                       		dc.w $A000	; long
0000DA96 5000                       		dc.w $5000	; medium
0000DA98                            ; ===========================================================================
0000DA98                            
0000DA98                            SStom_Main:	; Routine 0
0000DA98 7000                       		moveq	#0,d0
0000DA9A 1028 0028                  		move.b	obSubtype(a0),d0
0000DA9E D040                       		add.w	d0,d0
0000DAA0 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DAA4 45F9 0000 DA86             		lea	(SStom_Var).l,a2
0000DAAA 2248                       		movea.l	a0,a1
0000DAAC 7203                       		moveq	#3,d1
0000DAAE 6000                       		bra.s	@load
0000DAB0                            
0000DAB0                            	@loop:
0000DAB0 6100 0000                  		bsr.w	FindNextFreeObj
0000DAB4 6600                       		bne.s	@fail
0000DAB6                            
0000DAB6                            	@load:
0000DAB6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DABA 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DABE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DAC4 101A                       		move.b	(a2)+,d0
0000DAC6 4880                       		ext.w	d0
0000DAC8 D068 0008                  		add.w	obX(a0),d0
0000DACC 3340 0008                  		move.w	d0,obX(a1)
0000DAD0 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DAD8 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DADE 137C 0004 0001             		move.b	#4,obRender(a1)
0000DAE4 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DAEA 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DAF0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DAF6 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DAFC 3342 0034                  		move.w	d2,$34(a1)
0000DB00 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB06 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DB0A 6600                       		bne.s	@notspikes	; if not, branch
0000DB0C 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DB12                            
0000DB12                            	@notspikes:
0000DB12 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DB16 2348 003C                  		move.l	a0,$3C(a1)
0000DB1A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DB1E                            
0000DB1E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DB24                            
0000DB24                            	@fail:
0000DB24 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB2A                            
0000DB2A                            SStom_Solid:	; Routine 2
0000DB2A 3F28 0008                  		move.w	obX(a0),-(sp)
0000DB2E 6100 0000                  		bsr.w	SStom_Move
0000DB32 323C 0017                  		move.w	#$17,d1
0000DB36 343C 0020                  		move.w	#$20,d2
0000DB3A 363C 0020                  		move.w	#$20,d3
0000DB3E 381F                       		move.w	(sp)+,d4
0000DB40 6100 0000                  		bsr.w	SolidObject
0000DB44 6100 0000                  		bsr.w	DisplaySprite
0000DB48 6000 0000                  		bra.w	SStom_ChkDel
0000DB4C                            ; ===========================================================================
0000DB4C                            
0000DB4C                            SStom_Pole:	; Routine 8
0000DB4C 2268 003C                  		movea.l	$3C(a0),a1
0000DB50 1029 0032                  		move.b	$32(a1),d0
0000DB54 0600 0010                  		addi.b	#$10,d0
0000DB58 EA08                       		lsr.b	#5,d0
0000DB5A 5600                       		addq.b	#3,d0
0000DB5C 1140 001A                  		move.b	d0,obFrame(a0)
0000DB60                            
0000DB60                            loc_BA8E:	; Routine 4
0000DB60 2268 003C                  		movea.l	$3C(a0),a1
0000DB64 7000                       		moveq	#0,d0
0000DB66 1029 0032                  		move.b	$32(a1),d0
0000DB6A 4440                       		neg.w	d0
0000DB6C D068 0030                  		add.w	$30(a0),d0
0000DB70 3140 0008                  		move.w	d0,obX(a0)
0000DB74                            
0000DB74                            SStom_Display:	; Routine 6
0000DB74 6100 0000                  		bsr.w	DisplaySprite
0000DB78                            
0000DB78                            SStom_ChkDel:
0000DB96 4E75                       		rts	
0000DB98                            
0000DB98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB98                            
0000DB98                            
0000DB98                            SStom_Move:
0000DB98 7000                       		moveq	#0,d0
0000DB9A 1028 0028                  		move.b	obSubtype(a0),d0
0000DB9E D040                       		add.w	d0,d0
0000DBA0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DBA4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DBA8                            ; End of function SStom_Move
0000DBA8                            
0000DBA8                            ; ===========================================================================
0000DBA8                            		; This indicates only two subtypes... that do the same thing
0000DBA8                            		; Compare to SStom_Len. This breaks subtype 02
0000DBA8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DBAA 0000                       		dc.w loc_BADA-off_BAD6
0000DBAC                            ; ===========================================================================
0000DBAC                            
0000DBAC                            loc_BADA:
0000DBAC 4A68 0036                  		tst.w	$36(a0)
0000DBB0 6700                       		beq.s	loc_BB08
0000DBB2 4A68 0038                  		tst.w	$38(a0)
0000DBB6 6700                       		beq.s	loc_BAEC
0000DBB8 5368 0038                  		subq.w	#1,$38(a0)
0000DBBC 6000                       		bra.s	loc_BB3C
0000DBBE                            ; ===========================================================================
0000DBBE                            
0000DBBE                            loc_BAEC:
0000DBBE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DBC4 6400                       		bcc.s	loc_BB3C
0000DBC6 317C 0000 0032             		move.w	#0,$32(a0)
0000DBCC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DBD2 317C 0000 0036             		move.w	#0,$36(a0)
0000DBD8 6000                       		bra.s	loc_BB3C
0000DBDA                            ; ===========================================================================
0000DBDA                            
0000DBDA                            loc_BB08:
0000DBDA 3228 0034                  		move.w	$34(a0),d1
0000DBDE B268 0032                  		cmp.w	$32(a0),d1
0000DBE2 6700                       		beq.s	loc_BB3C
0000DBE4 3028 0010                  		move.w	obVelX(a0),d0
0000DBE8 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DBEE D168 0032                  		add.w	d0,$32(a0)
0000DBF2 B268 0032                  		cmp.w	$32(a0),d1
0000DBF6 6200                       		bhi.s	loc_BB3C
0000DBF8 3141 0032                  		move.w	d1,$32(a0)
0000DBFC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC02 317C 0001 0036             		move.w	#1,$36(a0)
0000DC08 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC0E                            
0000DC0E                            loc_BB3C:
0000DC0E 7000                       		moveq	#0,d0
0000DC10 1028 0032                  		move.b	$32(a0),d0
0000DC14 4440                       		neg.w	d0
0000DC16 D068 0030                  		add.w	$30(a0),d0
0000DC1A 3140 0008                  		move.w	d0,obX(a0)
0000DC1E 4E75                       		rts	
0000DC1E 4E75                       		rts	
0000DC20                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DC20                            ; ---------------------------------------------------------------------------
0000DC20                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DC20                            ; ---------------------------------------------------------------------------
0000DC20                            Map_CStom_internal:
0000DC20 0000                       		dc.w @wideblock-Map_CStom_internal
0000DC22 0000                       		dc.w @spikes-Map_CStom_internal
0000DC24 0000                       		dc.w @ceiling-Map_CStom_internal
0000DC26 0000                       		dc.w @chain1-Map_CStom_internal
0000DC28 0000                       		dc.w @chain2-Map_CStom_internal
0000DC2A 0000                       		dc.w @chain3-Map_CStom_internal
0000DC2C 0000                       		dc.w @chain4-Map_CStom_internal
0000DC2E 0000                       		dc.w @chain5-Map_CStom_internal
0000DC30 0000                       		dc.w @chain5-Map_CStom_internal
0000DC32 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DC34 0000                       		dc.w @smallblock-Map_CStom_internal
0000DC36 05                         @wideblock:	dc.b 5
0000DC37 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DC3C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DC41 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DC46 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DC4B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DC50 05                         @spikes:	dc.b 5
0000DC51 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DC56 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DC5B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DC60 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DC65 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DC6A 01                         @ceiling:	dc.b 1
0000DC6B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DC70 02                         @chain1:	dc.b 2
0000DC71 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC76 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC7B 04                         @chain2:	dc.b 4
0000DC7C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC81 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC86 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC8B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC90 06                         @chain3:	dc.b 6
0000DC91 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DC96 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DC9B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCA0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCA5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCAA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCAF 08                         @chain4:	dc.b 8
0000DCB0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DCB5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DCBA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DCBF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DCC4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCC9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCCE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCD3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCD8 0A                         @chain5:	dc.b $A
0000DCD9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DCDE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DCE3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DCE8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DCED C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DCF2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DCF7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCFC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD01 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD06 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD0B 05                         @mediumblock:	dc.b 5
0000DD0C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DD11 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DD16 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DD1B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DD20 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD25 01                         @smallblock:	dc.b 1
0000DD26 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DD2C 00                         		even
0000DD2C 00                         		even
0000DD2C                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DD2C                            ; ---------------------------------------------------------------------------
0000DD2C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DD2C                            ; ---------------------------------------------------------------------------
0000DD2C                            Map_SStom_internal:
0000DD2C 0000                       		dc.w @block-Map_SStom_internal
0000DD2E 0000                       		dc.w @spikes-Map_SStom_internal
0000DD30 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DD32 0000                       		dc.w @pole1-Map_SStom_internal
0000DD34 0000                       		dc.w @pole2-Map_SStom_internal
0000DD36 0000                       		dc.w @pole3-Map_SStom_internal
0000DD38 0000                       		dc.w @pole4-Map_SStom_internal
0000DD3A 0000                       		dc.w @pole5-Map_SStom_internal
0000DD3C 0000                       		dc.w @pole5-Map_SStom_internal
0000DD3E 03                         @block:		dc.b 3
0000DD3F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DD44 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DD49 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DD4E 03                         @spikes:	dc.b 3
0000DD4F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DD54 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DD59 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DD5E 01                         @wallbracket:	dc.b 1
0000DD5F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DD64 02                         @pole1:		dc.b 2
0000DD65 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DD6A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD6F 04                         @pole2:		dc.b 4
0000DD70 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD75 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD7A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD7F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD84 06                         @pole3:		dc.b 6
0000DD85 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD8A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD8F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD94 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD99 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DD9E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDA3 08                         @pole4:		dc.b 8
0000DDA4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDA9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDAE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDB3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDB8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DDBD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDC2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DDC7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DDCC 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DDCD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDD2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDD7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDDC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDE1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DDE6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DDEB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DDF0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DDF5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DDFA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DDFF                            		; @pole6 should be here, but it isn't...
0000DE00 00                         		even
0000DE00 00                         		even
0000DE00                            
0000DE00                            		include	"_incObj\32 Button.asm"
0000DE00                            ; ---------------------------------------------------------------------------
0000DE00                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DE00                            ; ---------------------------------------------------------------------------
0000DE00                            
0000DE00                            Button:
0000DE00 7000                       		moveq	#0,d0
0000DE02 1028 0024                  		move.b	obRoutine(a0),d0
0000DE06 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DE0A 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DE0E                            ; ===========================================================================
0000DE0E 0000                       But_Index:	dc.w But_Main-But_Index
0000DE10 0000                       		dc.w But_Pressed-But_Index
0000DE12                            ; ===========================================================================
0000DE12                            
0000DE12                            But_Main:	; Routine 0
0000DE12 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DE16 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DE1E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DE24 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DE2A 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DE2C                            
0000DE2C 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DE32                            
0000DE32                            	But_IsMZ:
0000DE32 117C 0004 0001             		move.b	#4,obRender(a0)
0000DE38 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DE3E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DE44 5668 000C                  		addq.w	#3,obY(a0)
0000DE48                            
0000DE48                            But_Pressed:	; Routine 2
0000DE48 4A28 0001                  		tst.b	obRender(a0)
0000DE4C 6A00                       		bpl.s	But_Display
0000DE4E 323C 001B                  		move.w	#$1B,d1
0000DE52 343C 0005                  		move.w	#5,d2
0000DE56 363C 0005                  		move.w	#5,d3
0000DE5A 3828 0008                  		move.w	obX(a0),d4
0000DE5E 6100 0000                  		bsr.w	SolidObject
0000DE62 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DE68 1028 0028                  		move.b	obSubtype(a0),d0
0000DE6C 0240 000F                  		andi.w	#$F,d0
0000DE70 47F8 F7E0                  		lea	(f_switch).w,a3
0000DE74 47F3 0000                  		lea	(a3,d0.w),a3
0000DE78 7600                       		moveq	#0,d3
0000DE7A 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DE80 6700                       		beq.s	loc_BDB2
0000DE82 7607                       		moveq	#7,d3
0000DE84                            
0000DE84                            loc_BDB2:
0000DE84 4A28 0028                  		tst.b	obSubtype(a0)
0000DE88 6A00                       		bpl.s	loc_BDBE
0000DE8A 6100 0000                  		bsr.w	But_MZBlock
0000DE8E 6600                       		bne.s	loc_BDC8
0000DE90                            
0000DE90                            loc_BDBE:
0000DE90 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DE94 6600                       		bne.s	loc_BDC8
0000DE96 0793                       		bclr	d3,(a3)
0000DE98 6000                       		bra.s	loc_BDDE
0000DE9A                            ; ===========================================================================
0000DE9A                            
0000DE9A                            loc_BDC8:
0000DE9A 4A13                       		tst.b	(a3)
0000DE9C 6600                       		bne.s	loc_BDD6
0000DEA8                            
0000DEA8                            loc_BDD6:
0000DEA8 07D3                       		bset	d3,(a3)
0000DEAA 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DEB0                            
0000DEB0                            loc_BDDE:
0000DEB0 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DEB6 6700                       		beq.s	But_Display
0000DEB8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DEBC 6A00                       		bpl.s	But_Display
0000DEBE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DEC4 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DECA                            
0000DECA                            But_Display:
0000DECA 6100 0000                  		bsr.w	DisplaySprite
0000DEEC 4E75                       		rts	
0000DEEE                            ; ===========================================================================
0000DEEE                            
0000DEEE                            But_Delete:
0000DEEE 6100 0000                  		bsr.w	DeleteObject
0000DEF2 4E75                       		rts	
0000DEF4                            
0000DEF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEF4                            
0000DEF4                            
0000DEF4                            But_MZBlock:
0000DEF4 3F03                       		move.w	d3,-(sp)
0000DEF6 3428 0008                  		move.w	obX(a0),d2
0000DEFA 3628 000C                  		move.w	obY(a0),d3
0000DEFE 0442 0010                  		subi.w	#$10,d2
0000DF02 5143                       		subq.w	#8,d3
0000DF04 383C 0020                  		move.w	#$20,d4
0000DF08 3A3C 0010                  		move.w	#$10,d5
0000DF0C 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DF10 3C3C 005F                  		move.w	#$5F,d6
0000DF14                            
0000DF14                            But_MZLoop:
0000DF14 4A29 0001                  		tst.b	obRender(a1)
0000DF18 6A00                       		bpl.s	loc_BE4E
0000DF1A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DF1E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DF20                            
0000DF20                            loc_BE4E:
0000DF20 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DF24 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DF28                            
0000DF28 361F                       		move.w	(sp)+,d3
0000DF2A 7000                       		moveq	#0,d0
0000DF2C                            
0000DF2C                            locret_BE5A:
0000DF2C 4E75                       		rts	
0000DF2E                            ; ===========================================================================
0000DF2E 1010                       But_MZData:	dc.b $10, $10
0000DF30                            ; ===========================================================================
0000DF30                            
0000DF30                            loc_BE5E:
0000DF30 7001                       		moveq	#1,d0
0000DF32 0240 003F                  		andi.w	#$3F,d0
0000DF36 D040                       		add.w	d0,d0
0000DF38 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DF3C 121A                       		move.b	(a2)+,d1
0000DF3E 4881                       		ext.w	d1
0000DF40 3029 0008                  		move.w	obX(a1),d0
0000DF44 9041                       		sub.w	d1,d0
0000DF46 9042                       		sub.w	d2,d0
0000DF48 6400                       		bcc.s	loc_BE80
0000DF4A D241                       		add.w	d1,d1
0000DF4C D041                       		add.w	d1,d0
0000DF4E 6500                       		bcs.s	loc_BE84
0000DF50 60CE                       		bra.s	loc_BE4E
0000DF52                            ; ===========================================================================
0000DF52                            
0000DF52                            loc_BE80:
0000DF52 B044                       		cmp.w	d4,d0
0000DF54 62CA                       		bhi.s	loc_BE4E
0000DF56                            
0000DF56                            loc_BE84:
0000DF56 121A                       		move.b	(a2)+,d1
0000DF58 4881                       		ext.w	d1
0000DF5A 3029 000C                  		move.w	obY(a1),d0
0000DF5E 9041                       		sub.w	d1,d0
0000DF60 9043                       		sub.w	d3,d0
0000DF62 6400                       		bcc.s	loc_BE9A
0000DF64 D241                       		add.w	d1,d1
0000DF66 D041                       		add.w	d1,d0
0000DF68 6500                       		bcs.s	loc_BE9E
0000DF6A 60B4                       		bra.s	loc_BE4E
0000DF6C                            ; ===========================================================================
0000DF6C                            
0000DF6C                            loc_BE9A:
0000DF6C B045                       		cmp.w	d5,d0
0000DF6E 62B0                       		bhi.s	loc_BE4E
0000DF70                            
0000DF70                            loc_BE9E:
0000DF70 361F                       		move.w	(sp)+,d3
0000DF72 7001                       		moveq	#1,d0
0000DF74 4E75                       		rts	
0000DF76                            ; End of function But_MZBlock
0000DF76                            ; End of function But_MZBlock
0000DF76                            Map_But:	include	"_maps\Button.asm"
0000DF76                            ; ---------------------------------------------------------------------------
0000DF76                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DF76                            ; ---------------------------------------------------------------------------
0000DF76                            Map_But_internal:
0000DF76 0000                       		dc.w byte_BEAC-Map_But_internal
0000DF78 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF7A 0000                       		dc.w byte_BEC2-Map_But_internal
0000DF7C 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF7E 02                         byte_BEAC:	dc.b 2
0000DF7F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DF84 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DF89 02                         byte_BEB7:	dc.b 2
0000DF8A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DF8F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DF94 02                         byte_BEC2:	dc.b 2
0000DF95 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DF9A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DF9F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DFA4                            		even
0000DFA4                            		even
0000DFA4                            
0000DFA4                            		include	"_incObj\33 Pushable Blocks.asm"
0000DFA4                            ; ---------------------------------------------------------------------------
0000DFA4                            ; Object 33 - pushable blocks (MZ, LZ)
0000DFA4                            ; ---------------------------------------------------------------------------
0000DFA4                            
0000DFA4                            PushBlock:
0000DFA4 7000                       		moveq	#0,d0
0000DFA6 1028 0024                  		move.b	obRoutine(a0),d0
0000DFAA 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DFAE 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DFB2                            ; ===========================================================================
0000DFB2 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DFB4 0000                       		dc.w loc_BF6E-PushB_Index
0000DFB6 0000                       		dc.w loc_C02C-PushB_Index
0000DFB8                            
0000DFB8 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DFBA 4001                       		dc.b $40, 1
0000DFBC                            ; ===========================================================================
0000DFBC                            
0000DFBC                            PushB_Main:	; Routine 0
0000DFBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DFC0 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DFC6 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DFCC 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DFD4 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DFDA 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DFE0 6600                       		bne.s	@notLZ
0000DFE2 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DFE8                            
0000DFE8                            	@notLZ:
0000DFE8 117C 0004 0001             		move.b	#4,obRender(a0)
0000DFEE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DFF4 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DFFA 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E000 7000                       		moveq	#0,d0
0000E002 1028 0028                  		move.b	obSubtype(a0),d0
0000E006 D040                       		add.w	d0,d0
0000E008 0240 000E                  		andi.w	#$E,d0
0000E00C 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E010 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E014 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E018 4A28 0028                  		tst.b	obSubtype(a0)
0000E01C 6700                       		beq.s	@chkgone
0000E01E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E024                            
0000E024                            	@chkgone:
0000E024 45F8 FC00                  		lea	(v_objstate).w,a2
0000E028 7000                       		moveq	#0,d0
0000E02A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E02E 6700                       		beq.s	loc_BF6E
0000E030 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E036 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E03C 6600 0000                  		bne.w	DeleteObject
0000E040                            
0000E040                            loc_BF6E:	; Routine 2
0000E040 4A28 0032                  		tst.b	$32(a0)
0000E044 6600 0000                  		bne.w	loc_C046
0000E048 7200                       		moveq	#0,d1
0000E04A 1228 0014                  		move.b	obActWid(a0),d1
0000E04E 0641 000B                  		addi.w	#$B,d1
0000E052 343C 0010                  		move.w	#$10,d2
0000E056 363C 0011                  		move.w	#$11,d3
0000E05A 3828 0008                  		move.w	obX(a0),d4
0000E05E 6100 0000                  		bsr.w	loc_C186
0000E062 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E068 6600                       		bne.s	loc_BFC6	; if not, branch
0000E06A 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E070 3028 0008                  		move.w	obX(a0),d0
0000E074 0C40 0A20                  		cmpi.w	#$A20,d0
0000E078 6500                       		bcs.s	loc_BFC6
0000E07A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E07E 6400                       		bcc.s	loc_BFC6
0000E080 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E084 0440 001C                  		subi.w	#$1C,d0
0000E088 3140 000C                  		move.w	d0,obY(a0)
0000E08C 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E092 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E098                            
0000E098                            	loc_BFC6:
0000E0B4 6000 0000                  		bra.w	DisplaySprite
0000E0B8                            ; ===========================================================================
0000E0B8                            
0000E0B8                            loc_ppppp:
0000E0D4 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E0DA 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E0E0 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E0E6 6000                       		bra.s	loc_C02C
0000E0E8                            ; ===========================================================================
0000E0E8                            
0000E0E8                            loc_C016:
0000E0E8 45F8 FC00                  		lea	(v_objstate).w,a2
0000E0EC 7000                       		moveq	#0,d0
0000E0EE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E0F2 6700                       		beq.s	loc_C028
0000E0F4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E0FA                            
0000E0FA                            loc_C028:
0000E0FA 6000 0000                  		bra.w	DeleteObject
0000E0FE                            ; ===========================================================================
0000E0FE                            
0000E0FE                            loc_C02C:	; Routine 4
0000E0FE 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E102 6700                       		beq.s	locret_C044
0000E104 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E10A 4228 0032                  		clr.b	$32(a0)
0000E10E 4268 0010                  		clr.w	obVelX(a0)
0000E112 4268 0012                  		clr.w	obVelY(a0)
0000E116                            
0000E116                            locret_C044:
0000E116 4E75                       		rts	
0000E118                            ; ===========================================================================
0000E118                            
0000E118                            loc_C046:
0000E118 3F28 0008                  		move.w	obX(a0),-(sp)
0000E11C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E122 6400                       		bcc.s	loc_C056
0000E124 6100 0000                  		bsr.w	SpeedToPos
0000E128                            
0000E128                            loc_C056:
0000E128 0828 0001 0022             		btst	#1,obStatus(a0)
0000E12E 6700                       		beq.s	loc_C0A0
0000E130 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E136 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E13C 4A41                       		tst.w	d1
0000E13E 6A00 0000                  		bpl.w	loc_C09E
0000E142 D368 000C                  		add.w	d1,obY(a0)
0000E146 4268 0012                  		clr.w	obVelY(a0)
0000E14A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E150 3011                       		move.w	(a1),d0
0000E152 0240 03FF                  		andi.w	#$3FF,d0
0000E156 0C40 016A                  		cmpi.w	#$16A,d0
0000E15A 6500                       		bcs.s	loc_C09E
0000E15C 3028 0030                  		move.w	$30(a0),d0
0000E160 E640                       		asr.w	#3,d0
0000E162 3140 0010                  		move.w	d0,obVelX(a0)
0000E166 117C 0001 0032             		move.b	#1,$32(a0)
0000E16C 4268 000E                  		clr.w	$E(a0)
0000E170                            
0000E170                            loc_C09E:
0000E170 6000                       		bra.s	loc_C0E6
0000E172                            ; ===========================================================================
0000E172                            
0000E172                            loc_C0A0:
0000E172 4A68 0010                  		tst.w	obVelX(a0)
0000E176 6700 0000                  		beq.w	loc_C0D6
0000E17A 6B00                       		bmi.s	loc_C0BC
0000E17C 7600                       		moveq	#0,d3
0000E17E 1628 0014                  		move.b	obActWid(a0),d3
0000E182 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E188 4A41                       		tst.w	d1		; has block touched a wall?
0000E18A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E18C 6000                       		bra.s	loc_C0E6
0000E18E                            ; ===========================================================================
0000E18E                            
0000E18E                            loc_C0BC:
0000E18E 7600                       		moveq	#0,d3
0000E190 1628 0014                  		move.b	obActWid(a0),d3
0000E194 4643                       		not.w	d3
0000E196 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E19C 4A41                       		tst.w	d1		; has block touched a wall?
0000E19E 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E1A0 6000                       		bra.s	loc_C0E6
0000E1A2                            ; ===========================================================================
0000E1A2                            
0000E1A2                            PushB_StopPush:
0000E1A2 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E1A6 6000                       		bra.s	loc_C0E6
0000E1A8                            ; ===========================================================================
0000E1A8                            
0000E1A8                            loc_C0D6:
0000E1A8 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E1B0 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E1B6 6400                       		bcc.s	loc_C104
0000E1B8                            
0000E1B8                            loc_C0E6:
0000E1B8 7200                       		moveq	#0,d1
0000E1BA 1228 0014                  		move.b	obActWid(a0),d1
0000E1BE 0641 000B                  		addi.w	#$B,d1
0000E1C2 343C 0010                  		move.w	#$10,d2
0000E1C6 363C 0011                  		move.w	#$11,d3
0000E1CA 381F                       		move.w	(sp)+,d4
0000E1CC 6100 0000                  		bsr.w	loc_C186
0000E1D0 6100                       		bsr.s	PushB_ChkLava
0000E1D2 6000 FEC4                  		bra.w	loc_BFC6
0000E1D6                            ; ===========================================================================
0000E1D6                            
0000E1D6                            loc_C104:
0000E1D6 381F                       		move.w	(sp)+,d4
0000E1D8 43F8 D000                  		lea	(v_player).w,a1
0000E1DC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E1E2 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E1E8 6000 FECE                  		bra.w	loc_ppppp
0000E1EC                            ; ===========================================================================
0000E1EC                            
0000E1EC                            PushB_ChkLava:
0000E1EC 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E1F2 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E1F4 343C FFE0                  		move.w	#-$20,d2
0000E1F8 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E1FE 6700                       		beq.s	PushB_LoadLava
0000E200 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E206 6700                       		beq.s	PushB_LoadLava
0000E208 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E20E 6700                       		beq.s	PushB_LoadLava
0000E210 4E75                       		rts	
0000E212                            ; ===========================================================================
0000E212                            
0000E212                            PushB_ChkLava2:
0000E212 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E218 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E21A 343C 0020                  		move.w	#$20,d2
0000E21E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E224 6700                       		beq.s	PushB_LoadLava
0000E226 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E22C 6700                       		beq.s	PushB_LoadLava
0000E22E                            
0000E22E                            PushB_NoLava:
0000E22E 4E75                       		rts	
0000E230                            ; ===========================================================================
0000E230                            
0000E230                            PushB_LoadLava:
0000E230 6100 0000                  		bsr.w	FindFreeObj
0000E234 6600                       		bne.s	locret_C184
0000E236 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E23A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E240 D569 0008                  		add.w	d2,obX(a1)
0000E244 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E24A 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E250 2348 003C                  		move.l	a0,$3C(a1)
0000E254                            
0000E254                            locret_C184:
0000E254 4E75                       		rts	
0000E256                            ; ===========================================================================
0000E256                            
0000E256                            loc_C186:
0000E256 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E25A 6700 0000                  		beq.w	loc_C218
0000E25E 5500                       		subq.b	#2,d0
0000E260 6600                       		bne.s	loc_C1AA
0000E262 6100 AEF2                  		bsr.w	ExitPlatform
0000E266 0829 0003 0022             		btst	#3,obStatus(a1)
0000E26C 6600                       		bne.s	loc_C1A4
0000E26E 4228 0025                  		clr.b	ob2ndRout(a0)
0000E272 4E75                       		rts	
0000E274                            ; ===========================================================================
0000E274                            
0000E274                            loc_C1A4:
0000E274 3404                       		move.w	d4,d2
0000E276 6000 B43C                  		bra.w	MvSonicOnPtfm
0000E27A                            ; ===========================================================================
0000E27A                            
0000E27A                            loc_C1AA:
0000E27A 5500                       		subq.b	#2,d0
0000E27C 6600                       		bne.s	loc_C1F2
0000E27E 6100 0000                  		bsr.w	SpeedToPos
0000E282 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E288 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E28E 4A41                       		tst.w	d1
0000E290 6A00 0000                  		bpl.w	locret_C1F0
0000E294 D368 000C                  		add.w	d1,obY(a0)
0000E298 4268 0012                  		clr.w	obVelY(a0)
0000E29C 4228 0025                  		clr.b	ob2ndRout(a0)
0000E2A0 3011                       		move.w	(a1),d0
0000E2A2 0240 03FF                  		andi.w	#$3FF,d0
0000E2A6 0C40 016A                  		cmpi.w	#$16A,d0
0000E2AA 6500                       		bcs.s	locret_C1F0
0000E2AC 3028 0030                  		move.w	$30(a0),d0
0000E2B0 E640                       		asr.w	#3,d0
0000E2B2 3140 0010                  		move.w	d0,obVelX(a0)
0000E2B6 117C 0001 0032             		move.b	#1,$32(a0)
0000E2BC 4268 000E                  		clr.w	obY+2(a0)
0000E2C0                            
0000E2C0                            locret_C1F0:
0000E2C0 4E75                       		rts	
0000E2C2                            ; ===========================================================================
0000E2C2                            
0000E2C2                            loc_C1F2:
0000E2C2 6100 0000                  		bsr.w	SpeedToPos
0000E2C6 3028 0008                  		move.w	obX(a0),d0
0000E2CA 0240 000C                  		andi.w	#$C,d0
0000E2CE 6600 0000                  		bne.w	locret_C2E4
0000E2D2 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E2D8 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E2DE 4268 0010                  		clr.w	obVelX(a0)
0000E2E2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E2E6 4E75                       		rts	
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            loc_C218:
0000E2E8 6100 0000                  		bsr.w	Solid_ChkEnter
0000E2EC 4A44                       		tst.w	d4
0000E2EE 6700 0000                  		beq.w	locret_C2E4
0000E2F2 6B00 0000                  		bmi.w	locret_C2E4
0000E2F6 4A28 0032                  		tst.b	$32(a0)
0000E2FA 6700                       		beq.s	loc_C230
0000E2FC 6000 0000                  		bra.w	locret_C2E4
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            loc_C230:
0000E300 4A40                       		tst.w	d0
0000E302 6700 0000                  		beq.w	locret_C2E4
0000E306 6B00                       		bmi.s	loc_C268
0000E308 0829 0000 0022             		btst	#0,obStatus(a1)
0000E30E 6600 0000                  		bne.w	locret_C2E4
0000E312 3F00                       		move.w	d0,-(sp)
0000E314 7600                       		moveq	#0,d3
0000E316 1628 0014                  		move.b	obActWid(a0),d3
0000E31A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E320 301F                       		move.w	(sp)+,d0
0000E322 4A41                       		tst.w	d1
0000E324 6B00 0000                  		bmi.w	locret_C2E4
0000E328 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E330 7001                       		moveq	#1,d0
0000E332 323C 0040                  		move.w	#$40,d1
0000E336 6000                       		bra.s	loc_C294
0000E338                            ; ===========================================================================
0000E338                            
0000E338                            loc_C268:
0000E338 0829 0000 0022             		btst	#0,obStatus(a1)
0000E33E 6700                       		beq.s	locret_C2E4
0000E340 3F00                       		move.w	d0,-(sp)
0000E342 7600                       		moveq	#0,d3
0000E344 1628 0014                  		move.b	obActWid(a0),d3
0000E348 4643                       		not.w	d3
0000E34A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E350 301F                       		move.w	(sp)+,d0
0000E352 4A41                       		tst.w	d1
0000E354 6B00                       		bmi.s	locret_C2E4
0000E356 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E35E 70FF                       		moveq	#-1,d0
0000E360 323C FFC0                  		move.w	#-$40,d1
0000E364                            
0000E364                            loc_C294:
0000E364 43F8 D000                  		lea	(v_player).w,a1
0000E368 D169 0008                  		add.w	d0,obX(a1)
0000E36C 3341 0020                  		move.w	d1,obInertia(a1)
0000E370 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E376 3F00                       		move.w	d0,-(sp)
0000E382 301F                       		move.w	(sp)+,d0
0000E384 4A28 0028                  		tst.b	obSubtype(a0)
0000E388 6B00                       		bmi.s	locret_C2E4
0000E38A 3F00                       		move.w	d0,-(sp)
0000E38C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E392 301F                       		move.w	(sp)+,d0
0000E394 0C41 0004                  		cmpi.w	#4,d1
0000E398 6F00                       		ble.s	loc_C2E0
0000E39A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E3A0 4A40                       		tst.w	d0
0000E3A2 6A00                       		bpl.s	loc_C2D8
0000E3A4 4468 0010                  		neg.w	obVelX(a0)
0000E3A8                            
0000E3A8                            loc_C2D8:
0000E3A8 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E3AE 6000                       		bra.s	locret_C2E4
0000E3B0                            ; ===========================================================================
0000E3B0                            
0000E3B0                            loc_C2E0:
0000E3B0 D368 000C                  		add.w	d1,obY(a0)
0000E3B4                            
0000E3B4                            locret_C2E4:
0000E3B4 4E75                       		rts	
0000E3B4 4E75                       		rts	
0000E3B6                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E3B6                            ; ---------------------------------------------------------------------------
0000E3B6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E3B6                            ; ---------------------------------------------------------------------------
0000E3B6                            Map_Push_internal:
0000E3B6 0000                       		dc.w @single-Map_Push_internal
0000E3B8 0000                       		dc.w @four-Map_Push_internal
0000E3BA 01                         @single:	dc.b 1
0000E3BB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E3C0 04                         @four:		dc.b 4
0000E3C1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E3C6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E3CB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E3D0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E3D6 00                         		even
0000E3D6 00                         		even
0000E3D6                            
0000E3D6                            		include	"_incObj\34 Title Cards.asm"
0000E3D6                            ; ---------------------------------------------------------------------------
0000E3D6                            ; Object 34 - zone title cards
0000E3D6                            ; ---------------------------------------------------------------------------
0000E3D6                            
0000E3D6                            TitleCard:
0000E3D6 7000                       		moveq	#0,d0
0000E3D8 1028 0024                  		move.b	obRoutine(a0),d0
0000E3DC 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E3E0 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E3E4                            ; ===========================================================================
0000E3E4 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E3E6 0000                       		dc.w Card_ChkPos-Card_Index
0000E3E8 0000                       		dc.w Card_Wait-Card_Index
0000E3EA 0000                       		dc.w Card_Wait-Card_Index
0000E3EC                            
0000E3EC =00000030                  card_mainX:	equ $30		; position for card to display on
0000E3EC =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E3EC                            ; ===========================================================================
0000E3EC                            
0000E3EC                            Card_CheckSBZ3:	; Routine 0
0000E3EC 2248                       		movea.l	a0,a1
0000E3EE 7000                       		moveq	#0,d0
0000E3F0 1038 FE10                  		move.b	(v_zone).w,d0
0000E3F4 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E3FA 6600                       		bne.s	Card_CheckFZ
0000E3FC 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E3FE                            
0000E3FE                            	Card_CheckFZ:
0000E3FE 3400                       		move.w	d0,d2
0000E400 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E406 6600                       		bne.s	Card_LoadConfig
0000E408 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E40A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E40C                            
0000E40C                            	Card_LoadConfig:
0000E40C 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E412 E948                       		lsl.w	#4,d0
0000E414 D6C0                       		adda.w	d0,a3
0000E416 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E41C 7203                       		moveq	#3,d1
0000E41E                            
0000E41E                            Card_Loop:
0000E41E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E422 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E426 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E42A 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E42E 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E432 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E436 101A                       		move.b	(a2)+,d0
0000E438 6600                       		bne.s	Card_ActNumber
0000E43A 1002                       		move.b	d2,d0
0000E43C                            
0000E43C                            	Card_ActNumber:
0000E43C 0C00 0007                  		cmpi.b	#7,d0
0000E440 6600                       		bne.s	Card_MakeSprite
0000E442 D038 FE11                  		add.b	(v_act).w,d0
0000E446 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E44C 6600                       		bne.s	Card_MakeSprite
0000E44E 5300                       		subq.b	#1,d0
0000E450                            
0000E450                            	Card_MakeSprite:
0000E450 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E454 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E45C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E462 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E468 137C 0000 0001             		move.b	#0,obRender(a1)
0000E46E 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E474 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E47A 43E9 0040                  		lea	$40(a1),a1	; next object
0000E47E 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E482                            
0000E482                            Card_ChkPos:	; Routine 2
0000E482 7210                       		moveq	#$10,d1		; set horizontal speed
0000E484 3028 0030                  		move.w	card_mainX(a0),d0
0000E488 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E48C 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E48E 6C00                       		bge.s	Card_Move
0000E490 4441                       		neg.w	d1
0000E492                            
0000E492                            Card_Move:
0000E492 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E496                            
0000E496                            Card_NoMove:
0000E496 3028 0008                  		move.w	obX(a0),d0
0000E49A 6B00                       		bmi.s	locret_C3D8
0000E49C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E4A0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E4A2 6000 0000                  		bra.w	DisplaySprite
0000E4A6                            ; ===========================================================================
0000E4A6                            
0000E4A6                            locret_C3D8:
0000E4A6 4E75                       		rts	
0000E4A8                            ; ===========================================================================
0000E4A8                            
0000E4A8                            Card_Wait:	; Routine 4/6
0000E4A8 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E4AC 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E4AE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E4B2 6000 0000                  		bra.w	DisplaySprite
0000E4B6                            ; ===========================================================================
0000E4B6                            
0000E4B6                            Card_ChkPos2:
0000E4B6 4A28 0001                  		tst.b	obRender(a0)
0000E4BA 6A00                       		bpl.s	Card_ChangeArt
0000E4BC 7220                       		moveq	#$20,d1
0000E4BE 3028 0032                  		move.w	card_finalX(a0),d0
0000E4C2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E4C6 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E4C8 6C00                       		bge.s	Card_Move2
0000E4CA 4441                       		neg.w	d1
0000E4CC                            
0000E4CC                            Card_Move2:
0000E4CC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E4D0 3028 0008                  		move.w	obX(a0),d0
0000E4D4 6B00                       		bmi.s	locret_C412
0000E4D6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E4DA 6400                       		bcc.s	locret_C412	; if yes, branch
0000E4DC 6000 0000                  		bra.w	DisplaySprite
0000E4E0                            ; ===========================================================================
0000E4E0                            
0000E4E0                            locret_C412:
0000E4E0 4E75                       		rts	
0000E4E2                            ; ===========================================================================
0000E4E2                            
0000E4E2                            Card_ChangeArt:
0000E4E2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E4E8 6600                       		bne.s	Card_Delete
0000E4EA 7000                       		moveq	#plcid_Explode,d0
0000E4EC 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion patterns
0000E4F2 7000                       		moveq	#0,d0
0000E4F4 1038 FE10                  		move.b	(v_zone).w,d0
0000E4F8 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E4FC 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal patterns
0000E502                            
0000E502                            Card_Delete:
0000E502 6000 0000                  		bra.w	DeleteObject
0000E506                            ; ===========================================================================
0000E506 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E508 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E50A 00E4                       		dc.w $E4
0000E50C 0206                       		dc.b 2,	6
0000E50E 00EA                       		dc.w $EA
0000E510 0207                       		dc.b 2,	7
0000E512 00E0                       		dc.w $E0
0000E514 020A                       		dc.b 2,	$A
0000E516                            ; ---------------------------------------------------------------------------
0000E516                            ; Title	card configuration data
0000E516                            ; Format:
0000E516                            ; 4 bytes per item (YYYY XXXX)
0000E516                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E516                            ; ---------------------------------------------------------------------------
0000E516 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E526 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E536 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E546 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E556 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E566 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E576 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E586                            ; ===========================================================================
0000E586                            ; ===========================================================================
0000E586                            		include	"_incObj\39 Game Over.asm"
0000E586                            ; ---------------------------------------------------------------------------
0000E586                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E586                            ; ---------------------------------------------------------------------------
0000E586                            
0000E586                            GameOverCard:
0000E586 7000                       		moveq	#0,d0
0000E588 1028 0024                  		move.b	obRoutine(a0),d0
0000E58C 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E590 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E594                            ; ===========================================================================
0000E594 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E596 0000                       		dc.w Over_Move-Over_Index
0000E598 0000                       		dc.w Over_Wait-Over_Index
0000E59A                            ; ===========================================================================
0000E59A                            
0000E59A                            Over_ChkPLC:	; Routine 0
0000E59A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E59E 6700                       		beq.s	Over_Main	; if yes, branch
0000E5A0 4E75                       		rts	
0000E5A2                            ; ===========================================================================
0000E5A2                            
0000E5A2                            Over_Main:
0000E5A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E5A6 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E5AC 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E5B2 6700                       		beq.s	Over_1stWord	; if not, branch
0000E5B4 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E5BA                            
0000E5BA                            	Over_1stWord:
0000E5BA 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E5C0 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E5C8 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E5CE 117C 0000 0001             		move.b	#0,obRender(a0)
0000E5D4 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E5DA                            
0000E5DA                            Over_Move:	; Routine 2
0000E5DA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E5DC 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E5E2 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E5E4 6500                       		bcs.s	Over_UpdatePos
0000E5E6 4441                       		neg.w	d1
0000E5E8                            
0000E5E8                            	Over_UpdatePos:
0000E5E8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5EC 6000 0000                  		bra.w	DisplaySprite
0000E5F0                            ; ===========================================================================
0000E5F0                            
0000E5F0                            Over_SetWait:
0000E5F0 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E5F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E5FA 4E75                       		rts	
0000E5FC                            ; ===========================================================================
0000E5FC                            
0000E5FC                            Over_Wait:	; Routine 4
0000E5FC 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E600 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E604 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E606 0828 0000 001A             		btst	#0,obFrame(a0)
0000E60C 6600                       		bne.s	Over_Display
0000E60E 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E612 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E614 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E618 6000 0000                  		bra.w	DisplaySprite
0000E61C                            ; ===========================================================================
0000E61C                            
0000E61C                            Over_ChgMode:
0000E61C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E620 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E622 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E628 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E62C 6600                       		bne.s	Over_Display	; if yes, branch
0000E62E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E634 6000                       		bra.s	Over_Display
0000E636                            ; ===========================================================================
0000E636                            
0000E636                            Over_ResetLvl:
0000E636 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E63A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E640                            
0000E640                            Over_Display:
0000E640 6000 0000                  		bra.w	DisplaySprite
0000E640 6000 0000                  		bra.w	DisplaySprite
0000E644                            		include	"_incObj\3A Got Through Card.asm"
0000E644                            ; ---------------------------------------------------------------------------
0000E644                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E644                            ; ---------------------------------------------------------------------------
0000E644                            
0000E644                            GotThroughCard:
0000E644 7000                       		moveq	#0,d0
0000E646 1028 0024                  		move.b	obRoutine(a0),d0
0000E64A 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E64E 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E652                            ; ===========================================================================
0000E652 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E654 0000                       		dc.w Got_Move-Got_Index
0000E656 0000                       		dc.w Got_Wait-Got_Index
0000E658 0000                       		dc.w Got_TimeBonus-Got_Index
0000E65A 0000                       		dc.w Got_Wait-Got_Index
0000E65C 0000                       		dc.w Got_NextLevel-Got_Index
0000E65E 0000                       		dc.w Got_Wait-Got_Index
0000E660 0000                       		dc.w Got_Move2-Got_Index
0000E662 0000                       		dc.w loc_C766-Got_Index
0000E664                            
0000E664 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E664 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E664                            ; ===========================================================================
0000E664                            
0000E664                            Got_ChkPLC:	; Routine 0
0000E664 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E668 6700                       		beq.s	Got_Main	; if yes, branch
0000E66A 4E75                       		rts	
0000E66C                            ; ===========================================================================
0000E66C                            
0000E66C                            Got_Main:
0000E66C 2248                       		movea.l	a0,a1
0000E66E 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E674 7206                       		moveq	#6,d1
0000E676                            
0000E676                            Got_Loop:
0000E676 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E67A 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E67E 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E682 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E686 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E68A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E68E 101A                       		move.b	(a2)+,d0
0000E690 0C00 0006                  		cmpi.b	#6,d0
0000E694 6600                       		bne.s	loc_C5CA
0000E696 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E69A                            
0000E69A                            	loc_C5CA:
0000E69A 1340 001A                  		move.b	d0,obFrame(a1)
0000E69E 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E6A6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E6AC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E6B2 43E9 0040                  		lea	$40(a1),a1
0000E6B6 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E6BA                            
0000E6BA                            Got_Move:	; Routine 2
0000E6BA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6BC 3028 0030                  		move.w	got_mainX(a0),d0
0000E6C0 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E6C4 6700                       		beq.s	loc_C61A	; if yes, branch
0000E6C6 6C00                       		bge.s	Got_ChgPos
0000E6C8 4441                       		neg.w	d1
0000E6CA                            
0000E6CA                            	Got_ChgPos:
0000E6CA D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6CE                            
0000E6CE                            	loc_C5FE:
0000E6CE 3028 0008                  		move.w	obX(a0),d0
0000E6D2 6B00                       		bmi.s	locret_C60E
0000E6D4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E6D8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E6DA 6000 0000                  		bra.w	DisplaySprite
0000E6DE                            ; ===========================================================================
0000E6DE                            
0000E6DE                            locret_C60E:
0000E6DE 4E75                       		rts	
0000E6E0                            ; ===========================================================================
0000E6E0                            
0000E6E0                            loc_C610:
0000E6E0 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E6E6 6000 0000                  		bra.w	Got_Move2
0000E6EA                            ; ===========================================================================
0000E6EA                            
0000E6EA                            loc_C61A:
0000E6EA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E6F0 67EE                       		beq.s	loc_C610
0000E6F2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E6F8 66D4                       		bne.s	loc_C5FE
0000E6FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6FE 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E704                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E704                            
0000E704                            Got_Wait:	; Routine 4, 8, $C
0000E704 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E708 6600                       		bne.s	Got_Display
0000E70A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E70E                            
0000E70E                            Got_Display:
0000E70E 6000 0000                  		bra.w	DisplaySprite
0000E712                            ; ===========================================================================
0000E712                            
0000E712                            Got_TimeBonus:	; Routine 6
0000E712 6100 0000                  		bsr.w	DisplaySprite
0000E716 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E71C 7000                       		moveq	#0,d0
0000E71E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E722 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E724 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E728 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E72E                            
0000E72E                            Got_RingBonus:
0000E72E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E732 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E734 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E738 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E73E                            
0000E73E                            Got_ChkBonus:
0000E73E 4A40                       		tst.w	d0		; is there any bonus?
0000E740 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E74C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E750 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E756 6600                       		bne.s	Got_SetDelay
0000E758 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E75C                            
0000E75C                            Got_SetDelay:
0000E75C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E762                            
0000E762                            locret_C692:
0000E762 4E75                       		rts	
0000E764                            ; ===========================================================================
0000E764                            
0000E764                            Got_AddBonus:
0000E764 4EB9 0000 0000             		jsr	(AddPoints).l
0000E76A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E76E 0200 0003                  		andi.b	#3,d0
0000E772 66EE                       		bne.s	locret_C692
0000E77E                            ; ===========================================================================
0000E77E                            
0000E77E                            Got_NextLevel:	; Routine $A
0000E77E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E784 1038 FE10                  		move.b	(v_zone).w,d0
0000E788 0240 0007                  		andi.w	#7,d0
0000E78C E748                       		lsl.w	#3,d0
0000E78E 1238 FE11                  		move.b	(v_act).w,d1
0000E792 0241 0003                  		andi.w	#3,d1
0000E796 D241                       		add.w	d1,d1
0000E798 D041                       		add.w	d1,d0
0000E79A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E79E 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E7A2 4A40                       		tst.w	d0
0000E7A4 6600                       		bne.s	Got_ChkSS
0000E7A6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E7AC 6000                       		bra.s	Got_Display2
0000E7AE                            ; ===========================================================================
0000E7AE                            
0000E7AE                            Got_ChkSS:
0000E7AE 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E7B2 4A38 F7CD                  		tst.b	(f_bigring).w	; has Sonic jumped into	a giant	ring?
0000E7B6 6700                       		beq.s	VBla_08A	; if not, branch
0000E7B8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E7BE 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set game mode to Special Stage (10)
0000E7C4 6000                       		bra.s	Got_Display2
0000E7C6 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E7CC                            ; ===========================================================================
0000E7CC                            
0000E7CC                            VBla_08A:
0000E7CC 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E7D2                            
0000E7D2                            Got_Display2:
0000E7D2 6000 0000                  		bra.w	DisplaySprite
0000E7D6                            ; ===========================================================================
0000E7D6                            ; ---------------------------------------------------------------------------
0000E7D6                            ; Level	order array
0000E7D6                            ; ---------------------------------------------------------------------------
0000E7D6                            LevelOrder:
0000E7D6                            		; Green Hill Zone
0000E7D6 0001                       		dc.b id_GHZ, 1	; Act 2
0000E7D8 0002                       		dc.b id_GHZ, 2	; Act 2
0000E7DA 0200                       		dc.b id_MZ, 0	; Act 3
0000E7DC 0000                       		dc.b 0, 0
0000E7DE                            
0000E7DE                            		; Labyrinth Zone
0000E7DE 0101                       		dc.b id_LZ, 1	; Act 1
0000E7E0 0102                       		dc.b id_LZ, 2	; Act 2
0000E7E2 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E7E4 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E7E6                            
0000E7E6                            		; Marble Zone
0000E7E6 0201                       		dc.b id_MZ, 1	; Act 1
0000E7E8 0202                       		dc.b id_MZ, 2	; Act 2
0000E7EA 0502                       		dc.b id_SBZ, 2	; Act 3
0000E7EC 0000                       		dc.b 0, 0
0000E7EE                            
0000E7EE                            		; Star Light Zone
0000E7EE 0301                       		dc.b id_SLZ, 1	; Act 1
0000E7F0 0302                       		dc.b id_SLZ, 2	; Act 2
0000E7F2 0500                       		dc.b id_SBZ, 0	; Act 3
0000E7F4 0000                       		dc.b 0, 0
0000E7F6                            
0000E7F6                            		; Spring Yard Zone
0000E7F6 0502                       		dc.b id_SBZ, 2	; Act 1
0000E7F8 0402                       		dc.b id_SYZ, 2	; Act 2
0000E7FA 0200                       		dc.b id_MZ,	 0	; Act 3
0000E7FC 0000                       		dc.b 0, 0
0000E7FE                            
0000E7FE                            		; Scrap Brain Zone
0000E7FE 0501                       		dc.b id_SBZ, 1	; Act 1
0000E800 0103                       		dc.b id_LZ, 3	; Act 2
0000E802 0000                       		dc.b 0, 0	; Final Zone
0000E804 0000                       		dc.b 0, 0
0000E806                            		even
0000E806                            ; ===========================================================================
0000E806                            
0000E806                            Got_Move2:	; Routine $E
0000E806 7220                       		moveq	#$20,d1		; set horizontal speed
0000E808 3028 0032                  		move.w	got_finalX(a0),d0
0000E80C B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E810 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E812 6C00                       		bge.s	Got_ChgPos2
0000E814 4441                       		neg.w	d1
0000E816                            
0000E816                            	Got_ChgPos2:
0000E816 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E81A 3028 0008                  		move.w	obX(a0),d0
0000E81E 6B00                       		bmi.s	locret_C748
0000E820 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E824 6400                       		bcc.s	locret_C748	; if yes, branch
0000E826 6000 0000                  		bra.w	DisplaySprite
0000E82A                            ; ===========================================================================
0000E82A                            
0000E82A                            locret_C748:
0000E82A 4E75                       		rts	
0000E82C                            ; ===========================================================================
0000E82C                            
0000E82C                            Got_SBZ2:
0000E82C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E832 6600 0000                  		bne.w	DeleteObject
0000E836 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E83A 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E83E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E84E                            ; ===========================================================================
0000E84E                            
0000E84E                            loc_C766:	; Routine $10
0000E84E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E852 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E858 6700 0000                  		beq.w	DeleteObject
0000E85C 4E75                       		rts	
0000E85E                            ; ===========================================================================
0000E85E                            		;    x-start,	x-main,	y-main,
0000E85E                            		;				routine, frame number
0000E85E                            
0000E85E 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E864 0200                       		dc.b 				2,	0
0000E866                            
0000E866 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E86C 0201                       		dc.b 				2,	1
0000E86E                            
0000E86E 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E874 0206                       		dc.b 				2,	6
0000E876                            
0000E876 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E87C 0202                       		dc.b 				2,	2
0000E87E                            
0000E87E 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E884 0203                       		dc.b 				2,	3
0000E886                            
0000E886 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E88C 0204                       		dc.b 				2,	4
0000E88E                            
0000E88E 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E894 0205                       		dc.b 				2,	5
0000E894 0205                       		dc.b 				2,	5
0000E896                            		include	"_incObj\7E Special Stage Results.asm"
0000E896                            ; ---------------------------------------------------------------------------
0000E896                            ; Object 7E - special stage results screen
0000E896                            ; ---------------------------------------------------------------------------
0000E896                            
0000E896                            SSResult:
0000E896 7000                       		moveq	#0,d0
0000E898 1028 0024                  		move.b	obRoutine(a0),d0
0000E89C 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E8A0 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E8A4                            ; ===========================================================================
0000E8A4 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E8A6 0000                       		dc.w SSR_Move-SSR_Index
0000E8A8 0000                       		dc.w SSR_Wait-SSR_Index
0000E8AA 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E8AC 0000                       		dc.w SSR_Wait-SSR_Index
0000E8AE 0000                       		dc.w SSR_Exit-SSR_Index
0000E8B0 0000                       		dc.w SSR_Wait-SSR_Index
0000E8B2 0000                       		dc.w SSR_Continue-SSR_Index
0000E8B4 0000                       		dc.w SSR_Wait-SSR_Index
0000E8B6 0000                       		dc.w SSR_Exit-SSR_Index
0000E8B8 0000                       		dc.w loc_C91A-SSR_Index
0000E8BA                            
0000E8BA =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E8BA                            ; ===========================================================================
0000E8BA                            
0000E8BA                            SSR_ChkPLC:	; Routine 0
0000E8BA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E8BE 6700                       		beq.s	SSR_Main	; if yes, branch
0000E8C0 4E75                       		rts	
0000E8C2                            ; ===========================================================================
0000E8C2                            
0000E8C2                            SSR_Main:
0000E8C2 2248                       		movea.l	a0,a1
0000E8C4 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E8CA 7203                       		moveq	#3,d1
0000E8CC 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E8D2 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E8D4 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E8D6                            
0000E8D6                            	SSR_Loop:
0000E8D6 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E8DA 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E8DE 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E8E2 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8E6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8EA 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E8EE 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E8F6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8FC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E902 43E9 0040                  		lea	$40(a1),a1
0000E906 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E90A                            
0000E90A 7007                       		moveq	#7,d0
0000E90C 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E910 6700                       		beq.s	loc_C842
0000E912 7000                       		moveq	#0,d0
0000E914 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E918 6600                       		bne.s	loc_C842	; if not, branch
0000E91A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E91C 317C 0018 0008             		move.w	#$18,obX(a0)
0000E922 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E928                            
0000E928                            loc_C842:
0000E928 1140 001A                  		move.b	d0,obFrame(a0)
0000E92C                            
0000E92C                            SSR_Move:	; Routine 2
0000E92C 7210                       		moveq	#$10,d1		; set horizontal speed
0000E92E 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E932 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E936 6700                       		beq.s	loc_C86C	; if yes, branch
0000E938 6C00                       		bge.s	SSR_ChgPos
0000E93A 4441                       		neg.w	d1
0000E93C                            
0000E93C                            SSR_ChgPos:
0000E93C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E940                            
0000E940                            loc_C85A:
0000E940 3028 0008                  		move.w	obX(a0),d0
0000E944 6B00                       		bmi.s	locret_C86A
0000E946 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E94A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E94C 6000 0000                  		bra.w	DisplaySprite
0000E950                            ; ===========================================================================
0000E950                            
0000E950                            locret_C86A:
0000E950 4E75                       		rts	
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            loc_C86C:
0000E952 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E958 66E6                       		bne.s	loc_C85A
0000E95A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E95E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E964 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E96A                            
0000E96A                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E96A 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E96E 6600                       		bne.s	SSR_Display
0000E970 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E974                            
0000E974                            SSR_Display:
0000E974 6000 0000                  		bra.w	DisplaySprite
0000E978                            ; ===========================================================================
0000E978                            
0000E978                            SSR_RingBonus:	; Routine 6
0000E978 6100 0000                  		bsr.w	DisplaySprite
0000E97C 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E982 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E986 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E988 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E98E 700A                       		moveq	#10,d0		; add 10 to score
0000E990 4EB9 0000 0000             		jsr	(AddPoints).l
0000E996 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E99A 0200 0003                  		andi.b	#3,d0
0000E99E 6600                       		bne.s	locret_C8EA
0000E9AA                            ; ===========================================================================
0000E9AA                            
0000E9AA                            loc_C8C4:
0000E9B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9B8 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9BE 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E9C4 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E9C6 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E9CC 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E9D0                            
0000E9D0                            locret_C8EA:
0000E9D0 4E75                       		rts	
0000E9D2                            ; ===========================================================================
0000E9D2                            
0000E9D2                            SSR_Exit:	; Routine $A, $12
0000E9D2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E9D8 6000 0000                  		bra.w	DisplaySprite
0000E9DC                            ; ===========================================================================
0000E9DC                            
0000E9DC                            SSR_Continue:	; Routine $E
0000E9DC 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E9E2 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E9F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9F6 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E9FC 6000 0000                  		bra.w	DisplaySprite
0000EA00                            ; ===========================================================================
0000EA00                            
0000EA00                            loc_C91A:	; Routine $14
0000EA00 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA04 0200 000F                  		andi.b	#$F,d0
0000EA08 6600                       		bne.s	SSR_Display2
0000EA0A 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EA10                            
0000EA10                            SSR_Display2:
0000EA10 6000 0000                  		bra.w	DisplaySprite
0000EA14                            ; ===========================================================================
0000EA14 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EA1A 0200                       		dc.b 2,	0		; rountine number, frame number
0000EA1C 0320 0120 0118             		dc.w $320, $120, $118
0000EA22 0201                       		dc.b 2,	1
0000EA24 0360 0120 0128             		dc.w $360, $120, $128
0000EA2A 0202                       		dc.b 2,	2
0000EA2C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EA32 0203                       		dc.b 2,	3
0000EA34 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EA3A 0206                       		dc.b 2,	6
0000EA3A 0206                       		dc.b 2,	6
0000EA3C                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EA3C                            ; ---------------------------------------------------------------------------
0000EA3C                            ; Object 7F - chaos emeralds from the special stage results screen
0000EA3C                            ; ---------------------------------------------------------------------------
0000EA3C                            
0000EA3C                            SSRChaos:
0000EA3C 7000                       		moveq	#0,d0
0000EA3E 1028 0024                  		move.b	obRoutine(a0),d0
0000EA42 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EA46 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EA4A                            ; ===========================================================================
0000EA4A 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EA4C 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EA4E                            
0000EA4E                            ; ---------------------------------------------------------------------------
0000EA4E                            ; X-axis positions for chaos emeralds
0000EA4E                            ; ---------------------------------------------------------------------------
0000EA4E 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EA5A                            ; ===========================================================================
0000EA5A                            
0000EA5A                            SSRC_Main:	; Routine 0
0000EA5A 2248                       		movea.l	a0,a1
0000EA5C 45F9 0000 EA4E             		lea	(SSRC_PosData).l,a2
0000EA62 7400                       		moveq	#0,d2
0000EA64 7200                       		moveq	#0,d1
0000EA66 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EA6A 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EA6C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EA70                            
0000EA70                            	SSRC_Loop:
0000EA70 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EA74 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EA78 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EA7E 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EA82 1633 2000                  		move.b	(a3,d2.w),d3
0000EA86 1343 001A                  		move.b	d3,obFrame(a1)
0000EA8A 1343 001C                  		move.b	d3,obAnim(a1)
0000EA8E 5202                       		addq.b	#1,d2
0000EA90 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EA94 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EA9C 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EAA2 137C 0000 0001             		move.b	#0,obRender(a1)
0000EAA8 43E9 0040                  		lea	$40(a1),a1	; next object
0000EAAC 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EAB0                            
0000EAB0                            SSRC_Flash:	; Routine 2
0000EAB0 1028 001A                  		move.b	obFrame(a0),d0
0000EAB4 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EABA 0C00 0006                  		cmpi.b	#6,d0
0000EABE 6600                       		bne.s	SSRC_Display
0000EAC0 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EAC6                            
0000EAC6                            	SSRC_Display:
0000EAC6 6000 0000                  		bra.w	DisplaySprite
0000EAC6 6000 0000                  		bra.w	DisplaySprite
0000EACA                            
0000EACA                            ; ---------------------------------------------------------------------------
0000EACA                            ; Sprite mappings - zone title cards
0000EACA                            ; ---------------------------------------------------------------------------
0000EACA 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EACC 0000                       		dc.w M_Card_LZ-Map_Card
0000EACE 0000                       		dc.w M_Card_MZ-Map_Card
0000EAD0 0000                       		dc.w M_Card_SLZ-Map_Card
0000EAD2 0000                       		dc.w M_Card_SYZ-Map_Card
0000EAD4 0000                       		dc.w M_Card_SBZ-Map_Card
0000EAD6 0000                       		dc.w M_Card_Zone-Map_Card
0000EAD8 0000                       		dc.w M_Card_Act1-Map_Card
0000EADA 0000                       		dc.w M_Card_Act2-Map_Card
0000EADC 0000                       		dc.w M_Card_Act3-Map_Card
0000EADE 0000                       		dc.w M_Card_Oval-Map_Card
0000EAE0 0000                       		dc.w M_Card_FZ-Map_Card
0000EAE2 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EAE3 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EAE8 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EAED F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EAF2 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EAF7 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EAFC F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EB01 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EB06 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EB0B F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EB10                            		even
0000EB10 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EB11 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EB16 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EB1B F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EB20 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EB25 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EB2A F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EB2F F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EB34 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EB39 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EB3E                            		even
0000EB3E 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EB3F F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EB44 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EB49 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EB4E F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EB53 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EB58 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EB5D F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EB62 F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EB67 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EB6C F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EB71 F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EB76 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EB77 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EB7C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EB81 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EB86 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EB8B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EB90 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EB95 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EB9A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EB9F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EBA4                            		even
0000EBA4 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EBA5 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EBAA F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EBAF F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EBB4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EBB9 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EBBE F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EBC3 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EBC8 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EBCD F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EBD2 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EBD8 00                         		even
0000EBD8 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EBD9 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EBDE F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EBE3 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EBE8 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EBED F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EBF2 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EBF7 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EBFC F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EC01 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EC06 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EC0C 00                         		even
0000EC0C 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EC0D F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EC12 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EC17 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EC1C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EC22 00                         		even
0000EC22 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EC23 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC28 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EC2D 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EC2E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC33 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EC38 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EC39 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC3E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EC43 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EC44 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EC49 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EC4E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EC53 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EC58 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EC5D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EC62 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EC67 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EC6C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EC71 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EC76 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EC7B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EC80 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EC86 00                         		even
0000EC86 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EC87 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EC8C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EC91 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EC96 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EC9B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000ECA0                            		even
0000ECA0                            
0000ECA0                            Map_Over:	include	"_maps\Game Over.asm"
0000ECA0                            ; ---------------------------------------------------------------------------
0000ECA0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000ECA0                            ; ---------------------------------------------------------------------------
0000ECA0                            Map_Over_internal:
0000ECA0 0000                       		dc.w byte_CBAC-Map_Over_internal
0000ECA2 0000                       		dc.w byte_CBB7-Map_Over_internal
0000ECA4 0000                       		dc.w byte_CBC2-Map_Over_internal
0000ECA6 0000                       		dc.w byte_CBCD-Map_Over_internal
0000ECA8 02                         byte_CBAC:	dc.b 2			; GAME
0000ECA9 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000ECAE F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000ECB3 02                         byte_CBB7:	dc.b 2			; OVER
0000ECB4 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000ECB9 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000ECBE 02                         byte_CBC2:	dc.b 2			; TIME
0000ECBF F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000ECC4 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000ECC9 02                         byte_CBCD:	dc.b 2			; OVER
0000ECCA F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000ECCF F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000ECD4                            		even
0000ECD4                            		even
0000ECD4                            
0000ECD4                            ; ---------------------------------------------------------------------------
0000ECD4                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000ECD4                            ; ---------------------------------------------------------------------------
0000ECD4 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000ECD6 0000                       		dc.w M_Got_Passed-Map_Got
0000ECD8 0000                       		dc.w M_Got_Score-Map_Got
0000ECDA 0000                       		dc.w M_Got_TBonus-Map_Got
0000ECDC 0000                       		dc.w M_Got_RBonus-Map_Got
0000ECDE FF6F                       		dc.w M_Card_Oval-Map_Got
0000ECE0 FF4E                       		dc.w M_Card_Act1-Map_Got
0000ECE2 FF59                       		dc.w M_Card_Act2-Map_Got
0000ECE4 FF64                       		dc.w M_Card_Act3-Map_Got
0000ECE6 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ECE7 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ECEC F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ECF1 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ECF6 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ECFB F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ED00 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ED05 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ED0A F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ED0F 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ED10 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ED15 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ED1A F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ED1F F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ED24 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED29 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ED2E 06                         M_Got_Score:	dc.b 6			; SCORE
0000ED2F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ED34 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000ED39 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000ED3E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000ED43 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000ED48 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000ED4D 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000ED4E F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000ED53 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED58 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED5D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED62 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED67 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000ED6C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED71 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000ED72 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000ED77 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED7C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED81 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED86 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED8B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000ED90 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED96 00                         		even
0000ED96                            ; ---------------------------------------------------------------------------
0000ED96                            ; Sprite mappings - special stage results screen
0000ED96                            ; ---------------------------------------------------------------------------
0000ED96 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000ED98 0000                       		dc.w M_SSR_Score-Map_SSR
0000ED9A 0000                       		dc.w byte_CD0D-Map_SSR
0000ED9C FEAD                       		dc.w M_Card_Oval-Map_SSR
0000ED9E 0000                       		dc.w byte_CD31-Map_SSR
0000EDA0 0000                       		dc.w byte_CD46-Map_SSR
0000EDA2 0000                       		dc.w byte_CD5B-Map_SSR
0000EDA4 0000                       		dc.w byte_CD6B-Map_SSR
0000EDA6 0000                       		dc.w byte_CDA8-Map_SSR
0000EDA8 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EDA9 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EDAE F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EDB3 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EDB8 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EDBD F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EDC2 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EDC7 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EDCC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EDD1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EDD6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EDDB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EDE0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EDE5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EDEA 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EDEB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EDF0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EDF5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EDFA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EDFF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE04 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE09 07                         byte_CD0D:	dc.b 7
0000EE0A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE0F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE14 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE19 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE1E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE23 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE28 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE2D 04                         byte_CD31:	dc.b 4
0000EE2E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE33 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE38 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE3D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EE42 04                         byte_CD46:	dc.b 4
0000EE43 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE48 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE4D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE52 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EE57 03                         byte_CD5B:	dc.b 3
0000EE58 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE5D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE62 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE67 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EE68 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EE6D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EE72 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EE77 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EE7C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EE81 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EE86 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EE8B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EE90 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EE95 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EE9A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EE9F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EEA4 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EEA5 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EEAA F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EEAF F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EEB4 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EEB9 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EEBE F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EEC3 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EEC8 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EECD F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EED2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EED7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EEDC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EEE1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EEE6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EEEB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EEF0                            		even
0000EEF0                            
0000EEF0                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EEF0                            ; ---------------------------------------------------------------------------
0000EEF0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EEF0                            ; ---------------------------------------------------------------------------
0000EEF0                            Map_SSRC_internal:
0000EEF0 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EEF2 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EEF4 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EEF6 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EEF8 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EEFA 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EEFC 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EEFE 01                         byte_CE02:	dc.b 1
0000EEFF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EF04 01                         byte_CE08:	dc.b 1
0000EF05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EF0A 01                         byte_CE0E:	dc.b 1
0000EF0B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EF10 01                         byte_CE14:	dc.b 1
0000EF11 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EF16 01                         byte_CE1A:	dc.b 1
0000EF17 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EF1C 01                         byte_CE20:	dc.b 1
0000EF1D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EF22 00                         byte_CE26:	dc.b 0			; Blank frame
0000EF24 00                         		even
0000EF24 00                         		even
0000EF24                            
0000EF24                            		include	"_incObj\36 Spikes.asm"
0000EF24                            ; ---------------------------------------------------------------------------
0000EF24                            ; Object 36 - spikes
0000EF24                            ; ---------------------------------------------------------------------------
0000EF24                            
0000EF24                            Spikes:
0000EF24 7000                       		moveq	#0,d0
0000EF26 1028 0024                  		move.b	obRoutine(a0),d0
0000EF2A 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EF2E 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EF32                            ; ===========================================================================
0000EF32 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EF34 0000                       		dc.w Spik_Solid-Spik_Index
0000EF36                            
0000EF36 =00000030                  spik_origX:	equ $30		; start X position
0000EF36 =00000032                  spik_origY:	equ $32		; start Y position
0000EF36                            
0000EF36 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EF38 0110                       		dc.b 1,	$10
0000EF3A 0204                       		dc.b 2,	4
0000EF3C 031C                       		dc.b 3,	$1C
0000EF3E 0440                       		dc.b 4,	$40
0000EF40 0510                       		dc.b 5,	$10
0000EF42                            ; ===========================================================================
0000EF42                            
0000EF42                            Spik_Main:	; Routine 0
0000EF42 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF46 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EF4E 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EF54 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EF5A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF60 1028 0028                  		move.b	obSubtype(a0),d0
0000EF64 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EF6A 0240 00F0                  		andi.w	#$F0,d0
0000EF6E 43F9 0000 EF36             		lea	(Spik_Var).l,a1
0000EF74 E648                       		lsr.w	#3,d0
0000EF76 D2C0                       		adda.w	d0,a1
0000EF78 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EF7C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EF80 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EF86 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EF8C                            
0000EF8C                            Spik_Solid:	; Routine 2
0000EF8C 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EF90 343C 0004                  		move.w	#4,d2
0000EF94 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EF9A 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EF9C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EFA2 6600                       		bne.s	Spik_Upright	; if not, branch
0000EFA4 343C 0014                  		move.w	#$14,d2
0000EFA8                            
0000EFA8                            ; Spikes types $1x and $5x face	sideways
0000EFA8                            
0000EFA8                            Spik_SideWays:
0000EFA8 323C 001B                  		move.w	#$1B,d1
0000EFAC 3602                       		move.w	d2,d3
0000EFAE 5243                       		addq.w	#1,d3
0000EFB0 3828 0008                  		move.w	obX(a0),d4
0000EFB4 6100 0000                  		bsr.w	SolidObject
0000EFB8 0828 0003 0022             		btst	#3,obStatus(a0)
0000EFBE 6600                       		bne.s	Spik_Display
0000EFC0 0C44 0001                  		cmpi.w	#1,d4
0000EFC4 6700                       		beq.s	Spik_Hurt
0000EFC6 6000                       		bra.s	Spik_Display
0000EFC8                            ; ===========================================================================
0000EFC8                            
0000EFC8                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000EFC8                            
0000EFC8                            Spik_Upright:
0000EFC8 7200                       		moveq	#0,d1
0000EFCA 1228 0014                  		move.b	obActWid(a0),d1
0000EFCE 0641 000B                  		addi.w	#$B,d1
0000EFD2 343C 0010                  		move.w	#$10,d2
0000EFD6 363C 0011                  		move.w	#$11,d3
0000EFDA 3828 0008                  		move.w	obX(a0),d4
0000EFDE 6100 0000                  		bsr.w	SolidObject
0000EFE2 0828 0003 0022             		btst	#3,obStatus(a0)
0000EFE8 6600                       		bne.s	Spik_Hurt
0000EFEA 4A44                       		tst.w	d4
0000EFEC 6A00                       		bpl.s	Spik_Display
0000EFEE                            
0000EFEE                            Spik_Hurt:
0000EFEE 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000EFF2 6600                       		bne.s	Spik_Display	; if yes, branch
0000EFF4 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000EFF8 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000EFFA 2F08                       		move.l	a0,-(sp)
0000EFFC 2448                       		movea.l	a0,a2
0000EFFE 41F8 D000                  		lea	(v_player).w,a0
0000F002 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F008 6400                       		bcc.s	loc_CF20
0000F00A                            		; This fixes the infamous "spike bug"
0000F00A 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F00E 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F010 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F016                            loc_D5A2:
0000F016 9680                       		sub.l	d0,d3
0000F018 2143 000C                  		move.l	d3,obY(a0)
0000F01C 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F022                            
0000F022                            loc_CF20:
0000F022 205F                       		movea.l	(sp)+,a0
0000F024                            
0000F024                            Spik_Display:
0000F024 6100 0000                  		bsr.w	DisplaySprite
0000F046 4E75                       		rts	
0000F048                            ; ===========================================================================
0000F048                            
0000F048                            Spik_Type0x:
0000F048 7000                       		moveq	#0,d0
0000F04A 1028 0028                  		move.b	obSubtype(a0),d0
0000F04E D040                       		add.w	d0,d0
0000F050 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F054 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F058                            ; ===========================================================================
0000F058 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F05A 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F05C 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F05E                            ; ===========================================================================
0000F05E                            
0000F05E                            Spik_Type00:
0000F05E 4E75                       		rts			; don't move the object
0000F060                            ; ===========================================================================
0000F060                            
0000F060                            Spik_Type01:
0000F060 6100 0000                  		bsr.w	Spik_Wait
0000F064 7000                       		moveq	#0,d0
0000F066 1028 0034                  		move.b	$34(a0),d0
0000F06A D068 0032                  		add.w	spik_origY(a0),d0
0000F06E 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F072 4E75                       		rts	
0000F074                            ; ===========================================================================
0000F074                            
0000F074                            Spik_Type02:
0000F074 6100 0000                  		bsr.w	Spik_Wait
0000F078 7000                       		moveq	#0,d0
0000F07A 1028 0034                  		move.b	$34(a0),d0
0000F07E D068 0030                  		add.w	spik_origX(a0),d0
0000F082 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F086 4E75                       		rts	
0000F088                            ; ===========================================================================
0000F088                            
0000F088                            Spik_Wait:
0000F088 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F08C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F08E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F092 6600                       		bne.s	locret_CFE6
0000F094 4A28 0001                  		tst.b	obRender(a0)
0000F098 6A00                       		bpl.s	locret_CFE6
0000F0A4 6000                       		bra.s	locret_CFE6
0000F0A6                            ; ===========================================================================
0000F0A6                            
0000F0A6                            loc_CFA4:
0000F0A6 4A68 0036                  		tst.w	$36(a0)
0000F0AA 6700                       		beq.s	loc_CFC6
0000F0AC 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F0B2 6400                       		bcc.s	locret_CFE6
0000F0B4 317C 0000 0034             		move.w	#0,$34(a0)
0000F0BA 317C 0000 0036             		move.w	#0,$36(a0)
0000F0C0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F0C6 6000                       		bra.s	locret_CFE6
0000F0C8                            ; ===========================================================================
0000F0C8                            
0000F0C8                            loc_CFC6:
0000F0C8 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F0CE 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F0D4 6500                       		bcs.s	locret_CFE6
0000F0D6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F0DC 317C 0001 0036             		move.w	#1,$36(a0)
0000F0E2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F0E8                            
0000F0E8                            locret_CFE6:
0000F0E8 4E75                       		rts	
0000F0E8 4E75                       		rts	
0000F0EA                            Map_Spike:	include	"_maps\Spikes.asm"
0000F0EA                            ; --------------------------------------------------------------------------------
0000F0EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F0EA                            ; --------------------------------------------------------------------------------
0000F0EA                            
0000F0EA                            SME_XgeaQ:	
0000F0EA 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F0EE 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F0F2 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F0F6 03                         SME_XgeaQ_C:	dc.b 3	
0000F0F7 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F0FC F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F101 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F106 03                         SME_XgeaQ_1C:	dc.b 3	
0000F107 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F10C FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F111 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F116 01                         SME_XgeaQ_2C:	dc.b 1	
0000F117 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F11C 03                         SME_XgeaQ_32:	dc.b 3	
0000F11D F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F122 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F127 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F12C 06                         SME_XgeaQ_42:	dc.b 6	
0000F12D F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F132 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F137 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F13C F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F141 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F146 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F14B 01                         SME_XgeaQ_61:	dc.b 1	
0000F14C FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F152 00                         		even
0000F152 00                         		even
0000F152                            		include	"_incObj\3B Purple Rock.asm"
0000F152                            ; ---------------------------------------------------------------------------
0000F152                            ; Object 3B - purple rock (GHZ)
0000F152                            ; ---------------------------------------------------------------------------
0000F152                            
0000F152                            PurpleRock:
0000F152 7000                       		moveq	#0,d0
0000F154 1028 0024                  		move.b	obRoutine(a0),d0
0000F158 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F15C 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F160                            ; ===========================================================================
0000F160 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F162 0000                       		dc.w Rock_Solid-Rock_Index
0000F164                            ; ===========================================================================
0000F164                            
0000F164                            Rock_Main:	; Routine 0
0000F164 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F168 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F170 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F176 117C 0004 0001             		move.b	#4,obRender(a0)
0000F17C 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F182 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F188                            
0000F188                            Rock_Solid:	; Routine 2
0000F188 323C 001B                  		move.w	#$1B,d1
0000F18C 343C 0010                  		move.w	#$10,d2
0000F190 363C 0010                  		move.w	#$10,d3
0000F194 3828 0008                  		move.w	obX(a0),d4
0000F198 6100 0000                  		bsr.w	SolidObject
0000F19C 6100 0000                  		bsr.w	DisplaySprite
0000F1BE 4E75                       		rts	
0000F1BE 4E75                       		rts	
0000F1C0                            		include	"_incObj\49 Waterfall Sound.asm"
0000F1C0                            ; ---------------------------------------------------------------------------
0000F1C0                            ; Object 49 - waterfall	sound effect (GHZ)
0000F1C0                            ; ---------------------------------------------------------------------------
0000F1C0                            
0000F1C0                            WaterSound:
0000F1C0 7000                       		moveq	#0,d0
0000F1C2 1028 0024                  		move.b	obRoutine(a0),d0
0000F1C6 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F1CA 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F1CE                            ; ===========================================================================
0000F1CE 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F1D0 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F1D2                            ; ===========================================================================
0000F1D2                            
0000F1D2                            WSnd_Main:	; Routine 0
0000F1D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1D6 117C 0004 0001             		move.b	#4,obRender(a0)
0000F1DC                            
0000F1DC                            WSnd_PlaySnd:	; Routine 2
0000F1DC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F1E0 0200 003F                  		andi.b	#$3F,d0
0000F1E4 6600                       		bne.s	WSnd_ChkDel
0000F1F0                            
0000F1F0                            	WSnd_ChkDel:
0000F20E 4E75                       		rts	
0000F20E 4E75                       		rts	
0000F210                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F210                            ; ---------------------------------------------------------------------------
0000F210                            ; Sprite mappings - purple rock	(GHZ)
0000F210                            ; ---------------------------------------------------------------------------
0000F210                            Map_PRock_internal:
0000F210 0000                       		dc.w byte_D110-Map_PRock_internal
0000F212 02                         byte_D110:	dc.b 2
0000F213 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F218 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F21E 00                         		even
0000F21E 00                         		even
0000F21E                            		include	"_incObj\3C Smashable Wall.asm"
0000F21E                            ; ---------------------------------------------------------------------------
0000F21E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F21E                            ; ---------------------------------------------------------------------------
0000F21E                            
0000F21E                            SmashWall:
0000F21E 7000                       		moveq	#0,d0
0000F220 1028 0024                  		move.b	obRoutine(a0),d0
0000F224 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F228 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F22C 6000 0000                  		bra.w	RememberState
0000F230                            ; ===========================================================================
0000F230 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F232 0000                       		dc.w Smash_Solid-Smash_Index
0000F234 0000                       		dc.w Smash_FragMove-Smash_Index
0000F236                            
0000F236 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F236                            ; ===========================================================================
0000F236                            
0000F236                            Smash_Main:	; Routine 0
0000F236 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F23A 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F242 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F248 117C 0004 0001             		move.b	#4,obRender(a0)
0000F24E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F254 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F25A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F260                            
0000F260                            Smash_Solid:	; Routine 2
0000F260 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F266 323C 001B                  		move.w	#$1B,d1
0000F26A 343C 0020                  		move.w	#$20,d2
0000F26E 363C 0020                  		move.w	#$20,d3
0000F272 3828 0008                  		move.w	obX(a0),d4
0000F276 6100 0000                  		bsr.w	SolidObject
0000F27A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F280 6600                       		bne.s	@chkroll	; if yes, branch
0000F282                            
0000F282                            @donothing:
0000F282 4E75                       		rts	
0000F284                            ; ===========================================================================
0000F284                            
0000F284                            @chkroll:
0000F284 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F28A 66F6                       		bne.s	@donothing	; if not, branch
0000F28C 3028 0030                  		move.w	smash_speed(a0),d0
0000F290 6A00                       		bpl.s	@chkspeed
0000F292 4440                       		neg.w	d0
0000F294                            
0000F294                            	@chkspeed:
0000F294 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F298 65E8                       		bcs.s	@donothing	; if not, branch
0000F29A 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F2A0 5869 0008                  		addq.w	#4,obX(a1)
0000F2A4 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F2AA 3028 0008                  		move.w	obX(a0),d0
0000F2AE B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F2B2 6500                       		bcs.s	@smash		; if yes, branch
0000F2B4 5169 0008                  		subq.w	#8,obX(a1)
0000F2B8 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F2BE                            
0000F2BE                            	@smash:
0000F2BE 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F2C4 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F2CA 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F2D0 7207                       		moveq	#7,d1		; load 8 fragments
0000F2D2 343C 0070                  		move.w	#$70,d2
0000F2D6 6100                       		bsr.s	SmashObject
0000F2D8                            
0000F2D8                            Smash_FragMove:	; Routine 4
0000F2D8 6100 0000                  		bsr.w	SpeedToPos
0000F2DC 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F2E2 6100 0000                  		bsr.w	DisplaySprite
0000F2E6 4A28 0001                  		tst.b	obRender(a0)
0000F2EA 6A00 0000                  		bpl.w	DeleteObject
0000F2EE 4E75                       		rts	
0000F2EE 4E75                       		rts	
0000F2F0                            
0000F2F0                            		include	"_incObj\sub SmashObject.asm"
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            
0000F2F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2F0                            
0000F2F0                            
0000F2F0                            SmashObject:
0000F2F0 7000                       		moveq	#0,d0
0000F2F2 1028 001A                  		move.b	obFrame(a0),d0
0000F2F6 D040                       		add.w	d0,d0
0000F2F8 2668 0004                  		movea.l	obMap(a0),a3
0000F2FC D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F300 524B                       		addq.w	#1,a3
0000F302 08E8 0005 0001             		bset	#5,obRender(a0)
0000F308 1810                       		move.b	0(a0),d4
0000F30A 1A28 0001                  		move.b	obRender(a0),d5
0000F30E 2248                       		movea.l	a0,a1
0000F310 6000                       		bra.s	@loadfrag
0000F312                            ; ===========================================================================
0000F312                            
0000F312                            	@loop:
0000F312 6100 0000                  		bsr.w	FindFreeObj
0000F316 6600                       		bne.s	@playsnd
0000F318 5A4B                       		addq.w	#5,a3
0000F31A                            
0000F31A                            @loadfrag:
0000F31A 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F320 1284                       		move.b	d4,0(a1)
0000F322 234B 0004                  		move.l	a3,obMap(a1)
0000F326 1345 0001                  		move.b	d5,obRender(a1)
0000F32A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F330 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F336 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F33C 1368 0018 0018             		move.b	obPriority(a0),obPriority(a1)
0000F342 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F348 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F34C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F350 B3C8                       		cmpa.l	a0,a1
0000F352 6400                       		bcc.s	@loc_D268
0000F354 2F08                       		move.l	a0,-(sp)
0000F356 2049                       		movea.l	a1,a0
0000F358 6100 0000                  		bsr.w	SpeedToPos
0000F35C D568 0012                  		add.w	d2,obVelY(a0)
0000F360 205F                       		movea.l	(sp)+,a0
0000F362 6100 0000                  		bsr.w	DisplaySprite1
0000F366                            
0000F366                            	@loc_D268:
0000F366 51C9 FFAA                  		dbf	d1,@loop
0000F36A                            
0000F36A                            	@playsnd:
0000F374                            
0000F374                            ; End of function SmashObject
0000F374                            ; End of function SmashObject
0000F374                            
0000F374                            ; ===========================================================================
0000F374                            ; Smashed block	fragment speeds
0000F374                            ;
0000F374 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F378 0600 FF00                  		dc.w $600, -$100
0000F37C 0600 0100                  		dc.w $600, $100
0000F380 0400 0500                  		dc.w $400, $500
0000F384 0600 FA00                  		dc.w $600, -$600
0000F388 0800 FE00                  		dc.w $800, -$200
0000F38C 0800 0200                  		dc.w $800, $200
0000F390 0600 0600                  		dc.w $600, $600
0000F394                            
0000F394 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F398 F800 FE00                  		dc.w -$800, -$200
0000F39C F800 0200                  		dc.w -$800, $200
0000F3A0 FA00 0600                  		dc.w -$600, $600
0000F3A4 FC00 FB00                  		dc.w -$400, -$500
0000F3A8 FA00 FF00                  		dc.w -$600, -$100
0000F3AC FA00 0100                  		dc.w -$600, $100
0000F3B0 FC00 0500                  		dc.w -$400, $500
0000F3B4                            
0000F3B4                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F3B4                            ; ---------------------------------------------------------------------------
0000F3B4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F3B4                            ; ---------------------------------------------------------------------------
0000F3B4                            Map_Smash_internal:
0000F3B4 0000                       		dc.w @left-Map_Smash_internal
0000F3B6 0000                       		dc.w @middle-Map_Smash_internal
0000F3B8 0000                       		dc.w @right-Map_Smash_internal
0000F3BA 08                         @left:		dc.b 8
0000F3BB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F3C0 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F3C5 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F3CA 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F3CF E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F3D4 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F3D9 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F3DE 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F3E3 08                         @middle:	dc.b 8
0000F3E4 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F3E9 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F3EE 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F3F3 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F3F8 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F3FD F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F402 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F407 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F40C 08                         @right:		dc.b 8
0000F40D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F412 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F417 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F41C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F421 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F426 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F42B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F430 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F436 00                         		even
0000F436 00                         		even
0000F436                            
0000F436                            ; ---------------------------------------------------------------------------
0000F436                            ; Object code execution subroutine
0000F436                            ; ---------------------------------------------------------------------------
0000F436                            
0000F436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F436                            
0000F436                            
0000F436                            
0000F436                            ExecuteObjects: ; XREF: GM_Title; et al
0000F436 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F43A 7E7F                       		moveq #$7F,d7
0000F43C 7000                       		moveq #0,d0
0000F43E 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F444 6400                       		bcc.s loc_D362
0000F446                            
0000F446                            loc_D348:
0000F446 1010                       		move.b (a0),d0 ; load object number from RAM
0000F448 6700                       		beq.s loc_D358
0000F44A D040                       		add.w d0,d0
0000F44C D040                       		add.w d0,d0
0000F44E 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F452 4E91                       		jsr (a1) ; run the object's code
0000F454 7000                       		moveq #0,d0
0000F456                            
0000F456                            loc_D358:
0000F456 41E8 0040                  		lea $40(a0),a0 ; next object
0000F45A 51CF FFEA                  		dbf d7,loc_D348
0000F45E 4E75                       		rts
0000F460                            ; ===========================================================================
0000F460                            
0000F460                            loc_D362:
0000F460 7E1F                       		moveq #$1F,d7
0000F462 61E2                       		bsr.s loc_D348
0000F464 7E5F                       		moveq #$5F,d7
0000F466                            
0000F466                            loc_D368:
0000F466 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F468 1010                       		move.b (a0),d0 ; get the object's ID
0000F46A 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F46C 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F470 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F472 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F476 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F47C 6700                       		beq.s loc_D378 ; if not, branch
0000F47E 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F482                            
0000F482                            loc_D378:
0000F482 6100 0000                  		bsr.w DisplaySprite2
0000F486                            		
0000F486                            loc_D37C:
0000F486 41E8 0040                  		lea $40(a0),a0
0000F48A 51CF FFDA                  		dbf d7,loc_D368
0000F48E 4E75                       		rts
0000F490                            ; End of function ExecuteObjects
0000F490                            
0000F490                            ; ===========================================================================
0000F490                            ; ---------------------------------------------------------------------------
0000F490                            ; Object pointers
0000F490                            ; ---------------------------------------------------------------------------
0000F490                            Obj_Index:
0000F490                            		include	"_inc\Object Pointers.asm"
0000F490                            ; ---------------------------------------------------------------------------
0000F490                            ; Object pointers
0000F490                            ; ---------------------------------------------------------------------------
0000F490 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F494 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F498 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F49C 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F4A0 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F4A4 0000 B360                  ptr_Mozzietron:		dc.l Mozzietron
0000F4A8 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F4AC 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F4B0 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F4B4 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F4B8 0000 0000                  ptr_Pole:		dc.l Pole
0000F4BC 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F4C0 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F4C4 0000 C6F8                  ptr_TitleSonic:		dc.l TitleSonic
0000F4C8 0000 C778                  ptr_PSBTM:		dc.l PSBTM
0000F4CC 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F4D0 0000 8EC2                  ptr_Bridge:		dc.l Bridge
0000F4D4 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F4D8 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F4DC 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F4E0 0000 94E8                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F4E4 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F4E8 0000 9834                  ptr_Helix:		dc.l Helix
0000F4EC 0000 99C0                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F4F0 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F4F4 0000 9D9C                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F4F8 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F4FC 0000 A352                  ptr_Scenery:		dc.l Scenery
0000F500 0000 A3F4                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F504 0000 A6DC                  ptr_BallHog:		dc.l BallHog
0000F508 0000 B076                  ptr_Crabmeat:		dc.l Crabmeat
0000F50C 0000 A7AA                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F510 0000 0000                  ptr_HUD:		dc.l HUD
0000F514 0000 B492                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F518 0000 B5E4                  ptr_Missile:		dc.l Missile
0000F51C 0000 A87C                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F520 0000 B83E                  ptr_Rings:		dc.l Rings
0000F524 0000 C088                  ptr_Monitor:		dc.l Monitor
0000F528 0000 A8EC                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F52C 0000 AAAA                  ptr_Animals:		dc.l Animals		; $28
0000F530 0000 AF98                  ptr_Points:		dc.l Points
0000F534 0000 A4CA                  ptr_AutoDoor:		dc.l AutoDoor
0000F538 0000 CBFC                  ptr_Chopper:		dc.l Chopper
0000F53C 0000 CCB6                  ptr_Jaws:		dc.l Jaws
0000F540 0000 CD80                  ptr_Burrobot:		dc.l Burrobot
0000F544 0000 C286                  ptr_PowerUp:		dc.l PowerUp
0000F548 0000 CF94                  ptr_LargeGrass:		dc.l LargeGrass
0000F54C 0000 D476                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F550 0000 D752                  ptr_ChainStomp:		dc.l ChainStomp
0000F554 0000 DE00                  ptr_Button:		dc.l Button
0000F558 0000 DFA4                  ptr_PushBlock:		dc.l PushBlock
0000F55C 0000 E3D6                  ptr_TitleCard:		dc.l TitleCard
0000F560 0000 D2B6                  ptr_GrassFire:		dc.l GrassFire
0000F564 0000 EF24                  ptr_Spikes:		dc.l Spikes
0000F568 0000 BA9A                  ptr_RingLoss:		dc.l RingLoss
0000F56C 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F570 0000 E586                  ptr_GameOverCard:	dc.l GameOverCard
0000F574 0000 E644                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F578 0000 F152                  ptr_PurpleRock:		dc.l PurpleRock
0000F57C 0000 F21E                  ptr_SmashWall:		dc.l SmashWall
0000F580 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F584 0000 0000                  ptr_Prison:		dc.l Prison
0000F588 0000 A97E                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F58C 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F590 0000 0000                  ptr_Springs:		dc.l Springs
0000F594 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F598 0000 0000                  ptr_Roller:		dc.l Roller
0000F59C 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F5A0 0000 DA6E                  ptr_SideStomp:		dc.l SideStomp
0000F5A4 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F5A8 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F5AC 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F5B0 0000 F1C0                  ptr_WaterSound:		dc.l WaterSound
0000F5B4 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F5B8 0000 BD5C                  ptr_GiantRing:		dc.l GiantRing
0000F5BC 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F5C0 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F5C4 0000 0000                  ptr_LavaWall:		dc.l LavaWall
0000F5C8 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F5CC 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F5D0 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F5D4 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F5D8 0000 9EAC                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F5DC 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F5E0 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F5E4 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F5E8 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F5EC 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F5F0 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F5F4 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F5F8 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F5FC 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F600 0000 0000                  ptr_Fan:		dc.l Fan
0000F604 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F608 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F60C 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F610 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F614 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F618 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F61C 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F620 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F624 0000 0000                  ptr_Junction:		dc.l Junction
0000F628 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F62C 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F630 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F634 0000 0000                  ptr_Saws:		dc.l Saws
0000F638 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F63C 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F640 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F644 0000 0000                  ptr_Electro:		dc.l Electro
0000F648 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F64C 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F650 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F654 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F658 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F65C 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F660 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F664 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F668 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F66C 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F670 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F674 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F678 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F67C 0000 BE36                  ptr_RingFlash:		dc.l RingFlash
0000F680 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F684 0000 E896                  ptr_SSResult:		dc.l SSResult
0000F688 0000 EA3C                  ptr_SSRChaos:		dc.l SSRChaos
0000F68C 0000 5E26                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F690 0000 5F3E                  ptr_ContSonic:		dc.l ContSonic
0000F694 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F698 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F69C 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F6A0 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F6A4 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F6A8 0000 63C8                  ptr_EndSonic:		dc.l EndSonic
0000F6AC 0000 6522                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F6B0 0000 65FC                  ptr_EndSTH:		dc.l EndSTH
0000F6B4 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F6B8 0000 6862                  ptr_EndEggman:		dc.l EndEggman
0000F6BC 0000 6942                  ptr_TryChaos:		dc.l TryChaos
0000F6C0                            
0000F6C0                            NullObject:
0000F6C0                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F6C0                            
0000F6C0 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F6C0 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F6C0 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F6C0 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F6C0 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F6C0 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F6C0 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F6C0 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F6C0 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F6C0 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F6C0 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F6C0 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F6C0 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F6C0 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F6C0 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F6C0 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F6C0 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F6C0 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F6C0 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F6C0 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F6C0 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F6C0 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F6C0 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F6C0 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F6C0 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F6C0 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F6C0 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F6C0 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F6C0 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F6C0 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F6C0 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F6C0 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F6C0 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F6C0 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F6C0 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F6C0 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F6C0 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F6C0 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F6C0 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F6C0 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F6C0 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F6C0 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F6C0 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F6C0 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F6C0 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F6C0 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F6C0 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F6C0 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F6C0 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F6C0 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F6C0 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F6C0 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F6C0 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F6C0 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F6C0 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F6C0 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F6C0 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F6C0 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F6C0 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F6C0 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F6C0 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F6C0 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F6C0 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F6C0 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F6C0 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F6C0 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F6C0 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F6C0 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F6C0 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F6C0 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F6C0 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F6C0 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F6C0 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F6C0 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F6C0 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F6C0 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F6C0 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F6C0 =0000004E                  id_LavaWall:		equ ((ptr_LavaWall-Obj_Index)/4)+1
0000F6C0 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F6C0 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F6C0 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F6C0 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F6C0 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F6C0 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F6C0 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F6C0 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F6C0 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F6C0 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F6C0 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F6C0 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F6C0 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F6C0 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F6C0 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F6C0 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F6C0 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F6C0 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F6C0 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F6C0 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F6C0 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F6C0 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F6C0 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F6C0 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F6C0 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F6C0 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F6C0 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F6C0 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F6C0 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F6C0 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F6C0 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F6C0 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F6C0 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F6C0 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F6C0 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F6C0 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F6C0 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F6C0 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F6C0 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F6C0 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F6C0 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F6C0 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F6C0 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F6C0 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F6C0 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F6C0 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F6C0 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F6C0 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F6C0 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F6C0 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F6C0 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F6C0 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F6C0 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F6C0 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F6C0 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F6C0 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F6C0 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F6C0 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F6C0 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F6C0 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F6C0 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F6C0 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6C0 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6C0                            
0000F6C0                            		include	"_incObj\sub ObjectFall.asm"
0000F6C0                            ; ---------------------------------------------------------------------------
0000F6C0                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F6C0                            ; ---------------------------------------------------------------------------
0000F6C0                            
0000F6C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6C0                            
0000F6C0                            
0000F6C0                            ObjectFall:
0000F6C0 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F6C6 6700                       		beq.s	@donothing
0000F6C8 3028 0010                  		move.w	obVelX(a0),d0
0000F6CC 48C0                       		ext.l	d0
0000F6CE E188                       		lsl.l	#8,d0
0000F6D0 D1A8 0008                  		add.l	d0,obX(a0)
0000F6D4 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F6DA 6F00                               ble.s   @skipline       ; if yes, branch
0000F6DC 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F6E2                                @skipline:		
0000F6E2 3028 0012                  		move.w	obVelY(a0),d0
0000F6E6 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F6EC 48C0                       		ext.l	d0
0000F6EE E188                       		lsl.l	#8,d0
0000F6F0 D1A8 000C                  		add.l	d0,obY(a0)
0000F6F4 4E75                       		rts	
0000F6F6                            	
0000F6F6                            	@donothing:
0000F6F6 4E75                       		rts
0000F6F8                            
0000F6F8                            ; End of function ObjectFall
0000F6F8                            ; End of function ObjectFall
0000F6F8                            		include	"_incObj\sub SpeedToPos.asm"
0000F6F8                            ; ---------------------------------------------------------------------------
0000F6F8                            ; Subroutine translating object	speed to update	object position
0000F6F8                            ; ---------------------------------------------------------------------------
0000F6F8                            
0000F6F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6F8                            
0000F6F8                            
0000F6F8                            SpeedToPos:
0000F6F8 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F6FE E188                       		lsl.l	#8,d0
0000F700 D1A8 0008                  		add.l	d0,obX(a0)
0000F704 E18A                       		lsl.l	#8,d2
0000F706 D5A8 000C                  		add.l	d2,obY(a0)
0000F70A 4E75                       		rts
0000F70C                            ; End of function SpeedToPos
0000F70C                            ; End of function SpeedToPos
0000F70C                            		include	"_incObj\sub DisplaySprite.asm"
0000F70C                            ; ---------------------------------------------------------------------------
0000F70C                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F70C                            ; ---------------------------------------------------------------------------
0000F70C                            
0000F70C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F70C                            
0000F70C                            
0000F70C                            DisplaySprite:
0000F70C 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F710 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F714 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F718 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F71A 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F71C D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F71E 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F720                            
0000F720                                DSpr_Full:
0000F720 4E75                               rts    
0000F722                            
0000F722                            ; End of function DisplaySprite
0000F722                            
0000F722                            
0000F722                            ; ---------------------------------------------------------------------------
0000F722                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F722                            ; ---------------------------------------------------------------------------
0000F722                            
0000F722                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F722                            
0000F722                            
0000F722                            DisplaySprite1:
0000F722 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F726 D4E9 0018                          adda.w  obpriority(a1),a2
0000F72A 0C52 007E                          cmpi.w    #$7E,(a2)
0000F72E 6400                               bcc.s    DSpr1_Full
0000F730 5452                               addq.w    #2,(a2)
0000F732 D4D2                               adda.w    (a2),a2
0000F734 3489                               move.w    a1,(a2)
0000F736                            
0000F736                                DSpr1_Full:
0000F736 4E75                               rts    
0000F738                            
0000F738                            ; End of function DisplaySprite1
0000F738                            
0000F738                            ; ---------------------------------------------------------------------------
0000F738                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F738                            ; and d0 is already (priority/2)&$380
0000F738                            ; ---------------------------------------------------------------------------
0000F738                            
0000F738                            ; loc_16530:
0000F738                            DisplaySprite2:
0000F738 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F73C D2C0                           adda.w    d0,a1
0000F73E 0C51 007E                      cmpi.w    #$7E,(a1)
0000F742 6400                           bhs.s    return_16542
0000F744 5451                           addq.w    #2,(a1)
0000F746 D2D1                           adda.w    (a1),a1
0000F748 3288                           move.w    a0,(a1)
0000F74A                            
0000F74A                            return_16542:
0000F74A 4E75                           rts
0000F74A 4E75                           rts
0000F74C                            		include	"_incObj\sub DeleteObject.asm"
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            ; Subroutine to	delete an object
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            
0000F74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F74C                            
0000F74C                            
0000F74C                            DeleteObject:
0000F74C 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F74E                            
0000F74E                            DeleteChild:				; child objects are already in (a1)
0000F74E 7200                       		moveq	#0,d1
0000F750 700F                       		moveq	#$F,d0
0000F752                            
0000F752                            	DelObj_Loop:
0000F752 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F754 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F758 4E75                       		rts	
0000F75A                            
0000F75A                            ; End of function DeleteObject
0000F75A                            ; End of function DeleteObject
0000F75A                            
0000F75A                            ; ===========================================================================
0000F75A 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F75E 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F762 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F766 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F76A                            ; ---------------------------------------------------------------------------
0000F76A                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F76A                            ; ---------------------------------------------------------------------------
0000F76A                            
0000F76A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F76A                            
0000F76A                            
0000F76A                            BuildSprites:
0000F76A 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F76E 7A00                       		moveq	#0,d5
0000F770 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F774 7E07                       		moveq	#7,d7
0000F776                            
0000F776                            	@priorityLoop:
0000F776 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F778 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F77C 7C02                       		moveq	#2,d6
0000F77E                            
0000F77E                            	@objectLoop:
0000F77E 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F782 4A10                       		tst.b	(a0)		; if null, branch
0000F784 6700 0000                  		beq.w	@skipObject
0000F788 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F78E                            
0000F78E 1028 0001                  		move.b	obRender(a0),d0
0000F792 1800                       		move.b	d0,d4
0000F794 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000F798 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000F79A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F79E                            	; check object bounds
0000F79E 7000                       		moveq	#0,d0
0000F7A0 1028 0014                  		move.b	obActWid(a0),d0
0000F7A4 3628 0008                  		move.w	obX(a0),d3
0000F7A8 9651                       		sub.w	(a1),d3
0000F7AA 3203                       		move.w	d3,d1
0000F7AC D240                       		add.w	d0,d1
0000F7AE 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000F7B2 3203                       		move.w	d3,d1
0000F7B4 9240                       		sub.w	d0,d1
0000F7B6 0C41 0140                  		cmpi.w	#320,d1
0000F7BA 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000F7BC 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000F7C0                            
0000F7C0 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000F7C4 6700                       		beq.s	@assumeHeight	; if yes, branch
0000F7C6 7000                       		moveq	#0,d0
0000F7C8 1028 0016                  		move.b	obHeight(a0),d0
0000F7CC 3428 000C                  		move.w	obY(a0),d2
0000F7D0 9469 0004                  		sub.w	4(a1),d2
0000F7D4 3202                       		move.w	d2,d1
0000F7D6 D240                       		add.w	d0,d1
0000F7D8 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000F7DA 3202                       		move.w	d2,d1
0000F7DC 9240                       		sub.w	d0,d1
0000F7DE 0C41 00E0                  		cmpi.w	#224,d1
0000F7E2 6C00                       		bge.s	@skipObject
0000F7E4 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000F7E8 6000                       		bra.s	@drawObject
0000F7EA                            ; ===========================================================================
0000F7EA                            
0000F7EA                            	@screenCoords:
0000F7EA 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000F7EE 3628 0008                  		move.w	obX(a0),d3
0000F7F2 6000                       		bra.s	@drawObject
0000F7F4                            ; ===========================================================================
0000F7F4                            
0000F7F4                            	@assumeHeight:
0000F7F4 3428 000C                  		move.w	obY(a0),d2
0000F7F8 9469 0004                  		sub.w	obMap(a1),d2
0000F7FC 0642 0080                  		addi.w	#$80,d2
0000F800 0C42 0060                  		cmpi.w	#$60,d2
0000F804 6500                       		blo.s	@skipObject
0000F806 0C42 0180                  		cmpi.w	#$180,d2
0000F80A 6400                       		bhs.s	@skipObject
0000F80C                            
0000F80C                            	@drawObject:
0000F80C 2268 0004                  		movea.l	obMap(a0),a1
0000F810 7200                       		moveq	#0,d1
0000F812 0804 0005                  		btst	#5,d4
0000F816 6600                       		bne.s	@drawFrame
0000F818 1228 001A                  		move.b	$1A(a0),d1
0000F81C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F81E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F822 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F824 1219                       		move.b	(a1)+,d1
0000F826 5301                       		subq.b	#1,d1
0000F828 6B00                       		bmi.s	@setVisible
0000F82A                            
0000F82A                            	@drawFrame:
0000F82A 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000F82E                            
0000F82E                            	@setVisible:
0000F82E 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000F834                            
0000F834                            	@skipObject:
0000F834 5446                       		addq.w	#2,d6
0000F836 5554                       		subq.w	#2,(a4)			; number of objects left
0000F838 6600 FF44                  		bne.w	@objectLoop
0000F83C                            
0000F83C                            	@nextPriority:
0000F83C 49EC 0080                  		lea	$80(a4),a4
0000F840 51CF FF34                  		dbf	d7,@priorityLoop
0000F844 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000F848 0C05 0050                  		cmpi.b	#$50,d5
0000F84C 6700                       		beq.s	@spriteLimit
0000F84E 24BC 0000 0000             		move.l	#0,(a2)
0000F854 4E75                       		rts	
0000F856                            ; ===========================================================================
0000F856                            
0000F856                            	@spriteLimit:
0000F856 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000F85C 4E75                       		rts	
0000F85E                            ; End of function BuildSprites
0000F85E                            
0000F85E                            
0000F85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F85E                            
0000F85E                            
0000F85E                            BuildSpr_Draw:
0000F85E 3668 0002                  		movea.w	obGfx(a0),a3
0000F862 0804 0000                  		btst	#0,d4
0000F866 6600                       		bne.s	BuildSpr_FlipX
0000F868 0804 0001                  		btst	#1,d4
0000F86C 6600 0000                  		bne.w	BuildSpr_FlipY
0000F870                            ; End of function BuildSpr_Draw
0000F870                            
0000F870                            
0000F870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F870                            
0000F870                            
0000F870                            BuildSpr_Normal:
0000F870 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F874 6700                       		beq.s	@return
0000F876 1019                       		move.b	(a1)+,d0	; get y-offset
0000F878 4880                       		ext.w	d0
0000F87A D042                       		add.w	d2,d0		; add y-position
0000F87C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F87E 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000F880 5205                       		addq.b	#1,d5		; increase sprite counter
0000F882 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000F884 1019                       		move.b	(a1)+,d0	; get art tile
0000F886 E148                       		lsl.w	#8,d0
0000F888 1019                       		move.b	(a1)+,d0
0000F88A D04B                       		add.w	a3,d0		; add art tile offset
0000F88C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F88E 1019                       		move.b	(a1)+,d0	; get x-offset
0000F890 4880                       		ext.w	d0
0000F892 D043                       		add.w	d3,d0		; add x-position
0000F894 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F898 6600                       		bne.s	@writeX
0000F89A 5240                       		addq.w	#1,d0
0000F89C                            
0000F89C                            	@writeX:
0000F89C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F89E 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000F8A2                            
0000F8A2                            	@return:
0000F8A2 4E75                       		rts	
0000F8A4                            ; End of function BuildSpr_Normal
0000F8A4                            
0000F8A4                            ; ===========================================================================
0000F8A4                            
0000F8A4                            BuildSpr_FlipX:
0000F8A4 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000F8A8 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000F8AC                            
0000F8AC                            	@loop:
0000F8AC 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8B0 6700                       		beq.s	@return
0000F8B2 1019                       		move.b	(a1)+,d0	; y position
0000F8B4 4880                       		ext.w	d0
0000F8B6 D042                       		add.w	d2,d0
0000F8B8 34C0                       		move.w	d0,(a2)+
0000F8BA 1819                       		move.b	(a1)+,d4	; size
0000F8BC 14C4                       		move.b	d4,(a2)+	
0000F8BE 5205                       		addq.b	#1,d5		; link
0000F8C0 14C5                       		move.b	d5,(a2)+
0000F8C2 1019                       		move.b	(a1)+,d0	; art tile
0000F8C4 E148                       		lsl.w	#8,d0
0000F8C6 1019                       		move.b	(a1)+,d0	
0000F8C8 D04B                       		add.w	a3,d0
0000F8CA 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000F8CE 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8D0 1019                       		move.b	(a1)+,d0	; get x-offset
0000F8D2 4880                       		ext.w	d0
0000F8D4 4440                       		neg.w	d0			; negate it
0000F8D6 D804                       		add.b	d4,d4		; calculate flipped position by size
0000F8D8 0244 0018                  		andi.w	#$18,d4
0000F8DC 5044                       		addq.w	#8,d4
0000F8DE 9044                       		sub.w	d4,d0
0000F8E0 D043                       		add.w	d3,d0
0000F8E2 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F8E6 6600                       		bne.s	@writeX
0000F8E8 5240                       		addq.w	#1,d0
0000F8EA                            
0000F8EA                            	@writeX:
0000F8EA 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8EC 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000F8F0                            
0000F8F0                            	@return:
0000F8F0 4E75                       		rts	
0000F8F2                            ; ===========================================================================
0000F8F2                            
0000F8F2                            BuildSpr_FlipY:
0000F8F2 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8F6 6700                       		beq.s	@return
0000F8F8 1019                       		move.b	(a1)+,d0	; get y-offset
0000F8FA 1811                       		move.b	(a1),d4		; get size
0000F8FC 4880                       		ext.w	d0
0000F8FE 4440                       		neg.w	d0		; negate y-offset
0000F900 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000F902 0244 0018                  		andi.w	#$18,d4
0000F906 5044                       		addq.w	#8,d4
0000F908 9044                       		sub.w	d4,d0
0000F90A D042                       		add.w	d2,d0	; add y-position
0000F90C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F90E 14D9                       		move.b	(a1)+,(a2)+	; size
0000F910 5205                       		addq.b	#1,d5
0000F912 14C5                       		move.b	d5,(a2)+	; link
0000F914 1019                       		move.b	(a1)+,d0	; art tile
0000F916 E148                       		lsl.w	#8,d0
0000F918 1019                       		move.b	(a1)+,d0
0000F91A D04B                       		add.w	a3,d0
0000F91C 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000F920 34C0                       		move.w	d0,(a2)+
0000F922 1019                       		move.b	(a1)+,d0	; x-position
0000F924 4880                       		ext.w	d0
0000F926 D043                       		add.w	d3,d0
0000F928 0240 01FF                  		andi.w	#$1FF,d0
0000F92C 6600                       		bne.s	@writeX
0000F92E 5240                       		addq.w	#1,d0
0000F930                            
0000F930                            	@writeX:
0000F930 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F932 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000F936                            
0000F936                            	@return:
0000F936 4E75                       		rts	
0000F938                            ; ===========================================================================
0000F938                            
0000F938                            BuildSpr_FlipXY:
0000F938 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F93C 6700                       		beq.s	@return
0000F93E 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000F940 1811                       		move.b	(a1),d4
0000F942 4880                       		ext.w	d0
0000F944 4440                       		neg.w	d0
0000F946 E70C                       		lsl.b	#3,d4
0000F948 0244 0018                  		andi.w	#$18,d4
0000F94C 5044                       		addq.w	#8,d4
0000F94E 9044                       		sub.w	d4,d0
0000F950 D042                       		add.w	d2,d0
0000F952 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F954 1819                       		move.b	(a1)+,d4	; size
0000F956 14C4                       		move.b	d4,(a2)+	; link
0000F958 5205                       		addq.b	#1,d5
0000F95A 14C5                       		move.b	d5,(a2)+	; art tile
0000F95C 1019                       		move.b	(a1)+,d0
0000F95E E148                       		lsl.w	#8,d0
0000F960 1019                       		move.b	(a1)+,d0
0000F962 D04B                       		add.w	a3,d0
0000F964 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000F968 34C0                       		move.w	d0,(a2)+
0000F96A 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000F96C 4880                       		ext.w	d0
0000F96E 4440                       		neg.w	d0
0000F970 D804                       		add.b	d4,d4
0000F972 0244 0018                  		andi.w	#$18,d4
0000F976 5044                       		addq.w	#8,d4
0000F978 9044                       		sub.w	d4,d0
0000F97A D043                       		add.w	d3,d0
0000F97C 0240 01FF                  		andi.w	#$1FF,d0
0000F980 6600                       		bne.s	@writeX
0000F982 5240                       		addq.w	#1,d0
0000F984                            
0000F984                            	@writeX:
0000F984 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F986 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000F98A                            
0000F98A                            	@return:
0000F98A 4E75                       		rts	
0000F98C                            
0000F98C                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F98C                            ; ---------------------------------------------------------------------------
0000F98C                            ; Subroutine to	check if an object is off screen
0000F98C                            
0000F98C                            ; output:
0000F98C                            ;	d0 = flag set if object is off screen
0000F98C                            ; ---------------------------------------------------------------------------
0000F98C                            
0000F98C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F98C                            
0000F98C                            
0000F98C                            ChkObjectVisible:
0000F98C 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F990 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F994 6B00                       		bmi.s	@offscreen
0000F996 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F99A 6C00                       		bge.s	@offscreen	; if not, branch
0000F99C                            
0000F99C 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F9A0 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F9A4 6B00                       		bmi.s	@offscreen
0000F9A6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F9AA 6C00                       		bge.s	@offscreen	; if not, branch
0000F9AC                            
0000F9AC 7000                       		moveq	#0,d0		; set flag to 0
0000F9AE 4E75                       		rts	
0000F9B0                            
0000F9B0                            	@offscreen:
0000F9B0 7001                       		moveq	#1,d0		; set flag to 1
0000F9B2 4E75                       		rts	
0000F9B4                            ; End of function ChkObjectVisible
0000F9B4                            
0000F9B4                            ; ---------------------------------------------------------------------------
0000F9B4                            ; Subroutine to	check if an object is off screen
0000F9B4                            ; More precise than above subroutine, taking width into account
0000F9B4                            
0000F9B4                            ; output:
0000F9B4                            ;	d0 = flag set if object is off screen
0000F9B4                            ; ---------------------------------------------------------------------------
0000F9B4                            
0000F9B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9B4                            
0000F9B4                            
0000F9B4                            ChkPartiallyVisible:
0000F9B4 7200                       		moveq	#0,d1
0000F9B6 1228 0014                  		move.b	obActWid(a0),d1
0000F9BA 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F9BE 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F9C2 D041                       		add.w	d1,d0		; add object width
0000F9C4 6B00                       		bmi.s	@offscreen2
0000F9C6 D241                       		add.w	d1,d1
0000F9C8 9041                       		sub.w	d1,d0
0000F9CA 0C40 0140                  		cmpi.w	#320,d0
0000F9CE 6C00                       		bge.s	@offscreen2
0000F9D0                            
0000F9D0 3228 000C                  		move.w	obY(a0),d1
0000F9D4 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F9D8 6B00                       		bmi.s	@offscreen2
0000F9DA 0C41 00E0                  		cmpi.w	#224,d1
0000F9DE 6C00                       		bge.s	@offscreen2
0000F9E0                            
0000F9E0 7000                       		moveq	#0,d0
0000F9E2 4E75                       		rts	
0000F9E4                            
0000F9E4                            	@offscreen2:
0000F9E4 7001                       		moveq	#1,d0
0000F9E6 4E75                       		rts	
0000F9E8                            ; End of function ChkPartiallyVisible
0000F9E8                            ; End of function ChkPartiallyVisible
0000F9E8                            
0000F9E8                            ; ---------------------------------------------------------------------------
0000F9E8                            ; Subroutine to	load a level's objects
0000F9E8                            ; ---------------------------------------------------------------------------
0000F9E8                            
0000F9E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9E8                            
0000F9E8                            
0000F9E8                            ObjPosLoad:
0000F9E8 7000                       		moveq	#0,d0
0000F9EA 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F9EE 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F9F2 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F9F6                            ; End of function ObjPosLoad
0000F9F6                            
0000F9F6                            ; ===========================================================================
0000F9F6 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F9F8 0000                       		dc.w OPL_Next-OPL_Index
0000F9FA                            ; ===========================================================================
0000F9FA                            
0000F9FA                            OPL_Main:
0000F9FA 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F9FE 3038 FE10                  		move.w	(v_zone).w,d0
0000FA02 ED08                       		lsl.b	#6,d0
0000FA04 E848                       		lsr.w	#4,d0
0000FA06 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FA0C 2248                       		movea.l	a0,a1
0000FA0E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FA12 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA16 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA1A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FA1E 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FA22 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FA26 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA2A 34FC 0101                  		move.w	#$101,(a2)+
0000FA2E 303C 005E                  		move.w	#$5E,d0
0000FA32                            
0000FA32                            OPL_ClrList:
0000FA32 429A                       		clr.l	(a2)+
0000FA34 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FA38                            
0000FA38 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA3C 7400                       		moveq	#0,d2
0000FA3E 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA42 0446 0080                  		subi.w	#$80,d6
0000FA46 6400                       		bhs.s	loc_D93C
0000FA48 7C00                       		moveq	#0,d6
0000FA4A                            
0000FA4A                            loc_D93C:
0000FA4A 0246 FF80                  		andi.w	#$FF80,d6
0000FA4E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FA52                            
0000FA52                            loc_D944:
0000FA52 BC50                       		cmp.w	(a0),d6
0000FA54 6300                       		bls.s	loc_D956
0000FA56 4A28 0004                  		tst.b	4(a0)
0000FA5A 6A00                       		bpl.s	loc_D952
0000FA5C 1412                       		move.b	(a2),d2
0000FA5E 5212                       		addq.b	#1,(a2)
0000FA60                            
0000FA60                            loc_D952:
0000FA60 5C48                       		addq.w	#6,a0
0000FA62 60EE                       		bra.s	loc_D944
0000FA64                            ; ===========================================================================
0000FA64                            
0000FA64                            loc_D956:
0000FA64 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA68 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FA6C 0446 0080                  		subi.w	#$80,d6
0000FA70 6500                       		blo.s	loc_D976
0000FA72                            
0000FA72                            loc_D964:
0000FA72 BC50                       		cmp.w	(a0),d6
0000FA74 6300                       		bls.s	loc_D976
0000FA76 4A28 0004                  		tst.b	4(a0)
0000FA7A 6A00                       		bpl.s	loc_D972
0000FA7C 522A 0001                  		addq.b	#1,1(a2)
0000FA80                            
0000FA80                            loc_D972:
0000FA80 5C48                       		addq.w	#6,a0
0000FA82 60EE                       		bra.s	loc_D964
0000FA84                            ; ===========================================================================
0000FA84                            
0000FA84                            loc_D976:
0000FA84 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA88 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FA8E                            
0000FA8E                            OPL_Next:
0000FA8E 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA92 7400                       		moveq	#0,d2
0000FA94 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA98 0246 FF80                  		andi.w	#$FF80,d6
0000FA9C BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FAA0 6700 0000                  		beq.w	locret_DA3A
0000FAA4 6C00                       		bge.s	loc_D9F6
0000FAA6 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FAAA 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FAAE 0446 0080                  		subi.w	#$80,d6
0000FAB2 6500                       		blo.s	loc_D9D2
0000FAB4                            
0000FAB4                            loc_D9A6:
0000FAB4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FAB8 6C00                       		bge.s	loc_D9D2
0000FABA 5D48                       		subq.w	#6,a0
0000FABC 4A28 0004                  		tst.b	4(a0)
0000FAC0 6A00                       		bpl.s	loc_D9BC
0000FAC2 532A 0001                  		subq.b	#1,1(a2)
0000FAC6 142A 0001                  		move.b	1(a2),d2
0000FACA                            
0000FACA                            loc_D9BC:
0000FACA 6100 0000                  		bsr.w	loc_DA3C
0000FACE 6600                       		bne.s	loc_D9C6
0000FAD0 5D48                       		subq.w	#6,a0
0000FAD2 60E0                       		bra.s	loc_D9A6
0000FAD4                            ; ===========================================================================
0000FAD4                            
0000FAD4                            loc_D9C6:
0000FAD4 4A28 0004                  		tst.b	4(a0)
0000FAD8 6A00                       		bpl.s	loc_D9D0
0000FADA 522A 0001                  		addq.b	#1,1(a2)
0000FADE                            
0000FADE                            loc_D9D0:
0000FADE 5C48                       		addq.w	#6,a0
0000FAE0                            
0000FAE0                            loc_D9D2:
0000FAE0 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FAE4 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FAE8 0646 0300                  		addi.w	#$300,d6
0000FAEC                            
0000FAEC                            loc_D9DE:
0000FAEC BC68 FFFA                  		cmp.w	-6(a0),d6
0000FAF0 6E00                       		bgt.s	loc_D9F0
0000FAF2 4A28 FFFE                  		tst.b	-2(a0)
0000FAF6 6A00                       		bpl.s	loc_D9EC
0000FAF8 5312                       		subq.b	#1,(a2)
0000FAFA                            
0000FAFA                            loc_D9EC:
0000FAFA 5D48                       		subq.w	#6,a0
0000FAFC 60EE                       		bra.s	loc_D9DE
0000FAFE                            ; ===========================================================================
0000FAFE                            
0000FAFE                            loc_D9F0:
0000FAFE 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB02 4E75                       		rts	
0000FB04                            ; ===========================================================================
0000FB04                            
0000FB04                            loc_D9F6:
0000FB04 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FB08 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FB0C 0646 0280                  		addi.w	#$280,d6
0000FB10                            
0000FB10                            loc_DA02:
0000FB10 BC50                       		cmp.w	(a0),d6
0000FB12 6300                       		bls.s	loc_DA16
0000FB14 4A28 0004                  		tst.b	4(a0)
0000FB18 6A00                       		bpl.s	loc_DA10
0000FB1A 1412                       		move.b	(a2),d2
0000FB1C 5212                       		addq.b	#1,(a2)
0000FB1E                            
0000FB1E                            loc_DA10:
0000FB1E 6100 0000                  		bsr.w	loc_DA3C
0000FB22 67EC                       		beq.s	loc_DA02
0000FB24                            
0000FB24                            loc_DA16:
0000FB24 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB28 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FB2C 0446 0300                  		subi.w	#$300,d6
0000FB30 6500                       		blo.s	loc_DA36
0000FB32                            
0000FB32                            loc_DA24:
0000FB32 BC50                       		cmp.w	(a0),d6
0000FB34 6300                       		bls.s	loc_DA36
0000FB36 4A28 0004                  		tst.b	4(a0)
0000FB3A 6A00                       		bpl.s	loc_DA32
0000FB3C 522A 0001                  		addq.b	#1,1(a2)
0000FB40                            
0000FB40                            loc_DA32:
0000FB40 5C48                       		addq.w	#6,a0
0000FB42 60EE                       		bra.s	loc_DA24
0000FB44                            ; ===========================================================================
0000FB44                            
0000FB44                            loc_DA36:
0000FB44 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB48                            
0000FB48                            locret_DA3A:
0000FB48 4E75                       		rts	
0000FB4A                            ; ===========================================================================
0000FB4A                            
0000FB4A                            loc_DA3C:
0000FB4A 4A28 0004                  		tst.b	4(a0)
0000FB4E 6A00                       		bpl.s	OPL_MakeItem
0000FB50 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FB56 6700                       		beq.s	OPL_MakeItem
0000FB58 5C48                       		addq.w	#6,a0
0000FB5A 7000                       		moveq	#0,d0
0000FB5C 4E75                       		rts	
0000FB5E                            ; ===========================================================================
0000FB5E                            
0000FB5E                            OPL_MakeItem:
0000FB5E 6100 0000                  		bsr.w	FindFreeObj
0000FB62 6600                       		bne.s	locret_DA8A
0000FB64 3358 0008                  		move.w	(a0)+,obX(a1)
0000FB68 3018                       		move.w	(a0)+,d0
0000FB6A 3200                       		move.w	d0,d1
0000FB6C 0240 0FFF                  		andi.w	#$FFF,d0
0000FB70 3340 000C                  		move.w	d0,obY(a1)
0000FB74 E559                       		rol.w	#2,d1
0000FB76 0201 0003                  		andi.b	#3,d1
0000FB7A 1341 0001                  		move.b	d1,obRender(a1)
0000FB7E 1341 0022                  		move.b	d1,obStatus(a1)
0000FB82 1018                       		move.b	(a0)+,d0
0000FB84 6A00                       		bpl.s	loc_DA80
0000FB86 0200 007F                  		andi.b	#$7F,d0
0000FB8A 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FB8E                            
0000FB8E                            loc_DA80:
0000FB8E 1280                       		move.b	d0,0(a1)
0000FB90 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FB94 7000                       		moveq	#0,d0
0000FB96                            
0000FB96                            locret_DA8A:
0000FB96 4E75                       		rts	
0000FB98                            
0000FB98                            		include	"_incObj\sub FindFreeObj.asm"
0000FB98                            ; ---------------------------------------------------------------------------
0000FB98                            ; Subroutine to find a free object space
0000FB98                            
0000FB98                            ; output:
0000FB98                            ;	a1 = free position in object RAM
0000FB98                            ; ---------------------------------------------------------------------------
0000FB98                            
0000FB98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB98                            
0000FB98                            
0000FB98                            FindFreeObj:
0000FB98 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FB9C 303C 005F                  		move.w	#$5F,d0
0000FBA0                            
0000FBA0                            	FFree_Loop:
0000FBA0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FBA2 6700                       		beq.s	FFree_Found	; if yes, branch
0000FBA4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FBA8 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FBAC                            
0000FBAC                            	FFree_Found:
0000FBAC 4E75                       		rts	
0000FBAE                            
0000FBAE                            ; End of function FindFreeObj
0000FBAE                            
0000FBAE                            
0000FBAE                            ; ---------------------------------------------------------------------------
0000FBAE                            ; Subroutine to find a free object space AFTER the current one
0000FBAE                            
0000FBAE                            ; output:
0000FBAE                            ;	a1 = free position in object RAM
0000FBAE                            ; ---------------------------------------------------------------------------
0000FBAE                            
0000FBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBAE                            
0000FBAE                            
0000FBAE                            FindNextFreeObj:
0000FBAE 2248                       		movea.l	a0,a1
0000FBB0 303C F000                  		move.w	#$F000,d0
0000FBB4 9048                       		sub.w	a0,d0
0000FBB6 EC48                       		lsr.w	#6,d0
0000FBB8 5340                       		subq.w	#1,d0
0000FBBA 6500                       		bcs.s	NFree_Found
0000FBBC                            
0000FBBC                            	NFree_Loop:
0000FBBC 4A11                       		tst.b	(a1)
0000FBBE 6700                       		beq.s	NFree_Found
0000FBC0 43E9 0040                  		lea	$40(a1),a1
0000FBC4 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FBC8                            
0000FBC8                            	NFree_Found:
0000FBC8 4E75                       		rts	
0000FBCA                            
0000FBCA                            ; End of function FindNextFreeObj
0000FBCA                            ; End of function FindNextFreeObj
0000FBCA                            		include	"_incObj\41 Springs.asm"
0000FBCA                            ; ---------------------------------------------------------------------------
0000FBCA                            ; Object 41 - springs
0000FBCA                            ; ---------------------------------------------------------------------------
0000FBCA                            
0000FBCA                            Springs:
0000FBCA 7000                       		moveq	#0,d0
0000FBCC 1028 0024                  		move.b	obRoutine(a0),d0
0000FBD0 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FBD4 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FBD8 6100 FB32                  		bsr.w	DisplaySprite
0000FBFA 4E75                       		rts	
0000FBFC                            ; ===========================================================================
0000FBFC 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FBFE 0000                       		dc.w Spring_Up-Spring_Index
0000FC00 0000                       		dc.w Spring_AniUp-Spring_Index
0000FC02 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FC04 0000                       		dc.w Spring_LR-Spring_Index
0000FC06 0000                       		dc.w Spring_AniLR-Spring_Index
0000FC08 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FC0A 0000                       		dc.w Spring_Dwn-Spring_Index
0000FC0C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FC0E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FC10                            
0000FC10 =00000030                  spring_pow:	equ $30			; power of current spring
0000FC10                            
0000FC10 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FC12 F600                       		dc.w -$A00		; power	of yellow spring
0000FC14                            ; ===========================================================================
0000FC14                            
0000FC14                            Spring_Main:	; Routine 0
0000FC14 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC18 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FC20 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FC26 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FC2C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FC32 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FC38 1028 0028                  		move.b	obSubtype(a0),d0
0000FC3C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FC40 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FC42                            
0000FC42 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FC48 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FC4E 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FC54 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FC5A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FC60                            
0000FC60                            	Spring_NotLR:
0000FC60 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FC64 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FC66                            
0000FC66 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FC6C 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FC72                            
0000FC72                            	Spring_NotDwn:
0000FC72 0800 0001                  		btst	#1,d0
0000FC76 6700                       		beq.s	loc_DB72
0000FC78 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FC7E                            
0000FC7E                            loc_DB72:
0000FC7E 0240 000F                  		andi.w	#$F,d0
0000FC82 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FC88 4E75                       		rts	
0000FC8A                            ; ===========================================================================
0000FC8A                            
0000FC8A                            Spring_Up:	; Routine 2
0000FC8A 323C 001B                  		move.w	#$1B,d1
0000FC8E 343C 0008                  		move.w	#8,d2
0000FC92 363C 0010                  		move.w	#$10,d3
0000FC96 3828 0008                  		move.w	obX(a0),d4
0000FC9A 6100 0000                  		bsr.w	SolidObject
0000FC9E 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FCA2 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FCA4 4E75                       		rts	
0000FCA6                            ; ===========================================================================
0000FCA6                            
0000FCA6                            Spring_BounceUp:
0000FCA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FCAA 5069 000C                  		addq.w	#8,obY(a1)
0000FCAE 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FCB4 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FCBA 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FCC0 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FCC6 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FCCC 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FCD2 4228 0025                  		clr.b	obSolid(a0)
0000FCE0                            
0000FCE0                            Spring_AniUp:	; Routine 4
0000FCE0 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FCE6 6000 CB0C                  		bra.w	AnimateSprite
0000FCEA                            ; ===========================================================================
0000FCEA                            
0000FCEA                            Spring_ResetUp:	; Routine 6
0000FCEA 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FCF0 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FCF4 4E75                       		rts	
0000FCF6                            ; ===========================================================================
0000FCF6                            
0000FCF6                            Spring_LR:	; Routine 8
0000FCF6 323C 0013                  		move.w	#$13,d1
0000FCFA 343C 000E                  		move.w	#$E,d2
0000FCFE 363C 000F                  		move.w	#$F,d3
0000FD02 3828 0008                  		move.w	obX(a0),d4
0000FD06 6100 0000                  		bsr.w	SolidObject
0000FD0A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FD10 6600                       		bne.s	loc_DC0C
0000FD12 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FD18                            
0000FD18                            loc_DC0C:
0000FD18 0828 0005 0022             		btst	#5,obStatus(a0)
0000FD1E 6600                       		bne.s	Spring_BounceLR
0000FD20 4E75                       		rts	
0000FD22                            ; ===========================================================================
0000FD22                            
0000FD22                            Spring_BounceLR:
0000FD22 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD26 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FD2C 5069 0008                  		addq.w	#8,obX(a1)
0000FD30 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FD36 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FD38 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FD3E 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FD42                            
0000FD42                            	Spring_Flipped:
0000FD42 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FD48 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FD4E 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FD54 0829 0002 0022             		btst	#2,obStatus(a1)
0000FD5A 6600                       		bne.s	loc_DC56
0000FD5C 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FD62                            
0000FD62                            loc_DC56:
0000FD62 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FD68 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FD78                            
0000FD78                            Spring_AniLR:	; Routine $A
0000FD78 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FD7E 6000 CA74                  		bra.w	AnimateSprite
0000FD82                            ; ===========================================================================
0000FD82                            
0000FD82                            Spring_ResetLR:	; Routine $C
0000FD82 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FD88 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FD8C 4E75                       		rts	
0000FD8E                            ; ===========================================================================
0000FD8E                            
0000FD8E                            Spring_Dwn:	; Routine $E
0000FD8E 323C 001B                  		move.w	#$1B,d1
0000FD92 343C 0008                  		move.w	#8,d2
0000FD96 363C 0010                  		move.w	#$10,d3
0000FD9A 3828 0008                  		move.w	obX(a0),d4
0000FD9E 6100 0000                  		bsr.w	SolidObject
0000FDA2 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FDA8 6600                       		bne.s	loc_DCA4
0000FDAA 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FDB0                            
0000FDB0                            loc_DCA4:
0000FDB0 4A28 0025                  		tst.b	obSolid(a0)
0000FDB4 6600                       		bne.s	locret_DCAE
0000FDB6 4A44                       		tst.w	d4
0000FDB8 6B00                       		bmi.s	Spring_BounceDwn
0000FDBA                            
0000FDBA                            locret_DCAE:
0000FDBA 4E75                       		rts	
0000FDBC                            ; ===========================================================================
0000FDBC                            
0000FDBC                            Spring_BounceDwn:
0000FDBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDC0 5169 000C                  		subq.w	#8,obY(a1)
0000FDC4 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FDCA 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FDCE 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FDD4 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FDDA 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FDE0 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FDE6 4228 0025                  		clr.b	obSolid(a0)
0000FDF4                            
0000FDF4                            Spring_AniDwn:	; Routine $10
0000FDF4 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FDFA 6000 C9F8                  		bra.w	AnimateSprite
0000FDFE                            ; ===========================================================================
0000FDFE                            
0000FDFE                            Spring_ResetDwn:
0000FDFE                            		; Routine $12
0000FDFE 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FE04 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FE08 4E75                       		rts	
0000FE08 4E75                       		rts	
0000FE0A                            		include	"_anim\Springs.asm"
0000FE0A                            ; ---------------------------------------------------------------------------
0000FE0A                            ; Animation script - springs
0000FE0A                            ; ---------------------------------------------------------------------------
0000FE0A 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FE0C 0000                       		dc.w byte_DD0E-Ani_Spring
0000FE0E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FE1A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FE26                            		even
0000FE26                            		even
0000FE26                            Map_Spring:	include	"_maps\Springs.asm"
0000FE26                            ; ---------------------------------------------------------------------------
0000FE26                            ; Sprite mappings - springs
0000FE26                            ; ---------------------------------------------------------------------------
0000FE26                            Map_Spring_internal:
0000FE26 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FE28 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FE2A 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FE2C 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FE2E 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FE30 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FE32 02                         M_Spg_Up:	dc.b 2			; facing up
0000FE33 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FE38 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FE3D 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FE3E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FE43 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FE44 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FE49 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FE4E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FE53 01                         M_Spg_Left:	dc.b 1			; facing left
0000FE54 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FE59 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FE5A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FE5F 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FE60 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FE65 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FE6A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FE6F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FE74                            		even
0000FE74                            		even
0000FE74                            
0000FE74                            		include	"_incObj\42 Newtron.asm"
0000FE74                            ; ---------------------------------------------------------------------------
0000FE74                            ; Object 42 - Newtron enemy (GHZ)
0000FE74                            ; ---------------------------------------------------------------------------
0000FE74                            
0000FE74                            Newtron:
0000FE74 7000                       		moveq	#0,d0
0000FE76 1028 0024                  		move.b	obRoutine(a0),d0
0000FE7A 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FE7E 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FE82                            ; ===========================================================================
0000FE82 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FE84 0000                       		dc.w Newt_Action-Newt_Index
0000FE86 0000                       		dc.w Newt_Delete-Newt_Index
0000FE88                            ; ===========================================================================
0000FE88                            
0000FE88                            Newt_Main:	; Routine 0
0000FE88 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE8C 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FE94 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FE9A 117C 0004 0001             		move.b	#4,obRender(a0)
0000FEA0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FEA6 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FEAC 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FEB2 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FEB8                            
0000FEB8                            Newt_Action:	; Routine 2
0000FEB8 7000                       		moveq	#0,d0
0000FEBA 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FEBE 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FEC2 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FEC6 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FECC 6100 C926                  		bsr.w	AnimateSprite
0000FED0 6000 0000                  		bra.w	RememberState
0000FED4                            ; ===========================================================================
0000FED4 0000                       @index:		dc.w @chkdistance-@index
0000FED6 0000                       		dc.w @type00-@index
0000FED8 0000                       		dc.w @matchfloor-@index
0000FEDA 0000                       		dc.w @speed-@index
0000FEDC 0000                       		dc.w @type01-@index
0000FEDE                            ; ===========================================================================
0000FEDE                            
0000FEDE                            @chkdistance:
0000FEDE 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FEE4 3038 D008                  		move.w	(v_player+obX).w,d0
0000FEE8 9068 0008                  		sub.w	obX(a0),d0
0000FEEC 6400                       		bcc.s	@sonicisright
0000FEEE 4440                       		neg.w	d0
0000FEF0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FEF6                            
0000FEF6                            	@sonicisright:
0000FEF6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FEFA 6400                       		bcc.s	@outofrange	; if not, branch
0000FEFC 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FF00 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FF06 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FF0A 6700                       		beq.s	@istype00	; if type is 00, branch
0000FF0C                            
0000FF0C 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FF12 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FF18 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FF1E                            
0000FF1E                            	@outofrange:
0000FF1E                            	@istype00:
0000FF1E 4E75                       		rts	
0000FF20                            ; ===========================================================================
0000FF20                            
0000FF20                            @type00:
0000FF20 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FF26 6400                       		bcc.s	@fall		; is yes, branch
0000FF28 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FF2E 3038 D008                  		move.w	(v_player+obX).w,d0
0000FF32 9068 0008                  		sub.w	obX(a0),d0
0000FF36 6400                       		bcc.s	@sonicisright2
0000FF38 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FF3E                            
0000FF3E                            	@sonicisright2:
0000FF3E 4E75                       		rts	
0000FF40                            ; ===========================================================================
0000FF40                            
0000FF40                            	@fall:
0000FF40 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FF46 6600                       		bne.s	@loc_DE42
0000FF48 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FF4E                            
0000FF4E                            	@loc_DE42:
0000FF4E 6100 F770                  		bsr.w	ObjectFall
0000FF52 6100 0000                  		bsr.w	ObjFloorDist
0000FF56 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FF58 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FF5A                            
0000FF5A D368 000C                  		add.w	d1,obY(a0)
0000FF5E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FF64 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FF68 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FF6E 0828 0005 0002             		btst	#5,obGfx(a0)
0000FF74 6700                       		beq.s	@pppppppp
0000FF76 5228 001C                  		addq.b	#1,obAnim(a0)
0000FF7A                            
0000FF7A                            	@pppppppp:
0000FF7A 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FF80 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FF86 0828 0000 0022             		btst	#0,obStatus(a0)
0000FF8C 6600                       		bne.s	@keepfalling
0000FF8E 4468 0010                  		neg.w	obVelX(a0)
0000FF92                            
0000FF92                            	@keepfalling:
0000FF92 4E75                       		rts	
0000FF94                            ; ===========================================================================
0000FF94                            
0000FF94                            @matchfloor:
0000FF94 6100 F762                  		bsr.w	SpeedToPos
0000FF98 6100 0000                  		bsr.w	ObjFloorDist
0000FF9C 0C41 FFF8                  		cmpi.w	#-8,d1
0000FFA0 6D00                       		blt.s	@nextroutine
0000FFA2 0C41 000C                  		cmpi.w	#$C,d1
0000FFA6 6C00                       		bge.s	@nextroutine
0000FFA8 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FFAC 4E75                       		rts	
0000FFAE                            ; ===========================================================================
0000FFAE                            
0000FFAE                            	@nextroutine:
0000FFAE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FFB2 4E75                       		rts	
0000FFB4                            ; ===========================================================================
0000FFB4                            
0000FFB4                            @speed:
0000FFB4 6100 F742                  		bsr.w	SpeedToPos
0000FFB8 4E75                       		rts	
0000FFBA                            ; ===========================================================================
0000FFBA                            
0000FFBA                            @type01:
0000FFBA 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FFC0 6600                       		bne.s	@firemissile
0000FFC2 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FFC8                            
0000FFC8                            	@firemissile:
0000FFC8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FFCE 6600                       		bne.s	@fail
0000FFD0 4A28 0032                  		tst.b	$32(a0)
0000FFD4 6600                       		bne.s	@fail
0000FFD6 117C 0001 0032             		move.b	#1,$32(a0)
0000FFDC 6100 FBBA                  		bsr.w	FindFreeObj
0000FFE0 6600                       		bne.s	@fail
0000FFE2 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FFE6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FFEC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FFF2 5169 000C                  		subq.w	#8,obY(a1)
0000FFF6 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FFFC 303C 0014                  		move.w	#$14,d0
00010000 0828 0000 0022             		btst	#0,obStatus(a0)
00010006 6600                       		bne.s	@noflip
00010008 4440                       		neg.w	d0
0001000A 4469 0010                  		neg.w	obVelX(a1)
0001000E                            
0001000E                            	@noflip:
0001000E D169 0008                  		add.w	d0,obX(a1)
00010012 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00010018 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001001E                            
0001001E                            	@fail:
0001001E 4E75                       		rts	
00010020                            ; ===========================================================================
00010020                            
00010020                            Newt_Delete:	; Routine 4
00010020 6000 F72A                  		bra.w	DeleteObject
00010020 6000 F72A                  		bra.w	DeleteObject
00010024                            		include	"_anim\Newtron.asm"
00010024                            ; ---------------------------------------------------------------------------
00010024                            ; Animation script - Newtron enemy
00010024                            ; ---------------------------------------------------------------------------
00010024 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
00010026 0000                       		dc.w A_Newt_Drop-Ani_Newt
00010028 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0001002A 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0001002C 0000                       		dc.w A_Newt_Fires-Ani_Newt
0001002E 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
00010032 00                         		even
00010032 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0001003A 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0001003E 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
00010042 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0001004C 00                         		even
0001004C 00                         		even
0001004C                            Map_Newt:	include	"_maps\Newtron.asm"
0001004C                            ; ---------------------------------------------------------------------------
0001004C                            ; Sprite mappings - Newtron enemy (GHZ)
0001004C                            ; ---------------------------------------------------------------------------
0001004C                            Map_Newt_internal:
0001004C 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0001004E 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
00010050 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
00010052 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
00010054 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
00010056 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
00010058 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0001005A 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0001005C 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0001005E 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
00010060 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
00010062 03                         M_Newt_Trans:	dc.b 3
00010063 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
00010068 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0001006D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010072 03                         M_Newt_Norm:	dc.b 3
00010073 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
00010078 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001007D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010082 03                         M_Newt_Fires:	dc.b 3
00010083 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
00010088 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001008D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010092 04                         M_Newt_Drop1:	dc.b 4
00010093 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
00010098 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001009D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
000100A2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
000100A7 03                         M_Newt_Drop2:	dc.b 3
000100A8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
000100AD FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000100B2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000100B7 02                         M_Newt_Drop3:	dc.b 2
000100B8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100BD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100C2 03                         M_Newt_Fly1a:	dc.b 3
000100C3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
000100C8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100CD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
000100D2 03                         M_Newt_Fly1b:	dc.b 3
000100D3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100D8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100DD FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
000100E2 03                         M_Newt_Fly2a:	dc.b 3
000100E3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100E8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100ED FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000100F2 03                         M_Newt_Fly2b:	dc.b 3
000100F3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100F8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100FD FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010102 00                         M_Newt_Blank:	dc.b 0
00010104 00                         		even
00010104 00                         		even
00010104                            		include	"_incObj\43 Roller.asm"
00010104                            ; ---------------------------------------------------------------------------
00010104                            ; Object 43 - Roller enemy (SYZ)
00010104                            ; ---------------------------------------------------------------------------
00010104                            
00010104                            Roller:
00010104 7000                       		moveq	#0,d0
00010106 1028 0024                  		move.b	obRoutine(a0),d0
0001010A 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0001010E 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010112                            ; ===========================================================================
00010112 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010114 0000                       		dc.w Roll_Action-Roll_Index
00010116                            ; ===========================================================================
00010116                            
00010116                            Roll_Main:	; Routine 0
00010116 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001011C 117C 0008 0017             		move.b	#8,obWidth(a0)
00010122 6100 F59C                  		bsr.w	ObjectFall
00010126 6100 0000                  		bsr.w	ObjFloorDist
0001012A 4A41                       		tst.w	d1
0001012C 6A00                       		bpl.s	locret_E052
0001012E D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
00010132 317C 0000 0012             		move.w	#0,obVelY(a0)
00010138 5428 0024                  		addq.b	#2,obRoutine(a0)
0001013C 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
00010144 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0001014A 117C 0004 0001             		move.b	#4,obRender(a0)
00010150 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010156 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001015C                            
0001015C                            	locret_E052:
0001015C 4E75                       		rts	
0001015E                            ; ===========================================================================
0001015E                            
0001015E                            Roll_Action:	; Routine 2
0001015E 7000                       		moveq	#0,d0
00010160 1028 0025                  		move.b	ob2ndRout(a0),d0
00010164 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
00010168 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
0001016C 43F9 0000 0000             		lea	(Ani_Roll).l,a1
00010172 6100 C680                  		bsr.w	AnimateSprite
00010176 3028 0008                  		move.w	obX(a0),d0
0001017A 0240 FF80                  		andi.w	#$FF80,d0
0001017E 3238 F700                  		move.w	(v_screenposx).w,d1
00010182 0441 0080                  		subi.w	#$80,d1
00010186 0241 FF80                  		andi.w	#$FF80,d1
0001018A 9041                       		sub.w	d1,d0
0001018C 0C40 0280                  		cmpi.w	#$280,d0
00010190 6E00 0000                  		bgt.w	Roll_ChkGone
00010194 6000 F576                  		bra.w	DisplaySprite
00010198                            ; ===========================================================================
00010198                            
00010198                            Roll_ChkGone:
00010198 45F8 FC00                  		lea	(v_objstate).w,a2
0001019C 7000                       		moveq	#0,d0
0001019E 1028 0023                  		move.b	obRespawnNo(a0),d0
000101A2 6700                       		beq.s	Roll_Delete
000101A4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101AA                            
000101AA                            Roll_Delete:
000101AA 6000 F5A0                  		bra.w	DeleteObject
000101AE                            ; ===========================================================================
000101AE 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
000101B0 0000                       		dc.w Roll_RollNoChk-Roll_Index2
000101B2 0000                       		dc.w Roll_ChkJump-Roll_Index2
000101B4 0000                       		dc.w Roll_MatchFloor-Roll_Index2
000101B6                            ; ===========================================================================
000101B6                            
000101B6                            Roll_RollChk:
000101B6 3038 D008                  		move.w	(v_player+obX).w,d0
000101BA 0440 0100                  		subi.w	#$100,d0
000101BE 6500                       		bcs.s	loc_E0D2
000101C0 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
000101C4 6500                       		bcs.s	loc_E0D2
000101C6 5828 0025                  		addq.b	#4,ob2ndRout(a0)
000101CA 117C 0002 001C             		move.b	#2,obAnim(a0)
000101D0 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
000101D6 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
000101DC                            
000101DC                            loc_E0D2:
000101DC 588F                       		addq.l	#4,sp
000101DE 4E75                       		rts	
000101E0                            ; ===========================================================================
000101E0                            
000101E0                            Roll_RollNoChk:
000101E0 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
000101E6 6700                       		beq.s	loc_E0F8
000101E8 5368 0030                  		subq.w	#1,$30(a0)
000101EC 6A00                       		bpl.s	locret_E0F6
000101EE 117C 0001 001C             		move.b	#1,obAnim(a0)
000101F4 317C 0700 0010             		move.w	#$700,obVelX(a0)
000101FA 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010200                            
00010200                            locret_E0F6:
00010200 4E75                       		rts	
00010202                            ; ===========================================================================
00010202                            
00010202                            loc_E0F8:
00010202 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010206 4E75                       		rts	
00010208                            ; ===========================================================================
00010208                            
00010208                            Roll_ChkJump:
00010208 6100 0000                  		bsr.w	Roll_Stop
0001020C 6100 F4EA                  		bsr.w	SpeedToPos
00010210 6100 0000                  		bsr.w	ObjFloorDist
00010214 0C41 FFF8                  		cmpi.w	#-8,d1
00010218 6D00                       		blt.s	Roll_Jump
0001021A 0C41 000C                  		cmpi.w	#$C,d1
0001021E 6C00                       		bge.s	Roll_Jump
00010220 D368 000C                  		add.w	d1,obY(a0)
00010224 4E75                       		rts	
00010226                            ; ===========================================================================
00010226                            
00010226                            Roll_Jump:
00010226 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001022A 08E8 0000 0032             		bset	#0,$32(a0)
00010230 6700                       		beq.s	locret_E12E
00010232 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010238                            
00010238                            locret_E12E:
00010238 4E75                       		rts	
0001023A                            ; ===========================================================================
0001023A                            
0001023A                            Roll_MatchFloor:
0001023A 6100 F484                  		bsr.w	ObjectFall
0001023E 4A68 0012                  		tst.w	obVelY(a0)
00010242 6B00                       		bmi.s	locret_E150
00010244 6100 0000                  		bsr.w	ObjFloorDist
00010248 4A41                       		tst.w	d1
0001024A 6A00                       		bpl.s	locret_E150
0001024C D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
00010250 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010254 317C 0000 0012             		move.w	#0,obVelY(a0)
0001025A                            
0001025A                            locret_E150:
0001025A 4E75                       		rts	
0001025C                            
0001025C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001025C                            
0001025C                            
0001025C                            Roll_Stop:
0001025C 4A28 0032                  		tst.b	$32(a0)
00010260 6B00                       		bmi.s	locret_E188
00010262 3038 D008                  		move.w	(v_player+obX).w,d0
00010266 0440 0030                  		subi.w	#$30,d0
0001026A 9068 0008                  		sub.w	obX(a0),d0
0001026E 6400                       		bcc.s	locret_E188
00010270 117C 0000 001C             		move.b	#0,obAnim(a0)
00010276 117C 000E 0020             		move.b	#$E,obColType(a0)
0001027C 4268 0010                  		clr.w	obVelX(a0)
00010280 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010286 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0001028C 08E8 0007 0032             		bset	#7,$32(a0)
00010292                            
00010292                            locret_E188:
00010292 4E75                       		rts	
00010294                            ; End of function Roll_Stop
00010294                            ; End of function Roll_Stop
00010294                            		include	"_anim\Roller.asm"
00010294                            ; ---------------------------------------------------------------------------
00010294                            ; Animation script - Roller enemy
00010294                            ; ---------------------------------------------------------------------------
00010294 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010296 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010298 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001029A 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000102A0 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000102A6 00                         		even
000102A6 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000102AC 00                         		even
000102AC 00                         		even
000102AC                            Map_Roll:	include	"_maps\Roller.asm"
000102AC                            ; --------------------------------------------------------------------------------
000102AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000102AC                            ; --------------------------------------------------------------------------------
000102AC                            
000102AC                            SME_q3BmU:	
000102AC 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000102B0 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000102B4 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000102B6 02                         SME_q3BmU_A:	dc.b 2	
000102B7 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000102BC F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000102C1 02                         SME_q3BmU_15:	dc.b 2	
000102C2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
000102C7 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
000102CC 01                         SME_q3BmU_20:	dc.b 1	
000102CD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
000102D2 01                         SME_q3BmU_26:	dc.b 1	
000102D3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
000102D8 01                         SME_q3BmU_2C:	dc.b 1	
000102D9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
000102DE                            		even
000102DE                            		even
000102DE                            
000102DE                            		include	"_incObj\44 GHZ Edge Walls.asm"
000102DE                            ; ---------------------------------------------------------------------------
000102DE                            ; Object 44 - edge walls (GHZ)
000102DE                            ; ---------------------------------------------------------------------------
000102DE                            
000102DE                            EdgeWalls:
000102DE 7000                       		moveq	#0,d0
000102E0 1028 0024                  		move.b	obRoutine(a0),d0
000102E4 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
000102E8 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
000102EC                            ; ===========================================================================
000102EC 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
000102EE 0000                       		dc.w Edge_Solid-Edge_Index
000102F0 0000                       		dc.w Edge_Display-Edge_Index
000102F2                            ; ===========================================================================
000102F2                            
000102F2                            Edge_Main:	; Routine 0
000102F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000102F6 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
000102FE 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010304 0028 0004 0001             		ori.b	#4,obRender(a0)
0001030A 117C 0008 0014             		move.b	#8,obActWid(a0)
00010310 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010316 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001031C 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010322 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010324 5428 0024                  		addq.b	#2,obRoutine(a0)
00010328 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
0001032A                            ; ===========================================================================
0001032A                            
0001032A                            Edge_Solid:	; Routine 2
0001032A 323C 0013                  		move.w	#$13,d1
0001032E 343C 0028                  		move.w	#$28,d2
00010332 6100 A2BE                  		bsr.w	Obj44_SolidWall
00010336                            
00010336                            Edge_Display:	; Routine 4
00010336 6100 F3D4                  		bsr.w	DisplaySprite
00010358 4E75                       		rts	
00010358 4E75                       		rts	
0001035A                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
0001035A                            ; ---------------------------------------------------------------------------
0001035A                            ; Sprite mappings - walls (GHZ)
0001035A                            ; ---------------------------------------------------------------------------
0001035A                            Map_Edge_internal:
0001035A 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
0001035C 0000                       		dc.w M_Edge_Light-Map_Edge_internal
0001035E 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
00010360 04                         M_Edge_Shadow:	dc.b 4
00010361 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
00010366 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001036B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010370 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010375 04                         M_Edge_Light:	dc.b 4
00010376 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
0001037B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010380 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010385 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001038A 04                         M_Edge_Dark:	dc.b 4
0001038B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010390 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010395 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001039A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000103A0 00                         		even
000103A0 00                         		even
000103A0                            
000103A0                            		include	"_incObj\13 Lava Ball Maker.asm"
000103A0                            ; ---------------------------------------------------------------------------
000103A0                            ; Object 13 - lava ball	maker (MZ, SLZ)
000103A0                            ; ---------------------------------------------------------------------------
000103A0                            
000103A0                            LavaMaker:
000103A0 7000                       		moveq	#0,d0
000103A2 1028 0024                  		move.b	obRoutine(a0),d0
000103A6 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000103AA 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000103AE 6000 0000                  		bra.w	LBall_ChkDel
000103B2                            ; ===========================================================================
000103B2 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000103B4 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000103B6                            ; ---------------------------------------------------------------------------
000103B6                            ;
000103B6                            ; Lava ball production rates
000103B6                            ;
000103B6 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000103BC                            ; ===========================================================================
000103BC                            
000103BC                            LavaM_Main:	; Routine 0
000103BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000103C0 1028 0028                  		move.b	obSubtype(a0),d0
000103C4 E848                       		lsr.w	#4,d0
000103C6 0240 000F                  		andi.w	#$F,d0
000103CA 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
000103D0 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
000103D6 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000103DC                            
000103DC                            LavaM_MakeLava:	; Routine 2
000103DC 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
000103E0 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
000103E2 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
000103E8 6100 F5A2                  		bsr.w	ChkObjectVisible
000103EC 6600                       		bne.s	LavaM_Wait
000103EE 6100 F7A8                  		bsr.w	FindFreeObj
000103F2 6600                       		bne.s	LavaM_Wait
000103F4 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
000103F8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000103FE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010404 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001040A                            
0001040A                            	LavaM_Wait:
0001040A 4E75                       		rts	
0001040A 4E75                       		rts	
0001040C                            		include	"_incObj\14 Lava Ball.asm"
0001040C                            ; ---------------------------------------------------------------------------
0001040C                            ; Object 14 - lava balls (MZ, SLZ)
0001040C                            ; ---------------------------------------------------------------------------
0001040C                            
0001040C                            LavaBall:
0001040C 7000                       		moveq	#0,d0
0001040E 1028 0024                  		move.b	obRoutine(a0),d0
00010412 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010416 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001041A 6000 F2F0                  		bra.w	DisplaySprite
0001041E                            ; ===========================================================================
0001041E 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010420 0000                       		dc.w LBall_Action-LBall_Index
00010422 0000                       		dc.w LBall_Delete-LBall_Index
00010424                            
00010424 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
0001042E 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010436                            ; ===========================================================================
00010436                            
00010436                            LBall_Main:	; Routine 0
00010436 5428 0024                  		addq.b	#2,obRoutine(a0)
0001043A 117C 0008 0016             		move.b	#8,obHeight(a0)
00010440 117C 0008 0017             		move.b	#8,obWidth(a0)
00010446 217C 0000 D446 0004        		move.l	#Map_Fire,obMap(a0)
0001044E 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010454 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
0001045A 6600                       		bne.s	@notSLZ
0001045C 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
00010462                            
00010462                            	@notSLZ:
00010462 117C 0004 0001             		move.b	#4,obRender(a0)
00010468 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001046E 117C 008B 0020             		move.b	#$8B,obColType(a0)
00010474 3168 000C 0030             		move.w	obY(a0),$30(a0)
0001047A 4A28 0029                  		tst.b	$29(a0)
0001047E 6700                       		beq.s	@speed
00010480 5428 0018                  		addq.b	#2,obPriority(a0)
00010484                            
00010484                            	@speed:
00010484 7000                       		moveq	#0,d0
00010486 1028 0028                  		move.b	obSubtype(a0),d0
0001048A D040                       		add.w	d0,d0
0001048C 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010492 117C 0008 0014             		move.b	#8,obActWid(a0)
00010498 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
0001049E 6500                       		bcs.s	@sound		; if yes, branch
000104A0                            
000104A0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000104A6 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000104AC 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000104B2 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000104B8                            
000104B8                            	@sound:
000104C2                            
000104C2                            LBall_Action:	; Routine 2
000104C2 7000                       		moveq	#0,d0
000104C4 1028 0028                  		move.b	obSubtype(a0),d0
000104C8 D040                       		add.w	d0,d0
000104CA 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
000104CE 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
000104D2 6100 F224                  		bsr.w	SpeedToPos
000104D6 43F9 0000 0000             		lea	(Ani_Fire).l,a1
000104DC 6100 C316                  		bsr.w	AnimateSprite
000104E0                            
000104E0                            LBall_ChkDel:
000104FE 4E75                       		rts	
00010500                            ; ===========================================================================
00010500 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010504 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010508 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001050C 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010510 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010512                            ; ===========================================================================
00010512                            ; lavaball types 00-03 fly up and fall back down
00010512                            
00010512                            LBall_Type00:
00010512 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010518 3028 0030                  		move.w	$30(a0),d0
0001051C B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010520 6400                       		bcc.s	loc_E41E	; if not, branch
00010522 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010526                            
00010526                            loc_E41E:
00010526 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001052C 4A68 0012                  		tst.w	obVelY(a0)
00010530 6A00                       		bpl.s	locret_E430
00010532 08E8 0001 0022             		bset	#1,obStatus(a0)
00010538                            
00010538                            locret_E430:
00010538 4E75                       		rts	
0001053A                            ; ===========================================================================
0001053A                            ; lavaball type	04 flies up until it hits the ceiling
0001053A                            
0001053A                            LBall_Type04:
0001053A 08E8 0001 0022             		bset	#1,obStatus(a0)
00010540 6100 0000                  		bsr.w	ObjHitCeiling
00010544 4A41                       		tst.w	d1
00010546 6A00                       		bpl.s	locret_E452
00010548 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001054E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010554 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
0001055A                            
0001055A                            locret_E452:
0001055A 4E75                       		rts	
0001055C                            ; ===========================================================================
0001055C                            ; lavaball type	05 falls down until it hits the	floor
0001055C                            
0001055C                            LBall_Type05:
0001055C 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010562 6100 0000                  		bsr.w	ObjFloorDist
00010566 4A41                       		tst.w	d1
00010568 6A00                       		bpl.s	locret_E474
0001056A 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010570 117C 0001 001C             		move.b	#1,obAnim(a0)
00010576 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
0001057C                            
0001057C                            locret_E474:
0001057C 4E75                       		rts	
0001057E                            ; ===========================================================================
0001057E                            ; lavaball types 06-07 move sideways
0001057E                            
0001057E                            LBall_Type06:
0001057E 08E8 0000 0022             		bset	#0,obStatus(a0)
00010584 76F8                       		moveq	#-8,d3
00010586 6100 0000                  		bsr.w	ObjHitWallLeft
0001058A 4A41                       		tst.w	d1
0001058C 6A00                       		bpl.s	locret_E498
0001058E 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010594 117C 0003 001C             		move.b	#3,obAnim(a0)
0001059A 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000105A0                            
000105A0                            locret_E498:
000105A0 4E75                       		rts	
000105A2                            ; ===========================================================================
000105A2                            
000105A2                            LBall_Type07:
000105A2 08A8 0000 0022             		bclr	#0,obStatus(a0)
000105A8 7608                       		moveq	#8,d3
000105AA 6100 0000                  		bsr.w	ObjHitWallRight
000105AE 4A41                       		tst.w	d1
000105B0 6A00                       		bpl.s	locret_E4BC
000105B2 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105B8 117C 0003 001C             		move.b	#3,obAnim(a0)
000105BE 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000105C4                            
000105C4                            locret_E4BC:
000105C4 4E75                       		rts	
000105C6                            ; ===========================================================================
000105C6                            
000105C6                            LBall_Type08:
000105C6 4E75                       		rts	
000105C8                            ; ===========================================================================
000105C8                            
000105C8                            LBall_Delete:
000105C8 6000 F182                  		bra.w	DeleteObject
000105C8 6000 F182                  		bra.w	DeleteObject
000105CC                            		include	"_anim\Fireballs.asm"
000105CC                            ; ---------------------------------------------------------------------------
000105CC                            ; Animation script - lava balls
000105CC                            ; ---------------------------------------------------------------------------
000105CC 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
000105CE 0000                       		dc.w @vertcollide-Ani_Fire
000105D0 0000                       		dc.w @horizontal-Ani_Fire
000105D2 0000                       		dc.w @horicollide-Ani_Fire
000105D4 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
000105DA 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
000105DE 00                         		even
000105DE 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000105E4 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
000105E8 00                         		even
000105E8 00                         		even
000105E8                            
000105E8                            		include	"_incObj\6D Flamethrower.asm"
000105E8                            ; ---------------------------------------------------------------------------
000105E8                            ; Object 6D - flame thrower (SBZ)
000105E8                            ; ---------------------------------------------------------------------------
000105E8                            
000105E8                            Flamethrower:
000105E8 7000                       		moveq	#0,d0
000105EA 1028 0024                  		move.b	obRoutine(a0),d0
000105EE 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
000105F2 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
000105F6                            ; ===========================================================================
000105F6 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
000105F8 0000                       		dc.w Flame_Action-Flame_Index
000105FA                            ; ===========================================================================
000105FA                            
000105FA                            Flame_Main:	; Routine 0
000105FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000105FE 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010606 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0001060C 0028 0004 0001             		ori.b	#4,obRender(a0)
00010612 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010618 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0001061E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010624 1028 0028                  		move.b	obSubtype(a0),d0
00010628 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001062C D040                       		add.w	d0,d0		; multiply by 2
0001062E 3140 0030                  		move.w	d0,$30(a0)
00010632 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010636 1028 0028                  		move.b	obSubtype(a0),d0
0001063A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001063E EB48                       		lsl.w	#5,d0		; multiply by $20
00010640 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010644 117C 000A 0036             		move.b	#$A,$36(a0)
0001064A 0828 0001 0022             		btst	#1,obStatus(a0)
00010650 6700                       		beq.s	Flame_Action
00010652 117C 0002 001C             		move.b	#2,obAnim(a0)
00010658 117C 0015 0036             		move.b	#$15,$36(a0)
0001065E                            
0001065E                            Flame_Action:	; Routine 2
0001065E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010662 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010664 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001066A 0868 0000 001C             		bchg	#0,obAnim(a0)
00010670 6700                       		beq.s	loc_E57A
00010672 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010682                            
00010682                            loc_E57A:
00010682 43F9 0000 0000             		lea	(Ani_Flame).l,a1
00010688 6100 C16A                  		bsr.w	AnimateSprite
0001068C 117C 0000 0020             		move.b	#0,obColType(a0)
00010692 1028 0036                  		move.b	$36(a0),d0
00010696 B028 001A                  		cmp.b	obFrame(a0),d0
0001069A 6600                       		bne.s	Flame_ChkDel
0001069C 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000106A2                            
000106A2                            Flame_ChkDel:
000106C0 6000 F04A                  		bra.w	DisplaySprite
000106C0 6000 F04A                  		bra.w	DisplaySprite
000106C4                            		include	"_anim\Flamethrower.asm"
000106C4                            ; ---------------------------------------------------------------------------
000106C4                            ; Animation script - flamethrower (SBZ)
000106C4                            ; ---------------------------------------------------------------------------
000106C4 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
000106C6 0000                       		dc.w @pipe2-Ani_Flame
000106C8 0000                       		dc.w @valve1-Ani_Flame
000106CA 0000                       		dc.w @valve2-Ani_Flame
000106CC 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
000106DA 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000106E4 00                         		even
000106E4 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
000106F2 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
000106FC 00                         		even
000106FC 00                         		even
000106FC                            Map_Flame:	include	"_maps\Flamethrower.asm"
000106FC                            ; ---------------------------------------------------------------------------
000106FC                            ; Sprite mappings - flame thrower (SBZ)
000106FC                            ; ---------------------------------------------------------------------------
000106FC                            Map_Flame_internal:
000106FC 0000                       		dc.w @pipe1-Map_Flame_internal
000106FE 0000                       		dc.w @pipe2-Map_Flame_internal
00010700 0000                       		dc.w @pipe3-Map_Flame_internal
00010702 0000                       		dc.w @pipe4-Map_Flame_internal
00010704 0000                       		dc.w @pipe5-Map_Flame_internal
00010706 0000                       		dc.w @pipe6-Map_Flame_internal
00010708 0000                       		dc.w @pipe7-Map_Flame_internal
0001070A 0000                       		dc.w @pipe8-Map_Flame_internal
0001070C 0000                       		dc.w @pipe9-Map_Flame_internal
0001070E 0000                       		dc.w @pipe10-Map_Flame_internal
00010710 0000                       		dc.w @pipe11-Map_Flame_internal
00010712 0000                       		dc.w @valve1-Map_Flame_internal
00010714 0000                       		dc.w @valve2-Map_Flame_internal
00010716 0000                       		dc.w @valve3-Map_Flame_internal
00010718 0000                       		dc.w @valve4-Map_Flame_internal
0001071A 0000                       		dc.w @valve5-Map_Flame_internal
0001071C 0000                       		dc.w @valve6-Map_Flame_internal
0001071E 0000                       		dc.w @valve7-Map_Flame_internal
00010720 0000                       		dc.w @valve8-Map_Flame_internal
00010722 0000                       		dc.w @valve9-Map_Flame_internal
00010724 0000                       		dc.w @valve10-Map_Flame_internal
00010726 0000                       		dc.w @valve11-Map_Flame_internal
00010728 01                         @pipe1:		dc.b 1
00010729 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
0001072E 02                         @pipe2:		dc.b 2
0001072F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010734 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010739 02                         @pipe3:		dc.b 2
0001073A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001073F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010744 03                         @pipe4:		dc.b 3
00010745 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001074A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001074F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010754 03                         @pipe5:		dc.b 3
00010755 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001075A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001075F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010764 04                         @pipe6:		dc.b 4
00010765 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001076A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001076F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010774 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010779 04                         @pipe7:		dc.b 4
0001077A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001077F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010784 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010789 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001078E 05                         @pipe8:		dc.b 5
0001078F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010794 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010799 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001079E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107A3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107A8 05                         @pipe9:		dc.b 5
000107A9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000107AE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000107B3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107B8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107BD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107C2 06                         @pipe10:	dc.b 6
000107C3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000107C8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000107CD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107D2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000107D7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107DC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107E1 06                         @pipe11:	dc.b 6
000107E2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000107E7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000107EC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000107F1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107F6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107FB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010800 01                         @valve1:	dc.b 1
00010801 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010806 02                         @valve2:	dc.b 2
00010807 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001080C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010811 02                         @valve3:	dc.b 2
00010812 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010817 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001081C 03                         @valve4:	dc.b 3
0001081D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010822 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010827 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001082C 03                         @valve5:	dc.b 3
0001082D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010832 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010837 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001083C 04                         @valve6:	dc.b 4
0001083D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010842 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010847 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001084C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010851 04                         @valve7:	dc.b 4
00010852 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010857 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001085C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010861 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010866 05                         @valve8:	dc.b 5
00010867 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001086C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010871 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010876 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001087B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010880 05                         @valve9:	dc.b 5
00010881 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010886 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001088B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010890 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010895 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001089A 06                         @valve10:	dc.b 6
0001089B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000108A0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000108A5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108AA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000108AF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108B4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108B9 06                         @valve11:	dc.b 6
000108BA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000108BF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000108C4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000108C9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108CE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108D3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108D8                            		even
000108D8                            		even
000108D8                            
000108D8                            		include	"_incObj\46 MZ Bricks.asm"
000108D8                            ; ---------------------------------------------------------------------------
000108D8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000108D8                            ; ---------------------------------------------------------------------------
000108D8                            
000108D8                            MarbleBrick:
000108D8 7000                       		moveq	#0,d0
000108DA 1028 0024                  		move.b	obRoutine(a0),d0
000108DE 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
000108E2 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
000108E6                            ; ===========================================================================
000108E6 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
000108E8 0000                       		dc.w Brick_Action-Brick_Index
000108EA                            
000108EA =00000030                  brick_origY:	equ $30
000108EA                            ; ===========================================================================
000108EA                            
000108EA                            Brick_Main:	; Routine 0
000108EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000108EE 117C 000F 0016             		move.b	#$F,obHeight(a0)
000108F4 117C 000F 0017             		move.b	#$F,obWidth(a0)
000108FA 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010902 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010908 117C 0004 0001             		move.b	#4,obRender(a0)
0001090E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010914 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001091A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010920 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010926                            
00010926                            Brick_Action:	; Routine 2
00010926 4A28 0001                  		tst.b	obRender(a0)
0001092A 6A00                       		bpl.s	@chkdel
0001092C 7000                       		moveq	#0,d0
0001092E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010932 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010936 D040                       		add.w	d0,d0
00010938 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
0001093C 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010940 323C 001B                  		move.w	#$1B,d1
00010944 343C 0010                  		move.w	#$10,d2
00010948 363C 0011                  		move.w	#$11,d3
0001094C 3828 0008                  		move.w	obX(a0),d4
00010950 6100 0000                  		bsr.w	SolidObject
00010954                            
00010954                            	@chkdel:
00010972 6000 ED98                  			bra.w	DisplaySprite
00010976                            ; ===========================================================================
00010976 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010978 0000                       		dc.w Brick_Type01-Brick_TypeIndex
0001097A 0000                       		dc.w Brick_Type02-Brick_TypeIndex
0001097C 0000                       		dc.w Brick_Type03-Brick_TypeIndex
0001097E 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010980                            ; ===========================================================================
00010980                            
00010980                            Brick_Type00:
00010980 4E75                       		rts	
00010982                            ; ===========================================================================
00010982                            
00010982                            Brick_Type02:
00010982 3038 D008                  		move.w	(v_player+obX).w,d0
00010986 9068 0008                  		sub.w	obX(a0),d0
0001098A 6400                       		bcc.s	loc_E888
0001098C 4440                       		neg.w	d0
0001098E                            
0001098E                            loc_E888:
0001098E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010992 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010994 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
0001099A                            
0001099A                            Brick_Type01:
0001099A 7000                       		moveq	#0,d0
0001099C 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
000109A0 0828 0003 0028             		btst	#3,obSubtype(a0)
000109A6 6700                       		beq.s	loc_E8A8
000109A8 4440                       		neg.w	d0
000109AA 0640 0010                  		addi.w	#$10,d0
000109AE                            
000109AE                            loc_E8A8:
000109AE 3228 0030                  		move.w	brick_origY(a0),d1
000109B2 9240                       		sub.w	d0,d1
000109B4 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Brick_Type03:
000109BA 6100 ED3C                  		bsr.w	SpeedToPos
000109BE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
000109C4 6100 0000                  		bsr.w	ObjFloorDist
000109C8 4A41                       		tst.w	d1		; has the block	hit the	floor?
000109CA 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000109CE D368 000C                  		add.w	d1,obY(a0)
000109D2 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
000109D6 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
000109DC 117C 0004 0028             		move.b	#4,obSubtype(a0)
000109E2 3011                       		move.w	(a1),d0
000109E4 0240 03FF                  		andi.w	#$3FF,d0
000109E8 0C40 016A                  			cmpi.w	#$16A,d0
000109EC 6400                       		bcc.s	locret_E8EE
000109EE 117C 0000 0028             		move.b	#0,obSubtype(a0)
000109F4                            
000109F4                            locret_E8EE:
000109F4 4E75                       		rts	
000109F6                            ; ===========================================================================
000109F6                            
000109F6                            Brick_Type04:
000109F6 7000                       		moveq	#0,d0
000109F8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
000109FC E648                       		lsr.w	#3,d0
000109FE 3228 0030                  		move.w	brick_origY(a0),d1
00010A02 9240                       		sub.w	d0,d1
00010A04 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010A08 4E75                       		rts	
00010A08 4E75                       		rts	
00010A0A                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010A0A                            ; ---------------------------------------------------------------------------
00010A0A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010A0A                            ; ---------------------------------------------------------------------------
00010A0A                            Map_Brick_internal:
00010A0A 0000                       		dc.w @brick-Map_Brick_internal
00010A0C 01                         @brick:		dc.b 1
00010A0D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010A12                            		even
00010A12                            		even
00010A12                            
00010A12                            		include	"_incObj\12 Light.asm"
00010A12                            ; ---------------------------------------------------------------------------
00010A12                            ; Object 12 - lamp (SYZ)
00010A12                            ; ---------------------------------------------------------------------------
00010A12                            
00010A12                            SpinningLight:
00010A12 7000                       		moveq	#0,d0
00010A14 1028 0024                  		move.b	obRoutine(a0),d0
00010A18 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010A1C 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010A20                            ; ===========================================================================
00010A20 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010A22 0000                       		dc.w Light_Animate-Light_Index
00010A24                            ; ===========================================================================
00010A24                            
00010A24                            Light_Main:	; Routine 0
00010A24 5428 0024                  		addq.b	#2,obRoutine(a0)
00010A28 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010A30 317C 0000 0002             		move.w	#0,obGfx(a0)
00010A36 117C 0004 0001             		move.b	#4,obRender(a0)
00010A3C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010A42 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010A48                            
00010A48                            Light_Animate:	; Routine 2
00010A48 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010A4C 6A00                       		bpl.s	@chkdel
00010A4E 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010A54 5228 001A                  		addq.b	#1,obFrame(a0)
00010A58 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010A5E 6500                       		bcs.s	@chkdel
00010A60 117C 0000 001A             		move.b	#0,obFrame(a0)
00010A66                            
00010A66                            	@chkdel:
00010A84 6000 EC86                  		bra.w	DisplaySprite
00010A84 6000 EC86                  		bra.w	DisplaySprite
00010A88                            Map_Light	include	"_maps\Light.asm"
00010A88                            ; --------------------------------------------------------------------------------
00010A88                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010A88                            ; --------------------------------------------------------------------------------
00010A88                            
00010A88                            SME_FBl1X:	
00010A88 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010A8C 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010A90 05                         SME_FBl1X_8:	dc.b 5	
00010A91 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010A96 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010A9B F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010AA0 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010AA5 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010AAA 05                         SME_FBl1X_22:	dc.b 5	
00010AAB E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010AB0 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010AB5 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010ABA F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010ABF F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010AC4 06                         SME_FBl1X_3C:	dc.b 6	
00010AC5 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010ACA E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010ACF E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010AD4 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010AD9 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010ADE F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010AE3 05                         SME_FBl1X_5B:	dc.b 5	
00010AE4 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010AE9 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010AEE F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010AF3 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010AF8 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010AFE 00                         		even
00010AFE 00                         		even
00010AFE                            		include	"_incObj\47 Bumper.asm"
00010AFE                            ; ---------------------------------------------------------------------------
00010AFE                            ; Object 47 - pinball bumper (SYZ)
00010AFE                            ; ---------------------------------------------------------------------------
00010AFE                            
00010AFE                            Bumper:
00010AFE 7000                       		moveq	#0,d0
00010B00 1028 0024                  		move.b	obRoutine(a0),d0
00010B04 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010B08 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010B0C                            ; ===========================================================================
00010B0C 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010B0E 0000                       		dc.w Bump_Hit-Bump_Index
00010B10                            ; ===========================================================================
00010B10                            
00010B10                            Bump_Main:	; Routine 0
00010B10 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B14 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010B1C 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010B22 117C 0004 0001             		move.b	#4,obRender(a0)
00010B28 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B2E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010B34 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010B3A                            
00010B3A                            Bump_Hit:	; Routine 2
00010B3A 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010B3E 6700 0000                  		beq.w	@display	; if not, branch
00010B42 4228 0021                  		clr.b	obColProp(a0)
00010B46 43F8 D000                  		lea	(v_player).w,a1
00010B4A 3228 0008                  		move.w	obX(a0),d1
00010B4E 3428 000C                  		move.w	obY(a0),d2
00010B52 9269 0008                  		sub.w	obX(a1),d1
00010B56 9469 000C                  		sub.w	obY(a1),d2
00010B5A 4EB9 0000 3CC4             		jsr	(CalcAngle).l
00010B60 4EB9 0000 3A32             		jsr	(CalcSine).l
00010B66 C3FC F900                  		muls.w	#-$700,d1
00010B6A E081                       		asr.l	#8,d1
00010B6C 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010B70 C1FC F900                  		muls.w	#-$700,d0
00010B74 E080                       		asr.l	#8,d0
00010B76 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010B7A 08E9 0001 0022             		bset	#1,obStatus(a1)
00010B80 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010B86 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010B8C 4229 003C                  		clr.b	$3C(a1)
00010B90 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010BA0 45F8 FC00                  		lea	(v_objstate).w,a2
00010BA4 7000                       		moveq	#0,d0
00010BA6 1028 0023                  		move.b	obRespawnNo(a0),d0
00010BAA 6700                       		beq.s	@addscore
00010BAC 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010BB2 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010BB4 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010BB8                            
00010BB8                            	@addscore:
00010BB8 7001                       		moveq	#1,d0
00010BBA 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010BC0 6100 EFD6                  		bsr.w	FindFreeObj
00010BC4 6600                       		bne.s	@display
00010BC6 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010BCA 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010BD0 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010BD6 137C 0004 001A             		move.b	#4,obFrame(a1)
00010BDC                            
00010BDC                            	@display:
00010BDC 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010BE2 6100 BC10                  		bsr.w	AnimateSprite
00010C02 6000 EB08                  		bra.w	DisplaySprite
00010C06                            ; ===========================================================================
00010C06                            
00010C06                            @resetcount:
00010C06 45F8 FC00                  		lea	(v_objstate).w,a2
00010C0A 7000                       		moveq	#0,d0
00010C0C 1028 0023                  		move.b	obRespawnNo(a0),d0
00010C10 6700                       		beq.s	@delete
00010C12 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C18                            
00010C18                            	@delete:
00010C18 6000 EB32                  		bra.w	DeleteObject
00010C18 6000 EB32                  		bra.w	DeleteObject
00010C1C                            		include	"_anim\Bumper.asm"
00010C1C                            ; ---------------------------------------------------------------------------
00010C1C                            ; Animation script - flamethrower (SBZ)
00010C1C                            ; ---------------------------------------------------------------------------
00010C1C 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010C1E 0000                       		dc.w byte_EAF8-Ani_Bump
00010C20 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010C24 00                         		even
00010C24 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010C2C 00                         		even
00010C2C 00                         		even
00010C2C                            Map_Bump:	include	"_maps\Bumper.asm"
00010C2C                            ; ---------------------------------------------------------------------------
00010C2C                            ; Sprite mappings - pinball bumper (SYZ)
00010C2C                            ; ---------------------------------------------------------------------------
00010C2C                            Map_Bump_internal:
00010C2C 0000                       		dc.w @normal-Map_Bump_internal
00010C2E 0000                       		dc.w @bumped1-Map_Bump_internal
00010C30 0000                       		dc.w @bumped2-Map_Bump_internal
00010C32 02                         @normal:	dc.b 2
00010C33 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010C38 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010C3D 02                         @bumped1:	dc.b 2
00010C3E F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010C43 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010C48 02                         @bumped2:	dc.b 2
00010C49 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010C4E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010C54 00                         		even
00010C54 00                         		even
00010C54                            
00010C54                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010C54                            ; ---------------------------------------------------------------------------
00010C54                            ; Object 0D - signpost at the end of a level
00010C54                            ; ---------------------------------------------------------------------------
00010C54                            
00010C54                            Signpost:
00010C54 7000                       		moveq	#0,d0
00010C56 1028 0024                  		move.b	obRoutine(a0),d0
00010C5A 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010C5E 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010C62 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010C68 6100 BB8A                  		bsr.w	AnimateSprite
00010C6C 6100 EA9E                  		bsr.w	DisplaySprite
00010C8E 4E75                       		rts	
00010C90                            ; ===========================================================================
00010C90 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010C92 0000                       		dc.w Sign_Touch-Sign_Index
00010C94 0000                       		dc.w Sign_Spin-Sign_Index
00010C96 0000                       		dc.w Sign_SonicRun-Sign_Index
00010C98 0000                       		dc.w Sign_Exit-Sign_Index
00010C9A                            
00010C9A =00000030                  spintime:	equ $30		; time for signpost to spin
00010C9A =00000032                  sparkletime:	equ $32		; time between sparkles
00010C9A =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010C9A                            ; ===========================================================================
00010C9A                            
00010C9A                            Sign_Main:	; Routine 0
00010C9A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C9E 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010CA6 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010CAC 117C 0004 0001             		move.b	#4,obRender(a0)
00010CB2 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010CB8 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010CBE                            
00010CBE                            Sign_Touch:	; Routine 2
00010CBE 3038 D008                  		move.w	(v_player+obX).w,d0
00010CC2 9068 0008                  		sub.w	obX(a0),d0
00010CC6 6500                       		bcs.s	@notouch
00010CC8 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010CCC 6400                       		bcc.s	@notouch	; if not, branch
00010CCE 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010CDE 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010CE2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010CE8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CEC 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010CF2                            
00010CF2                            	@notouch:
00010CF2 4E75                       		rts	
00010CF4                            	
00010CF4                            ; ===========================================================================
00010CF4                            
00010CF4                            Sign_Spin:	; Routine 4
00010CF4 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010CF8 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010CFA 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010D00 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010D04 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010D0A 6600                       		bne.s	@chksparkle	; if not, branch
00010D0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D10                            
00010D10                            	@chksparkle:
00010D10 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010D14 6A00                       		bpl.s	@fail		; if time remains, branch
00010D16 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010D1C 7000                       		moveq	#0,d0
00010D1E 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010D22 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010D26 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010D2C 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010D30 6100 EE66                  		bsr.w	FindFreeObj
00010D34 6600                       		bne.s	@fail
00010D36 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010D3A 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010D40 101A                       		move.b	(a2)+,d0
00010D42 4880                       		ext.w	d0
00010D44 D068 0008                  		add.w	obX(a0),d0
00010D48 3340 0008                  		move.w	d0,obX(a1)
00010D4C 101A                       		move.b	(a2)+,d0
00010D4E 4880                       		ext.w	d0
00010D50 D068 000C                  		add.w	obY(a0),d0
00010D54 3340 000C                  		move.w	d0,obY(a1)
00010D58 237C 0000 BEF2 0004        		move.l	#Map_Ring,obMap(a1)
00010D60 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010D66 137C 0004 0001             		move.b	#4,obRender(a1)
00010D6C 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010D72 137C 0008 0014             		move.b	#8,obActWid(a1)
00010D78                            
00010D78                            	@fail:
00010D78 4E75                       		rts	
00010D7A                            ; ===========================================================================
00010D7A E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010D7C 0808                       		dc.b	8,   8
00010D7E F000                       		dc.b -$10,   0
00010D80 18F8                       		dc.b  $18,  -8
00010D82 00F8                       		dc.b	0,  -8
00010D84 1000                       		dc.b  $10,   0
00010D86 E808                       		dc.b -$18,   8
00010D88 1810                       		dc.b  $18, $10
00010D8A                            ; ===========================================================================
00010D8A                            
00010D8A                            Sign_SonicRun:	; Routine 6
00010D8A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010D8E 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010D92 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010D98                            		
00010D98                            
00010D98                            	loc_EC86:
00010D98 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D9C                            
00010D9C                            ; ---------------------------------------------------------------------------
00010D9C                            ; Subroutine to	set up bonuses at the end of an	act
00010D9C                            ; ---------------------------------------------------------------------------
00010D9C                            
00010D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D9C                            
00010D9C                            
00010D9C                            GotThroughAct:
00010D9C 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010DA0 6600                       		bne.s	locret_ECEE
00010DA2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010DA8 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010DAC 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010DB0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010DB4 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010DBA 7000                       		moveq	#plcid_TitleCard,d0
00010DBC 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010DC2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010DC8 7000                       		moveq	#0,d0
00010DCA 1038 FE23                  		move.b	(v_timemin).w,d0
00010DCE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010DD2 7200                       		moveq	#0,d1
00010DD4 1238 FE24                  		move.b	(v_timesec).w,d1
00010DD8 D041                       		add.w	d1,d0		; add up your time
00010DDA 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010DDE 7214                       		moveq	#$14,d1
00010DE0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010DE2 6500                       		bcs.s	hastimebonus	; if not, branch
00010DE4 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010DE6                            
00010DE6                            	hastimebonus:
00010DE6 D040                       		add.w	d0,d0
00010DE8 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010DEE 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010DF2 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010DF6 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010E04 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010E0A                            
00010E0A                            locret_ECEE:
00010E0A 4E75                       		rts	
00010E0C                            
00010E0C                            ; End of function GotThroughAct
00010E0C                            
00010E0C                            ; ===========================================================================
00010E0C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010E20 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010E36                            ; ===========================================================================
00010E36                            
00010E36                            Sign_Exit:	; Routine 8
00010E36 4E75                       		rts	
00010E38                            
00010E38                            ; ---------------------------------------------------------------------------
00010E38                            ; Subroutine to	set up bonuses at the end of an	zone
00010E38                            ; ---------------------------------------------------------------------------
00010E38                            
00010E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E38                            
00010E38                            
00010E38                            GotThroughAct1:
00010E38 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010E3C 6600                       		bne.s	locret_ECEE1
00010E3E 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010E44 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010E48 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010E4C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E50 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010E56 7000                       		moveq	#plcid_TitleCard,d0
00010E58 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010E5E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010E64 7000                       		moveq	#0,d0
00010E66 1038 FE23                  		move.b	(v_timemin).w,d0
00010E6A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010E6E 7200                       		moveq	#0,d1
00010E70 1238 FE24                  		move.b	(v_timesec).w,d1
00010E74 D041                       		add.w	d1,d0		; add up your time
00010E76 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010E7A 7214                       		moveq	#$14,d1
00010E7C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010E7E 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010E82 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010E84                            
00010E84                            	hastimebonus2:
00010E84 D040                       		add.w	d0,d0
00010E86 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010E8C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010E90 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010E94 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010EA2 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010EA8                            
00010EA8                            locret_ECEE1:
00010EA8 4E75                       		rts	
00010EAA                            
00010EAA                            ; End of function GotThroughAct		
00010EAA                            
00010EAA 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010EBE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010EBE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010ED4                            		include	"_anim\Signpost.asm"
00010ED4                            ; ---------------------------------------------------------------------------
00010ED4                            ; Animation script - signpost
00010ED4                            ; ---------------------------------------------------------------------------
00010ED4 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010ED6 0000                       		dc.w @spin1-Ani_Sign
00010ED8 0000                       		dc.w @spin2-Ani_Sign
00010EDA 0000                       		dc.w @sonic-Ani_Sign
00010EDC 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010EE0 00                         		even
00010EE0 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010EE6 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010EEC 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010EF0 00                         		even
00010EF0 00                         		even
00010EF0                            Map_Sign:	include	"_maps\Signpost.asm"
00010EF0                            ; --------------------------------------------------------------------------------
00010EF0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010EF0                            ; --------------------------------------------------------------------------------
00010EF0                            
00010EF0                            SME_KvSue:	
00010EF0 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010EF4 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010EF8 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010EFA 04                         SME_KvSue_A:	dc.b 4	
00010EFB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010F00 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010F05 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F0A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F0F 03                         SME_KvSue_1F:	dc.b 3	
00010F10 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010F15 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F1A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F1F 03                         SME_KvSue_2F:	dc.b 3	
00010F20 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010F25 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F2A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F2F 03                         SME_KvSue_3F:	dc.b 3	
00010F30 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010F35 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F3A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F3F 04                         SME_KvSue_4F:	dc.b 4	
00010F40 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010F45 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010F4A 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F4F 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F54                            		even
00010F54                            		even
00010F54                            
00010F54                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010F54                            ; ---------------------------------------------------------------------------
00010F54                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010F54                            ; ---------------------------------------------------------------------------
00010F54                            
00010F54                            GeyserMaker:
00010F54 7000                       		moveq	#0,d0
00010F56 1028 0024                  		move.b	obRoutine(a0),d0
00010F5A 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010F5E 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010F62 6000 0000                  		bra.w	Geyser_ChkDel
00010F66                            ; ===========================================================================
00010F66 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010F68 0000                       		dc.w GMake_Wait-GMake_Index
00010F6A 0000                       		dc.w GMake_ChkType-GMake_Index
00010F6C 0000                       		dc.w GMake_MakeLava-GMake_Index
00010F6E 0000                       		dc.w GMake_Display-GMake_Index
00010F70 0000                       		dc.w GMake_Delete-GMake_Index
00010F72                            
00010F72 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010F72 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010F72 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010F72                            ; ===========================================================================
00010F72                            
00010F72                            GMake_Main:	; Routine 0
00010F72 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F76 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010F7E 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010F84 117C 0004 0001             		move.b	#4,obRender(a0)
00010F8A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010F90 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010F96 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010F9C                            
00010F9C                            GMake_Wait:	; Routine 2
00010F9C 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010FA0 6A00                       		bpl.s	@cancel		; if time remains, branch
00010FA2                            
00010FA2 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010FA8 3038 D00C                  		move.w	(v_player+obY).w,d0
00010FAC 3228 000C                  		move.w	obY(a0),d1
00010FB0 B041                       		cmp.w	d1,d0
00010FB2 6400                       		bcc.s	@cancel
00010FB4 0441 0170                  		subi.w	#$170,d1
00010FB8 B041                       		cmp.w	d1,d0
00010FBA 6500                       		bcs.s	@cancel
00010FBC 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010FC0                            
00010FC0                            	@cancel:
00010FC0 4E75                       		rts	
00010FC2                            ; ===========================================================================
00010FC2                            
00010FC2                            GMake_MakeLava:	; Routine 6
00010FC2 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FC6 6100 EBE6                  		bsr.w	FindNextFreeObj
00010FCA 6600                       		bne.s	@fail
00010FCC 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010FD0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010FD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010FDC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010FE2 2348 003C                  		move.l	a0,gmake_parent(a1)
00010FE6                            
00010FE6                            	@fail:
00010FE6 117C 0001 001C             		move.b	#1,obAnim(a0)
00010FEC 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010FF0 6700                       		beq.s	@isgeyser	; if yes, branch
00010FF2 117C 0004 001C             		move.b	#4,obAnim(a0)
00010FF8 6000                       		bra.s	GMake_Display
00010FFA                            ; ===========================================================================
00010FFA                            
00010FFA                            	@isgeyser:
00010FFA 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010FFE 08E9 0001 0022             		bset	#1,obStatus(a1)
00011004 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001100A 6000                       		bra.s	GMake_Display
0001100C                            ; ===========================================================================
0001100C                            
0001100C                            GMake_ChkType:	; Routine 4
0001100C 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011010 6700                       		beq.s	GMake_Display	; if yes, branch
00011012 5428 0024                  		addq.b	#2,obRoutine(a0)
00011016 4E75                       		rts	
00011018                            ; ===========================================================================
00011018                            
00011018                            GMake_Display:	; Routine 8
00011018 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001101E 6100 B7D4                  		bsr.w	AnimateSprite
00011022 6100 E6E8                  		bsr.w	DisplaySprite
00011026 4E75                       		rts	
00011028                            ; ===========================================================================
00011028                            
00011028                            GMake_Delete:	; Routine $A
00011028 117C 0000 001C             		move.b	#0,obAnim(a0)
0001102E 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011034 4A28 0028                  		tst.b	obSubtype(a0)
00011038 6700 E712                  		beq.w	DeleteObject
0001103C 4E75                       		rts	
0001103E                            
0001103E                            
0001103E                            ; ---------------------------------------------------------------------------
0001103E                            ; Object 4D - lava geyser / lavafall (MZ)
0001103E                            ; ---------------------------------------------------------------------------
0001103E                            
0001103E                            LavaGeyser:
0001103E 7000                       		moveq	#0,d0
00011040 1028 0024                  		move.b	obRoutine(a0),d0
00011044 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00011048 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001104C 6000 E6BE                  		bra.w	DisplaySprite
00011050                            ; ===========================================================================
00011050 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011052 0000                       		dc.w Geyser_Action-Geyser_Index
00011054 0000                       		dc.w loc_EFFC-Geyser_Index
00011056 0000                       		dc.w Geyser_Delete-Geyser_Index
00011058                            
00011058 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0001105C                            ; ===========================================================================
0001105C                            
0001105C                            Geyser_Main:	; Routine 0
0001105C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011060 3168 000C 0030             		move.w	obY(a0),$30(a0)
00011066 4A28 0028                  		tst.b	obSubtype(a0)
0001106A 6700                       		beq.s	@isgeyser
0001106C 0468 0250 000C             		subi.w	#$250,obY(a0)
00011072                            
00011072                            	@isgeyser:
00011072 7000                       		moveq	#0,d0
00011074 1028 0028                  		move.b	obSubtype(a0),d0
00011078 D040                       		add.w	d0,d0
0001107A 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011080 2248                       		movea.l	a0,a1
00011082 7201                       		moveq	#1,d1
00011084 6100                       		bsr.s	@makelava
00011086 6000                       		bra.s	@activate
00011088                            ; ===========================================================================
00011088                            
00011088                            	@loop:
00011088 6100 EB24                  		bsr.w	FindNextFreeObj
0001108C 6600                       		bne.s	@fail
0001108E                            
0001108E                            @makelava:
0001108E 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011092 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001109A 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
000110A0 137C 0004 0001             		move.b	#4,obRender(a1)
000110A6 137C 0020 0014             		move.b	#$20,obActWid(a1)
000110AC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000110B2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000110B8 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000110BE 337C 0080 0018             		move.w	#$80,obPriority(a1)
000110C4 137C 0005 001C             		move.b	#5,obAnim(a1)
000110CA 4A28 0028                  		tst.b	obSubtype(a0)
000110CE 6700                       		beq.s	@fail
000110D0 137C 0002 001C             		move.b	#2,obAnim(a1)
000110D6                            
000110D6                            	@fail:
000110D6 51C9 FFB0                  		dbf	d1,@loop
000110DA 4E75                       		rts	
000110DC                            ; ===========================================================================
000110DC                            
000110DC                            @activate:
000110DC 0669 0060 000C             		addi.w	#$60,obY(a1)
000110E2 3368 0030 0030             		move.w	$30(a0),$30(a1)
000110E8 0669 0060 0030             		addi.w	#$60,$30(a1)
000110EE 137C 0093 0020             		move.b	#$93,obColType(a1)
000110F4 137C 0080 0016             		move.b	#$80,obHeight(a1)
000110FA 08E9 0004 0001             		bset	#4,obRender(a1)
00011100 5829 0024                  		addq.b	#4,obRoutine(a1)
00011104 2348 003C                  		move.l	a0,$3C(a1)
00011108 4A28 0028                  		tst.b	obSubtype(a0)
0001110C 6700                       		beq.s	@sound
0001110E 7200                       		moveq	#0,d1
00011110 6100 FF76                  		bsr.w	@loop
00011114 5429 0024                  		addq.b	#2,obRoutine(a1)
00011118 08E9 0004 0002             		bset	#4,obGfx(a1)
0001111E 0669 0100 000C             		addi.w	#$100,obY(a1)
00011124 337C 0000 0018             		move.w	#0,obPriority(a1)
0001112A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011130 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011136 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001113C                            
0001113C                            	@sound:
00011146                            
00011146                            Geyser_Action:	; Routine 2
00011146 7000                       		moveq	#0,d0
00011148 1028 0028                  		move.b	obSubtype(a0),d0
0001114C D040                       		add.w	d0,d0
0001114E 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011152 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011156 6100 E5A0                  		bsr.w	SpeedToPos
0001115A 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011160 6100 B692                  		bsr.w	AnimateSprite
00011164                            
00011164                            Geyser_ChkDel:
00011182 4E75                       		rts	
00011184                            ; ===========================================================================
00011184 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011186 0000                       		dc.w Geyser_Type01-Geyser_Types
00011188                            ; ===========================================================================
00011188                            
00011188                            Geyser_Type00:
00011188 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001118E 3028 0030                  		move.w	$30(a0),d0
00011192 B068 000C                  		cmp.w	obY(a0),d0
00011196 6400                       		bcc.s	locret_EFDA
00011198 5828 0024                  		addq.b	#4,obRoutine(a0)
0001119C 2268 003C                  		movea.l	$3C(a0),a1
000111A0 137C 0003 001C             		move.b	#3,obAnim(a1)
000111A6                            
000111A6                            locret_EFDA:
000111A6 4E75                       		rts	
000111A8                            ; ===========================================================================
000111A8                            
000111A8                            Geyser_Type01:
000111A8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000111AE 3028 0030                  		move.w	$30(a0),d0
000111B2 B068 000C                  		cmp.w	obY(a0),d0
000111B6 6400                       		bcc.s	locret_EFFA
000111B8 5828 0024                  		addq.b	#4,obRoutine(a0)
000111BC 2268 003C                  		movea.l	$3C(a0),a1
000111C0 137C 0001 001C             		move.b	#1,obAnim(a1)
000111C6                            
000111C6                            locret_EFFA:
000111C6 4E75                       		rts	
000111C8                            ; ===========================================================================
000111C8                            
000111C8                            loc_EFFC:	; Routine 4
000111C8 2268 003C                  		movea.l	$3C(a0),a1
000111CC 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000111D2 6700 0000                  		beq.w	Geyser_Delete
000111D6 3029 000C                  		move.w	obY(a1),d0
000111DA 0640 0060                  		addi.w	#$60,d0
000111DE 3140 000C                  		move.w	d0,obY(a0)
000111E2 9068 0030                  		sub.w	$30(a0),d0
000111E6 4440                       		neg.w	d0
000111E8 7208                       		moveq	#8,d1
000111EA 0C40 0040                  		cmpi.w	#$40,d0
000111EE 6C00                       		bge.s	loc_F026
000111F0 720B                       		moveq	#$B,d1
000111F2                            
000111F2                            loc_F026:
000111F2 0C40 0080                  		cmpi.w	#$80,d0
000111F6 6F00                       		ble.s	loc_F02E
000111F8 720E                       		moveq	#$E,d1
000111FA                            
000111FA                            loc_F02E:
000111FA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000111FE 6A00                       		bpl.s	loc_F04C
00011200 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011206 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001120A 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011210 6500                       		bcs.s	loc_F04C
00011212 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011218                            
00011218                            loc_F04C:
00011218 1028 001B                  		move.b	obAniFrame(a0),d0
0001121C D001                       		add.b	d1,d0
0001121E 1140 001A                  		move.b	d0,obFrame(a0)
00011222 6000 FF40                  		bra.w	Geyser_ChkDel
00011226                            ; ===========================================================================
00011226                            
00011226                            Geyser_Delete:	; Routine 6
00011226 6000 E524                  		bra.w	DeleteObject
00011226 6000 E524                  		bra.w	DeleteObject
0001122A                            		include	"_incObj\4E Wall of Lava.asm"
0001122A                            ; ---------------------------------------------------------------------------
0001122A                            ; Object 4E - advancing	wall of	lava (MZ)
0001122A                            ; ---------------------------------------------------------------------------
0001122A                            
0001122A                            LavaWall:
0001122A 7000                       		moveq	#0,d0
0001122C 1028 0024                  		move.b	obRoutine(a0),d0
00011230 323B 0000                  		move.w	LWall_Index(pc,d0.w),d1
00011234 4EFB 1000                  		jmp	LWall_Index(pc,d1.w)
00011238                            ; ===========================================================================
00011238 0000                       LWall_Index:	dc.w LWall_Main-LWall_Index
0001123A 0000                       		dc.w LWall_Solid-LWall_Index
0001123C 0000                       		dc.w LWall_Action-LWall_Index
0001123E 0000                       		dc.w LWall_Move-LWall_Index
00011240 0000                       		dc.w LWall_Delete-LWall_Index
00011242                            
00011242 =00000036                  lwall_flag:	equ $36		; flag to start wall moving
00011242                            ; ===========================================================================
00011242                            
00011242                            LWall_Main:	; Routine 0
00011242 5828 0024                  		addq.b	#4,obRoutine(a0)
00011246 2248                       		movea.l	a0,a1
00011248 7201                       		moveq	#1,d1
0001124A 6000                       		bra.s	@make
0001124C                            ; ===========================================================================
0001124C                            
0001124C                            	@loop:
0001124C 6100 E960                  		bsr.w	FindNextFreeObj
00011250 6600                       		bne.s	@fail
00011252                            
00011252                            @make:
00011252 12BC 004E                  		move.b	#id_LavaWall,0(a1)	; load object
00011256 237C 0000 0000 0004        		move.l	#Map_LWall,obMap(a1)
0001125E 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011264 137C 0004 0001             		move.b	#4,obRender(a1)
0001126A 137C 0050 0014             		move.b	#$50,obActWid(a1)
00011270 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011276 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001127C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011282 137C 0000 001C             		move.b	#0,obAnim(a1)
00011288 137C 0094 0020             		move.b	#$94,obColType(a1)
0001128E 2348 003C                  		move.l	a0,$3C(a1)
00011292                            
00011292                            	@fail:
00011292 51C9 FFB8                  		dbf	d1,@loop	; repeat sequence once
00011296                            
00011296 5C29 0024                  		addq.b	#6,obRoutine(a1)
0001129A 137C 0004 001A             		move.b	#4,obFrame(a1)
000112A0                            
000112A0                            LWall_Action:	; Routine 4
000112A0 3038 D008                  		move.w	(v_player+obX).w,d0
000112A4 9068 0008                  		sub.w	obX(a0),d0
000112A8 6400                       		bcc.s	@rangechk
000112AA 4440                       		neg.w	d0
000112AC                            
000112AC                            	@rangechk:
000112AC 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
000112B0 6400                       		bcc.s	@movewall	; if not, branch
000112B2 3038 D00C                  		move.w	(v_player+obY).w,d0
000112B6 9068 000C                  		sub.w	obY(a0),d0
000112BA 6400                       		bcc.s	@rangechk2
000112BC 4440                       		neg.w	d0
000112BE                            
000112BE                            	@rangechk2:
000112BE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
000112C2 6400                       		bcc.s	@movewall	; if not, branch
000112C4 117C 0001 0036             		move.b	#1,lwall_flag(a0) ; set object to move
000112CA 6000                       		bra.s	LWall_Solid
000112CC                            ; ===========================================================================
000112CC                            
000112CC                            @movewall:
000112CC 4A28 0036                  		tst.b	lwall_flag(a0)	; is object set	to move?
000112D0 6700                       		beq.s	LWall_Solid	; if not, branch
000112D2 317C 0180 0010             		move.w	#$180,obVelX(a0) ; set object speed
000112D8 5528 0024                  		subq.b	#2,$24(a0)
000112DC                            
000112DC                            LWall_Solid:	; Routine 2
000112DC 323C 002B                  		move.w	#$2B,d1
000112E0 343C 0018                  		move.w	#$18,d2
000112E4 3602                       		move.w	d2,d3
000112E6 5243                       		addq.w	#1,d3
000112E8 3828 0008                  		move.w	obX(a0),d4
000112EC 1028 0024                  		move.b	obRoutine(a0),d0
000112F0 3F00                       		move.w	d0,-(sp)
000112F2 6100 0000                  		bsr.w	SolidObject
000112F6 301F                       		move.w	(sp)+,d0
000112F8 1140 0024                  		move.b	d0,obRoutine(a0)
000112FC 0C68 06A0 0008             		cmpi.w	#$6A0,obX(a0)	; has object reached $6A0 on the x-axis?
00011302 6600                       		bne.s	@animate	; if not, branch
00011304 4268 0010                  		clr.w	obVelX(a0)	; stop object moving
00011308 4228 0036                  		clr.b	lwall_flag(a0)
0001130C                            
0001130C                            	@animate:
0001130C 43F9 0000 0000             		lea	(Ani_LWall).l,a1
00011312 6100 B4E0                  		bsr.w	AnimateSprite
00011316 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001131C 6400                       		bcc.s	@rangechk
0001131E 6100 E3D8                  		bsr.w	SpeedToPos
00011322                            
00011322                            	@rangechk:
00011322 6100 E3E8                  		bsr.w	DisplaySprite
00011326 4A28 0036                  		tst.b	lwall_flag(a0)	; is wall already moving?
0001132A 6600                       		bne.s	@moving		; if yes, branch
00011348                            
00011348                            	@moving:
00011348 4E75                       		rts	
0001134A                            ; ===========================================================================
0001134A                            
0001134A                            @chkgone:
0001134A 45F8 FC00                  		lea	(v_objstate).w,a2
0001134E 7000                       		moveq	#0,d0
00011350 1028 0023                  		move.b	obRespawnNo(a0),d0
00011354 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001135A 117C 0008 0024             		move.b	#8,obRoutine(a0)
00011360 4E75                       		rts	
00011362                            ; ===========================================================================
00011362                            
00011362                            LWall_Move:	; Routine 6
00011362 2268 003C                  		movea.l	$3C(a0),a1
00011366 0C29 0008 0024             		cmpi.b	#8,obRoutine(a1)
0001136C 6700                       		beq.s	LWall_Delete
0001136E 3169 0008 0008             		move.w	obX(a1),obX(a0)	; move rest of lava wall
00011374 0468 0080 0008             		subi.w	#$80,obX(a0)
0001137A 6000 E390                  		bra.w	DisplaySprite
0001137E                            ; ===========================================================================
0001137E                            
0001137E                            LWall_Delete:	; Routine 8
0001137E 6000 E3CC                  		bra.w	DeleteObject
0001137E 6000 E3CC                  		bra.w	DeleteObject
00011382                            		include	"_incObj\54 Lava Tag.asm"
00011382                            ; ---------------------------------------------------------------------------
00011382                            ; Object 54 - invisible	lava tag (MZ)
00011382                            ; ---------------------------------------------------------------------------
00011382                            
00011382                            LavaTag:
00011382 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011388 6E00 0000                  		bgt	WaterTag	;TIS
0001138C 7000                       		moveq	#0,d0
0001138E 1028 0024                  		move.b	obRoutine(a0),d0
00011392 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011396 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
0001139A                            ; ===========================================================================
0001139A 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
0001139C 0000                       		dc.w LTag_ChkDel-LTag_Index
0001139E                            
0001139E 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000113A2 00                         		even
000113A2                            ; ===========================================================================
000113A2                            
000113A2                            LTag_Main:	; Routine 0
000113A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000113A6 7000                       		moveq	#0,d0
000113A8 1028 0028                  		move.b	obSubtype(a0),d0
000113AC 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000113B2 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000113BA 117C 0084 0001             		move.b	#$84,obRender(a0)
000113C0                            
000113C0                            LTag_ChkDel:	; Routine 2
000113C0 3028 0008                  		move.w	obX(a0),d0
000113C4 0240 FF80                  		andi.w	#$FF80,d0
000113C8 3238 F700                  		move.w	(v_screenposx).w,d1
000113CC 0441 0080                  		subi.w	#$80,d1
000113D0 0241 FF80                  		andi.w	#$FF80,d1
000113D4 9041                       		sub.w	d1,d0
000113D6 6B00 E374                  		bmi.w	DeleteObject
000113DA 0C40 0280                  		cmpi.w	#$280,d0
000113DE 6200 E36C                  		bhi.w	DeleteObject
000113E2 4E75                       		rts
000113E4                            
000113E4                            
000113E4                            ; ---------------------------------------------------------------------------
000113E4                            ; Object 54a - invisible	water tag (MZ) - TIS
000113E4                            ; ---------------------------------------------------------------------------
000113E4                            
000113E4                            WaterTag:	
000113E4 7000                       		moveq	#0,d0
000113E6 1028 0024                  		move.b	obRoutine(a0),d0
000113EA 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000113EE 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000113F2                            ; ===========================================================================
000113F2 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
000113F4 0000                       		dc.w WTag_ChkDel-WTag_Index
000113F6                            
000113F6 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000113FA 00                         		even
000113FA                            ; ===========================================================================
000113FA                            
000113FA                            
000113FA                            WTag_Main:	; Routine 0
000113FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000113FE 7000                       		moveq	#0,d0
00011400                            		;move.b	obSubtype(a0),d0
00011400                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011400 0400 00F0                  		sub.b	#$F0,d0
00011404 1178 0096 0020             		move.b	$96,obColType(a0)							
0001140A                            		;move.l	#Map_LTag,obMap(a0)
0001140A                            		;move.b	#$84,obRender(a0)
0001140A                            
0001140A                            WTag_ChkDel:	; Routine 2
0001140A 3028 0008                  		move.w	obX(a0),d0
0001140E 0240 FF80                  		andi.w	#$FF80,d0
00011412 3238 F700                  		move.w	(v_screenposx).w,d1
00011416 0441 0080                  		subi.w	#$80,d1
0001141A 0241 FF80                  		andi.w	#$FF80,d1
0001141E 9041                       		sub.w	d1,d0
00011420 6B00 E32A                  		bmi.w	DeleteObject
00011424 0C40 0280                  		cmpi.w	#$280,d0
00011428 6200 E322                  		bhi.w	DeleteObject
0001142C 4E75                       		rts
0001142E                            
0001142E                            
0001142E                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001142E                            ; ---------------------------------------------------------------------------
0001142E                            ; Sprite mappings - invisible lava tag (MZ)
0001142E                            ; ---------------------------------------------------------------------------
0001142E                            Map_LTag_internal:
0001142E 0000                       		dc.w @0-Map_LTag_internal
00011430 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011432 00                         		even
00011432 00                         		even
00011432                            		include	"_anim\Lava Geyser.asm"
00011432                            ; ---------------------------------------------------------------------------
00011432                            ; Animation script - geyser of lava (MZ)
00011432                            ; ---------------------------------------------------------------------------
00011432 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011434 0000                       		dc.w @bubble2-Ani_Geyser
00011436 0000                       		dc.w @end-Ani_Geyser
00011438 0000                       		dc.w @bubble3-Ani_Geyser
0001143A 0000                       		dc.w @blank-Ani_Geyser
0001143C 0000                       		dc.w @bubble4-Ani_Geyser
0001143E 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011448 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
0001144C 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011450 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011458 0F13 FF                    @blank:		dc.b $F, $13, afEnd
0001145C 00                         		even
0001145C 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011460                            		even
00011460                            		even
00011460                            		include	"_anim\Wall of Lava.asm"
00011460                            ; ---------------------------------------------------------------------------
00011460                            ; Animation script - advancing wall of lava (MZ)
00011460                            ; ---------------------------------------------------------------------------
00011460 0000                       Ani_LWall:	dc.w @wall-Ani_LWall
00011462 0900 0102 03FF             @wall:		dc.b 9,	0, 1, 2, 3, afEnd
00011468                            		even
00011468                            		even
00011468                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011468                            ; ---------------------------------------------------------------------------
00011468                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011468                            ; ---------------------------------------------------------------------------
00011468                            Map_Geyser_internal:
00011468 0000                       		dc.w @bubble1-Map_Geyser_internal
0001146A 0000                       		dc.w @bubble2-Map_Geyser_internal
0001146C 0000                       		dc.w @bubble3-Map_Geyser_internal
0001146E 0000                       		dc.w @bubble4-Map_Geyser_internal
00011470 0000                       		dc.w @bubble5-Map_Geyser_internal
00011472 0000                       		dc.w @bubble6-Map_Geyser_internal
00011474 0000                       		dc.w @end1-Map_Geyser_internal
00011476 0000                       		dc.w @end2-Map_Geyser_internal
00011478 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001147A 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001147C 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001147E 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011480 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011482 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011484 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011486 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011488 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001148A 0000                       		dc.w @bubble7-Map_Geyser_internal
0001148C 0000                       		dc.w @bubble8-Map_Geyser_internal
0001148E 0000                       		dc.w @blank-Map_Geyser_internal
00011490 02                         @bubble1:	dc.b 2
00011491 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011496 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001149B 02                         @bubble2:	dc.b 2
0001149C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000114A1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000114A6 04                         @bubble3:	dc.b 4
000114A7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000114AC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000114B1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000114B6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000114BB 04                         @bubble4:	dc.b 4
000114BC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000114C1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000114C6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000114CB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000114D0 06                         @bubble5:	dc.b 6
000114D1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000114D6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000114DB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000114E0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000114E5 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000114EA E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000114EF 06                         @bubble6:	dc.b 6
000114F0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000114F5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000114FA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000114FF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011504 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011509 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001150E 02                         @end1:		dc.b 2
0001150F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011514 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011519 02                         @end2:		dc.b 2
0001151A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001151F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011524 0A                         @medcolumn1:	dc.b $A
00011525 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001152A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001152F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011534 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011539 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001153E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011543 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011548 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001154D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011552 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011557 0A                         @medcolumn2:	dc.b $A
00011558 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001155D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011562 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011567 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001156C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011571 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011576 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001157B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011580 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011585 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001158A 0A                         @medcolumn3:	dc.b $A
0001158B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011590 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011595 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001159A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001159F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000115A4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000115A9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000115AE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000115B3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000115B8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000115BD 06                         @shortcolumn1:	dc.b 6
000115BE 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000115C3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000115C8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000115CD B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000115D2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000115D7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000115DC 06                         @shortcolumn2:	dc.b 6
000115DD 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000115E2 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000115E7 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000115EC B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000115F1 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000115F6 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000115FB 06                         @shortcolumn3:	dc.b 6
000115FC 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011601 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011606 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001160B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011610 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011615 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001161A 10                         @longcolumn1:	dc.b $10
0001161B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011620 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011625 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001162A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001162F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011634 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011639 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001163E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011643 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011648 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001164D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011652 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011657 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001165C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011661 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011666 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001166B 10                         @longcolumn2:	dc.b $10
0001166C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011671 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011676 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001167B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011680 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011685 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001168A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001168F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011694 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011699 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001169E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000116A3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000116A8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000116AD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000116B2 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000116B7 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000116BC 10                         @longcolumn3:	dc.b $10
000116BD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116C2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116C7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116CC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116D1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116D6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116DB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116E0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116E5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116EA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116EF 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000116F4 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000116F9 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000116FE 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011703 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011708 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001170D 06                         @bubble7:	dc.b 6
0001170E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011713 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011718 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001171D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011722 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011727 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001172C 06                         @bubble8:	dc.b 6
0001172D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011732 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011737 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001173C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011741 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011746 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001174B 00                         @blank:	dc.b 0
0001174C                            		even
0001174C                            		even
0001174C                            Map_LWall:	include	"_maps\Wall of Lava.asm"
0001174C                            ; ---------------------------------------------------------------------------
0001174C                            ; Sprite mappings - advancing wall of lava (MZ)
0001174C                            ; ---------------------------------------------------------------------------
0001174C                            Map_LWall_internal:
0001174C 0000                       		dc.w byte_F538-Map_LWall_internal
0001174E 0000                       		dc.w byte_F566-Map_LWall_internal
00011750 0000                       		dc.w byte_F594-Map_LWall_internal
00011752 0000                       		dc.w byte_F5C2-Map_LWall_internal
00011754 0000                       		dc.w byte_F5F0-Map_LWall_internal
00011756 09                         byte_F538:	dc.b 9
00011757 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001175C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00011761 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011766 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001176B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011770 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011775 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001177A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001177F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011784 09                         byte_F566:	dc.b 9
00011785 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001178A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001178F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011794 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00011799 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001179E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000117A3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000117A8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000117AD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000117B2 09                         byte_F594:	dc.b 9
000117B3 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000117B8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000117BD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000117C2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000117C7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000117CC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000117D1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000117D6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000117DB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000117E0 09                         byte_F5C2:	dc.b 9
000117E1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000117E6 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000117EB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000117F0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000117F5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000117FA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000117FF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00011804 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011809 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001180E 08                         byte_F5F0:	dc.b 8
0001180F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00011814 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00011819 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001181E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00011823 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00011828 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001182D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00011832 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00011838 00                         		even
00011838 00                         		even
00011838                            
00011838                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011838                            ; ---------------------------------------------------------------------------
00011838                            ; Object 40 - Moto Bug enemy (GHZ)
00011838                            ; ---------------------------------------------------------------------------
00011838                            
00011838                            MotoBug:
00011838 7000                       		moveq	#0,d0
0001183A 1028 0024                  		move.b	obRoutine(a0),d0
0001183E 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011842 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011846                            ; ===========================================================================
00011846 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011848 0000                       		dc.w Moto_Action-Moto_Index
0001184A 0000                       		dc.w Moto_Animate-Moto_Index
0001184C 0000                       		dc.w Moto_Delete-Moto_Index
0001184E                            ; ===========================================================================
0001184E                            
0001184E                            Moto_Main:	; Routine 0
0001184E 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011856 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001185C 117C 0004 0001             		move.b	#4,obRender(a0)
00011862 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011868 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001186E 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011872 6600                       		bne.s	@smoke		; if yes, branch
00011874 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001187A 117C 0008 0017             		move.b	#8,obWidth(a0)
00011880 117C 000C 0020             		move.b	#$C,obColType(a0)
00011886 6100 DE38                  		bsr.w	ObjectFall
0001188A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011890 4A41                       		tst.w	d1
00011892 6A00                       		bpl.s	@notonfloor
00011894 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011898 317C 0000 0012             		move.w	#0,obVelY(a0)
0001189E 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000118A2 0868 0000 0022             		bchg	#0,obStatus(a0)
000118A8                            
000118A8                            	@notonfloor:
000118A8 4E75                       		rts	
000118AA                            ; ===========================================================================
000118AA                            
000118AA                            @smoke:
000118AA 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000118AE 6000 0000                  		bra.w	Moto_Animate
000118B2                            ; ===========================================================================
000118B2                            
000118B2                            Moto_Action:	; Routine 2
000118B2 7000                       		moveq	#0,d0
000118B4 1028 0025                  		move.b	ob2ndRout(a0),d0
000118B8 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000118BC 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000118C0 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000118C6 6100 AF2C                  		bsr.w	AnimateSprite
000118CA                            
000118CA                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            ; Subroutine to remember whether an object is destroyed/collected
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            
000118CA                            RememberState:
000118E8 6000 DE22                  		bra.w	DisplaySprite
000118EC                            
000118EC                            	@offscreen:
000118EC 45F8 FC00                  		lea	(v_objstate).w,a2
000118F0 7000                       		moveq	#0,d0
000118F2 1028 0023                  		move.b	obRespawnNo(a0),d0
000118F6 6700                       		beq.s	@delete
000118F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000118FE                            
000118FE                            	@delete:
000118FE 6000 DE4C                  		bra.w	DeleteObject
000118FE 6000 DE4C                  		bra.w	DeleteObject
00011902                            
00011902                            ; ===========================================================================
00011902 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011904 0000                       		dc.w @findfloor-Moto_ActIndex
00011906                            
00011906 =00000030                  @time:		equ $30
00011906 =00000033                  @smokedelay:	equ $33
00011906                            ; ===========================================================================
00011906                            
00011906                            @move:
00011906 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0001190A 6A00                       		bpl.s	@wait		; if time remains, branch
0001190C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011910 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011916 117C 0001 001C             		move.b	#1,obAnim(a0)
0001191C 0868 0000 0022             		bchg	#0,obStatus(a0)
00011922 6600                       		bne.s	@wait
00011924 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011928                            
00011928                            	@wait:
00011928 4E75                       		rts	
0001192A                            ; ===========================================================================
0001192A                            
0001192A                            @findfloor:
0001192A 6100 DDCC                  		bsr.w	SpeedToPos
0001192E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011934 0C41 FFF8                  		cmpi.w	#-8,d1
00011938 6D00                       		blt.s	@pause
0001193A 0C41 000C                  		cmpi.w	#$C,d1
0001193E 6C00                       		bge.s	@pause
00011940 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011944 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011948 6A00                       		bpl.s	@nosmoke
0001194A 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011950 6100 E246                  		bsr.w	FindFreeObj
00011954 6600                       		bne.s	@nosmoke
00011956 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001195A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011960 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011966 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001196C 137C 0002 001C             		move.b	#2,obAnim(a1)
00011972                            
00011972                            	@nosmoke:
00011972 4E75                       		rts	
00011974                            
00011974                            @pause:
00011974 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011978 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
0001197E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011984 117C 0000 001C             		move.b	#0,obAnim(a0)
0001198A 4E75                       		rts	
0001198C                            ; ===========================================================================
0001198C                            
0001198C                            Moto_Animate:	; Routine 4
0001198C 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011992 6100 AE60                  		bsr.w	AnimateSprite
00011996 6000 DD74                  		bra.w	DisplaySprite
0001199A                            ; ===========================================================================
0001199A                            
0001199A                            Moto_Delete:	; Routine 6
0001199A 6000 DDB0                  		bra.w	DeleteObject
0001199A 6000 DDB0                  		bra.w	DeleteObject
0001199E                            		include	"_anim\Moto Bug.asm"
0001199E                            ; ---------------------------------------------------------------------------
0001199E                            ; Animation script - Motobug enemy
0001199E                            ; ---------------------------------------------------------------------------
0001199E 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000119A0 0000                       		dc.w @walk-Ani_Moto
000119A2 0000                       		dc.w @smoke-Ani_Moto
000119A4                            
000119A4 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000119A8 00                         		even
000119A8 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000119AE 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000119BC 00                         		even
000119BC 00                         		even
000119BC                            Map_Moto:	include	"_maps\Moto Bug.asm"
000119BC                            ; --------------------------------------------------------------------------------
000119BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119BC                            ; --------------------------------------------------------------------------------
000119BC                            
000119BC                            SME_TTY9T:	
000119BC 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000119C0 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000119C4 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000119C8 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000119CA 04                         SME_TTY9T_E:	dc.b 4	
000119CB F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000119D0 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000119D5 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000119DA 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000119DF 04                         SME_TTY9T_23:	dc.b 4	
000119E0 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000119E5 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
000119EA F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
000119EF 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
000119F4 05                         SME_TTY9T_38:	dc.b 5	
000119F5 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000119FA 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
000119FF F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A04 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011A09 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011A0E 01                         SME_TTY9T_52:	dc.b 1	
00011A0F FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011A14 01                         SME_TTY9T_58:	dc.b 1	
00011A15 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011A1A 01                         SME_TTY9T_5E:	dc.b 1	
00011A1B FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011A20 00                         SME_TTY9T_64:	dc.b 0	
00011A22 00                         		even
00011A22 00                         		even
00011A22                            		include	"_incObj\4F.asm"
00011A22                            ; ---------------------------------------------------------------------------
00011A22                            ; Object 4F - Splats
00011A22                            ; ---------------------------------------------------------------------------
00011A22                            
00011A22                            Obj4F:
00011A22 7000                                       moveq   #0,d0
00011A24 1028 0024                                  move.b  $24(a0),d0
00011A28 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011A2C 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011A30                            ; ---------------------------------------------------------------------------
00011A30 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011A32 0000                                       dc.w loc_D246-ObjSplats_Index
00011A34 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011A36 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011A38                            ; ---------------------------------------------------------------------------
00011A38                            
00011A38                            ObjSplats_Init:
00011A38 5428 0024                                  addq.b  #2,$24(a0)
00011A3C 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011A44 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011A4A 117C 0004 0001                             move.b  #4,1(a0)
00011A50 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A56 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A5C 117C 0014 0016                             move.b  #$14,$16(a0)
00011A62 117C 0002 0020                             move.b  #2,$20(a0)
00011A68 4A28 0028                                  tst.b   $28(a0)
00011A6C 6700                                       beq.s   loc_D246
00011A6E 343C 0300                                  move.w  #$300,d2
00011A72 6000                                       bra.s   ObjSplats_FaceRight
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            
00011A74                            loc_D246:
00011A74 343C 00E0                                  move.w  #$E0,d2
00011A78                            
00011A78                            ObjSplats_FaceRight:
00011A78 323C 0100                                  move.w  #$100,d1
00011A7C 08E8 0000 0001                             bset    #0,1(a0)
00011A82 3038 D008                                  move.w  ($FFFFD008).w,d0
00011A86 9068 0008                                  sub.w   8(a0),d0
00011A8A 6400                                       bcc.s   ObjSplats_Move
00011A8C 4440                                       neg.w   d0
00011A8E 4441                                       neg.w   d1
00011A90 08A8 0000 0001                             bclr    #0,1(a0)
00011A96                            
00011A96                            ObjSplats_Move:
00011A96 B042                                       cmp.w   d2,d0
00011A98 6400                                       bcc.s   ObjSplats_Bounce
00011A9A 3141 0010                                  move.w  d1,$10(a0)
00011A9E 5428 0024                                  addq.b  #2,$24(a0)
00011AA2                            
00011AA2                            ObjSplats_Bounce:
00011AA2 6100 DC1C                                  bsr.w   ObjectFall
00011AA6 117C 0001 001A                             move.b  #1,$1A(a0)
00011AAC 4A68 0012                                  tst.w   $12(a0)
00011AB0 6B00                                       bmi.s   ObjSplats_Turn
00011AB2 117C 0000 001A                             move.b  #0,$1A(a0)
00011AB8 6100 0000                                  bsr.w   ObjFloorDist
00011ABC 4A41                                       tst.w   d1
00011ABE 6A00                                       bpl.s   ObjSplats_Turn
00011AC0 3011                                       move.w  (a1),d0
00011AC2 0240 03FF                                  andi.w  #$3FF,d0
00011AC6 0C40 02D2                                  cmpi.w  #$2D2,d0
00011ACA 6500                                       bcs.s   ObjSplats_Fall
00011ACC 5428 0024                                  addq.b  #2,$24(a0)
00011AD0 6000                                       bra.s   ObjSplats_Turn
00011AD2                            ; ---------------------------------------------------------------------------
00011AD2                            
00011AD2                            ObjSplats_Fall:
00011AD2 D368 000C                                  add.w   d1,$C(a0)
00011AD6 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011ADC                            
00011ADC                            ObjSplats_Turn:
00011ADC 6100 0000                                  bsr.w   Yad_ChkWall
00011AE0 6700                                       beq.s   loc_D2C4
00011AE2 4468 0010                                  neg.w   $10(a0)
00011AE6 0868 0000 0001                             bchg    #0,1(a0)
00011AEC 0868 0000 0022                             bchg    #0,$22(a0)
00011AF2                            
00011AF2                            loc_D2C4:
00011AF2 6000 FDD6                                  bra.w   RememberState
00011AF6                            ; ---------------------------------------------------------------------------
00011AF6                            
00011AF6                            loc_D2C8:
00011AF6 6100 DBC8                                  bsr.w   ObjectFall
00011AFA 6100 DC10                                  bsr.w   DisplaySprite
00011AFE 4A28 0001                                  tst.b   1(a0)
00011B02 6A00 DC48                                  bpl.w   DeleteObject
00011B06 4E75                                       rts
00011B06 4E75                                       rts
00011B08                            Map_Splats:	include	"_maps\Splats.asm"
00011B08 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011B0A 0000                                       dc.w unk_D31B-Map_Splats_internal
00011B0C 02                         unk_D310:       dc.b   2
00011B0D EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011B17 02                         unk_D31B:       dc.b   2
00011B18 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B18 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B22                            
00011B22                            		include	"_incObj\50 Yadrin.asm"
00011B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B22                            
00011B22                            
00011B22                            Yad_ChkWall:
00011B22 3038 FE04                  		move.w	(v_framecount).w,d0
00011B26 D047                       		add.w	d7,d0
00011B28 0240 0003                  		andi.w	#3,d0
00011B2C 6600                       		bne.s	loc_F836
00011B2E 7600                       		moveq	#0,d3
00011B30 1628 0014                  		move.b	obActWid(a0),d3
00011B34 4A68 0010                  		tst.w	obVelX(a0)
00011B38 6B00                       		bmi.s	loc_F82C
00011B3A 6100 0000                  		bsr.w	ObjHitWallRight
00011B3E 4A41                       		tst.w	d1
00011B40 6A00                       		bpl.s	loc_F836
00011B42                            
00011B42                            loc_F828:
00011B42 7001                       		moveq	#1,d0
00011B44 4E75                       		rts	
00011B46                            ; ===========================================================================
00011B46                            
00011B46                            loc_F82C:
00011B46 4643                       		not.w	d3
00011B48 6100 0000                  		bsr.w	ObjHitWallLeft
00011B4C 4A41                       		tst.w	d1
00011B4E 6BF2                       		bmi.s	loc_F828
00011B50                            
00011B50                            loc_F836:
00011B50 7000                       		moveq	#0,d0
00011B52 4E75                       		rts	
00011B54                            ; End of function Yad_ChkWall
00011B54                            
00011B54                            ; ===========================================================================
00011B54                            ; ---------------------------------------------------------------------------
00011B54                            ; Object 50 - Yadrin enemy (SYZ)
00011B54                            ; ---------------------------------------------------------------------------
00011B54                            
00011B54                            Yadrin:
00011B54 7000                       		moveq	#0,d0
00011B56 1028 0024                  		move.b	obRoutine(a0),d0
00011B5A 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B5E 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B62                            ; ===========================================================================
00011B62 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B64 0000                       		dc.w Yad_Action-Yad_Index
00011B66                            
00011B66 =00000030                  yad_timedelay:	equ $30
00011B66                            ; ===========================================================================
00011B66                            
00011B66                            Yad_Main:	; Routine 0
00011B66 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011B6E 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011B74 117C 0004 0001             		move.b	#4,obRender(a0)
00011B7A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011B80 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011B86 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011B8C 117C 0008 0017             		move.b	#8,obWidth(a0)
00011B92 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011B98 6100 DB26                  		bsr.w	ObjectFall
00011B9C 6100 0000                  		bsr.w	ObjFloorDist
00011BA0 4A41                       		tst.w	d1
00011BA2 6A00                       		bpl.s	locret_F89E
00011BA4 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011BA8 317C 0000 0012             		move.w	#0,obVelY(a0)
00011BAE 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BB2 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BB8                            
00011BB8                            	locret_F89E:
00011BB8 4E75                       		rts	
00011BBA                            ; ===========================================================================
00011BBA                            
00011BBA                            Yad_Action:	; Routine 2
00011BBA 7000                       		moveq	#0,d0
00011BBC 1028 0025                  		move.b	ob2ndRout(a0),d0
00011BC0 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011BC4 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011BC8 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011BCE 6100 AC24                  		bsr.w	AnimateSprite
00011BD2 6000 FCF6                  		bra.w	RememberState
00011BD6                            ; ===========================================================================
00011BD6 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011BD8 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011BDA                            ; ===========================================================================
00011BDA                            
00011BDA                            Yad_Move:
00011BDA 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011BDE 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011BE0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011BE4 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011BEA 117C 0001 001C             		move.b	#1,obAnim(a0)
00011BF0 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BF6 6600                       		bne.s	locret_F8E2
00011BF8 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011BFC                            
00011BFC                            	locret_F8E2:
00011BFC 4E75                       		rts	
00011BFE                            ; ===========================================================================
00011BFE                            
00011BFE                            Yad_FixToFloor:
00011BFE 6100 DAF8                  		bsr.w	SpeedToPos
00011C02 6100 0000                  		bsr.w	ObjFloorDist
00011C06 0C41 FFF8                  		cmpi.w	#-8,d1
00011C0A 6D00                       		blt.s	Yad_Pause
00011C0C 0C41 000C                  		cmpi.w	#$C,d1
00011C10 6C00                       		bge.s	Yad_Pause
00011C12 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011C16 6100 FF0A                  		bsr.w	Yad_ChkWall
00011C1A 6600                       		bne.s	Yad_Pause
00011C1C 4E75                       		rts	
00011C1E                            ; ===========================================================================
00011C1E                            
00011C1E                            Yad_Pause:
00011C1E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011C22 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011C28 317C 0000 0010             		move.w	#0,obVelX(a0)
00011C2E 117C 0000 001C             		move.b	#0,obAnim(a0)
00011C34 4E75                       		rts	
00011C34 4E75                       		rts	
00011C36                            		include	"_anim\Yadrin.asm"
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            ; Animation script - Yadrin enemy
00011C36                            ; ---------------------------------------------------------------------------
00011C36 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011C38 0000                       		dc.w @walk-Ani_Yad
00011C3A                            
00011C3A 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011C3E 00                         		even
00011C3E 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C4C                            		even
00011C4C                            		even
00011C4C                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C4C                            ; --------------------------------------------------------------------------------
00011C4C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C4C                            ; --------------------------------------------------------------------------------
00011C4C                            
00011C4C                            SME_4WhIu:	
00011C4C 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C50 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C54 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C58 09                         SME_4WhIu_C:	dc.b 9	
00011C59 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C5E EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C63 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C68 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C6D FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C72 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C77 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C7C F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C81 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C86 09                         SME_4WhIu_3A:	dc.b 9	
00011C87 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011C8C FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C91 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C96 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C9B FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CA0 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CA5 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CAA EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CAF EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CB4 0C                         SME_4WhIu_68:	dc.b $C	
00011CB5 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CBA FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011CBF FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011CC4 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CC9 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CCE F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CD3 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CD8 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011CDD FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011CE2 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011CE7 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011CEC 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011CF1 0C                         SME_4WhIu_A5:	dc.b $C	
00011CF2 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CF7 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CFC FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D01 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D06 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D0B F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D10 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D15 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D1A FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D1F FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D24 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D29 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D2E 05                         SME_4WhIu_E2:	dc.b 5	
00011D2F F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D34 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D39 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D3E F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D43 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011D48 05                         SME_4WhIu_FC:	dc.b 5	
00011D49 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D4E 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D53 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D58 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D5D 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D62                            		even
00011D62                            		even
00011D62                            
00011D62                            		include	"_incObj\sub SolidObject.asm"
00011D62                            ; ---------------------------------------------------------------------------
00011D62                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D62                            ;
00011D62                            ; input:
00011D62                            ;	d1 = width
00011D62                            ;	d2 = height / 2 (when jumping)
00011D62                            ;	d3 = height / 2 (when walking)
00011D62                            ;	d4 = x-axis position
00011D62                            ; ---------------------------------------------------------------------------
00011D62                            
00011D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D62                            
00011D62                            
00011D62                            SolidObject:
00011D62 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D66 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D6A 3401                       		move.w	d1,d2
00011D6C D442                       		add.w	d2,d2
00011D6E 43F8 D000                  		lea	(v_player).w,a1
00011D72 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D78 6600                       		bne.s	@leave		; if yes, branch
00011D7A 3029 0008                  		move.w	obX(a1),d0
00011D7E 9068 0008                  		sub.w	obX(a0),d0
00011D82 D041                       		add.w	d1,d0
00011D84 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011D86 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011D88 6500                       		bcs.s	@stand		; if not, branch
00011D8A                            
00011D8A                            	@leave:
00011D8A 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011D90 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011D96 4228 0025                  		clr.b	obSolid(a0)
00011D9A 7800                       		moveq	#0,d4
00011D9C 4E75                       		rts	
00011D9E                            
00011D9E                            	@stand:
00011D9E 3404                       		move.w	d4,d2
00011DA0 4EB9 0000 96B4             		jsr	MvSonicOnPtfm
00011DA6 7800                       		moveq	#0,d4
00011DA8 4E75                       		rts	
00011DAA                            ; ===========================================================================
00011DAA                            
00011DAA                            SolidObject71:
00011DAA 4A28 0025                  		tst.b	obSolid(a0)
00011DAE 6700 0000                  		beq.w	loc_FAD0
00011DB2 3401                       		move.w	d1,d2
00011DB4 D442                       		add.w	d2,d2
00011DB6 43F8 D000                  		lea	(v_player).w,a1
00011DBA 0829 0001 0022             		btst	#1,obStatus(a1)
00011DC0 6600                       		bne.s	@leave
00011DC2 3029 0008                  		move.w	obX(a1),d0
00011DC6 9068 0008                  		sub.w	obX(a0),d0
00011DCA D041                       		add.w	d1,d0
00011DCC 6B00                       		bmi.s	@leave
00011DCE B042                       		cmp.w	d2,d0
00011DD0 6500                       		bcs.s	@stand
00011DD2                            
00011DD2                            	@leave:
00011DD2 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011DD8 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011DDE 4228 0025                  		clr.b	obSolid(a0)
00011DE2 7800                       		moveq	#0,d4
00011DE4 4E75                       		rts	
00011DE6                            
00011DE6                            	@stand:
00011DE6 3404                       		move.w	d4,d2
00011DE8 4EB9 0000 96B4             		jsr	MvSonicOnPtfm
00011DEE 7800                       		moveq	#0,d4
00011DF0 4E75                       		rts	
00011DF2                            ; ===========================================================================
00011DF2                            
00011DF2                            SolidObject2F:
00011DF2 43F8 D000                  		lea	(v_player).w,a1
00011DF6 4A28 0001                  		tst.b	obRender(a0)
00011DFA 6A00 0000                  		bpl.w	Solid_Ignore
00011DFE 3029 0008                  		move.w	obX(a1),d0
00011E02 9068 0008                  		sub.w	obX(a0),d0
00011E06 D041                       		add.w	d1,d0
00011E08 6B00 0000                  		bmi.w	Solid_Ignore
00011E0C 3601                       		move.w	d1,d3
00011E0E D643                       		add.w	d3,d3
00011E10 B043                       		cmp.w	d3,d0
00011E12 6200 0000                  		bhi.w	Solid_Ignore
00011E16 3A00                       		move.w	d0,d5
00011E18 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011E1E 6700                       		beq.s	@notflipped	; if not, branch
00011E20 4645                       		not.w	d5
00011E22 DA43                       		add.w	d3,d5
00011E24                            
00011E24                            	@notflipped:
00011E24 E24D                       		lsr.w	#1,d5
00011E26 7600                       		moveq	#0,d3
00011E28 1632 5000                  		move.b	(a2,d5.w),d3
00011E2C 9612                       		sub.b	(a2),d3
00011E2E 3A28 000C                  		move.w	obY(a0),d5
00011E32 9A43                       		sub.w	d3,d5
00011E34 1629 0016                  		move.b	obHeight(a1),d3
00011E38 4883                       		ext.w	d3
00011E3A D443                       		add.w	d3,d2
00011E3C 3629 000C                  		move.w	obY(a1),d3
00011E40 9645                       		sub.w	d5,d3
00011E42 5843                       		addq.w	#4,d3
00011E44 D642                       		add.w	d2,d3
00011E46 6B00 0000                  		bmi.w	Solid_Ignore
00011E4A 3802                       		move.w	d2,d4
00011E4C D844                       		add.w	d4,d4
00011E4E B644                       		cmp.w	d4,d3
00011E50 6400 0000                  		bcc.w	Solid_Ignore
00011E54 6000 0000                  		bra.w	loc_FB0E
00011E58                            ; ===========================================================================
00011E58                            
00011E58                            Solid_ChkEnter:
00011E58 4A28 0001                  		tst.b	obRender(a0)
00011E5C 6A00 0000                  		bpl.w	Solid_Ignore
00011E60                            
00011E60                            loc_FAD0:
00011E60 43F8 D000                  		lea	(v_player).w,a1
00011E64 3029 0008                  		move.w	obX(a1),d0
00011E68 9068 0008                  		sub.w	obX(a0),d0
00011E6C D041                       		add.w	d1,d0
00011E6E 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011E72 3601                       		move.w	d1,d3
00011E74 D643                       		add.w	d3,d3
00011E76 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011E78 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011E7C 1629 0016                  		move.b	obHeight(a1),d3
00011E80 4883                       		ext.w	d3
00011E82 D443                       		add.w	d3,d2
00011E84 3629 000C                  		move.w	obY(a1),d3
00011E88 9668 000C                  		sub.w	obY(a0),d3
00011E8C 5843                       		addq.w	#4,d3
00011E8E D642                       		add.w	d2,d3
00011E90 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011E94 3802                       		move.w	d2,d4
00011E96 D844                       		add.w	d4,d4
00011E98 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011E9A 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011E9E                            
00011E9E                            loc_FB0E:
00011E9E 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011EA2 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011EA6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011EAC 6400 0000                  			bcc.w	Solid_Debug
00011EB0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011EB4 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011EB8 3A00                       		move.w	d0,d5
00011EBA B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011EBC 6400                       		bcc.s	@isright	; if yes, branch
00011EBE D241                       		add.w	d1,d1
00011EC0 9041                       		sub.w	d1,d0
00011EC2 3A00                       		move.w	d0,d5
00011EC4 4445                       		neg.w	d5
00011EC6                            
00011EC6                            	@isright:
00011EC6 3203                       		move.w	d3,d1
00011EC8 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011ECA 6400                       		bcc.s	@isbelow	; if yes, branch
00011ECC                            
00011ECC 5943                       		subq.w	#4,d3
00011ECE 9644                       		sub.w	d4,d3
00011ED0 3203                       		move.w	d3,d1
00011ED2 4441                       		neg.w	d1
00011ED4                            
00011ED4                            	@isbelow:
00011ED4 BA41                       		cmp.w	d1,d5
00011ED6 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011EDA 0C41 0004                  		cmpi.w	#4,d1
00011EDE 6300                       		bls.s	Solid_SideAir
00011EE0 4A40                       		tst.w	d0		; where is Sonic?
00011EE2 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011EE4 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011EE6 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011EEA 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011EEC 6000                       		bra.s	Solid_Left
00011EEE                            ; ===========================================================================
00011EEE                            
00011EEE                            Solid_Right:
00011EEE 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011EF2 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011EF4                            
00011EF4                            Solid_Left:
00011EF4 337C 0000 0020             		move.w	#0,obInertia(a1)
00011EFA 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011F00                            
00011F00                            Solid_Centre:
00011F00 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011F04 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F0A 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011F0C 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011F12 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011F18 7801                       		moveq	#1,d4		; return side collision
00011F1A 4E75                       		rts	
00011F1C                            ; ===========================================================================
00011F1C                            
00011F1C                            Solid_SideAir:
00011F1C 6100                       		bsr.s	Solid_NotPushing
00011F1E 7801                       		moveq	#1,d4		; return side collision
00011F20 4E75                       		rts	
00011F22                            ; ===========================================================================
00011F22                            
00011F22                            Solid_Ignore:
00011F22 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011F28 6700                       		beq.s	Solid_Debug	; if not, branch
00011F2A 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011F30 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F32 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011F38 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F3A 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011F40 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F42 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011F48                            
00011F48                            
00011F48                            Solid_NotPushing:
00011F48 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F4E 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F54                            
00011F54                            Solid_Debug:
00011F54 7800                       		moveq	#0,d4		; return no collision
00011F56 4E75                       		rts	
00011F58                            ; ===========================================================================
00011F58                            
00011F58                            Solid_TopBottom:
00011F58 4A43                       		tst.w	d3		; is Sonic below the object?
00011F5A 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F5C 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F60 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F62 60BE                       		bra.s	Solid_Ignore
00011F64                            ; ===========================================================================
00011F64                            
00011F64                            Solid_Below:
00011F64 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011F68 6700                       		beq.s	Solid_Squash	; if not, branch
00011F6A 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011F6C 4A43                       		tst.w	d3		; is Sonic above the object?
00011F6E 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011F70 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F74 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011F7A                            
00011F7A                            Solid_TopBtmAir:
00011F7A 78FF                       		moveq	#-1,d4
00011F7C 4E75                       		rts	
00011F7E                            ; ===========================================================================
00011F7E                            
00011F7E                            Solid_Squash:
00011F7E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F84 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011F86 2F08                       		move.l	a0,-(sp)
00011F88 2049                       		movea.l	a1,a0
00011F8A 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011F90 205F                       		movea.l	(sp)+,a0
00011F92 78FF                       		moveq	#-1,d4
00011F94 4E75                       		rts	
00011F96                            ; ===========================================================================
00011F96                            
00011F96                            Solid_Landed:
00011F96 5943                       		subq.w	#4,d3
00011F98 7200                       		moveq	#0,d1
00011F9A 1228 0014                  		move.b	obActWid(a0),d1
00011F9E 3401                       		move.w	d1,d2
00011FA0 D442                       		add.w	d2,d2
00011FA2 D269 0008                  		add.w	obX(a1),d1
00011FA6 9268 0008                  		sub.w	obX(a0),d1
00011FAA 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011FAC B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011FAE 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011FB0 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011FB4 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011FB6 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FBA 5369 000C                  		subq.w	#1,obY(a1)
00011FBE 6100                       		bsr.s	Solid_ResetFloor
00011FC0 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011FC6 08E8 0003 0022             		bset	#3,obStatus(a0)
00011FCC 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011FCE 4E75                       		rts	
00011FD0                            ; ===========================================================================
00011FD0                            
00011FD0                            Solid_Miss:
00011FD0 7800                       		moveq	#0,d4
00011FD2 4E75                       		rts	
00011FD4                            ; End of function SolidObject
00011FD4                            
00011FD4                            
00011FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011FD4                            
00011FD4                            
00011FD4                            Solid_ResetFloor:
00011FD4 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011FDA 6700                       		beq.s	@notonobj	; if not, branch
00011FDC                            
00011FDC 7000                       		moveq	#0,d0
00011FDE 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011FE2 ED48                       		lsl.w	#6,d0
00011FE4 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011FEA 2440                       		movea.l	d0,a2
00011FEC 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011FF2 422A 0025                  		clr.b	obSolid(a2)
00011FF6                            
00011FF6                            	@notonobj:
00011FF6 3008                       		move.w	a0,d0
00011FF8 0440 D000                  		subi.w	#$D000,d0
00011FFC EC48                       		lsr.w	#6,d0
00011FFE 0240 007F                  		andi.w	#$7F,d0
00012002 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00012006 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
0001200C 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00012012 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00012018 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
0001201E 6700                       		beq.s	@notinair	; if not, branch
00012020 2F08                       		move.l	a0,-(sp)
00012022 2049                       		movea.l	a1,a0
00012024 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
0001202A 205F                       		movea.l	(sp)+,a0
0001202C                            
0001202C                            	@notinair:
0001202C 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00012032 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00012038 4E75                       		rts	
0001203A                            ; End of function Solid_ResetFloor
0001203A                            ; End of function Solid_ResetFloor
0001203A                            
0001203A                            		include	"_incObj\51 Smashable Green Block.asm"
0001203A                            ; ---------------------------------------------------------------------------
0001203A                            ; Object 51 - smashable	green block (MZ)
0001203A                            ; ---------------------------------------------------------------------------
0001203A                            
0001203A                            SmashBlock:
0001203A 7000                       		moveq	#0,d0
0001203C 1028 0024                  		move.b	obRoutine(a0),d0
00012040 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00012044 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00012048 6000 F880                  		bra.w	RememberState
0001204C                            ; ===========================================================================
0001204C 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
0001204E 0000                       		dc.w Smab_Solid-Smab_Index
00012050 0000                       		dc.w Smab_Points-Smab_Index
00012052                            ; ===========================================================================
00012052                            
00012052                            Smab_Main:	; Routine 0
00012052 5428 0024                  		addq.b	#2,obRoutine(a0)
00012056 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
0001205E 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012064 117C 0004 0001             		move.b	#4,obRender(a0)
0001206A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012070 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012076 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001207C                            
0001207C                            Smab_Solid:	; Routine 2
0001207C                            
0001207C =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
0001207C =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
0001207C                            
0001207C 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00012082 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00012088 323C 001B                  		move.w	#$1B,d1
0001208C 343C 0010                  		move.w	#$10,d2
00012090 363C 0011                  		move.w	#$11,d3
00012094 3828 0008                  		move.w	obX(a0),d4
00012098 6100 FCC8                  		bsr.w	SolidObject
0001209C 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000120A2 6600                       		bne.s	@smash		; if yes, branch
000120A4                            
000120A4                            	@notspinning:
000120A4 4E75                       		rts	
000120A6                            ; ===========================================================================
000120A6                            
000120A6                            @smash:
000120A6 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000120AC 66F6                       		bne.s	@notspinning	; if not, branch
000120AE 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000120B4 08E9 0002 0022             		bset	#2,obStatus(a1)
000120BA 137C 000E 0016             		move.b	#$E,obHeight(a1)
000120C0 137C 0007 0017             		move.b	#7,obWidth(a1)
000120C6 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
000120CC 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
000120D2 08E9 0001 0022             		bset	#1,obStatus(a1)
000120D8 08A9 0003 0022             		bclr	#3,obStatus(a1)
000120DE 137C 0002 0024             		move.b	#2,obRoutine(a1)
000120E4 08A8 0003 0022             		bclr	#3,obStatus(a0)
000120EA 4228 0025                  		clr.b	obSolid(a0)
000120EE 117C 0001 001A             		move.b	#1,obFrame(a0)
000120F4 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
000120FA 7203                       		moveq	#3,d1		; set number of	fragments to 4
000120FC 343C 0038                  		move.w	#$38,d2
00012100 6100 D1EE                  		bsr.w	SmashObject
00012104 6100 DA92                  		bsr.w	FindFreeObj
00012108 6600                       		bne.s	Smab_Points
0001210A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
0001210E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012114 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001211A 3438 F7D0                  		move.w	(v_itembonus).w,d2
0001211E 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00012122 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00012126 6500                       		bcs.s	@bonus		; if yes, branch
00012128 7406                       		moveq	#6,d2		; set cap for points
0001212A                            
0001212A                            	@bonus:
0001212A 7000                       		moveq	#0,d0
0001212C 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012130 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00012136 6500                       		bcs.s	@givepoints	; if not, branch
00012138 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001213C 740A                       		moveq	#10,d2
0001213E                            
0001213E                            	@givepoints:
0001213E 4EB9 0000 0000             		jsr	(AddPoints).l
00012144 E24A                       		lsr.w	#1,d2
00012146 1342 001A                  		move.b	d2,obFrame(a1)
0001214A                            
0001214A                            Smab_Points:	; Routine 4
0001214A 6100 D5AC                  		bsr.w	SpeedToPos
0001214E 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00012154 6100 D5B6                  		bsr.w	DisplaySprite
00012158 4A28 0001                  		tst.b	obRender(a0)
0001215C 6A00 D5EE                  		bpl.w	DeleteObject
00012160 4E75                       		rts	
00012162                            ; ===========================================================================
00012162 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00012166 FF00 FF00                  		dc.w -$100, -$100
0001216A 0200 FE00                  		dc.w $200, -$200
0001216E 0100 FF00                  		dc.w $100, -$100
00012172                            
00012172 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012172 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001217A                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
0001217A                            ; ---------------------------------------------------------------------------
0001217A                            ; Sprite mappings - smashable green block (MZ)
0001217A                            ; ---------------------------------------------------------------------------
0001217A                            Map_Smab_internal:
0001217A 0000                       		dc.w @two-Map_Smab_internal
0001217C 0000                       		dc.w @four-Map_Smab_internal
0001217E 02                         @two:		dc.b 2
0001217F F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
00012184 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00012189 04                         @four:		dc.b 4
0001218A F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
0001218F 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00012194 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00012199 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001219E                            		even
0001219E                            		even
0001219E                            
0001219E                            		include	"_incObj\52 Moving Blocks.asm"
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            
0001219E                            MovingBlock:
0001219E 7000                       		moveq	#0,d0
000121A0 1028 0024                  		move.b	obRoutine(a0),d0
000121A4 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000121A8 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000121AC                            ; ===========================================================================
000121AC 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000121AE 0000                       		dc.w MBlock_Platform-MBlock_Index
000121B0 0000                       		dc.w MBlock_StandOn-MBlock_Index
000121B2                            
000121B2 =00000030                  mblock_origX:	equ $30
000121B2 =00000032                  mblock_origY:	equ $32
000121B2                            
000121B2 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000121B4 2001                       		dc.b $20, 1
000121B6 2002                       		dc.b $20, 2
000121B8 4003                       		dc.b $40, 3
000121BA 3004                       		dc.b $30, 4
000121BC                            ; ===========================================================================
000121BC                            
000121BC                            MBlock_Main:	; Routine 0
000121BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000121C0 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000121C8 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000121CE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000121D4 6600                       		bne.s	loc_FE44
000121D6 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
000121DE 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
000121E4 117C 0007 0016             		move.b	#7,obHeight(a0)
000121EA                            
000121EA                            loc_FE44:
000121EA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000121F0 6600                       		bne.s	loc_FE60
000121F2 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
000121F8 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
000121FE 6700                       		beq.s	loc_FE60	; if yes, branch
00012200 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00012206                            
00012206                            loc_FE60:
00012206 117C 0004 0001             		move.b	#4,obRender(a0)
0001220C 7000                       		moveq	#0,d0
0001220E 1028 0028                  		move.b	obSubtype(a0),d0
00012212 E648                       		lsr.w	#3,d0
00012214 0240 001E                  		andi.w	#$1E,d0
00012218 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
0001221C 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012220 115A 001A                  		move.b	(a2)+,obFrame(a0)
00012224 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001222A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012230 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00012236 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001223C                            
0001223C                            MBlock_Platform: ; Routine 2
0001223C 6100 0000                  		bsr.w	MBlock_Move
00012240 7200                       		moveq	#0,d1
00012242 1228 0014                  		move.b	obActWid(a0),d1
00012246 4EB9 0000 8FE2             		jsr	(PlatformObject).l
0001224C 6000                       		bra.s	MBlock_ChkDel
0001224E                            ; ===========================================================================
0001224E                            
0001224E                            MBlock_StandOn:	; Routine 4
0001224E 7200                       		moveq	#0,d1
00012250 1228 0014                  		move.b	obActWid(a0),d1
00012254 4EB9 0000 9156             		jsr	(ExitPlatform).l
0001225A 3F28 0008                  		move.w	obX(a0),-(sp)
0001225E 6100 0000                  		bsr.w	MBlock_Move
00012262 341F                       		move.w	(sp)+,d2
00012264 4EB9 0000 96C0             		jsr	(MvSonicOnPtfm2).l
0001226A                            
0001226A                            MBlock_ChkDel:
00012288 6000 D482                  		bra.w	DisplaySprite
0001228C                            ; ===========================================================================
0001228C                            
0001228C                            MBlock_Move:
0001228C 7000                       		moveq	#0,d0
0001228E 1028 0028                  		move.b	obSubtype(a0),d0
00012292 0240 000F                  		andi.w	#$F,d0
00012296 D040                       		add.w	d0,d0
00012298 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
0001229C 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000122A0                            ; ===========================================================================
000122A0 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000122A4 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000122A8 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000122AC 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000122B0 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000122B4 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000122B6                            ; ===========================================================================
000122B6                            
000122B6                            MBlock_Type00:
000122B6 4E75                       		rts	
000122B8                            ; ===========================================================================
000122B8                            
000122B8                            MBlock_Type01:
000122B8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000122BC 323C 0060                  		move.w	#$60,d1
000122C0 0828 0000 0022             		btst	#0,obStatus(a0)
000122C6 6700                       		beq.s	loc_FF26
000122C8 4440                       		neg.w	d0
000122CA D041                       		add.w	d1,d0
000122CC                            
000122CC                            loc_FF26:
000122CC 3228 0030                  		move.w	mblock_origX(a0),d1
000122D0 9240                       		sub.w	d0,d1
000122D2 3141 0008                  		move.w	d1,obX(a0)
000122D6 4E75                       		rts	
000122D8                            ; ===========================================================================
000122D8                            
000122D8                            MBlock_Type02:
000122D8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
000122DE 6600                       		bne.s	MBlock_02_Wait
000122E0 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000122E4                            
000122E4                            MBlock_02_Wait:
000122E4 4E75                       		rts	
000122E6                            ; ===========================================================================
000122E6                            
000122E6                            MBlock_Type03:
000122E6 7600                       		moveq	#0,d3
000122E8 1628 0014                  		move.b	obActWid(a0),d3
000122EC 6100 0000                  		bsr.w	ObjHitWallRight
000122F0 4A41                       		tst.w	d1		; has the platform hit a wall?
000122F2 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
000122F4 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000122F8 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000122FE 4E75                       		rts	
00012300                            ; ===========================================================================
00012300                            
00012300                            MBlock_03_End:
00012300 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00012304 4E75                       		rts	
00012306                            ; ===========================================================================
00012306                            
00012306                            MBlock_Type05:
00012306 7600                       		moveq	#0,d3
00012308 1628 0014                  		move.b	obActWid(a0),d3
0001230C 6100 0000                  		bsr.w	ObjHitWallRight
00012310 4A41                       		tst.w	d1		; has the platform hit a wall?
00012312 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00012314 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012318 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
0001231E 4E75                       		rts	
00012320                            ; ===========================================================================
00012320                            
00012320                            MBlock_05_End:
00012320 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00012324 4E75                       		rts	
00012326                            ; ===========================================================================
00012326                            
00012326                            MBlock_Type06:
00012326 6100 D3D0                  		bsr.w	SpeedToPos
0001232A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012330 6100 0000                  		bsr.w	ObjFloorDist
00012334 4A41                       		tst.w	d1		; has platform hit the floor?
00012336 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001233A D368 000C                  		add.w	d1,obY(a0)
0001233E 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012342 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00012346                            
00012346                            locret_FFA0:
00012346 4E75                       		rts	
00012348                            ; ===========================================================================
00012348                            
00012348                            MBlock_Type07:
00012348 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
0001234C 6700                       		beq.s	MBlock_07_ChkDel
0001234E 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012352                            
00012352                            MBlock_07_ChkDel:
00012352 588F                       		addq.l	#4,sp
00012372 4E75                       		rts	
00012374                            ; ===========================================================================
00012374                            
00012374                            MBlock_Type08:
00012374 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012378 323C 0080                  		move.w	#$80,d1
0001237C 0828 0000 0022             		btst	#0,obStatus(a0)
00012382 6700                       		beq.s	loc_FFE2
00012384 4440                       		neg.w	d0
00012386 D041                       		add.w	d1,d0
00012388                            
00012388                            loc_FFE2:
00012388 3228 0032                  		move.w	mblock_origY(a0),d1
0001238C 9240                       		sub.w	d0,d1
0001238E 3141 000C                  		move.w	d1,obY(a0)
00012392 4E75                       		rts	
00012394                            ; ===========================================================================
00012394                            
00012394                            MBlock_Type0A:
00012394 7600                       		moveq	#0,d3
00012396 1628 0014                  		move.b	obActWid(a0),d3
0001239A D643                       		add.w	d3,d3
0001239C 7208                       		moveq	#8,d1
0001239E 0828 0000 0022             		btst	#0,obStatus(a0)
000123A4 6700                       		beq.s	loc_10004
000123A6 4441                       		neg.w	d1
000123A8 4443                       		neg.w	d3
000123AA                            
000123AA                            loc_10004:
000123AA 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000123AE 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000123B0 3028 0008                  		move.w	obX(a0),d0
000123B4 9068 0030                  		sub.w	mblock_origX(a0),d0
000123B8 B043                       		cmp.w	d3,d0
000123BA 6700                       		beq.s	MBlock_0A_Wait
000123BC D368 0008                  		add.w	d1,obX(a0)	; move platform
000123C0 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000123C6 4E75                       		rts	
000123C8                            ; ===========================================================================
000123C8                            
000123C8                            MBlock_0A_Wait:
000123C8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000123CC 6600                       		bne.s	locret_1002E	; if time remains, branch
000123CE 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000123D4                            
000123D4                            locret_1002E:
000123D4 4E75                       		rts	
000123D6                            ; ===========================================================================
000123D6                            
000123D6                            MBlock_0A_Back:
000123D6 3028 0008                  		move.w	obX(a0),d0
000123DA 9068 0030                  		sub.w	mblock_origX(a0),d0
000123DE 6700                       		beq.s	MBlock_0A_Reset
000123E0 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
000123E4 4E75                       		rts	
000123E6                            ; ===========================================================================
000123E6                            
000123E6                            MBlock_0A_Reset:
000123E6 4268 0036                  		clr.w	$36(a0)
000123EA 5328 0028                  		subq.b	#1,obSubtype(a0)
000123EE 4E75                       		rts	
000123EE 4E75                       		rts	
000123F0                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
000123F0                            ; ---------------------------------------------------------------------------
000123F0                            ; Sprite mappings - moving blocks (MZ, SBZ)
000123F0                            ; ---------------------------------------------------------------------------
000123F0                            Map_MBlock_internal:
000123F0 0000                       		dc.w @mz1-Map_MBlock_internal
000123F2 0000                       		dc.w @mz2-Map_MBlock_internal
000123F4 0000                       		dc.w @sbz-Map_MBlock_internal
000123F6 0000                       		dc.w @sbzwide-Map_MBlock_internal
000123F8 0000                       		dc.w @mz3-Map_MBlock_internal
000123FA 01                         @mz1:		dc.b 1
000123FB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012400 02                         @mz2:		dc.b 2
00012401 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012406 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001240B 04                         @sbz:		dc.b 4
0001240C F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012411 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012416 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001241B 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012420 04                         @sbzwide:	dc.b 4
00012421 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012426 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001242B F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012430 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012435 03                         @mz3:		dc.b 3
00012436 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001243B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012440 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012446 00                         		even
00012446 00                         		even
00012446                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012446                            ; ---------------------------------------------------------------------------
00012446                            ; Sprite mappings - moving block (LZ)
00012446                            ; ---------------------------------------------------------------------------
00012446                            Map_MBlockLZ_internal:
00012446 0000                       		dc.w @0-Map_MBlockLZ_internal
00012448 01                         @0:		dc.b 1
00012449 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001244E                            		even
0001244E                            		even
0001244E                            
0001244E                            		include	"_incObj\55 Basaran.asm"
0001244E                            ; ---------------------------------------------------------------------------
0001244E                            ; Object 55 - Basaran enemy (MZ)
0001244E                            ; ---------------------------------------------------------------------------
0001244E                            
0001244E                            Basaran:
0001244E 7000                       		moveq	#0,d0
00012450 1028 0024                  		move.b	obRoutine(a0),d0
00012454 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012458 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
0001245C                            ; ===========================================================================
0001245C 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
0001245E 0000                       		dc.w Bas_Action-Bas_Index
00012460                            ; ===========================================================================
00012460                            
00012460                            Bas_Main:	; Routine 0
00012460 5428 0024                  		addq.b	#2,obRoutine(a0)
00012464 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001246C 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012472 117C 0004 0001             		move.b	#4,obRender(a0)
00012478 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001247E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012484 117C 000B 0020             		move.b	#$B,obColType(a0)
0001248A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012490                            
00012490                            Bas_Action:	; Routine 2
00012490 7000                       		moveq	#0,d0
00012492 1028 0025                  		move.b	ob2ndRout(a0),d0
00012496 323B 0000                  		move.w	@index(pc,d0.w),d1
0001249A 4EBB 1000                  		jsr	@index(pc,d1.w)
0001249E 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000124A4 6100 A34E                  		bsr.w	AnimateSprite
000124A8 6000 F420                  		bra.w	RememberState
000124AC                            ; ===========================================================================
000124AC 0000                       @index:		dc.w @dropcheck-@index
000124AE 0000                       		dc.w @dropfly-@index
000124B0 0000                       		dc.w @flapsound-@index
000124B2 0000                       		dc.w @flyup-@index
000124B4                            ; ===========================================================================
000124B4                            
000124B4                            @dropcheck:
000124B4 343C 0080                  		move.w	#$80,d2
000124B8 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000124BC 6400                       		bcc.s	@nodrop		; if not, branch
000124BE 3038 D00C                  		move.w	(v_player+obY).w,d0
000124C2 3140 0036                  		move.w	d0,$36(a0)
000124C6 9068 000C                  		sub.w	obY(a0),d0
000124CA 6500                       		bcs.s	@nodrop
000124CC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000124D0 6400                       		bcc.s	@nodrop		; if not, branch
000124D2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000124D6 6600                       		bne.s	@nodrop		; if yes, branch
000124D8                            
000124D8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000124DC D007                       		add.b	d7,d0
000124DE 0200 0007                  		andi.b	#7,d0
000124E2 6600                       		bne.s	@nodrop
000124E4 117C 0001 001C             		move.b	#1,obAnim(a0)
000124EA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000124EE                            
000124EE                            	@nodrop:
000124EE 4E75                       		rts	
000124F0                            ; ===========================================================================
000124F0                            
000124F0                            @dropfly:
000124F0 6100 D206                  		bsr.w	SpeedToPos
000124F4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000124FA 343C 0080                  		move.w	#$80,d2
000124FE 6100 0000                  		bsr.w	@chkdistance
00012502 3028 0036                  		move.w	$36(a0),d0
00012506 9068 000C                  		sub.w	obY(a0),d0
0001250A 6500                       		bcs.s	@chkdel
0001250C 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012510 6400                       		bcc.s	@dropmore	; if not, branch
00012512 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012516 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
0001251C 117C 0002 001C             		move.b	#2,obAnim(a0)
00012522 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012526                            
00012526                            	@dropmore:
00012526 4E75                       		rts	
00012528                            
00012528                            	@chkdel:
00012528 4A28 0001                  		tst.b	obRender(a0)
0001252C 6A00 D21E                  		bpl.w	DeleteObject
00012530 4E75                       		rts	
00012532                            ; ===========================================================================
00012532                            
00012532                            @flapsound:
00012532 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012536 0200 000F                  		andi.b	#$F,d0
0001253A 6600                       		bne.s	@nosound
00012546                            
00012546                            	@nosound:
00012546 6100 D1B0                  		bsr.w	SpeedToPos
0001254A 3038 D008                  		move.w	(v_player+obX).w,d0
0001254E 9068 0008                  		sub.w	obX(a0),d0
00012552 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012554 4440                       		neg.w	d0
00012556                            
00012556                            	@isright:
00012556 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001255A 6500                       		bcs.s	@dontflyup	; if yes, branch
0001255C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012560 D007                       		add.b	d7,d0
00012562 0200 0007                  		andi.b	#7,d0
00012566 6600                       		bne.s	@dontflyup
00012568 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001256C                            
0001256C                            @dontflyup:
0001256C 4E75                       		rts	
0001256E                            ; ===========================================================================
0001256E                            
0001256E                            @flyup:
0001256E 6100 D188                  		bsr.w	SpeedToPos
00012572 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012578 6100 0000                  		bsr.w	ObjHitCeiling
0001257C 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001257E 6A00                       		bpl.s	@noceiling	; if not, branch
00012580 9368 000C                  		sub.w	d1,obY(a0)
00012584 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001258A 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
0001258E 4268 0012                  		clr.w	obVelY(a0)
00012592 4228 001C                  		clr.b	obAnim(a0)
00012596 4228 0025                  		clr.b	ob2ndRout(a0)
0001259A                            
0001259A                            	@noceiling:
0001259A 4E75                       		rts	
0001259C                            ; ===========================================================================
0001259C                            
0001259C                            ; Subroutine to check Sonic's distance from the basaran
0001259C                            
0001259C                            ; input:
0001259C                            ;	d2 = distance to compare
0001259C                            
0001259C                            ; output:
0001259C                            ;	d0 = distance between Sonic and basaran
0001259C                            ;	d1 = speed/direction for basaran to fly
0001259C                            
0001259C                            @chkdistance:
0001259C 323C 0100                  		move.w	#$100,d1
000125A0 08E8 0000 0022             		bset	#0,obStatus(a0)
000125A6 3038 D008                  		move.w	(v_player+obX).w,d0
000125AA 9068 0008                  		sub.w	obX(a0),d0
000125AE 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000125B0 4440                       		neg.w	d0
000125B2 4441                       		neg.w	d1
000125B4 08A8 0000 0022             		bclr	#0,obStatus(a0)
000125BA                            
000125BA                            	@right:
000125BA B042                       		cmp.w	d2,d0
000125BC 4E75                       		rts	
000125BE                            ; ===========================================================================
000125BE                            ; unused crap
000125BE 6100 D138                  		bsr.w	SpeedToPos
000125C2 6100 D148                  		bsr.w	DisplaySprite
000125C6 4A28 0001                  		tst.b	obRender(a0)
000125CA 6A00 D180                  		bpl.w	DeleteObject
000125CE 4E75                       		rts	
000125CE 4E75                       		rts	
000125D0                            		include	"_anim\Basaran.asm"
000125D0                            ; ---------------------------------------------------------------------------
000125D0                            ; Animation script - Basaran enemy
000125D0                            ; ---------------------------------------------------------------------------
000125D0 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000125D2 0000                       		dc.w @fall-Ani_Bas
000125D4 0000                       		dc.w @fly-Ani_Bas
000125D6 0F00 FF                    @still:		dc.b $F, 0, afEnd
000125DA 00                         		even
000125DA 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000125DE 00                         		even
000125DE 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000125E4                            		even
000125E4                            		even
000125E4                            Map_Bas:	include	"_maps\Basaran.asm"
000125E4                            ; --------------------------------------------------------------------------------
000125E4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000125E4                            ; --------------------------------------------------------------------------------
000125E4                            
000125E4                            SME_RhYYA:	
000125E4 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
000125E8 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000125EC 01                         SME_RhYYA_8:	dc.b 1	
000125ED F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
000125F2 03                         SME_RhYYA_E:	dc.b 3	
000125F3 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
000125F8 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000125FD 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012602 04                         SME_RhYYA_1E:	dc.b 4	
00012603 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012608 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
0001260D 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012612 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012617 04                         SME_RhYYA_33:	dc.b 4	
00012618 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
0001261D 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012622 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012627 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
0001262C                            		even
0001262C                            		even
0001262C                            
0001262C                            		include	"_incObj\56 Floating Blocks and Doors.asm"
0001262C                            ; ---------------------------------------------------------------------------
0001262C                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
0001262C                            ; ---------------------------------------------------------------------------
0001262C                            
0001262C                            FloatingBlock:
0001262C 7000                       		moveq	#0,d0
0001262E 1028 0024                  		move.b	obRoutine(a0),d0
00012632 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012636 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001263A                            ; ===========================================================================
0001263A 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
0001263C 0000                       		dc.w FBlock_Action-FBlock_Index
0001263E                            
0001263E =00000034                  fb_origX:	equ $34		; original x-axis position
0001263E =00000030                  fb_origY:	equ $30		; original y-axis position
0001263E =0000003A                  fb_height:	equ $3A		; total object height
0001263E =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
0001263E                            
0001263E                            FBlock_Var:	; width/2, height/2
0001263E 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012640 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012642 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012644 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012646 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012648 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001264A 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001264C 4010                       		dc.b  $40, $10	; subtype 7x/Fx
0001264E                            ; ===========================================================================
0001264E                            
0001264E                            FBlock_Main:	; Routine 0
0001264E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012652 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001265A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012660 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012666 6600                       		bne.s	@notLZ
00012668 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
0001266E                            
0001266E                            	@notLZ:
0001266E 117C 0004 0001             		move.b	#4,obRender(a0)
00012674 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001267A 7000                       		moveq	#0,d0
0001267C 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012680 E648                       		lsr.w	#3,d0
00012682 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012686 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001268A 115A 0014                  		move.b	(a2)+,obActWid(a0)
0001268E 1152 0016                  		move.b	(a2),obHeight(a0)
00012692 E248                       		lsr.w	#1,d0
00012694 1140 001A                  		move.b	d0,obFrame(a0)
00012698 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001269E 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000126A4 7000                       		moveq	#0,d0
000126A6 1012                       		move.b	(a2),d0
000126A8 D040                       		add.w	d0,d0
000126AA 3140 003A                  		move.w	d0,fb_height(a0)
000126AE 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000126B4 6600                       			bne.s	@dontdelete
000126B6 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000126BC 6600                       			bne.s	@notatpos
000126BE 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126C2 6700                       			beq.s	@dontdelete
000126C4 4EF9 0000 F74C             			jmp	(DeleteObject).l
000126CA                            	@notatpos:
000126CA 4228 0028                  			clr.b	obSubtype(a0)
000126CE 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126D2 6600                       			bne.s	@dontdelete
000126D4 4EF9 0000 F74C             			jmp	(DeleteObject).l
000126DA                            	@dontdelete:
000126DA 7000                       		moveq	#0,d0
000126DC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000126E2 6700                       		beq.s	@stillnotLZ
000126E4 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000126E8 0240 000F                  		andi.w	#$F,d0
000126EC 5140                       		subq.w	#8,d0
000126EE 6500                       		bcs.s	@stillnotLZ
000126F0 E548                       		lsl.w	#2,d0
000126F2 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000126F6 45F2 0000                  		lea	(a2,d0.w),a2
000126FA 4A52                       		tst.w	(a2)
000126FC 6A00                       		bpl.s	@stillnotLZ
000126FE 0868 0000 0022             		bchg	#0,obStatus(a0)
00012704                            
00012704                            	@stillnotLZ:
00012704 1028 0028                  		move.b	obSubtype(a0),d0
00012708 6A00                       		bpl.s	FBlock_Action
0001270A 0200 000F                  		andi.b	#$F,d0
0001270E 1140 003C                  		move.b	d0,fb_type(a0)
00012712 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012718 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
0001271E 6600                       		bne.s	@chkstate
00012720 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012726 317C 0080 003A             		move.w	#$80,fb_height(a0)
0001272C                            
0001272C                            @chkstate:
0001272C 45F8 FC00                  		lea	(v_objstate).w,a2
00012730 7000                       		moveq	#0,d0
00012732 1028 0023                  		move.b	obRespawnNo(a0),d0
00012736 6700                       		beq.s	FBlock_Action
00012738 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001273E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012744 6700                       		beq.s	FBlock_Action
00012746 5228 0028                  		addq.b	#1,obSubtype(a0)
0001274A 4268 003A                  		clr.w	fb_height(a0)
0001274E                            
0001274E                            FBlock_Action:	; Routine 2
0001274E 3F28 0008                  		move.w	obX(a0),-(sp)
00012752 7000                       		moveq	#0,d0
00012754 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012758 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001275C D040                       		add.w	d0,d0
0001275E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012762 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012766 381F                       		move.w	(sp)+,d4
00012768 4A28 0001                  		tst.b	obRender(a0)
0001276C 6A00                       		bpl.s	@chkdel
0001276E 7200                       		moveq	#0,d1
00012770 1228 0014                  		move.b	obActWid(a0),d1
00012774 0641 000B                  		addi.w	#$B,d1
00012778 7400                       		moveq	#0,d2
0001277A 1428 0016                  		move.b	obHeight(a0),d2
0001277E 3602                       		move.w	d2,d3
00012780 5243                       		addq.w	#1,d3
00012782 6100 F5DE                  		bsr.w	SolidObject
00012786                            
00012786                            	@chkdel:
000127A2                            		@display:
000127A2 6000 CF68                  			bra.w	DisplaySprite
000127A6                            		@chkdel2:
000127A6 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127AC 6600                       			bne.s	@delete
000127AE 4A28 0038                  			tst.b	$38(a0)
000127B2 66EE                       			bne.s	@display
000127B4                            		@delete:
000127B4 4EF9 0000 F74C             			jmp	(DeleteObject).l
000127BA                            ; ===========================================================================
000127BA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000127BE 0000 0000                  		dc.w @type02-@index, @type03-@index
000127C2 0000 0000                  		dc.w @type04-@index, @type05-@index
000127C6 0000 0000                  		dc.w @type06-@index, @type07-@index
000127CA 0000 0000                  		dc.w @type08-@index, @type09-@index
000127CE 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000127D2 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000127D6                            ; ===========================================================================
000127D6                            
000127D6                            @type00:
000127D6                            ; doesn't move
000127D6 4E75                       		rts	
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            @type01:
000127D8                            ; moves side-to-side
000127D8 323C 0040                  		move.w	#$40,d1		; set move distance
000127DC 7000                       		moveq	#0,d0
000127DE 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000127E2 6000                       		bra.s	@moveLR
000127E4                            ; ===========================================================================
000127E4                            
000127E4                            @type02:
000127E4                            ; moves side-to-side
000127E4 323C 0080                  		move.w	#$80,d1		; set move distance
000127E8 7000                       		moveq	#0,d0
000127EA 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000127EE                            
000127EE                            	@moveLR:
000127EE 0828 0000 0022             		btst	#0,obStatus(a0)
000127F4 6700                       		beq.s	@noflip
000127F6 4440                       		neg.w	d0
000127F8 D041                       		add.w	d1,d0
000127FA                            
000127FA                            	@noflip:
000127FA 3228 0034                  		move.w	fb_origX(a0),d1
000127FE 9240                       		sub.w	d0,d1
00012800 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012804 4E75                       		rts	
00012806                            ; ===========================================================================
00012806                            
00012806                            @type03:
00012806                            ; moves up/down
00012806 323C 0040                  		move.w	#$40,d1		; set move distance
0001280A 7000                       		moveq	#0,d0
0001280C 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012810 6000                       		bra.s	@moveUD
00012812                            ; ===========================================================================
00012812                            
00012812                            @type04:
00012812                            ; moves up/down
00012812 323C 0080                  		move.w	#$80,d1		; set move distance
00012816 7000                       		moveq	#0,d0
00012818 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001281C                            
0001281C                            	@moveUD:
0001281C 0828 0000 0022             		btst	#0,obStatus(a0)
00012822 6700                       		beq.s	@noflip04
00012824 4440                       		neg.w	d0
00012826 D041                       		add.w	d1,d0
00012828                            
00012828                            	@noflip04:
00012828 3228 0030                  		move.w	fb_origY(a0),d1
0001282C 9240                       		sub.w	d0,d1
0001282E 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012832 4E75                       		rts	
00012834                            ; ===========================================================================
00012834                            
00012834                            @type05:
00012834                            ; moves up when a switch is pressed
00012834 4A28 0038                  		tst.b	$38(a0)
00012838 6600                       		bne.s	@loc_104A4
0001283A 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012840 6600                       		bne.s	@aaa		; if not, branch
00012842 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012848 6600                       		bne.s	@aaa
0001284A 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001284E 3038 D008                  		move.w	(v_player+obX).w,d0
00012852 B068 0008                  		cmp.w	obX(a0),d0
00012856 6400                       		bcc.s	@aaa
00012858 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
0001285E                            
0001285E                            	@aaa:
0001285E 45F8 F7E0                  		lea	(f_switch).w,a2
00012862 7000                       		moveq	#0,d0
00012864 1028 003C                  		move.b	fb_type(a0),d0
00012868 0832 0000 0000             		btst	#0,(a2,d0.w)
0001286E 6700                       		beq.s	@loc_104AE
00012870 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012876 6600                       		bne.s	@loc_1049E	; if not, branch
00012878 0C00 0003                  		cmpi.b	#3,d0
0001287C 6600                       		bne.s	@loc_1049E
0001287E 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012882                            
00012882                            @loc_1049E:
00012882 117C 0001 0038             		move.b	#1,$38(a0)
00012888                            
00012888                            @loc_104A4:
00012888 4A68 003A                  		tst.w	fb_height(a0)
0001288C 6700                       		beq.s	@loc_104C8
0001288E 5568 003A                  		subq.w	#2,fb_height(a0)
00012892                            
00012892                            @loc_104AE:
00012892 3028 003A                  		move.w	fb_height(a0),d0
00012896 0828 0000 0022             		btst	#0,$22(a0)
0001289C 6700                       		beq.s	@loc_104BC
0001289E 4440                       		neg.w	d0
000128A0                            
000128A0                            @loc_104BC:
000128A0 3228 0030                  		move.w	fb_origY(a0),d1
000128A4 D240                       		add.w	d0,d1
000128A6 3141 000C                  		move.w	d1,obY(a0)
000128AA 4E75                       		rts	
000128AC                            ; ===========================================================================
000128AC                            
000128AC                            @loc_104C8:
000128AC 5228 0028                  		addq.b	#1,$28(a0)
000128B0 4228 0038                  		clr.b	$38(a0)
000128B4 45F8 FC00                  		lea	(v_objstate).w,a2
000128B8 7000                       		moveq	#0,d0
000128BA 1028 0023                  		move.b	obRespawnNo(a0),d0
000128BE 67D2                       		beq.s	@loc_104AE
000128C0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000128C6 60CA                       		bra.s	@loc_104AE
000128C8                            ; ===========================================================================
000128C8                            
000128C8                            @type06:
000128C8 4A28 0038                  		tst.b	$38(a0)
000128CC 6600                       		bne.s	@loc_10500
000128CE 45F8 F7E0                  		lea	(f_switch).w,a2
000128D2 7000                       		moveq	#0,d0
000128D4 1028 003C                  		move.b	fb_type(a0),d0
000128D8 4A32 0000                  		tst.b	(a2,d0.w)
000128DC 6A00                       		bpl.s	@loc_10512
000128DE 117C 0001 0038             		move.b	#1,$38(a0)
000128E4                            
000128E4                            @loc_10500:
000128E4 7000                       		moveq	#0,d0
000128E6 1028 0016                  		move.b	obHeight(a0),d0
000128EA D040                       		add.w	d0,d0
000128EC B068 003A                  		cmp.w	fb_height(a0),d0
000128F0 6700                       		beq.s	@loc_1052C
000128F2 5468 003A                  		addq.w	#2,fb_height(a0)
000128F6                            
000128F6                            @loc_10512:
000128F6 3028 003A                  		move.w	fb_height(a0),d0
000128FA 0828 0000 0022             		btst	#0,obStatus(a0)
00012900 6700                       		beq.s	@loc_10520
00012902 4440                       		neg.w	d0
00012904                            
00012904                            @loc_10520:
00012904 3228 0030                  		move.w	fb_origY(a0),d1
00012908 D240                       		add.w	d0,d1
0001290A 3141 000C                  		move.w	d1,obY(a0)
0001290E 4E75                       		rts	
00012910                            ; ===========================================================================
00012910                            
00012910                            @loc_1052C:
00012910 5328 0028                  		subq.b	#1,obSubtype(a0)
00012914 4228 0038                  		clr.b	$38(a0)
00012918 45F8 FC00                  		lea	(v_objstate).w,a2
0001291C 7000                       		moveq	#0,d0
0001291E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012922 67D2                       		beq.s	@loc_10512
00012924 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001292A 60CA                       		bra.s	@loc_10512
0001292C                            ; ===========================================================================
0001292C                            
0001292C                            @type07:
0001292C 4A28 0038                  		tst.b	$38(a0)
00012930 6600                       		bne.s	@loc_1055E
00012932 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012936 6700                       		beq.s	@locret_10578
00012938 117C 0001 0038             		move.b	#1,$38(a0)
0001293E 4268 003A                  		clr.w	fb_height(a0)
00012942                            
00012942                            @loc_1055E:
00012942 5268 0008                  		addq.w	#1,obX(a0)
00012946 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001294C 5268 003A                  		addq.w	#1,fb_height(a0)
00012950 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012956 6600                       		bne.s	@locret_10578
00012958 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
0001295E 4228 0038                  			clr.b	$38(a0)
00012962 4228 0028                  		clr.b	obSubtype(a0)
00012966                            
00012966                            @locret_10578:
00012966 4E75                       		rts	
00012968                            ; ===========================================================================
00012968                            
00012968                            @type0C:
00012968 4A28 0038                  		tst.b	$38(a0)
0001296C 6600                       		bne.s	@loc_10598
0001296E 45F8 F7E0                  		lea	(f_switch).w,a2
00012972 7000                       		moveq	#0,d0
00012974 1028 003C                  		move.b	fb_type(a0),d0
00012978 0832 0000 0000             		btst	#0,(a2,d0.w)
0001297E 6700                       		beq.s	@loc_105A2
00012980 117C 0001 0038             		move.b	#1,$38(a0)
00012986                            
00012986                            @loc_10598:
00012986 4A68 003A                  		tst.w	fb_height(a0)
0001298A 6700                       		beq.s	@loc_105C0
0001298C 5568 003A                  		subq.w	#2,fb_height(a0)
00012990                            
00012990                            @loc_105A2:
00012990 3028 003A                  		move.w	fb_height(a0),d0
00012994 0828 0000 0022             		btst	#0,obStatus(a0)
0001299A 6700                       		beq.s	@loc_105B4
0001299C 4440                       		neg.w	d0
0001299E 0640 0080                  		addi.w	#$80,d0
000129A2                            
000129A2                            @loc_105B4:
000129A2 3228 0034                  		move.w	fb_origX(a0),d1
000129A6 D240                       		add.w	d0,d1
000129A8 3141 0008                  		move.w	d1,obX(a0)
000129AC 4E75                       		rts	
000129AE                            ; ===========================================================================
000129AE                            
000129AE                            @loc_105C0:
000129AE 5228 0028                  		addq.b	#1,obSubtype(a0)
000129B2 4228 0038                  		clr.b	$38(a0)
000129B6 45F8 FC00                  		lea	(v_objstate).w,a2
000129BA 7000                       		moveq	#0,d0
000129BC 1028 0023                  		move.b	obRespawnNo(a0),d0
000129C0 67CE                       		beq.s	@loc_105A2
000129C2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000129C8 60C6                       		bra.s	@loc_105A2
000129CA                            ; ===========================================================================
000129CA                            
000129CA                            @type0D:
000129CA 4A28 0038                  		tst.b	$38(a0)
000129CE 6600                       		bne.s	@loc_105F8
000129D0 45F8 F7E0                  		lea	(f_switch).w,a2
000129D4 7000                       		moveq	#0,d0
000129D6 1028 003C                  		move.b	fb_type(a0),d0
000129DA 4A32 0000                  		tst.b	(a2,d0.w)
000129DE 6A00                       		bpl.s	@wtf
000129E0 117C 0001 0038             		move.b	#1,$38(a0)
000129E6                            
000129E6                            @loc_105F8:
000129E6 303C 0080                  		move.w	#$80,d0
000129EA B068 003A                  		cmp.w	fb_height(a0),d0
000129EE 6700                       		beq.s	@loc_10624
000129F0 5468 003A                  		addq.w	#2,fb_height(a0)
000129F4                            
000129F4                            @wtf:
000129F4 3028 003A                  		move.w	fb_height(a0),d0
000129F8 0828 0000 0022             		btst	#0,obStatus(a0)
000129FE 6700                       		beq.s	@loc_10618
00012A00 4440                       		neg.w	d0
00012A02 0640 0080                  		addi.w	#$80,d0
00012A06                            
00012A06                            @loc_10618:
00012A06 3228 0034                  		move.w	fb_origX(a0),d1
00012A0A D240                       		add.w	d0,d1
00012A0C 3141 0008                  		move.w	d1,obX(a0)
00012A10 4E75                       		rts	
00012A12                            ; ===========================================================================
00012A12                            
00012A12                            @loc_10624:
00012A12 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A16 4228 0038                  		clr.b	$38(a0)
00012A1A 45F8 FC00                  		lea	(v_objstate).w,a2
00012A1E 7000                       		moveq	#0,d0
00012A20 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A24 67CE                       		beq.s	@wtf
00012A26 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A2C 60C6                       		bra.s	@wtf
00012A2E                            ; ===========================================================================
00012A2E                            
00012A2E                            @type08:
00012A2E 323C 0010                  		move.w	#$10,d1
00012A32 7000                       		moveq	#0,d0
00012A34 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012A38 E248                       		lsr.w	#1,d0
00012A3A 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A3E 6000                       		bra.s	@square
00012A40                            ; ===========================================================================
00012A40                            
00012A40                            @type09:
00012A40 323C 0030                  		move.w	#$30,d1
00012A44 7000                       		moveq	#0,d0
00012A46 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A4A 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A4E 6000                       		bra.s	@square
00012A50                            ; ===========================================================================
00012A50                            
00012A50                            @type0A:
00012A50 323C 0050                  		move.w	#$50,d1
00012A54 7000                       		moveq	#0,d0
00012A56 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A5A 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A5E 6000                       		bra.s	@square
00012A60                            ; ===========================================================================
00012A60                            
00012A60                            @type0B:
00012A60 323C 0070                  		move.w	#$70,d1
00012A64 7000                       		moveq	#0,d0
00012A66 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A6A 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012A6E                            
00012A6E                            @square:
00012A6E 4A43                       		tst.w	d3
00012A70 6600                       		bne.s	@loc_1068E
00012A72 5228 0022                  		addq.b	#1,obStatus(a0)
00012A76 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012A7C                            
00012A7C                            @loc_1068E:
00012A7C 1428 0022                  		move.b	obStatus(a0),d2
00012A80 0202 0003                  		andi.b	#3,d2
00012A84 6600                       		bne.s	@loc_106AE
00012A86 9041                       		sub.w	d1,d0
00012A88 D068 0034                  		add.w	fb_origX(a0),d0
00012A8C 3140 0008                  		move.w	d0,obX(a0)
00012A90 4441                       		neg.w	d1
00012A92 D268 0030                  		add.w	fb_origY(a0),d1
00012A96 3141 000C                  		move.w	d1,obY(a0)
00012A9A 4E75                       		rts	
00012A9C                            ; ===========================================================================
00012A9C                            
00012A9C                            @loc_106AE:
00012A9C 5302                       		subq.b	#1,d2
00012A9E 6600                       		bne.s	@loc_106CC
00012AA0 5341                       		subq.w	#1,d1
00012AA2 9041                       		sub.w	d1,d0
00012AA4 4440                       		neg.w	d0
00012AA6 D068 0030                  		add.w	fb_origY(a0),d0
00012AAA 3140 000C                  		move.w	d0,obY(a0)
00012AAE 5241                       		addq.w	#1,d1
00012AB0 D268 0034                  		add.w	fb_origX(a0),d1
00012AB4 3141 0008                  		move.w	d1,obX(a0)
00012AB8 4E75                       		rts	
00012ABA                            ; ===========================================================================
00012ABA                            
00012ABA                            @loc_106CC:
00012ABA 5302                       		subq.b	#1,d2
00012ABC 6600                       		bne.s	@loc_106EA
00012ABE 5341                       		subq.w	#1,d1
00012AC0 9041                       		sub.w	d1,d0
00012AC2 4440                       		neg.w	d0
00012AC4 D068 0034                  		add.w	fb_origX(a0),d0
00012AC8 3140 0008                  		move.w	d0,obX(a0)
00012ACC 5241                       		addq.w	#1,d1
00012ACE D268 0030                  		add.w	fb_origY(a0),d1
00012AD2 3141 000C                  		move.w	d1,obY(a0)
00012AD6 4E75                       		rts	
00012AD8                            ; ===========================================================================
00012AD8                            
00012AD8                            @loc_106EA:
00012AD8 9041                       		sub.w	d1,d0
00012ADA D068 0030                  		add.w	fb_origY(a0),d0
00012ADE 3140 000C                  		move.w	d0,obY(a0)
00012AE2 4441                       		neg.w	d1
00012AE4 D268 0034                  		add.w	fb_origX(a0),d1
00012AE8 3141 0008                  		move.w	d1,obX(a0)
00012AEC 4E75                       		rts	
00012AEC 4E75                       		rts	
00012AEE                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012AEE                            ; ---------------------------------------------------------------------------
00012AEE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012AEE                            ; ---------------------------------------------------------------------------
00012AEE                            Map_FBlock_internal:
00012AEE 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012AF0 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012AF2 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012AF4 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012AF6 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012AF8 0000                       		dc.w @slz-Map_FBlock_internal
00012AFA 0000                       		dc.w @lzvert-Map_FBlock_internal
00012AFC 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012AFE 01                         @syz1x1:	dc.b 1
00012AFF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012B04 04                         @syz2x2:	dc.b 4
00012B05 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012B0A E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012B0F 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012B14 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012B19 02                         @syz1x2:	dc.b 2
00012B1A E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012B1F 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012B24 04                         @syzrect2x2:	dc.b 4
00012B25 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012B2A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012B2F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012B34 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012B39 03                         @syzrect1x3:	dc.b 3
00012B3A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B3F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B44 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B49 01                         @slz:		dc.b 1
00012B4A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B4F 02                         @lzvert:	dc.b 2
00012B50 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B55 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B5A 04                         @lzhoriz:	dc.b 4
00012B5B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B60 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B65 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B6A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012B70 00                         		even
00012B70 00                         		even
00012B70                            
00012B70                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012B70                            ; ---------------------------------------------------------------------------
00012B70                            ; Object 57 - spiked balls (SYZ, LZ)
00012B70                            ; ---------------------------------------------------------------------------
00012B70                            
00012B70                            SpikeBall:
00012B70 7000                       		moveq	#0,d0
00012B72 1028 0024                  		move.b	obRoutine(a0),d0
00012B76 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012B7A 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012B7E                            ; ===========================================================================
00012B7E 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012B80 0000                       		dc.w SBall_Move-SBall_Index
00012B82 0000                       		dc.w SBall_Display-SBall_Index
00012B84                            
00012B84 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012B84                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012B84 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012B84 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012B84 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012B84 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012B84                            ; ===========================================================================
00012B84                            
00012B84                            SBall_Main:	; Routine 0
00012B84 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B88 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012B90 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012B96 117C 0004 0001             		move.b	#4,obRender(a0)
00012B9C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BA2 117C 0008 0014             		move.b	#8,obActWid(a0)
00012BA8 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012BAE 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012BB4 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012BBA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BC0 6600                       		bne.s	@notlz
00012BC2                            
00012BC2 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012BC8 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012BCE 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012BD6                            
00012BD6                            	@notlz:
00012BD6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BDA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012BDE 4881                       		ext.w	d1
00012BE0 E741                       		asl.w	#3,d1		; multiply by 8
00012BE2 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012BE6 1028 0022                  		move.b	obStatus(a0),d0
00012BEA E418                       		ror.b	#2,d0
00012BEC 0200 00C0                  		andi.b	#$C0,d0
00012BF0 1140 0026                  		move.b	d0,obAngle(a0)
00012BF4 45E8 0029                  		lea	sball_childs(a0),a2
00012BF8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BFC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012C00 14FC 0000                  		move.b	#0,(a2)+
00012C04 3601                       		move.w	d1,d3
00012C06 E94B                       		lsl.w	#4,d3
00012C08 1143 003C                  		move.b	d3,sball_radius(a0)
00012C0C 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012C0E 6500                       		bcs.s	@fail
00012C10 0828 0003 0028             		btst	#3,obSubtype(a0)
00012C16 6700                       		beq.s	@makechain
00012C18 5341                       		subq.w	#1,d1
00012C1A 6500                       		bcs.s	@fail
00012C1C                            
00012C1C                            @makechain:
00012C1C 6100 CF7A                  		bsr.w	FindFreeObj
00012C20 6600                       		bne.s	@fail
00012C22 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012C26 3A09                       		move.w	a1,d5		; get child object RAM address
00012C28 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012C2C EC4D                       		lsr.w	#6,d5		; divide by $40
00012C2E 0245 007F                  		andi.w	#$7F,d5
00012C32 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012C34 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012C3A 1290                       		move.b	0(a0),0(a1)
00012C3C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C42 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C48 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C4E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C54 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C5A 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C60 0403 0010                  		subi.b	#$10,d3
00012C64 1343 003C                  		move.b	d3,sball_radius(a1)
00012C68 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C6E 6600                       		bne.s	@notlzagain
00012C70                            
00012C70 4A03                       		tst.b	d3
00012C72 6600                       		bne.s	@notlzagain
00012C74 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012C7A                            
00012C7A                            	@notlzagain:
00012C7A 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012C7E                            
00012C7E                            	@fail:
00012C7E 3A08                       		move.w	a0,d5
00012C80 0445 D000                  		subi.w	#$D000,d5
00012C84 EC4D                       		lsr.w	#6,d5
00012C86 0245 007F                  		andi.w	#$7F,d5
00012C8A 14C5                       		move.b	d5,(a2)+
00012C8C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C92 6600                       		bne.s	SBall_Move
00012C94                            
00012C94 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012C9A 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012CA0                            
00012CA0                            SBall_Move:	; Routine 2
00012CA0 6100 0000                  		bsr.w	@movesub
00012CA4 6000 0000                  		bra.w	@chkdel
00012CA8                            ; ===========================================================================
00012CA8                            
00012CA8                            @movesub:
00012CA8 3028 003E                  		move.w	sball_speed(a0),d0
00012CAC D168 0026                  		add.w	d0,obAngle(a0)
00012CB0 1028 0026                  		move.b	obAngle(a0),d0
00012CB4 4EB9 0000 3A32             		jsr	(CalcSine).l
00012CBA 3428 0038                  		move.w	sball_origY(a0),d2
00012CBE 3628 003A                  		move.w	sball_origX(a0),d3
00012CC2 45E8 0029                  		lea	sball_childs(a0),a2
00012CC6 7C00                       		moveq	#0,d6
00012CC8 1C1A                       		move.b	(a2)+,d6
00012CCA                            
00012CCA                            	@loop:
00012CCA 7800                       		moveq	#0,d4
00012CCC 181A                       		move.b	(a2)+,d4
00012CCE ED4C                       		lsl.w	#6,d4
00012CD0 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012CD6 2244                       		movea.l	d4,a1
00012CD8 7800                       		moveq	#0,d4
00012CDA 1829 003C                  		move.b	sball_radius(a1),d4
00012CDE 2A04                       		move.l	d4,d5
00012CE0 C9C0                       		muls.w	d0,d4
00012CE2 E084                       		asr.l	#8,d4
00012CE4 CBC1                       		muls.w	d1,d5
00012CE6 E085                       		asr.l	#8,d5
00012CE8 D842                       		add.w	d2,d4
00012CEA DA43                       		add.w	d3,d5
00012CEC 3344 000C                  		move.w	d4,obY(a1)
00012CF0 3345 0008                  		move.w	d5,obX(a1)
00012CF4 51CE FFD4                  		dbf	d6,@loop
00012CF8 4E75                       		rts	
00012CFA                            ; ===========================================================================
00012CFA                            
00012CFA                            @chkdel:
00012D18 6000 C9F2                  		bra.w	DisplaySprite
00012D1C                            ; ===========================================================================
00012D1C                            
00012D1C                            @delete:
00012D1C 7400                       		moveq	#0,d2
00012D1E 45E8 0029                  		lea	sball_childs(a0),a2
00012D22 141A                       		move.b	(a2)+,d2
00012D24                            
00012D24                            	@deleteloop:
00012D24 7000                       		moveq	#0,d0
00012D26 101A                       		move.b	(a2)+,d0
00012D28 ED48                       		lsl.w	#6,d0
00012D2A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012D30 2240                       		movea.l	d0,a1
00012D32 6100 CA1A                  		bsr.w	DeleteChild
00012D36 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012D3A                            
00012D3A 4E75                       		rts	
00012D3C                            ; ===========================================================================
00012D3C                            
00012D3C                            SBall_Display:	; Routine 4
00012D3C 6000 C9CE                  		bra.w	DisplaySprite
00012D3C 6000 C9CE                  		bra.w	DisplaySprite
00012D40                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D40                            ; ---------------------------------------------------------------------------
00012D40                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D40                            ; ---------------------------------------------------------------------------
00012D40                            Map_SBall_internal:
00012D40 0000                       		dc.w @0-Map_SBall_internal
00012D42 01                         @0:		dc.b 1
00012D43 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D48                            		even
00012D48                            		even
00012D48                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D48                            ; ---------------------------------------------------------------------------
00012D48                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D48                            ; ---------------------------------------------------------------------------
00012D48                            Map_SBall2_internal:
00012D48 0000                       		dc.w @chain-Map_SBall2_internal
00012D4A 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D4C 0000                       		dc.w @base-Map_SBall2_internal
00012D4E 01                         @chain:		dc.b 1
00012D4F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D54 01                         @spikeball:	dc.b 1
00012D55 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D5A 01                         @base:		dc.b 1
00012D5B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D60                            		even
00012D60                            		even
00012D60                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D60                            ; ---------------------------------------------------------------------------
00012D60                            ; Object 58 - giant spiked balls (SYZ)
00012D60                            ; ---------------------------------------------------------------------------
00012D60                            
00012D60                            BigSpikeBall:
00012D60 7000                       		moveq	#0,d0
00012D62 1028 0024                  		move.b	obRoutine(a0),d0
00012D66 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D6A 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012D6E                            ; ===========================================================================
00012D6E 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012D70 0000                       		dc.w BBall_Move-BBall_Index
00012D72                            
00012D72 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012D72 =00000038                  bball_origY:	equ $38		; original y-axis position
00012D72 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012D72 =0000003E                  bball_speed:	equ $3E		; speed
00012D72                            ; ===========================================================================
00012D72                            
00012D72                            BBall_Main:	; Routine 0
00012D72 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D76 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012D7E 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012D84 117C 0004 0001             		move.b	#4,obRender(a0)
00012D8A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D90 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012D96 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012D9C 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012DA2 117C 0086 0020             		move.b	#$86,obColType(a0)
00012DA8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012DAC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012DB0 4881                       		ext.w	d1
00012DB2 E741                       		asl.w	#3,d1		; multiply by 8
00012DB4 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012DB8 1028 0022                  		move.b	obStatus(a0),d0
00012DBC E418                       		ror.b	#2,d0
00012DBE 0200 00C0                  		andi.b	#$C0,d0
00012DC2 1140 0026                  		move.b	d0,obAngle(a0)
00012DC6 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012DCC                            
00012DCC                            BBall_Move:	; Routine 2
00012DCC 7000                       		moveq	#0,d0
00012DCE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012DD2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012DD6 D040                       		add.w	d0,d0
00012DD8 323B 0000                  		move.w	@index(pc,d0.w),d1
00012DDC 4EBB 1000                  		jsr	@index(pc,d1.w)
00012DFE 6000 C90C                  		bra.w	DisplaySprite
00012E02                            ; ===========================================================================
00012E02 0000                       @index:		dc.w @type00-@index
00012E04 0000                       		dc.w @type01-@index
00012E06 0000                       		dc.w @type02-@index
00012E08 0000                       		dc.w @type03-@index
00012E0A                            ; ===========================================================================
00012E0A                            
00012E0A                            @type00:
00012E0A 4E75                       		rts	
00012E0C                            ; ===========================================================================
00012E0C                            
00012E0C                            @type01:
00012E0C 323C 0060                  		move.w	#$60,d1
00012E10 7000                       		moveq	#0,d0
00012E12 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E16 0828 0000 0022             		btst	#0,obStatus(a0)
00012E1C 6700                       		beq.s	@noflip1
00012E1E 4440                       		neg.w	d0
00012E20 D041                       		add.w	d1,d0
00012E22                            
00012E22                            	@noflip1:
00012E22 3228 003A                  		move.w	bball_origX(a0),d1
00012E26 9240                       		sub.w	d0,d1
00012E28 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012E2C 4E75                       		rts	
00012E2E                            ; ===========================================================================
00012E2E                            
00012E2E                            @type02:
00012E2E 323C 0060                  		move.w	#$60,d1
00012E32 7000                       		moveq	#0,d0
00012E34 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E38 0828 0000 0022             		btst	#0,obStatus(a0)
00012E3E 6700                       		beq.s	@noflip2
00012E40 4440                       		neg.w	d0
00012E42 0640 0080                  		addi.w	#$80,d0
00012E46                            
00012E46                            	@noflip2:
00012E46 3228 0038                  		move.w	bball_origY(a0),d1
00012E4A 9240                       		sub.w	d0,d1
00012E4C 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E50 4E75                       		rts	
00012E52                            ; ===========================================================================
00012E52                            
00012E52                            @type03:
00012E52 3028 003E                  		move.w	bball_speed(a0),d0
00012E56 D168 0026                  		add.w	d0,obAngle(a0)
00012E5A 1028 0026                  		move.b	obAngle(a0),d0
00012E5E 4EB9 0000 3A32             		jsr	(CalcSine).l
00012E64 3428 0038                  		move.w	bball_origY(a0),d2
00012E68 3628 003A                  		move.w	bball_origX(a0),d3
00012E6C 7800                       		moveq	#0,d4
00012E6E 1828 003C                  		move.b	bball_radius(a0),d4
00012E72 2A04                       		move.l	d4,d5
00012E74 C9C0                       		muls.w	d0,d4
00012E76 E084                       		asr.l	#8,d4
00012E78 CBC1                       		muls.w	d1,d5
00012E7A E085                       		asr.l	#8,d5
00012E7C D842                       		add.w	d2,d4
00012E7E DA43                       		add.w	d3,d5
00012E80 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012E84 3145 0008                  		move.w	d5,obX(a0)
00012E88 4E75                       		rts	
00012E88 4E75                       		rts	
00012E8A                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012E8A                            ; --------------------------------------------------------------------------------
00012E8A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012E8A                            ; --------------------------------------------------------------------------------
00012E8A                            
00012E8A                            SME_u_DKx:	
00012E8A 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012E8E 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012E90 05                         SME_u_DKx_6:	dc.b 5	
00012E91 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012E96 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012E9B F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012EA0 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012EA5 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012EAA 01                         SME_u_DKx_20:	dc.b 1	
00012EAB F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012EB0 02                         SME_u_DKx_26:	dc.b 2	
00012EB1 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012EB6 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012EBC 00                         		even
00012EBC 00                         		even
00012EBC                            		include	"_incObj\59 SLZ Elevators.asm"
00012EBC                            ; ---------------------------------------------------------------------------
00012EBC                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012EBC                            ; ---------------------------------------------------------------------------
00012EBC                            
00012EBC                            Elevator:
00012EBC 7000                       		moveq	#0,d0
00012EBE 1028 0024                  		move.b	obRoutine(a0),d0
00012EC2 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012EC6 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012EE8 6000 C822                  		bra.w	DisplaySprite
00012EEC                            ; ===========================================================================
00012EEC 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012EEE 0000                       		dc.w Elev_Platform-Elev_Index
00012EF0 0000                       		dc.w Elev_Action-Elev_Index
00012EF2 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012EF4                            
00012EF4 =00000032                  elev_origX:	equ $32		; original x-axis position
00012EF4 =00000030                  elev_origY:	equ $30		; original y-axis position
00012EF4 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012EF4                            
00012EF4 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012EF6                            
00012EF6 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012EF8 2001                       		dc.b $20, 1
00012EFA 3401                       		dc.b $34, 1
00012EFC 1003                       		dc.b $10, 3
00012EFE 2003                       		dc.b $20, 3
00012F00 3403                       		dc.b $34, 3
00012F02 1401                       		dc.b $14, 1
00012F04 2401                       		dc.b $24, 1
00012F06 2C01                       		dc.b $2C, 1
00012F08 1403                       		dc.b $14, 3
00012F0A 2403                       		dc.b $24, 3
00012F0C 2C03                       		dc.b $2C, 3
00012F0E 2005                       		dc.b $20, 5
00012F10 2007                       		dc.b $20, 7
00012F12 3009                       		dc.b $30, 9
00012F14                            ; ===========================================================================
00012F14                            
00012F14                            Elev_Main:	; Routine 0
00012F14 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F18 7000                       		moveq	#0,d0
00012F1A 1028 0028                  		move.b	obSubtype(a0),d0
00012F1E 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012F20 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012F24 0240 007F                  		andi.w	#$7F,d0
00012F28 C0FC 0006                  		mulu.w	#6,d0
00012F2C 3140 003C                  		move.w	d0,elev_dist(a0)
00012F30 3140 003E                  		move.w	d0,$3E(a0)
00012F34 588F                       		addq.l	#4,sp
00012F36 4E75                       		rts	
00012F38                            ; ===========================================================================
00012F38                            
00012F38                            	@normal:
00012F38 E648                       		lsr.w	#3,d0
00012F3A 0240 001E                  		andi.w	#$1E,d0
00012F3E 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F42 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F46 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F4A 7000                       		moveq	#0,d0
00012F4C 1028 0028                  		move.b	obSubtype(a0),d0
00012F50 D040                       		add.w	d0,d0
00012F52 0240 001E                  		andi.w	#$1E,d0
00012F56 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F5A 101A                       		move.b	(a2)+,d0
00012F5C E548                       		lsl.w	#2,d0
00012F5E 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F62 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F66 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012F6E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F74 117C 0004 0001             		move.b	#4,obRender(a0)
00012F7A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F80 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012F86 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012F8C                            
00012F8C                            Elev_Platform:	; Routine 2
00012F8C 7200                       		moveq	#0,d1
00012F8E 1228 0014                  		move.b	obActWid(a0),d1
00012F92 4EB9 0000 8FE2             		jsr	(PlatformObject).l
00012F98 6000 0000                  		bra.w	Elev_Types
00012F9C                            ; ===========================================================================
00012F9C                            
00012F9C                            Elev_Action:	; Routine 4
00012F9C 7200                       		moveq	#0,d1
00012F9E 1228 0014                  		move.b	obActWid(a0),d1
00012FA2 4EB9 0000 9156             		jsr	(ExitPlatform).l
00012FA8 3F28 0008                  		move.w	obX(a0),-(sp)
00012FAC 6100 0000                  		bsr.w	Elev_Types
00012FB0 341F                       		move.w	(sp)+,d2
00012FB2 4A10                       		tst.b	0(a0)
00012FB4 6700                       		beq.s	@deleted
00012FB6 4EF9 0000 96C0             		jmp	(MvSonicOnPtfm2).l
00012FBC                            
00012FBC                            	@deleted:
00012FBC 4E75                       		rts	
00012FBE                            ; ===========================================================================
00012FBE                            
00012FBE                            Elev_Types:
00012FBE 7000                       		moveq	#0,d0
00012FC0 1028 0028                  		move.b	obSubtype(a0),d0
00012FC4 0240 000F                  		andi.w	#$F,d0
00012FC8 D040                       		add.w	d0,d0
00012FCA 323B 0000                  		move.w	@index(pc,d0.w),d1
00012FCE 4EFB 1000                  		jmp	@index(pc,d1.w)
00012FD2                            ; ===========================================================================
00012FD2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012FD6 0000 0000                  		dc.w @type02-@index, @type01-@index
00012FDA 0000 0000                  		dc.w @type04-@index, @type01-@index
00012FDE 0000 0000                  		dc.w @type06-@index, @type01-@index
00012FE2 0000 0000                  		dc.w @type08-@index, @type09-@index
00012FE6                            ; ===========================================================================
00012FE6                            
00012FE6                            @type00:
00012FE6 4E75                       		rts	
00012FE8                            ; ===========================================================================
00012FE8                            
00012FE8                            @type01:
00012FE8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012FEE 6600                       		bne.s	@notstanding
00012FF0 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012FF4                            
00012FF4                            	@notstanding:
00012FF4 4E75                       		rts	
00012FF6                            ; ===========================================================================
00012FF6                            
00012FF6                            @type02:
00012FF6 6100 0000                  		bsr.w	Elev_Move
00012FFA 3028 0034                  		move.w	$34(a0),d0
00012FFE 4440                       		neg.w	d0
00013000 D068 0030                  		add.w	elev_origY(a0),d0
00013004 3140 000C                  		move.w	d0,obY(a0)
00013008 4E75                       		rts	
0001300A                            ; ===========================================================================
0001300A                            
0001300A                            @type04:
0001300A 6100 0000                  		bsr.w	Elev_Move
0001300E 3028 0034                  		move.w	$34(a0),d0
00013012 D068 0030                  		add.w	elev_origY(a0),d0
00013016 3140 000C                  		move.w	d0,obY(a0)
0001301A 4E75                       		rts	
0001301C                            ; ===========================================================================
0001301C                            
0001301C                            @type06:
0001301C 6100 0000                  		bsr.w	Elev_Move
00013020 3028 0034                  		move.w	$34(a0),d0
00013024 E240                       		asr.w	#1,d0
00013026 4440                       		neg.w	d0
00013028 D068 0030                  		add.w	elev_origY(a0),d0
0001302C 3140 000C                  		move.w	d0,obY(a0)
00013030 3028 0034                  		move.w	$34(a0),d0
00013034 D068 0032                  		add.w	elev_origX(a0),d0
00013038 3140 0008                  		move.w	d0,obX(a0)
0001303C 4E75                       		rts	
0001303E                            ; ===========================================================================
0001303E                            
0001303E                            @type08:
0001303E 6100 0000                  		bsr.w	Elev_Move
00013042 3028 0034                  		move.w	$34(a0),d0
00013046 E240                       		asr.w	#1,d0
00013048 D068 0030                  		add.w	elev_origY(a0),d0
0001304C 3140 000C                  		move.w	d0,obY(a0)
00013050 3028 0034                  		move.w	$34(a0),d0
00013054 4440                       		neg.w	d0
00013056 D068 0032                  		add.w	elev_origX(a0),d0
0001305A 3140 0008                  		move.w	d0,obX(a0)
0001305E 4E75                       		rts	
00013060                            ; ===========================================================================
00013060                            
00013060                            @type09:
00013060 6100 0000                  		bsr.w	Elev_Move
00013064 3028 0034                  		move.w	$34(a0),d0
00013068 4440                       		neg.w	d0
0001306A D068 0030                  		add.w	elev_origY(a0),d0
0001306E 3140 000C                  		move.w	d0,obY(a0)
00013072 4A28 0028                  		tst.b	obSubtype(a0)
00013076 6700 0000                  		beq.w	@typereset
0001307A 4E75                       		rts	
0001307C                            ; ===========================================================================
0001307C                            
0001307C                            	@typereset:
0001307C 0828 0003 0022             		btst	#3,obStatus(a0)
00013082 6700                       		beq.s	@delete
00013084 08E9 0001 0022             		bset	#1,obStatus(a1)
0001308A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013090 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013096                            
00013096                            	@delete:
00013096 6000 C6B4                  		bra.w	DeleteObject
0001309A                            
0001309A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001309A                            
0001309A                            
0001309A                            Elev_Move:
0001309A 3028 0038                  		move.w	$38(a0),d0
0001309E 4A28 003A                  		tst.b	$3A(a0)
000130A2 6600                       		bne.s	loc_10CC8
000130A4 0C40 0800                  		cmpi.w	#$800,d0
000130A8 6400                       		bcc.s	loc_10CD0
000130AA 0640 0010                  		addi.w	#$10,d0
000130AE 6000                       		bra.s	loc_10CD0
000130B0                            ; ===========================================================================
000130B0                            
000130B0                            loc_10CC8:
000130B0 4A40                       		tst.w	d0
000130B2 6700                       		beq.s	loc_10CD0
000130B4 0440 0010                  		subi.w	#$10,d0
000130B8                            
000130B8                            loc_10CD0:
000130B8 3140 0038                  		move.w	d0,$38(a0)
000130BC 48C0                       		ext.l	d0
000130BE E180                       		asl.l	#8,d0
000130C0 D0A8 0034                  		add.l	$34(a0),d0
000130C4 2140 0034                  		move.l	d0,$34(a0)
000130C8 4840                       		swap	d0
000130CA 3428 003C                  		move.w	elev_dist(a0),d2
000130CE B042                       		cmp.w	d2,d0
000130D0 6300                       		bls.s	loc_10CF0
000130D2 117C 0001 003A             		move.b	#1,$3A(a0)
000130D8                            
000130D8                            loc_10CF0:
000130D8 D442                       		add.w	d2,d2
000130DA B042                       		cmp.w	d2,d0
000130DC 6600                       		bne.s	locret_10CFA
000130DE 4228 0028                  		clr.b	obSubtype(a0)
000130E2                            
000130E2                            locret_10CFA:
000130E2 4E75                       		rts	
000130E4                            ; End of function Elev_Move
000130E4                            
000130E4                            ; ===========================================================================
000130E4                            
000130E4                            Elev_MakeMulti:	; Routine 6
000130E4 5368 003C                  		subq.w	#1,elev_dist(a0)
000130E8 6600                       		bne.s	@chkdel
000130EA 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
000130F0 6100 CAA6                  		bsr.w	FindFreeObj
000130F4 6600                       		bne.s	@chkdel
000130F6 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
000130FA 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013100 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013106 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001310C                            
0001310C                            @chkdel:
0001310C 588F                       		addq.l	#4,sp
0001312C 4E75                       		rts	
0001312C 4E75                       		rts	
0001312E                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
0001312E                            ; ---------------------------------------------------------------------------
0001312E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001312E                            ; ---------------------------------------------------------------------------
0001312E                            Map_Elev_internal:
0001312E 0000                       		dc.w @elevator-Map_Elev_internal
00013130 03                         @elevator:	dc.b 3
00013131 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013136 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001313B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013140                            		even
00013140                            		even
00013140                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013140                            ; ---------------------------------------------------------------------------
00013140                            ; Object 5A - platforms	moving in circles (SLZ)
00013140                            ; ---------------------------------------------------------------------------
00013140                            
00013140                            CirclingPlatform:
00013140 7000                       		moveq	#0,d0
00013142 1028 0024                  		move.b	obRoutine(a0),d0
00013146 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
0001314A 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
0001316C 6000 C59E                  		bra.w	DisplaySprite
00013170                            ; ===========================================================================
00013170 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013172 0000                       		dc.w Circ_Platform-Circ_Index
00013174 0000                       		dc.w Circ_Action-Circ_Index
00013176                            
00013176 =00000032                  circ_origX:	equ $32		; original x-axis position
00013176 =00000030                  circ_origY:	equ $30		; original y-axis position
00013176                            ; ===========================================================================
00013176                            
00013176                            Circ_Main:	; Routine 0
00013176 5428 0024                  		addq.b	#2,obRoutine(a0)
0001317A 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00013182 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00013188 117C 0004 0001             		move.b	#4,obRender(a0)
0001318E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013194 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001319A 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000131A0 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000131A6                            
000131A6                            Circ_Platform:	; Routine 2
000131A6 7200                       		moveq	#0,d1
000131A8 1228 0014                  		move.b	obActWid(a0),d1
000131AC 4EB9 0000 8FE2             		jsr	(PlatformObject).l
000131B2 6000 0000                  		bra.w	Circ_Types
000131B6                            ; ===========================================================================
000131B6                            
000131B6                            Circ_Action:	; Routine 4
000131B6 7200                       		moveq	#0,d1
000131B8 1228 0014                  		move.b	obActWid(a0),d1
000131BC 4EB9 0000 9156             		jsr	(ExitPlatform).l
000131C2 3F28 0008                  		move.w	obX(a0),-(sp)
000131C6 6100 0000                  		bsr.w	Circ_Types
000131CA 341F                       		move.w	(sp)+,d2
000131CC 4EF9 0000 96C0             		jmp	(MvSonicOnPtfm2).l
000131D2                            ; ===========================================================================
000131D2                            
000131D2                            Circ_Types:
000131D2 7000                       		moveq	#0,d0
000131D4 1028 0028                  		move.b	obSubtype(a0),d0
000131D8 0240 000C                  		andi.w	#$C,d0
000131DC E248                       		lsr.w	#1,d0
000131DE 323B 0000                  		move.w	@index(pc,d0.w),d1
000131E2 4EFB 1000                  		jmp	@index(pc,d1.w)
000131E6                            ; ===========================================================================
000131E6 0000                       @index:		dc.w @type00-@index
000131E8 0000                       		dc.w @type04-@index
000131EA                            ; ===========================================================================
000131EA                            
000131EA                            @type00:
000131EA 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
000131EE 0401 0050                  		subi.b	#$50,d1		; set radius of circle
000131F2 4881                       		ext.w	d1
000131F4 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000131F8 0402 0050                  		subi.b	#$50,d2
000131FC 4882                       		ext.w	d2
000131FE 0828 0000 0028             		btst	#0,obSubtype(a0)
00013204 6700                       		beq.s	@noshift00a
00013206 4441                       		neg.w	d1
00013208 4442                       		neg.w	d2
0001320A                            
0001320A                            	@noshift00a:
0001320A 0828 0001 0028             		btst	#1,obSubtype(a0)
00013210 6700                       		beq.s	@noshift00b
00013212 4441                       		neg.w	d1
00013214 C342                       		exg	d1,d2
00013216                            
00013216                            	@noshift00b:
00013216 D268 0032                  		add.w	circ_origX(a0),d1
0001321A 3141 0008                  		move.w	d1,obX(a0)
0001321E D468 0030                  		add.w	circ_origY(a0),d2
00013222 3142 000C                  		move.w	d2,obY(a0)
00013226 4E75                       		rts	
00013228                            ; ===========================================================================
00013228                            
00013228                            @type04:
00013228 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
0001322C 0401 0050                  		subi.b	#$50,d1
00013230 4881                       		ext.w	d1
00013232 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013236 0402 0050                  		subi.b	#$50,d2
0001323A 4882                       		ext.w	d2
0001323C 0828 0000 0028             		btst	#0,obSubtype(a0)
00013242 6700                       		beq.s	@noshift04a
00013244 4441                       		neg.w	d1
00013246 4442                       		neg.w	d2
00013248                            
00013248                            	@noshift04a:
00013248 0828 0001 0028             		btst	#1,obSubtype(a0)
0001324E 6700                       		beq.s	@noshift04b
00013250 4441                       		neg.w	d1
00013252 C342                       		exg	d1,d2
00013254                            
00013254                            	@noshift04b:
00013254 4441                       		neg.w	d1
00013256 D268 0032                  		add.w	circ_origX(a0),d1
0001325A 3141 0008                  		move.w	d1,obX(a0)
0001325E D468 0030                  		add.w	circ_origY(a0),d2
00013262 3142 000C                  		move.w	d2,obY(a0)
00013266 4E75                       		rts	
00013266 4E75                       		rts	
00013268                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00013268                            ; ---------------------------------------------------------------------------
00013268                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013268                            ; ---------------------------------------------------------------------------
00013268                            Map_Circ_internal:
00013268 0000                       		dc.w @platform-Map_Circ_internal
0001326A 02                         @platform:	dc.b 2
0001326B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013270 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013276 00                         		even
00013276 00                         		even
00013276                            		include	"_incObj\5B Staircase.asm"
00013276                            ; ---------------------------------------------------------------------------
00013276                            ; Object 5B - blocks that form a staircase (SLZ)
00013276                            ; ---------------------------------------------------------------------------
00013276                            
00013276                            Staircase:
00013276 7000                       		moveq	#0,d0
00013278 1028 0024                  		move.b	obRoutine(a0),d0
0001327C 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013280 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000132A2 6000 C468                  		bra.w	DisplaySprite
000132A6                            ; ===========================================================================
000132A6 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000132A8 0000                       		dc.w Stair_Move-Stair_Index
000132AA 0000                       		dc.w Stair_Solid-Stair_Index
000132AC                            
000132AC =00000030                  stair_origX:	equ $30		; original x-axis position
000132AC =00000032                  stair_origY:	equ $32		; original y-axis position
000132AC                            
000132AC =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000132AC                            ; ===========================================================================
000132AC                            
000132AC                            Stair_Main:	; Routine 0
000132AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000132B0 7638                       		moveq	#$38,d3
000132B2 7801                       		moveq	#1,d4
000132B4 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000132BA 6700                       		beq.s	@notflipped	; if not, branch
000132BC 763B                       		moveq	#$3B,d3
000132BE 78FF                       		moveq	#-1,d4
000132C0                            
000132C0                            	@notflipped:
000132C0 3428 0008                  		move.w	obX(a0),d2
000132C4 2248                       		movea.l	a0,a1
000132C6 7203                       		moveq	#3,d1
000132C8 6000                       		bra.s	@makeblocks
000132CA                            ; ===========================================================================
000132CA                            
000132CA                            @loop:
000132CA 6100 C8E2                  		bsr.w	FindNextFreeObj
000132CE 6600 0000                  		bne.w	@fail
000132D2 137C 0004 0024             		move.b	#4,obRoutine(a1)
000132D8                            
000132D8                            @makeblocks:
000132D8 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
000132DC 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
000132E4 337C 4000 0002             		move.w	#$4000,obGfx(a1)
000132EA 137C 0004 0001             		move.b	#4,obRender(a1)
000132F0 337C 0180 0018             		move.w	#$180,obPriority(a1)
000132F6 137C 0010 0014             		move.b	#$10,obActWid(a1)
000132FC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00013302 3342 0008                  		move.w	d2,obX(a1)
00013306 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001330C 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013312 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013318 0642 0020                  		addi.w	#$20,d2
0001331C 1343 0037                  		move.b	d3,$37(a1)
00013320 2348 003C                  		move.l	a0,stair_parent(a1)
00013324 D604                       		add.b	d4,d3
00013326 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
0001332A                            
0001332A                            	@fail:
0001332A                            
0001332A                            Stair_Move:	; Routine 2
0001332A 7000                       		moveq	#0,d0
0001332C 1028 0028                  		move.b	obSubtype(a0),d0
00013330 0240 0007                  		andi.w	#7,d0
00013334 D040                       		add.w	d0,d0
00013336 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
0001333A 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
0001333E                            
0001333E                            Stair_Solid:	; Routine 4
0001333E 2468 003C                  		movea.l	stair_parent(a0),a2
00013342 7000                       		moveq	#0,d0
00013344 1028 0037                  		move.b	$37(a0),d0
00013348 1032 0000                  		move.b	(a2,d0.w),d0
0001334C D068 0032                  		add.w	stair_origY(a0),d0
00013350 3140 000C                  		move.w	d0,obY(a0)
00013354 7200                       		moveq	#0,d1
00013356 1228 0014                  		move.b	obActWid(a0),d1
0001335A 0641 000B                  		addi.w	#$B,d1
0001335E 343C 0010                  		move.w	#$10,d2
00013362 363C 0011                  		move.w	#$11,d3
00013366 3828 0008                  		move.w	obX(a0),d4
0001336A 6100 E9F6                  		bsr.w	SolidObject
0001336E 4A04                       		tst.b	d4
00013370 6A00                       		bpl.s	loc_10F92
00013372 1544 0036                  		move.b	d4,$36(a2)
00013376                            
00013376                            loc_10F92:
00013376 0828 0003 0022             		btst	#3,obStatus(a0)
0001337C 6700                       		beq.s	locret_10FA0
0001337E 157C 0001 0036             		move.b	#1,$36(a2)
00013384                            
00013384                            locret_10FA0:
00013384 4E75                       		rts	
00013386                            ; ===========================================================================
00013386 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00013388 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001338A 0000                       		dc.w Stair_Type02-Stair_TypeIndex
0001338C 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001338E                            ; ===========================================================================
0001338E                            
0001338E                            Stair_Type00:
0001338E 4A68 0034                  		tst.w	$34(a0)
00013392 6600                       		bne.s	loc_10FC0
00013394 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001339A 6600                       		bne.s	locret_10FBE
0001339C 317C 001E 0034             		move.w	#$1E,$34(a0)
000133A2                            
000133A2                            locret_10FBE:
000133A2 4E75                       		rts	
000133A4                            ; ===========================================================================
000133A4                            
000133A4                            loc_10FC0:
000133A4 5368 0034                  		subq.w	#1,$34(a0)
000133A8 66F8                       		bne.s	locret_10FBE
000133AA 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133AE 4E75                       		rts	
000133B0                            ; ===========================================================================
000133B0                            
000133B0                            Stair_Type02:
000133B0 4A68 0034                  		tst.w	$34(a0)
000133B4 6600                       		bne.s	loc_10FE0
000133B6 4A28 0036                  		tst.b	$36(a0)
000133BA 6A00                       		bpl.s	locret_10FDE
000133BC 317C 003C 0034             		move.w	#$3C,$34(a0)
000133C2                            
000133C2                            locret_10FDE:
000133C2 4E75                       		rts	
000133C4                            ; ===========================================================================
000133C4                            
000133C4                            loc_10FE0:
000133C4 5368 0034                  		subq.w	#1,$34(a0)
000133C8 6600                       		bne.s	loc_10FEC
000133CA 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133CE 4E75                       		rts	
000133D0                            ; ===========================================================================
000133D0                            
000133D0                            loc_10FEC:
000133D0 43E8 0038                  		lea	$38(a0),a1
000133D4 3028 0034                  		move.w	$34(a0),d0
000133D8 E408                       		lsr.b	#2,d0
000133DA 0200 0001                  		andi.b	#1,d0
000133DE 12C0                       		move.b	d0,(a1)+
000133E0 0A00 0001                  		eori.b	#1,d0
000133E4 12C0                       		move.b	d0,(a1)+
000133E6 0A00 0001                  		eori.b	#1,d0
000133EA 12C0                       		move.b	d0,(a1)+
000133EC 0A00 0001                  		eori.b	#1,d0
000133F0 12C0                       		move.b	d0,(a1)+
000133F2 4E75                       		rts	
000133F4                            ; ===========================================================================
000133F4                            
000133F4                            Stair_Type01:
000133F4 43E8 0038                  		lea	$38(a0),a1
000133F8 0C11 0080                  		cmpi.b	#$80,(a1)
000133FC 6700                       		beq.s	locret_11038
000133FE 5211                       		addq.b	#1,(a1)
00013400 7200                       		moveq	#0,d1
00013402 1219                       		move.b	(a1)+,d1
00013404 4841                       		swap	d1
00013406 E289                       		lsr.l	#1,d1
00013408 2401                       		move.l	d1,d2
0001340A E289                       		lsr.l	#1,d1
0001340C 2601                       		move.l	d1,d3
0001340E D682                       		add.l	d2,d3
00013410 4841                       		swap	d1
00013412 4842                       		swap	d2
00013414 4843                       		swap	d3
00013416 12C3                       		move.b	d3,(a1)+
00013418 12C2                       		move.b	d2,(a1)+
0001341A 12C1                       		move.b	d1,(a1)+
0001341C                            
0001341C                            locret_11038:
0001341C 4E75                       		rts	
0001341E 4E75                       		rts	
0001341E 4E75                       		rts	
00013420                            Map_Stair:	include	"_maps\Staircase.asm"
00013420                            ; ---------------------------------------------------------------------------
00013420                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013420                            ; ---------------------------------------------------------------------------
00013420                            Map_Stair_internal:
00013420 0000                       		dc.w @block-Map_Stair_internal
00013422 01                         @block:		dc.b 1
00013423 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013428                            		even
00013428                            		even
00013428                            		include	"_incObj\5C Pylon.asm"
00013428                            ; ---------------------------------------------------------------------------
00013428                            ; Object 5C - metal pylons in foreground (SLZ)
00013428                            ; ---------------------------------------------------------------------------
00013428                            
00013428                            Pylon:
00013428 7000                       		moveq	#0,d0
0001342A 1028 0024                  		move.b	obRoutine(a0),d0
0001342E 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013432 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013436                            ; ===========================================================================
00013436 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013438 0000                       		dc.w Pyl_Display-Pyl_Index
0001343A                            ; ===========================================================================
0001343A                            
0001343A                            Pyl_Main:	; Routine 0
0001343A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001343E 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013446 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001344C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013452                            
00013452                            Pyl_Display:	; Routine 2
00013452 2238 F700                  		move.l	(v_screenposx).w,d1
00013456 D281                       		add.l	d1,d1
00013458 4841                       		swap	d1
0001345A 4441                       		neg.w	d1
0001345C 3141 0008                  		move.w	d1,obX(a0)
00013460 2238 F704                  		move.l	(v_screenposy).w,d1
00013464 D281                       		add.l	d1,d1
00013466 4841                       		swap	d1
00013468 0241 003F                  		andi.w	#$3F,d1
0001346C 4441                       		neg.w	d1
0001346E 0641 0100                  		addi.w	#$100,d1
00013472 3141 000A                  		move.w	d1,obScreenY(a0)
00013476 6000 C294                  		bra.w	DisplaySprite
00013476 6000 C294                  		bra.w	DisplaySprite
0001347A                            Map_Pylon:	include	"_maps\Pylon.asm"
0001347A                            ; ---------------------------------------------------------------------------
0001347A                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001347A                            ; ---------------------------------------------------------------------------
0001347A                            Map_Pylon_internal:
0001347A 0000                       		dc.w @pylon-Map_Pylon_internal
0001347C 09                         @pylon:		dc.b 9
0001347D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013482 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013487 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001348C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013491 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00013496 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001349B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000134A0 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000134A5 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000134AA                            		even
000134AA                            		even
000134AA                            
000134AA                            		include	"_incObj\1B Water Surface.asm"
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            ; Object 1B - water surface (LZ)
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            
000134AA                            WaterSurface:
000134AA 7000                       		moveq	#0,d0
000134AC 1028 0024                  		move.b	obRoutine(a0),d0
000134B0 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000134B4 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000134B8                            ; ===========================================================================
000134B8 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000134BA 0000                       		dc.w Surf_Action-Surf_Index
000134BC                            
000134BC =00000030                  surf_origX:	equ $30		; original x-axis position
000134BC =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000134BC                            ; ===========================================================================
000134BC                            
000134BC                            Surf_Main:	; Routine 0
000134BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000134C0 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000134C8 317C C300 0002             		move.w	#$C300,obGfx(a0)
000134CE 117C 0004 0001             		move.b	#4,obRender(a0)
000134D4 117C 0080 0014             		move.b	#$80,obActWid(a0)
000134DA 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000134E0                            
000134E0                            Surf_Action:	; Routine 2
000134E0 3238 F700                  		move.w	(v_screenposx).w,d1
000134E4 0241 FFE0                  		andi.w	#$FFE0,d1
000134E8 D268 0030                  		add.w	surf_origX(a0),d1
000134EC 0838 0000 FE05             		btst	#0,(v_framebyte).w
000134F2 6700                       		beq.s	@even		; branch on even frames
000134F4 0641 0020                  		addi.w	#$20,d1
000134F8                            
000134F8                            	@even:
000134F8 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000134FC 3238 F646                  		move.w	(v_waterpos1).w,d1
00013500 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
00013504 4A28 0032                  		tst.b	surf_freeze(a0)
00013508 6600                       		bne.s	@stopped
0001350A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013510 6700                       		beq.s	@animate	; if not, branch
00013512 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013516 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001351C 6000                       		bra.s	@display
0001351E                            ; ===========================================================================
0001351E                            
0001351E                            @stopped:
0001351E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013522 6600                       		bne.s	@display	; if yes, branch
00013524 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
0001352A 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
0001352E                            
0001352E                            @animate:
0001352E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013532 6A00                       		bpl.s	@display
00013534 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001353A 5228 001A                  		addq.b	#1,obFrame(a0)
0001353E 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013544 6500                       		bcs.s	@display
00013546 117C 0000 001A             		move.b	#0,obFrame(a0)
0001354C                            
0001354C                            @display:
0001354C 6000 C1BE                  		bra.w	DisplaySprite
0001354C 6000 C1BE                  		bra.w	DisplaySprite
00013550                            Map_Surf:	include	"_maps\Water Surface.asm"
00013550                            ; --------------------------------------------------------------------------------
00013550                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013550                            ; --------------------------------------------------------------------------------
00013550                            
00013550                            SME_LGSi8:	
00013550 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013554 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013558 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
0001355C 03                         SME_LGSi8_C:	dc.b 3	
0001355D F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013562 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013567 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001356C 03                         SME_LGSi8_1C:	dc.b 3	
0001356D F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013572 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013577 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001357C 03                         SME_LGSi8_2C:	dc.b 3	
0001357D F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013582 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013587 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001358C 06                         SME_LGSi8_3C:	dc.b 6	
0001358D F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013592 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
00013597 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001359C F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000135A1 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135A6 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000135AB 06                         SME_LGSi8_5B:	dc.b 6	
000135AC F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135B1 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000135B6 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135BB F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000135C0 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135C5 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000135CA 06                         SME_LGSi8_7A:	dc.b 6	
000135CB F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135D0 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000135D5 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135DA F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000135DF F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135E4 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
000135EA 00                         		even
000135EA 00                         		even
000135EA                            		include	"_incObj\0B Pole that Breaks.asm"
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            ; Object 0B - pole that	breaks (LZ)
000135EA                            ; ---------------------------------------------------------------------------
000135EA                            
000135EA                            Pole:
000135EA 7000                       		moveq	#0,d0
000135EC 1028 0024                  		move.b	obRoutine(a0),d0
000135F0 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000135F4 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
000135F8                            ; ===========================================================================
000135F8 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000135FA 0000                       		dc.w Pole_Action-Pole_Index
000135FC 0000                       		dc.w Pole_Display-Pole_Index
000135FE                            
000135FE =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000135FE =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000135FE                            ; ===========================================================================
000135FE                            
000135FE                            Pole_Main:	; Routine 0
000135FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013602 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
0001360A 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013610 117C 0004 0001             		move.b	#4,obRender(a0)
00013616 117C 0008 0014             		move.b	#8,obActWid(a0)
0001361C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013622 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013628 7000                       		moveq	#0,d0
0001362A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001362E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013632 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013636                            
00013636                            Pole_Action:	; Routine 2
00013636 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
0001363A 6700                       		beq.s	@grab		; if not, branch
0001363C 4A68 0030                  		tst.w	pole_time(a0)
00013640 6700                       		beq.s	@moveup
00013642 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013646 6600                       		bne.s	@moveup
00013648 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
0001364E 6000                       		bra.s	@release
00013650                            ; ===========================================================================
00013650                            
00013650                            @moveup:
00013650 43F8 D000                  		lea	(v_player).w,a1
00013654 3028 000C                  		move.w	obY(a0),d0
00013658 0440 0018                  		subi.w	#$18,d0
0001365C 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013662 6700                       		beq.s	@movedown	; if not, branch
00013664 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013668 B069 000C                  		cmp.w	obY(a1),d0
0001366C 6500                       		bcs.s	@movedown
0001366E 3340 000C                  		move.w	d0,obY(a1)
00013672                            
00013672                            @movedown:
00013672 0640 0024                  		addi.w	#$24,d0
00013676 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001367C 6700                       		beq.s	@letgo		; if not, branch
0001367E 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013682 B069 000C                  		cmp.w	obY(a1),d0
00013686 6400                       		bcc.s	@letgo
00013688 3340 000C                  		move.w	d0,obY(a1)
0001368C                            
0001368C                            @letgo:
0001368C 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013690 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00013694 6700                       		beq.s	Pole_Display	; if not, branch
00013696                            
00013696                            @release:
00013696 4228 0020                  		clr.b	obColType(a0)
0001369A 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
0001369E 4238 F7C8                  		clr.b	(f_lockmulti).w
000136A2 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000136A6 4228 0032                  		clr.b	pole_grabbed(a0)
000136AA 6000                       		bra.s	Pole_Display
000136AC                            ; ===========================================================================
000136AC                            
000136AC                            @grab:
000136AC 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000136B0 6700                       		beq.s	Pole_Display	; if not, branch
000136B2 43F8 D000                  		lea	(v_player).w,a1
000136B6 3028 0008                  		move.w	obX(a0),d0
000136BA 0640 0014                  		addi.w	#$14,d0
000136BE B069 0008                  		cmp.w	obX(a1),d0
000136C2 6400                       		bcc.s	Pole_Display
000136C4 4228 0021                  		clr.b	obColProp(a0)
000136C8 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000136CE 6400                       		bcc.s	Pole_Display
000136D0 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000136D4 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000136D8 3028 0008                  		move.w	obX(a0),d0
000136DC 0640 0014                  		addi.w	#$14,d0
000136E0 3340 0008                  		move.w	d0,obX(a1)
000136E4 08A9 0000 0022             		bclr	#0,obStatus(a1)
000136EA 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000136F0 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000136F6 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000136FC 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013702                            
00013702                            Pole_Display:	; Routine 4
00013702 6000 E1C6                  		bra.w	RememberState
00013702 6000 E1C6                  		bra.w	RememberState
00013706                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013706                            ; ---------------------------------------------------------------------------
00013706                            ; Sprite mappings - pole that breaks (LZ)
00013706                            ; ---------------------------------------------------------------------------
00013706                            Map_Pole_internal:
00013706 0000                       		dc.w @normal-Map_Pole_internal
00013708 0000                       		dc.w @broken-Map_Pole_internal
0001370A 02                         @normal:	dc.b 2			; normal pole
0001370B E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013710 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013715 04                         @broken:	dc.b 4			; broken pole
00013716 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001371B F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013720 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013725 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001372A                            		even
0001372A                            		even
0001372A                            		include	"_incObj\0C Flapping Door.asm"
0001372A                            ; ---------------------------------------------------------------------------
0001372A                            ; Object 0C - flapping door (LZ)
0001372A                            ; ---------------------------------------------------------------------------
0001372A                            
0001372A                            FlapDoor:
0001372A 7000                       		moveq	#0,d0
0001372C 1028 0024                  		move.b	obRoutine(a0),d0
00013730 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013734 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013738                            ; ===========================================================================
00013738 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
0001373A 0000                       		dc.w Flap_OpenClose-Flap_Index
0001373C                            
0001373C =00000032                  flap_time:	equ $32		; time between opening/closing
0001373C =00000030                  flap_wait:	equ $30		; time until change
0001373C                            ; ===========================================================================
0001373C                            
0001373C                            Flap_Main:	; Routine 0
0001373C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013740 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013748 317C 4328 0002             		move.w	#$4328,obGfx(a0)
0001374E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013754 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001375A 7000                       		moveq	#0,d0
0001375C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013760 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013764 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013768                            
00013768                            Flap_OpenClose:	; Routine 2
00013768 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001376C 6A00                       		bpl.s	@wait		; if time remains, branch
0001376E 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013774 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001377A 4A28 0001                  		tst.b	obRender(a0)
0001377E 6A00                       		bpl.s	@nosound
0001378A                            
0001378A                            	@wait:
0001378A                            	@nosound:
0001378A 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013790 6100 9062                  		bsr.w	AnimateSprite
00013794 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
00013798 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0001379C 6600                       		bne.s	@display	; if yes, branch
0001379E 3038 D008                  		move.w	(v_player+obX).w,d0
000137A2 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000137A6 6400                       		bcc.s	@display	; if yes, branch
000137A8 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137AE 323C 0013                  		move.w	#$13,d1
000137B2 343C 0020                  		move.w	#$20,d2
000137B6 3602                       		move.w	d2,d3
000137B8 5243                       		addq.w	#1,d3
000137BA 3828 0008                  		move.w	obX(a0),d4
000137BE 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000137C2                            
000137C2                            	@display:
000137C2 6000 E106                  		bra.w	RememberState
000137C2 6000 E106                  		bra.w	RememberState
000137C6                            		include	"_anim\Flapping Door.asm"
000137C6                            ; ---------------------------------------------------------------------------
000137C6                            ; Animation script - flapping door (LZ)
000137C6                            ; ---------------------------------------------------------------------------
000137C6 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000137C8 0000                       		dc.w @closing-Ani_Flap
000137CA 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000137D0 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000137D6                            		even
000137D6                            		even
000137D6                            Map_Flap:	include	"_maps\Flapping Door.asm"
000137D6                            ; ---------------------------------------------------------------------------
000137D6                            ; Sprite mappings - flapping door (LZ)
000137D6                            ; ---------------------------------------------------------------------------
000137D6                            Map_Flap_internal:
000137D6 0000                       		dc.w @closed-Map_Flap_internal
000137D8 0000                       		dc.w @halfway-Map_Flap_internal
000137DA 0000                       		dc.w @open-Map_Flap_internal
000137DC 02                         @closed:	dc.b 2
000137DD E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000137E2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000137E7 02                         @halfway:	dc.b 2
000137E8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000137ED 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000137F2 02                         @open:		dc.b 2
000137F3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000137F8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000137FE 00                         		even
000137FE 00                         		even
000137FE                            
000137FE                            		include	"_incObj\71 Invisible Barriers.asm"
000137FE                            ; ---------------------------------------------------------------------------
000137FE                            ; Object 71 - invisible	solid barriers
000137FE                            ; ---------------------------------------------------------------------------
000137FE                            
000137FE                            Invisibarrier:
000137FE 7000                       		moveq	#0,d0
00013800 1028 0024                  		move.b	obRoutine(a0),d0
00013804 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013808 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
0001380C                            ; ===========================================================================
0001380C 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
0001380E 0000                       		dc.w Invis_Solid-Invis_Index
00013810                            
00013810 =00000016                  invis_height:	equ $16		; height in pixels
00013810                            ; ===========================================================================
00013810                            
00013810                            Invis_Main:	; Routine 0
00013810 5428 0024                  		addq.b	#2,obRoutine(a0)
00013814 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
0001381C 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013822 0028 0004 0001             		ori.b	#4,obRender(a0)
00013828 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001382C 1200                       		move.b	d0,d1
0001382E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013832 0640 0010                  		addi.w	#$10,d0
00013836 E248                       		lsr.w	#1,d0
00013838 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
0001383C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013840 5241                       		addq.w	#1,d1
00013842 E749                       		lsl.w	#3,d1
00013844 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013848                            
00013848                            Invis_Solid:	; Routine 2
00013848 6100 C142                  		bsr.w	ChkObjectVisible
0001384C 6600                       		bne.s	@chkdel
0001384E 7200                       		moveq	#0,d1
00013850 1228 0014                  		move.b	obActWid(a0),d1
00013854 0641 000B                  		addi.w	#$B,d1
00013858 7400                       		moveq	#0,d2
0001385A 1428 0016                  		move.b	invis_height(a0),d2
0001385E 3602                       		move.w	d2,d3
00013860 5243                       		addq.w	#1,d3
00013862 3828 0008                  		move.w	obX(a0),d4
00013866 6100 E542                  		bsr.w	SolidObject71
0001386A                            
0001386A                            @chkdel:
00013886 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001388A 6700                       		beq.s	@nodisplay	; if not, branch
0001388C 4EF9 0000 F70C             		jmp	(DisplaySprite).l	; if yes, display the object
00013892                            
00013892                            	@nodisplay:
00013892 4E75                       		rts	
00013894                            
00013894                            	@delete:
00013894 4EF9 0000 F74C             		jmp	(DeleteObject).l
00013894 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001389A                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
0001389A                            ; --------------------------------------------------------------------------------
0001389A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001389A                            ; --------------------------------------------------------------------------------
0001389A                            
0001389A                            SME_t60cE:	
0001389A 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
0001389E 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000138A0 04                         SME_t60cE_6:	dc.b 4	
000138A1 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000138A6 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000138AB F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000138B0 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000138B5 04                         SME_t60cE_1B:	dc.b 4	
000138B6 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000138BB E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000138C0 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000138C5 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000138CA 04                         SME_t60cE_30:	dc.b 4	
000138CB E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000138D0 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000138D5 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000138DA 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000138E0 00                         		even
000138E0 00                         		even
000138E0                            
000138E0                            		include	"_incObj\5D Fan.asm"
000138E0                            ; ---------------------------------------------------------------------------
000138E0                            ; Object 5D - fans (SLZ)
000138E0                            ; ---------------------------------------------------------------------------
000138E0                            
000138E0                            Fan:
000138E0 7000                       		moveq	#0,d0
000138E2 1028 0024                  		move.b	obRoutine(a0),d0
000138E6 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
000138EA 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000138EE                            ; ===========================================================================
000138EE 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
000138F0 0000                       		dc.w Fan_Delay-Fan_Index
000138F2                            
000138F2 =00000030                  fan_time:	equ $30		; time between switching on/off
000138F2 =00000032                  fan_switch:	equ $32		; on/off switch
000138F2                            ; ===========================================================================
000138F2                            
000138F2                            Fan_Main:	; Routine 0
000138F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000138F6 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000138FE 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00013904 0028 0004 0001             		ori.b	#4,obRender(a0)
0001390A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013910 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013916                            
00013916                            Fan_Delay:	; Routine 2
00013916 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
0001391C 6600                       		bne.s	@blow		; if yes, branch
0001391E 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013922 6A00                       		bpl.s	@blow		; if time remains, branch
00013924 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
0001392A 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013930 6700                       		beq.s	@blow		; if fan is off, branch
00013932 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013938                            
00013938                            @blow:
00013938 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
0001393C 6600 0000                  		bne.w	@chkdel		; if not, branch
00013940 43F8 D000                  		lea	(v_player).w,a1
00013944 3029 0008                  		move.w	obX(a1),d0
00013948 9068 0008                  		sub.w	obX(a0),d0
0001394C 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013952 6600                       		bne.s	@chksonic	; if yes, branch
00013954 4440                       		neg.w	d0
00013956                            
00013956                            @chksonic:
00013956 0640 0050                  		addi.w	#$50,d0
0001395A 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001395E 6400                       		bcc.s	@animate	; if yes, branch
00013960 3229 000C                  		move.w	obY(a1),d1
00013964 0641 0060                  		addi.w	#$60,d1
00013968 9268 000C                  		sub.w	obY(a0),d1
0001396C 6500                       		bcs.s	@animate	; branch if Sonic is too low
0001396E 0C41 0070                  		cmpi.w	#$70,d1
00013972 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013974 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013978 6400                       		bcc.s	@faraway	; if yes, branch
0001397A 4640                       		not.w	d0
0001397C D040                       		add.w	d0,d0
0001397E                            
0001397E                            	@faraway:
0001397E 0640 0060                  		addi.w	#$60,d0
00013982 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013988 6600                       		bne.s	@right		; if yes, branch
0001398A 4440                       		neg.w	d0
0001398C                            
0001398C                            	@right:
0001398C 4400                       		neg.b	d0
0001398E E840                       		asr.w	#4,d0
00013990 0828 0000 0028             		btst	#0,obSubtype(a0)
00013996 6700                       		beq.s	@movesonic
00013998 4440                       		neg.w	d0
0001399A                            
0001399A                            	@movesonic:
0001399A D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
0001399E                            
0001399E                            @animate:
0001399E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000139A2 6A00                       		bpl.s	@chkdel
000139A4 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000139AA 5228 001B                  		addq.b	#1,obAniFrame(a0)
000139AE 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000139B4 6500                       		bcs.s	@noreset
000139B6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000139BC                            
000139BC                            	@noreset:
000139BC 7000                       		moveq	#0,d0
000139BE 0828 0000 0028             		btst	#0,obSubtype(a0)
000139C4 6700                       		beq.s	@noflip
000139C6 7002                       		moveq	#2,d0
000139C8                            
000139C8                            	@noflip:
000139C8 D028 001B                  		add.b	obAniFrame(a0),d0
000139CC 1140 001A                  		move.b	d0,obFrame(a0)
000139D0                            
000139D0                            @chkdel:
000139D0 6100 BD3A                  		bsr.w	DisplaySprite
000139F2 4E75                       		rts	
000139F2 4E75                       		rts	
000139F4                            Map_Fan:	include	"_maps\Fan.asm"
000139F4                            ; ---------------------------------------------------------------------------
000139F4                            ; Sprite mappings - fans (SLZ)
000139F4                            ; ---------------------------------------------------------------------------
000139F4                            Map_Fan_internal:
000139F4 0000                       		dc.w @fan1-Map_Fan_internal
000139F6 0000                       		dc.w @fan2-Map_Fan_internal
000139F8 0000                       		dc.w @fan3-Map_Fan_internal
000139FA 0000                       		dc.w @fan2-Map_Fan_internal
000139FC 0000                       		dc.w @fan1-Map_Fan_internal
000139FE 02                         @fan1:		dc.b 2
000139FF F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013A04 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013A09 02                         @fan2:		dc.b 2
00013A0A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013A0F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013A14 02                         @fan3:		dc.b 2
00013A15 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013A1A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013A20 00                         		even
00013A20 00                         		even
00013A20                            		include	"_incObj\5E Seesaw.asm"
00013A20                            ; ---------------------------------------------------------------------------
00013A20                            ; Object 5E - seesaws (SLZ)
00013A20                            ; ---------------------------------------------------------------------------
00013A20                            
00013A20                            Seesaw:
00013A20 7000                       		moveq	#0,d0
00013A22 1028 0024                  		move.b	obRoutine(a0),d0
00013A26 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013A2A 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013A2E 3028 0000                  		move.w	see_origX(a0),d0
00013A32 0240 FF80                  		andi.w	#$FF80,d0
00013A36 3238 F700                  		move.w	(v_screenposx).w,d1
00013A3A 0441 0080                  		subi.w	#$80,d1
00013A3E 0241 FF80                  		andi.w	#$FF80,d1
00013A42 9041                       		sub.w	d1,d0
00013A44 6B00 BD06                  		bmi.w	DeleteObject
00013A48 0C40 0280                  		cmpi.w	#$280,d0
00013A4C 6200 BCFE                  		bhi.w	DeleteObject
00013A50 6000 BCBA                  		bra.w	DisplaySprite
00013A54                            ; ===========================================================================
00013A54 0000                       See_Index:	dc.w See_Main-See_Index
00013A56 0000                       		dc.w See_Slope-See_Index
00013A58 0000                       		dc.w See_Slope2-See_Index
00013A5A 0000                       		dc.w See_Spikeball-See_Index
00013A5C 0000                       		dc.w See_MoveSpike-See_Index
00013A5E 0000                       		dc.w See_SpikeFall-See_Index
00013A60                            
00013A60 =00000030                  see_origX:	equ $30		; original x-axis position
00013A60 =00000034                  see_origY:	equ $34		; original y-axis position
00013A60 =00000038                  see_speed:	equ $38		; speed of collision
00013A60 =0000003A                  see_frame:	equ $3A		; 
00013A60 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A60                            ; ===========================================================================
00013A60                            
00013A60                            See_Main:	; Routine 0
00013A60 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A64 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A6C 317C 03D4 0002             		move.w	#$3D4,obGfx(a0)
00013A72 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A78 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013A7E 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013A84 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013A8A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013A8E 6600                       		bne.s	@noball		; if not, branch
00013A90                            
00013A90 6100 C11C                  		bsr.w	FindNextFreeObj
00013A94 6600                       		bne.s	@noball
00013A96 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013A9A 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013A9E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013AA4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013AAA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013AB0 2348 003C                  		move.l	a0,see_parent(a1)
00013AB4                            
00013AB4                            	@noball:
00013AB4 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013ABA 6700                       		beq.s	@noflip		; if not, branch
00013ABC 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013AC2                            
00013AC2                            	@noflip:
00013AC2 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013AC8                            
00013AC8                            See_Slope:	; Routine 2
00013AC8 1228 003A                  		move.b	see_frame(a0),d1
00013ACC 6100 0000                  		bsr.w	See_ChgFrame
00013AD0 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013AD6 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013ADC 6700                       		beq.s	@notflat	; if not, branch
00013ADE 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013AE4                            
00013AE4                            	@notflat:
00013AE4 43F8 D000                  		lea	(v_player).w,a1
00013AE8 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013AEE 323C 0030                  		move.w	#$30,d1
00013AF2 4EB9 0000 90B6             		jsr	(SlopeObject).l
00013AF8 4E75                       		rts	
00013AFA                            ; ===========================================================================
00013AFA                            
00013AFA                            See_Slope2:	; Routine 4
00013AFA 6100 0000                  		bsr.w	See_ChkSide
00013AFE 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B04 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B0A 6700                       		beq.s	@notflat	; if not, branch
00013B0C 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B12                            
00013B12                            	@notflat:
00013B12 323C 0030                  		move.w	#$30,d1
00013B16 4EB9 0000 9156             		jsr	(ExitPlatform).l
00013B1C 323C 0030                  		move.w	#$30,d1
00013B20 3428 0008                  		move.w	obX(a0),d2
00013B24 4EB9 0000 A0B2             		jsr	(SlopeObject2).l
00013B2A 4E75                       		rts	
00013B2C                            ; ===========================================================================
00013B2C                            
00013B2C                            See_ChkSide:
00013B2C 7202                       		moveq	#2,d1
00013B2E 43F8 D000                  		lea	(v_player).w,a1
00013B32 3028 0008                  		move.w	obX(a0),d0
00013B36 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013B3A 6400                       		bcc.s	@leftside	; if yes, branch
00013B3C 4440                       		neg.w	d0
00013B3E 7200                       		moveq	#0,d1
00013B40                            
00013B40                            	@leftside:
00013B40 0C40 0008                  		cmpi.w	#8,d0
00013B44 6400                       		bcc.s	See_ChgFrame
00013B46 7201                       		moveq	#1,d1
00013B48                            
00013B48                            See_ChgFrame:
00013B48 1028 001A                  		move.b	obFrame(a0),d0
00013B4C B001                       		cmp.b	d1,d0		; does frame need to change?
00013B4E 6700                       		beq.s	@noflip		; if not, branch
00013B50 6400                       		bcc.s	@loc_11772
00013B52 5400                       		addq.b	#2,d0
00013B54                            
00013B54                            	@loc_11772:
00013B54 5300                       		subq.b	#1,d0
00013B56 1140 001A                  		move.b	d0,obFrame(a0)
00013B5A 1141 003A                  		move.b	d1,see_frame(a0)
00013B5E 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B64 0828 0001 001A             		btst	#1,obFrame(a0)
00013B6A 6700                       		beq.s	@noflip
00013B6C 08E8 0000 0001             		bset	#0,obRender(a0)
00013B72                            
00013B72                            	@noflip:
00013B72 4E75                       		rts	
00013B74                            ; ===========================================================================
00013B74                            
00013B74                            See_Spikeball:	; Routine 6
00013B74 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B78 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013B80 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013B86 0028 0004 0001             		ori.b	#4,obRender(a0)
00013B8C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013B92 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013B98 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013B9E 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BA4 0668 0028 0008             		addi.w	#$28,obX(a0)
00013BAA 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013BB0 117C 0001 001A             		move.b	#1,obFrame(a0)
00013BB6 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013BBC 6700                       		beq.s	See_MoveSpike	; if not, branch
00013BBE 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013BC4 117C 0002 003A             		move.b	#2,see_frame(a0)
00013BCA                            
00013BCA                            See_MoveSpike:	; Routine 8
00013BCA 2268 003C                  		movea.l	see_parent(a0),a1
00013BCE 7000                       		moveq	#0,d0
00013BD0 1028 003A                  		move.b	see_frame(a0),d0
00013BD4 9029 003A                  		sub.b	see_frame(a1),d0
00013BD8 6700                       		beq.s	loc_1183E
00013BDA 6400                       		bcc.s	loc_117FC
00013BDC 4400                       		neg.b	d0
00013BDE                            
00013BDE                            loc_117FC:
00013BDE 323C F7E8                  		move.w	#-$818,d1
00013BE2 343C FEEC                  		move.w	#-$114,d2
00013BE6 0C00 0001                  		cmpi.b	#1,d0
00013BEA 6700                       		beq.s	loc_11822
00013BEC 323C F510                  		move.w	#-$AF0,d1
00013BF0 343C FF34                  		move.w	#-$CC,d2
00013BF4 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013BFA 6D00                       		blt.s	loc_11822
00013BFC 323C F200                  		move.w	#-$E00,d1
00013C00 343C FF60                  		move.w	#-$A0,d2
00013C04                            
00013C04                            loc_11822:
00013C04 3141 0012                  		move.w	d1,obVelY(a0)
00013C08 3142 0010                  		move.w	d2,obVelX(a0)
00013C0C 3028 0008                  		move.w	obX(a0),d0
00013C10 9068 0030                  		sub.w	see_origX(a0),d0
00013C14 6400                       		bcc.s	loc_11838
00013C16 4468 0010                  		neg.w	obVelX(a0)
00013C1A                            
00013C1A                            loc_11838:
00013C1A 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C1E 6000                       		bra.s	See_SpikeFall
00013C20                            ; ===========================================================================
00013C20                            
00013C20                            loc_1183E:
00013C20 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C26 7000                       		moveq	#0,d0
00013C28 1029 001A                  		move.b	obFrame(a1),d0
00013C2C 343C 0028                  		move.w	#$28,d2
00013C30 3228 0008                  		move.w	obX(a0),d1
00013C34 9268 0030                  		sub.w	see_origX(a0),d1
00013C38 6400                       		bcc.s	loc_1185C
00013C3A 4442                       		neg.w	d2
00013C3C 5440                       		addq.w	#2,d0
00013C3E                            
00013C3E                            loc_1185C:
00013C3E D040                       		add.w	d0,d0
00013C40 3228 0034                  		move.w	see_origY(a0),d1
00013C44 D272 0000                  		add.w	(a2,d0.w),d1
00013C48 3141 000C                  		move.w	d1,obY(a0)
00013C4C D468 0030                  		add.w	see_origX(a0),d2
00013C50 3142 0008                  		move.w	d2,obX(a0)
00013C54 4268 000E                  		clr.w	obY+2(a0)
00013C58 4268 000A                  		clr.w	obX+2(a0)
00013C5C 4E75                       		rts	
00013C5E                            ; ===========================================================================
00013C5E                            
00013C5E                            See_SpikeFall:	; Routine $A
00013C5E 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C62 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C64 6100 BA5A                  		bsr.w	ObjectFall
00013C68 3028 0034                  		move.w	see_origY(a0),d0
00013C6C 0440 002F                  		subi.w	#$2F,d0
00013C70 B068 000C                  		cmp.w	obY(a0),d0
00013C74 6E00                       		bgt.s	locret_11898
00013C76 6100 BA48                  		bsr.w	ObjectFall
00013C7A                            
00013C7A                            locret_11898:
00013C7A 4E75                       		rts	
00013C7C                            ; ===========================================================================
00013C7C                            
00013C7C                            loc_1189A:
00013C7C 6100 BA42                  		bsr.w	ObjectFall
00013C80 2268 003C                  		movea.l	see_parent(a0),a1
00013C84 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C8A 7000                       		moveq	#0,d0
00013C8C 1029 001A                  		move.b	obFrame(a1),d0
00013C90 3228 0008                  		move.w	obX(a0),d1
00013C94 9268 0030                  		sub.w	see_origX(a0),d1
00013C98 6400                       		bcc.s	loc_118BA
00013C9A 5440                       		addq.w	#2,d0
00013C9C                            
00013C9C                            loc_118BA:
00013C9C D040                       		add.w	d0,d0
00013C9E 3228 0034                  		move.w	see_origY(a0),d1
00013CA2 D272 0000                  		add.w	(a2,d0.w),d1
00013CA6 B268 000C                  		cmp.w	obY(a0),d1
00013CAA 6E00                       		bgt.s	locret_11938
00013CAC 2268 003C                  		movea.l	see_parent(a0),a1
00013CB0 7202                       		moveq	#2,d1
00013CB2 4A68 0010                  		tst.w	obVelX(a0)
00013CB6 6B00                       		bmi.s	See_Spring
00013CB8 7200                       		moveq	#0,d1
00013CBA                            
00013CBA                            See_Spring:
00013CBA 1341 003A                  		move.b	d1,$3A(a1)
00013CBE 1141 003A                  		move.b	d1,see_frame(a0)
00013CC2 B229 001A                  		cmp.b	obFrame(a1),d1
00013CC6 6700                       		beq.s	loc_1192C
00013CC8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013CCE 6700                       		beq.s	loc_1192C
00013CD0 4229 0025                  		clr.b	ob2ndRout(a1)
00013CD4 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013CDA 45F8 D000                  		lea	(v_player).w,a2
00013CDE 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013CE4 446A 0012                  		neg.w	obVelY(a2)
00013CE8 08EA 0001 0022             		bset	#1,obStatus(a2)
00013CEE 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013CF4 422A 003C                  		clr.b	$3C(a2)
00013CF8 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013CFE 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013D0E                            
00013D0E                            loc_1192C:
00013D0E 4268 0010                  		clr.w	obVelX(a0)
00013D12 4268 0012                  		clr.w	obVelY(a0)
00013D16 5528 0024                  		subq.b	#2,obRoutine(a0)
00013D1A                            
00013D1A                            locret_11938:
00013D1A 4E75                       		rts	
00013D1C                            ; ===========================================================================
00013D1C FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013D26                            
00013D26                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D56                            		even
00013D56                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013D86                            		even
00013D86                            		even
00013D86                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013D86                            ; ---------------------------------------------------------------------------
00013D86                            ; Sprite mappings - seesaws (SLZ)
00013D86                            ; ---------------------------------------------------------------------------
00013D86                            Map_Seesaw_internal:
00013D86 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D88 0000                       		dc.w @flat-Map_Seesaw_internal
00013D8A 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D8C 0000                       		dc.w @flat-Map_Seesaw_internal
00013D8E 07                         @sloping:	dc.b 7
00013D8F D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013D94 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013D99 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013D9E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013DA3 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013DA8 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013DAD FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013DB2 04                         @flat:		dc.b 4
00013DB3 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013DB8 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013DBD E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013DC2 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013DC8 00                         		even
00013DC8 00                         		even
00013DC8                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013DC8                            ; ---------------------------------------------------------------------------
00013DC8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013DC8                            ; ---------------------------------------------------------------------------
00013DC8                            Map_SSawBall_internal:
00013DC8 0000                       		dc.w @red-Map_SSawBall_internal
00013DCA 0000                       		dc.w @silver-Map_SSawBall_internal
00013DCC 01                         @red:		dc.b 1
00013DCD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013DD2 01                         @silver:	dc.b 1
00013DD3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013DD8                            		even
00013DD8                            		even
00013DD8                            		include	"_incObj\5F Bomb Enemy.asm"
00013DD8                            ; ---------------------------------------------------------------------------
00013DD8                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013DD8                            ; ---------------------------------------------------------------------------
00013DD8                            
00013DD8                            Bomb:
00013DD8 7000                       		moveq	#0,d0
00013DDA 1028 0024                  		move.b	obRoutine(a0),d0
00013DDE 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013DE2 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013DE6                            ; ===========================================================================
00013DE6 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013DE8 0000                       		dc.w Bom_Action-Bom_Index
00013DEA 0000                       		dc.w Bom_Display-Bom_Index
00013DEC 0000                       		dc.w Bom_End-Bom_Index
00013DEE                            
00013DEE =00000030                  bom_time:	equ $30		; time of fuse
00013DEE =00000034                  bom_origY:	equ $34		; original y-axis position
00013DEE =0000003C                  bom_parent:	equ $3C		; address of parent object
00013DEE                            ; ===========================================================================
00013DEE                            
00013DEE                            Bom_Main:	; Routine 0
00013DEE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013DF2 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013DFA 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013E00 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E06 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013E0C 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E12 1028 0028                  		move.b	obSubtype(a0),d0
00013E16 6700                       		beq.s	loc_11A3C
00013E18 1140 0024                  		move.b	d0,obRoutine(a0)
00013E1C 4E75                       		rts	
00013E1E                            ; ===========================================================================
00013E1E                            
00013E1E                            loc_11A3C:
00013E1E 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013E24 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E2A                            
00013E2A                            Bom_Action:	; Routine 2
00013E2A 7000                       		moveq	#0,d0
00013E2C 1028 0025                  		move.b	ob2ndRout(a0),d0
00013E30 323B 0000                  		move.w	@index(pc,d0.w),d1
00013E34 4EBB 1000                  		jsr	@index(pc,d1.w)
00013E38 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E3E 6100 89B4                  		bsr.w	AnimateSprite
00013E42 6000 DA86                  		bra.w	RememberState
00013E46                            ; ===========================================================================
00013E46 0000                       @index:		dc.w @walk-@index
00013E48 0000                       		dc.w @wait-@index
00013E4A 0000                       		dc.w @explode-@index
00013E4C                            ; ===========================================================================
00013E4C                            
00013E4C                            @walk:
00013E4C 6100 0000                  		bsr.w	@chksonic
00013E50 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E54 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E56 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E5A 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E60 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E66 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E6C 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E72 6700                       		beq.s	@noflip
00013E74 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013E78                            
00013E78                            	@noflip:
00013E78 4E75                       		rts	
00013E7A                            ; ===========================================================================
00013E7A                            
00013E7A                            @wait:
00013E7A 6100 0000                  		bsr.w	@chksonic
00013E7E 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E82 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013E84 6100 B872                  		bsr.w	SpeedToPos
00013E88 4E75                       		rts	
00013E8A                            ; ===========================================================================
00013E8A                            
00013E8A                            	@stopwalking:
00013E8A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013E8E 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013E94 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013E98 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013E9E 4E75                       		rts	
00013EA0                            ; ===========================================================================
00013EA0                            
00013EA0                            @explode:
00013EA0 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EA4 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013EA6 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013EAA 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013EB0                            
00013EB0                            	@noexplode:
00013EB0 4E75                       		rts	
00013EB2                            ; ===========================================================================
00013EB2                            
00013EB2                            @chksonic:
00013EB2 3038 D008                  		move.w	(v_player+obX).w,d0
00013EB6 9068 0008                  		sub.w	obX(a0),d0
00013EBA 6400                       		bcc.s	@isleft
00013EBC 4440                       		neg.w	d0
00013EBE                            
00013EBE                            	@isleft:
00013EBE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013EC2 6400                       		bcc.s	@outofrange	; if not, branch
00013EC4 3038 D00C                  		move.w	(v_player+obY).w,d0
00013EC8 9068 000C                  		sub.w	obY(a0),d0
00013ECC 6400                       		bcc.s	@isabove
00013ECE 4440                       		neg.w	d0
00013ED0                            
00013ED0                            	@isabove:
00013ED0 0C40 0060                  		cmpi.w	#$60,d0
00013ED4 6400                       		bcc.s	@outofrange
00013ED6 4A78 FE08                  		tst.w	(v_debuguse).w
00013EDA 6600                       		bne.s	@outofrange
00013EDC                            
00013EDC 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013EE2 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013EE8 4268 0010                  		clr.w	obVelX(a0)
00013EEC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013EF2 6100 BCBA                  		bsr.w	FindNextFreeObj
00013EF6 6600                       		bne.s	@outofrange
00013EF8 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013EFC 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F02 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F08 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013F0E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013F14 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013F1A 137C 0003 001C             		move.b	#3,obAnim(a1)
00013F20 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013F26 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013F2C 6700                       		beq.s	@normal		; if not, branch
00013F2E 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013F32                            
00013F32                            	@normal:
00013F32 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013F38 2348 003C                  		move.l	a0,bom_parent(a1)
00013F3C                            
00013F3C                            @outofrange:
00013F3C 4E75                       		rts	
00013F3E                            ; ===========================================================================
00013F3E                            
00013F3E                            Bom_Display:	; Routine 4
00013F3E 6100                       		bsr.s	loc_11B70
00013F40 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F46 6100 88AC                  		bsr.w	AnimateSprite
00013F4A 6000 D97E                  		bra.w	RememberState
00013F4E                            ; ===========================================================================
00013F4E                            
00013F4E                            loc_11B70:
00013F4E 5368 0030                  		subq.w	#1,bom_time(a0)
00013F52 6B00                       		bmi.s	loc_11B7C
00013F54 6100 B7A2                  		bsr.w	SpeedToPos
00013F58 4E75                       		rts	
00013F5A                            ; ===========================================================================
00013F5A                            
00013F5A                            loc_11B7C:
00013F5A 4268 0030                  		clr.w	bom_time(a0)
00013F5E 4228 0024                  		clr.b	obRoutine(a0)
00013F62 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F68 7203                       		moveq	#3,d1
00013F6A 2248                       		movea.l	a0,a1
00013F6C 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013F72 6000                       		bra.s	@makeshrapnel
00013F74                            ; ===========================================================================
00013F74                            
00013F74                            	@loop:
00013F74 6100 BC38                  		bsr.w	FindNextFreeObj
00013F78 6600                       		bne.s	@fail
00013F7A                            
00013F7A                            @makeshrapnel:
00013F7A 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013F7E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F84 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F8A 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013F90 137C 0004 001C             		move.b	#4,obAnim(a1)
00013F96 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013F9A 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013F9E 137C 0098 0020             		move.b	#$98,obColType(a1)
00013FA4 08E9 0007 0001             		bset	#7,obRender(a1)
00013FAA                            
00013FAA                            	@fail:
00013FAA 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013FAE                            
00013FAE 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013FB4                            
00013FB4                            Bom_End:	; Routine 6
00013FB4 6100 B742                  		bsr.w	SpeedToPos
00013FB8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013FBE 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013FC4 6100 882E                  		bsr.w	AnimateSprite
00013FC8 4A28 0001                  		tst.b	obRender(a0)
00013FCC 6A00 B77E                  		bpl.w	DeleteObject
00013FD0 6000 B73A                  		bra.w	DisplaySprite
00013FD4                            ; ===========================================================================
00013FD4 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013FD4 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013FE4                            		include	"_anim\Bomb Enemy.asm"
00013FE4                            ; ---------------------------------------------------------------------------
00013FE4                            ; Animation script - Bomb enemy
00013FE4                            ; ---------------------------------------------------------------------------
00013FE4 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013FE6 0000                       		dc.w @walk-Ani_Bomb
00013FE8 0000                       		dc.w @activated-Ani_Bomb
00013FEA 0000                       		dc.w @fuse-Ani_Bomb
00013FEC 0000                       		dc.w @shrapnel-Ani_Bomb
00013FEE 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013FF2 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013FF8 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013FFC 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00014000 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00014004                            		even
00014004                            		even
00014004                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00014004                            ; ---------------------------------------------------------------------------
00014004                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014004                            ; ---------------------------------------------------------------------------
00014004                            Map_Bomb_internal:
00014004 0000                       		dc.w @stand1-Map_Bomb_internal
00014006 0000                       		dc.w @stand2-Map_Bomb_internal
00014008 0000                       		dc.w @walk1-Map_Bomb_internal
0001400A 0000                       		dc.w @walk2-Map_Bomb_internal
0001400C 0000                       		dc.w @walk3-Map_Bomb_internal
0001400E 0000                       		dc.w @walk4-Map_Bomb_internal
00014010 0000                       		dc.w @activate1-Map_Bomb_internal
00014012 0000                       		dc.w @activate2-Map_Bomb_internal
00014014 0000                       		dc.w @fuse1-Map_Bomb_internal
00014016 0000                       		dc.w @fuse2-Map_Bomb_internal
00014018 0000                       		dc.w @shrapnel1-Map_Bomb_internal
0001401A 0000                       		dc.w @shrapnel2-Map_Bomb_internal
0001401C 03                         @stand1:	dc.b 3
0001401D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00014022 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014027 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001402C 03                         @stand2:	dc.b 3
0001402D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014032 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014037 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001403C 03                         @walk1:		dc.b 3
0001403D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014042 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00014047 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001404C 03                         @walk2:		dc.b 3
0001404D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014052 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00014057 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001405C 03                         @walk3:		dc.b 3
0001405D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014062 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00014067 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001406C 03                         @walk4:		dc.b 3
0001406D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014072 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00014077 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001407C 02                         @activate1:	dc.b 2
0001407D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00014082 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014087 02                         @activate2:	dc.b 2
00014088 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001408D 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014092 01                         @fuse1:		dc.b 1
00014093 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00014098 01                         @fuse2:		dc.b 1
00014099 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001409E 01                         @shrapnel1:	dc.b 1
0001409F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000140A4 01                         @shrapnel2:	dc.b 1
000140A5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000140AA                            		even
000140AA                            		even
000140AA                            
000140AA                            		include	"_incObj\60 Orbinaut.asm"
000140AA                            ; ---------------------------------------------------------------------------
000140AA                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000140AA                            ; ---------------------------------------------------------------------------
000140AA                            
000140AA                            Orbinaut:
000140AA 7000                       		moveq	#0,d0
000140AC 1028 0024                  		move.b	obRoutine(a0),d0
000140B0 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000140B4 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000140B8                            ; ===========================================================================
000140B8 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000140BA 0000                       		dc.w Orb_ChkSonic-Orb_Index
000140BC 0000                       		dc.w Orb_Display-Orb_Index
000140BE 0000                       		dc.w Orb_MoveOrb-Orb_Index
000140C0 0000                       		dc.w Orb_ChkDel2-Orb_Index
000140C2                            
000140C2 =0000003C                  orb_parent:	equ $3C		; address of parent object
000140C2                            ; ===========================================================================
000140C2                            
000140C2                            Orb_Main:	; Routine 0
000140C2 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
000140CA 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
000140D0 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000140D6 6700                       		beq.s	@isscrap
000140D8 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
000140DE                            
000140DE                            	@isscrap:
000140DE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000140E4 6600                       		bne.s	@notlabyrinth
000140E6 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
000140EC                            
000140EC                            	@notlabyrinth:
000140EC 0028 0004 0001             		ori.b	#4,obRender(a0)
000140F2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000140F8 117C 000B 0020             		move.b	#$B,obColType(a0)
000140FE 117C 000C 0014             		move.b	#$C,obActWid(a0)
00014104 7400                       		moveq	#0,d2
00014106 45E8 0037                  		lea	$37(a0),a2
0001410A 264A                       		movea.l	a2,a3
0001410C 524A                       		addq.w	#1,a2
0001410E 7203                       		moveq	#3,d1
00014110                            
00014110                            @makesatellites:
00014110 6100 BA9C                  		bsr.w	FindNextFreeObj
00014114 6600                       		bne.s	@fail
00014116 5213                       		addq.b	#1,(a3)
00014118 3A09                       		move.w	a1,d5
0001411A 0445 D000                  		subi.w	#$D000,d5
0001411E EC4D                       		lsr.w	#6,d5
00014120 0245 007F                  		andi.w	#$7F,d5
00014124 14C5                       		move.b	d5,(a2)+
00014126 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014128 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
0001412E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00014134 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001413A 0029 0004 0001             		ori.b	#4,obRender(a1)
00014140 337C 0200 0018             		move.w	#$200,obPriority(a1)
00014146 137C 0008 0014             		move.b	#8,obActWid(a1)
0001414C 137C 0003 001A             		move.b	#3,obFrame(a1)
00014152 137C 0098 0020             		move.b	#$98,obColType(a1)
00014158 1342 0026                  		move.b	d2,obAngle(a1)
0001415C 0602 0040                  		addi.b	#$40,d2
00014160 2348 003C                  		move.l	a0,orb_parent(a1)
00014164 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00014168                            
00014168                            	@fail:
00014168 7001                       		moveq	#1,d0
0001416A 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014170 6700                       		beq.s	@noflip		; if not, branch
00014172 4440                       		neg.w	d0
00014174                            
00014174                            	@noflip:
00014174 1140 0036                  		move.b	d0,$36(a0)
00014178 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
0001417E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014182 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00014188 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
0001418E 6700                       		beq.s	@noflip2	; if not, branch
00014190 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00014194                            
00014194                            	@noflip2:
00014194 4E75                       		rts	
00014196                            ; ===========================================================================
00014196                            
00014196                            Orb_ChkSonic:	; Routine 2
00014196 3038 D008                  		move.w	(v_player+obX).w,d0
0001419A 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
0001419E 6400                       		bcc.s	@isright	; if yes, branch
000141A0 4440                       		neg.w	d0
000141A2                            
000141A2                            	@isright:
000141A2 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000141A6 6400                       		bcc.s	@animate	; if not, branch
000141A8 3038 D00C                  		move.w	(v_player+obY).w,d0
000141AC 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000141B0 6400                       		bcc.s	@isabove	; if yes, branch
000141B2 4440                       		neg.w	d0
000141B4                            
000141B4                            	@isabove:
000141B4 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000141B8 6400                       		bcc.s	@animate	; if not, branch
000141BA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000141BE 6600                       		bne.s	@animate	; if yes, branch
000141C0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000141C6                            
000141C6                            @animate:
000141C6 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000141CC 6100 8626                  		bsr.w	AnimateSprite
000141D0 6000 0000                  		bra.w	Orb_ChkDel
000141D4                            ; ===========================================================================
000141D4                            
000141D4                            Orb_Display:	; Routine 4
000141D4 6100 B522                  		bsr.w	SpeedToPos
000141D8                            
000141D8                            Orb_ChkDel:
000141F6 6000 B514                  		bra.w	DisplaySprite
000141FA                            
000141FA                            @chkgone:
000141FA 45F8 FC00                  		lea	(v_objstate).w,a2
000141FE 7000                       		moveq	#0,d0
00014200 1028 0023                  		move.b	obRespawnNo(a0),d0
00014204 6700                       		beq.s	loc_11E34
00014206 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001420C                            
0001420C                            loc_11E34:
0001420C 45E8 0037                  		lea	$37(a0),a2
00014210 7400                       		moveq	#0,d2
00014212 141A                       		move.b	(a2)+,d2
00014214 5342                       		subq.w	#1,d2
00014216 6500                       		bcs.s	Orb_Delete
00014218                            
00014218                            loc_11E40:
00014218 7000                       		moveq	#0,d0
0001421A 101A                       		move.b	(a2)+,d0
0001421C ED48                       		lsl.w	#6,d0
0001421E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00014224 2240                       		movea.l	d0,a1
00014226 6100 B526                  		bsr.w	DeleteChild
0001422A 51CA FFEC                  		dbf	d2,loc_11E40
0001422E                            
0001422E                            Orb_Delete:
0001422E 6000 B51C                  		bra.w	DeleteObject
00014232                            ; ===========================================================================
00014232                            
00014232                            Orb_MoveOrb:	; Routine 6
00014232 2268 003C                  		movea.l	orb_parent(a0),a1
00014236 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
0001423A 6600 B510                  		bne.w	DeleteObject	; if not, delete
0001423E 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014244 6600                       		bne.s	@circle		; if not, branch
00014246 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
0001424C 6600                       		bne.s	@circle		; if not, branch
0001424E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014252 5329 0037                  		subq.b	#1,$37(a1)
00014256 6600                       		bne.s	@fire
00014258 5429 0024                  		addq.b	#2,obRoutine(a1)
0001425C                            
0001425C                            	@fire:
0001425C 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014262 0829 0000 0022             		btst	#0,obStatus(a1)
00014268 6700                       		beq.s	@noflip
0001426A 4468 0010                  		neg.w	obVelX(a0)
0001426E                            
0001426E                            	@noflip:
0001426E 6000 B49C                  		bra.w	DisplaySprite
00014272                            ; ===========================================================================
00014272                            
00014272                            @circle:
00014272 1028 0026                  		move.b	obAngle(a0),d0
00014276 4EB9 0000 3A32             		jsr	(CalcSine).l
0001427C E841                       		asr.w	#4,d1
0001427E D269 0008                  		add.w	obX(a1),d1
00014282 3141 0008                  		move.w	d1,obX(a0)
00014286 E840                       		asr.w	#4,d0
00014288 D069 000C                  		add.w	obY(a1),d0
0001428C 3140 000C                  		move.w	d0,obY(a0)
00014290 1029 0036                  		move.b	$36(a1),d0
00014294 D128 0026                  		add.b	d0,obAngle(a0)
00014298 6000 B472                  		bra.w	DisplaySprite
0001429C                            ; ===========================================================================
0001429C                            
0001429C                            Orb_ChkDel2:	; Routine 8
0001429C 6100 B45A                  		bsr.w	SpeedToPos
000142A0 4A28 0001                  		tst.b	obRender(a0)
000142A4 6A00 B4A6                  		bpl.w	DeleteObject
000142A8 6000 B462                  		bra.w	DisplaySprite
000142A8 6000 B462                  		bra.w	DisplaySprite
000142AC                            		include	"_anim\Orbinaut.asm"
000142AC                            ; ---------------------------------------------------------------------------
000142AC                            ; Animation script - Orbinaut enemy
000142AC                            ; ---------------------------------------------------------------------------
000142AC 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000142AE 0000                       		dc.w @angers-Ani_Orb
000142B0 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000142B4 00                         		even
000142B4 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000142BA 00                         		even
000142BA 00                         		even
000142BA                            Map_Orb:	include	"_maps\Orbinaut.asm"
000142BA                            ; ---------------------------------------------------------------------------
000142BA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000142BA                            ; ---------------------------------------------------------------------------
000142BA                            Map_Orb_internal:
000142BA 0000                       		dc.w @normal-Map_Orb_internal
000142BC 0000                       		dc.w @medium-Map_Orb_internal
000142BE 0000                       		dc.w @angry-Map_Orb_internal
000142C0 0000                       		dc.w @spikeball-Map_Orb_internal
000142C2 01                         @normal:	dc.b 1
000142C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000142C8 01                         @medium:	dc.b 1
000142C9 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000142CE 01                         @angry:		dc.b 1
000142CF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000142D4 01                         @spikeball:	dc.b 1
000142D5 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000142DA                            		even
000142DA                            		even
000142DA                            
000142DA                            		include	"_incObj\16 Harpoon.asm"
000142DA                            ; ---------------------------------------------------------------------------
000142DA                            ; Object 16 - harpoon (LZ)
000142DA                            ; ---------------------------------------------------------------------------
000142DA                            
000142DA                            Harpoon:
000142DA 7000                       		moveq	#0,d0
000142DC 1028 0024                  		move.b	obRoutine(a0),d0
000142E0 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
000142E4 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
000142E8                            ; ===========================================================================
000142E8 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
000142EA 0000                       		dc.w Harp_Move-Harp_Index
000142EC 0000                       		dc.w Harp_Wait-Harp_Index
000142EE                            
000142EE =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000142EE                            ; ===========================================================================
000142EE                            
000142EE                            Harp_Main:	; Routine 0
000142EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000142F2 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
000142FA 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014300 0028 0004 0001             		ori.b	#4,obRender(a0)
00014306 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001430C 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014312 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014318 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
0001431E                            
0001431E                            Harp_Move:	; Routine 2
0001431E 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00014324 6100 84CE                  		bsr.w	AnimateSprite
00014328 7000                       		moveq	#0,d0
0001432A 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
0001432E 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00014334 6000 D594                  		bra.w	RememberState
00014338                            
00014338                            	@types:
00014338 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001433E                            		even
0001433E                            
0001433E                            Harp_Wait:	; Routine 4
0001433E 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014342 6A00                       		bpl.s	@chkdel		; branch if time remains
00014344 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001434A 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
0001434E 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014354                            
00014354                            	@chkdel:
00014354 6000 D574                  		bra.w	RememberState
00014354 6000 D574                  		bra.w	RememberState
00014358                            		include	"_anim\Harpoon.asm"
00014358                            ; ---------------------------------------------------------------------------
00014358                            ; Animation script - harpoon (LZ)
00014358                            ; ---------------------------------------------------------------------------
00014358 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001435A 0000                       		dc.w @h_retracting-Ani_Harp
0001435C 0000                       		dc.w @v_extending-Ani_Harp
0001435E 0000                       		dc.w @v_retracting-Ani_Harp
00014360 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014364 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00014368 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
0001436C 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014370                            		even
00014370                            		even
00014370                            Map_Harp:	include	"_maps\Harpoon.asm"
00014370                            ; ---------------------------------------------------------------------------
00014370                            ; Sprite mappings - harpoon (LZ)
00014370                            ; ---------------------------------------------------------------------------
00014370                            Map_Harp_internal:
00014370 0000                       		dc.w @h_retracted-Map_Harp_internal
00014372 0000                       		dc.w @h_middle-Map_Harp_internal
00014374 0000                       		dc.w @h_extended-Map_Harp_internal
00014376 0000                       		dc.w @v_retracted-Map_Harp_internal
00014378 0000                       		dc.w @v_middle-Map_Harp_internal
0001437A 0000                       		dc.w @v_extended-Map_Harp_internal
0001437C 01                         @h_retracted:	dc.b 1
0001437D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00014382 01                         @h_middle:	dc.b 1
00014383 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00014388 02                         @h_extended:	dc.b 2
00014389 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001438E FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00014393 01                         @v_retracted:	dc.b 1
00014394 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00014399 01                         @v_middle:	dc.b 1
0001439A E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001439F 02                         @v_extended:	dc.b 2
000143A0 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000143A5 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000143AA                            		even
000143AA                            		even
000143AA                            		include	"_incObj\61 LZ Blocks.asm"
000143AA                            ; ---------------------------------------------------------------------------
000143AA                            ; Object 61 - blocks (LZ)
000143AA                            ; ---------------------------------------------------------------------------
000143AA                            
000143AA                            LabyrinthBlock:
000143AA 7000                       		moveq	#0,d0
000143AC 1028 0024                  		move.b	obRoutine(a0),d0
000143B0 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000143B4 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000143B8                            ; ===========================================================================
000143B8 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000143BA 0000                       		dc.w LBlk_Action-LBlk_Index
000143BC                            
000143BC 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000143BE 200C                       		dc.b $20, $C
000143C0 1010                       		dc.b $10, $10
000143C2 1010                       		dc.b $10, $10
000143C4                            
000143C4 =00000016                  lblk_height:	equ $16		; block height
000143C4 =00000034                  lblk_origX:	equ $34		; original x-axis position
000143C4 =00000030                  lblk_origY:	equ $30		; original y-axis position
000143C4 =00000036                  lblk_time:	equ $36		; time delay for block movement
000143C4 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000143C4                            ; ===========================================================================
000143C4                            
000143C4                            LBlk_Main:	; Routine 0
000143C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000143C8 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000143D0 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000143D6 117C 0004 0001             		move.b	#4,obRender(a0)
000143DC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000143E2 7000                       		moveq	#0,d0
000143E4 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000143E8 E648                       		lsr.w	#3,d0		; read only the 1st digit
000143EA 0240 000E                  		andi.w	#$E,d0
000143EE 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
000143F2 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000143F6 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
000143FA E248                       		lsr.w	#1,d0
000143FC 1140 001A                  		move.b	d0,obFrame(a0)
00014400 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014406 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
0001440C 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014410 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014414 6700                       		beq.s	LBlk_Action	; branch if 0
00014416 0C00 0007                  		cmpi.b	#7,d0
0001441A 6700                       		beq.s	LBlk_Action	; branch if 7
0001441C 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014422                            
00014422                            LBlk_Action:	; Routine 2
00014422 3F28 0008                  		move.w	obX(a0),-(sp)
00014426 7000                       		moveq	#0,d0
00014428 1028 0028                  		move.b	obSubtype(a0),d0
0001442C 0240 000F                  		andi.w	#$F,d0
00014430 D040                       		add.w	d0,d0
00014432 323B 0000                  		move.w	@index(pc,d0.w),d1
00014436 4EBB 1000                  		jsr	@index(pc,d1.w)
0001443A 381F                       		move.w	(sp)+,d4
0001443C 4A28 0001                  		tst.b	obRender(a0)
00014440 6A00                       		bpl.s	@chkdel
00014442 7200                       		moveq	#0,d1
00014444 1228 0014                  		move.b	obActWid(a0),d1
00014448 0641 000B                  		addi.w	#$B,d1
0001444C 7400                       		moveq	#0,d2
0001444E 1428 0016                  		move.b	lblk_height(a0),d2
00014452 3602                       		move.w	d2,d3
00014454 5243                       		addq.w	#1,d3
00014456 6100 D90A                  		bsr.w	SolidObject
0001445A 1144 003F                  		move.b	d4,$3F(a0)
0001445E 6100 0000                  		bsr.w	loc_12180
00014462                            
00014462                            @chkdel:
00014480 6000 B28A                  		bra.w	DisplaySprite
00014484                            ; ===========================================================================
00014484 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00014488 0000 0000                  		dc.w @type02-@index, @type03-@index
0001448C 0000 0000                  		dc.w @type04-@index, @type05-@index
00014490 0000 0000                  		dc.w @type06-@index, @type07-@index
00014494                            ; ===========================================================================
00014494                            
00014494                            @type00:
00014494 4E75                       		rts	
00014496                            ; ===========================================================================
00014496                            
00014496                            @type01:
00014496                            @type03:
00014496 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
0001449A 6600                       		bne.s	@wait01		; if yes, branch
0001449C 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000144A2 6700                       		beq.s	@donothing01	; if not, branch
000144A4 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000144AA                            
000144AA                            	@donothing01:
000144AA 4E75                       		rts	
000144AC                            ; ===========================================================================
000144AC                            
000144AC                            	@wait01:
000144AC 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000144B0 66F8                       		bne.s	@donothing01	; if time remains, branch
000144B2 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000144B6 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000144BA 4E75                       		rts	
000144BC                            ; ===========================================================================
000144BC                            
000144BC                            @type02:
000144BC                            @type06:
000144BC 6100 B23A                  		bsr.w	SpeedToPos
000144C0 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000144C4 6100 0000                  		bsr.w	ObjFloorDist
000144C8 4A41                       		tst.w	d1		; has block hit the floor?
000144CA 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000144CE 5241                       		addq.w	#1,d1
000144D0 D368 000C                  		add.w	d1,obY(a0)
000144D4 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000144D8 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000144DC                            
000144DC                            	@nofloor02:
000144DC 4E75                       		rts	
000144DE                            ; ===========================================================================
000144DE                            
000144DE                            @type04:
000144DE 6100 B218                  		bsr.w	SpeedToPos
000144E2 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000144E6 6100 0000                  		bsr.w	ObjHitCeiling
000144EA 4A41                       		tst.w	d1		; has block hit the ceiling?
000144EC 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000144F0 9368 000C                  		sub.w	d1,obY(a0)
000144F4 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
000144F8 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000144FC                            
000144FC                            	@noceiling04:
000144FC 4E75                       		rts	
000144FE                            ; ===========================================================================
000144FE                            
000144FE                            @type05:
000144FE 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
00014504 6600                       		bne.s	@notouch05	; if not, branch
00014506 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
0001450A 4228 0038                  		clr.b	lblk_untouched(a0)
0001450E                            
0001450E                            	@notouch05:
0001450E 4E75                       		rts	
00014510                            ; ===========================================================================
00014510                            
00014510                            @type07:
00014510 3038 F646                  		move.w	(v_waterpos1).w,d0
00014514 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014518 6700                       		beq.s	@stop07		; if yes, branch
0001451A 6400                       		bcc.s	@fall07		; branch if block is above water
0001451C 0C40 FFFE                  		cmpi.w	#-2,d0
00014520 6C00                       		bge.s	@loc_1214E
00014522 70FE                       		moveq	#-2,d0
00014524                            
00014524                            	@loc_1214E:
00014524 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014528 6100 0000                  		bsr.w	ObjHitCeiling
0001452C 4A41                       		tst.w	d1		; has block hit the ceiling?
0001452E 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014532 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014536                            
00014536                            	@noceiling07:
00014536 4E75                       		rts	
00014538                            ; ===========================================================================
00014538                            
00014538                            @fall07:
00014538 0C40 0002                  		cmpi.w	#2,d0
0001453C 6F00                       		ble.s	@loc_1216A
0001453E 7002                       		moveq	#2,d0
00014540                            
00014540                            	@loc_1216A:
00014540 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014544 6100 0000                  		bsr.w	ObjFloorDist
00014548 4A41                       		tst.w	d1
0001454A 6A00 0000                  		bpl.w	@stop07
0001454E 5241                       		addq.w	#1,d1
00014550 D368 000C                  		add.w	d1,obY(a0)
00014554                            
00014554                            	@stop07:
00014554 4E75                       		rts	
00014556                            ; ===========================================================================
00014556                            
00014556                            loc_12180:
00014556 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001455A 6700                       		beq.s	locret_121C0	; if yes, branch
0001455C 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014562 6600                       		bne.s	loc_1219A	; if yes, branch
00014564 4A28 003E                  		tst.b	$3E(a0)
00014568 6700                       		beq.s	locret_121C0
0001456A 5928 003E                  		subq.b	#4,$3E(a0)
0001456E 6000                       		bra.s	loc_121A6
00014570                            ; ===========================================================================
00014570                            
00014570                            loc_1219A:
00014570 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014576 6700                       		beq.s	locret_121C0
00014578 5828 003E                  		addq.b	#4,$3E(a0)
0001457C                            
0001457C                            loc_121A6:
0001457C 1028 003E                  		move.b	$3E(a0),d0
00014580 4EB9 0000 3A32             		jsr	(CalcSine).l
00014586 323C 0400                  		move.w	#$400,d1
0001458A C1C1                       		muls.w	d1,d0
0001458C 4840                       		swap	d0
0001458E D068 0030                  		add.w	lblk_origY(a0),d0
00014592 3140 000C                  		move.w	d0,obY(a0)
00014596                            
00014596                            locret_121C0:
00014596 4E75                       		rts	
00014596 4E75                       		rts	
00014598                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
00014598                            Map_6865:
00014598 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
0001459A 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
0001459C 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
0001459E 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000145A0 01                         Map_6865_8: 	dc.b $1
000145A1 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000145A6 02                         Map_6865_E: 	dc.b $2
000145A7 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000145AC F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000145B1 01                         Map_6865_19: 	dc.b $1
000145B2 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000145B7 01                         Map_6865_1F: 	dc.b $1
000145B8 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000145BE 00                         	even
000145BE 00                         	even
000145BE                            		include	"_incObj\62 Gargoyle.asm"
000145BE                            ; ---------------------------------------------------------------------------
000145BE                            ; Object 62 - gargoyle head (LZ)
000145BE                            ; ---------------------------------------------------------------------------
000145BE                            
000145BE                            Gargoyle:
000145BE 7000                       		moveq	#0,d0
000145C0 1028 0024                  		move.b	obRoutine(a0),d0
000145C4 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000145C8 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000145CC 6000 D2FC                  		bra.w	RememberState
000145D0                            ; ===========================================================================
000145D0 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000145D2 0000                       		dc.w Gar_MakeFire-Gar_Index
000145D4 0000                       		dc.w Gar_FireBall-Gar_Index
000145D6 0000                       		dc.w Gar_AniFire-Gar_Index
000145D8                            
000145D8 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000145E0                            ; ===========================================================================
000145E0                            
000145E0                            Gar_Main:	; Routine 0
000145E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000145E4 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000145EC 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000145F2 0028 0004 0001             		ori.b	#4,obRender(a0)
000145F8 317C 0180 0018             		move.w	#$180,obPriority(a0)
000145FE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014604 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014608 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001460C 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014612 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014618 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001461E                            
0001461E                            Gar_MakeFire:	; Routine 2
0001461E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014622 6600                       		bne.s	@nofire		; if time remains, branch
00014624                            
00014624 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
0001462A 6100 B360                  		bsr.w	ChkObjectVisible
0001462E 6600                       		bne.s	@nofire
00014630 6100 B566                  		bsr.w	FindFreeObj
00014634 6600                       		bne.s	@nofire
00014636 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
0001463A 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
0001463E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014644 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001464A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014650 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014656                            
00014656                            	@nofire:
00014656 4E75                       		rts	
00014658                            ; ===========================================================================
00014658                            
00014658                            Gar_FireBall:	; Routine 4
00014658 5428 0024                  		addq.b	#2,obRoutine(a0)
0001465C 117C 0008 0016             		move.b	#8,obHeight(a0)
00014662 117C 0008 0017             		move.b	#8,obWidth(a0)
00014668 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014670 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014676 0028 0004 0001             		ori.b	#4,obRender(a0)
0001467C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014682 117C 0098 0020             		move.b	#$98,obColType(a0)
00014688 117C 0008 0014             		move.b	#8,obActWid(a0)
0001468E 117C 0002 001A             		move.b	#2,obFrame(a0)
00014694 5068 000C                  		addq.w	#8,obY(a0)
00014698 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001469E 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000146A4 6600                       		bne.s	@noflip		; if not, branch
000146A6 4468 0010                  		neg.w	obVelX(a0)
000146AA                            
000146AA                            	@noflip:
000146B4                            
000146B4                            Gar_AniFire:	; Routine 6
000146B4 1038 FE05                  		move.b	(v_framebyte).w,d0
000146B8 0200 0007                  		andi.b	#7,d0
000146BC 6600                       		bne.s	@nochg
000146BE 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000146C4                            
000146C4                            	@nochg:
000146C4 6100 B032                  		bsr.w	SpeedToPos
000146C8 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000146CE 6600                       		bne.s	@isright	; if not, branch
000146D0 76F8                       		moveq	#-8,d3
000146D2 6100 0000                  		bsr.w	ObjHitWallLeft
000146D6 4A41                       		tst.w	d1
000146D8 6B00 B072                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000146DC 4E75                       		rts	
000146DE                            
000146DE                            	@isright:
000146DE 7608                       		moveq	#8,d3
000146E0 6100 0000                  		bsr.w	ObjHitWallRight
000146E4 4A41                       		tst.w	d1
000146E6 6B00 B064                  		bmi.w	DeleteObject
000146EA 4E75                       		rts	
000146EA 4E75                       		rts	
000146EC                            Map_Gar:	include	"_maps\Gargoyle.asm"
000146EC                            ; ---------------------------------------------------------------------------
000146EC                            ; Sprite mappings - gargoyle head (LZ)
000146EC                            ; ---------------------------------------------------------------------------
000146EC                            Map_Gar_internal:
000146EC 0000                       		dc.w @head-Map_Gar_internal
000146EE 0000                       		dc.w @head-Map_Gar_internal
000146F0 0000                       		dc.w @fireball1-Map_Gar_internal
000146F2 0000                       		dc.w @fireball2-Map_Gar_internal
000146F4 03                         @head:		dc.b 3
000146F5 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000146FA F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000146FF 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00014704 01                         @fireball1:	dc.b 1
00014705 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001470A 01                         @fireball2:	dc.b 1
0001470B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014710                            		even
00014710                            		even
00014710                            		include	"_incObj\63 LZ Conveyor.asm"
00014710                            ; ---------------------------------------------------------------------------
00014710                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014710                            ; ---------------------------------------------------------------------------
00014710                            
00014710                            LabyrinthConvey:
00014710 7000                       		moveq	#0,d0
00014712 1028 0024                  		move.b	obRoutine(a0),d0
00014716 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
0001471A 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
0001473A                            
0001473A                            LCon_Display:
0001473A 6000 AFD0                  		bra.w	DisplaySprite
0001473E                            ; ===========================================================================
0001473E                            
0001473E                            loc_1236A:
0001473E 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014744 6600                       		bne.s	loc_12378
00014746 0C40 FF80                  		cmpi.w	#-$80,d0
0001474A 64EE                       		bcc.s	LCon_Display
0001474C                            
0001474C                            loc_12378:
0001474C 1028 002F                  		move.b	$2F(a0),d0
00014750 6A00 AFFA                  		bpl.w	DeleteObject
00014754 0240 007F                  		andi.w	#$7F,d0
00014758 45F8 F7C1                  		lea	(v_obj63).w,a2
0001475C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014762 6000 AFE8                  		bra.w	DeleteObject
00014766                            ; ===========================================================================
00014766 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014768 0000                       		dc.w loc_124B2-LCon_Index
0001476A 0000                       		dc.w loc_124C2-LCon_Index
0001476C 0000                       		dc.w loc_124DE-LCon_Index
0001476E                            ; ===========================================================================
0001476E                            
0001476E                            LCon_Main:	; Routine 0
0001476E 1028 0028                  		move.b	obSubtype(a0),d0
00014772 6B00 0000                  		bmi.w	loc_12460
00014776 5428 0024                  		addq.b	#2,obRoutine(a0)
0001477A 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014782 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00014788 0028 0004 0001             		ori.b	#4,obRender(a0)
0001478E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014794 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001479A 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000147A0 6600                       		bne.s	loc_123E2
000147A2 5828 0024                  		addq.b	#4,obRoutine(a0)
000147A6 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000147AC 317C 0080 0018             		move.w	#$80,obPriority(a0)
000147B2 6000 0000                  		bra.w	loc_124DE
000147B6                            ; ===========================================================================
000147B6                            
000147B6                            loc_123E2:
000147B6 117C 0004 001A             		move.b	#4,obFrame(a0)
000147BC 7000                       		moveq	#0,d0
000147BE 1028 0028                  		move.b	obSubtype(a0),d0
000147C2 3200                       		move.w	d0,d1
000147C4 E648                       		lsr.w	#3,d0
000147C6 0240 001E                  		andi.w	#$1E,d0
000147CA 45FA 0000                  		lea	LCon_Data(pc),a2
000147CE D4F2 0000                  		adda.w	(a2,d0.w),a2
000147D2 315A 0038                  		move.w	(a2)+,$38(a0)
000147D6 315A 0030                  		move.w	(a2)+,$30(a0)
000147DA 214A 003C                  		move.l	a2,$3C(a0)
000147DE 0241 000F                  		andi.w	#$F,d1
000147E2 E549                       		lsl.w	#2,d1
000147E4 1141 0038                  		move.b	d1,$38(a0)
000147E8 117C 0004 003A             		move.b	#4,$3A(a0)
000147EE 4A38 F7C0                  		tst.b	(f_conveyrev).w
000147F2 6700                       		beq.s	loc_1244C
000147F4 117C 0001 003B             		move.b	#1,$3B(a0)
000147FA 4428 003A                  		neg.b	$3A(a0)
000147FE 7200                       		moveq	#0,d1
00014800 1228 0038                  		move.b	$38(a0),d1
00014804 D228 003A                  		add.b	$3A(a0),d1
00014808 B228 0039                  		cmp.b	$39(a0),d1
0001480C 6500                       		bcs.s	loc_12448
0001480E 1001                       		move.b	d1,d0
00014810 7200                       		moveq	#0,d1
00014812 4A00                       		tst.b	d0
00014814 6A00                       		bpl.s	loc_12448
00014816 1228 0039                  		move.b	$39(a0),d1
0001481A 5901                       		subq.b	#4,d1
0001481C                            
0001481C                            loc_12448:
0001481C 1141 0038                  		move.b	d1,$38(a0)
00014820                            
00014820                            loc_1244C:
00014820 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014826 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001482C 6100 0000                  		bsr.w	LCon_ChangeDir
00014830 6000 0000                  		bra.w	loc_124B2
00014834                            ; ===========================================================================
00014834                            
00014834                            loc_12460:
00014834 1140 002F                  		move.b	d0,$2F(a0)
00014838 0240 007F                  		andi.w	#$7F,d0
0001483C 45F8 F7C1                  		lea	(v_obj63).w,a2
00014840 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014846 6600 AF04                  		bne.w	DeleteObject
0001484A D040                       		add.w	d0,d0
0001484C 0240 001E                  		andi.w	#$1E,d0
00014850 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014854 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001485A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001485E 321A                       		move.w	(a2)+,d1
00014860 2248                       		movea.l	a0,a1
00014862 6000                       		bra.s	LCon_MakePtfms
00014864                            ; ===========================================================================
00014864                            
00014864                            LCon_Loop:
00014864 6100 B332                  		bsr.w	FindFreeObj
00014868 6600                       		bne.s	loc_124AA
0001486A                            
0001486A                            LCon_MakePtfms:
0001486A 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
0001486E 335A 0008                  		move.w	(a2)+,obX(a1)
00014872 335A 000C                  		move.w	(a2)+,obY(a1)
00014876 301A                       		move.w	(a2)+,d0
00014878 1340 0028                  		move.b	d0,obSubtype(a1)
0001487C                            
0001487C                            loc_124AA:
0001487C 51C9 FFE6                  		dbf	d1,LCon_Loop
00014880                            
00014880 588F                       		addq.l	#4,sp
00014882 4E75                       		rts	
00014884                            ; ===========================================================================
00014884                            
00014884                            loc_124B2:	; Routine 2
00014884 7200                       		moveq	#0,d1
00014886 1228 0014                  		move.b	obActWid(a0),d1
0001488A 4EB9 0000 8FE2             		jsr	(PlatformObject).l
00014890 6000 0000                  		bra.w	sub_12502
00014894                            ; ===========================================================================
00014894                            
00014894                            loc_124C2:	; Routine 4
00014894 7200                       		moveq	#0,d1
00014896 1228 0014                  		move.b	obActWid(a0),d1
0001489A 4EB9 0000 9156             		jsr	(ExitPlatform).l
000148A0 3F28 0008                  		move.w	obX(a0),-(sp)
000148A4 6100 0000                  		bsr.w	sub_12502
000148A8 341F                       		move.w	(sp)+,d2
000148AA 4EF9 0000 96C0             		jmp	(MvSonicOnPtfm2).l
000148B0                            ; ===========================================================================
000148B0                            
000148B0                            loc_124DE:	; Routine 6
000148B0 3038 FE04                  		move.w	(v_framecount).w,d0
000148B4 0240 0003                  		andi.w	#3,d0
000148B8 6600                       		bne.s	loc_124FC
000148BA 7201                       		moveq	#1,d1
000148BC 4A38 F7C0                  		tst.b	(f_conveyrev).w
000148C0 6700                       		beq.s	loc_124F2
000148C2 4401                       		neg.b	d1
000148C4                            
000148C4                            loc_124F2:
000148C4 D328 001A                  		add.b	d1,obFrame(a0)
000148C8 0228 0003 001A             		andi.b	#3,obFrame(a0)
000148CE                            
000148CE                            loc_124FC:
000148CE 588F                       		addq.l	#4,sp
000148D0 6000 CFF8                  		bra.w	RememberState
000148D4                            
000148D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148D4                            
000148D4                            
000148D4                            sub_12502:
000148D4 4A38 F7EE                  		tst.b	(f_switch+$E).w
000148D8 6700                       		beq.s	loc_12520
000148DA 4A28 003B                  		tst.b	$3B(a0)
000148DE 6600                       		bne.s	loc_12520
000148E0 117C 0001 003B             		move.b	#1,$3B(a0)
000148E6 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000148EC 4428 003A                  		neg.b	$3A(a0)
000148F0 6000                       		bra.s	loc_12534
000148F2                            ; ===========================================================================
000148F2                            
000148F2                            loc_12520:
000148F2 3028 0008                  		move.w	obX(a0),d0
000148F6 B068 0034                  		cmp.w	$34(a0),d0
000148FA 6600                       		bne.s	loc_1256A
000148FC 3028 000C                  		move.w	obY(a0),d0
00014900 B068 0036                  		cmp.w	$36(a0),d0
00014904 6600                       		bne.s	loc_1256A
00014906                            
00014906                            loc_12534:
00014906 7200                       		moveq	#0,d1
00014908 1228 0038                  		move.b	$38(a0),d1
0001490C D228 003A                  		add.b	$3A(a0),d1
00014910 B228 0039                  		cmp.b	$39(a0),d1
00014914 6500                       		bcs.s	loc_12552
00014916 1001                       		move.b	d1,d0
00014918 7200                       		moveq	#0,d1
0001491A 4A00                       		tst.b	d0
0001491C 6A00                       		bpl.s	loc_12552
0001491E 1228 0039                  		move.b	$39(a0),d1
00014922 5901                       		subq.b	#4,d1
00014924                            
00014924                            loc_12552:
00014924 1141 0038                  		move.b	d1,$38(a0)
00014928 2268 003C                  		movea.l	$3C(a0),a1
0001492C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014932 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014938 6100 0000                  		bsr.w	LCon_ChangeDir
0001493C                            
0001493C                            loc_1256A:
0001493C 6100 ADBA                  		bsr.w	SpeedToPos
00014940 4E75                       		rts	
00014942                            ; End of function sub_12502
00014942                            
00014942                            
00014942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014942                            
00014942                            
00014942                            LCon_ChangeDir:
00014942 7000                       		moveq	#0,d0
00014944 343C FF00                  		move.w	#-$100,d2
00014948 3028 0008                  		move.w	obX(a0),d0
0001494C 9068 0034                  		sub.w	$34(a0),d0
00014950 6400                       		bcc.s	loc_12584
00014952 4440                       		neg.w	d0
00014954 4442                       		neg.w	d2
00014956                            
00014956                            loc_12584:
00014956 7200                       		moveq	#0,d1
00014958 363C FF00                  		move.w	#-$100,d3
0001495C 3228 000C                  		move.w	obY(a0),d1
00014960 9268 0036                  		sub.w	$36(a0),d1
00014964 6400                       		bcc.s	loc_12598
00014966 4441                       		neg.w	d1
00014968 4443                       		neg.w	d3
0001496A                            
0001496A                            loc_12598:
0001496A B240                       		cmp.w	d0,d1
0001496C 6500                       		bcs.s	loc_125C2
0001496E 3028 0008                  		move.w	obX(a0),d0
00014972 9068 0034                  		sub.w	$34(a0),d0
00014976 6700                       		beq.s	loc_125AE
00014978 48C0                       		ext.l	d0
0001497A E180                       		asl.l	#8,d0
0001497C 81C1                       		divs.w	d1,d0
0001497E 4440                       		neg.w	d0
00014980                            
00014980                            loc_125AE:
00014980 3140 0010                  		move.w	d0,obVelX(a0)
00014984 3143 0012                  		move.w	d3,obVelY(a0)
00014988 4840                       		swap	d0
0001498A 3140 000A                  		move.w	d0,obX+2(a0)
0001498E 4268 000E                  		clr.w	obY+2(a0)
00014992 4E75                       		rts	
00014994                            ; ===========================================================================
00014994                            
00014994                            loc_125C2:
00014994 3228 000C                  		move.w	obY(a0),d1
00014998 9268 0036                  		sub.w	$36(a0),d1
0001499C 6700                       		beq.s	loc_125D4
0001499E 48C1                       		ext.l	d1
000149A0 E181                       		asl.l	#8,d1
000149A2 83C0                       		divs.w	d0,d1
000149A4 4441                       		neg.w	d1
000149A6                            
000149A6                            loc_125D4:
000149A6 3141 0012                  		move.w	d1,obVelY(a0)
000149AA 3142 0010                  		move.w	d2,obVelX(a0)
000149AE 4841                       		swap	d1
000149B0 3141 000E                  		move.w	d1,obY+2(a0)
000149B4 4268 000A                  		clr.w	obX+2(a0)
000149B8 4E75                       		rts	
000149BA                            ; End of function LCon_ChangeDir
000149BA                            
000149BA                            ; ===========================================================================
000149BA 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000149BC 0000                       		dc.w word_12610-LCon_Data
000149BE 0000                       		dc.w word_12628-LCon_Data
000149C0 0000                       		dc.w word_1263C-LCon_Data
000149C2 0000                       		dc.w word_12650-LCon_Data
000149C4 0000                       		dc.w word_12668-LCon_Data
000149C6 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000149D6 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000149E2 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000149F2 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000149FA 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014A0E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014A22 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014A3A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A3A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A4E                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A4E                            ; ---------------------------------------------------------------------------
00014A4E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A4E                            ; ---------------------------------------------------------------------------
00014A4E                            Map_LConv_internal:
00014A4E 0000                       		dc.w @wheel1-Map_LConv_internal
00014A50 0000                       		dc.w @wheel2-Map_LConv_internal
00014A52 0000                       		dc.w @wheel3-Map_LConv_internal
00014A54 0000                       		dc.w @wheel4-Map_LConv_internal
00014A56 0000                       		dc.w @platform-Map_LConv_internal
00014A58 01                         @wheel1:	dc.b 1
00014A59 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A5E 01                         @wheel2:	dc.b 1
00014A5F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A64 01                         @wheel3:	dc.b 1
00014A65 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A6A 01                         @wheel4:	dc.b 1
00014A6B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014A70 01                         @platform:	dc.b 1
00014A71 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014A76                            		even
00014A76                            		even
00014A76                            		include	"_incObj\64 Bubbles.asm"
00014A76                            ; ---------------------------------------------------------------------------
00014A76                            ; Object 64 - bubbles (LZ)
00014A76                            ; ---------------------------------------------------------------------------
00014A76                            
00014A76                            Bubble:
00014A76 7000                       		moveq	#0,d0
00014A78 1028 0024                  		move.b	obRoutine(a0),d0
00014A7C 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014A80 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014A84                            ; ===========================================================================
00014A84 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014A86 0000                       		dc.w Bub_Animate-Bub_Index
00014A88 0000                       		dc.w Bub_ChkWater-Bub_Index
00014A8A 0000                       		dc.w Bub_Display-Bub_Index
00014A8C 0000                       		dc.w Bub_Delete-Bub_Index
00014A8E 0000                       		dc.w Bub_BblMaker-Bub_Index
00014A90                            
00014A90 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014A90 =00000030                  bub_origX:	equ $30		; original x-axis position
00014A90 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014A90 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014A90                            ; ===========================================================================
00014A90                            
00014A90                            Bub_Main:	; Routine 0
00014A90 5428 0024                  		addq.b	#2,obRoutine(a0)
00014A94 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014A9C 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014AA2 117C 0084 0001             		move.b	#$84,obRender(a0)
00014AA8 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014AAE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014AB4 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014AB8 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014ABA                            
00014ABA 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014ABE 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014AC2 1140 0032                  		move.b	d0,bub_time(a0)
00014AC6 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014ACA 117C 0006 001C             		move.b	#6,obAnim(a0)
00014AD0 6000 0000                  		bra.w	Bub_BblMaker
00014AD4                            ; ===========================================================================
00014AD4                            
00014AD4                            @bubble:
00014AD4 1140 001C                  		move.b	d0,obAnim(a0)
00014AD8 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014ADE 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014AE4 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014AEA 1140 0026                  		move.b	d0,obAngle(a0)
00014AEE                            
00014AEE                            Bub_Animate:	; Routine 2
00014AEE 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014AF4 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00014AFA 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014B00 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014B02                            
00014B02 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014B08                            
00014B08                            Bub_ChkWater:	; Routine 4
00014B08 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B0C B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014B10 6500                       		bcs.s	@wobble		; if yes, branch
00014B12                            
00014B12                            @burst:
00014B12 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014B18 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014B1C 6000 0000                  		bra.w	Bub_Display
00014B20                            ; ===========================================================================
00014B20                            
00014B20                            @wobble:
00014B20 1028 0026                  		move.b	obAngle(a0),d0
00014B24 5228 0026                  		addq.b	#1,obAngle(a0)
00014B28 0240 007F                  		andi.w	#$7F,d0
00014B2C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014B32 1031 0000                  		move.b	(a1,d0.w),d0
00014B36 4880                       		ext.w	d0
00014B38 D068 0030                  		add.w	bub_origX(a0),d0
00014B3C 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B40 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B44 6700                       		beq.s	@display
00014B46 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B4A 6700                       		beq.s	@display	; if not, branch
00014B4C                            
00014B4C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B5A 43F8 D000                  		lea	(v_player).w,a1
00014B5E 4269 0010                  		clr.w	obVelX(a1)
00014B62 4269 0012                  		clr.w	obVelY(a1)
00014B66 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B6A 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014B70 337C 0023 003E             		move.w	#$23,$3E(a1)
00014B76 137C 0000 003C             		move.b	#0,$3C(a1)
00014B7C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014B82 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014B88 0829 0002 0022             		btst	#2,obStatus(a1)
00014B8E 6700 FF82                  		beq.w	@burst
00014B92 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014B98 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014B9E 137C 0009 0017             		move.b	#9,obWidth(a1)
00014BA4 5B69 000C                  		subq.w	#5,obY(a1)
00014BA8 6000 FF68                  		bra.w	@burst
00014BAC                            ; ===========================================================================
00014BAC                            
00014BAC                            @display:
00014BAC 6100 AB4A                  		bsr.w	SpeedToPos
00014BB0 4A28 0001                  		tst.b	obRender(a0)
00014BB4 6A00                       		bpl.s	@delete
00014BB6 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00014BBC                            
00014BBC                            	@delete:
00014BBC 4EF9 0000 F74C             		jmp	(DeleteObject).l
00014BC2                            ; ===========================================================================
00014BC2                            
00014BC2                            Bub_Display:	; Routine 6
00014BC2 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BC8 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00014BCE 4A28 0001                  		tst.b	obRender(a0)
00014BD2 6A00                       		bpl.s	@delete
00014BD4 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00014BDA                            
00014BDA                            	@delete:
00014BDA 4EF9 0000 F74C             		jmp	(DeleteObject).l
00014BE0                            ; ===========================================================================
00014BE0                            
00014BE0                            Bub_Delete:	; Routine 8
00014BE0 6000 AB6A                  		bra.w	DeleteObject
00014BE4                            ; ===========================================================================
00014BE4                            
00014BE4                            Bub_BblMaker:	; Routine $A
00014BE4 4A68 0036                  		tst.w	$36(a0)
00014BE8 6600                       		bne.s	@loc_12874
00014BEA 3038 F646                  		move.w	(v_waterpos1).w,d0
00014BEE B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014BF2 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014BF6 4A28 0001                  		tst.b	obRender(a0)
00014BFA 6A00 0000                  		bpl.w	@chkdel
00014BFE 5368 0038                  		subq.w	#1,$38(a0)
00014C02 6A00 0000                  		bpl.w	@loc_12914
00014C06 317C 0001 0036             		move.w	#1,$36(a0)
00014C0C                            
00014C0C                            	@tryagain:
00014C0C 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014C12 3200                       		move.w	d0,d1
00014C14 0240 0007                  		andi.w	#7,d0
00014C18 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014C1C 64EE                       		bcc.s	@tryagain	; if yes, branch
00014C1E                            
00014C1E 1140 0034                  		move.b	d0,$34(a0)
00014C22 0241 000C                  		andi.w	#$C,d1
00014C26 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014C2C D2C1                       		adda.w	d1,a1
00014C2E 2149 003C                  		move.l	a1,$3C(a0)
00014C32 5328 0032                  		subq.b	#1,bub_time(a0)
00014C36 6A00                       		bpl.s	@loc_12872
00014C38 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C3E 08E8 0007 0036             		bset	#7,$36(a0)
00014C44                            
00014C44                            @loc_12872:
00014C44 6000                       		bra.s	@loc_1287C
00014C46                            ; ===========================================================================
00014C46                            
00014C46                            @loc_12874:
00014C46 5368 0038                  		subq.w	#1,$38(a0)
00014C4A 6A00 0000                  		bpl.w	@loc_12914
00014C4E                            
00014C4E                            @loc_1287C:
00014C4E 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014C54 0240 001F                  		andi.w	#$1F,d0
00014C58 3140 0038                  		move.w	d0,$38(a0)
00014C5C 6100 AF3A                  		bsr.w	FindFreeObj
00014C60 6600                       		bne.s	@fail
00014C62 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C66 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C6C 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014C72 0240 000F                  		andi.w	#$F,d0
00014C76 5140                       		subq.w	#8,d0
00014C78 D169 0008                  		add.w	d0,obX(a1)
00014C7C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014C82 7000                       		moveq	#0,d0
00014C84 1028 0034                  		move.b	$34(a0),d0
00014C88 2468 003C                  		movea.l	$3C(a0),a2
00014C8C 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014C92 0828 0007 0036             		btst	#7,$36(a0)
00014C98 6700                       		beq.s	@fail
00014C9A 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014CA0 0240 0003                  		andi.w	#3,d0
00014CA4 6600                       		bne.s	@loc_buh
00014CA6 08E8 0006 0036             		bset	#6,$36(a0)
00014CAC 6600                       		bne.s	@fail
00014CAE 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CB4                            
00014CB4                            @loc_buh:
00014CB4 4A28 0034                  		tst.b	$34(a0)
00014CB8 6600                       		bne.s	@fail
00014CBA 08E8 0006 0036             		bset	#6,$36(a0)
00014CC0 6600                       		bne.s	@fail
00014CC2 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CC8                            
00014CC8                            	@fail:
00014CC8 5328 0034                  		subq.b	#1,$34(a0)
00014CCC 6A00                       		bpl.s	@loc_12914
00014CCE 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014CD4 0240 007F                  		andi.w	#$7F,d0
00014CD8 0640 0080                  		addi.w	#$80,d0
00014CDC D168 0038                  		add.w	d0,$38(a0)
00014CE0 4268 0036                  		clr.w	$36(a0)
00014CE4                            
00014CE4                            @loc_12914:
00014CE4 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014CEA 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00014CF0                            
00014CF0                            @chkdel:
00014D0E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D12 B068 000C                  		cmp.w	obY(a0),d0
00014D16 6500 A9F4                  		bcs.w	DisplaySprite
00014D1A 4E75                       		rts	
00014D1C                            ; ===========================================================================
00014D1C                            ; bubble production sequence
00014D1C                            
00014D1C                            ; 0 = small bubble, 1 =	large bubble
00014D1C                            
00014D1C 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014D2E                            
00014D2E                            ; ===========================================================================
00014D2E                            
00014D2E                            Bub_ChkSonic:
00014D2E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014D32 6B00                       		bmi.s	@loc_12998
00014D34 43F8 D000                  		lea	(v_player).w,a1
00014D38 3029 0008                  		move.w	obX(a1),d0
00014D3C 3228 0008                  		move.w	obX(a0),d1
00014D40 0441 0010                  		subi.w	#$10,d1
00014D44 B240                       		cmp.w	d0,d1
00014D46 6400                       		bcc.s	@loc_12998
00014D48 0641 0020                  		addi.w	#$20,d1
00014D4C B240                       		cmp.w	d0,d1
00014D4E 6500                       		bcs.s	@loc_12998
00014D50 3029 000C                  		move.w	obY(a1),d0
00014D54 3228 000C                  		move.w	obY(a0),d1
00014D58 B240                       		cmp.w	d0,d1
00014D5A 6400                       		bcc.s	@loc_12998
00014D5C 0641 0010                  		addi.w	#$10,d1
00014D60 B240                       		cmp.w	d0,d1
00014D62 6500                       		bcs.s	@loc_12998
00014D64 7001                       		moveq	#1,d0
00014D66 4E75                       		rts	
00014D68                            ; ===========================================================================
00014D68                            
00014D68                            @loc_12998:
00014D68 7000                       		moveq	#0,d0
00014D6A 4E75                       		rts	
00014D6A 4E75                       		rts	
00014D6C                            		include	"_anim\Bubbles.asm"
00014D6C                            ; ---------------------------------------------------------------------------
00014D6C                            ; Animation script - bubbles (LZ)
00014D6C                            ; ---------------------------------------------------------------------------
00014D6C 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014D6E 0000                       		dc.w @medium-Ani_Bub
00014D70 0000                       		dc.w @large-Ani_Bub
00014D72 0000                       		dc.w @incroutine-Ani_Bub
00014D74 0000                       		dc.w @incroutine-Ani_Bub
00014D76 0000                       		dc.w @burst-Ani_Bub
00014D78 0000                       		dc.w @bubmaker-Ani_Bub
00014D7A 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014D80 00                         		even
00014D80 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014D86 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014D8E 00                         		even
00014D8E 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014D90 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014D96 00                         		even
00014D96 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014D9C 00                         		even
00014D9C 00                         		even
00014D9C                            Map_Bub:	include	"_maps\Bubbles.asm"
00014D9C                            ; ---------------------------------------------------------------------------
00014D9C                            ; Sprite mappings - bubbles (LZ)
00014D9C                            ; ---------------------------------------------------------------------------
00014D9C                            Map_Bub_internal:
00014D9C 0000                       		dc.w @bubble1-Map_Bub_internal
00014D9E 0000                       		dc.w @bubble2-Map_Bub_internal
00014DA0 0000                       		dc.w @bubble3-Map_Bub_internal
00014DA2 0000                       		dc.w @bubble4-Map_Bub_internal
00014DA4 0000                       		dc.w @bubble5-Map_Bub_internal
00014DA6 0000                       		dc.w @bubble6-Map_Bub_internal
00014DA8 0000                       		dc.w @bubblefull-Map_Bub_internal
00014DAA 0000                       		dc.w @burst1-Map_Bub_internal
00014DAC 0000                       		dc.w @burst2-Map_Bub_internal
00014DAE 0000                       		dc.w @zero_sm-Map_Bub_internal
00014DB0 0000                       		dc.w @five_sm-Map_Bub_internal
00014DB2 0000                       		dc.w @three_sm-Map_Bub_internal
00014DB4 0000                       		dc.w @one_sm-Map_Bub_internal
00014DB6 0000                       		dc.w @zero-Map_Bub_internal
00014DB8 0000                       		dc.w @five-Map_Bub_internal
00014DBA 0000                       		dc.w @four-Map_Bub_internal
00014DBC 0000                       		dc.w @three-Map_Bub_internal
00014DBE 0000                       		dc.w @two-Map_Bub_internal
00014DC0 0000                       		dc.w @one-Map_Bub_internal
00014DC2 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014DC4 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014DC6 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014DC8 0000                       		dc.w @blank-Map_Bub_internal
00014DCA 01                         @bubble1:	dc.b 1
00014DCB FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014DD0 01                         @bubble2:	dc.b 1
00014DD1 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014DD6 01                         @bubble3:	dc.b 1
00014DD7 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014DDC 01                         @bubble4:	dc.b 1
00014DDD F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014DE2 01                         @bubble5:	dc.b 1
00014DE3 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014DE8 01                         @bubble6:	dc.b 1
00014DE9 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014DEE 01                         @bubblefull:	dc.b 1
00014DEF F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014DF4 04                         @burst1:	dc.b 4
00014DF5 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014DFA F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014DFF 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014E04 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014E09 04                         @burst2:	dc.b 4
00014E0A F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014E0F F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014E14 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014E19 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014E1E 01                         @zero_sm:	dc.b 1
00014E1F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014E24 01                         @five_sm:	dc.b 1
00014E25 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014E2A 01                         @three_sm:	dc.b 1
00014E2B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014E30 01                         @one_sm:	dc.b 1
00014E31 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014E36 01                         @zero:		dc.b 1
00014E37 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014E3C 01                         @five:		dc.b 1
00014E3D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E42 01                         @four:		dc.b 1
00014E43 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E48 01                         @three:		dc.b 1
00014E49 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E4E 01                         @two:		dc.b 1
00014E4F F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E54 01                         @one:		dc.b 1
00014E55 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E5A 01                         @bubmaker1:	dc.b 1
00014E5B F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E60 01                         @bubmaker2:	dc.b 1
00014E61 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E66 01                         @bubmaker3:	dc.b 1
00014E67 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E6C 00                         @blank:		dc.b 0
00014E6E 00                         		even
00014E6E 00                         		even
00014E6E                            		include	"_incObj\65 Waterfalls.asm"
00014E6E                            ; ---------------------------------------------------------------------------
00014E6E                            ; Object 65 - waterfalls (LZ)
00014E6E                            ; ---------------------------------------------------------------------------
00014E6E                            
00014E6E                            Waterfall:
00014E6E 7000                       		moveq	#0,d0
00014E70 1028 0024                  		move.b	obRoutine(a0),d0
00014E74 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014E78 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014E7C                            ; ===========================================================================
00014E7C 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014E7E 0000                       		dc.w WFall_Animate-WFall_Index
00014E80 0000                       		dc.w WFall_ChkDel-WFall_Index
00014E82 0000                       		dc.w WFall_OnWater-WFall_Index
00014E84 0000                       		dc.w loc_12B36-WFall_Index
00014E86                            ; ===========================================================================
00014E86                            
00014E86                            WFall_Main:	; Routine 0
00014E86 5828 0024                  		addq.b	#4,obRoutine(a0)
00014E8A 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014E92 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014E98 0028 0004 0001             		ori.b	#4,obRender(a0)
00014E9E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014EA4 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014EAA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014EAE 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014EB0 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EB6                            
00014EB6                            	@under80:
00014EB6 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014EBA 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014EBE 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014EC2 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014EC4                            
00014EC4 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014EC8 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014ECC 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014ED2 6700                       		beq.s	@not49		; if not, branch
00014ED4                            
00014ED4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014EDA                            
00014EDA                            	@not49:
00014EDA 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014EE0 6700                       		beq.s	WFall_Animate	; if not, branch
00014EE2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014EE8                            
00014EE8                            WFall_Animate:	; Routine 2
00014EE8 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014EEE 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00014EF4                            
00014EF4                            WFall_ChkDel:	; Routine 4
00014EF4 6000 C9D4                  		bra.w	RememberState
00014EF8                            ; ===========================================================================
00014EF8                            
00014EF8                            WFall_OnWater:	; Routine 6
00014EF8 3038 F646                  		move.w	(v_waterpos1).w,d0
00014EFC 0440 0010                  		subi.w	#$10,d0
00014F00 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014F04 60E2                       		bra.s	WFall_Animate
00014F06                            ; ===========================================================================
00014F06                            
00014F06                            loc_12B36:	; Routine 8
00014F06 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014F0C 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014F12 6600                       		bne.s	@animate
00014F14 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F1A                            
00014F1A                            	@animate:
00014F1A 60CC                       		bra.s	WFall_Animate
00014F1A 60CC                       		bra.s	WFall_Animate
00014F1C                            		include	"_anim\Waterfalls.asm"
00014F1C                            ; ---------------------------------------------------------------------------
00014F1C                            ; Animation script - waterfall (LZ)
00014F1C                            ; ---------------------------------------------------------------------------
00014F1C 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014F1E 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014F24 00                         		even
00014F24 00                         		even
00014F24                            Map_WFall	include	"_maps\Waterfalls.asm"
00014F24                            ; ---------------------------------------------------------------------------
00014F24                            ; Sprite mappings - waterfalls (LZ)
00014F24                            ; ---------------------------------------------------------------------------
00014F24                            Map_WFall_internal:
00014F24 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014F26 0000                       		dc.w @cornerwide-Map_WFall_internal
00014F28 0000                       		dc.w @cornermedium-Map_WFall_internal
00014F2A 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014F2C 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014F2E 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014F30 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014F32 0000                       		dc.w @vertwide-Map_WFall_internal
00014F34 0000                       		dc.w @diagonal-Map_WFall_internal
00014F36 0000                       		dc.w @splash1-Map_WFall_internal
00014F38 0000                       		dc.w @splash2-Map_WFall_internal
00014F3A 0000                       		dc.w @splash3-Map_WFall_internal
00014F3C 01                         @vertnarrow:	dc.b 1
00014F3D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F42 02                         @cornerwide:	dc.b 2
00014F43 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F48 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F4D 02                         @cornermedium:	dc.b 2
00014F4E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F53 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F58 01                         @cornernarrow:	dc.b 1
00014F59 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F5E 02                         @cornermedium2:	dc.b 2
00014F5F F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F64 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F69 01                         @cornernarrow2:	dc.b 1
00014F6A F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014F6F 01                         @cornernarrow3:	dc.b 1
00014F70 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014F75 01                         @vertwide:	dc.b 1
00014F76 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014F7B 02                         @diagonal:	dc.b 2
00014F7C F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014F81 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014F86 02                         @splash1:	dc.b 2
00014F87 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014F8C F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014F91 02                         @splash2:	dc.b 2
00014F92 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014F97 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014F9C 02                         @splash3:	dc.b 2
00014F9D F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014FA2 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014FA8 00                         		even
00014FA8 00                         		even
00014FA8                            
00014FA8                            
00014FA8                            SpinDash_dust:
00014FA8                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014FA8 7000                       		moveq	#0,d0
00014FAA 1028 0024                  		move.b	$24(a0),d0
00014FAE 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014FB2 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014FB6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FB6 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014FB8 0000                       		dc loc_1DD90-off_1DD2E; 1
00014FBA 0000                       		dc loc_1DE46-off_1DD2E; 2
00014FBC 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014FBE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FBE                            
00014FBE                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014FBE 5428 0024                  		addq.b	#2,$24(a0)
00014FC2 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014FCA 0028 0004 0001             		or.b	#4,1(a0)
00014FD0 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014FD6 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014FDC 317C 07A0 0002             		move	#$7A0,2(a0)
00014FE2 317C D000 003E             		move	#-$3000,$3E(a0)
00014FE8 317C F400 003C             		move	#$F400,$3C(a0)
00014FEE B0FC D1C0                  		cmp	#-$2E40,a0
00014FF2 6700                       		beq.s	loc_1DD8C
00014FF4 117C 0001 0034             		move.b	#1,$34(a0)
00014FFA                            ;		cmp	#2,($FFFFFF70).w
00014FFA                            ;		beq.s	loc_1DD8C
00014FFA                            ;		move	#$48C,2(a0)
00014FFA                            ;		move	#-$4FC0,$3E(a0)
00014FFA                            ;		move	#-$6E80,$3C(a0)
00014FFA                            
00014FFA                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014FFA                            ;		bsr.w	sub_16D6E
00014FFA                            
00014FFA                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014FFA 3468 003E                  		movea.w	$3E(a0),a2
00014FFE 7000                       		moveq	#0,d0
00015000 1028 001C                  		move.b	$1C(a0),d0
00015004 D040                       		add	d0,d0
00015006 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001500A 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001500E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001500E 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015010 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015012 0000                       		dc loc_1DDCC-off_1DDA4; 2
00015014 0000                       		dc loc_1DE20-off_1DDA4; 3
00015016                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015016                            
00015016                            loc_1DDAC:				; DATA XREF: h+6E30?o
00015016 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001501C 4A28 001D                  		tst.b	$1D(a0)
00015020 6600                       		bne.s	loc_1DE28
00015022 316A 0008 0008             		move	8(a2),8(a0)
00015028 117C 0000 0022             		move.b	#0,$22(a0)
0001502E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015034 6000                       		bra.s	loc_1DE28
00015036                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015036                            
00015036                            loc_1DDCC:				; DATA XREF: h+6E30?o
00015036                            ;		cmp.b	#$C,$28(a2)
00015036                            ;		bcs.s	loc_1DE3E
00015036 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001503C 6400                       		bcc.s	loc_1DE3E
0001503E 4A2A 0039                  		tst.b	$39(a2)
00015042 6700                       		beq.s	loc_1DE3E
00015044 316A 0008 0008             		move	8(a2),8(a0)
0001504A 316A 000C 000C             		move	$C(a2),$C(a0)
00015050 116A 0022 0022             		move.b	$22(a2),$22(a0)
00015056 0228 0001 0022             		and.b	#1,$22(a0)
0001505C 4A28 0034                  		tst.b	$34(a0)
00015060 6700                       		beq.s	loc_1DE06
00015062 5968 000C                  		sub	#4,$C(a0)
00015066                            
00015066                            loc_1DE06:				; CODE XREF: h+6E8A?j
00015066 4A28 001D                  		tst.b	$1D(a0)
0001506A 6600                       		bne.s	loc_1DE28
0001506C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015072 4A6A 0002                  		tst	2(a2)
00015076 6A00                       		bpl.s	loc_1DE28
00015078 0068 8000 0002             		or	#-$8000,2(a0)
0001507E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001507E                            
0001507E                            loc_1DE20:				; DATA XREF: h+6E30?o
0001507E                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
0001507E 43F9 0000 0000             		lea	(off_1DF38).l,a1
00015084 4EB9 0000 C7F4             		jsr	AnimateSprite
0001508A 6100 0000                  		bsr.w	loc_1DEE4
0001508E 4EFA A67C                  		jmp	DisplaySprite
00015092                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015092                            
00015092                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00015092 117C 0000 001C             		move.b	#0,$1C(a0)
00015098 4E75                       		rts	
0001509A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001509A                            
0001509A                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001509A 6000 A6B0                  		bra.w	DeleteObject
0001509E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001509E                            
0001509E                            
0001509E                            
0001509E                            loc_1DE4A:
0001509E 3468 003E                  	movea.w	$3E(a0),a2
000150A2 7210                       	moveq	#$10,d1
000150A4 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000150AA 6700                       	beq.s	loc_1DE64
000150AC 7206                       	moveq	#$6,d1
000150AE 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000150B4 6700                       	beq.s	loc_1DE64
000150B6 117C 0002 0024             	move.b	#2,$24(a0)
000150BC 117C 0000 0032             	move.b	#0,$32(a0)
000150C2 4E75                       	rts
000150C4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150C4                            
000150C4                            loc_1DE64:				; CODE XREF: h+6EE0?j
000150C4 5328 0032                  		subq.b	#1,$32(a0)
000150C8 6A00                       		bpl.s	loc_1DEE0
000150CA 117C 0003 0032             		move.b	#3,$32(a0)
000150D0 4EBA AAC6                  		jsr	FindFreeObj
000150D4 6600                       		bne.s	loc_1DEE0
000150D6 1290                       		move.b	0(a0),0(a1)
000150D8 336A 0008 0008             		move	8(a2),8(a1)
000150DE 336A 000C 000C             		move	$C(a2),$C(a1)
000150E4 4A28 0034                  		tst.b	$34(a0)
000150E8 6700                       		beq.s	loc_1DE9A
000150EA 5941                       		sub	#4,d1
000150EC                            
000150EC                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000150EC D369 000C                  		add	d1,$C(a1)
000150F0 137C 0000 0022             		move.b	#0,$22(a1)
000150F6 137C 0003 001C             		move.b	#3,$1C(a1)
000150FC 5429 0024                  		addq.b	#2,$24(a1)
00015100 2368 0004 0004             		move.l	4(a0),4(a1)
00015106 1368 0001 0001             		move.b	1(a0),1(a1)
0001510C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015112 137C 0004 0014             		move.b	#4,obActWid(a1)
00015118 3368 0002 0002             		move	2(a0),2(a1)
0001511E 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015124 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001512A 4A6A 0002                  		tst	2(a2)
0001512E 6A00                       		bpl.s	loc_1DEE0
00015130 0069 8000 0002             		or	#-$8000,2(a1)
00015136                            
00015136                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015136 6100                       		bsr.s	loc_1DEE4
00015138 4E75                       		rts	
0001513A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001513A                            
0001513A                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001513A 7000                       		moveq	#0,d0
0001513C 1028 001A                  		move.b	$1A(a0),d0
00015140 B028 0030                  		cmp.b	$30(a0),d0
00015144 6700 0000                  		beq.w	locret_1DF36
00015148 1140 0030                  		move.b	d0,$30(a0)
0001514C 45F9 0000 0000             		lea	(off_1E074).l,a2
00015152 D040                       		add	d0,d0
00015154 D4F2 0000                  		add	(a2,d0.w),a2
00015158 3A1A                       		move	(a2)+,d5
0001515A 5345                       		subq	#1,d5
0001515C 6B00 0000                  		bmi.w	locret_1DF36
00015160 3828 003C                  		move $3C(a0),d4
00015164                            
00015164                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015164 7200                       		moveq	#0,d1
00015166 321A                       		move	(a2)+,d1
00015168 3601                       		move	d1,d3
0001516A E04B                       		lsr.w	#8,d3
0001516C 0243 00F0                  		and	#$F0,d3	; 'ð'
00015170 0643 0010                  		add	#$10,d3
00015174 0241 0FFF                  		and	#$FFF,d1
00015178 EB89                       		lsl.l	#5,d1
0001517A 0681 0000 0000             		add.l	#Art_Dust,d1
00015180 3404                       		move	d4,d2
00015182 D843                       		add	d3,d4
00015184 D843                       		add	d3,d4
00015186 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
0001518C 51CD FFD6                  		dbf	d5,loc_1DF0A
00015190 4E75                           rts
00015192                            
00015192                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00015192 4E75                       		rts	
00015194                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015194 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00015196 0000                       		dc byte_1DF43-off_1DF38; 1
00015198 0000                       		dc byte_1DF4F-off_1DF38; 2
0001519A 0000                       		dc byte_1DF58-off_1DF38; 3
0001519C 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
0001519F 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000151AB 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000151B4 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000151BA                            ; -------------------------------------------------------------------------------
000151BA                            ; Unknown Sprite Mappings
000151BA                            ; -------------------------------------------------------------------------------
000151BA                            MapUnc_1DF5E:
000151BA 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000151BC 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000151BE 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000151C0 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000151C2 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000151C4 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000151C6 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000151C8 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000151CA 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000151CC 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000151CE 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000151D0 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000151D2 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000151D4 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000151D6 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000151D8 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000151DA 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000151DC 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000151DE 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000151E0 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000151E2 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000151E4 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000151E6 00                         word_1DF8A:	dc.b 0
000151E7 01                         word_1DF8C:	dc.b 1
000151E8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151ED 01                         word_1DF96:	dc.b 1
000151EE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151F3 01                         word_1DFA0:	dc.b 1
000151F4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151F9 01                         word_1DFAA:	dc.b 1
000151FA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151FF 01                         word_1DFB4:	dc.b 1
00015200 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015205 01                         word_1DFBE:	dc.b 1
00015206 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001520B 01                         word_1DFC8:	dc.b 1
0001520C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015211 01                         word_1DFD2:	dc.b 1
00015212 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015217 01                         word_1DFDC:	dc.b 1
00015218 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001521D 01                         word_1DFE6:	dc.b 1
0001521E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015223 01                         word_1DFF0:	dc.b 1
00015224 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015229 01                         word_1DFFA:	dc.b 1
0001522A 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001522F 02                         word_1E004:	dc.b 2
00015230 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015235 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001523A 02                         word_1E016:	dc.b 2
0001523B F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015240 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015245 02                         word_1E028:	dc.b 2
00015246 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001524B 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015250 02                         word_1E03A:	dc.b 2
00015251 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015256 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001525B 01                         word_1E04C:	dc.b 1
0001525C F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015261 01                         word_1E056:	dc.b 1
00015262 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015267 01                         word_1E060:	dc.b 1
00015268 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001526D 01                         word_1E06A:	dc.b 1
0001526E F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015273 00                         	dc.b 0
00015274 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015276 0000                       	dc word_1E0A2-off_1E074; 1
00015278 0000                       	dc word_1E0A6-off_1E074; 2
0001527A 0000                       	dc word_1E0AA-off_1E074; 3
0001527C 0000                       	dc word_1E0AE-off_1E074; 4
0001527E 0000                       	dc word_1E0B2-off_1E074; 5
00015280 0000                       	dc word_1E0B6-off_1E074; 6
00015282 0000                       	dc word_1E0BA-off_1E074; 7
00015284 0000                       	dc word_1E0BE-off_1E074; 8
00015286 0000                       	dc word_1E0C2-off_1E074; 9
00015288 0000                       	dc word_1E0C6-off_1E074; 10
0001528A 0000                       	dc word_1E0CA-off_1E074; 11
0001528C 0000                       	dc word_1E0CE-off_1E074; 12
0001528E 0000                       	dc word_1E0D2-off_1E074; 13
00015290 0000                       	dc word_1E0D8-off_1E074; 14
00015292 0000                       	dc word_1E0DE-off_1E074; 15
00015294 0000                       	dc word_1E0E4-off_1E074; 16
00015296 0000                       	dc word_1E0EA-off_1E074; 17
00015298 0000                       	dc word_1E0EA-off_1E074; 18
0001529A 0000                       	dc word_1E0EA-off_1E074; 19
0001529C 0000                       	dc word_1E0EA-off_1E074; 20
0001529E 0000                       	dc word_1E0EC-off_1E074; 21
000152A0 0000                       word_1E0A0:	dc 0
000152A2 0001                       word_1E0A2:	dc 1
000152A4 7000                       	dc $7000
000152A6 0001                       word_1E0A6:	dc 1
000152A8 F008                       	dc $F008
000152AA 0001                       word_1E0AA:	dc 1
000152AC F018                       	dc $F018
000152AE 0001                       word_1E0AE:	dc 1
000152B0 F028                       	dc $F028
000152B2 0001                       word_1E0B2:	dc 1
000152B4 F038                       	dc $F038
000152B6 0001                       word_1E0B6:	dc 1
000152B8 F048                       	dc $F048
000152BA 0001                       word_1E0BA:	dc 1
000152BC 7058                       	dc $7058
000152BE 0001                       word_1E0BE:	dc 1
000152C0 7060                       	dc $7060
000152C2 0001                       word_1E0C2:	dc 1
000152C4 7068                       	dc $7068
000152C6 0001                       word_1E0C6:	dc 1
000152C8 7070                       	dc $7070
000152CA 0001                       word_1E0CA:	dc 1
000152CC 7078                       	dc $7078
000152CE 0001                       word_1E0CE:	dc 1
000152D0 7080                       	dc $7080
000152D2 0002                       word_1E0D2:	dc 2
000152D4 1088                       	dc $1088
000152D6 708A                       	dc $708A
000152D8 0002                       word_1E0D8:	dc 2
000152DA 3092                       	dc $3092
000152DC 7096                       	dc $7096
000152DE 0002                       word_1E0DE:	dc 2
000152E0 509E                       	dc $509E
000152E2 70A4                       	dc $70A4
000152E4 0002                       word_1E0E4:	dc 2
000152E6 50AC                       	dc $50AC
000152E8 70B2                       	dc $70B2
000152EA 0000                       word_1E0EA:	dc 0
000152EC 0001                       word_1E0EC:	dc 1
000152EE F0BA                       	dc $F0BA
000152F0                            	even
000152F0                            
000152F0                            ; ===========================================================================
000152F0                            
000152F0                            LoadPlayerPal:
000152F0 7000                       		moveq	#0,d0
000152F2 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000152F6 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000152FA 4E75                       		rts
000152FC                            
000152FC                            	@palLUT:
000152FC 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015301 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
00015306                            
00015306                            LoadPlayerWaterPal:
00015306 7000                       		moveq	#0,d0
00015308 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001530C 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015310 4E75                       		rts
00015312                            
00015312                            	@palLUT:
00015312 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00015317 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
0001531C                            
0001531C                            ; ---------------------------------------------------------------------------
0001531C                            ; Object 01 - Sonic
0001531C                            ; ---------------------------------------------------------------------------
0001531C                            
0001531C                            SonicPlayer:
0001531C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015320 6700                       		beq.s	Sonic_Normal	; if not, branch
00015322 4EF9 0000 0000             		jmp	(DebugMode).l
00015328                            ; ===========================================================================
00015328                            
00015328                            Sonic_Normal:
00015328 7000                       		moveq	#0,d0
0001532A 1028 0024                  		move.b	obRoutine(a0),d0
0001532E 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015332 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015336                            ; ===========================================================================
00015336 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015338 0000                       		dc.w Sonic_Control-Sonic_Index
0001533A 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001533C 0000                       		dc.w Sonic_Death-Sonic_Index
0001533E 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015340                            ; ===========================================================================
00015340                            
00015340                            Sonic_Main:	; Routine 0
00015340 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015346 5428 0024                  		addq.b	#2,obRoutine(a0)
0001534A 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015350 117C 0009 0017             		move.b	#9,obWidth(a0)
00015356 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001535E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015364 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001536A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015370 117C 0004 0001             		move.b	#4,obRender(a0)
00015376 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
0001537C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015382 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00015388 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001538E                            
0001538E                            Sonic_Control:    ; Routine 2
0001538E 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015392 6700 0000                  		beq.w	@cont    
00015396 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015398                             
00015398                            	@cont: 
00015398 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
0001539C 6700                       		beq.s    loc_12C58    ; if not, branch
0001539E 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000153A4 6700                       		beq.s    loc_12C58    ; if not, branch
000153A6 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000153AC 4238 F7CC                  		clr.b    (f_lockctrl).w
000153B0 4E75                       		rts
000153B2                            		
000153B2                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            ; Subroutine to    horizontally pan the camera view ahead of the player
000153B2                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000153B2                            ; ---------------------------------------------------------------------------
000153B2                            
000153B2                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000153B2                            
000153B2                            
000153B2                            Sonic_PanCamera:
000153B2 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000153B6 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153BA 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153BC 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153BE                            
000153BE                                @abs_inertia:
000153BE                            
000153BE                            ; These lines were intended to prevent the Camera from panning while
000153BE                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153BE                            ; However, given that no such object exists in Sonic 1, I just went
000153BE                            ; ahead and commented these out.
000153BE                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000153BE                            ;        beq.s    @skip                    ; if not, branch
000153BE                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153BE                            ;        bcs.s    @reset_pan                ; if so, branch
000153BE                            
000153BE                            ; These lines aren't part of the original routine; I added them myself.
000153BE                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153BE                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153BE 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153C2 6700                               beq.s    @skip                    ; if not, branch
000153C4 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000153CA 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000153CC 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000153CE                            
000153CE                                @skip:
000153CE 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000153D2 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000153D4 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000153D8 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000153DA                            
000153DA                                @pan_right:
000153DA 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000153DC 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000153E0 6500                               bcs.s    @update_pan                ; if not, branch
000153E2 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000153E6 6000                               bra.s    @update_pan                ; branch
000153E8                            ; ---------------------------------------------------------------------------
000153E8                            
000153E8                                @pan_left:
000153E8 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000153EA 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000153EE 6400                               bcc.s    @update_pan                ; if not, branch
000153F0 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000153F4 6000                               bra.s    @update_pan                ; branch
000153F6                            ; ---------------------------------------------------------------------------
000153F6                            
000153F6                                @reset_pan:
000153F6 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000153FA 6700                               beq.s    @update_pan                ; if so, branch
000153FC 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000153FE                                 
000153FE                                @reset_right:
000153FE 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015400 6000                               bra.s    @update_pan                ; branch
00015402                            ; ---------------------------------------------------------------------------
00015402                            
00015402                                @reset_left:
00015402 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015404                            
00015404                                @update_pan:
00015404 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015408 4E75                               rts                                ; return
0001540A                                 
0001540A                            ; End of function Sonic_PanCamera
0001540A                            
0001540A                            
0001540A                            ; ===========================================================================
0001540A                            
0001540A                            loc_12C58:
0001540A 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
0001540E 6600                       		bne.s	loc_12C64	; if yes, branch
00015410 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015416                            
00015416                            loc_12C64:
00015416 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001541C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001541E 7000                       		moveq	#0,d0
00015420 1028 0022                  		move.b	obStatus(a0),d0
00015424 0240 0006                  		andi.w	#6,d0
00015428 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001542C 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015430                            
00015430                            loc_12C7E:
00015430 6100                       		bsr.s	Sonic_Display
00015432 6100 0000                  		bsr.w	Sonic_RecordPosition
00015436 6100 0000                  		bsr.w	Sonic_Water
0001543A 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015440 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015446 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001544A 6700                       		beq.s	loc_12CA6
0001544C 4A28 001C                  		tst.b	obAnim(a0)
00015450 6600                       		bne.s	loc_12CA6
00015452 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015458                            
00015458                            loc_12CA6:
00015458 6100 0000                  		bsr.w	Sonic_Animate
0001545C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015460 6B00                       		bmi.s	loc_12CB6
00015462 4EB9 0000 0000             		jsr	(ReactToItem).l
00015468                            
00015468                            loc_12CB6:
00015468 6100 0000                  		bsr.w	Sonic_Loops
0001546C 6100 0000                  		bsr.w	Sonic_LoadGfx
00015470 4E75                       		rts	
00015472                            ; ===========================================================================
00015472 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015474 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015476 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015478 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001547A                            ; ---------------------------------------------------------------------------
0001547A                            ; Music	to play	after invincibility wears off
0001547A                            ; ---------------------------------------------------------------------------
0001547A                            MusicList2:
0001547A 00                         		dc.b bgm_GHZ
0001547B 00                         		dc.b bgm_LZ
0001547C 00                         		dc.b bgm_MZ
0001547D 00                         		dc.b bgm_SLZ
0001547E 00                         		dc.b bgm_SYZ
0001547F 00                         		dc.b bgm_SBZ
00015480                            		; The ending doesn't get an entry
00015480                            		even
00015480                            
00015480                            		include	"_incObj\Sonic Display.asm"
00015480                            ; ---------------------------------------------------------------------------
00015480                            ; Subroutine to display Sonic and set music
00015480                            ; ---------------------------------------------------------------------------
00015480                            
00015480                            Sonic_Display:
00015480 3028 0030                  		move.w    flashtime(a0),d0
00015484 6700                       		beq.s    @showAfterImage
00015486 5368 0030                  		subq.w    #1,flashtime(a0)
0001548A E648                               	lsr.w    #3,d0
0001548C 6400                               	bcc.s    @chkinvincible
0001548E                            
0001548E                            	@showAfterImage:
0001548E 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015492 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015494 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015496 4440                       		neg        d0                    ; if not, negate it
00015498                            
00015498                            	@AfterImage_Start:        
00015498 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001549C 6700                       		beq.s	@display	; if not, don't show the After Image
0001549E                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
0001549E                            		;blt.s    @display	; if not, don't show the After Image
0001549E                            	
0001549E                            	@AfterImage_Start2:    
0001549E 6100 A6F8                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000154A2 6600                               	bne.s    @display    ; if not have, don't load the After Image
000154A4 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000154A8 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000154AE 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154B4 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154BA                            
000154BA                                	@display:
000154BA 4EB9 0000 F70C                     	jsr    (DisplaySprite).l
000154C0                            
000154C0                            	@chkinvincible:
000154C0 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154C4 6700                       		beq.s	@chkshoes	; if not, branch
000154C6 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000154CA 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000154CC 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000154D0 6600                       		bne.s	@chkshoes
000154D2 4A38 F7AA                  		tst.b	(f_lockscreen).w
000154D6 6600                       		bne.s	@removeinvincible
000154D8 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000154DE 6500                       		bcs.s	@removeinvincible
000154E0 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000154E4 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
000154EA                            
000154EA                            	@removeinvincible:
000154EA 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000154F0                            
000154F0                            	@chkshoes:
000154F0 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000154F4 6700                       		beq.s	@exit		; if not, branch
000154F6 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000154FA 6700                       		beq.s	@exit
000154FC 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015500 6600                       		bne.s	@exit
00015502 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015508 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001550E 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015514 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001551A 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001551E 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
00015524                            		
00015524                            	@exit:
00015524 4E75                       		rts	
00015524 4E75                       		rts	
00015526                            		include	"_incObj\Sonic RecordPosition.asm"
00015526                            ; ---------------------------------------------------------------------------
00015526                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015526                            ; ---------------------------------------------------------------------------
00015526                            
00015526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015526                            
00015526                            
00015526                            Sonic_RecordPosition:
00015526 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001552A 43F8 CB00                  		lea	(v_tracksonic).w,a1
0001552E 43F1 0000                  		lea	(a1,d0.w),a1
00015532 32E8 0008                  		move.w	obX(a0),(a1)+
00015536 32E8 000C                  		move.w	obY(a0),(a1)+
0001553A 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
0001553E 4E75                       		rts	
00015540                            ; End of function Sonic_RecordPosition
00015540                            ; End of function Sonic_RecordPosition
00015540                            		include	"_incObj\Sonic Water.asm"
00015540                            ; ---------------------------------------------------------------------------
00015540                            ; Subroutine for Sonic when he's underwater
00015540                            ; ---------------------------------------------------------------------------
00015540                            
00015540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015540                            
00015540                            
00015540                            Sonic_Water:
00015540 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015546 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015548 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
0001554E 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015550                            
00015550                            	Sonic_Water_Exit:
00015550 4E75                       		rts	
00015552                            ; ===========================================================================
00015552                            
00015552                            	Sonic_Water_LZ:
00015552 3038 F646                  		move.w	(v_waterpos1).w,d0
00015556 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001555A 6C00 0000                  		bge.w	Abovewater	; if yes, branch
0001555E 6000 0000                  		bra	WaterStatus
00015562                            	WaterTagforMZ:
00015562 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015568 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001556C 303C 000F                  		move.w #$F,d0             ;TIS Length ($F = full line)
00015570 43F8 34A0                  		lea    (Pal_LZSonWatr2),a1  ;Palette location
00015574 45F8 FB00                          	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015578 4EB8 24A0                  		jsr	Palload_Loop
0001557C                            	WaterStatus:
0001557C 08E8 0006 0022             		bset	#6,obStatus(a0)
00015582 6600 FFCC                  		bne.w	Sonic_Water_Exit
00015586 6100 0000                  		bsr.w	ResumeMusic
0001558A 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015590                            
00015590 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015596 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
0001559C 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000155A2 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000155A8 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000155AE E0E8 0010                  		asr	obVelX(a0)
000155B2 E0E8 0012                  		asr	obVelY(a0)
000155B6 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000155BA 6700 FF94                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000155BE                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155BE 11FC 0008 D300             		move.b	#id_Splash,(v_objspace+$300).w ; load splash object
000155CE 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000155D4 6600 0000                  		bne.w	@return
000155D8                            		
000155D8                            		
000155D8                            	@return:
000155D8 4E75                       		rts
000155DA                            ; ===========================================================================
000155DA                            
000155DA                            Abovewater:
000155DA 303C 000F                  		move.w	#$F,d0             ;TIS Length ($F = full line)
000155DE 43F8 2B20                  		lea    (Pal_Sonic),a1  ;Palette location
000155E2 45F8 FB00                          	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000155E6 4EB8 24A0                  		jsr	Palload_Loop
000155EA                            
000155EA 08A8 0006 0022             		bclr	#6,obStatus(a0)
000155F0 6700 FF5E                  		beq.w	Sonic_Water_Exit
000155F4 6100 0000                  		bsr.w	ResumeMusic
000155F8 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155FE                            
000155FE 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015604 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001560A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015610 E1E8 0012                  		asl	obVelY(a0)
00015614 6700 FF3A                  		beq.w	Sonic_Water_Exit
00015618 11FC 0008 D300             		move.b	#id_Splash,(v_objspace+$300).w ; load splash object
0001561E 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015624 6E00                       		bgt.s	@belowmaxspeed
00015626 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001562C                            
0001562C                            	@belowmaxspeed:
00015636                            ; End of function Sonic_Water
00015636                            ; End of function Sonic_Water
00015636                            		include "_incObj\03 Hangable Sprite.asm"
00015636                            ; ===========================================================================
00015636                            ; ----------------------------------------------------------------------------
00015636                            ; Object 03 - Invisible sprite that you can hang on to
00015636                            ; ----------------------------------------------------------------------------
00015636                            ; Sprite_2C92C:
00015636                            Obj03:
00015636 7000                       	moveq    #0,d0
00015638 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001563C 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015640 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015644                            ; ===========================================================================
00015644                            ; off_2C93A:
00015644                            Obj03_Index:
00015644 0000                           dc.w Obj03_Main-Obj03_Index
00015646 0000                               dc.w Obj03_Init-Obj03_Index
00015648                            ; ===========================================================================
00015648                            ; loc_2C93E:
00015648                            Obj03_Init:
00015648 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001564C 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015652 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015658 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
0001565E                            ; loc_2C954:
0001565E                            Obj03_Main:
0001565E 45E8 0030                      lea    $30(a0),a2
00015662 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015666 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001566A 6100                           bsr.s    Obj03_Check
0001566C                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001566C                            ;    addq.w    #1,a2                          ;disabled
0001566C                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001566C                            ;    bsr.s    Obj03_Check         	;disabled
0001566C 4EF9 0000 0000             	jmp		bonu_chkdel
00015672                            ; ===========================================================================
00015672                            ; loc_2C972:
00015672                            Obj03_Check:
00015672 4A12                       		tst.b	(a2)
00015674 6700                       		beq.s	loc_2C9A0
00015676 0200 0070                  		andi.b	#btnABC,d0
0001567A 6700 0000                  		beq.w	Obj03_Check_End
0001567E 4238 F7C8                  		clr.b	f_lockmulti.w
00015682 4212                       		clr.b	(a2)
00015684 157C 0012 0002             		move.b	#$12,2(a2)
0001568A 0240 0F00                  		andi.w	#$F00,d0
0001568E 6700                       		beq.s	loc_2C954
00015690 157C 003C 0002             		move.b	#$3C,2(a2)
00015696                            	
00015696                            loc_2C954:
00015696 337C FD00 0012             		move.w	#-$300,y_vel(a1)
0001569C 6000 0000                  		bra.w	Obj03_Check_End
000156A0                            ; ===========================================================================
000156A0                            
000156A0                            loc_2C9A0:
000156A0 4A2A 0002                  		tst.b	2(a2)
000156A4 6700                       		beq.s	loc_2C972
000156A6 532A 0002                  		subq.b	#1,2(a2)
000156AA 6600 0000                  		bne.w	Obj03_Check_End
000156AE                            
000156AE                            loc_2C972:
000156AE 3029 0008                  		move.w	obX(a1),d0
000156B2 9068 0008                  		sub.w	obX(a0),d0
000156B6 0640 0018                  		addi.w	#$18,d0
000156BA 0C40 0030                  		cmpi.w	#$30,d0
000156BE 6400 0000                  		bhs.w	Obj03_Check_End
000156C2 3229 000C                  		move.w	obY(a1),d1
000156C6 9268 000C                  		sub.w	obY(a0),d1
000156CA 0C41 0010                  		cmpi.w	#$10,d1
000156CE 6400 0000                  		bhs.w	Obj03_Check_End
000156D2 4A38 F7C8                  		tst.b	f_lockmulti.w
000156D6 6B00                       		bmi.s	Obj03_Check_End
000156D8 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000156DE 6400                       		bhs.s	Obj03_Check_End
000156E0 4A78 FFFA                  		tst.w	(f_debugmode).w
000156E4 6600                       		bne.s	Obj03_Check_End
000156E6 4269 0010                  		clr.w	x_vel(a1)
000156EA 4269 0012                  		clr.w	y_vel(a1)
000156EE 4269 0020                  		clr.w	obInertia(a1)
000156F2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000156F8 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
000156FE 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015704 14BC 0001                  		move.b	#1,(a2)
00015708                            
00015708                            ; return_2CA08:
00015708                            Obj03_Check_End:
00015708 4E75                       		rts
00015708 4E75                       		rts
0001570A                            
0001570A                            ; ===========================================================================
0001570A                            ; ---------------------------------------------------------------------------
0001570A                            ; Modes	for controlling	Sonic
0001570A                            ; ---------------------------------------------------------------------------
0001570A                            
0001570A                            Sonic_MdNormal:
0001570A                            		;bsr.w	Sonic_Peelout
0001570A                            		;bsr.w	Sonic_SpinDash
0001570A 6100 0000                  		bsr.w	Sonic_Jump
0001570E 6100 0000                  		bsr.w	Sonic_SlopeResist
00015712 6100 0000                  		bsr.w	Sonic_Move
00015716 6100 0000                  		bsr.w	Sonic_Roll
0001571A 6100 0000                  		bsr.w	Sonic_LevelBound
0001571E 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
00015724 6100 0000                  		bsr.w	Sonic_AnglePos
00015728 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001572C 4E75                       		rts	
0001572E                            
0001572E                            ; ===========================================================================
0001572E                            
0001572E                            Sonic_MdJump:
0001572E 6100 0000                  		bsr.w   Sonic_AirRoll
00015732 6100 0000                  		bsr.w	Sonic_JumpHeight
00015736 6100 0000                  		bsr.w	Sonic_JumpDirection
0001573A 6100 0000                  		bsr.w	Sonic_LevelBound
0001573E 4EB9 0000 F6C0             		jsr	(ObjectFall).l
00015744 0828 0006 0022             		btst	#6,obStatus(a0)
0001574A 6700                       		beq.s	loc_12E5C
0001574C 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015752                            
00015752                            loc_12E5C:
00015752 6100 0000                  		bsr.w	Sonic_JumpAngle
00015756 6100 0000                  		bsr.w	Sonic_Floor
0001575A 4E75                       		rts	
0001575C                            ; ===========================================================================
0001575C                            
0001575C                            Sonic_MdRoll:
0001575C 6100 0000                  		bsr.w	Sonic_Jump
00015760 6100 0000                  		bsr.w	Sonic_RollRepel
00015764 6100 0000                  		bsr.w	Sonic_RollSpeed
00015768 6100 0000                  		bsr.w	Sonic_LevelBound
0001576C 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
00015772 6100 0000                  		bsr.w	Sonic_AnglePos
00015776 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001577A 4E75                       		rts	
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            Sonic_MdJump2:
0001577C 6100 0000                  		bsr.w	Sonic_JumpHeight
00015780 6100 0000                  		bsr.w	Sonic_JumpDirection
00015784 6100 0000                  		bsr.w	Sonic_LevelBound
00015788 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001578E 0828 0006 0022             		btst	#6,obStatus(a0)
00015794 6700                       		beq.s	loc_12EA6
00015796 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001579C                            
0001579C                            loc_12EA6:
0001579C 6100 0000                  		bsr.w	Sonic_JumpAngle
000157A0 6100 0000                  		bsr.w	Sonic_Floor
000157A4 4E75                       		rts	
000157A6                            
000157A6                            		include	"_incObj\Sonic Move.asm"
000157A6                            ; ---------------------------------------------------------------------------
000157A6                            ; Subroutine to	make Sonic walk/run
000157A6                            ; ---------------------------------------------------------------------------
000157A6                            
000157A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157A6                            
000157A6                            
000157A6                            Sonic_Move:
000157A6 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000157AA 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000157AE 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000157B2 4A38 F7CA                  		tst.b	(f_jumponly).w
000157B6 6600 0000                  		bne.w	loc_12FEE
000157BA 4A68 003E                  		tst.w	$3E(a0)
000157BE 6600 0000                  		bne.w	Sonic_ResetScr
000157C2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000157C8 6700                       		beq.s	@notleft	; if not, branch
000157CA 6100 0000                  		bsr.w	Sonic_MoveLeft
000157CE                            
000157CE                            	@notleft:
000157CE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000157D4 6700                       		beq.s	@notright	; if not, branch
000157D6 6100 0000                  		bsr.w	Sonic_MoveRight
000157DA                            
000157DA                            	@notright:
000157DA 1028 0026                  		move.b	obAngle(a0),d0
000157DE 0600 0020                  		addi.b	#$20,d0
000157E2 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000157E6 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000157EA 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000157EE 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000157F2 08A8 0005 0022             		bclr	#5,obStatus(a0)
000157F8 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000157FE 0828 0003 0022             		btst	#3,obStatus(a0)
00015804 6700                       		beq.s	Sonic_Balance
00015806 7000                       		moveq	#0,d0
00015808 1028 003D                  		move.b	$3D(a0),d0
0001580C ED48                       		lsl.w	#6,d0
0001580E 43F8 D000                  		lea	(v_objspace).w,a1
00015812 43F1 0000                  		lea	(a1,d0.w),a1
00015816 4A29 0022                  		tst.b	obStatus(a1)
0001581A 6B00                       		bmi.s	Sonic_LookUp
0001581C 7200                       		moveq	#0,d1
0001581E 1229 0014                  		move.b	obActWid(a1),d1
00015822 3401                       		move.w	d1,d2
00015824 D442                       		add.w	d2,d2
00015826 5942                       		subq.w	#4,d2
00015828 D268 0008                  		add.w	obX(a0),d1
0001582C 9269 0008                  		sub.w	obX(a1),d1
00015830 0C41 0004                  		cmpi.w	#4,d1
00015834 6D00                       		blt.s	loc_12F6A
00015836 B242                       		cmp.w	d2,d1
00015838 6C00                       		bge.s	loc_12F5A
0001583A 6000                       		bra.s	Sonic_LookUp
0001583C                            ; ===========================================================================
0001583C                            
0001583C                            Sonic_Balance:
0001583C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015842 0C41 000C                  		cmpi.w	#$C,d1
00015846 6D00                       		blt.s	Sonic_LookUp
00015848 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001584E 6600                       		bne.s	loc_12F62
00015850                            
00015850                            loc_12F5A:
00015850 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015856 6000                       		bra.s	loc_12F70
00015858                            ; ===========================================================================
00015858                            
00015858                            loc_12F62:
00015858 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001585E 6600                       		bne.s	Sonic_LookUp
00015860                            
00015860                            loc_12F6A:
00015860 08E8 0000 0022             		bset	#0,obStatus(a0)
00015866                            
00015866                            loc_12F70:
00015866 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001586C 6000                       		bra.s	Sonic_ResetScr
0001586E                            ; ===========================================================================
0001586E                            
0001586E                            Sonic_LookUp:
0001586E 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
00015874 6700                       		beq.s	Sonic_Duck	; if not, branch
00015876 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
0001587C 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
00015882 6700                       		beq.s	loc_12FC2
00015884 5478 F73E                  		addq.w	#2,(v_lookshift).w
00015888 6000                       		bra.s	loc_12FC2
0001588A                            ; ===========================================================================
0001588A                            
0001588A                            Sonic_Duck:
0001588A 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015890 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015892 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
00015898 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
0001589E 6700                       		beq.s	loc_12FC2
000158A0 5578 F73E                  		subq.w	#2,(v_lookshift).w
000158A4 6000                       		bra.s	loc_12FC2
000158A6                            ; ===========================================================================
000158A6                            
000158A6                            Sonic_ResetScr:
000158A6 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is screen in its default position?
000158AC 6700                       		beq.s	loc_12FC2	; if yes, branch
000158AE 6400                       		bcc.s	loc_12FBE
000158B0 5878 F73E                  		addq.w	#4,(v_lookshift).w ; move screen back to default
000158B4                            
000158B4                            loc_12FBE:
000158B4 5578 F73E                  		subq.w	#2,(v_lookshift).w ; move screen back to default
000158B8                            
000158B8                            loc_12FC2:
000158B8 1038 F602                  		move.b	(v_jpadhold2).w,d0
000158BC 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000158C0 6600                       		bne.s	loc_12FEE	; if yes, branch
000158C2 3028 0020                  		move.w	obInertia(a0),d0
000158C6 6700                       		beq.s	loc_12FEE
000158C8 6B00                       		bmi.s	loc_12FE2
000158CA 9045                       		sub.w	d5,d0
000158CC 6400                       		bcc.s	loc_12FDC
000158CE 303C 0000                  		move.w	#0,d0
000158D2                            
000158D2                            loc_12FDC:
000158D2 3140 0020                  		move.w	d0,obInertia(a0)
000158D6 6000                       		bra.s	loc_12FEE
000158D8                            ; ===========================================================================
000158D8                            
000158D8                            loc_12FE2:
000158D8 D045                       		add.w	d5,d0
000158DA 6400                       		bcc.s	loc_12FEA
000158DC 303C 0000                  		move.w	#0,d0
000158E0                            
000158E0                            loc_12FEA:
000158E0 3140 0020                  		move.w	d0,obInertia(a0)
000158E4                            
000158E4                            loc_12FEE:
000158E4 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000158E8 6600                       		bne.s	loc_1300C 	;Peelout
000158EA 1028 0026                  		move.b	obAngle(a0),d0
000158EE 4EB9 0000 3A32             		jsr	(CalcSine).l
000158F4 C3E8 0020                  		muls.w	obInertia(a0),d1
000158F8 E081                       		asr.l	#8,d1
000158FA 3141 0010                  		move.w	d1,obVelX(a0)
000158FE C1E8 0020                  		muls.w	obInertia(a0),d0
00015902 E080                       		asr.l	#8,d0
00015904 3140 0012                  		move.w	d0,obVelY(a0)
00015908                            
00015908                            loc_1300C:
00015908 1028 0026                  		move.b	obAngle(a0),d0
0001590C 0600 0040                  		addi.b	#$40,d0
00015910 6B00                       		bmi.s	locret_1307C
00015912 123C 0040                  		move.b	#$40,d1
00015916 4A68 0020                  		tst.w	obInertia(a0)
0001591A 6700                       		beq.s	locret_1307C
0001591C 6B00                       		bmi.s	loc_13024
0001591E 4441                       		neg.w	d1
00015920                            
00015920                            loc_13024:
00015920 1028 0026                  		move.b	obAngle(a0),d0
00015924 D001                       		add.b	d1,d0
00015926 3F00                       		move.w	d0,-(sp)
00015928 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001592C 301F                       		move.w	(sp)+,d0
0001592E 4A41                       		tst.w	d1
00015930 6A00                       		bpl.s	locret_1307C
00015932 E141                       		asl.w	#8,d1
00015934 0600 0020                  		addi.b	#$20,d0
00015938 0200 00C0                  		andi.b	#$C0,d0
0001593C 6700                       		beq.s	loc_13078
0001593E 0C00 0040                  		cmpi.b	#$40,d0
00015942 6700                       		beq.s	loc_13066
00015944 0C00 0080                  		cmpi.b	#$80,d0
00015948 6700                       		beq.s	loc_13060
0001594A D368 0010                  		add.w	d1,obVelX(a0)
0001594E 08E8 0005 0022             		bset	#5,obStatus(a0)
00015954 317C 0000 0020             		move.w	#0,obInertia(a0)
0001595A 4E75                       		rts	
0001595C                            ; ===========================================================================
0001595C                            
0001595C                            loc_13060:
0001595C 9368 0012                  		sub.w	d1,obVelY(a0)
00015960 4E75                       		rts	
00015962                            ; ===========================================================================
00015962                            
00015962                            loc_13066:
00015962 9368 0010                  		sub.w	d1,obVelX(a0)
00015966 08E8 0005 0022             		bset	#5,obStatus(a0)
0001596C 317C 0000 0020             		move.w	#0,obInertia(a0)
00015972 4E75                       		rts	
00015974                            ; ===========================================================================
00015974                            
00015974                            loc_13078:
00015974 D368 0012                  		add.w	d1,obVelY(a0)
00015978                            
00015978                            locret_1307C:
00015978 4E75                       		rts	
0001597A                            ; End of function Sonic_Move
0001597A                            
0001597A                            
0001597A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001597A                            
0001597A                            
0001597A                            Sonic_MoveLeft:
0001597A 3028 0020                  		move.w	obInertia(a0),d0
0001597E 6700                       		beq.s	loc_13086
00015980 6A00                       		bpl.s	loc_130B2
00015982                            
00015982                            loc_13086:
00015982 08E8 0000 0022             		bset	#0,$22(a0)
00015988 6600                       		bne.s	loc_1309A
0001598A 08A8 0005 0022             		bclr	#5,$22(a0)
00015990 117C 0001 001D             		move.b	#1,$1D(a0)
00015996                            
00015996                            loc_1309A:
00015996 9045                       		sub.w	d5,d0
00015998 3206                       		move.w	d6,d1
0001599A 4441                       		neg.w	d1
0001599C B041                       		cmp.w	d1,d0
0001599E 6E00                       		bgt.s	loc_130A6
000159A0 D045                       		add.w	d5,d0
000159A2 B041                       		cmp.w	d1,d0
000159A4 6F00                       		ble.s	loc_130A6
000159A6 3001                       		move.w	d1,d0
000159A8                            
000159A8                            loc_130A6:
000159A8 3140 0020                  		move.w	d0,obInertia(a0)
000159AC 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000159B2 4E75                       		rts
000159B4                            ; ===========================================================================
000159B4                            
000159B4                            loc_130B2:
000159B4 9044                       		sub.w	d4,d0
000159B6 6400                       		bcc.s	loc_130BA
000159B8 303C FF80                  		move.w	#-$80,d0
000159BC                            
000159BC                            loc_130BA:
000159BC 3140 0020                  		move.w	d0,obInertia(a0)
000159C0 1228 0026                  		move.b	obAngle(a0),d1
000159C4 0601 0020                  		addi.b	#$20,d1
000159C8 0201 00C0                  		andi.b	#$C0,d1
000159CC 6600                       		bne.s	locret_130E8
000159CE 0C40 0400                  		cmpi.w	#$400,d0
000159D2 6D00                       		blt.s	locret_130E8
000159D4 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000159DA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000159EA                            		
000159EA                            locret_130E8:
000159EA 4E75                       		rts	
000159EC                            ; End of function Sonic_MoveLeft
000159EC                            
000159EC                            
000159EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159EC                            
000159EC                            
000159EC                            Sonic_MoveRight:
000159EC 3028 0020                  		move.w	obInertia(a0),d0
000159F0 6B00                       		bmi.s	loc_13118
000159F2 08A8 0000 0022             		bclr	#0,$22(a0)
000159F8 6700                       		beq.s	loc_13104
000159FA 08A8 0005 0022             		bclr	#5,$22(a0)
00015A00 117C 0001 001D             		move.b	#1,$1D(a0)
00015A06                            
00015A06                            loc_13104:
00015A06 D045                       		add.w	d5,d0
00015A08 B046                       		cmp.w	d6,d0
00015A0A 6D00                       		blt.s	loc_1310C
00015A0C 9045                       		sub.w	d5,d0
00015A0E B046                       		cmp.w	d6,d0
00015A10 6C00                       		bge.s	loc_1310C
00015A12 3006                       		move.w	d6,d0
00015A14                            
00015A14                            loc_1310C:
00015A14 3140 0020                  		move.w	d0,obInertia(a0)
00015A18 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015A1E 4E75                       		rts
00015A20                            ; ===========================================================================
00015A20                            
00015A20                            loc_13118:
00015A20 D044                       		add.w	d4,d0
00015A22 6400                       		bcc.s	loc_13120
00015A24 303C 0080                  		move.w	#$80,d0
00015A28                            
00015A28                            loc_13120:
00015A28 3140 0020                  		move.w	d0,obInertia(a0)
00015A2C 1228 0026                  		move.b	obAngle(a0),d1
00015A30 0601 0020                  		addi.b	#$20,d1
00015A34 0201 00C0                  		andi.b	#$C0,d1
00015A38 6600                       		bne.s	locret_1314E
00015A3A 0C40 FC00                  		cmpi.w	#-$400,d0
00015A3E 6E00                       		bgt.s	locret_1314E
00015A40 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A46 08E8 0000 0022             		bset	#0,obStatus(a0)
00015A56                            		
00015A56                            locret_1314E:
00015A56 4E75                       		rts	
00015A58                            ; End of function Sonic_MoveRight
00015A58                            ; End of function Sonic_MoveRight
00015A58                            		include	"_incObj\Sonic RollSpeed.asm"
00015A58                            ; ---------------------------------------------------------------------------
00015A58                            ; Subroutine to	change Sonic's speed as he rolls
00015A58                            ; ---------------------------------------------------------------------------
00015A58                            
00015A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A58                            
00015A58                            
00015A58                            Sonic_RollSpeed:
00015A58 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015A5C E346                       		asl.w	#1,d6
00015A5E 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015A62 E245                       		asr.w	#1,d5
00015A64 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015A68 E444                       		asr.w	#2,d4
00015A6A 4A38 F7CA                  		tst.b	(f_jumponly).w
00015A6E 6600 0000                  		bne.w	loc_131CC
00015A72 4A68 003E                  		tst.w	$3E(a0)
00015A76 6600                       		bne.s	@notright
00015A78 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015A7E 6700                       		beq.s	@notleft	; if not, branch
00015A80 6100 0000                  		bsr.w	Sonic_RollLeft
00015A84                            
00015A84                            	@notleft:
00015A84 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015A8A 6700                       		beq.s	@notright	; if not, branch
00015A8C 6100 0000                  		bsr.w	Sonic_RollRight
00015A90                            
00015A90                            	@notright:
00015A90 3028 0020                  		move.w	obInertia(a0),d0
00015A94 6700                       		beq.s	loc_131AA
00015A96 6B00                       		bmi.s	loc_1319E
00015A98 9045                       		sub.w	d5,d0
00015A9A 6400                       		bcc.s	loc_13198
00015A9C 303C 0000                  		move.w	#0,d0
00015AA0                            
00015AA0                            loc_13198:
00015AA0 3140 0020                  		move.w	d0,obInertia(a0)
00015AA4 6000                       		bra.s	loc_131AA
00015AA6                            ; ===========================================================================
00015AA6                            
00015AA6                            loc_1319E:
00015AA6 D045                       		add.w	d5,d0
00015AA8 6400                       		bcc.s	loc_131A6
00015AAA 303C 0000                  		move.w	#0,d0
00015AAE                            
00015AAE                            loc_131A6:
00015AAE 3140 0020                  		move.w	d0,obInertia(a0)
00015AB2                            
00015AB2                            loc_131AA:
00015AB2 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015AB6 6600                       		bne.s	loc_131CC	; if yes, branch
00015AB8 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015ABE 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015AC4 117C 0009 0017             		move.b	#9,obWidth(a0)
00015ACA 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015AD0 5B68 000C                  		subq.w	#5,obY(a0)
00015AD4                            
00015AD4                            loc_131CC:
00015AD4 1028 0026                  		move.b	obAngle(a0),d0
00015AD8 4EB9 0000 3A32             		jsr	(CalcSine).l
00015ADE C1E8 0020                  		muls.w	obInertia(a0),d0
00015AE2 E080                       		asr.l	#8,d0
00015AE4 3140 0012                  		move.w	d0,obVelY(a0)
00015AE8 C3E8 0020                  		muls.w	obInertia(a0),d1
00015AEC E081                       		asr.l	#8,d1
00015AEE 0C41 1000                  		cmpi.w	#$1000,d1
00015AF2 6F00                       		ble.s	loc_131F0
00015AF4 323C 1000                  		move.w	#$1000,d1
00015AF8                            
00015AF8                            loc_131F0:
00015AF8 0C41 F000                  		cmpi.w	#-$1000,d1
00015AFC 6C00                       		bge.s	loc_131FA
00015AFE 323C F000                  		move.w	#-$1000,d1
00015B02                            
00015B02                            loc_131FA:
00015B02 3141 0010                  		move.w	d1,obVelX(a0)
00015B06 6000 FE00                  		bra.w	loc_1300C
00015B0A                            ; End of function Sonic_RollSpeed
00015B0A                            
00015B0A                            
00015B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B0A                            
00015B0A                            
00015B0A                            Sonic_RollLeft:
00015B0A 3028 0020                  		move.w	obInertia(a0),d0
00015B0E 6700                       		beq.s	loc_1320A
00015B10 6A00                       		bpl.s	loc_13218
00015B12                            
00015B12                            loc_1320A:
00015B12 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B18 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B1E 4E75                       		rts	
00015B20                            ; ===========================================================================
00015B20                            
00015B20                            loc_13218:
00015B20 9044                       		sub.w	d4,d0
00015B22 6400                       		bcc.s	loc_13220
00015B24 303C FF80                  		move.w	#-$80,d0
00015B28                            
00015B28                            loc_13220:
00015B28 3140 0020                  		move.w	d0,obInertia(a0)
00015B2C 4E75                       		rts	
00015B2E                            ; End of function Sonic_RollLeft
00015B2E                            
00015B2E                            
00015B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B2E                            
00015B2E                            
00015B2E                            Sonic_RollRight:
00015B2E 3028 0020                  		move.w	obInertia(a0),d0
00015B32 6B00                       		bmi.s	loc_1323A
00015B34 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015B3A 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B40 4E75                       		rts	
00015B42                            ; ===========================================================================
00015B42                            
00015B42                            loc_1323A:
00015B42 D044                       		add.w	d4,d0
00015B44 6400                       		bcc.s	loc_13242
00015B46 303C 0080                  		move.w	#$80,d0
00015B4A                            
00015B4A                            loc_13242:
00015B4A 3140 0020                  		move.w	d0,obInertia(a0)
00015B4E 4E75                       		rts	
00015B50                            ; End of function Sonic_RollRight
00015B50                            ; End of function Sonic_RollRight
00015B50                            		include	"_incObj\Sonic JumpDirection.asm"
00015B50                            ; ---------------------------------------------------------------------------
00015B50                            ; Subroutine to	change Sonic's direction while jumping
00015B50                            ; ---------------------------------------------------------------------------
00015B50                            
00015B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B50                            
00015B50                            
00015B50                            Sonic_JumpDirection:
00015B50 3C38 F760                  		move.w	($FFFFF760).w,d6
00015B54 3A38 F762                  		move.w	($FFFFF762).w,d5
00015B58 E345                       		asl.w	#1,d5
00015B5A 3028 0010                  		move.w	$10(a0),d0	
00015B5E 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015B64 6700                       		beq.s	loc_13278; if not, branch	
00015B66 08E8 0000 0022             		bset	#0,$22(a0)	
00015B6C 9045                       		sub.w	d5,d0	
00015B6E 3206                       		move.w	d6,d1	
00015B70 4441                       		neg.w	d1	
00015B72 B041                       		cmp.w	d1,d0	
00015B74 6E00                       		bgt.s	loc_13278	
00015B76 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015B78 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015B7A 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015B7C 3001                       		move.w	d1,d0
00015B7E                            
00015B7E                            loc_13278:
00015B7E 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015B84 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015B86 08A8 0000 0022             		bclr	#0,$22(a0)	
00015B8C D045                       		add.w	d5,d0	
00015B8E B046                       		cmp.w	d6,d0	
00015B90 6D00                       		blt.s	Obj01_JumpMove
00015B92 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015B94 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015B96 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015B98 3006                       		move.w	d6,d0
00015B9A                            
00015B9A                            Obj01_JumpMove:
00015B9A 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015B9E                            
00015B9E                            Obj01_ResetScr2:
00015B9E 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015BA4 6700                       		beq.s	loc_132A4	; if yes, branch
00015BA6 6400                       		bcc.s	loc_132A0
00015BA8 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015BAC                            
00015BAC                            loc_132A0:
00015BAC 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015BB0                            
00015BB0                            loc_132A4:
00015BB0 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015BB6 6500                       		bcs.s	locret_132D2	; if yes, branch
00015BB8 3028 0010                  		move.w	obVelX(a0),d0
00015BBC 3200                       		move.w	d0,d1
00015BBE EA41                       		asr.w	#5,d1
00015BC0 6700                       		beq.s	locret_132D2
00015BC2 6B00                       		bmi.s	loc_132C6
00015BC4 9041                       		sub.w	d1,d0
00015BC6 6400                       		bcc.s	loc_132C0
00015BC8 303C 0000                  		move.w	#0,d0
00015BCC                            
00015BCC                            loc_132C0:
00015BCC 3140 0010                  		move.w	d0,obVelX(a0)
00015BD0 4E75                       		rts	
00015BD2                            ; ===========================================================================
00015BD2                            
00015BD2                            loc_132C6:
00015BD2 9041                       		sub.w	d1,d0
00015BD4 6500                       		bcs.s	loc_132CE
00015BD6 303C 0000                  		move.w	#0,d0
00015BDA                            
00015BDA                            loc_132CE:
00015BDA 3140 0010                  		move.w	d0,obVelX(a0)
00015BDE                            
00015BDE                            locret_132D2:
00015BDE 4E75                       		rts	
00015BE0                            ; End of function Sonic_JumpDirection
00015BE0                            ; End of function Sonic_JumpDirection
00015BE0                            		include "_incObj\Sonic Peelout.asm"
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            ; Subroutine to make Sonic perform a peelout
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BE0                            
00015BE0                            Sonic_Peelout:
00015BE0 0828 0001 0039             		btst	#1,$39(a0)
00015BE6 6600                       		bne.s	SCDPeelout_Launch
00015BE8 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015BEE 6600                       		bne.s	@return
00015BF0 1038 F603                  		move.b	($FFFFF603).w,d0
00015BF4 0200 0070                  		andi.b	#%01110000,d0
00015BF8 6700 0000                  		beq.w	@return
00015BFC 117C 0001 001C             		move.b	#1,$1C(a0)
00015C02 317C 0000 003A             		move.w	#0,$3A(a0)
00015C08 303C 00A2                  		move.w	#$A2,d0
00015C0C 4EB9 0000 1250             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015C12                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015C12 588F                       		addq.l	#4,sp
00015C14 08E8 0001 0039             		bset	#1,$39(a0)
00015C1A                            		
00015C1A 4268 0014                  		clr.w	$14(a0)
00015C1E                             
00015C1E 6100 0000                  		bsr.w	Sonic_LevelBound
00015C22 6100 0000                  		bsr.w	Sonic_AnglePos
00015C26                             
00015C26                            	@return:
00015C26 4E75                       		rts	
00015C28                            ; ---------------------------------------------------------------------------
00015C28                             
00015C28                            SCDPeelout_Launch:
00015C28 0828 0001 0039             		btst	#1,$39(a0)
00015C2E 1038 F602                  		move.b	($FFFFF602).w,d0
00015C32 0800 0000                  		btst	#0,d0
00015C36 6600 0000                  		bne.w	SCDPeelout_Charge
00015C3A 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015C40 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015C46 6600                       		bne.s	SCDPeelout_Stop_Sound
00015C48 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015C4E 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015C54 3028 0014                  		move.w	$14(a0),d0
00015C58 0440 0800                  		subi.w	#$800,d0
00015C5C D040                       		add.w	d0,d0
00015C5E 0240 1F00                  		andi.w	#$1F00,d0
00015C62 4440                       		neg.w	d0
00015C64 0640 2000                  		addi.w	#$2000,d0
00015C68                            		;move.w	d0,(v_cameralag).w
00015C68 0828 0000 0022             		btst	#0,$22(a0)
00015C6E 6700                       		beq.s	@dontflip
00015C70 4468 0014                  		neg.w	$14(a0)
00015C74                             
00015C74                            @dontflip:
00015C74 08A8 0007 0022             		bclr	#7,$22(a0)
00015C7A 303C 00AB                  		move.w	#$AB,d0
00015C7E 4EB9 0000 1250             		jsr	(PlaySound_Special).l
00015C84                            	;	sfx 	sfx_PeeloutRelease
00015C84 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015C88                            ; ---------------------------------------------------------------------------
00015C88                             
00015C88                            SCDPeelout_Charge:				; If still charging the dash...
00015C88 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015C8C 3401                       		move.w	d1,d2
00015C8E D241                       		add.w	d1,d1
00015C90 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015C94 6700                       		beq.s	@noshoes
00015C96 E242                       		asr.w	#1,d2
00015C98 9242                       		sub.w	d2,d1
00015C9A                            
00015C9A                            @noshoes:
00015C9A 0668 0064 0014             		addi.w	#$64,$14(a0)		; increment speed
00015CA0 B268 0014                  		cmp.w	$14(a0),d1
00015CA4 6E00                       		bgt.s	@inctimer
00015CA6 3141 0014                  		move.w	d1,$14(a0)
00015CAA                            
00015CAA                            @inctimer:
00015CAA 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015CAE 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015CB4 6500                       		bcs.s	SCDPeelout_ResetScr
00015CB6 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015CBC 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015CC2                            		
00015CC2                            SCDPeelout_Stop_Sound:
00015CC2 303C 00AB                  		move.w	#$AB,d0
00015CC6 4EB9 0000 1250             		jsr		(PlaySound_Special).l
00015CCC                            	;	sfx 	sfx_PeeloutStop
00015CCC 4268 0014                  		clr.w	$14(a0)
00015CD0                            
00015CD0                            SCDPeelout_ResetScr:
00015CD0 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015CD2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015CD8 6700                       		beq.s	@finish
00015CDA 6400                       		bcc.s	@skip
00015CDC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015CE0                             
00015CE0                            	@skip:
00015CE0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015CE4                             
00015CE4                            	@finish:
00015CE4 6100 0000                  		bsr.w	Sonic_LevelBound
00015CE8 6100 0000                  		bsr.w	Sonic_AnglePos
00015CEC 4E75                       		rts
00015CEE                            		
00015CEE                            		
00015CEE                            		include "_incObj\Sonic Spindash.asm"
00015CEE                            ; ---------------------------------------------------------------------------
00015CEE                            ; Subroutine to make Sonic perform a spindash
00015CEE                            ; ---------------------------------------------------------------------------
00015CEE                             
00015CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CEE                             
00015CEE                             
00015CEE                            Sonic_SpinDash:
00015CEE 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015CF2 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015CF4 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015CFA 6600                       		bne.s	locret2_1AC8C		; if not, return
00015CFC 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D00 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015D04 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015D08 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015D0E 303C 00A5                  		move.w	#$A5,d0			; spin sound ($E0 in s2)
00015D12 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play spin sound
00015D18 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015D1A 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015D20 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015D26                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015D26                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015D26 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015D2C                            						; the smoke/dust object
00015D2C                            loc2_1AC84:
00015D2C 6100 0000                  		bsr.w	Sonic_LevelBound
00015D30 6100 0000                  		bsr.w	Sonic_AnglePos
00015D34                            
00015D34                            locret2_1AC8C:
00015D34 4E75                       		rts	
00015D36                            ; ---------------------------------------------------------------------------
00015D36                            
00015D36                            loc2_1AC8E:	
00015D36 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015D3C 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015D40 0800 0001                  		btst	#1,d0			; check down button
00015D44 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015D48 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015D4E 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015D54 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015D5A 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015D5E 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015D64 7000                       		moveq	#0,d0
00015D66 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015D6A D040                       		add.w	d0,d0			; double it
00015D6C 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015D72 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015D76 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015D7A D040                       		add.w	d0,d0			; double it
00015D7C 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015D80 4440                       		neg.w	d0			; negate it
00015D82 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015D86 31C0 EED0                  		move.w	d0,($FFFFEED0).w	; move to $EED0
00015D8A 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015D90 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015D92 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015D96                            
00015D96                            loc2_1ACF4:
00015D96 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015D9C 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015DA2 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015DA6 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play it!
00015DAC 6000                       		bra.s	loc2_1AD78
00015DAE                            ; ===========================================================================
00015DAE                            Dash_Speeds:
00015DAE 0600                       		dc.w  $600		; 0
00015DB0 0680                       		dc.w  $680		; 1
00015DB2 0700                       		dc.w  $700		; 2
00015DB4 0780                       		dc.w  $780		; 3
00015DB6 0800                       		dc.w  $800		; 4
00015DB8 0880                       		dc.w  $880		; 5
00015DBA 0900                       		dc.w  $900		; 6
00015DBC 0980                       		dc.w  $980		; 7
00015DBE 0A00                       		dc.w  $A00		; 8
00015DC0                            ; ===========================================================================
00015DC0                            
00015DC0                            loc2_1AD30:				; If still charging the dash...
00015DC0 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015DC4 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015DC6 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015DCA EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015DCC 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015DD0 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015DD2 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015DD8                            
00015DD8                            loc2_1AD48:
00015DD8 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015DDC 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015DE0 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015DE4 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015DEA 303C 00A5                  		move.w	#$A5,d0			; was $E0 in sonic 2
00015DEE 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015DF4 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play charge sound
00015DFA 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015E00 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015E06 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015E08 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015E0E                            
00015E0E                            loc2_1AD78:
00015E0E 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015E10 0C78 0060 EED8             		cmpi.w	#$60,($FFFFEED8).w	; $EED8 only ever seems
00015E16 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015E18 6400                       		bcc.s	loc2_1AD88
00015E1A 5878 EED8                  		addq.w	#4,($FFFFEED8).w
00015E1E                            
00015E1E                            loc2_1AD88:
00015E1E 5578 EED8                  		subq.w	#2,($FFFFEED8).w
00015E22                            
00015E22                            loc2_1AD8C:
00015E22 6100 0000                  		bsr.w	Sonic_LevelBound
00015E26 6100 0000                  		bsr.w	Sonic_AnglePos
00015E2A 31FC 0060 F73E             		move.w	#$60,(v_lookshift).w	; reset looking up/down
00015E30 4E75                       		rts
00015E32                            ; End of subroutine Sonic_SpinDash
00015E32                            ; End of subroutine Sonic_SpinDash
00015E32                            
00015E32                            Sonic_AirRoll:
00015E32 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015E38 6600                               bne.s   AirRoll_Return   ; if not, return
00015E3A                            
00015E3A                            AirRoll_CheckBtn:
00015E3A 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015E3E 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015E42 6700                               beq.s	AirRoll_Return
00015E44 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015E4A                                   ; move.w	#$BC,d0
00015E4A                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015E4A                            
00015E4A                            AirRoll_Return:
00015E4A 4E75                               rts
00015E4C                            ; ===========================================================================
00015E4C                            ; ---------------------------------------------------------------------------
00015E4C                            ; Unused subroutine to squash Sonic
00015E4C                            ; ---------------------------------------------------------------------------
00015E4C 1028 0026                  		move.b	obAngle(a0),d0
00015E50 0600 0020                  		addi.b	#$20,d0
00015E54 0200 00C0                  		andi.b	#$C0,d0
00015E58 6600                       		bne.s	locret_13302
00015E5A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015E5E 4A41                       		tst.w	d1
00015E60 6A00                       		bpl.s	locret_13302
00015E62 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015E68 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E6E 317C 0000 0012             		move.w	#0,obVelY(a0)
00015E74 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015E7A                            
00015E7A                            locret_13302:
00015E7A 4E75                       		rts		
00015E7C                            		include	"_incObj\Sonic LevelBound.asm"
00015E7C                            ; ---------------------------------------------------------------------------
00015E7C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015E7C                            ; ---------------------------------------------------------------------------
00015E7C                            
00015E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E7C                            
00015E7C                            
00015E7C                            Sonic_LevelBound:
00015E7C 2228 0008                  		move.l	obX(a0),d1
00015E80 3028 0010                  		move.w	obVelX(a0),d0
00015E84 48C0                       		ext.l	d0
00015E86 E180                       		asl.l	#8,d0
00015E88 D280                       		add.l	d0,d1
00015E8A 4841                       		swap	d1
00015E8C 3038 F728                  		move.w	(v_limitleft2).w,d0
00015E90 0640 0010                  		addi.w	#$10,d0
00015E94 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015E96 6200                       		bhi.s	@sides		; if yes, branch
00015E98 3038 F72A                  		move.w	(v_limitright2).w,d0
00015E9C 0640 0128                  		addi.w	#$128,d0
00015EA0 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015EA4 6600                       		bne.s	@screenlocked
00015EA6 0640 0040                  		addi.w	#$40,d0
00015EAA                            
00015EAA                            	@screenlocked:
00015EAA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015EAC 6300                       		bls.s	@sides		; if yes, branch
00015EAE                            
00015EAE                            	@chkbottom:
00015EAE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015EB2 0640 00E0                  		addi.w	#$E0,d0
00015EB6 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015EBA 6D00                       		blt.s	@bottom		; if yes, branch
00015EBC 4E75                       		rts	
00015EBE                            ; ===========================================================================
00015EBE                            
00015EBE                            @bottom:
00015EBE 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015EC2 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015EC6 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015EC8 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015ECA 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015ED0 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015ED4 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015EDA 6500 0000                  		bcs.w	Kill_transport
00015EDE 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015EE2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015EE8 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015EEE 4E75                       		rts	
00015EF0                            @dontkill: 
00015EF0 4E75                       		rts
00015EF2                            ; ===========================================================================
00015EF2                            
00015EF2                            @sides:
00015EF2 3140 0008                  		move.w	d0,obX(a0)
00015EF6 317C 0000 000A             		move.w	#0,obX+2(a0)
00015EFC 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015F02 317C 0000 0020             		move.w	#0,obInertia(a0)
00015F08 60A4                       		bra.s	@chkbottom
00015F0A                            
00015F0A                            Kill_transport: 
00015F0A 4EF9 0000 0000                     	jmp        (KillSonic).l
00015F10                            
00015F10                            ; End of function Sonic_LevelBound
00015F10                            ; End of function Sonic_LevelBound
00015F10                            		include	"_incObj\Sonic Roll.asm"
00015F10                            ; ---------------------------------------------------------------------------
00015F10                            ; Subroutine allowing Sonic to roll when he's moving
00015F10                            ; ---------------------------------------------------------------------------
00015F10                            
00015F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F10                            
00015F10                            
00015F10                            Sonic_Roll:
00015F10 4A38 F7CA                  		tst.b	(f_jumponly).w
00015F14 6600                       		bne.s	@noroll
00015F16 3028 0020                  		move.w	obInertia(a0),d0
00015F1A 6A00                       		bpl.s	@ispositive
00015F1C 4440                       		neg.w	d0
00015F1E                            
00015F1E                            	@ispositive:
00015F1E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015F22 6500                       		bcs.s	@noroll		; if not, branch
00015F24 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015F28 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015F2C 6600                       		bne.s	@noroll		; if yes, branch
00015F2E 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015F34 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015F36                            
00015F36                            	@noroll:
00015F36 4E75                       		rts	
00015F38                            ; ===========================================================================
00015F38                            
00015F38                            Sonic_ChkRoll:
00015F38 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015F3E 6700                       		beq.s	@roll		; if not, branch
00015F40 4E75                       		rts	
00015F42                            ; ===========================================================================
00015F42                            
00015F42                            @roll:
00015F42 08E8 0002 0022             		bset	#2,obStatus(a0)
00015F48 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015F4E 117C 0007 0017             		move.b	#7,obWidth(a0)
00015F54 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015F5A 5A68 000C                  		addq.w	#5,obY(a0)
00015F68 4A68 0020                  		tst.w	obInertia(a0)
00015F6C 6600                       		bne.s	@ismoving
00015F6E 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015F74                            
00015F74                            	@ismoving:
00015F74 4E75                       		rts	
00015F76                            ; End of function Sonic_Roll
00015F76                            ; End of function Sonic_Roll
00015F76                            		include	"_incObj\Sonic Jump.asm"
00015F76                            ; ---------------------------------------------------------------------------
00015F76                            ; Subroutine allowing Sonic to jump
00015F76                            ; ---------------------------------------------------------------------------
00015F76                            
00015F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F76                            
00015F76                            
00015F76                            Sonic_Jump:
00015F76 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015F7A 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015F7E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015F82 7000                       		moveq	#0,d0
00015F84 1028 0026                  		move.b	obAngle(a0),d0
00015F88 0600 0080                  		addi.b	#$80,d0
00015F8C 6100 0000                  		bsr.w	sub_14D48
00015F90 0C41 0006                  		cmpi.w	#6,d1
00015F94 6D00 0000                  		blt.w	locret_1348E
00015F98 343C 0680                  		move.w	#$680,d2
00015F9C 0828 0006 0022             		btst	#6,obStatus(a0)
00015FA2 6700                       		beq.s	loc_1341C
00015FA4 343C 0380                  		move.w	#$380,d2
00015FA8                            
00015FA8                            loc_1341C:
00015FA8 7000                       		moveq	#0,d0
00015FAA 1028 0026                  		move.b	obAngle(a0),d0
00015FAE 0400 0040                  		subi.b	#$40,d0
00015FB2 4EB9 0000 3A32             		jsr	(CalcSine).l
00015FB8 C3C2                       		muls.w	d2,d1
00015FBA E081                       		asr.l	#8,d1
00015FBC D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015FC0 C1C2                       		muls.w	d2,d0
00015FC2 E080                       		asr.l	#8,d0
00015FC4 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015FC8 08E8 0001 0022             		bset	#1,obStatus(a0)
00015FCE 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015FD4 588F                       		addq.l	#4,sp
00015FD6 117C 0001 003C             		move.b	#1,$3C(a0)
00015FDC 4228 0038                  		clr.b	$38(a0)
00015FEA 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015FF0 117C 0009 0017             		move.b	#9,obWidth(a0)
00015FF6 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015FFC 117C 0007 0017             		move.b	#7,obWidth(a0)
00016002                            Result_Check:
00016002 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00016006 6700                       		beq.s   NormalJump ; If not, branch
00016008 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
0001600E 6000                       		bra.s   cont ; Continue
00016010                            NormalJump:
00016010 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00016016                            cont:
00016016 08E8 0002 0022             		bset	#2,obStatus(a0)
0001601C 5A68 000C                  		addq.w	#5,obY(a0)
00016020                            
00016020                            locret_1348E:
00016020 4E75                       		rts	
00016022                            ; ===========================================================================
00016022                            
00016022                            ; End of function Sonic_Jump
00016022                            ; End of function Sonic_Jump
00016022                            		include	"_incObj\Sonic JumpHeight.asm"
00016022                            ; ---------------------------------------------------------------------------
00016022                            ; Subroutine controlling Sonic's jump height/duration
00016022                            ; ---------------------------------------------------------------------------
00016022                            
00016022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016022                            
00016022                            
00016022                            Sonic_JumpHeight:
00016022 4A28 003C                  		tst.b	$3C(a0)
00016026 6700                       		beq.s	loc_134C4
00016028 323C FC00                  		move.w	#-$400,d1
0001602C 0828 0006 0022             		btst	#6,obStatus(a0)
00016032 6700                       		beq.s	loc_134AE
00016034 323C FE00                  		move.w	#-$200,d1
00016038                            
00016038                            loc_134AE:
00016038 B268 0012                  		cmp.w	obVelY(a0),d1
0001603C 6F00                       		ble.s	locret_134C2
0001603E 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016042 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016046 6600                       		bne.s	locret_134C2	; if yes, branch
00016048 3141 0012                  		move.w	d1,obVelY(a0)
0001604C                            
0001604C                            locret_134C2:
0001604C 4E75                       		rts	
0001604E                            ; ===========================================================================
0001604E                            
0001604E                            loc_134C4:
0001604E 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00016054 6C00                       		bge.s	locret_134D2
00016056 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
0001605C                            
0001605C                            locret_134D2:
0001605C 4E75                       		rts	
0001605E                            ; End of function Sonic_JumpHeight
0001605E                            ; End of function Sonic_JumpHeight
0001605E                            		include	"_incObj\Sonic SlopeResist.asm"
0001605E                            ; ---------------------------------------------------------------------------
0001605E                            ; Subroutine to	slow Sonic walking up a	slope
0001605E                            ; ---------------------------------------------------------------------------
0001605E                            
0001605E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001605E                            
0001605E                            
0001605E                            Sonic_SlopeResist:
0001605E 1028 0026                  		move.b	obAngle(a0),d0
00016062 0600 0060                  		addi.b	#$60,d0
00016066 0C00 00C0                  		cmpi.b	#$C0,d0
0001606A 6400                       		bcc.s	locret_13508
0001606C 1028 0026                  		move.b	obAngle(a0),d0
00016070 4EB9 0000 3A32             		jsr	(CalcSine).l
00016076 C1FC 0020                  		muls.w	#$20,d0
0001607A E080                       		asr.l	#8,d0
0001607C 4A68 0020                  		tst.w	obInertia(a0)
00016080 6700                       		beq.s	locret_13508
00016082 6B00                       		bmi.s	loc_13504
00016084 4A40                       		tst.w	d0
00016086 6700                       		beq.s	locret_13502
00016088 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
0001608C                            
0001608C                            locret_13502:
0001608C 4E75                       		rts	
0001608E                            ; ===========================================================================
0001608E                            
0001608E                            loc_13504:
0001608E D168 0020                  		add.w	d0,obInertia(a0)
00016092                            
00016092                            locret_13508:
00016092 4E75                       		rts	
00016094                            ; End of function Sonic_SlopeResist
00016094                            ; End of function Sonic_SlopeResist
00016094                            		include	"_incObj\Sonic RollRepel.asm"
00016094                            ; ---------------------------------------------------------------------------
00016094                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016094                            ; ---------------------------------------------------------------------------
00016094                            
00016094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016094                            
00016094                            
00016094                            Sonic_RollRepel:
00016094 1028 0026                  		move.b	obAngle(a0),d0
00016098 0600 0060                  		addi.b	#$60,d0
0001609C 0C00 00C0                  		cmpi.b	#-$40,d0
000160A0 6400                       		bcc.s	locret_13544
000160A2 1028 0026                  		move.b	obAngle(a0),d0
000160A6 4EB9 0000 3A32             		jsr	(CalcSine).l
000160AC C1FC 0050                  		muls.w	#$50,d0
000160B0 E080                       		asr.l	#8,d0
000160B2 4A68 0020                  		tst.w	obInertia(a0)
000160B6 6B00                       		bmi.s	loc_1353A
000160B8 4A40                       		tst.w	d0
000160BA 6A00                       		bpl.s	loc_13534
000160BC E480                       		asr.l	#2,d0
000160BE                            
000160BE                            loc_13534:
000160BE D168 0020                  		add.w	d0,obInertia(a0)
000160C2 4E75                       		rts	
000160C4                            ; ===========================================================================
000160C4                            
000160C4                            loc_1353A:
000160C4 4A40                       		tst.w	d0
000160C6 6B00                       		bmi.s	loc_13540
000160C8 E480                       		asr.l	#2,d0
000160CA                            
000160CA                            loc_13540:
000160CA D168 0020                  		add.w	d0,obInertia(a0)
000160CE                            
000160CE                            locret_13544:
000160CE 4E75                       		rts	
000160D0                            ; End of function Sonic_RollRepel
000160D0                            ; End of function Sonic_RollRepel
000160D0                            		include	"_incObj\Sonic SlopeRepel.asm"
000160D0                            ; ---------------------------------------------------------------------------
000160D0                            ; Subroutine to	push Sonic down	a slope
000160D0                            ; ---------------------------------------------------------------------------
000160D0                            
000160D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160D0                            
000160D0                            
000160D0                            Sonic_SlopeRepel:
000160D0 4E71                       		nop	
000160D2 4A28 0038                  		tst.b	$38(a0)
000160D6 6600                       		bne.s	locret_13580
000160D8 4A68 003E                  		tst.w	$3E(a0)
000160DC 6600                       		bne.s	loc_13582
000160DE 1028 0026                  		move.b	obAngle(a0),d0
000160E2 0600 0020                  		addi.b	#$20,d0
000160E6 0200 00C0                  		andi.b	#$C0,d0
000160EA 6700                       		beq.s	locret_13580
000160EC 3028 0020                  		move.w	obInertia(a0),d0
000160F0 6A00                       		bpl.s	loc_1356A
000160F2 4440                       		neg.w	d0
000160F4                            
000160F4                            loc_1356A:
000160F4 0C40 0280                  		cmpi.w	#$280,d0
000160F8 6400                       		bcc.s	locret_13580
000160FA 4268 0020                  		clr.w	obInertia(a0)
000160FE 08E8 0001 0022             		bset	#1,obStatus(a0)
00016104 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001610A                            
0001610A                            locret_13580:
0001610A 4E75                       		rts	
0001610C                            ; ===========================================================================
0001610C                            
0001610C                            loc_13582:
0001610C 5368 003E                  		subq.w	#1,$3E(a0)
00016110 4E75                       		rts	
00016112                            ; End of function Sonic_SlopeRepel
00016112                            ; End of function Sonic_SlopeRepel
00016112                            		include	"_incObj\Sonic JumpAngle.asm"
00016112                            ; ---------------------------------------------------------------------------
00016112                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00016112                            ; ---------------------------------------------------------------------------
00016112                            
00016112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016112                            
00016112                            
00016112                            Sonic_JumpAngle:
00016112 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016116 6700                       		beq.s	locret_135A2	; if already 0,	branch
00016118 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001611A                            
0001611A 5400                       		addq.b	#2,d0		; increase angle
0001611C 6400                       		bcc.s	loc_13596
0001611E 7000                       		moveq	#0,d0
00016120                            
00016120                            loc_13596:
00016120 6000                       		bra.s	loc_1359E
00016122                            ; ===========================================================================
00016122                            
00016122                            loc_13598:
00016122 5500                       		subq.b	#2,d0		; decrease angle
00016124 6400                       		bcc.s	loc_1359E
00016126 7000                       		moveq	#0,d0
00016128                            
00016128                            loc_1359E:
00016128 1140 0026                  		move.b	d0,obAngle(a0)
0001612C                            
0001612C                            locret_135A2:
0001612C 4E75                       		rts	
0001612E                            ; End of function Sonic_JumpAngle
0001612E                            ; End of function Sonic_JumpAngle
0001612E                            		include	"_incObj\Sonic Floor.asm"
0001612E                            ; ---------------------------------------------------------------------------
0001612E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001612E                            ; ---------------------------------------------------------------------------
0001612E                            
0001612E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001612E                            
0001612E                            
0001612E                            Sonic_Floor:
0001612E 3228 0010                  		move.w	obVelX(a0),d1
00016132 3428 0012                  		move.w	obVelY(a0),d2
00016136 4EB9 0000 3CC4             		jsr	(CalcAngle).l
0001613C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00016140 0400 0020                  		subi.b	#$20,d0
00016144 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00016148 0200 00C0                  		andi.b	#$C0,d0
0001614C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00016150 0C00 0040                  		cmpi.b	#$40,d0
00016154 6700 0000                  		beq.w	loc_13680
00016158 0C00 0080                  		cmpi.b	#$80,d0
0001615C 6700 0000                  		beq.w	loc_136E2
00016160 0C00 00C0                  		cmpi.b	#$C0,d0
00016164 6700 0000                  		beq.w	loc_1373E
00016168 6100 0000                  		bsr.w	Sonic_HitWall
0001616C 4A41                       		tst.w	d1
0001616E 6A00                       		bpl.s	loc_135F0
00016170 9368 0008                  		sub.w	d1,obX(a0)
00016174 317C 0000 0010             		move.w	#0,obVelX(a0)
0001617A                            
0001617A                            loc_135F0:
0001617A 6100 0000                  		bsr.w	sub_14EB4
0001617E 4A41                       		tst.w	d1
00016180 6A00                       		bpl.s	loc_13602
00016182 D368 0008                  		add.w	d1,obX(a0)
00016186 317C 0000 0010             		move.w	#0,obVelX(a0)
0001618C                            
0001618C                            loc_13602:
0001618C 6100 0000                  		bsr.w	Sonic_HitFloor
00016190 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016194 4A41                       		tst.w	d1
00016196 6A00                       		bpl.s	locret_1367E
00016198 1428 0012                  		move.b	obVelY(a0),d2
0001619C 5002                       		addq.b	#8,d2
0001619E 4402                       		neg.b	d2
000161A0 B202                       		cmp.b	d2,d1
000161A2 6C00                       		bge.s	loc_1361E
000161A4 B002                       		cmp.b	d2,d0
000161A6 6D00                       		blt.s	locret_1367E
000161A8                            
000161A8                            loc_1361E:
000161A8 D368 000C                  		add.w	d1,obY(a0)
000161AC 1143 0026                  		move.b	d3,obAngle(a0)
000161B0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000161B4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000161BA 1003                       		move.b	d3,d0
000161BC 0600 0020                  		addi.b	#$20,d0
000161C0 0200 0040                  		andi.b	#$40,d0
000161C4 6600                       		bne.s	loc_1365C
000161C6 1003                       		move.b	d3,d0
000161C8 0600 0010                  		addi.b	#$10,d0
000161CC 0200 0020                  		andi.b	#$20,d0
000161D0 6700                       		beq.s	loc_1364E
000161D2 E0E8 0012                  		asr	obVelY(a0)
000161D6 6000                       		bra.s	loc_13670
000161D8                            ; ===========================================================================
000161D8                            
000161D8                            loc_1364E:
000161D8 317C 0000 0012             		move.w	#0,obVelY(a0)
000161DE 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000161E4 4E75                       		rts	
000161E6                            ; ===========================================================================
000161E6                            
000161E6                            loc_1365C:
000161E6 317C 0000 0010             		move.w	#0,obVelX(a0)
000161EC 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
000161F2 6F00                       		ble.s	loc_13670
000161F4 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000161FA                            
000161FA                            loc_13670:
000161FA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016200 4A03                       		tst.b	d3
00016202 6A00                       		bpl.s	locret_1367E
00016204 4468 0020                  		neg.w	obInertia(a0)
00016208                            
00016208                            locret_1367E:
00016208 4E75                       		rts	
0001620A                            ; ===========================================================================
0001620A                            
0001620A                            loc_13680:
0001620A 6100 0000                  		bsr.w	Sonic_HitWall
0001620E 4A41                       		tst.w	d1
00016210 6A00                       		bpl.s	loc_1369A
00016212 9368 0008                  		sub.w	d1,obX(a0)
00016216 317C 0000 0010             		move.w	#0,obVelX(a0)
0001621C 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016222 4E75                       		rts	
00016224                            ; ===========================================================================
00016224                            
00016224                            loc_1369A:
00016224 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016228 4A41                       		tst.w	d1
0001622A 6A00                       		bpl.s	loc_136B4
0001622C 9368 000C                  		sub.w	d1,obY(a0)
00016230 4A68 0012                  		tst.w	obVelY(a0)
00016234 6A00                       		bpl.s	locret_136B2
00016236 317C 0000 0012             		move.w	#0,obVelY(a0)
0001623C                            
0001623C                            locret_136B2:
0001623C 4E75                       		rts	
0001623E                            ; ===========================================================================
0001623E                            
0001623E                            loc_136B4:
0001623E 4A68 0012                  		tst.w	obVelY(a0)
00016242 6B00                       		bmi.s	locret_136E0
00016244 6100 0000                  		bsr.w	Sonic_HitFloor
00016248 4A41                       		tst.w	d1
0001624A 6A00                       		bpl.s	locret_136E0
0001624C D368 000C                  		add.w	d1,obY(a0)
00016250 1143 0026                  		move.b	d3,obAngle(a0)
00016254 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016258 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001625E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016264 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001626A                            
0001626A                            locret_136E0:
0001626A 4E75                       		rts	
0001626C                            ; ===========================================================================
0001626C                            
0001626C                            loc_136E2:
0001626C 6100 0000                  		bsr.w	Sonic_HitWall
00016270 4A41                       		tst.w	d1
00016272 6A00                       		bpl.s	loc_136F4
00016274 9368 0008                  		sub.w	d1,obX(a0)
00016278 317C 0000 0010             		move.w	#0,obVelX(a0)
0001627E                            
0001627E                            loc_136F4:
0001627E 6100 0000                  		bsr.w	sub_14EB4
00016282 4A41                       		tst.w	d1
00016284 6A00                       		bpl.s	loc_13706
00016286 D368 0008                  		add.w	d1,obX(a0)
0001628A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016290                            
00016290                            loc_13706:
00016290 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016294 4A41                       		tst.w	d1
00016296 6A00                       		bpl.s	locret_1373C
00016298 9368 000C                  		sub.w	d1,obY(a0)
0001629C 1003                       		move.b	d3,d0
0001629E 0600 0020                  		addi.b	#$20,d0
000162A2 0200 0040                  		andi.b	#$40,d0
000162A6 6600                       		bne.s	loc_13726
000162A8 317C 0000 0012             		move.w	#0,obVelY(a0)
000162AE 4E75                       		rts	
000162B0                            ; ===========================================================================
000162B0                            
000162B0                            loc_13726:
000162B0 1143 0026                  		move.b	d3,obAngle(a0)
000162B4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000162B8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162BE 4A03                       		tst.b	d3
000162C0 6A00                       		bpl.s	locret_1373C
000162C2 4468 0020                  		neg.w	obInertia(a0)
000162C6                            
000162C6                            locret_1373C:
000162C6 4E75                       		rts	
000162C8                            ; ===========================================================================
000162C8                            
000162C8                            loc_1373E:
000162C8 6100 0000                  		bsr.w	sub_14EB4
000162CC 4A41                       		tst.w	d1
000162CE 6A00                       		bpl.s	loc_13758
000162D0 D368 0008                  		add.w	d1,obX(a0)
000162D4 317C 0000 0010             		move.w	#0,obVelX(a0)
000162DA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162E0 4E75                       		rts	
000162E2                            ; ===========================================================================
000162E2                            
000162E2                            loc_13758:
000162E2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000162E6 4A41                       		tst.w	d1
000162E8 6A00                       		bpl.s	loc_13772
000162EA 9368 000C                  		sub.w	d1,obY(a0)
000162EE 4A68 0012                  		tst.w	obVelY(a0)
000162F2 6A00                       		bpl.s	locret_13770
000162F4 317C 0000 0012             		move.w	#0,obVelY(a0)
000162FA                            
000162FA                            locret_13770:
000162FA 4E75                       		rts	
000162FC                            ; ===========================================================================
000162FC                            
000162FC                            loc_13772:
000162FC 4A68 0012                  		tst.w	obVelY(a0)
00016300 6B00                       		bmi.s	locret_1379E
00016302 6100 0000                  		bsr.w	Sonic_HitFloor
00016306 4A41                       		tst.w	d1
00016308 6A00                       		bpl.s	locret_1379E
0001630A D368 000C                  		add.w	d1,obY(a0)
0001630E 1143 0026                  		move.b	d3,obAngle(a0)
00016312 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016316 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001631C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016322 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016328                            
00016328                            locret_1379E:
00016328 4E75                       		rts	
0001632A                            ; End of function Sonic_Floor
0001632A                            ; End of function Sonic_Floor
0001632A                            		include	"_incObj\Sonic ResetOnFloor.asm"
0001632A                            ; ---------------------------------------------------------------------------
0001632A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001632A                            ; ---------------------------------------------------------------------------
0001632A                            
0001632A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001632A                            
0001632A                            
0001632A                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
0001632A 08A8 0005 0022                     	bclr    #5,$22(a0)
00016330 08A8 0001 0022                     	bclr    #1,$22(a0)
00016336 0828 0002 0022                     	btst    #2,$22(a0)
0001633C 6700                               	beq.s    loc_137E4
0001633E 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016344 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001634A 117C 0009 0017             		move.b	#9,obWidth(a0)
00016350 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016356 5B68 000C                  		subq.w	#5,obY(a0)
0001635A                            
0001635A                            loc_137E4:
0001635A 117C 0000 003C             		move.b	#0,$3C(a0)
00016360 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016366 4E75                       		rts	
00016368                            ; End of function Sonic_ResetOnFloor
00016368                            ; End of function Sonic_ResetOnFloor
00016368                            		include	"_incObj\Sonic (part 2).asm"
00016368                            ; ---------------------------------------------------------------------------
00016368                            ; Sonic	when he	gets hurt
00016368                            ; ---------------------------------------------------------------------------
00016368                            
00016368                            Sonic_Hurt:	; Routine 4
00016368 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001636E 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016374 0828 0006 0022             		btst	#6,obStatus(a0)
0001637A 6700                       		beq.s	loc_1380C
0001637C 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016382                            
00016382                            loc_1380C:
00016382 6100 0000                  		bsr.w	Sonic_HurtStop
00016386 6100 FAF4                  		bsr.w	Sonic_LevelBound
0001638A 6100 F19A                  		bsr.w	Sonic_RecordPosition
0001638E 6100 0000                  		bsr.w	Sonic_Animate
00016392 6100 0000                  		bsr.w	Sonic_LoadGfx
00016396 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001639C                            
0001639C                            ; ---------------------------------------------------------------------------
0001639C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001639C                            ; ---------------------------------------------------------------------------
0001639C                            
0001639C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001639C                            
0001639C                            
0001639C                            Sonic_HurtStop:
0001639C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000163A0 0640 00E0                  		addi.w	#$E0,d0
000163A4 B068 000C                  		cmp.w	obY(a0),d0
000163A8 6500 0000                  		bcs.w	KillSonic
000163AC 6100 FD80                  		bsr.w	Sonic_Floor
000163B0 0828 0001 0022             		btst	#1,obStatus(a0)
000163B6 6600                       		bne.s	locret_13860
000163B8 7000                       		moveq	#0,d0
000163BA 3140 0012                  		move.w	d0,obVelY(a0)
000163BE 3140 0010                  		move.w	d0,obVelX(a0)
000163C2 3140 0020                  		move.w	d0,obInertia(a0)
000163C6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000163CC 5528 0024                  		subq.b	#2,obRoutine(a0)
000163D0 317C 0078 0030             		move.w	#$78,$30(a0)
000163D6                            
000163D6                            locret_13860:
000163D6 4E75                       		rts	
000163D8                            ; End of function Sonic_HurtStop
000163D8                            
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            ; Sonic	when he	dies
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            
000163D8                            Sonic_Death:	; Routine 6
000163D8 6100 0000                  		bsr.w	GameOver
000163DC 4EB9 0000 F6C0             		jsr	(ObjectFall).l
000163E2 6100 F142                  		bsr.w	Sonic_RecordPosition
000163E6 6100 0000                  		bsr.w	Sonic_Animate
000163EA 6100 0000                  		bsr.w	Sonic_LoadGfx
000163EE 4EF9 0000 F70C             		jmp	(DisplaySprite).l
000163F4                            
000163F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163F4                            
000163F4                            
000163F4                            GameOver:
000163F4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000163F8 0640 0100                  		addi.w	#$100,d0
000163FC B068 000C                  		cmp.w	obY(a0),d0
00016400 6400 0000                  		bcc.w	locret_13900
00016404 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
0001640A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001640E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016412 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016416 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
0001641A 6600                       		bne.s	loc_138D4
0001641C 317C 0000 003A             		move.w	#0,$3A(a0)
00016422 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016428 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001642E 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
00016434 4238 FE1A                  		clr.b	(f_timeover).w
00016438                            
00016438                            loc_138C2:
00016442 7003                       		moveq	#3,d0
00016444 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
0001644A                            		
0001644A                            loc_138C3:
00016454 7003                       		moveq	#3,d0
00016456 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
0001645C                            ; ===========================================================================
0001645C                            
0001645C                            loc_138D4:
0001645C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016462 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
00016466 6700                       		beq.s	locret_13900	; if not, branch
00016468 317C 0000 003A             		move.w	#0,$3A(a0)
0001646E 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016474 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001647A 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016480 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016486 60B0                       		bra.s	loc_138C2
00016488                            		
00016488                            
00016488                            ; ===========================================================================
00016488                            
00016488                            locret_13900:
00016488 4E75                       		rts	
0001648A                            ; End of function GameOver
0001648A                            
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            ; Sonic	when the level is restarted
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            
0001648A                            Sonic_ResetLevel:; Routine 8
0001648A 4A68 003A                  		tst.w	$3A(a0)
0001648E 6700                       		beq.s	locret_13914
00016490 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016494 6600                       		bne.s	locret_13914
00016496 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001649C                            
0001649C                            	locret_13914:
0001649C 4E75                       		rts	
0001649C 4E75                       		rts	
0001649E                            		include	"_incObj\Sonic Loops.asm"
0001649E                            ; ---------------------------------------------------------------------------
0001649E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001649E                            ; ---------------------------------------------------------------------------
0001649E                            
0001649E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001649E                            
0001649E                            
0001649E                            Sonic_Loops:
0001649E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
000164A4 6700                       		beq.s	@isstarlight	; if yes, branch
000164A6 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
000164AA 6600 0000                  		bne.w	@noloops	; if not, branch
000164AE                            
000164AE                            	@isstarlight:
000164AE 3028 000C                  		move.w	obY(a0),d0
000164B2 E248                       		lsr.w	#1,d0
000164B4 0240 0380                  		andi.w	#$380,d0
000164B8 1228 0008                  		move.b	obX(a0),d1
000164BC 0241 007F                  		andi.w	#$7F,d1
000164C0 D041                       		add.w	d1,d0
000164C2 43F8 A400                  		lea	(v_lvllayout).w,a1
000164C6 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000164CA                            
000164CA B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
000164CE 6700 FA68                  		beq.w	Sonic_ChkRoll	; if yes, branch
000164D2 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
000164D6 6700 FA60                  		beq.w	Sonic_ChkRoll
000164DA                            
000164DA B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
000164DE 6700                       		beq.s	@chkifleft	; if yes, branch
000164E0 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
000164E4 6700                       		beq.s	@chkifinair
000164E6 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
000164EC 4E75                       		rts	
000164EE                            ; ===========================================================================
000164EE                            
000164EE                            @chkifinair:
000164EE 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
000164F4 6700                       		beq.s	@chkifleft	; if not, branch
000164F6                            
000164F6 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000164FC 4E75                       		rts	
000164FE                            ; ===========================================================================
000164FE                            
000164FE                            @chkifleft:
000164FE 3428 0008                  		move.w	obX(a0),d2
00016502 0C02 002C                  		cmpi.b	#$2C,d2
00016506 6400                       		bcc.s	@chkifright
00016508                            
00016508 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001650E 4E75                       		rts	
00016510                            ; ===========================================================================
00016510                            
00016510                            @chkifright:
00016510 0C02 00E0                  		cmpi.b	#$E0,d2
00016514 6500                       		bcs.s	@chkangle1
00016516                            
00016516 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001651C 4E75                       		rts	
0001651E                            ; ===========================================================================
0001651E                            
0001651E                            @chkangle1:
0001651E 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016524 6600                       		bne.s	@chkangle2	; if yes, branch
00016526                            
00016526 1228 0026                  		move.b	obAngle(a0),d1
0001652A 6700                       		beq.s	@done
0001652C 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016530 6200                       		bhi.s	@done		; if yes, branch
00016532 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016538 4E75                       		rts	
0001653A                            ; ===========================================================================
0001653A                            
0001653A                            @chkangle2:
0001653A 1228 0026                  		move.b	obAngle(a0),d1
0001653E 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
00016542 6300                       		bls.s	@done		; if yes, branch
00016544 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
0001654A                            
0001654A                            @noloops:
0001654A                            @done:
0001654A 4E75                       		rts	
0001654C                            ; End of function Sonic_Loops
0001654C                            ; End of function Sonic_Loops
0001654C                            		include	"_incObj\Sonic Animate.asm"
0001654C                            ; ---------------------------------------------------------------------------
0001654C                            ; Subroutine to	animate	Sonic's sprites
0001654C                            ; ---------------------------------------------------------------------------
0001654C                            
0001654C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001654C                            
0001654C                            
0001654C                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001654C 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
00016552 7000                       		moveq	#0,d0
00016554 1028 001C                  		move.b	obAnim(a0),d0
00016558 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0001655C 6700                       		beq.s	@do		; if not, branch
0001655E 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016562 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016566 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001656A                            		
0001656A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016570                            
00016570                            	@do:
00016570 D040                       		add.w	d0,d0
00016572 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016576 1011                       		move.b	(a1),d0
00016578 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001657A 1228 0022                  		move.b	obStatus(a0),d1
0001657E 0201 0001                  		andi.b	#1,d1
00016582 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016588 8328 0001                  		or.b	d1,obRender(a0)
0001658C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016590 6A00                       		bpl.s	@delay		; if time remains, branch
00016592 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016596                            
00016596                            @loadframe:
00016596 7200                       		moveq	#0,d1
00016598 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001659C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000165A0 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
000165A4 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
000165A8                            
000165A8                            	@next:
000165A8 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
000165AC 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
000165B0                            
000165B0                            	@delay:
000165B0 4E75                       		rts	
000165B2                            ; ===========================================================================
000165B2                            
000165B2                            @end_FF:
000165B2 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000165B4 6600                       		bne.s	@end_FE		; if not, branch
000165B6 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
000165BA 1029 0001                  		move.b	1(a1),d0	; read sprite number
000165BE 60E8                       		bra.s	@next
000165C0                            ; ===========================================================================
000165C0                            
000165C0                            @end_FE:
000165C0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000165C2 6600                       		bne.s	@end_FD		; if not, branch
000165C4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000165C8 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
000165CC 9200                       		sub.b	d0,d1
000165CE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000165D2 60D4                       		bra.s	@next
000165D4                            ; ===========================================================================
000165D4                            
000165D4                            @end_FD:
000165D4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000165D6 6600                       		bne.s	@end		; if not, branch
000165D8 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
000165DE                            
000165DE                            	@end:
000165DE 4E75                       		rts	
000165E0                            ; ===========================================================================
000165E0                            
000165E0                            @walkrunroll:
000165E0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000165E4 6ACA                       		bpl.s	@delay		; if time remains, branch
000165E6 5200                       		addq.b	#1,d0		; is animation walking/running?
000165E8 6600 0000                  		bne.w	@rolljump	; if not, branch
000165EC 7200                       		moveq	#0,d1
000165EE 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000165F2 6B00                       		bmi.s	@ble 			; better handling of angles
000165F4 6700                       		beq.s	@ble
000165F6 5300                       		subq.b	#1,d0
000165F8                            
000165F8                            	@ble:																
000165F8 1428 0022                  		move.b	obStatus(a0),d2
000165FC 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016600 6600                       		bne.s	@flip		; if yes, branch
00016602 4600                       		not.b	d0		; reverse angle
00016604                            
00016604                            	@flip:
00016604 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016608 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
0001660A 7203                       		moveq	#3,d1
0001660C                            
0001660C                            	@noinvert:
0001660C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016612 B302                       		eor.b	d1,d2
00016614 8528 0001                  		or.b	d2,obRender(a0)
00016618 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
0001661E 6600 0000                  		bne.w	@push		; if yes, branch
00016622                            
00016622 E808                       		lsr.b	#4,d0		; divide angle by $10
00016624 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016628 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001662C 6A00                       		bpl.s	@nomodspeed
0001662E 4442                       		neg.w	d2		; modulus speed
00016630                            
00016630                            	@nomodspeed:
00016630 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
00016636 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
0001663A 6400                       		bcc.s	@maxrunning	; if yes, branch
0001663C                            
0001663C 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016642 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016646 6400                       		bcc.s	@running	; if yes, branch
00016648                            
00016648 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001664E                            
0001664E                            	@running:
0001664E D000                       		add.b	d0,d0
00016650 D000                       		add.b	d0,d0
00016652 1600                       		move.b	d0,d3
00016654 4442                       		neg.w	d2
00016656 0642 0780                  		addi.w	#$780,d2
0001665A 6A00                       		bpl.s	@belowmax
0001665C 7400                       		moveq	#0,d2		; max animation speed
0001665E 6000                       		bra.s	@belowmax
00016660                            
00016660                            	@maxrunning:
00016660 D000                       		add.b d0,d0
00016662 1600                       		move.b d0,d3
00016664 4442                       		neg.w d2
00016666 0642 0800                  		addi.w #$800, d2
0001666A 6A00                       		bpl.s @belowmax
0001666C 7400                       		moveq #0, d2 
0001666E                            
0001666E                            	@belowmax:
0001666E E04A                       		lsr.w	#8,d2
00016670 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016674 6100 FF20                  		bsr.w	@loadframe
00016678 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
0001667C 4E75                       		rts	
0001667E                            ; ===========================================================================
0001667E                            
0001667E                            @rolljump:
0001667E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016680 6600                       		bne.s	@push		; if not, branch
00016682 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016686 6A00                       		bpl.s	@nomodspeed2
00016688 4442                       		neg.w	d2
0001668A                            
0001668A                            	@nomodspeed2:
0001668A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016690 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016694 6400                       		bcc.s	@rollfast	; if yes, branch
00016696 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001669C                            
0001669C                            	@rollfast:
0001669C 4442                       		neg.w	d2
0001669E 0642 0400                  		addi.w	#$400,d2
000166A2 6A00                       		bpl.s	@belowmax2
000166A4 7400                       		moveq	#0,d2
000166A6                            
000166A6                            	@belowmax2:
000166A6 E04A                       		lsr.w	#8,d2
000166A8 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000166AC 1228 0022                  		move.b	obStatus(a0),d1
000166B0 0201 0001                  		andi.b	#1,d1
000166B4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166BA 8328 0001                  		or.b	d1,obRender(a0)
000166BE 6000 FED6                  		bra.w	@loadframe
000166C2                            ; ===========================================================================
000166C2                            
000166C2                            @push:
000166C2 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000166C6 6B00                       		bmi.s	@negspeed
000166C8 4442                       		neg.w	d2
000166CA                            
000166CA                            	@negspeed:
000166CA 0642 0800                  		addi.w	#$800,d2
000166CE 6A00                       		bpl.s	@belowmax3	
000166D0 7400                       		moveq	#0,d2
000166D2                            
000166D2                            	@belowmax3:
000166D2 EC4A                       		lsr.w	#6,d2
000166D4 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000166D8 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000166DE 1228 0022                  		move.b	obStatus(a0),d1
000166E2 0201 0001                  		andi.b	#1,d1
000166E6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166EC 8328 0001                  		or.b	d1,obRender(a0)
000166F0 6000 FEA4                  		bra.w	@loadframe
000166F4                            
000166F4                            ; End of function Sonic_Animate
000166F4                            ; End of function Sonic_Animate
000166F4                            		include	"_anim\Sonic.asm"
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            ; Animation script - Sonic
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            Ani_Sonic:
000166F4                            
000166F4 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
000166F6 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
000166F8 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
000166FA 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
000166FC 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
000166FE 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016700 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016702 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016704 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016706 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016708 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
0001670A 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
0001670C 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
0001670E 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016710 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016712 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016714 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016716 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016718 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
0001671A 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
0001671C 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
0001671E 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016720 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016722 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016724 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016726 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016728 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
0001672A 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
0001672C 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
0001672E 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016730 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016732 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016734 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016736 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016738 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
0001673A 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
0001673C 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
0001673E 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016740                            
00016740 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
0001674E 00                         		even
0001674E FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
0001675C 00                         		even
0001675C FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016763 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001676A 00                         		even
0001676A FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016771 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016778 00                         		even
00016778 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016786 00                         		even
00016786                            SonAni_Wait:	
00016786 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016795 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000167A4 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000167B3 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
000167C2 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000167D1 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000167E0 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000167EF 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000167FE 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016806                            		even
00016806 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
0001680C                            		even
0001680C 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016812 00                         		even
00016812 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
00016818                            		even
00016818 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
0001681C 00                         		even
0001681C 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016820 00                         		even
00016820 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016824 00                         		even
00016824 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016828 00                         		even
00016828 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016832                            		even
00016832 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016838 00                         		even
00016838 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016842 00                         		even
00016842 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
0001684C 00                         		even
0001684C 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016850                            		even
00016850 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016856                            		even
00016856 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
0001685C 00                         		even
0001685C 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016860 00                         		even
00016860 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016868 00                         		even
00016868 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
0001686C 00                         		even
0001686C 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016870 00                         		even
00016870 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016874 00                         		even
00016874 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016878 00                         		even
00016878                            SonAni_WaterSlide:
00016878 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
0001687C                            		even
0001687C 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016880                            		even
00016880 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016888 00                         		even
00016888 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
0001688C                            		even
0001688C FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001689A 00                         		even
0001689A 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
000168A6                            		even
000168A6 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
000168AA                            		even
000168AA 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
000168AE                            		even
000168AE 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
000168B2                            		even
000168B2 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
000168BC 00                         		even
000168BC 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
000168C5 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
000168CD 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
000168D4 3334 35                    		dc.b	$33, $34, $35
000168D7 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
000168DE                            		even
000168DE 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
000168E4                            		even
000168E4                            
000168E4                            
000168E4 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
000168E4 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
000168E4 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
000168E4 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
000168E4 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
000168E4 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
000168E4 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
000168E4 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
000168E4 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
000168E4 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
000168E4 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
000168E4 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
000168E4 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
000168E4 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
000168E4 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
000168E4 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
000168E4 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
000168E4 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
000168E4 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
000168E4 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
000168E4 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
000168E4 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
000168E4 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
000168E4 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
000168E4 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
000168E4 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
000168E4 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
000168E4 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
000168E4 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
000168E4 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
000168E4 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
000168E4 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
000168E4 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
000168E4 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
000168E4 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
000168E4 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
000168E4 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
000168E4 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000168E4 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000168E4                            		include	"_incObj\Sonic LoadGfx.asm"
000168E4                            ; ---------------------------------------------------------------------------
000168E4                            ; Sonic	graphics loading subroutine
000168E4                            ; ---------------------------------------------------------------------------
000168E4                            
000168E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168E4                            
000168E4                            
000168E4                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
000168E4 7000                       		moveq	#0,d0
000168E6 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000168EA B038 F766                  		cmp.b	($FFFFF766).w,d0
000168EE 6700                       		beq.s	locret_13C96
000168F0 11C0 F766                  		move.b	d0,($FFFFF766).w
000168F4 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000168FA D040                       		add.w	d0,d0
000168FC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016900 7A00                       		moveq	#0,d5
00016902 1A1A                       		move.b	(a2)+,d5
00016904 5345                       		subq.w	#1,d5
00016906 6B00                       		bmi.s	locret_13C96
00016908 383C F000                  		move.w	#$F000,d4
0001690C 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016912                            
00016912                            SPLC_ReadEntry:
00016912 7200                       		moveq	#0,d1
00016914 121A                       		move.b	(a2)+,d1
00016916 E149                       		lsl.w	#8,d1
00016918 121A                       		move.b	(a2)+,d1
0001691A 3601                       		move.w	d1,d3
0001691C E04B                       		lsr.w	#8,d3
0001691E 0243 00F0                  		andi.w	#$F0,d3
00016922 0643 0010                  		addi.w	#$10,d3
00016926 0241 0FFF                  		andi.w	#$FFF,d1
0001692A EB89                       		lsl.l	#5,d1
0001692C D286                       		add.l	d6,d1
0001692E 3404                       		move.w	d4,d2
00016930 D843                       		add.w	d3,d4
00016932 D843                       		add.w	d3,d4
00016934 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
0001693A 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001693E                            
0001693E                            locret_13C96:
0001693E 4E75                       		rts	
00016940                            ; End of function Sonic_LoadGfx
00016940                            ; End of function Sonic_LoadGfx
00016940                            
00016940                            		include	"_incObj\0A Drowning Countdown.asm"
00016940                            ; ---------------------------------------------------------------------------
00016940                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016940                            ; Sonic's mouth (LZ)
00016940                            ; ---------------------------------------------------------------------------
00016940                            
00016940                            DrownCount:
00016940 7000                       		moveq	#0,d0
00016942 1028 0024                  		move.b	obRoutine(a0),d0
00016946 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
0001694A 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
0001694E                            ; ===========================================================================
0001694E                            Drown_Index:
0001694E 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016950 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016952 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016954 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016956 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016958 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
0001695A 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
0001695C 0000                       			dc.w Drown_Display-Drown_Index
0001695E 0000                       			dc.w Drown_Delete-Drown_Index
00016960                            
00016960 =00000030                  drown_origX:		equ $30		; original x-axis position
00016960 =00000038                  drown_time:		equ $38		; time between each number changes
00016960                            
00016960 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016960 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016960 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016960 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016960 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016960 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016960 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016960                            ; ===========================================================================
00016960                            
00016960                            Drown_Main:	; Routine 0
00016960 5428 0024                  		addq.b	#2,obRoutine(a0)
00016964 217C 0001 4D9C 0004        		move.l	#Map_Bub,obMap(a0)
0001696C 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016972 117C 0084 0001             		move.b	#$84,obRender(a0)
00016978 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001697E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016984 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016988 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
0001698A                            
0001698A 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
0001698E 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016996 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001699C 0240 007F                  		andi.w	#$7F,d0
000169A0 1140 0033                  		move.b	d0,$33(a0)
000169A4 6000 0000                  		bra.w	Drown_Countdown
000169A8                            ; ===========================================================================
000169A8                            
000169A8                            @smallbubble:
000169A8 1140 001C                  		move.b	d0,obAnim(a0)
000169AC 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
000169B2 317C FF78 0012             		move.w	#-$88,obVelY(a0)
000169B8                            
000169B8                            Drown_Animate:	; Routine 2
000169B8 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000169BE 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
000169C4                            
000169C4                            Drown_ChkWater:	; Routine 4
000169C4 3038 F646                  		move.w	(v_waterpos1).w,d0
000169C8 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
000169CC 6500                       		bcs.s	@wobble		; if not, branch
000169CE                            
000169CE 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
000169D4 5E28 001C                  		addq.b	#7,obAnim(a0)
000169D8 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
000169DE 6700                       		beq.s	Drown_Display
000169E0 6000                       		bra.s	Drown_Display
000169E2                            ; ===========================================================================
000169E2                            
000169E2                            @wobble:
000169E2 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
000169E6 6700                       		beq.s	@notunnel	; if not, branch
000169E8 5868 0030                  		addq.w	#4,drown_origX(a0)
000169EC                            
000169EC                            	@notunnel:
000169EC 1028 0026                  		move.b	obAngle(a0),d0
000169F0 5228 0026                  		addq.b	#1,obAngle(a0)
000169F4 0240 007F                  		andi.w	#$7F,d0
000169F8 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000169FE 1031 0000                  		move.b	(a1,d0.w),d0
00016A02 4880                       		ext.w	d0
00016A04 D068 0030                  		add.w	drown_origX(a0),d0
00016A08 3140 0008                  		move.w	d0,obX(a0)
00016A0C 6100                       		bsr.s	Drown_ShowNumber
00016A0E 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
00016A14 4A28 0001                  		tst.b	obRender(a0)
00016A18 6A00                       		bpl.s	@delete
00016A1A 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00016A20                            
00016A20                            	@delete:
00016A20 4EF9 0000 F74C             		jmp	(DeleteObject).l
00016A26                            ; ===========================================================================
00016A26                            
00016A26                            Drown_Display:	; Routine 6, Routine $E
00016A26 6100                       		bsr.s	Drown_ShowNumber
00016A28 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016A2E 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00016A34 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00016A3A                            ; ===========================================================================
00016A3A                            
00016A3A                            Drown_Delete:	; Routine 8, Routine $10
00016A3A 4EF9 0000 F74C             		jmp	(DeleteObject).l
00016A40                            ; ===========================================================================
00016A40                            
00016A40                            Drown_AirLeft:	; Routine $C
00016A40 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016A46 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016A48 5368 0038                  		subq.w	#1,drown_time(a0)
00016A4C 6600                       		bne.s	@display
00016A4E 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016A54 5E28 001C                  		addq.b	#7,obAnim(a0)
00016A58 60CC                       		bra.s	Drown_Display
00016A5A                            ; ===========================================================================
00016A5A                            
00016A5A                            	@display:
00016A5A 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016A60 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00016A66 4A28 0001                  		tst.b	obRender(a0)
00016A6A 6A00                       		bpl.s	Drown_AirLeft_Delete
00016A6C 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00016A72                            
00016A72                            Drown_AirLeft_Delete:	
00016A72 4EF9 0000 F74C             		jmp	(DeleteObject).l
00016A78                            ; ===========================================================================
00016A78                            
00016A78                            Drown_ShowNumber:
00016A78 4A68 0038                  		tst.w	drown_time(a0)
00016A7C 6700                       		beq.s	@nonumber
00016A7E 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016A82 6600                       		bne.s	@nonumber	; if time remains, branch
00016A84 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016A8A 6400                       		bcc.s	@nonumber
00016A8C                            
00016A8C 317C 000F 0038             		move.w	#15,drown_time(a0)
00016A92 4268 0012                  		clr.w	obVelY(a0)
00016A96 117C 0080 0001             		move.b	#$80,obRender(a0)
00016A9C 3028 0008                  		move.w	obX(a0),d0
00016AA0 9078 F700                  		sub.w	(v_screenposx).w,d0
00016AA4 0640 0080                  		addi.w	#$80,d0
00016AA8 3140 0008                  		move.w	d0,obX(a0)
00016AAC 3028 000C                  		move.w	obY(a0),d0
00016AB0 9078 F704                  		sub.w	(v_screenposy).w,d0
00016AB4 0640 0080                  		addi.w	#$80,d0
00016AB8 3140 000A                  		move.w	d0,obScreenY(a0)
00016ABC 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016AC2                            
00016AC2                            	@nonumber:
00016AC2 4E75                       		rts	
00016AC4                            ; ===========================================================================
00016AC4                            Drown_WobbleData:
00016AC4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016AD4 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016AE4 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016AF4 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016B04 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016B14 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016B24 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016B34 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016B44 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016B54 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016B64 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016B74 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016B84 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016B94 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016BA4 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016BB4 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016BC4                            ; ===========================================================================
00016BC4                            
00016BC4                            Drown_Countdown:; Routine $A
00016BC4 4A68 002C                  		tst.w	$2C(a0)
00016BC8 6600 0000                  		bne.w	@loc_13F86
00016BCC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016BD2 6400 0000                  		bcc.w	@nocountdown
00016BD6 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016BDC 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016BE0                            
00016BE0 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016BE4 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016BE8 317C 003B 0038             		move.w	#59,drown_time(a0)
00016BEE 317C 0001 0036             		move.w	#1,$36(a0)
00016BF4 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016BFA 0240 0001                  		andi.w	#1,d0
00016BFE 1140 0034                  		move.b	d0,$34(a0)
00016C02 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016C06 0C40 0019                  		cmpi.w	#25,d0
00016C0A 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016C0C 0C40 0014                  		cmpi.w	#20,d0
00016C10 6700                       		beq.s	@warnsound
00016C12 0C40 000F                  		cmpi.w	#15,d0
00016C16 6700                       		beq.s	@warnsound
00016C18 0C40 000C                  		cmpi.w	#12,d0
00016C1C 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016C1E                            
00016C1E                            	@skipmusic:
00016C28 5328 0032                  		subq.b	#1,$32(a0)
00016C2C 6A00                       		bpl.s	@reduceair
00016C2E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016C34 08E8 0007 0036             		bset	#7,$36(a0)
00016C3A 6000                       		bra.s	@reduceair
00016C3C                            ; ===========================================================================
00016C3C                            
00016C3C                            @warnsound:
00016C46                            
00016C46                            @reduceair:
00016C46 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016C4A 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016C4E                            
00016C4E                            		; Sonic drowns here
00016C4E 6100 0000                  		bsr.w	ResumeMusic
00016C52 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016C62 117C 000A 0034             		move.b	#$A,$34(a0)
00016C68 317C 0001 0036             		move.w	#1,$36(a0)
00016C6E 317C 0078 002C             		move.w	#$78,$2C(a0)
00016C74 2F08                       		move.l	a0,-(sp)
00016C76 41F8 D000                  		lea	(v_player).w,a0
00016C7A 6100 F6AE                  		bsr.w	Sonic_ResetOnFloor
00016C7E 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016C84 08E8 0001 0022             		bset	#1,obStatus(a0)
00016C8A 08E8 0007 0002             		bset	#7,obGfx(a0)
00016C90 317C 0000 0012             		move.w	#0,obVelY(a0)
00016C96 317C 0000 0010             		move.w	#0,obVelX(a0)
00016C9C 317C 0000 0020             		move.w	#0,obInertia(a0)
00016CA2 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016CA8 205F                       		movea.l	(sp)+,a0
00016CAA 4E75                       		rts	
00016CAC                            ; ===========================================================================
00016CAC                            
00016CAC                            @loc_13F86:
00016CAC 5368 002C                  		subq.w	#1,$2C(a0)
00016CB0 6600                       		bne.s	@loc_13F94
00016CB2 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016CB8 4E75                       		rts	
00016CBA                            ; ===========================================================================
00016CBA                            
00016CBA                            	@loc_13F94:
00016CBA 2F08                       		move.l	a0,-(sp)
00016CBC 41F8 D000                  		lea	(v_player).w,a0
00016CC0 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
00016CC6 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016CCC 205F                       		movea.l	(sp)+,a0
00016CCE 6000                       		bra.s	@nochange
00016CD0                            ; ===========================================================================
00016CD0                            
00016CD0                            @gotomakenum:
00016CD0 6000                       		bra.s	@makenum
00016CD2                            ; ===========================================================================
00016CD2                            
00016CD2                            @nochange:
00016CD2 4A68 0036                  		tst.w	$36(a0)
00016CD6 6700 0000                  		beq.w	@nocountdown
00016CDA 5368 003A                  		subq.w	#1,$3A(a0)
00016CDE 6A00 0000                  		bpl.w	@nocountdown
00016CE2                            
00016CE2                            @makenum:
00016CE2 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016CE8 0240 000F                  		andi.w	#$F,d0
00016CEC 3140 003A                  		move.w	d0,$3A(a0)
00016CF0 4EB9 0000 FB98             		jsr	(FindFreeObj).l
00016CF6 6600 0000                  		bne.w	@nocountdown
00016CFA 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016CFE 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016D04 7006                       		moveq	#6,d0
00016D06 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016D0C 6700                       		beq.s	@noflip
00016D0E 4440                       		neg.w	d0
00016D10 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016D16                            
00016D16                            	@noflip:
00016D16 D169 0008                  		add.w	d0,obX(a1)
00016D1A 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016D20 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016D26 4A68 002C                  		tst.w	$2C(a0)
00016D2A 6700 0000                  		beq.w	@loc_1403E
00016D2E 0268 0007 003A             		andi.w	#7,$3A(a0)
00016D34 0668 0000 003A             		addi.w	#0,$3A(a0)
00016D3A 3038 D00C                  		move.w	(v_player+obY).w,d0
00016D3E 0440 000C                  		subi.w	#$C,d0
00016D42 3340 000C                  		move.w	d0,obY(a1)
00016D46 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016D4C 1340 0026                  		move.b	d0,obAngle(a1)
00016D50 3038 FE04                  		move.w	(v_framecount).w,d0
00016D54 0200 0003                  		andi.b	#3,d0
00016D58 6600                       		bne.s	@loc_14082
00016D5A 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016D60 6000                       		bra.s	@loc_14082
00016D62                            ; ===========================================================================
00016D62                            
00016D62                            @loc_1403E:
00016D62 0828 0007 0036             		btst	#7,$36(a0)
00016D68 6700                       		beq.s	@loc_14082
00016D6A 3438 FE14                  		move.w	(v_air).w,d2
00016D6E E24A                       		lsr.w	#1,d2
00016D70 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016D76 0240 0003                  		andi.w	#3,d0
00016D7A 6600                       		bne.s	@loc_1406A
00016D7C 08E8 0006 0036             		bset	#6,$36(a0)
00016D82 6600                       		bne.s	@loc_14082
00016D84 1342 0028                  		move.b	d2,obSubtype(a1)
00016D88 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016D8E                            
00016D8E                            	@loc_1406A:
00016D8E 4A28 0034                  		tst.b	$34(a0)
00016D92 6600                       		bne.s	@loc_14082
00016D94 08E8 0006 0036             		bset	#6,$36(a0)
00016D9A 6600                       		bne.s	@loc_14082
00016D9C 1342 0028                  		move.b	d2,obSubtype(a1)
00016DA0 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016DA6                            
00016DA6                            @loc_14082:
00016DA6 5328 0034                  		subq.b	#1,$34(a0)
00016DAA 6A00                       		bpl.s	@nocountdown
00016DAC 4268 0036                  		clr.w	$36(a0)
00016DB0                            
00016DB0                            @nocountdown:
00016DB0 4E75                       		rts	
00016DB0 4E75                       		rts	
00016DB2                            
00016DB2                            
00016DB2                            ; ---------------------------------------------------------------------------
00016DB2                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016DB2                            ; ---------------------------------------------------------------------------
00016DB2                            
00016DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DB2                            
00016DB2                            
00016DB2                            ResumeMusic:
00016DB2                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016DB2                            		;bhi.s	@over12		; if yes, branch
00016DB2                            		;move.b	(v_Saved_music),d0
00016DB2                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016DB2                            		;beq.s	@notinvinc ; if not, branch
00016DB2                            		;move.w	#bgm_Invincible,d0
00016DB2                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016DB2                            		;beq.s	@notinvinc	; if not, branch
00016DB2                            		;move.w	#bgm_Ending,d0
00016DB2                            
00016DB2                            	;@notinvinc:
00016DB2                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016DB2                            		;beq.s	@playselected ; if not, branch
00016DB2                            		;move.w	#bgm_Boss,d0
00016DB2                            
00016DB2                            	;@playselected:
00016DB2                            		;jsr	(PlaySound).l
00016DB2                            
00016DB2                            	;@over12:
00016DB2 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016DB8 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016DBC 4E75                       		rts	
00016DBE                            
00016DBE                            ;End of function ResumeMusic
00016DBE                            
00016DBE                            ; ===========================================================================
00016DBE                            
00016DBE                            		include	"_anim\Drowning Countdown.asm"
00016DBE                            ; ---------------------------------------------------------------------------
00016DBE                            ; Animation script - countdown numbers and bubbles (LZ)
00016DBE                            ; ---------------------------------------------------------------------------
00016DBE 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016DC0 0000                       		dc.w @oneappear-Ani_Drown
00016DC2 0000                       		dc.w @twoappear-Ani_Drown
00016DC4 0000                       		dc.w @threeappear-Ani_Drown
00016DC6 0000                       		dc.w @fourappear-Ani_Drown
00016DC8 0000                       		dc.w @fiveappear-Ani_Drown
00016DCA 0000                       		dc.w @smallbubble-Ani_Drown
00016DCC 0000                       		dc.w @zeroflash-Ani_Drown
00016DCE 0000                       		dc.w @oneflash-Ani_Drown
00016DD0 0000                       		dc.w @twoflash-Ani_Drown
00016DD2 0000                       		dc.w @threeflash-Ani_Drown
00016DD4 0000                       		dc.w @fourflash-Ani_Drown
00016DD6 0000                       		dc.w @fiveflash-Ani_Drown
00016DD8 0000                       		dc.w @blank-Ani_Drown
00016DDA 0000                       		dc.w @mediumbubble-Ani_Drown
00016DDC 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016DE6 00                         		even
00016DE6 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016DF0 00                         		even
00016DF0 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016DFA 00                         		even
00016DFA 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016E04 00                         		even
00016E04 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016E0E 00                         		even
00016E0E 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016E18 00                         		even
00016E18 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016E1E 00                         		even
00016E1E 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016E26 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016E2E 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016E36 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016E3E 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016E46 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016E4E 0EFC                       @blank:		dc.b $E, afRoutine
00016E50 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016E56                            		even
00016E56                            		even
00016E56                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016E56                            ; ---------------------------------------------------------------------------
00016E56                            ; Sprite mappings - drowning countdown numbers (LZ)
00016E56                            ; ---------------------------------------------------------------------------
00016E56                            Map_Drown_internal:
00016E56 0000                       		dc.w @num-Map_Drown_internal
00016E58 01                         @num:		dc.b 1
00016E59 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016E5E                            		even
00016E5E                            		even
00016E5E                            
00016E5E                            		include	"_incObj\04 Gold Shield.asm"
00016E5E                            ; ---------------------------------------------------------------------------
00016E5E                            ; Object 07 - red shield
00016E5E                            ; ---------------------------------------------------------------------------
00016E5E                            
00016E5E                            GShieldItem:
00016E5E 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Red Shield Art
00016E64 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016E68                            		; In this case, VRAM = $541*20
00016E68 363C 0200                  		move.w #$200,d3
00016E6C 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016E72                            ; ---------------------------------------------------------------------------
00016E72                            GShieldObj_Main:
00016E72 7000                       		moveq #0,d0
00016E74 1028 0024                  		move.b $24(a0),d0
00016E78 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016E7C 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016E80                            ; ===========================================================================
00016E80                            GShield_Index:
00016E80 0000                       		dc.w GShield_Init-GShield_Index
00016E82 0000                       		dc.w GShieldChecks-GShield_Index
00016E84                            ; ===========================================================================
00016E84                            GShield_Init:
00016E84 5428 0024                  		addq.b #2,$24(a0)
00016E88 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E90 117C 0004 0001             		move.b #4,1(a0)
00016E96 317C 0080 0018             		move.w #$80,$18(a0)
00016E9C 117C 0018 0014             		move.b #$18,obActWid(a0)
00016EA2 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016EA8 0838 0007 D002             		btst #7,($FFFFD002).w
00016EAE 6700                       		beq.s GShieldChecks
00016EB0 08E8 0007 0002             		bset #7,2(a0)
00016EB6                            ; ---------------------------------------------------------------------------
00016EB6                            GShieldChecks:
00016EB6 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016EBA 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016EBC 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016EC0 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016EC2                            GShieldProperties:
00016EC2 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016EC8 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016ECE 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016ED4 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016EDA 4EB9 0000 C7F4             		jsr AnimateSprite
00016EE0 4EFA 882A                  		jmp DisplaySprite
00016EE4                            GSonicHasShield:
00016EE4 4E75                       		rts
00016EE6                            Gjmp_DeleteObj38: ; loc_12648:
00016EE6 4EFA 8864                  		jmp DeleteObject
00016EE6 4EFA 8864                  		jmp DeleteObject
00016EEA                            		include	"_incObj\07 Red Shield.asm"
00016EEA                            ; ---------------------------------------------------------------------------
00016EEA                            ; Object 07 - red shield
00016EEA                            ; ---------------------------------------------------------------------------
00016EEA                            
00016EEA                            RShieldItem:
00016EEA 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00016EF0 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016EF4                            		; In this case, VRAM = $541*20
00016EF4 363C 0200                  		move.w #$200,d3
00016EF8 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016EFE                            ; ---------------------------------------------------------------------------
00016EFE                            RShieldObj_Main:
00016EFE 7000                       		moveq #0,d0
00016F00 1028 0024                  		move.b $24(a0),d0
00016F04 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00016F08 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00016F0C                            ; ===========================================================================
00016F0C                            RShield_Index:
00016F0C 0000                       		dc.w RShield_Init-RShield_Index
00016F0E 0000                       		dc.w RShieldChecks-RShield_Index
00016F10                            ; ===========================================================================
00016F10                            RShield_Init:
00016F10 5428 0024                  		addq.b #2,$24(a0)
00016F14 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016F1C 117C 0004 0001             		move.b #4,1(a0)
00016F22 317C 0080 0018             		move.w #$80,$18(a0)
00016F28 117C 0018 0014             		move.b #$18,obActWid(a0)
00016F2E 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016F34 0838 0007 D002             		btst #7,($FFFFD002).w
00016F3A 6700                       		beq.s RShieldChecks
00016F3C 08E8 0007 0002             		bset #7,2(a0)
00016F42                            ; ---------------------------------------------------------------------------
00016F42                            RShieldChecks:
00016F42 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016F46 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00016F48 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00016F4C 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00016F4E                            RShieldProperties:
00016F4E 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F54 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F5A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016F60 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016F66 4EB9 0000 C7F4             		jsr AnimateSprite
00016F6C 4EFA 879E                  		jmp DisplaySprite
00016F70                            RSonicHasShield:
00016F70 4E75                       		rts
00016F72                            Rjmp_DeleteObj38: ; loc_12648:
00016F72 4EFA 87D8                  		jmp DeleteObject
00016F72 4EFA 87D8                  		jmp DeleteObject
00016F76                            		include	"_incObj\38 Shield.asm"
00016F76                            ; ---------------------------------------------------------------------------
00016F76                            ; Object 38 - shield
00016F76                            ; ---------------------------------------------------------------------------
00016F76                            
00016F76                            ShieldItem:
00016F76 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00016F7C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F80                            		; In this case, VRAM = $541*20
00016F80 363C 0200                  		move.w #$200,d3
00016F84 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016F8A                            ; ---------------------------------------------------------------------------
00016F8A                            ShieldObj_Main:
00016F8A 7000                       		moveq #0,d0
00016F8C 1028 0024                  		move.b $24(a0),d0
00016F90 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016F94 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016F98                            ; ===========================================================================
00016F98                            Shield_Index:
00016F98 0000                       		dc.w Shield_Init-Shield_Index
00016F9A 0000                       		dc.w ShieldChecks-Shield_Index
00016F9C                            ; ===========================================================================
00016F9C                            Shield_Init:
00016F9C 5428 0024                  		addq.b #2,$24(a0)
00016FA0 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FA8 117C 0004 0001             		move.b #4,1(a0)
00016FAE 317C 0080 0018             		move.w #$80,$18(a0)
00016FB4 117C 0018 0014             		move.b #$18,obActWid(a0)
00016FBA 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016FC0 0838 0007 D002             		btst #7,($FFFFD002).w
00016FC6 6700                       		beq.s ShieldChecks
00016FC8 08E8 0007 0002             		bset #7,2(a0)
00016FCE                            ; ---------------------------------------------------------------------------
00016FCE                            ShieldChecks:
00016FCE 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016FD2 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016FD4 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016FD8 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00016FDA                            ShieldProperties:
00016FDA 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016FE0 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016FE6 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016FEC 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016FF2 4EB9 0000 C7F4             		jsr AnimateSprite
00016FF8 4EFA 8712                  		jmp DisplaySprite
00016FFC                            SonicHasShield:
00016FFC 4E75                       		rts
00016FFE                            jmp_DeleteObj38: ; loc_12648:
00016FFE 4EFA 874C                  		jmp DeleteObject
00016FFE 4EFA 874C                  		jmp DeleteObject
00017002                            		include	"_incObj\19 Invincibility Stars.asm"		
00017002                            ; ---------------------------------------------------------------------------
00017002                            ; Object 19 - Invincibility Stars
00017002                            ; ---------------------------------------------------------------------------
00017002                            
00017002                            InvStarsObj:
00017002 223C 0000 0000             		move.l #Unc_Stars,d1
00017008 343C A820                  		move.w #$A820,d2
0001700C 363C 0200                  		move.w #$200,d3
00017010 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00017016                            Invincibility_Main:
00017016 7000                       		moveq #0,d0
00017018 1028 0024                  		move.b $24(a0),d0
0001701C                            Invincibility_Init:
0001701C 5428 0024                  		addq.b #2,$24(a0)
00017020 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00017028 117C 0004 0001             		move.b #4,1(a0)
0001702E 317C 0080 0018             		move.w #$80,$18(a0)
00017034 117C 0010 0014             		move.b #$10,obActWid(a0)
0001703A 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00017040                            ; ===========================================================================
00017040                            
00017040                            Obj19_Stars: ; XREF: Obj38_Index
00017040 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017044 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017046 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
0001704A 1228 001C                  		move.b $1C(a0),d1
0001704E 5301                       		subq.b #1,d1
00017050 6000                       		bra.s Obj19_StarTrail
00017052                            ; ===========================================================================
00017052 E909                       		lsl.b #4,d1
00017054 5801                       		addq.b #4,d1
00017056 9001                       		sub.b d1,d0
00017058 1228 0030                  		move.b $30(a0),d1
0001705C 9001                       		sub.b d1,d0
0001705E 5801                       		addq.b #4,d1
00017060 0201 000F                  		andi.b #$F,d1
00017064 1141 0030                  		move.b d1,$30(a0)
00017068 6000                       		bra.s Obj19_StarTrail2a
0001706A                            ; ===========================================================================
0001706A                            
0001706A                            Obj19_StarTrail: ; XREF: Obj19_Stars
0001706A E709                       		lsl.b #3,d1
0001706C 1401                       		move.b d1,d2
0001706E D201                       		add.b d1,d1
00017070 D202                       		add.b d2,d1
00017072 5801                       		addq.b #4,d1
00017074 9001                       		sub.b d1,d0
00017076 1228 0030                  		move.b $30(a0),d1
0001707A 9001                       		sub.b d1,d0
0001707C 5801                       		addq.b #4,d1
0001707E 0C01 0018                  		cmpi.b #$18,d1
00017082 6500                       		bcs.s Obj19_StarTrail2
00017084 7200                       		moveq #0,d1
00017086                            
00017086                            Obj19_StarTrail2:
00017086 1141 0030                  		move.b d1,$30(a0)
0001708A                            
0001708A                            Obj19_StarTrail2a:
0001708A 43F8 CB00                  		lea ($FFFFCB00).w,a1
0001708E 43F1 0000                  		lea (a1,d0.w),a1
00017092 3159 0008                  		move.w (a1)+,8(a0)
00017096 3159 000C                  		move.w (a1)+,$C(a0)
0001709A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000170A0 43F9 0000 0000             		lea (Ani_Shield).l,a1
000170A6 4EB9 0000 C7F4             		jsr (AnimateSprite).l
000170AC 4EF9 0000 F70C             		jmp (DisplaySprite).l
000170B2                            ; ===========================================================================
000170B2                            
000170B2                            Obj19_Delete2: ; XREF: Obj19_Stars
000170B2 4EF9 0000 F74C             		jmp (DeleteObject).l
000170B2 4EF9 0000 F74C             		jmp (DeleteObject).l
000170B8                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000170B8                            ; ---------------------------------------------------------------------------
000170B8                            ; Object 4A - special stage entry from beta
000170B8                            ; ---------------------------------------------------------------------------
000170B8                            
000170B8                            VanishSonic:
000170B8 7000                       		moveq	#0,d0
000170BA 1028 0024                  		move.b	obRoutine(a0),d0
000170BE 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000170C2 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000170C6                            ; ===========================================================================
000170C6 0000                       Van_Index:	dc.w Van_Main-Van_Index
000170C8 0000                       		dc.w Van_RmvSonic-Van_Index
000170CA 0000                       		dc.w Van_LoadSonic-Van_Index
000170CC                            
000170CC =00000030                  van_time:	equ $30		; time for Sonic to disappear
000170CC                            ; ===========================================================================
000170CC                            
000170CC                            Van_Main:	; Routine 0
000170CC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000170D0 6700                       		beq.s	@isempty	; if yes, branch
000170D2 4E75                       		rts	
000170D4                            
000170D4                            	@isempty:
000170D4 5428 0024                  		addq.b	#2,obRoutine(a0)
000170D8 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
000170E0 117C 0004 0001             		move.b	#4,obRender(a0)
000170E6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000170EC 117C 0038 0014             		move.b	#$38,obActWid(a0)
000170F2 317C 0541 0002             		move.w	#$541,obGfx(a0)
000170F8 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
000170FE                            
000170FE                            Van_RmvSonic:	; Routine 2
000170FE 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017104 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
0001710A 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017110 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017116 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001711C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017122 6600                       		bne.s	@display
00017124 4A38 D000                  		tst.b	(v_player).w
00017128 6700                       		beq.s	@display
0001712A 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
0001713A                            
0001713A                            	@display:
0001713A 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00017140                            ; ===========================================================================
00017140                            
00017140                            Van_LoadSonic:	; Routine 4
00017140 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017144 6600                       		bne.s	@wait		; if time remains, branch
00017146 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001714C 4EF9 0000 F74C             		jmp	(DeleteObject).l
00017152                            
00017152                            	@wait:
00017152 4E75                       		rts	
00017152 4E75                       		rts	
00017154                            		include	"_incObj\08 Water Splash.asm"
00017154                            ; ---------------------------------------------------------------------------
00017154                            ; Object 08 - water splash (LZ)
00017154                            ; ---------------------------------------------------------------------------
00017154                            
00017154                            Splash:
00017154 7000                       		moveq	#0,d0
00017156 1028 0024                  		move.b	obRoutine(a0),d0
0001715A 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
0001715E 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017162                            ; ===========================================================================
00017162 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017164 0000                       		dc.w Spla_Display-Spla_Index
00017166 0000                       		dc.w Spla_Delete-Spla_Index
00017168                            ; ===========================================================================
00017168                            
00017168                            Spla_Main:    ; Routine 0
00017168 5428 0024                          addq.b    #2,obRoutine(a0)
0001716C 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017174 0028 0004 0001                     ori.b    #4,obRender(a0)
0001717A 117C 0001 0018                     move.b    #1,obPriority(a0)
00017180 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017186 317C 4259 0002                     move.w    #$4259,obGfx(a0)
0001718C 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017192                            
00017192                            Spla_Display:    ; Routine 2
00017192                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017192 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017198 43F9 0000 0000                     lea    (Ani_Splash).l,a1
0001719E 4EB9 0000 C7F4                     jsr    (AnimateSprite).l
000171A4 4EF9 0000 F70C                     jmp    (DisplaySprite).l
000171AA                            ; ===========================================================================
000171AA                            
000171AA                            Spla_Delete:	; Routine 4
000171AA 4EF9 0000 F74C             		jmp	(DeleteObject).l	; delete when animation	is complete
000171AA 4EF9 0000 F74C             		jmp	(DeleteObject).l	; delete when animation	is complete
000171B0                            		include	"_anim\Shield and Invincibility.asm"
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            ; Animation script - shield and invincibility stars
000171B0                            ; ---------------------------------------------------------------------------
000171B0 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000171B2 0000                       		dc.w @stars1-Ani_Shield
000171B4 0000                       		dc.w @stars2-Ani_Shield
000171B6 0000                       		dc.w @stars3-Ani_Shield
000171B8 0000                       		dc.w @stars4-Ani_Shield
000171BA 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000171C2 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000171C8 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000171D9 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
000171E2 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000171F3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
000171FC 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001720D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017216                            		even
00017216                            		even
00017216                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017216                            ; --------------------------------------------------------------------------------
00017216                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017216                            ; --------------------------------------------------------------------------------
00017216                            
00017216                            SME_7M_8q:	
00017216 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
0001721A 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
0001721E 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
00017222 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017226 00                         SME_7M_8q_10:	dc.b 0	
00017227 04                         SME_7M_8q_11:	dc.b 4	
00017228 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001722D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017232 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017237 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001723C 04                         SME_7M_8q_26:	dc.b 4	
0001723D E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
00017242 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017247 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
0001724C 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
00017251 04                         SME_7M_8q_3B:	dc.b 4	
00017252 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017257 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001725C 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017261 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017266 04                         SME_7M_8q_50:	dc.b 4	
00017267 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001726C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017271 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017276 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
0001727B 04                         SME_7M_8q_65:	dc.b 4	
0001727C E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017281 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017286 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
0001728B 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017290 04                         SME_7M_8q_7A:	dc.b 4	
00017291 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
00017296 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
0001729B 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000172A0 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000172A5 04                         SME_7M_8q_8F:	dc.b 4	
000172A6 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000172AB E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000172B0 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000172B5 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000172BA                            		even
000172BA                            		even
000172BA                            Map_GShield:	include	"_maps\Gold Shield.asm"
000172BA                            ; --------------------------------------------------------------------------------
000172BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000172BA                            ; --------------------------------------------------------------------------------
000172BA                            
000172BA                            SME_X5P7B:	
000172BA 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000172BE 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000172C2 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000172C6 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000172CA 00                         SME_X5P7B_10:	dc.b 0	
000172CB 04                         SME_X5P7B_11:	dc.b 4	
000172CC E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000172D1 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000172D6 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000172DB 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000172E0 04                         SME_X5P7B_26:	dc.b 4	
000172E1 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000172E6 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000172EB 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000172F0 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000172F5 04                         SME_X5P7B_3B:	dc.b 4	
000172F6 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000172FB E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017300 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017305 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001730A 04                         SME_X5P7B_50:	dc.b 4	
0001730B E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017310 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017315 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001731A 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001731F 04                         SME_X5P7B_65:	dc.b 4	
00017320 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017325 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001732A 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001732F 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017334 04                         SME_X5P7B_7A:	dc.b 4	
00017335 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001733A E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
0001733F 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017344 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017349 04                         SME_X5P7B_8F:	dc.b 4	
0001734A E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
0001734F E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017354 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017359 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
0001735E                            		even
0001735E                            		even
0001735E                            		include	"_anim\Special Stage Entry (Unused).asm"
0001735E                            ; ---------------------------------------------------------------------------
0001735E                            ; Animation script - special stage entry effect from beta
0001735E                            ; ---------------------------------------------------------------------------
0001735E 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017360 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017374                            		even
00017374                            		even
00017374                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017374                            ; ---------------------------------------------------------------------------
00017374                            ; Sprite mappings - special stage entry	from beta
00017374                            ; ---------------------------------------------------------------------------
00017374                            Map_Vanish_internal:
00017374 0000                       		dc.w @flash1-Map_Vanish_internal
00017376 0000                       		dc.w @flash2-Map_Vanish_internal
00017378 0000                       		dc.w @flash3-Map_Vanish_internal
0001737A 0000                       		dc.w @sparkle1-Map_Vanish_internal
0001737C 0000                       		dc.w @sparkle2-Map_Vanish_internal
0001737E 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017380 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017382 0000                       		dc.w @blank-Map_Vanish_internal
00017384 03                         @flash1:	dc.b 3
00017385 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001738A 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001738F 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017394 03                         @flash2:	dc.b 3
00017395 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001739A 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001739F 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000173A4 05                         @flash3:	dc.b 5
000173A5 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000173AA EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000173AF FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000173B4 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000173B9 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000173BE 09                         @sparkle1:	dc.b 9
000173BF F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000173C4 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000173C9 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000173CE 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000173D3 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000173D8 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000173DD F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000173E2 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000173E7 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000173EC 12                         @sparkle2:	dc.b $12
000173ED 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000173F2 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000173F7 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000173FC 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017401 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00017406 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001740B 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017410 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017415 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001741A 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001741F 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017424 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017429 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001742E F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017433 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017438 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001743D 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017442 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00017447 11                         @sparkle3:	dc.b $11
00017448 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001744D F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017452 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017457 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001745C 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017461 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017466 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001746B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017470 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017475 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001747A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001747F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017484 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017489 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001748E F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017493 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017498 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001749D 09                         @sparkle4:	dc.b 9
0001749E FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000174A3 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000174A8 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000174AD 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000174B2 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000174B7 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000174BC 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000174C1 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000174C6 04                         		dc.b 4
000174C7 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000174CC                            		even
000174CC                            		even
000174CC                            		include	"_anim\Water Splash.asm"
000174CC                            ; ---------------------------------------------------------------------------
000174CC                            ; Animation script - water splash (LZ)
000174CC                            ; ---------------------------------------------------------------------------
000174CC 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000174CE 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000174D4 00                         		even
000174D4 00                         		even
000174D4                            Map_Splash:	include	"_maps\Water Splash.asm"
000174D4                            ; ---------------------------------------------------------------------------
000174D4                            ; Sprite mappings - water splash (LZ)
000174D4                            ; ---------------------------------------------------------------------------
000174D4                            Map_Splash_internal:
000174D4 0000                       		dc.w @splash1-Map_Splash_internal
000174D6 0000                       		dc.w @splash2-Map_Splash_internal
000174D8 0000                       		dc.w @splash3-Map_Splash_internal
000174DA 02                         @splash1:	dc.b 2
000174DB F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000174E0 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000174E5 02                         @splash2:	dc.b 2
000174E6 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000174EB EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000174F0 01                         @splash3:	dc.b 1
000174F1 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000174F6                            		even
000174F6                            		even
000174F6                            
000174F6                            		include	"_incObj\Sonic AnglePos.asm"
000174F6                            ; ---------------------------------------------------------------------------
000174F6                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000174F6                            ; ---------------------------------------------------------------------------
000174F6                            
000174F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174F6                            
000174F6                            
000174F6                            Sonic_AnglePos:
000174F6 0828 0003 0022             		btst	#3,obStatus(a0)
000174FC 6700                       		beq.s	loc_14602
000174FE 7000                       		moveq	#0,d0
00017500 11C0 F768                  		move.b	d0,($FFFFF768).w
00017504 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017508 4E75                       		rts	
0001750A                            ; ===========================================================================
0001750A                            
0001750A                            loc_14602:
0001750A 7003                       		moveq	#3,d0
0001750C 11C0 F768                  		move.b	d0,($FFFFF768).w
00017510 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017514 1028 0026                  		move.b	obAngle(a0),d0
00017518 0600 0020                  		addi.b	#$20,d0
0001751C 6A00                       		bpl.s	loc_14624
0001751E 1028 0026                  		move.b	obAngle(a0),d0
00017522 6A00                       		bpl.s	loc_1461E
00017524 5300                       		subq.b	#1,d0
00017526                            
00017526                            loc_1461E:
00017526 0600 0020                  		addi.b	#$20,d0
0001752A 6000                       		bra.s	loc_14630
0001752C                            ; ===========================================================================
0001752C                            
0001752C                            loc_14624:
0001752C 1028 0026                  		move.b	obAngle(a0),d0
00017530 6A00                       		bpl.s	loc_1462C
00017532 5200                       		addq.b	#1,d0
00017534                            
00017534                            loc_1462C:
00017534 0600 001F                  		addi.b	#$1F,d0
00017538                            
00017538                            loc_14630:
00017538 0200 00C0                  		andi.b	#$C0,d0
0001753C 0C00 0040                  		cmpi.b	#$40,d0
00017540 6700 0000                  		beq.w	Sonic_WalkVertL
00017544 0C00 0080                  		cmpi.b	#$80,d0
00017548 6700 0000                  		beq.w	Sonic_WalkCeiling
0001754C 0C00 00C0                  		cmpi.b	#$C0,d0
00017550 6700 0000                  		beq.w	Sonic_WalkVertR
00017554 3428 000C                  		move.w	obY(a0),d2
00017558 3628 0008                  		move.w	obX(a0),d3
0001755C 7000                       		moveq	#0,d0
0001755E 1028 0016                  		move.b	obHeight(a0),d0
00017562 4880                       		ext.w	d0
00017564 D440                       		add.w	d0,d2
00017566 1028 0017                  		move.b	obWidth(a0),d0
0001756A 4880                       		ext.w	d0
0001756C D640                       		add.w	d0,d3
0001756E 49F8 F768                  		lea	($FFFFF768).w,a4
00017572 367C 0010                  		movea.w	#$10,a3
00017576 3C3C 0000                  		move.w	#0,d6
0001757A 7A0D                       		moveq	#$D,d5
0001757C 6100 0000                  		bsr.w	FindFloor
00017580 3F01                       		move.w	d1,-(sp)
00017582 3428 000C                  		move.w	obY(a0),d2
00017586 3628 0008                  		move.w	obX(a0),d3
0001758A 7000                       		moveq	#0,d0
0001758C 1028 0016                  		move.b	obHeight(a0),d0
00017590 4880                       		ext.w	d0
00017592 D440                       		add.w	d0,d2
00017594 1028 0017                  		move.b	obWidth(a0),d0
00017598 4880                       		ext.w	d0
0001759A 4440                       		neg.w	d0
0001759C D640                       		add.w	d0,d3
0001759E 49F8 F76A                  		lea	($FFFFF76A).w,a4
000175A2 367C 0010                  		movea.w	#$10,a3
000175A6 3C3C 0000                  		move.w	#0,d6
000175AA 7A0D                       		moveq	#$D,d5
000175AC 6100 0000                  		bsr.w	FindFloor
000175B0 301F                       		move.w	(sp)+,d0
000175B2 6100 0000                  		bsr.w	Sonic_Angle
000175B6 4A41                       		tst.w	d1
000175B8 6700                       		beq.s	locret_146BE
000175BA 6A00                       		bpl.s	loc_146C0
000175BC 0C41 FFF2                  		cmpi.w	#-$E,d1
000175C0 6D00                       		blt.s	locret_146E6
000175C2 D368 000C                  		add.w	d1,obY(a0)
000175C6                            
000175C6                            locret_146BE:
000175C6 4E75                       		rts	
000175C8                            ; ===========================================================================
000175C8                            
000175C8                            loc_146C0:
000175C8 0C41 000E                  		cmpi.w	#$E,d1
000175CC 6E00                       		bgt.s	loc_146CC
000175CE                            
000175CE                            loc_146C6:
000175CE D368 000C                  		add.w	d1,obY(a0)
000175D2 4E75                       		rts	
000175D4                            ; ===========================================================================
000175D4                            
000175D4                            loc_146CC:
000175D4 4A28 0038                  		tst.b	$38(a0)
000175D8 66F4                       		bne.s	loc_146C6
000175DA 08E8 0001 0022             		bset	#1,obStatus(a0)
000175E0 08A8 0005 0022             		bclr	#5,obStatus(a0)
000175E6 117C 0001 001D             		move.b	#1,obNextAni(a0)
000175EC 4E75                       		rts	
000175EE                            ; ===========================================================================
000175EE                            
000175EE                            locret_146E6:
000175EE 4E75                       		rts	
000175F0                            ; End of function Sonic_AnglePos
000175F0                            
000175F0                            ; ===========================================================================
000175F0 2428 0008                  		move.l	obX(a0),d2
000175F4 3028 0010                  		move.w	obVelX(a0),d0
000175F8 48C0                       		ext.l	d0
000175FA E180                       		asl.l	#8,d0
000175FC 9480                       		sub.l	d0,d2
000175FE 2142 0008                  		move.l	d2,obX(a0)
00017602 303C 0038                  		move.w	#$38,d0
00017606 48C0                       		ext.l	d0
00017608 E180                       		asl.l	#8,d0
0001760A 9680                       		sub.l	d0,d3
0001760C 2143 000C                  		move.l	d3,obY(a0)
00017610 4E75                       		rts	
00017612                            ; ===========================================================================
00017612                            
00017612                            locret_1470A:
00017612 4E75                       		rts	
00017614                            ; ===========================================================================
00017614 2628 000C                  		move.l	obY(a0),d3
00017618 3028 0012                  		move.w	obVelY(a0),d0
0001761C 0440 0038                  		subi.w	#$38,d0
00017620 3140 0012                  		move.w	d0,obVelY(a0)
00017624 48C0                       		ext.l	d0
00017626 E180                       		asl.l	#8,d0
00017628 9680                       		sub.l	d0,d3
0001762A 2143 000C                  		move.l	d3,obY(a0)
0001762E 4E75                       		rts	
00017630 4E75                       		rts	
00017632                            ; ===========================================================================
00017632 2428 0008                  		move.l	obX(a0),d2
00017636 2628 000C                  		move.l	obY(a0),d3
0001763A 3028 0010                  		move.w	obVelX(a0),d0
0001763E 48C0                       		ext.l	d0
00017640 E180                       		asl.l	#8,d0
00017642 9480                       		sub.l	d0,d2
00017644 3028 0012                  		move.w	obVelY(a0),d0
00017648 48C0                       		ext.l	d0
0001764A E180                       		asl.l	#8,d0
0001764C 9680                       		sub.l	d0,d3
0001764E 2142 0008                  		move.l	d2,obX(a0)
00017652 2143 000C                  		move.l	d3,obY(a0)
00017656 4E75                       		rts	
00017658                            
00017658                            ; ---------------------------------------------------------------------------
00017658                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017658                            ; ---------------------------------------------------------------------------
00017658                            
00017658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017658                            
00017658                            
00017658                            Sonic_Angle:
00017658 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001765C B240                       		cmp.w	d0,d1
0001765E 6F00                       		ble.s	loc_1475E
00017660 1438 F768                  		move.b	($FFFFF768).w,d2
00017664 3200                       		move.w	d0,d1
00017666                            
00017666                            loc_1475E:
00017666 0802 0000                  		btst	#0,d2
0001766A 6600                       		bne.s	loc_1476A
0001766C 1142 0026                  		move.b	d2,obAngle(a0)
00017670 4E75                       		rts	
00017672                            ; ===========================================================================
00017672                            
00017672                            loc_1476A:
00017672 1428 0026                  		move.b	obAngle(a0),d2
00017676 0602 0020                  		addi.b	#$20,d2
0001767A 0202 00C0                  		andi.b	#$C0,d2
0001767E 1142 0026                  		move.b	d2,obAngle(a0)
00017682 4E75                       		rts	
00017684                            ; End of function Sonic_Angle
00017684                            
00017684                            ; ---------------------------------------------------------------------------
00017684                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017684                            ; ---------------------------------------------------------------------------
00017684                            
00017684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017684                            
00017684                            
00017684                            Sonic_WalkVertR:
00017684 3428 000C                  		move.w	obY(a0),d2
00017688 3628 0008                  		move.w	obX(a0),d3
0001768C 7000                       		moveq	#0,d0
0001768E 1028 0017                  		move.b	obWidth(a0),d0
00017692 4880                       		ext.w	d0
00017694 4440                       		neg.w	d0
00017696 D440                       		add.w	d0,d2
00017698 1028 0016                  		move.b	obHeight(a0),d0
0001769C 4880                       		ext.w	d0
0001769E D640                       		add.w	d0,d3
000176A0 49F8 F768                  		lea	($FFFFF768).w,a4
000176A4 367C 0010                  		movea.w	#$10,a3
000176A8 3C3C 0000                  		move.w	#0,d6
000176AC 7A0D                       		moveq	#$D,d5
000176AE 6100 0000                  		bsr.w	FindWall
000176B2 3F01                       		move.w	d1,-(sp)
000176B4 3428 000C                  		move.w	obY(a0),d2
000176B8 3628 0008                  		move.w	obX(a0),d3
000176BC 7000                       		moveq	#0,d0
000176BE 1028 0017                  		move.b	obWidth(a0),d0
000176C2 4880                       		ext.w	d0
000176C4 D440                       		add.w	d0,d2
000176C6 1028 0016                  		move.b	obHeight(a0),d0
000176CA 4880                       		ext.w	d0
000176CC D640                       		add.w	d0,d3
000176CE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000176D2 367C 0010                  		movea.w	#$10,a3
000176D6 3C3C 0000                  		move.w	#0,d6
000176DA 7A0D                       		moveq	#$D,d5
000176DC 6100 0000                  		bsr.w	FindWall
000176E0 301F                       		move.w	(sp)+,d0
000176E2 6100 FF74                  		bsr.w	Sonic_Angle
000176E6 4A41                       		tst.w	d1
000176E8 6700                       		beq.s	locret_147F0
000176EA 6A00                       		bpl.s	loc_147F2
000176EC 0C41 FFF2                  		cmpi.w	#-$E,d1
000176F0 6D00 FF20                  		blt.w	locret_1470A
000176F4 D368 0008                  		add.w	d1,obX(a0)
000176F8                            
000176F8                            locret_147F0:
000176F8 4E75                       		rts	
000176FA                            ; ===========================================================================
000176FA                            
000176FA                            loc_147F2:
000176FA 0C41 000E                  		cmpi.w	#$E,d1
000176FE 6E00                       		bgt.s	loc_147FE
00017700                            
00017700                            loc_147F8:
00017700 D368 0008                  		add.w	d1,obX(a0)
00017704 4E75                       		rts	
00017706                            ; ===========================================================================
00017706                            
00017706                            loc_147FE:
00017706 4A28 0038                  		tst.b	$38(a0)
0001770A 66F4                       		bne.s	loc_147F8
0001770C 08E8 0001 0022             		bset	#1,obStatus(a0)
00017712 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017718 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001771E 4E75                       		rts	
00017720                            ; End of function Sonic_WalkVertR
00017720                            
00017720                            ; ---------------------------------------------------------------------------
00017720                            ; Subroutine allowing Sonic to walk upside-down
00017720                            ; ---------------------------------------------------------------------------
00017720                            
00017720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017720                            
00017720                            
00017720                            Sonic_WalkCeiling:
00017720 3428 000C                  		move.w	obY(a0),d2
00017724 3628 0008                  		move.w	obX(a0),d3
00017728 7000                       		moveq	#0,d0
0001772A 1028 0016                  		move.b	obHeight(a0),d0
0001772E 4880                       		ext.w	d0
00017730 9440                       		sub.w	d0,d2
00017732 0A42 000F                  		eori.w	#$F,d2
00017736 1028 0017                  		move.b	obWidth(a0),d0
0001773A 4880                       		ext.w	d0
0001773C D640                       		add.w	d0,d3
0001773E 49F8 F768                  		lea	($FFFFF768).w,a4
00017742 367C FFF0                  		movea.w	#-$10,a3
00017746 3C3C 1000                  		move.w	#$1000,d6
0001774A 7A0D                       		moveq	#$D,d5
0001774C 6100 0000                  		bsr.w	FindFloor
00017750 3F01                       		move.w	d1,-(sp)
00017752 3428 000C                  		move.w	obY(a0),d2
00017756 3628 0008                  		move.w	obX(a0),d3
0001775A 7000                       		moveq	#0,d0
0001775C 1028 0016                  		move.b	obHeight(a0),d0
00017760 4880                       		ext.w	d0
00017762 9440                       		sub.w	d0,d2
00017764 0A42 000F                  		eori.w	#$F,d2
00017768 1028 0017                  		move.b	obWidth(a0),d0
0001776C 4880                       		ext.w	d0
0001776E 9640                       		sub.w	d0,d3
00017770 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017774 367C FFF0                  		movea.w	#-$10,a3
00017778 3C3C 1000                  		move.w	#$1000,d6
0001777C 7A0D                       		moveq	#$D,d5
0001777E 6100 0000                  		bsr.w	FindFloor
00017782 301F                       		move.w	(sp)+,d0
00017784 6100 FED2                  		bsr.w	Sonic_Angle
00017788 4A41                       		tst.w	d1
0001778A 6700                       		beq.s	locret_14892
0001778C 6A00                       		bpl.s	loc_14894
0001778E 0C41 FFF2                  		cmpi.w	#-$E,d1
00017792 6D00 FE5A                  		blt.w	locret_146E6
00017796 9368 000C                  		sub.w	d1,obY(a0)
0001779A                            
0001779A                            locret_14892:
0001779A 4E75                       		rts	
0001779C                            ; ===========================================================================
0001779C                            
0001779C                            loc_14894:
0001779C 0C41 000E                  		cmpi.w	#$E,d1
000177A0 6E00                       		bgt.s	loc_148A0
000177A2                            
000177A2                            loc_1489A:
000177A2 9368 000C                  		sub.w	d1,obY(a0)
000177A6 4E75                       		rts	
000177A8                            ; ===========================================================================
000177A8                            
000177A8                            loc_148A0:
000177A8 4A28 0038                  		tst.b	$38(a0)
000177AC 66F4                       		bne.s	loc_1489A
000177AE 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177BA 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177C0 4E75                       		rts	
000177C2                            ; End of function Sonic_WalkCeiling
000177C2                            
000177C2                            ; ---------------------------------------------------------------------------
000177C2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000177C2                            ; ---------------------------------------------------------------------------
000177C2                            
000177C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177C2                            
000177C2                            
000177C2                            Sonic_WalkVertL:
000177C2 3428 000C                  		move.w	obY(a0),d2
000177C6 3628 0008                  		move.w	obX(a0),d3
000177CA 7000                       		moveq	#0,d0
000177CC 1028 0017                  		move.b	obWidth(a0),d0
000177D0 4880                       		ext.w	d0
000177D2 9440                       		sub.w	d0,d2
000177D4 1028 0016                  		move.b	obHeight(a0),d0
000177D8 4880                       		ext.w	d0
000177DA 9640                       		sub.w	d0,d3
000177DC 0A43 000F                  		eori.w	#$F,d3
000177E0 49F8 F768                  		lea	($FFFFF768).w,a4
000177E4 367C FFF0                  		movea.w	#-$10,a3
000177E8 3C3C 0800                  		move.w	#$800,d6
000177EC 7A0D                       		moveq	#$D,d5
000177EE 6100 0000                  		bsr.w	FindWall
000177F2 3F01                       		move.w	d1,-(sp)
000177F4 3428 000C                  		move.w	obY(a0),d2
000177F8 3628 0008                  		move.w	obX(a0),d3
000177FC 7000                       		moveq	#0,d0
000177FE 1028 0017                  		move.b	obWidth(a0),d0
00017802 4880                       		ext.w	d0
00017804 D440                       		add.w	d0,d2
00017806 1028 0016                  		move.b	obHeight(a0),d0
0001780A 4880                       		ext.w	d0
0001780C 9640                       		sub.w	d0,d3
0001780E 0A43 000F                  		eori.w	#$F,d3
00017812 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017816 367C FFF0                  		movea.w	#-$10,a3
0001781A 3C3C 0800                  		move.w	#$800,d6
0001781E 7A0D                       		moveq	#$D,d5
00017820 6100 0000                  		bsr.w	FindWall
00017824 301F                       		move.w	(sp)+,d0
00017826 6100 FE30                  		bsr.w	Sonic_Angle
0001782A 4A41                       		tst.w	d1
0001782C 6700                       		beq.s	locret_14934
0001782E 6A00                       		bpl.s	loc_14936
00017830 0C41 FFF2                  		cmpi.w	#-$E,d1
00017834 6D00 FDDC                  		blt.w	locret_1470A
00017838 9368 0008                  		sub.w	d1,obX(a0)
0001783C                            
0001783C                            locret_14934:
0001783C 4E75                       		rts	
0001783E                            ; ===========================================================================
0001783E                            
0001783E                            loc_14936:
0001783E 0C41 000E                  		cmpi.w	#$E,d1
00017842 6E00                       		bgt.s	loc_14942
00017844                            
00017844                            loc_1493C:
00017844 9368 0008                  		sub.w	d1,obX(a0)
00017848 4E75                       		rts	
0001784A                            ; ===========================================================================
0001784A                            
0001784A                            loc_14942:
0001784A 4A28 0038                  		tst.b	$38(a0)
0001784E 66F4                       		bne.s	loc_1493C
00017850 08E8 0001 0022             		bset	#1,obStatus(a0)
00017856 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001785C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017862 4E75                       		rts	
00017864                            ; End of function Sonic_WalkVertL
00017864                            ; End of function Sonic_WalkVertL
00017864                            
00017864                            		include	"_incObj\sub FindNearestTile.asm"
00017864                            ; ---------------------------------------------------------------------------
00017864                            ; Subroutine to	find which tile	the object is standing on
00017864                            
00017864                            ; input:
00017864                            ;	d2 = y-position of object's bottom edge
00017864                            ;	d3 = x-position of object
00017864                            
00017864                            ; output:
00017864                            ;	a1 = address within 256x256 mappings where object is standing
00017864                            ;	     (refers to a 16x16 tile number)
00017864                            ; ---------------------------------------------------------------------------
00017864                            
00017864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017864                            
00017864                            
00017864                            FindNearestTile:
00017864 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017866 E248                       		lsr.w	#1,d0
00017868 0240 0380                  		andi.w	#$380,d0
0001786C 3203                       		move.w	d3,d1		; get x-pos. of object
0001786E E049                       		lsr.w	#8,d1
00017870 0241 007F                  		andi.w	#$7F,d1
00017874 D041                       		add.w	d1,d0		; combine
00017876 72FF                       		moveq	#-1,d1
00017878 43F8 A400                  		lea	(v_lvllayout).w,a1
0001787C 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017880 6700                       		beq.s	@blanktile	; branch if 0
00017882 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017884 5301                       		subq.b	#1,d1
00017886 4881                       		ext.w	d1
00017888 EE59                       		ror.w	#7,d1
0001788A 3002                       		move.w	d2,d0
0001788C D040                       		add.w	d0,d0
0001788E 0240 01E0                  		andi.w	#$1E0,d0
00017892 D240                       		add.w	d0,d1
00017894 3003                       		move.w	d3,d0
00017896 E648                       		lsr.w	#3,d0
00017898 0240 001E                  		andi.w	#$1E,d0
0001789C D240                       		add.w	d0,d1
0001789E                            
0001789E                            @blanktile:
0001789E 2241                       		movea.l	d1,a1
000178A0 4E75                       		rts	
000178A2                            ; ===========================================================================
000178A2                            
000178A2                            @specialtile:
000178A2 0241 007F                  		andi.w	#$7F,d1
000178A6 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
000178AC 6700                       		beq.s	@treatasnormal	; if not, branch
000178AE 5241                       		addq.w	#1,d1
000178B0 0C41 0029                  		cmpi.w	#$29,d1
000178B4 6600                       		bne.s	@treatasnormal
000178B6 323C 0051                  		move.w	#$51,d1
000178BA                            
000178BA                            	@treatasnormal:
000178BA 5301                       		subq.b	#1,d1
000178BC EE59                       		ror.w	#7,d1
000178BE 3002                       		move.w	d2,d0
000178C0 D040                       		add.w	d0,d0
000178C2 0240 01E0                  		andi.w	#$1E0,d0
000178C6 D240                       		add.w	d0,d1
000178C8 3003                       		move.w	d3,d0
000178CA E648                       		lsr.w	#3,d0
000178CC 0240 001E                  		andi.w	#$1E,d0
000178D0 D240                       		add.w	d0,d1
000178D2 2241                       		movea.l	d1,a1
000178D4 4E75                       		rts	
000178D6                            ; End of function FindNearestTile
000178D6                            ; End of function FindNearestTile
000178D6                            		include	"_incObj\sub FindFloor.asm"
000178D6                            ; ---------------------------------------------------------------------------
000178D6                            ; Subroutine to	find the floor
000178D6                            
000178D6                            ; input:
000178D6                            ;	d2 = y-position of object's bottom edge
000178D6                            ;	d3 = x-position of object
000178D6                            ;	d5 = bit to test for solidness
000178D6                            
000178D6                            ; output:
000178D6                            ;	d1 = distance to the floor
000178D6                            ;	a1 = address within 256x256 mappings where object is standing
000178D6                            ;	     (refers to a 16x16 tile number)
000178D6                            ;	(a4) = floor angle
000178D6                            ; ---------------------------------------------------------------------------
000178D6                            
000178D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178D6                            
000178D6                            
000178D6                            FindFloor:
000178D6 618C                       		bsr.s	FindNearestTile
000178D8 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
000178DA 3800                       		move.w	d0,d4
000178DC 0240 07FF                  		andi.w	#$7FF,d0
000178E0 6700                       		beq.s	@isblank	; branch if tile is blank
000178E2 0B04                       		btst	d5,d4		; is the tile solid?
000178E4 6600                       		bne.s	@issolid	; if yes, branch
000178E6                            
000178E6                            @isblank:
000178E6 D44B                       		add.w	a3,d2
000178E8 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
000178EC 944B                       		sub.w	a3,d2
000178EE 0641 0010                  		addi.w	#$10,d1		; return distance to floor
000178F2 4E75                       		rts	
000178F4                            ; ===========================================================================
000178F4                            
000178F4                            @issolid:
000178F4 2478 F796                  		movea.l	(v_collindex).w,a2
000178F8 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
000178FC 0240 00FF                  		andi.w	#$FF,d0
00017900 67E4                       		beq.s	@isblank	; branch if 0
00017902 45F9 0000 0000             		lea	(AngleMap).l,a2
00017908 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
0001790C E948                       		lsl.w	#4,d0
0001790E 3203                       		move.w	d3,d1		; get x-pos. of object
00017910 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017914 6700                       		beq.s	@noflip		; if not, branch
00017916 4641                       		not.w	d1
00017918 4414                       		neg.b	(a4)
0001791A                            
0001791A                            	@noflip:
0001791A 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001791E 6700                       		beq.s	@noflip2	; if not, branch
00017920 0614 0040                  		addi.b	#$40,(a4)
00017924 4414                       		neg.b	(a4)
00017926 0414 0040                  		subi.b	#$40,(a4)
0001792A                            
0001792A                            	@noflip2:
0001792A 0241 000F                  		andi.w	#$F,d1
0001792E D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017930 45F9 0000 0000             		lea	(CollArray1).l,a2
00017936 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
0001793A 4880                       		ext.w	d0
0001793C BD44                       		eor.w	d6,d4
0001793E 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017942 6700                       		beq.s	@noflip3	; if not, branch
00017944 4440                       		neg.w	d0
00017946                            
00017946                            	@noflip3:
00017946 4A40                       		tst.w	d0
00017948 679C                       		beq.s	@isblank	; branch if height is 0
0001794A 6B00                       		bmi.s	@negfloor	; branch if height is negative
0001794C 0C00 0010                  		cmpi.b	#$10,d0
00017950 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017952 3202                       		move.w	d2,d1		; get y-pos. of object
00017954 0241 000F                  		andi.w	#$F,d1
00017958 D041                       		add.w	d1,d0
0001795A 323C 000F                  		move.w	#$F,d1
0001795E 9240                       		sub.w	d0,d1		; return distance to floor
00017960 4E75                       		rts	
00017962                            ; ===========================================================================
00017962                            
00017962                            @negfloor:
00017962 3202                       		move.w	d2,d1
00017964 0241 000F                  		andi.w	#$F,d1
00017968 D041                       		add.w	d1,d0
0001796A 6A00 FF7A                  		bpl.w	@isblank
0001796E                            
0001796E                            @maxfloor:
0001796E 944B                       		sub.w	a3,d2
00017970 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017974 D44B                       		add.w	a3,d2
00017976 0441 0010                  		subi.w	#$10,d1		; return distance to floor
0001797A 4E75                       		rts	
0001797C                            ; End of function FindFloor
0001797C                            
0001797C                            
0001797C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001797C                            
0001797C                            
0001797C                            FindFloor2:
0001797C 6100 FEE6                  		bsr.w	FindNearestTile
00017980 3011                       		move.w	(a1),d0
00017982 3800                       		move.w	d0,d4
00017984 0240 07FF                  		andi.w	#$7FF,d0
00017988 6700                       		beq.s	@isblank2
0001798A 0B04                       		btst	d5,d4
0001798C 6600                       		bne.s	@issolid
0001798E                            
0001798E                            @isblank2:
0001798E 323C 000F                  		move.w	#$F,d1
00017992 3002                       		move.w	d2,d0
00017994 0240 000F                  		andi.w	#$F,d0
00017998 9240                       		sub.w	d0,d1
0001799A 4E75                       		rts	
0001799C                            ; ===========================================================================
0001799C                            
0001799C                            @issolid:
0001799C 2478 F796                  		movea.l	(v_collindex).w,a2
000179A0 1032 0000                  		move.b	(a2,d0.w),d0
000179A4 0240 00FF                  		andi.w	#$FF,d0
000179A8 67E4                       		beq.s	@isblank2
000179AA 45F9 0000 0000             		lea	(AngleMap).l,a2
000179B0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000179B4 E948                       		lsl.w	#4,d0
000179B6 3203                       		move.w	d3,d1
000179B8 0804 000B                  		btst	#$B,d4
000179BC 6700                       		beq.s	@noflip
000179BE 4641                       		not.w	d1
000179C0 4414                       		neg.b	(a4)
000179C2                            
000179C2                            	@noflip:
000179C2 0804 000C                  		btst	#$C,d4
000179C6 6700                       		beq.s	@noflip2
000179C8 0614 0040                  		addi.b	#$40,(a4)
000179CC 4414                       		neg.b	(a4)
000179CE 0414 0040                  		subi.b	#$40,(a4)
000179D2                            
000179D2                            	@noflip2:
000179D2 0241 000F                  		andi.w	#$F,d1
000179D6 D240                       		add.w	d0,d1
000179D8 45F9 0000 0000             		lea	(CollArray1).l,a2
000179DE 1032 1000                  		move.b	(a2,d1.w),d0
000179E2 4880                       		ext.w	d0
000179E4 BD44                       		eor.w	d6,d4
000179E6 0804 000C                  		btst	#$C,d4
000179EA 6700                       		beq.s	@noflip3
000179EC 4440                       		neg.w	d0
000179EE                            
000179EE                            	@noflip3:
000179EE 4A40                       		tst.w	d0
000179F0 679C                       		beq.s	@isblank2
000179F2 6B00                       		bmi.s	@negfloor
000179F4 3202                       		move.w	d2,d1
000179F6 0241 000F                  		andi.w	#$F,d1
000179FA D041                       		add.w	d1,d0
000179FC 323C 000F                  		move.w	#$F,d1
00017A00 9240                       		sub.w	d0,d1
00017A02 4E75                       		rts	
00017A04                            ; ===========================================================================
00017A04                            
00017A04                            @negfloor:
00017A04 3202                       		move.w	d2,d1
00017A06 0241 000F                  		andi.w	#$F,d1
00017A0A D041                       		add.w	d1,d0
00017A0C 6A00 FF80                  		bpl.w	@isblank2
00017A10 4641                       		not.w	d1
00017A12 4E75                       		rts	
00017A14                            ; End of function FindFloor2
00017A14                            ; End of function FindFloor2
00017A14                            		include	"_incObj\sub FindWall.asm"
00017A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A14                            
00017A14                            
00017A14                            FindWall:
00017A14 6100 FE4E                  		bsr.w	FindNearestTile
00017A18 3011                       		move.w	(a1),d0
00017A1A 3800                       		move.w	d0,d4
00017A1C 0240 07FF                  		andi.w	#$7FF,d0
00017A20 6700                       		beq.s	loc_14B1E
00017A22 0B04                       		btst	d5,d4
00017A24 6600                       		bne.s	loc_14B2C
00017A26                            
00017A26                            loc_14B1E:
00017A26 D64B                       		add.w	a3,d3
00017A28 6100 0000                  		bsr.w	FindWall2
00017A2C 964B                       		sub.w	a3,d3
00017A2E 0641 0010                  		addi.w	#$10,d1
00017A32 4E75                       		rts	
00017A34                            ; ===========================================================================
00017A34                            
00017A34                            loc_14B2C:
00017A34 2478 F796                  		movea.l	(v_collindex).w,a2
00017A38 1032 0000                  		move.b	(a2,d0.w),d0
00017A3C 0240 00FF                  		andi.w	#$FF,d0
00017A40 67E4                       		beq.s	loc_14B1E
00017A42 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A48 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A4C E948                       		lsl.w	#4,d0
00017A4E 3202                       		move.w	d2,d1
00017A50 0804 000C                  		btst	#$C,d4
00017A54 6700                       		beq.s	loc_14B5A
00017A56 4641                       		not.w	d1
00017A58 0614 0040                  		addi.b	#$40,(a4)
00017A5C 4414                       		neg.b	(a4)
00017A5E 0414 0040                  		subi.b	#$40,(a4)
00017A62                            
00017A62                            loc_14B5A:
00017A62 0804 000B                  		btst	#$B,d4
00017A66 6700                       		beq.s	loc_14B62
00017A68 4414                       		neg.b	(a4)
00017A6A                            
00017A6A                            loc_14B62:
00017A6A 0241 000F                  		andi.w	#$F,d1
00017A6E D240                       		add.w	d0,d1
00017A70 45F9 0000 0000             		lea	(CollArray2).l,a2
00017A76 1032 1000                  		move.b	(a2,d1.w),d0
00017A7A 4880                       		ext.w	d0
00017A7C BD44                       		eor.w	d6,d4
00017A7E 0804 000B                  		btst	#$B,d4
00017A82 6700                       		beq.s	loc_14B7E
00017A84 4440                       		neg.w	d0
00017A86                            
00017A86                            loc_14B7E:
00017A86 4A40                       		tst.w	d0
00017A88 679C                       		beq.s	loc_14B1E
00017A8A 6B00                       		bmi.s	loc_14B9A
00017A8C 0C00 0010                  		cmpi.b	#$10,d0
00017A90 6700                       		beq.s	loc_14BA6
00017A92 3203                       		move.w	d3,d1
00017A94 0241 000F                  		andi.w	#$F,d1
00017A98 D041                       		add.w	d1,d0
00017A9A 323C 000F                  		move.w	#$F,d1
00017A9E 9240                       		sub.w	d0,d1
00017AA0 4E75                       		rts	
00017AA2                            ; ===========================================================================
00017AA2                            
00017AA2                            loc_14B9A:
00017AA2 3203                       		move.w	d3,d1
00017AA4 0241 000F                  		andi.w	#$F,d1
00017AA8 D041                       		add.w	d1,d0
00017AAA 6A00 FF7A                  		bpl.w	loc_14B1E
00017AAE                            
00017AAE                            loc_14BA6:
00017AAE 964B                       		sub.w	a3,d3
00017AB0 6100 0000                  		bsr.w	FindWall2
00017AB4 D64B                       		add.w	a3,d3
00017AB6 0441 0010                  		subi.w	#$10,d1
00017ABA 4E75                       		rts	
00017ABC                            ; End of function FindWall
00017ABC                            
00017ABC                            
00017ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017ABC                            
00017ABC                            
00017ABC                            FindWall2:
00017ABC 6100 FDA6                  		bsr.w	FindNearestTile
00017AC0 3011                       		move.w	(a1),d0
00017AC2 3800                       		move.w	d0,d4
00017AC4 0240 07FF                  		andi.w	#$7FF,d0
00017AC8 6700                       		beq.s	loc_14BC6
00017ACA 0B04                       		btst	d5,d4
00017ACC 6600                       		bne.s	loc_14BD4
00017ACE                            
00017ACE                            loc_14BC6:
00017ACE 323C 000F                  		move.w	#$F,d1
00017AD2 3003                       		move.w	d3,d0
00017AD4 0240 000F                  		andi.w	#$F,d0
00017AD8 9240                       		sub.w	d0,d1
00017ADA 4E75                       		rts	
00017ADC                            ; ===========================================================================
00017ADC                            
00017ADC                            loc_14BD4:
00017ADC 2478 F796                  		movea.l	(v_collindex).w,a2
00017AE0 1032 0000                  		move.b	(a2,d0.w),d0
00017AE4 0240 00FF                  		andi.w	#$FF,d0
00017AE8 67E4                       		beq.s	loc_14BC6
00017AEA 45F9 0000 0000             		lea	(AngleMap).l,a2
00017AF0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017AF4 E948                       		lsl.w	#4,d0
00017AF6 3202                       		move.w	d2,d1
00017AF8 0804 000C                  		btst	#$C,d4
00017AFC 6700                       		beq.s	loc_14C02
00017AFE 4641                       		not.w	d1
00017B00 0614 0040                  		addi.b	#$40,(a4)
00017B04 4414                       		neg.b	(a4)
00017B06 0414 0040                  		subi.b	#$40,(a4)
00017B0A                            
00017B0A                            loc_14C02:
00017B0A 0804 000B                  		btst	#$B,d4
00017B0E 6700                       		beq.s	loc_14C0A
00017B10 4414                       		neg.b	(a4)
00017B12                            
00017B12                            loc_14C0A:
00017B12 0241 000F                  		andi.w	#$F,d1
00017B16 D240                       		add.w	d0,d1
00017B18 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B1E 1032 1000                  		move.b	(a2,d1.w),d0
00017B22 4880                       		ext.w	d0
00017B24 BD44                       		eor.w	d6,d4
00017B26 0804 000B                  		btst	#$B,d4
00017B2A 6700                       		beq.s	loc_14C26
00017B2C 4440                       		neg.w	d0
00017B2E                            
00017B2E                            loc_14C26:
00017B2E 4A40                       		tst.w	d0
00017B30 679C                       		beq.s	loc_14BC6
00017B32 6B00                       		bmi.s	loc_14C3C
00017B34 3203                       		move.w	d3,d1
00017B36 0241 000F                  		andi.w	#$F,d1
00017B3A D041                       		add.w	d1,d0
00017B3C 323C 000F                  		move.w	#$F,d1
00017B40 9240                       		sub.w	d0,d1
00017B42 4E75                       		rts	
00017B44                            ; ===========================================================================
00017B44                            
00017B44                            loc_14C3C:
00017B44 3203                       		move.w	d3,d1
00017B46 0241 000F                  		andi.w	#$F,d1
00017B4A D041                       		add.w	d1,d0
00017B4C 6A00 FF80                  		bpl.w	loc_14BC6
00017B50 4641                       		not.w	d1
00017B52 4E75                       		rts	
00017B54                            ; End of function FindWall2
00017B54                            ; End of function FindWall2
00017B54                            
00017B54                            ; ---------------------------------------------------------------------------
00017B54                            ; Unused floor/wall subroutine - logs something	to do with collision
00017B54                            ; ---------------------------------------------------------------------------
00017B54                            
00017B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B54                            
00017B54                            
00017B54                            FloorLog_Unk:
00017B54 4E75                       		rts	
00017B56                            
00017B56 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B5C 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B62 363C 00FF                  		move.w	#$FF,d3
00017B66                            
00017B66                            loc_14C5E:
00017B66 7A10                       		moveq	#$10,d5
00017B68 343C 000F                  		move.w	#$F,d2
00017B6C                            
00017B6C                            loc_14C64:
00017B6C 7800                       		moveq	#0,d4
00017B6E 323C 000F                  		move.w	#$F,d1
00017B72                            
00017B72                            loc_14C6A:
00017B72 3019                       		move.w	(a1)+,d0
00017B74 EAA8                       		lsr.l	d5,d0
00017B76 D944                       		addx.w	d4,d4
00017B78 51C9 FFF8                  		dbf	d1,loc_14C6A
00017B7C                            
00017B7C 34C4                       		move.w	d4,(a2)+
00017B7E 92FC 0020                  		suba.w	#$20,a1
00017B82 5345                       		subq.w	#1,d5
00017B84 51CA FFE6                  		dbf	d2,loc_14C64
00017B88                            
00017B88 D2FC 0020                  		adda.w	#$20,a1
00017B8C 51CB FFD8                  		dbf	d3,loc_14C5E
00017B90                            
00017B90 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B96 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B9C 6100                       		bsr.s	FloorLog_Unk2
00017B9E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017BA4 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BAA                            
00017BAA                            ; End of function FloorLog_Unk
00017BAA                            
00017BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BAA                            
00017BAA                            
00017BAA                            FloorLog_Unk2:
00017BAA 363C 0FFF                  		move.w	#$FFF,d3
00017BAE                            
00017BAE                            loc_14CA6:
00017BAE 7400                       		moveq	#0,d2
00017BB0 323C 000F                  		move.w	#$F,d1
00017BB4 3019                       		move.w	(a1)+,d0
00017BB6 6700                       		beq.s	loc_14CD4
00017BB8 6B00                       		bmi.s	loc_14CBE
00017BBA                            
00017BBA                            loc_14CB2:
00017BBA E248                       		lsr.w	#1,d0
00017BBC 6400                       		bhs.s	loc_14CB8
00017BBE 5202                       		addq.b	#1,d2
00017BC0                            
00017BC0                            loc_14CB8:
00017BC0 51C9 FFF8                  		dbf	d1,loc_14CB2
00017BC4                            
00017BC4 6000                       		bra.s	loc_14CD6
00017BC6                            ; ===========================================================================
00017BC6                            
00017BC6                            loc_14CBE:
00017BC6 0C40 FFFF                  		cmpi.w	#-1,d0
00017BCA 6700                       		beq.s	loc_14CD0
00017BCC                            
00017BCC                            loc_14CC4:
00017BCC E348                       		lsl.w	#1,d0
00017BCE 6400                       		bhs.s	loc_14CCA
00017BD0 5302                       		subq.b	#1,d2
00017BD2                            
00017BD2                            loc_14CCA:
00017BD2 51C9 FFF8                  		dbf	d1,loc_14CC4
00017BD6                            
00017BD6 6000                       		bra.s	loc_14CD6
00017BD8                            ; ===========================================================================
00017BD8                            
00017BD8                            loc_14CD0:
00017BD8 303C 0010                  		move.w	#$10,d0
00017BDC                            
00017BDC                            loc_14CD4:
00017BDC 3400                       		move.w	d0,d2
00017BDE                            
00017BDE                            loc_14CD6:
00017BDE 14C2                       		move.b	d2,(a2)+
00017BE0 51CB FFCC                  		dbf	d3,loc_14CA6
00017BE4                            
00017BE4 4E75                       		rts	
00017BE6                            
00017BE6                            ; End of function FloorLog_Unk2
00017BE6                            
00017BE6                            
00017BE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BE6                            
00017BE6                            
00017BE6                            Sonic_WalkSpeed:
00017BE6 2628 0008                  		move.l	obX(a0),d3
00017BEA 2428 000C                  		move.l	obY(a0),d2
00017BEE 3228 0010                  		move.w	obVelX(a0),d1
00017BF2 48C1                       		ext.l	d1
00017BF4 E181                       		asl.l	#8,d1
00017BF6 D681                       		add.l	d1,d3
00017BF8 3228 0012                  		move.w	obVelY(a0),d1
00017BFC 48C1                       		ext.l	d1
00017BFE E181                       		asl.l	#8,d1
00017C00 D481                       		add.l	d1,d2
00017C02 4842                       		swap	d2
00017C04 4843                       		swap	d3
00017C06 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017C0A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C0E 1200                       		move.b	d0,d1
00017C10 0600 0020                  		addi.b	#$20,d0
00017C14 6A00                       		bpl.s	loc_14D1A
00017C16 1001                       		move.b	d1,d0
00017C18 6A00                       		bpl.s	loc_14D14
00017C1A 5300                       		subq.b	#1,d0
00017C1C                            
00017C1C                            loc_14D14:
00017C1C 0600 0020                  		addi.b	#$20,d0
00017C20 6000                       		bra.s	loc_14D24
00017C22                            ; ===========================================================================
00017C22                            
00017C22                            loc_14D1A:
00017C22 1001                       		move.b	d1,d0
00017C24 6A00                       		bpl.s	loc_14D20
00017C26 5200                       		addq.b	#1,d0
00017C28                            
00017C28                            loc_14D20:
00017C28 0600 001F                  		addi.b	#$1F,d0
00017C2C                            
00017C2C                            loc_14D24:
00017C2C 0200 00C0                  		andi.b	#$C0,d0
00017C30 6700 0000                  		beq.w	loc_14DF0
00017C34 0C00 0080                  		cmpi.b	#$80,d0
00017C38 6700 0000                  		beq.w	loc_14F7C
00017C3C 0201 0038                  		andi.b	#$38,d1
00017C40 6600                       		bne.s	loc_14D3C
00017C42 5042                       		addq.w	#8,d2
00017C44                            
00017C44                            loc_14D3C:
00017C44 0C00 0040                  		cmpi.b	#$40,d0
00017C48 6700 0000                  		beq.w	loc_1504A
00017C4C 6000 0000                  		bra.w	loc_14EBC
00017C50                            
00017C50                            ; End of function Sonic_WalkSpeed
00017C50                            
00017C50                            
00017C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C50                            
00017C50                            
00017C50                            sub_14D48:
00017C50 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017C54 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C58 0600 0020                  		addi.b	#$20,d0
00017C5C 0200 00C0                  		andi.b	#$C0,d0
00017C60 0C00 0040                  		cmpi.b	#$40,d0
00017C64 6700 0000                  		beq.w	loc_14FD6
00017C68 0C00 0080                  		cmpi.b	#$80,d0
00017C6C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017C70 0C00 00C0                  		cmpi.b	#$C0,d0
00017C74 6700 0000                  		beq.w	sub_14E50
00017C78                            
00017C78                            ; End of function sub_14D48
00017C78                            
00017C78                            ; ---------------------------------------------------------------------------
00017C78                            ; Subroutine to	make Sonic land	on the floor after jumping
00017C78                            ; ---------------------------------------------------------------------------
00017C78                            
00017C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C78                            
00017C78                            
00017C78                            Sonic_HitFloor:
00017C78 3428 000C                  		move.w	obY(a0),d2
00017C7C 3628 0008                  		move.w	obX(a0),d3
00017C80 7000                       		moveq	#0,d0
00017C82 1028 0016                  		move.b	obHeight(a0),d0
00017C86 4880                       		ext.w	d0
00017C88 D440                       		add.w	d0,d2
00017C8A 1028 0017                  		move.b	obWidth(a0),d0
00017C8E 4880                       		ext.w	d0
00017C90 D640                       		add.w	d0,d3
00017C92 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C96 367C 0010                  		movea.w	#$10,a3
00017C9A 3C3C 0000                  		move.w	#0,d6
00017C9E 7A0D                       		moveq	#$D,d5
00017CA0 6100 FC34                  		bsr.w	FindFloor
00017CA4 3F01                       		move.w	d1,-(sp)
00017CA6 3428 000C                  		move.w	obY(a0),d2
00017CAA 3628 0008                  		move.w	obX(a0),d3
00017CAE 7000                       		moveq	#0,d0
00017CB0 1028 0016                  		move.b	obHeight(a0),d0
00017CB4 4880                       		ext.w	d0
00017CB6 D440                       		add.w	d0,d2
00017CB8 1028 0017                  		move.b	obWidth(a0),d0
00017CBC 4880                       		ext.w	d0
00017CBE 9640                       		sub.w	d0,d3
00017CC0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017CC4 367C 0010                  		movea.w	#$10,a3
00017CC8 3C3C 0000                  		move.w	#0,d6
00017CCC 7A0D                       		moveq	#$D,d5
00017CCE 6100 FC06                  		bsr.w	FindFloor
00017CD2 301F                       		move.w	(sp)+,d0
00017CD4 143C 0000                  		move.b	#0,d2
00017CD8                            
00017CD8                            loc_14DD0:
00017CD8 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017CDC B240                       		cmp.w	d0,d1
00017CDE 6F00                       		ble.s	loc_14DDE
00017CE0 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017CE4 C141                       		exg	d0,d1
00017CE6                            
00017CE6                            loc_14DDE:
00017CE6 0803 0000                  		btst	#0,d3
00017CEA 6700                       		beq.s	locret_14DE6
00017CEC 1602                       		move.b	d2,d3
00017CEE                            
00017CEE                            locret_14DE6:
00017CEE 4E75                       		rts	
00017CF0                            
00017CF0                            ; End of function Sonic_HitFloor
00017CF0                            
00017CF0                            ; ===========================================================================
00017CF0 3428 000C                  		move.w	obY(a0),d2
00017CF4 3628 0008                  		move.w	obX(a0),d3
00017CF8                            
00017CF8                            loc_14DF0:
00017CF8 0642 000A                  		addi.w	#$A,d2
00017CFC 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D00 367C 0010                  		movea.w	#$10,a3
00017D04 3C3C 0000                  		move.w	#0,d6
00017D08 7A0E                       		moveq	#$E,d5
00017D0A 6100 FBCA                  		bsr.w	FindFloor
00017D0E 143C 0000                  		move.b	#0,d2
00017D12                            
00017D12                            loc_14E0A:
00017D12 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D16 0803 0000                  		btst	#0,d3
00017D1A 6700                       		beq.s	locret_14E16
00017D1C 1602                       		move.b	d2,d3
00017D1E                            
00017D1E                            locret_14E16:
00017D1E 4E75                       		rts	
00017D20                            
00017D20                            		include	"_incObj\sub ObjFloorDist.asm"
00017D20                            ; ---------------------------------------------------------------------------
00017D20                            ; Subroutine to find the distance of an object to the floor
00017D20                            
00017D20                            ; input:
00017D20                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017D20                            
00017D20                            ; output:
00017D20                            ;	d1 = distance to the floor
00017D20                            ;	d3 = floor angle
00017D20                            ;	a1 = address within 256x256 mappings where object is standing
00017D20                            ;	     (refers to a 16x16 tile number)
00017D20                            ;	(a4) = floor angle
00017D20                            ; ---------------------------------------------------------------------------
00017D20                            
00017D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D20                            
00017D20                            
00017D20                            ObjFloorDist:
00017D20 3628 0008                  		move.w	obX(a0),d3
00017D24                            
00017D24                            
00017D24                            ObjFloorDist2:
00017D24 3428 000C                  		move.w	obY(a0),d2
00017D28 7000                       		moveq	#0,d0
00017D2A 1028 0016                  		move.b	obHeight(a0),d0
00017D2E 4880                       		ext.w	d0
00017D30 D440                       		add.w	d0,d2
00017D32 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D36 18BC 0000                  		move.b	#0,(a4)
00017D3A 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017D3E 3C3C 0000                  		move.w	#0,d6
00017D42 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017D44 6100 FB90                  		bsr.w	FindFloor
00017D48 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D4C 0803 0000                  		btst	#0,d3
00017D50 6700                       		beq.s	locret_14E4E
00017D52 163C 0000                  		move.b	#0,d3
00017D56                            
00017D56                            	locret_14E4E:
00017D56 4E75                       		rts	
00017D58                            
00017D58                            ; End of function ObjFloorDist2
00017D58                            ; End of function ObjFloorDist2
00017D58                            
00017D58                            
00017D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D58                            
00017D58                            
00017D58                            sub_14E50:
00017D58 3428 000C                  		move.w	obY(a0),d2
00017D5C 3628 0008                  		move.w	obX(a0),d3
00017D60 7000                       		moveq	#0,d0
00017D62 1028 0017                  		move.b	obWidth(a0),d0
00017D66 4880                       		ext.w	d0
00017D68 9440                       		sub.w	d0,d2
00017D6A 1028 0016                  		move.b	obHeight(a0),d0
00017D6E 4880                       		ext.w	d0
00017D70 D640                       		add.w	d0,d3
00017D72 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D76 367C 0010                  		movea.w	#$10,a3
00017D7A 3C3C 0000                  		move.w	#0,d6
00017D7E 7A0E                       		moveq	#$E,d5
00017D80 6100 FC92                  		bsr.w	FindWall
00017D84 3F01                       		move.w	d1,-(sp)
00017D86 3428 000C                  		move.w	obY(a0),d2
00017D8A 3628 0008                  		move.w	obX(a0),d3
00017D8E 7000                       		moveq	#0,d0
00017D90 1028 0017                  		move.b	obWidth(a0),d0
00017D94 4880                       		ext.w	d0
00017D96 D440                       		add.w	d0,d2
00017D98 1028 0016                  		move.b	obHeight(a0),d0
00017D9C 4880                       		ext.w	d0
00017D9E D640                       		add.w	d0,d3
00017DA0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017DA4 367C 0010                  		movea.w	#$10,a3
00017DA8 3C3C 0000                  		move.w	#0,d6
00017DAC 7A0E                       		moveq	#$E,d5
00017DAE 6100 FC64                  		bsr.w	FindWall
00017DB2 301F                       		move.w	(sp)+,d0
00017DB4 143C 00C0                  		move.b	#-$40,d2
00017DB8 6000 FF1E                  		bra.w	loc_14DD0
00017DBC                            
00017DBC                            ; End of function sub_14E50
00017DBC                            
00017DBC                            
00017DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DBC                            
00017DBC                            
00017DBC                            sub_14EB4:
00017DBC 3428 000C                  		move.w	obY(a0),d2
00017DC0 3628 0008                  		move.w	obX(a0),d3
00017DC4                            
00017DC4                            loc_14EBC:
00017DC4 0643 000A                  		addi.w	#$A,d3
00017DC8 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DCC 367C 0010                  		movea.w	#$10,a3
00017DD0 3C3C 0000                  		move.w	#0,d6
00017DD4 7A0E                       		moveq	#$E,d5
00017DD6 6100 FC3C                  		bsr.w	FindWall
00017DDA 143C 00C0                  		move.b	#-$40,d2
00017DDE 6000 FF32                  		bra.w	loc_14E0A
00017DE2                            
00017DE2                            ; End of function sub_14EB4
00017DE2                            
00017DE2                            ; ---------------------------------------------------------------------------
00017DE2                            ; Subroutine to	detect when an object hits a wall to its right
00017DE2                            ; ---------------------------------------------------------------------------
00017DE2                            
00017DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DE2                            
00017DE2                            
00017DE2                            ObjHitWallRight:
00017DE2 D668 0008                  		add.w	obX(a0),d3
00017DE6 3428 000C                  		move.w	obY(a0),d2
00017DEA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DEE 18BC 0000                  		move.b	#0,(a4)
00017DF2 367C 0010                  		movea.w	#$10,a3
00017DF6 3C3C 0000                  		move.w	#0,d6
00017DFA 7A0E                       		moveq	#$E,d5
00017DFC 6100 FC16                  		bsr.w	FindWall
00017E00 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017E04 0803 0000                  		btst	#0,d3
00017E08 6700                       		beq.s	locret_14F06
00017E0A 163C 00C0                  		move.b	#-$40,d3
00017E0E                            
00017E0E                            locret_14F06:
00017E0E 4E75                       		rts	
00017E10                            
00017E10                            ; End of function ObjHitWallRight
00017E10                            
00017E10                            ; ---------------------------------------------------------------------------
00017E10                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017E10                            ; touches them
00017E10                            ; ---------------------------------------------------------------------------
00017E10                            
00017E10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E10                            
00017E10                            
00017E10                            Sonic_DontRunOnWalls:
00017E10 3428 000C                  		move.w	obY(a0),d2
00017E14 3628 0008                  		move.w	obX(a0),d3
00017E18 7000                       		moveq	#0,d0
00017E1A 1028 0016                  		move.b	obHeight(a0),d0
00017E1E 4880                       		ext.w	d0
00017E20 9440                       		sub.w	d0,d2
00017E22 0A42 000F                  		eori.w	#$F,d2
00017E26 1028 0017                  		move.b	obWidth(a0),d0
00017E2A 4880                       		ext.w	d0
00017E2C D640                       		add.w	d0,d3
00017E2E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E32 367C FFF0                  		movea.w	#-$10,a3
00017E36 3C3C 1000                  		move.w	#$1000,d6
00017E3A 7A0E                       		moveq	#$E,d5
00017E3C 6100 FA98                  		bsr.w	FindFloor
00017E40 3F01                       		move.w	d1,-(sp)
00017E42 3428 000C                  		move.w	obY(a0),d2
00017E46 3628 0008                  		move.w	obX(a0),d3
00017E4A 7000                       		moveq	#0,d0
00017E4C 1028 0016                  		move.b	obHeight(a0),d0
00017E50 4880                       		ext.w	d0
00017E52 9440                       		sub.w	d0,d2
00017E54 0A42 000F                  		eori.w	#$F,d2
00017E58 1028 0017                  		move.b	obWidth(a0),d0
00017E5C 4880                       		ext.w	d0
00017E5E 9640                       		sub.w	d0,d3
00017E60 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E64 367C FFF0                  		movea.w	#-$10,a3
00017E68 3C3C 1000                  		move.w	#$1000,d6
00017E6C 7A0E                       		moveq	#$E,d5
00017E6E 6100 FA66                  		bsr.w	FindFloor
00017E72 301F                       		move.w	(sp)+,d0
00017E74 143C 0080                  		move.b	#-$80,d2
00017E78 6000 FE5E                  		bra.w	loc_14DD0
00017E7C                            ; End of function Sonic_DontRunOnWalls
00017E7C                            
00017E7C                            ; ===========================================================================
00017E7C 3428 000C                  		move.w	obY(a0),d2
00017E80 3628 0008                  		move.w	obX(a0),d3
00017E84                            
00017E84                            loc_14F7C:
00017E84 0442 000A                  		subi.w	#$A,d2
00017E88 0A42 000F                  		eori.w	#$F,d2
00017E8C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E90 367C FFF0                  		movea.w	#-$10,a3
00017E94 3C3C 1000                  		move.w	#$1000,d6
00017E98 7A0E                       		moveq	#$E,d5
00017E9A 6100 FA3A                  		bsr.w	FindFloor
00017E9E 143C 0080                  		move.b	#-$80,d2
00017EA2 6000 FE6E                  		bra.w	loc_14E0A
00017EA6                            
00017EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EA6                            
00017EA6                            
00017EA6                            ObjHitCeiling:
00017EA6 3428 000C                  		move.w	obY(a0),d2
00017EAA 3628 0008                  		move.w	obX(a0),d3
00017EAE 7000                       		moveq	#0,d0
00017EB0 1028 0016                  		move.b	obHeight(a0),d0
00017EB4 4880                       		ext.w	d0
00017EB6 9440                       		sub.w	d0,d2
00017EB8 0A42 000F                  		eori.w	#$F,d2
00017EBC 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EC0 367C FFF0                  		movea.w	#-$10,a3
00017EC4 3C3C 1000                  		move.w	#$1000,d6
00017EC8 7A0E                       		moveq	#$E,d5
00017ECA 6100 FA0A                  		bsr.w	FindFloor
00017ECE 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017ED2 0803 0000                  		btst	#0,d3
00017ED6 6700                       		beq.s	locret_14FD4
00017ED8 163C 0080                  		move.b	#-$80,d3
00017EDC                            
00017EDC                            locret_14FD4:
00017EDC 4E75                       		rts	
00017EDE                            ; End of function ObjHitCeiling
00017EDE                            
00017EDE                            ; ===========================================================================
00017EDE                            
00017EDE                            loc_14FD6:
00017EDE 3428 000C                  		move.w	obY(a0),d2
00017EE2 3628 0008                  		move.w	obX(a0),d3
00017EE6 7000                       		moveq	#0,d0
00017EE8 1028 0017                  		move.b	obWidth(a0),d0
00017EEC 4880                       		ext.w	d0
00017EEE 9440                       		sub.w	d0,d2
00017EF0 1028 0016                  		move.b	obHeight(a0),d0
00017EF4 4880                       		ext.w	d0
00017EF6 9640                       		sub.w	d0,d3
00017EF8 0A43 000F                  		eori.w	#$F,d3
00017EFC 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F00 367C FFF0                  		movea.w	#-$10,a3
00017F04 3C3C 0800                  		move.w	#$800,d6
00017F08 7A0E                       		moveq	#$E,d5
00017F0A 6100 FB08                  		bsr.w	FindWall
00017F0E 3F01                       		move.w	d1,-(sp)
00017F10 3428 000C                  		move.w	obY(a0),d2
00017F14 3628 0008                  		move.w	obX(a0),d3
00017F18 7000                       		moveq	#0,d0
00017F1A 1028 0017                  		move.b	obWidth(a0),d0
00017F1E 4880                       		ext.w	d0
00017F20 D440                       		add.w	d0,d2
00017F22 1028 0016                  		move.b	obHeight(a0),d0
00017F26 4880                       		ext.w	d0
00017F28 9640                       		sub.w	d0,d3
00017F2A 0A43 000F                  		eori.w	#$F,d3
00017F2E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F32 367C FFF0                  		movea.w	#-$10,a3
00017F36 3C3C 0800                  		move.w	#$800,d6
00017F3A 7A0E                       		moveq	#$E,d5
00017F3C 6100 FAD6                  		bsr.w	FindWall
00017F40 301F                       		move.w	(sp)+,d0
00017F42 143C 0040                  		move.b	#$40,d2
00017F46 6000 FD90                  		bra.w	loc_14DD0
00017F4A                            
00017F4A                            ; ---------------------------------------------------------------------------
00017F4A                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017F4A                            ; ---------------------------------------------------------------------------
00017F4A                            
00017F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F4A                            
00017F4A                            
00017F4A                            Sonic_HitWall:
00017F4A 3428 000C                  		move.w	obY(a0),d2
00017F4E 3628 0008                  		move.w	obX(a0),d3
00017F52                            
00017F52                            loc_1504A:
00017F52 0443 000A                  		subi.w	#$A,d3
00017F56 0A43 000F                  		eori.w	#$F,d3
00017F5A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F5E 367C FFF0                  		movea.w	#-$10,a3
00017F62 3C3C 0800                  		move.w	#$800,d6
00017F66 7A0E                       		moveq	#$E,d5
00017F68 6100 FAAA                  		bsr.w	FindWall
00017F6C 143C 0040                  		move.b	#$40,d2
00017F70 6000 FDA0                  		bra.w	loc_14E0A
00017F74                            ; End of function Sonic_HitWall
00017F74                            
00017F74                            ; ---------------------------------------------------------------------------
00017F74                            ; Subroutine to	detect when an object hits a wall to its left
00017F74                            ; ---------------------------------------------------------------------------
00017F74                            
00017F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F74                            
00017F74                            
00017F74                            ObjHitWallLeft:
00017F74 D668 0008                  		add.w	obX(a0),d3
00017F78 3428 000C                  		move.w	obY(a0),d2
00017F7C                            		; Engine bug: colliding with left walls is erratic with this function.
00017F7C                            		; The cause is this: a missing instruction to flip collision on the found
00017F7C                            		; 16x16 block; this one:
00017F7C                            		;eori.w	#$F,d3
00017F7C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F80 18BC 0000                  		move.b	#0,(a4)
00017F84 367C FFF0                  		movea.w	#-$10,a3
00017F88 3C3C 0800                  		move.w	#$800,d6
00017F8C 7A0E                       		moveq	#$E,d5
00017F8E 6100 FA84                  		bsr.w	FindWall
00017F92 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F96 0803 0000                  		btst	#0,d3
00017F9A 6700                       		beq.s	locret_15098
00017F9C 163C 0040                  		move.b	#$40,d3
00017FA0                            
00017FA0                            locret_15098:
00017FA0 4E75                       		rts	
00017FA2                            ; End of function ObjHitWallLeft
00017FA2                            
00017FA2                            ; ===========================================================================
00017FA2                            
00017FA2                            		include	"_incObj\66 Rotating Junction.asm"
00017FA2                            ; ---------------------------------------------------------------------------
00017FA2                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00017FA2                            ; ---------------------------------------------------------------------------
00017FA2                            
00017FA2                            Junction:
00017FA2 7000                       		moveq	#0,d0
00017FA4 1028 0024                  		move.b	obRoutine(a0),d0
00017FA8 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00017FAC 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00017FB0                            ; ===========================================================================
00017FB0 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00017FB2 0000                       		dc.w Jun_Action-Jun_Index
00017FB4 0000                       		dc.w Jun_Display-Jun_Index
00017FB6 0000                       		dc.w Jun_Release-Jun_Index
00017FB8                            
00017FB8 =00000034                  jun_frame:	equ $34		; current frame
00017FB8 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00017FB8 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00017FB8                            ; ===========================================================================
00017FB8                            
00017FB8                            Jun_Main:	; Routine 0
00017FB8 5428 0024                  		addq.b	#2,obRoutine(a0)
00017FBC 323C 0001                  		move.w	#1,d1
00017FC0 2248                       		movea.l	a0,a1
00017FC2 6000                       		bra.s	@makeitem
00017FC4                            ; ===========================================================================
00017FC4                            
00017FC4                            	@repeat:
00017FC4 4EB9 0000 FB98             		jsr	FindFreeObj
00017FCA 6600                       		bne.s	@fail
00017FCC 12BC 0066                  		move.b	#id_Junction,0(a1)
00017FD0 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00017FD4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017FDA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017FE0 337C 0180 0018             		move.w	#$180,obPriority(a1)
00017FE6 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00017FEC                            
00017FEC                            @makeitem:
00017FEC 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00017FF4 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00017FFA 0029 0004 0001             		ori.b	#4,obRender(a1)
00018000 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018006                            
00018006                            	@fail:
00018006 51C9 FFBC                  		dbf	d1,@repeat
0001800A                            
0001800A 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018010 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018016 317C 003C 0030             		move.w	#$3C,$30(a0)
0001801C 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018022 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018028                            
00018028                            Jun_Action:	; Routine 2
00018028 6100 0000                  		bsr.w	Jun_ChkSwitch
0001802C 4A28 0001                  		tst.b	obRender(a0)
00018030 6A00 0000                  		bpl.w	Jun_Display
00018034 323C 0030                  		move.w	#$30,d1
00018038 3401                       		move.w	d1,d2
0001803A 3602                       		move.w	d2,d3
0001803C 5243                       		addq.w	#1,d3
0001803E 3828 0008                  		move.w	obX(a0),d4
00018042 6100 9D1E                  		bsr.w	SolidObject
00018046 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
0001804C 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018050                            
00018050 43F8 D000                  		lea	(v_player).w,a1
00018054 720E                       		moveq	#$E,d1
00018056 3029 0008                  		move.w	obX(a1),d0
0001805A B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
0001805E 6500                       		bcs.s	@isleft		; if yes, branch
00018060 7207                       		moveq	#7,d1		
00018062                            
00018062                            	@isleft:
00018062 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018066 6600                       		bne.s	Jun_Display	; if not, branch
00018068                            
00018068 1141 0032                  		move.b	d1,$32(a0)
0001806C 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018070 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018076 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
0001807C 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018082 337C 0000 0010             		move.w	#0,obVelX(a1)
00018088 337C 0000 0012             		move.w	#0,obVelY(a1)
0001808E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018094 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001809A 08E9 0001 0022             		bset	#1,obStatus(a1)
000180A0 3429 0008                  		move.w	obX(a1),d2
000180A4 3629 000C                  		move.w	obY(a1),d3
000180A8 6100 0000                  		bsr.w	Jun_ChgPos
000180AC D569 0008                  		add.w	d2,obX(a1)
000180B0 D769 000C                  		add.w	d3,obY(a1)
000180B4 E0E9 0008                  		asr	obX(a1)
000180B8 E0E9 000C                  		asr	obY(a1)
000180BC                            
000180BC                            Jun_Display:	; Routine 4
000180BC 6000 980C                  		bra.w	RememberState
000180C0                            ; ===========================================================================
000180C0                            
000180C0                            Jun_Release:	; Routine 6
000180C0 1028 001A                  		move.b	obFrame(a0),d0
000180C4 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
000180C8 6700                       		beq.s	@release	; if yes, branch
000180CA 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000180CE 6600                       		bne.s	@dontrelease	; if not, branch
000180D0                            
000180D0                            	@release:
000180D0 B028 0032                  		cmp.b	$32(a0),d0
000180D4 6700                       		beq.s	@dontrelease
000180D6 43F8 D000                  		lea	(v_player).w,a1
000180DA 337C 0000 0010             		move.w	#0,obVelX(a1)
000180E0 337C 0800 0012             		move.w	#$800,obVelY(a1)
000180E6 0C00 0004                  		cmpi.b	#4,d0
000180EA 6700                       		beq.s	@isdown
000180EC 337C 0800 0010             		move.w	#$800,obVelX(a1)
000180F2 337C 0800 0012             		move.w	#$800,obVelY(a1)
000180F8                            
000180F8                            	@isdown:
000180F8 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000180FC 5928 0024                  		subq.b	#4,obRoutine(a0)
00018100                            
00018100                            	@dontrelease:
00018100 6100                       		bsr.s	Jun_ChkSwitch
00018102 6100                       		bsr.s	Jun_ChgPos
00018104 6000 97C4                  		bra.w	RememberState
00018108                            
00018108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018108                            
00018108                            
00018108                            Jun_ChkSwitch:
00018108 45F8 F7E0                  		lea	(f_switch).w,a2
0001810C 7000                       		moveq	#0,d0
0001810E 1028 0038                  		move.b	jun_switch(a0),d0
00018112 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018118 6700                       		beq.s	@unpressed	; if not, branch
0001811A                            
0001811A 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
0001811E 6600                       		bne.s	@animate	; if yes, branch
00018120 4428 0034                  		neg.b	jun_frame(a0)
00018124 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
0001812A 6000                       		bra.s	@animate
0001812C                            ; ===========================================================================
0001812C                            
0001812C                            @unpressed:
0001812C 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018130                            
00018130                            @animate:
00018130 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018134 6A00                       		bpl.s	@nochange	; if time remains, branch
00018136 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001813C 1228 0034                  		move.b	jun_frame(a0),d1
00018140 1028 001A                  		move.b	obFrame(a0),d0
00018144 D001                       		add.b	d1,d0
00018146 0200 000F                  		andi.b	#$F,d0
0001814A 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
0001814E                            
0001814E                            	@nochange:
0001814E 4E75                       		rts	
00018150                            ; End of function Jun_ChkSwitch
00018150                            
00018150                            
00018150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018150                            
00018150                            
00018150                            Jun_ChgPos:
00018150 43F8 D000                  		lea	(v_player).w,a1
00018154 7000                       		moveq	#0,d0
00018156 1028 001A                  		move.b	obFrame(a0),d0
0001815A D040                       		add.w	d0,d0
0001815C 45FB 0000                  		lea	@data(pc,d0.w),a2
00018160 101A                       		move.b	(a2)+,d0
00018162 4880                       		ext.w	d0
00018164 D068 0008                  		add.w	obX(a0),d0
00018168 3340 0008                  		move.w	d0,obX(a1)
0001816C 101A                       		move.b	(a2)+,d0
0001816E 4880                       		ext.w	d0
00018170 D068 000C                  		add.w	obY(a0),d0
00018174 3340 000C                  		move.w	d0,obY(a1)
00018178 4E75                       		rts	
0001817A                            
0001817A                            
0001817A E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
0001817E E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018182 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018186 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
0001818A 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
0001818E 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018192 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018196 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018196 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001819A                            Map_Jun:	include	"_maps\Rotating Junction.asm"
0001819A                            ; ---------------------------------------------------------------------------
0001819A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001819A                            ; ---------------------------------------------------------------------------
0001819A                            Map_Jun_internal:
0001819A 0000                       		dc.w @gap0-Map_Jun_internal
0001819C 0000                       		dc.w @gap1-Map_Jun_internal
0001819E 0000                       		dc.w @gap2-Map_Jun_internal
000181A0 0000                       		dc.w @gap3-Map_Jun_internal
000181A2 0000                       		dc.w @gap4-Map_Jun_internal
000181A4 0000                       		dc.w @gap5-Map_Jun_internal
000181A6 0000                       		dc.w @gap6-Map_Jun_internal
000181A8 0000                       		dc.w @gap7-Map_Jun_internal
000181AA 0000                       		dc.w @gap8-Map_Jun_internal
000181AC 0000                       		dc.w @gap9-Map_Jun_internal
000181AE 0000                       		dc.w @gapA-Map_Jun_internal
000181B0 0000                       		dc.w @gapB-Map_Jun_internal
000181B2 0000                       		dc.w @gapC-Map_Jun_internal
000181B4 0000                       		dc.w @gapD-Map_Jun_internal
000181B6 0000                       		dc.w @gapE-Map_Jun_internal
000181B8 0000                       		dc.w @gapF-Map_Jun_internal
000181BA 0000                       		dc.w @circle-Map_Jun_internal
000181BC 06                         @gap0:		dc.b 6
000181BD E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000181C2 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000181C7 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000181CC E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000181D1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000181D6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000181DB 06                         @gap1:		dc.b 6
000181DC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000181E1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000181E6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000181EB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000181F0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000181F5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000181FA 06                         @gap2:		dc.b 6
000181FB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018200 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018205 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001820A 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001820F 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018214 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018219 06                         @gap3:		dc.b 6
0001821A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001821F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018224 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018229 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001822E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018233 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018238 06                         @gap4:		dc.b 6
00018239 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001823E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018243 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018248 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001824D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018252 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018257 06                         @gap5:		dc.b 6
00018258 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001825D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018262 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018267 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001826C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018271 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018276 06                         @gap6:		dc.b 6
00018277 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001827C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018281 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018286 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001828B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018290 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018295 06                         @gap7:		dc.b 6
00018296 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001829B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000182A0 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000182A5 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000182AA 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000182AF 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000182B4 06                         @gap8:		dc.b 6
000182B5 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000182BA 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000182BF E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000182C4 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000182C9 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000182CE 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000182D3 06                         @gap9:		dc.b 6
000182D4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000182D9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000182DE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000182E3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000182E8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000182ED F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000182F2 06                         @gapA:		dc.b 6
000182F3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000182F8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000182FD D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018302 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018307 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001830C E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018311 06                         @gapB:		dc.b 6
00018312 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00018317 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001831C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018321 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018326 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001832B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018330 06                         @gapC:		dc.b 6
00018331 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018336 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001833B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018340 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018345 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001834A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001834F 06                         @gapD:		dc.b 6
00018350 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018355 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001835A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001835F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018364 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018369 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001836E 06                         @gapE:		dc.b 6
0001836F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018374 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018379 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001837E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018383 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018388 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001838D 06                         @gapF:		dc.b 6
0001838E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018393 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018398 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001839D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000183A2 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000183A7 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000183AC 0C                         @circle:	dc.b $C
000183AD C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000183B2 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000183B7 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000183BC C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000183C1 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000183C6 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000183CB 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000183D0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000183D5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000183DA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000183DF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000183E4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000183EA 00                         		even
000183EA 00                         		even
000183EA                            		include	"_incObj\67 Running Disc.asm"
000183EA                            ; ---------------------------------------------------------------------------
000183EA                            ; Object 67 - disc that	you run	around (SBZ)
000183EA                            ; ---------------------------------------------------------------------------
000183EA                            
000183EA                            RunningDisc:
000183EA 7000                       		moveq	#0,d0
000183EC 1028 0024                  		move.b	obRoutine(a0),d0
000183F0 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000183F4 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000183F8                            ; ===========================================================================
000183F8 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000183FA 0000                       		dc.w Disc_Action-Disc_Index
000183FC                            
000183FC =00000032                  disc_origX:	equ $32		; original x-axis position
000183FC =00000030                  disc_origY:	equ $30		; original y-axis position
000183FC                            ; ===========================================================================
000183FC                            
000183FC                            Disc_Main:	; Routine 0
000183FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00018400 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00018408 317C C344 0002             		move.w	#$C344,obGfx(a0)
0001840E 117C 0004 0001             		move.b	#4,obRender(a0)
00018414 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001841A 117C 0008 0014             		move.b	#8,obActWid(a0)
00018420 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
00018426 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
0001842C 117C 0018 0034             		move.b	#$18,$34(a0)
00018432 117C 0048 0038             		move.b	#$48,$38(a0)
00018438 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001843C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018440 6700                       		beq.s	@typeis0	; branch if 0
00018442 117C 0010 0034             		move.b	#$10,$34(a0)
00018448 117C 0038 0038             		move.b	#$38,$38(a0)
0001844E                            
0001844E                            	@typeis0:
0001844E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018452 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018456 4881                       		ext.w	d1
00018458 E741                       		asl.w	#3,d1
0001845A 3141 0036                  		move.w	d1,$36(a0)
0001845E 1028 0022                  		move.b	obStatus(a0),d0
00018462 E418                       		ror.b	#2,d0
00018464 0200 00C0                  		andi.b	#$C0,d0
00018468 1140 0026                  		move.b	d0,obAngle(a0)
0001846C                            
0001846C                            Disc_Action:	; Routine 2
0001846C 6100 0000                  		bsr.w	Disc_MoveSonic
00018470 6100 0000                  		bsr.w	Disc_MoveSpot
00018474 6000 0000                  		bra.w	Disc_ChkDel
00018478                            ; ===========================================================================
00018478                            
00018478                            Disc_MoveSonic:
00018478 7400                       		moveq	#0,d2
0001847A 1428 0038                  		move.b	$38(a0),d2
0001847E 3602                       		move.w	d2,d3
00018480 D643                       		add.w	d3,d3
00018482 43F8 D000                  		lea	(v_player).w,a1
00018486 3029 0008                  		move.w	obX(a1),d0
0001848A 9068 0032                  		sub.w	disc_origX(a0),d0
0001848E D042                       		add.w	d2,d0
00018490 B043                       		cmp.w	d3,d0
00018492 6400                       		bcc.s	loc_155A8
00018494 3229 000C                  		move.w	obY(a1),d1
00018498 9268 0030                  		sub.w	disc_origY(a0),d1
0001849C D242                       		add.w	d2,d1
0001849E B243                       		cmp.w	d3,d1
000184A0 6400                       		bcc.s	loc_155A8
000184A2 0829 0001 0022             		btst	#1,obStatus(a1)
000184A8 6700                       		beq.s	loc_155B8
000184AA 4228 003A                  		clr.b	$3A(a0)
000184AE 4E75                       		rts	
000184B0                            ; ===========================================================================
000184B0                            
000184B0                            loc_155A8:
000184B0 4A28 003A                  		tst.b	$3A(a0)
000184B4 6700                       		beq.s	locret_155B6
000184B6 4229 0038                  		clr.b	$38(a1)
000184BA 4228 003A                  		clr.b	$3A(a0)
000184BE                            
000184BE                            locret_155B6:
000184BE 4E75                       		rts	
000184C0                            ; ===========================================================================
000184C0                            
000184C0                            loc_155B8:
000184C0 4A28 003A                  		tst.b	$3A(a0)
000184C4 6600                       		bne.s	loc_155E2
000184C6 117C 0001 003A             		move.b	#1,$3A(a0)
000184CC 0829 0002 0022             		btst	#2,obStatus(a1)
000184D2 6600                       		bne.s	loc_155D0
000184D4 4229 001C                  		clr.b	obAnim(a1)
000184D8                            
000184D8                            loc_155D0:
000184D8 08A9 0005 0022             		bclr	#5,obStatus(a1)
000184DE 137C 0001 001D             		move.b	#1,obNextAni(a1)
000184E4 137C 0001 0038             		move.b	#1,$38(a1)
000184EA                            
000184EA                            loc_155E2:
000184EA 3029 0020                  		move.w	obInertia(a1),d0
000184EE 4A68 0036                  		tst.w	$36(a0)
000184F2 6A00                       		bpl.s	loc_15608
000184F4 0C40 FC00                  		cmpi.w	#-$400,d0
000184F8 6F00                       		ble.s	loc_155FA
000184FA 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00018500 4E75                       		rts	
00018502                            ; ===========================================================================
00018502                            
00018502                            loc_155FA:
00018502 0C40 F100                  		cmpi.w	#-$F00,d0
00018506 6C00                       		bge.s	locret_15606
00018508 337C F100 0020             		move.w	#-$F00,obInertia(a1)
0001850E                            
0001850E                            locret_15606:
0001850E 4E75                       		rts	
00018510                            ; ===========================================================================
00018510                            
00018510                            loc_15608:
00018510 0C40 0400                  		cmpi.w	#$400,d0
00018514 6C00                       		bge.s	loc_15616
00018516 337C 0400 0020             		move.w	#$400,obInertia(a1)
0001851C 4E75                       		rts	
0001851E                            ; ===========================================================================
0001851E                            
0001851E                            loc_15616:
0001851E 0C40 0F00                  		cmpi.w	#$F00,d0
00018522 6F00                       		ble.s	locret_15622
00018524 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
0001852A                            
0001852A                            locret_15622:
0001852A 4E75                       		rts	
0001852C                            ; ===========================================================================
0001852C                            
0001852C                            Disc_MoveSpot:
0001852C 3028 0036                  		move.w	$36(a0),d0
00018530 D168 0026                  		add.w	d0,obAngle(a0)
00018534 1028 0026                  		move.b	obAngle(a0),d0
00018538 4EB9 0000 3A32             		jsr	(CalcSine).l
0001853E 3428 0030                  		move.w	disc_origY(a0),d2
00018542 3628 0032                  		move.w	disc_origX(a0),d3
00018546 7800                       		moveq	#0,d4
00018548 1828 0034                  		move.b	$34(a0),d4
0001854C E14C                       		lsl.w	#8,d4
0001854E 2A04                       		move.l	d4,d5
00018550 C9C0                       		muls.w	d0,d4
00018552 4844                       		swap	d4
00018554 CBC1                       		muls.w	d1,d5
00018556 4845                       		swap	d5
00018558 D842                       		add.w	d2,d4
0001855A DA43                       		add.w	d3,d5
0001855C 3144 000C                  		move.w	d4,obY(a0)
00018560 3145 0008                  		move.w	d5,obX(a0)
00018564 4E75                       		rts	
00018566                            ; ===========================================================================
00018566                            
00018566                            Disc_ChkDel:
00018582 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00018588                            
00018588                            	@delete:
00018588 4EF9 0000 F74C             		jmp	(DeleteObject).l
00018588 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001858E                            Map_Disc:	include	"_maps\Running Disc.asm"
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            ; Sprite mappings - disc that you run around (SBZ)
0001858E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001858E                            ; part of the level tiles.)
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            Map_Disc_internal:
0001858E 0000                       		dc.w @spot-Map_Disc_internal
00018590 01                         @spot:		dc.b 1
00018591 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018596                            		even
00018596                            		even
00018596                            		include	"_incObj\68 Conveyor Belt.asm"
00018596                            ; ---------------------------------------------------------------------------
00018596                            ; Object 68 - conveyor belts (SBZ)
00018596                            ; ---------------------------------------------------------------------------
00018596                            
00018596                            Conveyor:
00018596 7000                       		moveq	#0,d0
00018598 1028 0024                  		move.b	obRoutine(a0),d0
0001859C 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
000185A0 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
000185A4                            ; ===========================================================================
000185A4 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
000185A6 0000                       		dc.w Conv_Action-Conv_Index
000185A8                            
000185A8 =00000036                  conv_speed:	equ $36
000185A8 =00000038                  conv_width:	equ $38
000185A8                            ; ===========================================================================
000185A8                            
000185A8                            Conv_Main:	; Routine 0
000185A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000185AC 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000185B2 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000185B6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000185BA 6700                       		beq.s	@typeis0	; if zero, branch
000185BC 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
000185C2                            
000185C2                            	@typeis0:
000185C2 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000185C6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000185CA 4881                       		ext.w	d1
000185CC E841                       		asr.w	#4,d1
000185CE 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000185D2                            
000185D2                            Conv_Action:	; Routine 2
000185D2 6100                       		bsr.s	@movesonic
000185F0 4E75                       		rts	
000185F2                            
000185F2                            	@delete:
000185F2 4EF9 0000 F74C             		jmp	(DeleteObject).l
000185F8                            ; ===========================================================================
000185F8                            
000185F8                            @movesonic:
000185F8 7400                       		moveq	#0,d2
000185FA 1428 0038                  		move.b	conv_width(a0),d2
000185FE 3602                       		move.w	d2,d3
00018600 D643                       		add.w	d3,d3
00018602 43F8 D000                  		lea	(v_player).w,a1
00018606 3029 0008                  		move.w	obX(a1),d0
0001860A 9068 0008                  		sub.w	obX(a0),d0
0001860E D042                       		add.w	d2,d0
00018610 B043                       		cmp.w	d3,d0
00018612 6400                       		bcc.s	@notonconveyor
00018614 3229 000C                  		move.w	obY(a1),d1
00018618 9268 000C                  		sub.w	obY(a0),d1
0001861C 0641 0030                  		addi.w	#$30,d1
00018620 0C41 0030                  		cmpi.w	#$30,d1
00018624 6400                       		bcc.s	@notonconveyor
00018626 0829 0001 0022             		btst	#1,obStatus(a1)
0001862C 6600                       		bne.s	@notonconveyor
0001862E 3028 0036                  		move.w	conv_speed(a0),d0
00018632 D169 0008                  		add.w	d0,obX(a1)
00018636                            
00018636                            	@notonconveyor:
00018636 4E75                       		rts	
00018636 4E75                       		rts	
00018638                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00018638                            ; ---------------------------------------------------------------------------
00018638                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018638                            ; ---------------------------------------------------------------------------
00018638                            
00018638                            SpinPlatform:
00018638 7000                       		moveq	#0,d0
0001863A 1028 0024                  		move.b	obRoutine(a0),d0
0001863E 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018642 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
00018646                            ; ===========================================================================
00018646 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00018648 0000                       		dc.w Spin_Trapdoor-Spin_Index
0001864A 0000                       		dc.w Spin_Spinner-Spin_Index
0001864C                            
0001864C =00000030                  spin_timer:	equ $30		; time counter until change
0001864C =00000032                  spin_timelen:	equ $32		; time between changes (general)
0001864C                            ; ===========================================================================
0001864C                            
0001864C                            Spin_Main:	; Routine 0
0001864C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018650 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00018658 317C 4492 0002             		move.w	#$4492,obGfx(a0)
0001865E 0028 0004 0001             		ori.b	#4,obRender(a0)
00018664 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001866A 7000                       		moveq	#0,d0
0001866C 1028 0028                  		move.b	obSubtype(a0),d0
00018670 0240 000F                  		andi.w	#$F,d0
00018674 C0FC 003C                  		mulu.w	#$3C,d0
00018678 3140 0032                  		move.w	d0,spin_timelen(a0)
0001867C 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018680 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018682                            
00018682 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00018686 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
0001868E 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018694 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001869A 117C 0002 001C             		move.b	#2,obAnim(a0)
000186A0 7000                       		moveq	#0,d0
000186A2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000186A6 3200                       		move.w	d0,d1
000186A8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000186AC C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000186B0 3140 0030                  		move.w	d0,spin_timer(a0)
000186B4 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000186B8 0241 0070                  		andi.w	#$70,d1
000186BC 0641 0010                  		addi.w	#$10,d1
000186C0 E549                       		lsl.w	#2,d1
000186C2 5341                       		subq.w	#1,d1
000186C4 3141 0036                  		move.w	d1,$36(a0)
000186C8 6000                       		bra.s	Spin_Spinner
000186CA                            ; ===========================================================================
000186CA                            
000186CA                            Spin_Trapdoor:	; Routine 2
000186CA 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000186CE 6A00                       		bpl.s	@animate	; if time remains, branch
000186D0                            
000186D0 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000186D6 0868 0000 001C             		bchg	#0,obAnim(a0)
000186DC 4A28 0001                  		tst.b	obRender(a0)
000186E0 6A00                       		bpl.s	@animate
000186EC                            
000186EC                            	@animate:
000186EC 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000186F2 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
000186F8 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000186FC 6600                       		bne.s	@notsolid	; if not, branch
000186FE 323C 004B                  		move.w	#$4B,d1
00018702 343C 000C                  		move.w	#$C,d2
00018706 3602                       		move.w	d2,d3
00018708 5243                       		addq.w	#1,d3
0001870A 3828 0008                  		move.w	obX(a0),d4
0001870E 6100 9652                  		bsr.w	SolidObject
00018712 6000 91B6                  		bra.w	RememberState
00018716                            ; ===========================================================================
00018716                            
00018716                            @notsolid:
00018716 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
0001871C 6700                       		beq.s	@display	; if not, branch
0001871E 43F8 D000                  		lea	(v_player).w,a1
00018722 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018728 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001872E 4228 0025                  		clr.b	obSolid(a0)
00018732                            
00018732                            	@display:
00018732 6000 9196                  		bra.w	RememberState
00018736                            ; ===========================================================================
00018736                            
00018736                            Spin_Spinner:	; Routine 4
00018736 3038 FE04                  		move.w	(v_framecount).w,d0
0001873A C068 0036                  		and.w	$36(a0),d0
0001873E 6600                       		bne.s	@delay
00018740 117C 0001 0034             		move.b	#1,$34(a0)
00018746                            
00018746                            	@delay:
00018746 4A28 0034                  		tst.b	$34(a0)
0001874A 6700                       		beq.s	@animate
0001874C 5368 0030                  		subq.w	#1,spin_timer(a0)
00018750 6A00                       		bpl.s	@animate
00018752 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018758 4228 0034                  		clr.b	$34(a0)
0001875C 0868 0000 001C             		bchg	#0,obAnim(a0)
00018762                            
00018762                            	@animate:
00018762 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018768 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001876E 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018772 6600                       		bne.s	@notsolid2	; if not, branch
00018774 323C 001B                  		move.w	#$1B,d1
00018778 343C 0007                  		move.w	#7,d2
0001877C 3602                       		move.w	d2,d3
0001877E 5243                       		addq.w	#1,d3
00018780 3828 0008                  		move.w	obX(a0),d4
00018784 6100 95DC                  		bsr.w	SolidObject
00018788 6000 9140                  		bra.w	RememberState
0001878C                            ; ===========================================================================
0001878C                            
0001878C                            @notsolid2:
0001878C 0828 0003 0022             		btst	#3,obStatus(a0)
00018792 6700                       		beq.s	@display
00018794 43F8 D000                  		lea	(v_player).w,a1
00018798 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001879E 08A8 0003 0022             		bclr	#3,obStatus(a0)
000187A4 4228 0025                  		clr.b	obSolid(a0)
000187A8                            
000187A8                            	@display:
000187A8 6000 9120                  		bra.w	RememberState
000187A8 6000 9120                  		bra.w	RememberState
000187AC                            		include	"_anim\SBZ Spinning Platforms.asm"
000187AC                            ; ---------------------------------------------------------------------------
000187AC                            ; Animation script - trapdoor (SBZ)
000187AC                            ; ---------------------------------------------------------------------------
000187AC 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
000187AE 0000                       		dc.w @trapclose-Ani_Spin
000187B0 0000                       		dc.w @spin1-Ani_Spin
000187B2 0000                       		dc.w @spin2-Ani_Spin
000187B4 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000187BA 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
000187C0 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000187D4 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000187E8                            		even
000187E8                            		even
000187E8                            Map_Trap:	include	"_maps\Trapdoor.asm"
000187E8                            ; ---------------------------------------------------------------------------
000187E8                            ; Sprite mappings - trapdoor (SBZ)
000187E8                            ; ---------------------------------------------------------------------------
000187E8                            Map_Trap_internal:
000187E8 0000                       		dc.w @closed-Map_Trap_internal
000187EA 0000                       		dc.w @half-Map_Trap_internal
000187EC 0000                       		dc.w @open-Map_Trap_internal
000187EE 04                         @closed:	dc.b 4
000187EF F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000187F4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000187F9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000187FE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018803 08                         @half:		dc.b 8
00018804 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018809 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001880E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018813 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018818 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001881D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018822 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00018827 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001882C 04                         @open:		dc.b 4
0001882D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018832 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018837 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001883C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018842 00                         		even
00018842 00                         		even
00018842                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018842                            ; ---------------------------------------------------------------------------
00018842                            ; Sprite mappings - spinning platforms (SBZ)
00018842                            ; ---------------------------------------------------------------------------
00018842                            Map_Spin_internal:
00018842 0000                       		dc.w @flat-Map_Spin_internal
00018844 0000                       		dc.w @spin1-Map_Spin_internal
00018846 0000                       		dc.w @spin2-Map_Spin_internal
00018848 0000                       		dc.w @spin3-Map_Spin_internal
0001884A 0000                       		dc.w @spin4-Map_Spin_internal
0001884C 02                         @flat:		dc.b 2
0001884D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018852 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018857 02                         @spin1:		dc.b 2
00018858 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001885D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018862 02                         @spin2:		dc.b 2
00018863 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018868 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001886D 02                         @spin3:		dc.b 2
0001886E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018873 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018878 02                         @spin4:		dc.b 2
00018879 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001887E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018884 00                         		even
00018884 00                         		even
00018884                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018884                            ; ---------------------------------------------------------------------------
00018884                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018884                            ; ---------------------------------------------------------------------------
00018884                            
00018884                            Saws:
00018884 7000                       		moveq	#0,d0
00018886 1028 0024                  		move.b	obRoutine(a0),d0
0001888A 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
0001888E 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018892                            ; ===========================================================================
00018892 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018894 0000                       		dc.w Saw_Action-Saw_Index
00018896                            
00018896 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018896 =00000038                  saw_origY:	equ $38		; original y-axis position
00018896 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018896                            ; ===========================================================================
00018896                            
00018896                            Saw_Main:	; Routine 0
00018896 5428 0024                  		addq.b	#2,obRoutine(a0)
0001889A 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
000188A2 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
000188A8 117C 0004 0001             		move.b	#4,obRender(a0)
000188AE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000188B4 117C 0020 0014             		move.b	#$20,obActWid(a0)
000188BA 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000188C0 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
000188C6 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
000188CC 6400                       		bcc.s	Saw_Action	; if yes, branch
000188CE 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000188D4                            
000188D4                            Saw_Action:	; Routine 2
000188D4 7000                       		moveq	#0,d0
000188D6 1028 0028                  		move.b	obSubtype(a0),d0
000188DA 0240 0007                  		andi.w	#7,d0
000188DE D040                       		add.w	d0,d0
000188E0 323B 0000                  		move.w	@index(pc,d0.w),d1
000188E4 4EBB 1000                  		jsr	@index(pc,d1.w)
00018904 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001890A                            
0001890A                            	@delete:
0001890A 4EF9 0000 F74C             		jmp	(DeleteObject).l
00018910                            ; ===========================================================================
00018910 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018916 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
0001891A                            ; ===========================================================================
0001891A                            
0001891A                            @type00:
0001891A 4E75                       		rts			; doesn't move
0001891C                            ; ===========================================================================
0001891C                            
0001891C                            @type01:
0001891C 323C 0060                  		move.w	#$60,d1
00018920 7000                       		moveq	#0,d0
00018922 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018926 0828 0000 0022             		btst	#0,obStatus(a0)
0001892C 6700                       		beq.s	@noflip01
0001892E 4440                       		neg.w	d0
00018930 D041                       		add.w	d1,d0
00018932                            
00018932                            	@noflip01:
00018932 3228 003A                  		move.w	saw_origX(a0),d1
00018936 9240                       		sub.w	d0,d1
00018938 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
0001893C                            
0001893C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018940 6A00                       		bpl.s	@sameframe01
00018942 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018948 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0001894E                            
0001894E                            	@sameframe01:
0001894E 4A28 0001                  		tst.b	obRender(a0)
00018952 6A00                       		bpl.s	@nosound01
00018954 3038 FE04                  		move.w	(v_framecount).w,d0
00018958 0240 000F                  		andi.w	#$F,d0
0001895C 6600                       		bne.s	@nosound01
00018968                            
00018968                            	@nosound01:
00018968 4E75                       		rts	
0001896A                            ; ===========================================================================
0001896A                            
0001896A                            @type02:
0001896A 323C 0030                  		move.w	#$30,d1
0001896E 7000                       		moveq	#0,d0
00018970 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018974 0828 0000 0022             		btst	#0,obStatus(a0)
0001897A 6700                       		beq.s	@noflip02
0001897C 4440                       		neg.w	d0
0001897E 0640 0080                  		addi.w	#$80,d0
00018982                            
00018982                            	@noflip02:
00018982 3228 0038                  		move.w	saw_origY(a0),d1
00018986 9240                       		sub.w	d0,d1
00018988 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
0001898C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018990 6A00                       		bpl.s	@sameframe02
00018992 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018998 0868 0000 001A             		bchg	#0,obFrame(a0)
0001899E                            
0001899E                            	@sameframe02:
0001899E 4A28 0001                  		tst.b	obRender(a0)
000189A2 6A00                       		bpl.s	@nosound02
000189A4 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000189A8 0C00 0018                  		cmpi.b	#$18,d0
000189AC 6600                       		bne.s	@nosound02
000189B8                            
000189B8                            	@nosound02:
000189B8 4E75                       		rts	
000189BA                            ; ===========================================================================
000189BA                            
000189BA                            @type03:
000189BA 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
000189BE 6600                       		bne.s	@here03		; if yes, branch
000189C0                            
000189C0 3038 D008                  		move.w	(v_player+obX).w,d0
000189C4 0440 00C0                  		subi.w	#$C0,d0
000189C8 6500                       		bcs.s	@nosaw03x
000189CA 9068 0008                  		sub.w	obX(a0),d0
000189CE 6500                       		bcs.s	@nosaw03x
000189D0 3038 D00C                  		move.w	(v_player+obY).w,d0
000189D4 0440 0080                  		subi.w	#$80,d0
000189D8 B068 000C                  		cmp.w	obY(a0),d0
000189DC 6400                       		bcc.s	@nosaw03y
000189DE 0640 0100                  		addi.w	#$100,d0
000189E2 B068 000C                  		cmp.w	obY(a0),d0
000189E6 6500                       		bcs.s	@nosaw03y
000189E8 117C 0001 003D             		move.b	#1,saw_here(a0)
000189EE 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
000189F4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189FA 117C 0002 001A             		move.b	#2,obFrame(a0)
00018A0A                            
00018A0A                            	@nosaw03x:
00018A0A 588F                       		addq.l	#4,sp
00018A0C                            
00018A0C                            	@nosaw03y:
00018A0C 4E75                       		rts	
00018A0E                            ; ===========================================================================
00018A0E                            
00018A0E                            @here03:
00018A0E 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
00018A14 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A1A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A1E 6A00                       		bpl.s	@sameframe03
00018A20 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A26 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A2C                            
00018A2C                            	@sameframe03:
00018A2C 4E75                       		rts	
00018A2E                            ; ===========================================================================
00018A2E                            
00018A2E                            @type04:
00018A2E 4A28 003D                  		tst.b	saw_here(a0)
00018A32 6600                       		bne.s	@here04
00018A34 3038 D008                  		move.w	(v_player+obX).w,d0
00018A38 0640 00E0                  		addi.w	#$E0,d0
00018A3C 9068 0008                  		sub.w	obX(a0),d0
00018A40 6400                       		bcc.s	@nosaw04x
00018A42 3038 D00C                  		move.w	(v_player+obY).w,d0
00018A46 0440 0080                  		subi.w	#$80,d0
00018A4A B068 000C                  		cmp.w	obY(a0),d0
00018A4E 6400                       		bcc.s	@nosaw04y
00018A50 0640 0100                  		addi.w	#$100,d0
00018A54 B068 000C                  		cmp.w	obY(a0),d0
00018A58 6500                       		bcs.s	@nosaw04y
00018A5A 117C 0001 003D             		move.b	#1,saw_here(a0)
00018A60 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018A66 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018A6C 117C 0002 001A             		move.b	#2,obFrame(a0)
00018A7C                            
00018A7C                            	@nosaw04x:
00018A7C 588F                       		addq.l	#4,sp
00018A7E                            
00018A7E                            	@nosaw04y:
00018A7E 4E75                       		rts	
00018A80                            ; ===========================================================================
00018A80                            
00018A80                            @here04:
00018A80 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
00018A86 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A8C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A90 6A00                       		bpl.s	@sameframe04
00018A92 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A98 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A9E                            
00018A9E                            	@sameframe04:
00018A9E 4E75                       		rts	
00018A9E 4E75                       		rts	
00018AA0                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018AA0                            ; ---------------------------------------------------------------------------
00018AA0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018AA0                            ; ---------------------------------------------------------------------------
00018AA0                            Map_Saw_internal:
00018AA0 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018AA2 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018AA4 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018AA6 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018AA8 07                         @pizzacutter1:	dc.b 7
00018AA9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018AAE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018AB3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018AB8 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018ABD E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018AC2 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018AC7 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018ACC 07                         @pizzacutter2:	dc.b 7
00018ACD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018AD2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018AD7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018ADC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018AE1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018AE6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018AEB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018AF0 04                         @groundsaw1:	dc.b 4
00018AF1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018AF6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018AFB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018B00 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018B05 04                         @groundsaw2:	dc.b 4
00018B06 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018B0B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018B10 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018B15 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018B1A                            		even
00018B1A                            		even
00018B1A                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018B1A                            ; ---------------------------------------------------------------------------
00018B1A                            ; Object 6B - stomper and sliding door (SBZ)
00018B1A                            ; ---------------------------------------------------------------------------
00018B1A                            
00018B1A                            ScrapStomp:
00018B1A 7000                       		moveq	#0,d0
00018B1C 1028 0024                  		move.b	obRoutine(a0),d0
00018B20 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018B24 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018B28                            ; ===========================================================================
00018B28 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018B2A 0000                       		dc.w Sto_Action-Sto_Index
00018B2C                            
00018B2C =00000016                  sto_height:	equ $16
00018B2C =00000034                  sto_origX:	equ $34		; original x-axis position
00018B2C =00000030                  sto_origY:	equ $30		; original y-axis position
00018B2C =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018B2C                            
00018B2C 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018B30 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018B34 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018B38 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018B3C 8040 0005                  		dc.b  $80, $40,	  0,   5
00018B40                            ; ===========================================================================
00018B40                            
00018B40                            Sto_Main:	; Routine 0
00018B40 5428 0024                  		addq.b	#2,obRoutine(a0)
00018B44 7000                       		moveq	#0,d0
00018B46 1028 0028                  		move.b	obSubtype(a0),d0
00018B4A E448                       		lsr.w	#2,d0
00018B4C 0240 001C                  		andi.w	#$1C,d0
00018B50 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018B54 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018B58 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018B5C E448                       		lsr.w	#2,d0
00018B5E 1140 001A                  		move.b	d0,obFrame(a0)
00018B62 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018B6A 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018B70 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018B76 6600                       		bne.s	@isSBZ12	; if not, branch
00018B78 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018B7E 6700                       		beq.s	@isSBZ3
00018B80                            
00018B80                            @chkdel:
00018B80 45F8 FC00                  		lea	(v_objstate).w,a2
00018B84 7000                       		moveq	#0,d0
00018B86 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B8A 6700                       		beq.s	@delete
00018B8C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B92                            
00018B92                            	@delete:
00018B92 4EF9 0000 F74C             		jmp	(DeleteObject).l
00018B98                            ; ===========================================================================
00018B98                            
00018B98                            @isSBZ3:
00018B98 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018B9E 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018BA4 6600                       		bne.s	@isSBZ12
00018BA6 45F8 FC00                  		lea	(v_objstate).w,a2
00018BAA 7000                       		moveq	#0,d0
00018BAC 1028 0023                  		move.b	obRespawnNo(a0),d0
00018BB0 6700                       		beq.s	@isSBZ12
00018BB2 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018BB8 6700                       		beq.s	@isSBZ12
00018BBA 4238 F7CB                  		clr.b	(v_obj6B).w
00018BBE 60C0                       		bra.s	@chkdel
00018BC0                            ; ===========================================================================
00018BC0                            
00018BC0                            @isSBZ12:
00018BC0 0028 0004 0001             		ori.b	#4,obRender(a0)
00018BC6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018BCC 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018BD2 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018BD8 7000                       		moveq	#0,d0
00018BDA 101B                       		move.b	(a3)+,d0
00018BDC 3140 003C                  		move.w	d0,$3C(a0)
00018BE0 7000                       		moveq	#0,d0
00018BE2 1028 0028                  		move.b	obSubtype(a0),d0
00018BE6 6A00                       		bpl.s	Sto_Action
00018BE8 0200 000F                  		andi.b	#$F,d0
00018BEC 1140 003E                  		move.b	d0,$3E(a0)
00018BF0 1153 0028                  		move.b	(a3),obSubtype(a0)
00018BF4 0C13 0005                  		cmpi.b	#5,(a3)
00018BF8 6600                       		bne.s	@chkgone
00018BFA 08E8 0004 0001             		bset	#4,obRender(a0)
00018C00                            
00018C00                            	@chkgone:
00018C00 45F8 FC00                  		lea	(v_objstate).w,a2
00018C04 7000                       		moveq	#0,d0
00018C06 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C0A 6700                       		beq.s	Sto_Action
00018C0C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C12                            
00018C12                            Sto_Action:	; Routine 2
00018C12 3F28 0008                  		move.w	obX(a0),-(sp)
00018C16 7000                       		moveq	#0,d0
00018C18 1028 0028                  		move.b	obSubtype(a0),d0
00018C1C 0240 000F                  		andi.w	#$F,d0
00018C20 D040                       		add.w	d0,d0
00018C22 323B 0000                  		move.w	@index(pc,d0.w),d1
00018C26 4EBB 1000                  		jsr	@index(pc,d1.w)
00018C2A 381F                       		move.w	(sp)+,d4
00018C2C 4A28 0001                  		tst.b	obRender(a0)
00018C30 6A00                       		bpl.s	@chkdel
00018C32 7200                       		moveq	#0,d1
00018C34 1228 0014                  		move.b	obActWid(a0),d1
00018C38 0641 000B                  		addi.w	#$B,d1
00018C3C 7400                       		moveq	#0,d2
00018C3E 1428 0016                  		move.b	sto_height(a0),d2
00018C42 3602                       		move.w	d2,d3
00018C44 5243                       		addq.w	#1,d3
00018C46 6100 911A                  		bsr.w	SolidObject
00018C4A                            
00018C4A                            	@chkdel:
00018C66 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00018C6C                            
00018C6C                            	@chkgone:
00018C6C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018C72 6600                       		bne.s	@delete
00018C74 4238 F7CB                  		clr.b	(v_obj6B).w
00018C78 45F8 FC00                  		lea	(v_objstate).w,a2
00018C7C 7000                       		moveq	#0,d0
00018C7E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C82 6700                       		beq.s	@delete
00018C84 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C8A                            
00018C8A                            	@delete:
00018C8A 4EF9 0000 F74C             		jmp	(DeleteObject).l
00018C90                            ; ===========================================================================
00018C90 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018C94 0000 0000                  		dc.w @type02-@index, @type03-@index
00018C98 0000 0000                  		dc.w @type04-@index, @type05-@index
00018C9C                            ; ===========================================================================
00018C9C                            
00018C9C                            @type00:
00018C9C 4E75                       		rts
00018C9E                            ; ===========================================================================
00018C9E                            
00018C9E                            @type01:
00018C9E 4A28 0038                  		tst.b	sto_active(a0)
00018CA2 6600                       		bne.s	@isactive01
00018CA4 45F8 F7E0                  		lea	(f_switch).w,a2
00018CA8 7000                       		moveq	#0,d0
00018CAA 1028 003E                  		move.b	$3E(a0),d0
00018CAE 0832 0000 0000             		btst	#0,(a2,d0.w)
00018CB4 6700                       		beq.s	@loc_15DC2
00018CB6 117C 0001 0038             		move.b	#1,sto_active(a0)
00018CBC                            
00018CBC                            	@isactive01:
00018CBC 3028 003C                  		move.w	$3C(a0),d0
00018CC0 B068 003A                  		cmp.w	$3A(a0),d0
00018CC4 6700                       		beq.s	@loc_15DE0
00018CC6 5468 003A                  		addq.w	#2,$3A(a0)
00018CCA                            
00018CCA                            	@loc_15DC2:
00018CCA 3028 003A                  		move.w	$3A(a0),d0
00018CCE 0828 0000 0022             		btst	#0,obStatus(a0)
00018CD4 6700                       		beq.s	@noflip01
00018CD6 4440                       		neg.w	d0
00018CD8 0640 0080                  		addi.w	#$80,d0
00018CDC                            
00018CDC                            	@noflip01:
00018CDC 3228 0034                  		move.w	sto_origX(a0),d1
00018CE0 9240                       		sub.w	d0,d1
00018CE2 3141 0008                  		move.w	d1,obX(a0)
00018CE6 4E75                       		rts	
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            @loc_15DE0:
00018CE8 5228 0028                  		addq.b	#1,obSubtype(a0)
00018CEC 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018CF2 4228 0038                  		clr.b	sto_active(a0)
00018CF6 45F8 FC00                  		lea	(v_objstate).w,a2
00018CFA 7000                       		moveq	#0,d0
00018CFC 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D00 67C8                       		beq.s	@loc_15DC2
00018D02 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018D08 60C0                       		bra.s	@loc_15DC2
00018D0A                            ; ===========================================================================
00018D0A                            
00018D0A                            @type02:
00018D0A 4A28 0038                  		tst.b	sto_active(a0)
00018D0E 6600                       		bne.s	@isactive02
00018D10 5368 0036                  		subq.w	#1,$36(a0)
00018D14 6600                       		bne.s	@loc_15E1E
00018D16 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D1C                            
00018D1C                            	@isactive02:
00018D1C 4A68 003A                  		tst.w	$3A(a0)
00018D20 6700                       		beq.s	@loc_15E3C
00018D22 5568 003A                  		subq.w	#2,$3A(a0)
00018D26                            
00018D26                            	@loc_15E1E:
00018D26 3028 003A                  		move.w	$3A(a0),d0
00018D2A 0828 0000 0022             		btst	#0,obStatus(a0)
00018D30 6700                       		beq.s	@noflip02
00018D32 4440                       		neg.w	d0
00018D34 0640 0080                  		addi.w	#$80,d0
00018D38                            
00018D38                            	@noflip02:
00018D38 3228 0034                  		move.w	sto_origX(a0),d1
00018D3C 9240                       		sub.w	d0,d1
00018D3E 3141 0008                  		move.w	d1,obX(a0)
00018D42 4E75                       		rts	
00018D44                            ; ===========================================================================
00018D44                            
00018D44                            @loc_15E3C:
00018D44 5328 0028                  		subq.b	#1,obSubtype(a0)
00018D48 4228 0038                  		clr.b	sto_active(a0)
00018D4C 45F8 FC00                  		lea	(v_objstate).w,a2
00018D50 7000                       		moveq	#0,d0
00018D52 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D56 67CE                       		beq.s	@loc_15E1E
00018D58 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018D5E 60C6                       		bra.s	@loc_15E1E
00018D60                            ; ===========================================================================
00018D60                            
00018D60                            @type03:
00018D60 4A28 0038                  		tst.b	sto_active(a0)
00018D64 6600                       		bne.s	@isactive03
00018D66 4A68 003A                  		tst.w	$3A(a0)
00018D6A 6700                       		beq.s	@loc_15E6A
00018D6C 5368 003A                  		subq.w	#1,$3A(a0)
00018D70 6000                       		bra.s	@loc_15E8E
00018D72                            ; ===========================================================================
00018D72                            
00018D72                            @loc_15E6A:
00018D72 5368 0036                  		subq.w	#1,$36(a0)
00018D76 6A00                       		bpl.s	@loc_15E8E
00018D78 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D7E 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D84                            
00018D84                            @isactive03:
00018D84 5068 003A                  		addq.w	#8,$3A(a0)
00018D88 3028 003A                  		move.w	$3A(a0),d0
00018D8C B068 003C                  		cmp.w	$3C(a0),d0
00018D90 6600                       		bne.s	@loc_15E8E
00018D92 4228 0038                  		clr.b	sto_active(a0)
00018D96                            
00018D96                            @loc_15E8E:
00018D96 3028 003A                  		move.w	$3A(a0),d0
00018D9A 0828 0000 0022             		btst	#0,obStatus(a0)
00018DA0 6700                       		beq.s	@noflip03
00018DA2 4440                       		neg.w	d0
00018DA4 0640 0038                  		addi.w	#$38,d0
00018DA8                            
00018DA8                            	@noflip03:
00018DA8 3228 0030                  		move.w	sto_origY(a0),d1
00018DAC D240                       		add.w	d0,d1
00018DAE 3141 000C                  		move.w	d1,obY(a0)
00018DB2 4E75                       		rts	
00018DB4                            ; ===========================================================================
00018DB4                            
00018DB4                            @type04:
00018DB4 4A28 0038                  		tst.b	sto_active(a0)
00018DB8 6600                       		bne.s	@isactive04
00018DBA 4A68 003A                  		tst.w	$3A(a0)
00018DBE 6700                       		beq.s	@loc_15EBE
00018DC0 5168 003A                  		subq.w	#8,$3A(a0)
00018DC4 6000                       		bra.s	@loc_15EF0
00018DC6                            ; ===========================================================================
00018DC6                            
00018DC6                            @loc_15EBE:
00018DC6 5368 0036                  		subq.w	#1,$36(a0)
00018DCA 6A00                       		bpl.s	@loc_15EF0
00018DCC 317C 003C 0036             		move.w	#$3C,$36(a0)
00018DD2 117C 0001 0038             		move.b	#1,sto_active(a0)
00018DD8                            
00018DD8                            @isactive04:
00018DD8 3028 003A                  		move.w	$3A(a0),d0
00018DDC B068 003C                  		cmp.w	$3C(a0),d0
00018DE0 6700                       		beq.s	@loc_15EE0
00018DE2 5068 003A                  		addq.w	#8,$3A(a0)
00018DE6 6000                       		bra.s	@loc_15EF0
00018DE8                            ; ===========================================================================
00018DE8                            
00018DE8                            @loc_15EE0:
00018DE8 5368 0036                  		subq.w	#1,$36(a0)
00018DEC 6A00                       		bpl.s	@loc_15EF0
00018DEE 317C 003C 0036             		move.w	#$3C,$36(a0)
00018DF4 4228 0038                  		clr.b	sto_active(a0)
00018DF8                            
00018DF8                            @loc_15EF0:
00018DF8 3028 003A                  		move.w	$3A(a0),d0
00018DFC 0828 0000 0022             		btst	#0,obStatus(a0)
00018E02 6700                       		beq.s	@noflip04
00018E04 4440                       		neg.w	d0
00018E06 0640 0038                  		addi.w	#$38,d0
00018E0A                            
00018E0A                            	@noflip04:
00018E0A 3228 0030                  		move.w	sto_origY(a0),d1
00018E0E D240                       		add.w	d0,d1
00018E10 3141 000C                  		move.w	d1,obY(a0)
00018E14 4E75                       		rts	
00018E16                            ; ===========================================================================
00018E16                            
00018E16                            @type05:
00018E16 4A28 0038                  		tst.b	sto_active(a0)
00018E1A 6600                       		bne.s	@loc_15F3E
00018E1C 45F8 F7E0                  		lea	(f_switch).w,a2
00018E20 7000                       		moveq	#0,d0
00018E22 1028 003E                  		move.b	$3E(a0),d0
00018E26 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E2C 6700                       		beq.s	@locret_15F5C
00018E2E 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E34 45F8 FC00                  		lea	(v_objstate).w,a2
00018E38 7000                       		moveq	#0,d0
00018E3A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E3E 6700                       		beq.s	@loc_15F3E
00018E40 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018E46                            
00018E46                            @loc_15F3E:
00018E46 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018E4E 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018E56 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018E5C 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018E62 6700                       		beq.s	@loc_15F5E
00018E64                            
00018E64                            @locret_15F5C:
00018E64 4E75                       		rts	
00018E66                            ; ===========================================================================
00018E66                            
00018E66                            @loc_15F5E:
00018E66 4228 0028                  		clr.b	obSubtype(a0)
00018E6A 4228 0038                  		clr.b	sto_active(a0)
00018E6E 4E75                       		rts	
00018E6E 4E75                       		rts	
00018E70                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018E70                            ; ---------------------------------------------------------------------------
00018E70                            ; Sprite mappings - stomper and	platforms (SBZ)
00018E70                            ; ---------------------------------------------------------------------------
00018E70                            Map_Stomp_internal:
00018E70 0000                       		dc.w @door-Map_Stomp_internal
00018E72 0000                       		dc.w @stomper-Map_Stomp_internal
00018E74 0000                       		dc.w @stomper-Map_Stomp_internal
00018E76 0000                       		dc.w @stomper-Map_Stomp_internal
00018E78 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018E7A 04                         @door:		dc.b 4
00018E7B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018E80 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018E85 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018E8A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018E8F 08                         @stomper:	dc.b 8
00018E90 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018E95 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018E9A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018E9F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018EA4 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018EA9 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018EAE 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018EB3 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018EB8 0E                         @bigdoor:	dc.b $E
00018EB9 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018EBE C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018EC3 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018EC8 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018ECD C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018ED2 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018ED7 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018EDC C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018EE1 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018EE6 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018EEB E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018EF0 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018EF5 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018EFA 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018F00 00                         		even
00018F00 00                         		even
00018F00                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018F00                            ; ---------------------------------------------------------------------------
00018F00                            ; Object 6C - vanishing	platforms (SBZ)
00018F00                            ; ---------------------------------------------------------------------------
00018F00                            
00018F00                            VanishPlatform:
00018F00 7000                       		moveq	#0,d0
00018F02 1028 0024                  		move.b	obRoutine(a0),d0
00018F06 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018F0A 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018F0E                            ; ===========================================================================
00018F0E 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018F10 0000                       		dc.w VanP_Vanish-VanP_Index
00018F12 0000                       		dc.w VanP_Appear-VanP_Index
00018F14 0000                       		dc.w loc_16068-VanP_Index
00018F16                            
00018F16 =00000030                  vanp_timer:	equ $30		; counter for time until event
00018F16 =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018F16                            ; ===========================================================================
00018F16                            
00018F16                            VanP_Main:	; Routine 0
00018F16 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018F1A 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018F22 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00018F28 0028 0004 0001             		ori.b	#4,obRender(a0)
00018F2E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018F34 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018F3A 7000                       		moveq	#0,d0
00018F3C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018F40 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018F44 5240                       		addq.w	#1,d0		; add 1
00018F46 EF48                       		lsl.w	#7,d0		; multiply by $80
00018F48 3200                       		move.w	d0,d1
00018F4A 5340                       		subq.w	#1,d0
00018F4C 3140 0030                  		move.w	d0,vanp_timer(a0)
00018F50 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018F54 7000                       		moveq	#0,d0
00018F56 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018F5A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018F5E 0641 0080                  		addi.w	#$80,d1
00018F62 C0C1                       		mulu.w	d1,d0
00018F64 E088                       		lsr.l	#8,d0
00018F66 3140 0036                  		move.w	d0,$36(a0)
00018F6A 5341                       		subq.w	#1,d1
00018F6C 3141 0038                  		move.w	d1,$38(a0)
00018F70                            
00018F70                            loc_16068:	; Routine 6
00018F70 3038 FE04                  		move.w	(v_framecount).w,d0
00018F74 9068 0036                  		sub.w	$36(a0),d0
00018F78 C068 0038                  		and.w	$38(a0),d0
00018F7C 6600                       		bne.s	@animate
00018F7E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00018F82 6000                       		bra.s	VanP_Vanish
00018F84                            ; ===========================================================================
00018F84                            
00018F84                            @animate:
00018F84 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018F8A 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00018F90 6000 8938                  		bra.w	RememberState
00018F94                            ; ===========================================================================
00018F94                            
00018F94                            VanP_Vanish:	; Routine 2
00018F94                            VanP_Appear:	; Routine 4
00018F94 5368 0030                  		subq.w	#1,vanp_timer(a0)
00018F98 6A00                       		bpl.s	@wait
00018F9A 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00018FA0 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00018FA4 6700                       		beq.s	@isvanishing	; if yes, branch
00018FA6 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00018FAC                            
00018FAC                            	@isvanishing:
00018FAC 0868 0000 001C             		bchg	#0,obAnim(a0)
00018FB2                            
00018FB2                            	@wait:
00018FB2 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018FB8 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
00018FBE 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00018FC4 6600                       		bne.s	@notsolid	; if yes, branch
00018FC6 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00018FCC 6600                       		bne.s	@loc_160D6
00018FCE 7200                       		moveq	#0,d1
00018FD0 1228 0014                  		move.b	obActWid(a0),d1
00018FD4 4EB9 0000 8FE2             		jsr	(PlatformObject).l
00018FDA 6000 88EE                  		bra.w	RememberState
00018FDE                            ; ===========================================================================
00018FDE                            
00018FDE                            @loc_160D6:
00018FDE 7200                       		moveq	#0,d1
00018FE0 1228 0014                  		move.b	obActWid(a0),d1
00018FE4 4EB9 0000 9156             		jsr	(ExitPlatform).l
00018FEA 3428 0008                  		move.w	obX(a0),d2
00018FEE 4EB9 0000 96C0             		jsr	(MvSonicOnPtfm2).l
00018FF4 6000 88D4                  		bra.w	RememberState
00018FF8                            ; ===========================================================================
00018FF8                            
00018FF8                            @notsolid:
00018FF8 0828 0003 0022             		btst	#3,obStatus(a0)
00018FFE 6700                       		beq.s	@display
00019000 43F8 D000                  		lea	(v_player).w,a1
00019004 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001900A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019010 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019016 4228 0025                  		clr.b	obSolid(a0)
0001901A                            
0001901A                            	@display:
0001901A 6000 88AE                  		bra.w	RememberState
0001901A 6000 88AE                  		bra.w	RememberState
0001901E                            		include	"_anim\SBZ Vanishing Platforms.asm"
0001901E                            ; ---------------------------------------------------------------------------
0001901E                            ; Animation script - vanishing platforms (SBZ)
0001901E                            ; ---------------------------------------------------------------------------
0001901E 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019020 0000                       		dc.w @appear-Ani_Van
00019022 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
0001902A 00                         		even
0001902A 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00019032 00                         		even
00019032 00                         		even
00019032                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019032                            ; ---------------------------------------------------------------------------
00019032                            ; Sprite mappings - vanishing platforms	(SBZ)
00019032                            ; ---------------------------------------------------------------------------
00019032                            Map_VanP_internal:
00019032 0000                       		dc.w @whole-Map_VanP_internal
00019034 0000                       		dc.w @half-Map_VanP_internal
00019036 0000                       		dc.w @quarter-Map_VanP_internal
00019038 0000                       		dc.w @gone-Map_VanP_internal
0001903A 01                         @whole:		dc.b 1
0001903B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019040 01                         @half:		dc.b 1
00019041 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00019046 01                         @quarter:	dc.b 1
00019047 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001904C 00                         @gone:		dc.b 0
0001904E 00                         		even
0001904E 00                         		even
0001904E                            		include	"_incObj\6E Electrocuter.asm"
0001904E                            ; ---------------------------------------------------------------------------
0001904E                            ; Object 6E - electrocution orbs (SBZ)
0001904E                            ; ---------------------------------------------------------------------------
0001904E                            
0001904E                            Electro:
0001904E 7000                       		moveq	#0,d0
00019050 1028 0024                  		move.b	obRoutine(a0),d0
00019054 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019058 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
0001905C                            ; ===========================================================================
0001905C 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
0001905E 0000                       		dc.w Elec_Shock-Elec_Index
00019060                            
00019060 =00000034                  elec_freq:	equ $34		; frequency
00019060                            ; ===========================================================================
00019060                            
00019060                            Elec_Main:	; Routine 0
00019060 5428 0024                  		addq.b	#2,obRoutine(a0)
00019064 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
0001906C 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019072 0028 0004 0001             		ori.b	#4,obRender(a0)
00019078 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001907E 7000                       		moveq	#0,d0
00019080 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019084 E948                       		lsl.w	#4,d0		; multiply by $10
00019086 5340                       		subq.w	#1,d0
00019088 3140 0034                  		move.w	d0,elec_freq(a0)
0001908C                            
0001908C                            Elec_Shock:	; Routine 2
0001908C 3038 FE04                  		move.w	(v_framecount).w,d0
00019090 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019094 6600                       		bne.s	@animate	; if not, branch
00019096                            
00019096 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001909C 4A28 0001                  		tst.b	obRender(a0)
000190A0 6A00                       		bpl.s	@animate
000190AC                            
000190AC                            	@animate:
000190AC 43F9 0000 0000             		lea	(Ani_Elec).l,a1
000190B2 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
000190B8 117C 0000 0020             		move.b	#0,obColType(a0)
000190BE 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
000190C4 6600                       		bne.s	@display	; if not, branch
000190C6 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
000190CC                            
000190CC                            	@display:
000190CC 6000 87FC                  		bra.w	RememberState
000190CC 6000 87FC                  		bra.w	RememberState
000190D0                            		include	"_anim\Electrocuter.asm"
000190D0                            ; ---------------------------------------------------------------------------
000190D0                            ; Animation script - electrocution orbs (SBZ)
000190D0                            ; ---------------------------------------------------------------------------
000190D0 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000190D2 0000                       		dc.w byte_161D0-Ani_Elec
000190D4 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000190D8 00                         		even
000190D8 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000190E8                            		even
000190E8                            		even
000190E8                            Map_Elec:	include	"_maps\Electrocuter.asm"
000190E8                            ; --------------------------------------------------------------------------------
000190E8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000190E8                            ; --------------------------------------------------------------------------------
000190E8                            
000190E8                            SME_XNaLt:	
000190E8 0000 0000                  		dc.w SME_XNaLt_C-SME_XNaLt, SME_XNaLt_17-SME_XNaLt	
000190EC 0000 0000                  		dc.w SME_XNaLt_27-SME_XNaLt, SME_XNaLt_41-SME_XNaLt	
000190F0 0000 0000                  		dc.w SME_XNaLt_56-SME_XNaLt, SME_XNaLt_75-SME_XNaLt	
000190F4 02                         SME_XNaLt_C:	dc.b 2	
000190F5 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000190FA 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
000190FF 03                         SME_XNaLt_17:	dc.b 3	
00019100 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00019105 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8	
0001910A 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
0001910F 05                         SME_XNaLt_27:	dc.b 5	
00019110 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00019115 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8	
0001911A 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
0001911F F60D 000C 08               		dc.b $F6, $D, 0, $C, 8	
00019124 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC	
00019129 04                         SME_XNaLt_41:	dc.b 4	
0001912A F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001912F 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019134 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8	
00019139 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC	
0001913E 06                         SME_XNaLt_56:	dc.b 6	
0001913F F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00019144 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019149 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8	
0001914E F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC	
00019153 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24	
00019158 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0	
0001915D 04                         SME_XNaLt_75:	dc.b 4	
0001915E F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019163 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019168 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24	
0001916D F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0	
00019172                            		even
00019172                            		even
00019172                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019172                            ; ---------------------------------------------------------------------------
00019172                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019172                            ; ---------------------------------------------------------------------------
00019172                            
00019172                            SpinConvey:
00019172 7000                       		moveq	#0,d0
00019174 1028 0024                  		move.b	obRoutine(a0),d0
00019178 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
0001917C 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
0001919C                            
0001919C                            SpinC_Display:
0001919C 4EF9 0000 F70C             		jmp	(DisplaySprite).l
000191A2                            ; ===========================================================================
000191A2                            
000191A2                            loc_1629A:
000191A2 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000191A8 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000191AA 0C40 FF80                  		cmpi.w	#-$80,d0
000191AE 64EC                       		bcc.s	SpinC_Display
000191B0                            
000191B0                            SpinC_Act1or2:
000191B0 1028 002F                  		move.b	$2F(a0),d0
000191B4 6A00                       		bpl.s	SpinC_Delete
000191B6 0240 007F                  		andi.w	#$7F,d0
000191BA 45F8 F7C1                  		lea	(v_obj63).w,a2
000191BE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000191C4                            
000191C4                            SpinC_Delete:
000191C4 4EF9 0000 F74C             		jmp	(DeleteObject).l
000191CA                            ; ===========================================================================
000191CA 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
000191CC 0000                       		dc.w loc_163D8-SpinC_Index
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            SpinC_Main:	; Routine 0
000191CE 1028 0028                  		move.b	obSubtype(a0),d0
000191D2 6B00 0000                  		bmi.w	loc_16380
000191D6 5428 0024                  		addq.b	#2,obRoutine(a0)
000191DA 217C 0001 8842 0004        		move.l	#Map_Spin,obMap(a0)
000191E2 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000191E8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000191EE 0028 0004 0001             		ori.b	#4,obRender(a0)
000191F4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000191FA 7000                       		moveq	#0,d0
000191FC 1028 0028                  		move.b	obSubtype(a0),d0
00019200 3200                       		move.w	d0,d1
00019202 E648                       		lsr.w	#3,d0
00019204 0240 001E                  		andi.w	#$1E,d0
00019208 45FA 0000                  		lea	off_164A6(pc),a2
0001920C D4F2 0000                  		adda.w	(a2,d0.w),a2
00019210 315A 0038                  		move.w	(a2)+,$38(a0)
00019214 315A 0030                  		move.w	(a2)+,$30(a0)
00019218 214A 003C                  		move.l	a2,$3C(a0)
0001921C 0241 000F                  		andi.w	#$F,d1
00019220 E549                       		lsl.w	#2,d1
00019222 1141 0038                  		move.b	d1,$38(a0)
00019226 117C 0004 003A             		move.b	#4,$3A(a0)
0001922C 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019230 6700                       		beq.s	loc_16356
00019232 117C 0001 003B             		move.b	#1,$3B(a0)
00019238 4428 003A                  		neg.b	$3A(a0)
0001923C 7200                       		moveq	#0,d1
0001923E 1228 0038                  		move.b	$38(a0),d1
00019242 D228 003A                  		add.b	$3A(a0),d1
00019246 B228 0039                  		cmp.b	$39(a0),d1
0001924A 6500                       		bcs.s	loc_16352
0001924C 1001                       		move.b	d1,d0
0001924E 7200                       		moveq	#0,d1
00019250 4A00                       		tst.b	d0
00019252 6A00                       		bpl.s	loc_16352
00019254 1228 0039                  		move.b	$39(a0),d1
00019258 5901                       		subq.b	#4,d1
0001925A                            
0001925A                            loc_16352:
0001925A 1141 0038                  		move.b	d1,$38(a0)
0001925E                            
0001925E                            loc_16356:
0001925E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019264 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001926A 4A41                       		tst.w	d1
0001926C 6600                       		bne.s	loc_1636C
0001926E 117C 0001 001C             		move.b	#1,obAnim(a0)
00019274                            
00019274                            loc_1636C:
00019274 0C41 0008                  		cmpi.w	#8,d1
00019278 6600                       		bne.s	loc_16378
0001927A 117C 0000 001C             		move.b	#0,obAnim(a0)
00019280                            
00019280                            loc_16378:
00019280 6100 B6C0                  		bsr.w	LCon_ChangeDir
00019284 6000 0000                  		bra.w	loc_163D8
00019288                            ; ===========================================================================
00019288                            
00019288                            loc_16380:
00019288 1140 002F                  		move.b	d0,$2F(a0)
0001928C 0240 007F                  		andi.w	#$7F,d0
00019290 45F8 F7C1                  		lea	(v_obj63).w,a2
00019294 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001929A 6700                       		beq.s	loc_1639A
0001929C 4EF9 0000 F74C             		jmp	(DeleteObject).l
000192A2                            ; ===========================================================================
000192A2                            
000192A2                            loc_1639A:
000192A2 D040                       		add.w	d0,d0
000192A4 0240 001E                  		andi.w	#$1E,d0
000192A8 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000192AC 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000192B2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000192B6 321A                       		move.w	(a2)+,d1
000192B8 2248                       		movea.l	a0,a1
000192BA 6000                       		bra.s	SpinC_LoadPform
000192BC                            ; ===========================================================================
000192BC                            
000192BC                            SpinC_Loop:
000192BC 4EB9 0000 FB98             		jsr	(FindFreeObj).l
000192C2 6600                       		bne.s	loc_163D0
000192C4                            
000192C4                            SpinC_LoadPform:
000192C4 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
000192C8 335A 0008                  		move.w	(a2)+,obX(a1)
000192CC 335A 000C                  		move.w	(a2)+,obY(a1)
000192D0 301A                       		move.w	(a2)+,d0
000192D2 1340 0028                  		move.b	d0,obSubtype(a1)
000192D6                            
000192D6                            loc_163D0:
000192D6 51C9 FFE4                  		dbf	d1,SpinC_Loop
000192DA                            
000192DA 588F                       		addq.l	#4,sp
000192DC 4E75                       		rts	
000192DE                            ; ===========================================================================
000192DE                            
000192DE                            loc_163D8:	; Routine 2
000192DE 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000192E4 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
000192EA 4A28 001A                  		tst.b	obFrame(a0)
000192EE 6600                       		bne.s	loc_16404
000192F0 3F28 0008                  		move.w	obX(a0),-(sp)
000192F4 6100 0000                  		bsr.w	loc_16424
000192F8 323C 001B                  		move.w	#$1B,d1
000192FC 343C 0007                  		move.w	#7,d2
00019300 3602                       		move.w	d2,d3
00019302 5243                       		addq.w	#1,d3
00019304 381F                       		move.w	(sp)+,d4
00019306 6000 8A5A                  		bra.w	SolidObject
0001930A                            ; ===========================================================================
0001930A                            
0001930A                            loc_16404:
0001930A 0828 0003 0022             		btst	#3,obStatus(a0)
00019310 6700                       		beq.s	loc_16420
00019312 43F8 D000                  		lea	(v_objspace).w,a1
00019316 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001931C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019322 4228 0025                  		clr.b	obSolid(a0)
00019326                            
00019326                            loc_16420:
00019326 6000 0000                  		bra.w	loc_16424
0001932A                            
0001932A                            loc_16424:
0001932A 3028 0008                  		move.w	obX(a0),d0
0001932E B068 0034                  		cmp.w	$34(a0),d0
00019332 6600                       		bne.s	loc_16484
00019334 3028 000C                  		move.w	obY(a0),d0
00019338 B068 0036                  		cmp.w	$36(a0),d0
0001933C 6600                       		bne.s	loc_16484
0001933E 7200                       		moveq	#0,d1
00019340 1228 0038                  		move.b	$38(a0),d1
00019344 D228 003A                  		add.b	$3A(a0),d1
00019348 B228 0039                  		cmp.b	$39(a0),d1
0001934C 6500                       		bcs.s	loc_16456
0001934E 1001                       		move.b	d1,d0
00019350 7200                       		moveq	#0,d1
00019352 4A00                       		tst.b	d0
00019354 6A00                       		bpl.s	loc_16456
00019356 1228 0039                  		move.b	$39(a0),d1
0001935A 5901                       		subq.b	#4,d1
0001935C                            
0001935C                            loc_16456:
0001935C 1141 0038                  		move.b	d1,$38(a0)
00019360 2268 003C                  		movea.l	$3C(a0),a1
00019364 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001936A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019370 4A41                       		tst.w	d1
00019372 6600                       		bne.s	loc_16474
00019374 117C 0001 001C             		move.b	#1,obAnim(a0)
0001937A                            
0001937A                            loc_16474:
0001937A 0C41 0008                  		cmpi.w	#8,d1
0001937E 6600                       		bne.s	loc_16480
00019380 117C 0000 001C             		move.b	#0,obAnim(a0)
00019386                            
00019386                            loc_16480:
00019386 6100 B5BA                  		bsr.w	LCon_ChangeDir
0001938A                            
0001938A                            loc_16484:
0001938A 4EF9 0000 F6F8             		jmp	(SpeedToPos).l
0001938A 4EF9 0000 F6F8             		jmp	(SpeedToPos).l
00019390                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019390                            ; ---------------------------------------------------------------------------
00019390                            ; Animation script - platform on conveyor belt (SBZ)
00019390                            ; ---------------------------------------------------------------------------
00019390 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019392 0000                       		dc.w @still-Ani_SpinConvey
00019394 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000193A1 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000193A8 00                         		even
000193A8 0F00 FF                    @still:		dc.b $F, 0, afEnd
000193AC 00                         		even
000193AC 00                         		even
000193AC                            
000193AC 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000193B2 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000193B8 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000193CC 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000193E0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000193F4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019408 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001941C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019430                            ; ===========================================================================
00019430                            
00019430                            		include	"_incObj\70 Girder Block.asm"
00019430                            ; ---------------------------------------------------------------------------
00019430                            ; Object 70 - large girder block (SBZ)
00019430                            ; ---------------------------------------------------------------------------
00019430                            
00019430                            Girder:
00019430 7000                       		moveq	#0,d0
00019432 1028 0024                  		move.b	obRoutine(a0),d0
00019436 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001943A 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001943E                            ; ===========================================================================
0001943E 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019440 0000                       		dc.w Gird_Action-Gird_Index
00019442                            
00019442 =00000016                  gird_height:	equ $16
00019442 =00000032                  gird_origX:	equ $32		; original x-axis position
00019442 =00000030                  gird_origY:	equ $30		; original y-axis position
00019442 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019442 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019442 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019442                            ; ===========================================================================
00019442                            
00019442                            Gird_Main:	; Routine 0
00019442 5428 0024                  		addq.b	#2,obRoutine(a0)
00019446 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001944E 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019454 0028 0004 0001             		ori.b	#4,obRender(a0)
0001945A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019460 117C 0060 0014             		move.b	#$60,obActWid(a0)
00019466 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001946C 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019472 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019478 6100 0000                  		bsr.w	Gird_ChgMove
0001947C                            
0001947C                            Gird_Action:	; Routine 2
0001947C 3F28 0008                  		move.w	obX(a0),-(sp)
00019480 4A68 003A                  		tst.w	gird_delay(a0)
00019484 6700                       		beq.s	@beginmove
00019486 5368 003A                  		subq.w	#1,gird_delay(a0)
0001948A 6600                       		bne.s	@solid
0001948C                            
0001948C                            	@beginmove:
0001948C 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
00019492 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019496 6600                       		bne.s	@solid		; if time remains, branch
00019498 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001949C                            
0001949C                            	@solid:
0001949C 381F                       		move.w	(sp)+,d4
0001949E 4A28 0001                  		tst.b	obRender(a0)
000194A2 6A00                       		bpl.s	@chkdel
000194A4 7200                       		moveq	#0,d1
000194A6 1228 0014                  		move.b	obActWid(a0),d1
000194AA 0641 000B                  		addi.w	#$B,d1
000194AE 7400                       		moveq	#0,d2
000194B0 1428 0016                  		move.b	gird_height(a0),d2
000194B4 3602                       		move.w	d2,d3
000194B6 5243                       		addq.w	#1,d3
000194B8 6100 88A8                  		bsr.w	SolidObject
000194BC                            
000194BC                            	@chkdel:
000194D8 4EF9 0000 F70C             		jmp	(DisplaySprite).l
000194DE                            
000194DE                            	@delete:
000194DE 4EF9 0000 F74C             		jmp	(DeleteObject).l
000194E4                            ; ===========================================================================
000194E4                            
000194E4                            Gird_ChgMove:
000194E4 1028 0038                  		move.b	gird_set(a0),d0
000194E8 0240 0018                  		andi.w	#$18,d0
000194EC 43F9 0000 0000             		lea	(@settings).l,a1
000194F2 43F1 0000                  		lea	(a1,d0.w),a1
000194F6 3159 0010                  		move.w	(a1)+,obVelX(a0)
000194FA 3159 0012                  		move.w	(a1)+,obVelY(a0)
000194FE 3159 0034                  		move.w	(a1)+,gird_time(a0)
00019502 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
00019506 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001950C 4E75                       		rts	
0001950E                            ; ===========================================================================
0001950E                            @settings:	;   x-speed, y-speed, duration
0001950E 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
00019516 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
0001951E FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
00019526 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019526 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001952E                            Map_Gird:	include	"_maps\Girder Block.asm"
0001952E                            ; ---------------------------------------------------------------------------
0001952E                            ; Sprite mappings - large girder block (SBZ)
0001952E                            ; ---------------------------------------------------------------------------
0001952E                            Map_Gird_internal:
0001952E 0000                       		dc.w @girder-Map_Gird_internal
00019530 0C                         @girder:	dc.b $C
00019531 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019536 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001953B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019540 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019545 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001954A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001954F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019554 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019559 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001955E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019563 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019568 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001956E 00                         		even
0001956E 00                         		even
0001956E                            		include	"_incObj\72 Teleporter.asm"
0001956E                            ; ---------------------------------------------------------------------------
0001956E                            ; Object 72 - teleporter (SBZ)
0001956E                            ; ---------------------------------------------------------------------------
0001956E                            
0001956E                            Teleport:
0001956E 7000                       		moveq	#0,d0
00019570 1028 0024                  		move.b	obRoutine(a0),d0
00019574 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00019578 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00019598 4E75                       		rts	
0001959A                            
0001959A                            	@delete:
0001959A 4EF9 0000 F74C             		jmp	(DeleteObject).l
000195A0                            ; ===========================================================================
000195A0 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
000195A2 0000                       		dc.w loc_166C8-Tele_Index
000195A4 0000                       		dc.w loc_1675E-Tele_Index
000195A6 0000                       		dc.w loc_16798-Tele_Index
000195A8                            ; ===========================================================================
000195A8                            
000195A8                            Tele_Main:	; Routine 0
000195A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000195AC 1028 0028                  		move.b	obSubtype(a0),d0
000195B0 D040                       		add.w	d0,d0
000195B2 0240 001E                  		andi.w	#$1E,d0
000195B6 45FA 0000                  		lea	Tele_Data(pc),a2
000195BA D4F2 0000                  		adda.w	(a2,d0.w),a2
000195BE 315A 003A                  		move.w	(a2)+,$3A(a0)
000195C2 214A 003C                  		move.l	a2,$3C(a0)
000195C6 315A 0036                  		move.w	(a2)+,$36(a0)
000195CA 315A 0038                  		move.w	(a2)+,$38(a0)
000195CE                            
000195CE                            loc_166C8:	; Routine 2
000195CE 43F8 D000                  		lea	(v_player).w,a1
000195D2 3029 0008                  		move.w	obX(a1),d0
000195D6 9068 0008                  		sub.w	obX(a0),d0
000195DA 0828 0000 0022             		btst	#0,obStatus(a0)
000195E0 6700                       		beq.s	loc_166E0
000195E2 0640 000F                  		addi.w	#$F,d0
000195E6                            
000195E6                            loc_166E0:
000195E6 0C40 0010                  		cmpi.w	#$10,d0
000195EA 6400                       		bcc.s	locret_1675C
000195EC 3229 000C                  		move.w	obY(a1),d1
000195F0 9268 000C                  		sub.w	obY(a0),d1
000195F4 0641 0020                  		addi.w	#$20,d1
000195F8 0C41 0040                  		cmpi.w	#$40,d1
000195FC 6400                       		bcc.s	locret_1675C
000195FE 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019602 6600                       		bne.s	locret_1675C
00019604 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001960A 6600                       		bne.s	loc_1670E
0001960C 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
00019612 6500                       		bcs.s	locret_1675C
00019614                            
00019614                            loc_1670E:
00019614 5428 0024                  		addq.b	#2,obRoutine(a0)
00019618 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001961E 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
00019624 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001962A 337C 0000 0010             		move.w	#0,obVelX(a1)
00019630 337C 0000 0012             		move.w	#0,obVelY(a1)
00019636 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001963C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019642 08E9 0001 0022             		bset	#1,obStatus(a1)
00019648 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001964E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019654 4228 0032                  		clr.b	$32(a0)
00019662                            
00019662                            locret_1675C:
00019662 4E75                       		rts	
00019664                            ; ===========================================================================
00019664                            
00019664                            loc_1675E:	; Routine 4
00019664 43F8 D000                  		lea	(v_player).w,a1
00019668 1028 0032                  		move.b	$32(a0),d0
0001966C 5428 0032                  		addq.b	#2,$32(a0)
00019670 4EB9 0000 3A32             		jsr	(CalcSine).l
00019676 EA40                       		asr.w	#5,d0
00019678 3428 000C                  		move.w	obY(a0),d2
0001967C 9440                       		sub.w	d0,d2
0001967E 3342 000C                  		move.w	d2,obY(a1)
00019682 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019688 6600                       		bne.s	locret_16796
0001968A 6100 0000                  		bsr.w	sub_1681C
0001968E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001969C                            
0001969C                            locret_16796:
0001969C 4E75                       		rts	
0001969E                            ; ===========================================================================
0001969E                            
0001969E                            loc_16798:	; Routine 6
0001969E 588F                       		addq.l	#4,sp
000196A0 43F8 D000                  		lea	(v_player).w,a1
000196A4 5328 002E                  		subq.b	#1,$2E(a0)
000196A8 6A00                       		bpl.s	loc_167DA
000196AA 3368 0036 0008             		move.w	$36(a0),obX(a1)
000196B0 3368 0038 000C             		move.w	$38(a0),obY(a1)
000196B6 7200                       		moveq	#0,d1
000196B8 1228 003A                  		move.b	$3A(a0),d1
000196BC 5801                       		addq.b	#4,d1
000196BE B228 003B                  		cmp.b	$3B(a0),d1
000196C2 6500                       		bcs.s	loc_167C2
000196C4 7200                       		moveq	#0,d1
000196C6 6000                       		bra.s	loc_16800
000196C8                            ; ===========================================================================
000196C8                            
000196C8                            loc_167C2:
000196C8 1141 003A                  		move.b	d1,$3A(a0)
000196CC 2468 003C                  		movea.l	$3C(a0),a2
000196D0 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000196D6 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000196DC 6000 0000                  		bra.w	sub_1681C
000196E0                            ; ===========================================================================
000196E0                            
000196E0                            loc_167DA:
000196E0 2429 0008                  		move.l	obX(a1),d2
000196E4 2629 000C                  		move.l	obY(a1),d3
000196E8 3029 0010                  		move.w	obVelX(a1),d0
000196EC 48C0                       		ext.l	d0
000196EE E180                       		asl.l	#8,d0
000196F0 D480                       		add.l	d0,d2
000196F2 3029 0012                  		move.w	obVelY(a1),d0
000196F6 48C0                       		ext.l	d0
000196F8 E180                       		asl.l	#8,d0
000196FA D680                       		add.l	d0,d3
000196FC 2342 0008                  		move.l	d2,obX(a1)
00019700 2343 000C                  		move.l	d3,obY(a1)
00019704 4E75                       		rts	
00019706                            ; ===========================================================================
00019706                            
00019706                            loc_16800:
00019706 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001970C 4228 0024                  		clr.b	obRoutine(a0)
00019710 4238 F7C8                  		clr.b	(f_lockmulti).w
00019714 337C 0000 0010             		move.w	#0,obVelX(a1)
0001971A 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019720 4E75                       		rts	
00019722                            
00019722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019722                            
00019722                            
00019722                            sub_1681C:
00019722 7000                       		moveq	#0,d0
00019724 343C 1000                  		move.w	#$1000,d2
00019728 3028 0036                  		move.w	$36(a0),d0
0001972C 9069 0008                  		sub.w	obX(a1),d0
00019730 6C00                       		bge.s	loc_16830
00019732 4440                       		neg.w	d0
00019734 4442                       		neg.w	d2
00019736                            
00019736                            loc_16830:
00019736 7200                       		moveq	#0,d1
00019738 363C 1000                  		move.w	#$1000,d3
0001973C 3228 0038                  		move.w	$38(a0),d1
00019740 9269 000C                  		sub.w	obY(a1),d1
00019744 6C00                       		bge.s	loc_16844
00019746 4441                       		neg.w	d1
00019748 4443                       		neg.w	d3
0001974A                            
0001974A                            loc_16844:
0001974A B240                       		cmp.w	d0,d1
0001974C 6500                       		bcs.s	loc_1687A
0001974E 7200                       		moveq	#0,d1
00019750 3228 0038                  		move.w	$38(a0),d1
00019754 9269 000C                  		sub.w	obY(a1),d1
00019758 4841                       		swap	d1
0001975A 83C3                       		divs.w	d3,d1
0001975C 7000                       		moveq	#0,d0
0001975E 3028 0036                  		move.w	$36(a0),d0
00019762 9069 0008                  		sub.w	obX(a1),d0
00019766 6700                       		beq.s	loc_16866
00019768 4840                       		swap	d0
0001976A 81C1                       		divs.w	d1,d0
0001976C                            
0001976C                            loc_16866:
0001976C 3340 0010                  		move.w	d0,obVelX(a1)
00019770 3343 0012                  		move.w	d3,obVelY(a1)
00019774 4A41                       		tst.w	d1
00019776 6A00                       		bpl.s	loc_16874
00019778 4441                       		neg.w	d1
0001977A                            
0001977A                            loc_16874:
0001977A 3141 002E                  		move.w	d1,$2E(a0)
0001977E 4E75                       		rts	
00019780                            ; ===========================================================================
00019780                            
00019780                            loc_1687A:
00019780 7000                       		moveq	#0,d0
00019782 3028 0036                  		move.w	$36(a0),d0
00019786 9069 0008                  		sub.w	obX(a1),d0
0001978A 4840                       		swap	d0
0001978C 81C2                       		divs.w	d2,d0
0001978E 7200                       		moveq	#0,d1
00019790 3228 0038                  		move.w	$38(a0),d1
00019794 9269 000C                  		sub.w	obY(a1),d1
00019798 6700                       		beq.s	loc_16898
0001979A 4841                       		swap	d1
0001979C 83C0                       		divs.w	d0,d1
0001979E                            
0001979E                            loc_16898:
0001979E 3341 0012                  		move.w	d1,obVelY(a1)
000197A2 3342 0010                  		move.w	d2,obVelX(a1)
000197A6 4A40                       		tst.w	d0
000197A8 6A00                       		bpl.s	loc_168A6
000197AA 4440                       		neg.w	d0
000197AC                            
000197AC                            loc_168A6:
000197AC 3140 002E                  		move.w	d0,$2E(a0)
000197B0 4E75                       		rts	
000197B2                            ; End of function sub_1681C
000197B2                            
000197B2                            ; ===========================================================================
000197B2 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
000197B8 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
000197BE 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
000197C2 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
000197C8 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
000197CE 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000197D4 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000197DA 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000197E0 0884 0298 0894             		dc.w $884, $298, $894
000197E6 0270 0894 0190             		dc.w $270, $894, $190
000197EC 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000197F2 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000197F8 1184 0498 1158             		dc.w $1184, $498, $1158
000197FE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019804 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001980A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019810 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00019816 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001981C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019822 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019828 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001982E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019834 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019834 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001983A                            
0001983A                            		include	"_incObj\78 Caterkiller.asm"
0001983A                            ; ---------------------------------------------------------------------------
0001983A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001983A                            ; ---------------------------------------------------------------------------
0001983A                            
0001983A                            Caterkiller:
0001983A 7000                       		moveq	#0,d0
0001983C 1028 0024                  		move.b	obRoutine(a0),d0
00019840 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019844 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019848                            ; ===========================================================================
00019848 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001984A 0000                       		dc.w Cat_Head-Cat_Index
0001984C 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001984E 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019850 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019852 0000                       		dc.w Cat_Delete-Cat_Index
00019854 0000                       		dc.w loc_16CC0-Cat_Index
00019856                            
00019856 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019856                            ; ===========================================================================
00019856                            
00019856                            locret_16950:
00019856 4E75                       		rts	
00019858                            ; ===========================================================================
00019858                            
00019858                            Cat_Main:	; Routine 0
00019858 117C 0007 0016             		move.b	#7,obHeight(a0)
0001985E 117C 0008 0017             		move.b	#8,obWidth(a0)
00019864 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001986A 4EB9 0001 7D20             		jsr	(ObjFloorDist).l
00019870 4A41                       		tst.w	d1
00019872 6AE2                       		bpl.s	locret_16950
00019874 D368 000C                  		add.w	d1,obY(a0)
00019878 4268 0012                  		clr.w	obVelY(a0)
0001987C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019880 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019888 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001988E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019894 6700                       		beq.s	@isscrapbrain
00019896 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001989C                            
0001989C                            	@isscrapbrain:
0001989C 0228 0003 0001             		andi.b	#3,obRender(a0)
000198A2 0028 0004 0001             		ori.b	#4,obRender(a0)
000198A8 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
000198AE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000198B4 117C 0008 0014             		move.b	#8,obActWid(a0)
000198BA 117C 000B 0020             		move.b	#$B,obColType(a0)
000198C0 3428 0008                  		move.w	obX(a0),d2
000198C4 7A0C                       		moveq	#$C,d5
000198C6 0828 0000 0022             		btst	#0,obStatus(a0)
000198CC 6700                       		beq.s	@noflip
000198CE 4445                       		neg.w	d5
000198D0                            
000198D0                            	@noflip:
000198D0 1C3C 0004                  		move.b	#4,d6
000198D4 7600                       		moveq	#0,d3
000198D6 7804                       		moveq	#4,d4
000198D8 2448                       		movea.l	a0,a2
000198DA 7202                       		moveq	#2,d1
000198DC                            
000198DC                            Cat_Loop:
000198DC 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
000198E2 6600 0000                  			bne.w	Cat_ChkGone
000198E6 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
000198EA 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
000198EE 5406                       		addq.b	#2,d6		; alternate between the two
000198F0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000198F6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000198FC 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019902 137C 0008 0014             		move.b	#8,obActWid(a1)
00019908 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001990E D445                       		add.w	d5,d2
00019910 3342 0008                  		move.w	d2,obX(a1)
00019914 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001991A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019920 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019926 137C 0008 001A             		move.b	#8,obFrame(a1)
0001992C 234A 003C                  		move.l	a2,cat_parent(a1)
00019930 1344 003C                  		move.b	d4,cat_parent(a1)
00019934 5804                       		addq.b	#4,d4
00019936 2449                       		movea.l	a1,a2
00019938                            
00019938                            	@fail:
00019938 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001993C                            
0001993C 117C 0007 002A             		move.b	#7,$2A(a0)
00019942 4228 003C                  		clr.b	cat_parent(a0)
00019946                            
00019946                            Cat_Head:	; Routine 2
00019946 4A28 0022                  		tst.b	obStatus(a0)
0001994A 6B00 0000                  		bmi.w	loc_16C96
0001994E 7000                       		moveq	#0,d0
00019950 1028 0025                  		move.b	ob2ndRout(a0),d0
00019954 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019958 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001995C 1228 002B                  		move.b	$2B(a0),d1
00019960 6A00                       		bpl.s	@display
00019962 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019968 1028 0026                  		move.b	obAngle(a0),d0
0001996C 0240 007F                  		andi.w	#$7F,d0
00019970 5828 0026                  		addq.b	#4,obAngle(a0)
00019974 1031 0000                  		move.b	(a1,d0.w),d0
00019978 6A00                       		bpl.s	@animate
0001997A 08A8 0007 002B             		bclr	#7,$2B(a0)
00019980 6000                       		bra.s	@display
00019982                            
00019982                            	@animate:
00019982 0201 0010                  		andi.b	#$10,d1
00019986 D001                       		add.b	d1,d0
00019988 1140 001A                  		move.b	d0,obFrame(a0)
0001998C                            
0001998C                            	@display:
000199AA 4EF9 0000 F70C             		jmp	(DisplaySprite).l
000199B0                            
000199B0                            	Cat_ChkGone:
000199B0 45F8 FC00                  		lea	(v_objstate).w,a2
000199B4 7000                       		moveq	#0,d0
000199B6 1028 0023                  		move.b	obRespawnNo(a0),d0
000199BA 6700                       		beq.s	@delete
000199BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000199C2                            
000199C2                            	@delete:
000199C2 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
000199C8 4E75                       		rts	
000199CA                            ; ===========================================================================
000199CA                            
000199CA                            Cat_Delete:	; Routine $A
000199CA 4EF9 0000 F74C             		jmp	(DeleteObject).l
000199D0                            ; ===========================================================================
000199D0 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
000199D2 0000                       		dc.w loc_16B02-Cat_Index2
000199D4                            ; ===========================================================================
000199D4                            
000199D4                            @wait:
000199D4 5328 002A                  		subq.b	#1,$2A(a0)
000199D8 6B00                       		bmi.s	@move
000199DA 4E75                       		rts	
000199DC                            ; ===========================================================================
000199DC                            
000199DC                            @move:
000199DC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000199E0 117C 0010 002A             		move.b	#$10,$2A(a0)
000199E6 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
000199EC 317C 0040 001C             		move.w	#$40,obAnim(a0)
000199F2 0868 0004 002B             		bchg	#4,$2B(a0)
000199F8 6600                       		bne.s	loc_16AFC
000199FA 4268 0010                  		clr.w	obVelX(a0)
000199FE 4468 001C                  		neg.w	obAnim(a0)
00019A02                            
00019A02                            loc_16AFC:
00019A02 08E8 0007 002B             		bset	#7,$2B(a0)
00019A08                            
00019A08                            loc_16B02:
00019A08 5328 002A                  		subq.b	#1,$2A(a0)
00019A0C 6B00                       		bmi.s	@loc_16B5E
00019A0E 4A68 0010                  			tst.w	obVelX(a0)
00019A12 6700                       			beq.s	@notmoving
00019A14 2428 0008                  			move.l	obX(a0),d2
00019A18 2602                       			move.l	d2,d3
00019A1A 3028 0010                  		move.w	obVelX(a0),d0
00019A1E 0828 0000 0022             		btst	#0,obStatus(a0)
00019A24 6700                       		beq.s	@noflip
00019A26 4440                       		neg.w	d0
00019A28                            
00019A28                            	@noflip:
00019A28 48C0                       		ext.l	d0
00019A2A E180                       		asl.l	#8,d0
00019A2C D480                       		add.l	d0,d2
00019A2E 2142 0008                  		move.l	d2,obX(a0)
00019A32 4843                       			swap	d3
00019A34 B668 0008                  			cmp.w	obX(a0),d3
00019A38 6700                       			beq.s	@notmoving
00019A3A 4EB9 0001 7D20             			jsr	(ObjFloorDist).l
00019A40 0C41 FFF8                  			cmpi.w	#-8,d1
00019A44 6D00                       			blt.s	@loc_16B70
00019A46 0C41 000C                  			cmpi.w	#$C,d1
00019A4A 6C00                       			bge.s	@loc_16B70
00019A4C D368 000C                  			add.w	d1,obY(a0)
00019A50 7000                       		moveq	#0,d0
00019A52 1028 003C                  		move.b	cat_parent(a0),d0
00019A56 5228 003C                  		addq.b	#1,cat_parent(a0)
00019A5A 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019A60 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019A64                            
00019A64                            	@notmoving:
00019A64 4E75                       		rts	
00019A66                            ; ===========================================================================
00019A66                            
00019A66                            @loc_16B5E:
00019A66 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019A6A 117C 0007 002A             		move.b	#7,$2A(a0)
00019A70 4268 0010                  			clr.w	obVelX(a0)
00019A74 4268 001C                  			clr.w	obAnim(a0)
00019A78 4E75                       		rts	
00019A7A                            ; ===========================================================================
00019A7A                            
00019A7A                            @loc_16B70:
00019A7A 7000                       			moveq	#0,d0
00019A7C 1028 003C                  			move.b	cat_parent(a0),d0
00019A80 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019A86 4468 000A                  			neg.w	obX+2(a0)
00019A8A 6700                       			beq.s	@loc_1730A
00019A8C 0828 0000 0022             			btst	#0,obStatus(a0)
00019A92 6700                       			beq.s	@loc_1730A
00019A94 5368 0008                  			subq.w	#1,obX(a0)
00019A98 5228 003C                  			addq.b	#1,cat_parent(a0)
00019A9C 7000                       			moveq	#0,d0
00019A9E 1028 003C                  			move.b	cat_parent(a0),d0
00019AA2 4230 002C                  			clr.b	$2C(a0,d0)
00019AA6                            	@loc_1730A:
00019AA6 0868 0000 0022             			bchg	#0,obStatus(a0)
00019AAC 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019AB2 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AB6 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019ABC 4E75                       		rts	
00019ABE                            ; ===========================================================================
00019ABE                            
00019ABE                            Cat_BodySeg2:	; Routine 6
00019ABE 2268 003C                  		movea.l	cat_parent(a0),a1
00019AC2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019AC8 6A00                       		bpl.s	Cat_BodySeg1
00019ACA 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019AD0 1028 0026                  		move.b	obAngle(a0),d0
00019AD4 0240 007F                  		andi.w	#$7F,d0
00019AD8 5828 0026                  		addq.b	#4,obAngle(a0)
00019ADC 4A31 0004                  		tst.b	4(a1,d0.w)
00019AE0 6A00                       		bpl.s	Cat_AniBody
00019AE2 5828 0026                  		addq.b	#4,obAngle(a0)
00019AE6                            
00019AE6                            Cat_AniBody:
00019AE6 1031 0000                  		move.b	(a1,d0.w),d0
00019AEA 5000                       		addq.b	#8,d0
00019AEC 1140 001A                  		move.b	d0,obFrame(a0)
00019AF0                            
00019AF0                            Cat_BodySeg1:	; Routine 4, 8
00019AF0 2268 003C                  		movea.l	cat_parent(a0),a1
00019AF4 4A28 0022                  		tst.b	obStatus(a0)
00019AF8 6B00 0000                  		bmi.w	loc_16C90
00019AFC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019B02 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019B08 6700 0000                  		beq.w	loc_16C64
00019B0C 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019B12 3029 0010                  		move.w	obVelX(a1),d0
00019B16 D068 001C                  			add.w	obAnim(a0),d0
00019B1A 3140 0010                  		move.w	d0,obVelX(a0)
00019B1E 2428 0008                  		move.l	obX(a0),d2
00019B22 2602                       		move.l	d2,d3
00019B24 3028 0010                  		move.w	obVelX(a0),d0
00019B28 0828 0000 0022             		btst	#0,obStatus(a0)
00019B2E 6700                       		beq.s	loc_16C0C
00019B30 4440                       		neg.w	d0
00019B32                            
00019B32                            loc_16C0C:
00019B32 48C0                       		ext.l	d0
00019B34 E180                       		asl.l	#8,d0
00019B36 D480                       		add.l	d0,d2
00019B38 2142 0008                  		move.l	d2,obX(a0)
00019B3C 4843                       		swap	d3
00019B3E B668 0008                  		cmp.w	obX(a0),d3
00019B42 6700                       		beq.s	loc_16C64
00019B44 7000                       		moveq	#0,d0
00019B46 1028 003C                  		move.b	cat_parent(a0),d0
00019B4A 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019B4E 0C01 0080                  		cmpi.b	#$80,d1
00019B52 6600                       		bne.s	loc_16C50
00019B54 1181 002C                  			move.b	d1,$2C(a0,d0)
00019B58 4468 000A                  			neg.w	obX+2(a0)
00019B5C 6700                       			beq.s	locj_173E4
00019B5E 0828 0000 0022             			btst	#0,obStatus(a0)
00019B64 6700                       			beq.s	locj_173E4
00019B66 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019B6C 6600                       			bne.s	locj_173E4
00019B6E 5368 0008                  			subq.w	#1,obX(a0)
00019B72 5228 003C                  			addq.b	#1,cat_parent(a0)
00019B76 7000                       			moveq	#0,d0
00019B78 1028 003C                  			move.b	cat_parent(a0),d0
00019B7C 4230 002C                  			clr.b	$2C(a0,d0)
00019B80                            	locj_173E4:
00019B80 0868 0000 0022             		bchg	#0,obStatus(a0)
00019B86 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019B8C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B90 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019B96 6000                       		bra.s	loc_16C64
00019B98                            ; ===========================================================================
00019B98                            
00019B98                            loc_16C50:
00019B98 4881                       		ext.w	d1
00019B9A D368 000C                  		add.w	d1,obY(a0)
00019B9E 5228 003C                  		addq.b	#1,cat_parent(a0)
00019BA2 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019BA8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019BAC                            
00019BAC                            loc_16C64:
00019BAC 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019BB2 6700                       		beq.s	loc_16C90
00019BB4 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019BB8 6700                       		beq.s	loc_16C7C
00019BBA 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019BC0 6600                       		bne.s	loc_16C82
00019BC2                            
00019BC2                            loc_16C7C:
00019BC2 4229 0020                  		clr.b    $20(a1)
00019BC6 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019BCC                            
00019BCC                            loc_16C82:
00019BCC 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00019BD2                            
00019BD2                            ; ===========================================================================
00019BD2 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019BDA                            ; ===========================================================================
00019BDA                            
00019BDA                            loc_16C90:
00019BDA 08E9 0007 0022             		bset	#7,obStatus(a1)
00019BE0                            
00019BE0                            loc_16C96:
00019BE0 7000                       		moveq	#0,d0
00019BE2 1028 0024                  		move.b	obRoutine(a0),d0
00019BE6 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019BEA 0828 0000 0022             		btst	#0,obStatus(a0)
00019BF0 6700                       		beq.s	loc_16CAA
00019BF2 4440                       		neg.w	d0
00019BF4                            
00019BF4                            loc_16CAA:
00019BF4 3140 0010                  		move.w	d0,obVelX(a0)
00019BF8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019BFE 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019C04 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019C0A                            
00019C0A                            loc_16CC0:	; Routine $C
00019C0A 4EB9 0000 F6C0             		jsr	(ObjectFall).l
00019C10 4A68 0012                  		tst.w	obVelY(a0)
00019C14 6B00                       		bmi.s	loc_16CE0
00019C16 4EB9 0001 7D20             		jsr	(ObjFloorDist).l
00019C1C 4A41                       		tst.w	d1
00019C1E 6A00                       		bpl.s	loc_16CE0
00019C20 D368 000C                  		add.w	d1,obY(a0)
00019C24 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019C2A                            
00019C2A                            loc_16CE0:
00019C2A 4A28 0001                  		tst.b	obRender(a0)
00019C2E 6A00 FD80                  		bpl.w	Cat_ChkGone
00019C32 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00019C32 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00019C38                            		include	"_anim\Caterkiller.asm"
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019C38                            ; ---------------------------------------------------------------------------
00019C38 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019C48 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019C58 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019C68 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019C78 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019C88 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019C98 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019CA8 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019CB8                            		even
00019CB8                            		even
00019CB8                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019CB8                            ; ---------------------------------------------------------------------------
00019CB8                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019CB8                            ; ---------------------------------------------------------------------------
00019CB8                            Map_Cat_internal:
00019CB8 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019CBA 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019CBC 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019CBE 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019CC0 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019CC2 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019CC4 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019CC6 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019CC8 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019CCA 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019CCC 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019CCE 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019CD0 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019CD2 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019CD4 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019CD6 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019CD8 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019CDA 0000                       		dc.w byte_16E04-Map_Cat_internal
00019CDC 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019CDE 0000                       		dc.w byte_16E10-Map_Cat_internal
00019CE0 0000                       		dc.w byte_16E16-Map_Cat_internal
00019CE2 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019CE4 0000                       		dc.w byte_16E22-Map_Cat_internal
00019CE6 0000                       		dc.w byte_16E28-Map_Cat_internal
00019CE8 01                         byte_16D9E:	dc.b 1
00019CE9 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019CEE 01                         byte_16DA4:	dc.b 1
00019CEF F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019CF4 01                         byte_16DAA:	dc.b 1
00019CF5 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019CFA 01                         byte_16DB0:	dc.b 1
00019CFB EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019D00 01                         byte_16DB6:	dc.b 1
00019D01 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019D06 01                         byte_16DBC:	dc.b 1
00019D07 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019D0C 01                         byte_16DC2:	dc.b 1
00019D0D EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019D12 01                         byte_16DC8:	dc.b 1
00019D13 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019D18 01                         byte_16DCE:	dc.b 1
00019D19 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019D1E 01                         byte_16DD4:	dc.b 1
00019D1F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019D24 01                         byte_16DDA:	dc.b 1
00019D25 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019D2A 01                         byte_16DE0:	dc.b 1
00019D2B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019D30 01                         byte_16DE6:	dc.b 1
00019D31 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019D36 01                         byte_16DEC:	dc.b 1
00019D37 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019D3C 01                         byte_16DF2:	dc.b 1
00019D3D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019D42 01                         byte_16DF8:	dc.b 1
00019D43 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019D48 01                         byte_16DFE:	dc.b 1
00019D49 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019D4E 01                         byte_16E04:	dc.b 1
00019D4F F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019D54 01                         byte_16E0A:	dc.b 1
00019D55 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019D5A 01                         byte_16E10:	dc.b 1
00019D5B EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019D60 01                         byte_16E16:	dc.b 1
00019D61 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019D66 01                         byte_16E1C:	dc.b 1
00019D67 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019D6C 01                         byte_16E22:	dc.b 1
00019D6D EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019D72 01                         byte_16E28:	dc.b 1
00019D73 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019D78                            		even
00019D78                            		even
00019D78                            
00019D78                            		include	"_incObj\79 Lamppost.asm"
00019D78                            ; ---------------------------------------------------------------------------
00019D78                            ; Object 79 - lamppost
00019D78                            ; ---------------------------------------------------------------------------
00019D78                            
00019D78                            Lamppost:
00019D78 7000                       		moveq	#0,d0
00019D7A 1028 0024                  		move.b	obRoutine(a0),d0
00019D7E 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019D82 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019D86 4EF9 0001 18CA             		jmp	(RememberState).l
00019D8C                            ; ===========================================================================
00019D8C 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019D8E 0000                       		dc.w Lamp_Blue-Lamp_Index
00019D90 0000                       		dc.w Lamp_Finish-Lamp_Index
00019D92 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019D94                            
00019D94 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019D94 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019D94 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019D94                            ; ===========================================================================
00019D94                            
00019D94                            Lamp_Main:	; Routine 0
00019D94 5428 0024                  		addq.b	#2,obRoutine(a0)
00019D98 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019DA0 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019DA6 117C 0004 0001             		move.b	#4,obRender(a0)
00019DAC 117C 0008 0014             		move.b	#8,obActWid(a0)
00019DB2 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019DB8 45F8 FC00                  		lea	(v_objstate).w,a2
00019DBC 7000                       		moveq	#0,d0
00019DBE 1028 0023                  		move.b	obRespawnNo(a0),d0
00019DC2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019DC8 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019DCE 6600                       		bne.s	@red
00019DD0 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019DD4 0201 007F                  		andi.b	#$7F,d1
00019DD8 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019DDC 0202 007F                  		andi.b	#$7F,d2
00019DE0 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019DE2 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019DE4                            
00019DE4                            @red:
00019DE4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019DEA 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019DF0 117C 0003 001A             		move.b	#3,obFrame(a0)
00019DF6 4E75                       		rts	
00019DF8                            
00019DF8                            ; ===========================================================================
00019DF8                            
00019DF8                            Lamp_Blue:	; Routine 2
00019DF8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019DFC 6600 0000                  		bne.w	@donothing	; if yes, branch
00019E00 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019E04 6B00 0000                  		bmi.w	@donothing
00019E08 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019E0C 0201 007F                  		andi.b	#$7F,d1
00019E10 1428 0028                  		move.b	obSubtype(a0),d2
00019E14 0202 007F                  		andi.b	#$7F,d2
00019E18 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019E1A 6500                       		bcs.s	@chkhit		; if yes, branch
00019E1C 45F8 FC00                  		lea	(v_objstate).w,a2
00019E20 7000                       		moveq	#0,d0
00019E22 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E26 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E2C 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019E32 117C 0003 001A             		move.b	#3,obFrame(a0)
00019E38 6000 0000                  		bra.w	@donothing
00019E3C                            ; ===========================================================================
00019E3C                            
00019E3C                            @chkhit:
00019E3C 3038 D008                  		move.w	(v_player+obX).w,d0
00019E40 9068 0008                  		sub.w	obX(a0),d0
00019E44 5040                       		addq.w	#8,d0
00019E46 0C40 0010                  		cmpi.w	#$10,d0
00019E4A 6400 0000                  		bcc.w	@donothing
00019E4E 3038 D00C                  		move.w	(v_player+obY).w,d0
00019E52 9068 000C                  		sub.w	obY(a0),d0
00019E56 0640 0040                  		addi.w	#$40,d0
00019E5A 0C40 0068                  		cmpi.w	#$68,d0
00019E5E 6400                       		bcc.s	@donothing
00019E60                            
00019E6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E6E 4EB9 0000 FB98             		jsr	(FindFreeObj).l
00019E74 6600                       		bne.s	@fail
00019E76 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019E7A 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019E80 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019E86 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019E8C 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019E92 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019E9A 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019EA0 137C 0004 0001             		move.b	#4,obRender(a1)
00019EA6 137C 0008 0014             		move.b	#8,obActWid(a1)
00019EAC 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019EB2 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019EB8 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019EBE                            
00019EBE                            	@fail:
00019EBE 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019EC4 6100 0000                  		bsr.w	Lamp_StoreInfo
00019EC8 45F8 FC00                  		lea	(v_objstate).w,a2
00019ECC 7000                       		moveq	#0,d0
00019ECE 1028 0023                  		move.b	obRespawnNo(a0),d0
00019ED2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019ED8                            
00019ED8                            	@donothing:
00019ED8 4E75                       		rts	
00019EDA                            ; ===========================================================================
00019EDA                            
00019EDA                            Lamp_Finish:	; Routine 4	
00019EDA 4E75                       		rts	
00019EDC                            ; ===========================================================================
00019EDC                            
00019EDC                            Lamp_Twirl:	; Routine 6
00019EDC 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019EE0 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019EE2 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019EE8                            
00019EE8                            	@continue:
00019EE8 1028 0026                  		move.b	obAngle(a0),d0
00019EEC 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019EF2 0400 0040                  		subi.b	#$40,d0
00019EF6 4EB9 0000 3A32             		jsr	(CalcSine).l
00019EFC C3FC 0C00                  		muls.w	#$C00,d1
00019F00 4841                       		swap	d1
00019F02 D268 0030                  		add.w	lamp_origX(a0),d1
00019F06 3141 0008                  		move.w	d1,obX(a0)
00019F0A C1FC 0C00                  		muls.w	#$C00,d0
00019F0E 4840                       		swap	d0
00019F10 D068 0032                  		add.w	lamp_origY(a0),d0
00019F14 3140 000C                  		move.w	d0,obY(a0)
00019F18 4E75                       		rts	
00019F1A                            ; ===========================================================================
00019F1A                            ; ---------------------------------------------------------------------------
00019F1A                            ; Subroutine to	store information when you hit a lamppost
00019F1A                            ; ---------------------------------------------------------------------------
00019F1A                            
00019F1A                            Lamp_StoreInfo:
00019F1A 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019F20 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019F26 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019F2C 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019F32 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019F38 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019F3E 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019F44 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019F4A 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019F50 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019F56 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019F5C 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
00019F62 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
00019F68 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
00019F6E 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
00019F74 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
00019F7A 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
00019F80 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
00019F86 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
00019F8C 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00019F92 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
00019F98 4E75                       		rts	
00019F9A                            
00019F9A                            ; ---------------------------------------------------------------------------
00019F9A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019F9A                            ; ---------------------------------------------------------------------------
00019F9A                            
00019F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F9A                            
00019F9A                            
00019F9A                            Lamp_LoadInfo:
00019F9A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
00019FA0 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00019FA6 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00019FAC 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
00019FB2 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00019FB8 4278 FE20                  		clr.w	(v_rings).w
00019FBC 4238 FE1B                  		clr.b	(v_lifecount).w
00019FC0 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
00019FC6 11FC 003B FE25             		move.b	#59,(v_timecent).w
00019FCC 5338 FE24                  		subq.b	#1,(v_timesec).w
00019FD0 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
00019FD6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019FDC 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
00019FE2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
00019FE8 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
00019FEE 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
00019FF4 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
00019FFA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A000 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A006 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A00C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A012 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A018 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A01E 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A024 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A026                            
0001A026 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A02C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A032 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A038                            
0001A038                            	@notlabyrinth:
0001A038 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A03C 6A00                       		bpl.s	locret_170F6
0001A03E 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A042 0440 00A0                  		subi.w	#$A0,d0
0001A046 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A04A                            
0001A04A                            locret_170F6:
0001A04A 4E75                       		rts	
0001A04A 4E75                       		rts	
0001A04C                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A04C                            ; --------------------------------------------------------------------------------
0001A04C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A04C                            ; --------------------------------------------------------------------------------
0001A04C                            
0001A04C                            SME_JfaKr:	
0001A04C 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A050 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A054 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A056 0A                         SME_JfaKr_A:	dc.b $A	
0001A057 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A05C E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A061 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A066 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A06B F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A070 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A075 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A07A 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A07F 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A084 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A089 08                         SME_JfaKr_3D:	dc.b 8	
0001A08A E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A08F E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A094 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A099 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A09E 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A0A3 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A0A8 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A0AD 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A0B2 02                         SME_JfaKr_66:	dc.b 2	
0001A0B3 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A0B8 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A0BD 0A                         SME_JfaKr_71:	dc.b $A	
0001A0BE E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A0C3 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A0C8 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A0CD F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A0D2 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A0D7 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A0DC 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A0E1 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A0E6 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A0EB D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A0F0 0A                         SME_JfaKr_A4:	dc.b $A	
0001A0F1 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A0F6 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A0FB F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A100 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A105 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A10A 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A10F 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A114 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A119 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A11E D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A124 00                         		even
0001A124 00                         		even
0001A124                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A124                            ; ---------------------------------------------------------------------------
0001A124                            ; Object 7D - hidden points at the end of a level
0001A124                            ; ---------------------------------------------------------------------------
0001A124                            
0001A124                            HiddenBonus:
0001A124 7000                       		moveq	#0,d0
0001A126 1028 0024                  		move.b	obRoutine(a0),d0
0001A12A 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A12E 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A132                            ; ===========================================================================
0001A132 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A134 0000                       		dc.w Bonus_Display-Bonus_Index
0001A136                            
0001A136 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A136                            ; ===========================================================================
0001A136                            
0001A136                            Bonus_Main:	; Routine 0
0001A136 7410                       		moveq	#$10,d2
0001A138 3602                       		move.w	d2,d3
0001A13A D643                       		add.w	d3,d3
0001A13C 43F8 D000                  		lea	(v_player).w,a1
0001A140 3029 0008                  		move.w	obX(a1),d0
0001A144 9068 0008                  		sub.w	obX(a0),d0
0001A148 D042                       		add.w	d2,d0
0001A14A B043                       		cmp.w	d3,d0
0001A14C 6400                       		bcc.s	bonu_chkdel
0001A14E 3229 000C                  		move.w	obY(a1),d1
0001A152 9268 000C                  		sub.w	obY(a0),d1
0001A156 D242                       		add.w	d2,d1
0001A158 B243                       		cmp.w	d3,d1
0001A15A 6400                       		bcc.s	bonu_chkdel
0001A15C 4A78 FE08                  		tst.w	(v_debuguse).w
0001A160 6600                       		bne.s	bonu_chkdel
0001A162 4A38 F7CD                  		tst.b	(f_bigring).w
0001A166 6600                       		bne.s	bonu_chkdel
0001A168 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A16C 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A174 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A17A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A180 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A186 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A18C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A192 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A1A2 7000                       		moveq	#0,d0
0001A1A4 1028 0028                  		move.b	obSubtype(a0),d0
0001A1A8 D040                       		add.w	d0,d0
0001A1AA 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A1AE 4EB9 0000 0000             		jsr	(AddPoints).l
0001A1B4                            
0001A1B4                            bonu_chkdel:
0001A1D0 4E75                       		rts	
0001A1D2                            
0001A1D2                            	@delete:
0001A1D2 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001A1D8                            
0001A1D8                            ; ===========================================================================
0001A1D8 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A1DA 03E8                       		dc.w 1000
0001A1DC 0064                       		dc.w 100
0001A1DE 000A                       		dc.w 10
0001A1E0                            ; ===========================================================================
0001A1E0                            
0001A1E0                            Bonus_Display:	; Routine 2
0001A1E0 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A1E4 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A202 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001A208                            
0001A208                            Bonus_Display_Delete:	
0001A208 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001A208 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001A20E                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A20E                            ; ---------------------------------------------------------------------------
0001A20E                            ; Sprite mappings - hidden points at the end of	a level
0001A20E                            ; ---------------------------------------------------------------------------
0001A20E                            Map_Bonus_internal:
0001A20E 0000                       		dc.w @blank-Map_Bonus_internal
0001A210 0000                       		dc.w @10000-Map_Bonus_internal
0001A212 0000                       		dc.w @1000-Map_Bonus_internal
0001A214 0000                       		dc.w @100-Map_Bonus_internal
0001A216 00                         @blank:		dc.b 0
0001A217 01                         @10000:		dc.b 1
0001A218 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A21D 01                         @1000:		dc.b 1
0001A21E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A223 01                         @100:		dc.b 1
0001A224 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A22A 00                         		even
0001A22A 00                         		even
0001A22A                            
0001A22A                            		include	"_incObj\8A Credits.asm"
0001A22A                            ; ---------------------------------------------------------------------------
0001A22A                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A22A                            ; ---------------------------------------------------------------------------
0001A22A                            
0001A22A                            CreditsText:
0001A22A 7000                       		moveq	#0,d0
0001A22C 1028 0024                  		move.b	obRoutine(a0),d0
0001A230 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A234 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A238                            ; ===========================================================================
0001A238 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A23A 0000                       		dc.w Cred_Display-Cred_Index
0001A23C                            ; ===========================================================================
0001A23C                            
0001A23C                            Cred_Main:	; Routine 0
0001A23C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A240 317C 0120 0008             		move.w	#$120,obX(a0)
0001A246 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A24C 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A254 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A25A 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A25E 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A262 117C 0000 0001             		move.b	#0,obRender(a0)
0001A268 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A26E                            
0001A26E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A274 6600                       		bne.s	Cred_Display	; if not, branch
0001A276                            
0001A276 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A27C 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A282 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A286 6700                       		beq.s	Cred_Display	; if not, branch
0001A288 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A28E 6600                       		bne.s	Cred_Display	; if not, branch
0001A290 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A296 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A29C 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001A2A2                            ; ===========================================================================
0001A2A2                            
0001A2A2                            Cred_Display:	; Routine 2
0001A2A2 4EF9 0000 F70C             		jmp	DisplaySprite
0001A2A2 4EF9 0000 F70C             		jmp	DisplaySprite
0001A2A8                            Map_Cred:	include	"_maps\Credits.asm"
0001A2A8                            ; ---------------------------------------------------------------------------
0001A2A8                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A2A8                            ; ---------------------------------------------------------------------------
0001A2A8                            Map_Cred_internal:
0001A2A8 0000                       		dc.w @staff-Map_Cred_internal
0001A2AA 0000                       		dc.w @gameplan-Map_Cred_internal
0001A2AC 0000                       		dc.w @program-Map_Cred_internal
0001A2AE 0000                       		dc.w @character-Map_Cred_internal
0001A2B0 0000                       		dc.w @design-Map_Cred_internal
0001A2B2 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A2B4 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A2B6 0000                       		dc.w @thanks-Map_Cred_internal
0001A2B8 0000                       		dc.w @presentedby-Map_Cred_internal
0001A2BA 0000                       		dc.w @tryagain-Map_Cred_internal
0001A2BC 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A2BE 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A2BF F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A2C4 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A2C9 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A2CE F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A2D3 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A2D8 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A2DD F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A2E2 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A2E7 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A2EC F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A2F1 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A2F6 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A2FB F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A300 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A305 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A306 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A30B 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A310 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A315 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A31A 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A31F 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A324 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A329 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A32E 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A333                            
0001A333 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A338 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A33D B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A342 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A347 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A34C 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A34D 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A352 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A357 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A35C 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A361 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A366 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A36B 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A370                            
0001A370 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A375 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A37A B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A37F B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A384 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A389 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A38E B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A393 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A398                            
0001A398 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A39D D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A3A2                            
0001A3A2 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A3A7 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A3AC D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A3B1 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A3B6 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A3BB D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A3C0                            
0001A3C0 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A3C5 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A3CA F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A3CF 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A3D0 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A3D5 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A3DA 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A3DF                            
0001A3DF B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A3E4 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A3E9 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A3EE B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A3F3 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A3F8 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A3F9 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A3FE 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A403 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A408 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A40D 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A412 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A417                            
0001A417 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A41C B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A421 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A426 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A42B B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A430 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A431 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A436 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A43B 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A440 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A445 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A44A 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A44F 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A454 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A459 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A45E 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A463                            
0001A463 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A468 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A46D B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A472 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A477 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A47C B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A481 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A486 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A48B                            
0001A48B D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A490 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A495 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A49A D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A49F D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A4A4 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A4A9 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A4AE D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A4B3 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A4B8 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A4BD 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A4BE D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A4C3 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A4C8 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A4CD D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A4D2 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A4D7 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A4DC D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A4E1 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A4E6 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A4EB D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A4F0 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A4F5 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A4FA 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A4FF 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A504 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A509 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A50E 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A513 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A518 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A51D 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A522 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A527 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A52C 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A531 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A532 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A537 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A53C 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A541 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A546 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A54B 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A550 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A555 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A55A                            
0001A55A B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A55F B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A564 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A569 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A56E B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A573 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A578                            
0001A578 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A57D D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A582 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A587 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A588 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A58D 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A592 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A597 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A59C 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A5A1 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A5A6 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A5AB 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A5B0 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A5B5                            
0001A5B5 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A5BA B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A5BF                            
0001A5BF D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A5C4 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A5C9 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A5CE D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A5D3 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A5D8 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A5D9 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A5DE 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A5E3 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A5E8 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A5ED 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A5F2 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A5F7 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A5FC 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A601 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A602 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A607 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A60C E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A611 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A616 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A61B E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A620                            
0001A620 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A625 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A62A 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A62F 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A634 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A639 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A63E 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A643 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A648                            		even
0001A648                            		even
0001A648                            
0001A648                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A648                            ; ---------------------------------------------------------------------------
0001A648                            ; Object 3D - Eggman (GHZ)
0001A648                            ; ---------------------------------------------------------------------------
0001A648                            
0001A648                            BossGreenHill:
0001A648 7000                       		moveq	#0,d0
0001A64A 1028 0024                  		move.b	obRoutine(a0),d0
0001A64E 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A652 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A656                            ; ===========================================================================
0001A656 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A658 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A65A 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A65C 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A65E                            
0001A65E 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A660 0401                       		dc.b 4,	1
0001A662 0607                       		dc.b 6,	7
0001A664                            ; ===========================================================================
0001A664                            
0001A664                            BGHZ_Main:	; Routine 0
0001A664 45F9 0001 A65E             		lea	(BGHZ_ObjData).l,a2
0001A66A 2248                       		movea.l	a0,a1
0001A66C 7202                       		moveq	#2,d1
0001A66E 6000                       		bra.s	BGHZ_LoadBoss
0001A670                            ; ===========================================================================
0001A670                            
0001A670                            BGHZ_Loop:
0001A670 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001A676 6600                       		bne.s	loc_17772
0001A678                            
0001A678                            BGHZ_LoadBoss:
0001A678 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A67C 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A680 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A686 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A68C 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A694 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A69A 137C 0004 0001             		move.b	#4,obRender(a1)
0001A6A0 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A6A6 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A6AC 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A6B0 2348 0034                  		move.l	a0,$34(a1)
0001A6B4 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A6B8                            
0001A6B8                            loc_17772:
0001A6B8 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A6BE 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A6C4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A6CA 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A6D0                            
0001A6D0                            
0001A6D0                            BGHZ_ShipMain:	; Routine 2
0001A6D0 7000                       		moveq	#0,d0
0001A6D2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A6D6 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A6DA 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A6DE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A6E4 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001A6EA 1028 0022                  		move.b	obStatus(a0),d0
0001A6EE 0200 0003                  		andi.b	#3,d0
0001A6F2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A6F8 8128 0001                  		or.b	d0,obRender(a0)
0001A6FC 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001A702                            ; ===========================================================================
0001A702 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A704 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A706 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A708 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A70A 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A70C 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A70E 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A710                            ; ===========================================================================
0001A710                            
0001A710                            BGHZ_ShipStart:
0001A710 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A716 6100 0000                  		bsr.w	BossMove
0001A71A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A720 6600                       		bne.s	loc_177E6
0001A722 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A728 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A72C                            
0001A72C                            loc_177E6:
0001A72C 1028 003F                  		move.b	$3F(a0),d0
0001A730 4EB9 0000 3A32             		jsr	(CalcSine).l
0001A736 EC40                       		asr.w	#6,d0
0001A738 D068 0038                  		add.w	$38(a0),d0
0001A73C 3140 000C                  		move.w	d0,obY(a0)
0001A740 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A746 5428 003F                  		addq.b	#2,$3F(a0)
0001A74A 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A750 6400                       		bcc.s	locret_1784A
0001A752 4A28 0022                  		tst.b	obStatus(a0)
0001A756 6B00                       		bmi.s	loc_1784C
0001A758 4A28 0020                  		tst.b	obColType(a0)
0001A75C 6600                       		bne.s	locret_1784A
0001A75E 4A28 003E                  		tst.b	$3E(a0)
0001A762 6600                       		bne.s	BGHZ_ShipFlash
0001A764 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A774                            
0001A774                            BGHZ_ShipFlash:
0001A774 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A778 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A77A 4A51                       		tst.w	(a1)
0001A77C 6600                       		bne.s	loc_1783C
0001A77E 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A782                            
0001A782                            loc_1783C:
0001A782 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A784 5328 003E                  		subq.b	#1,$3E(a0)
0001A788 6600                       		bne.s	locret_1784A
0001A78A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A790                            
0001A790                            locret_1784A:
0001A790 4E75                       		rts	
0001A792                            ; ===========================================================================
0001A792                            
0001A792                            loc_1784C:
0001A792 7064                       		moveq	#100,d0
0001A794 6100 0000                  		bsr.w	AddPoints
0001A798 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A79E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A7A4 4E75                       		rts	
0001A7A4 4E75                       		rts	
0001A7A6                            
0001A7A6                            ; ---------------------------------------------------------------------------
0001A7A6                            ; Defeated boss	subroutine
0001A7A6                            ; ---------------------------------------------------------------------------
0001A7A6                            
0001A7A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A7A6                            
0001A7A6                            
0001A7A6                            BossDefeated:
0001A7A6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A7AA 0200 0007                  		andi.b	#7,d0
0001A7AE 6600                       		bne.s	locret_178A2
0001A7B0 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001A7B6 6600                       		bne.s	locret_178A2
0001A7B8 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A7BC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A7C2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A7C8 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001A7CE 3200                       		move.w	d0,d1
0001A7D0 7200                       		moveq	#0,d1
0001A7D2 1200                       		move.b	d0,d1
0001A7D4 E409                       		lsr.b	#2,d1
0001A7D6 0441 0020                  		subi.w	#$20,d1
0001A7DA D369 0008                  		add.w	d1,obX(a1)
0001A7DE E048                       		lsr.w	#8,d0
0001A7E0 E608                       		lsr.b	#3,d0
0001A7E2 D169 000C                  		add.w	d0,obY(a1)
0001A7E6                            
0001A7E6                            locret_178A2:
0001A7E6 4E75                       		rts	
0001A7E8                            ; End of function BossDefeated
0001A7E8                            
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            ; Subroutine to	move a boss
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            
0001A7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A7E8                            
0001A7E8                            
0001A7E8                            BossMove:
0001A7E8 2428 0030                  		move.l	$30(a0),d2
0001A7EC 2628 0038                  		move.l	$38(a0),d3
0001A7F0 3028 0010                  		move.w	obVelX(a0),d0
0001A7F4 48C0                       		ext.l	d0
0001A7F6 E180                       		asl.l	#8,d0
0001A7F8 D480                       		add.l	d0,d2
0001A7FA 3028 0012                  		move.w	obVelY(a0),d0
0001A7FE 48C0                       		ext.l	d0
0001A800 E180                       		asl.l	#8,d0
0001A802 D680                       		add.l	d0,d3
0001A804 2142 0030                  		move.l	d2,$30(a0)
0001A808 2143 0038                  		move.l	d3,$38(a0)
0001A80C 4E75                       		rts	
0001A80E                            ; End of function BossMove
0001A80E                            
0001A80E                            ; ===========================================================================
0001A80E                            
0001A80E                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A80E                            
0001A80E                            BGHZ_MakeBall:
0001A80E 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A814 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A81A 6100 FFCC                  		bsr.w	BossMove
0001A81E 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A824 6600                       		bne.s	loc_17916
0001A826 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A82C 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A832 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A836 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001A83C 6600                       		bne.s	loc_17910
0001A83E 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A842 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A848 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A84E 2348 0034                  		move.l	a0,$34(a1)
0001A852                            
0001A852                            loc_17910:
0001A852 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A858                            
0001A858                            loc_17916:
0001A858 6000 FED2                  		bra.w	loc_177E6
0001A85C                            ; ===========================================================================
0001A85C                            
0001A85C                            BGHZ_ShipMove:
0001A85C 5368 003C                  		subq.w	#1,$3C(a0)
0001A860 6A00                       		bpl.s	BGHZ_Reverse
0001A862 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A866 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A86C 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A872 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A878 6600                       		bne.s	BGHZ_Reverse
0001A87A 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A880 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A886                            
0001A886                            BGHZ_Reverse:
0001A886 0828 0000 0022             		btst	#0,obStatus(a0)
0001A88C 6600                       		bne.s	loc_17950
0001A88E 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A892                            
0001A892                            loc_17950:
0001A892 6000 FE98                  		bra.w	loc_177E6
0001A896                            ; ===========================================================================
0001A896                            
0001A896                            loc_17954:
0001A896 5368 003C                  		subq.w	#1,$3C(a0)
0001A89A 6B00                       		bmi.s	loc_17960
0001A89C 6100 FF4A                  		bsr.w	BossMove
0001A8A0 6000                       		bra.s	loc_17976
0001A8A2                            ; ===========================================================================
0001A8A2                            
0001A8A2                            loc_17960:
0001A8A2 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A8A8 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A8AE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A8B2 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A8B8                            
0001A8B8                            loc_17976:
0001A8B8 6000 FE72                  		bra.w	loc_177E6
0001A8BC                            ; ===========================================================================
0001A8BC                            
0001A8BC                            loc_1797A:
0001A8BC 5368 003C                  		subq.w	#1,$3C(a0)
0001A8C0 6B00                       		bmi.s	loc_17984
0001A8C2 6000 FEE2                  		bra.w	BossDefeated
0001A8C6                            ; ===========================================================================
0001A8C6                            
0001A8C6                            loc_17984:
0001A8C6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A8CC 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A8D2 4268 0010                  		clr.w	obVelX(a0)
0001A8D6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A8DA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A8E0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A8E4 6600                       		bne.s	locret_179AA
0001A8E6 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A8EC                            
0001A8EC                            locret_179AA:
0001A8EC 4E75                       		rts	
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            loc_179AC:
0001A8EE 5268 003C                  		addq.w	#1,$3C(a0)
0001A8F2 6700                       		beq.s	loc_179BC
0001A8F4 6A00                       		bpl.s	loc_179C2
0001A8F6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A8FC 6000                       		bra.s	loc_179EE
0001A8FE                            ; ===========================================================================
0001A8FE                            
0001A8FE                            loc_179BC:
0001A8FE 4268 0012                  		clr.w	obVelY(a0)
0001A902 6000                       		bra.s	loc_179EE
0001A904                            ; ===========================================================================
0001A904                            
0001A904                            loc_179C2:
0001A904 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A90A 6500                       		bcs.s	loc_179DA
0001A90C 6700                       		beq.s	loc_179E0
0001A90E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A914 6500                       		bcs.s	loc_179EE
0001A916 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A91A 6000                       		bra.s	loc_179EE
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_179DA:
0001A91C 5168 0012                  		subq.w	#8,obVelY(a0)
0001A920 6000                       		bra.s	loc_179EE
0001A922                            ; ===========================================================================
0001A922                            
0001A922                            loc_179E0:
0001A922 4268 0012                          clr.w    obVelY(a0)
0001A926 4A38 FE2D                          tst.b     (v_invinc).w
0001A92A 6600                               bne.s   @boss_invinc
0001A92C 4A38 FE2E                          tst.b     (v_shoes).w
0001A930 6600                               bne.s   @boss_shoes
0001A932                            
0001A932 1038 F5C6                          move.b   (v_Saved_music),d0
0001A936 6000 0000                          bra.w      @boss_play
0001A93A                            
0001A93A                            @boss_invinc:
0001A93A 103C 0000                          move.b #bgm_Invincible,d0
0001A93E                            
0001A93E                            @boss_shoes:
0001A93E 103C 0000                          move.b #bgm_Ending,d0
0001A942                            
0001A942                            @boss_play:
0001A942 4EB8 124A                          jsr PlaySound
0001A946                            
0001A946                            loc_179EE:
0001A946 6100 FEA0                  		bsr.w	BossMove
0001A94A 6000 FDE0                  		bra.w	loc_177E6
0001A94E                            ; ===========================================================================
0001A94E                            
0001A94E                            loc_179F6:
0001A94E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A954 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A95A 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001A960 6700                       		beq.s	loc_17A10
0001A962 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A966 6000                       		bra.s	loc_17A16
0001A968                            ; ===========================================================================
0001A968                            
0001A968                            loc_17A10:
0001A968 4A28 0001                  		tst.b	obRender(a0)
0001A96C 6A00                       		bpl.s	BGHZ_ShipDel
0001A96E                            
0001A96E                            loc_17A16:
0001A96E 6100 FE78                  		bsr.w	BossMove
0001A972 6000 FDB8                  		bra.w	loc_177E6
0001A976                            ; ===========================================================================
0001A976                            
0001A976                            BGHZ_ShipDel:
0001A976 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001A97C                            ; ===========================================================================
0001A97C                            
0001A97C                            BGHZ_FaceMain:	; Routine 4
0001A97C 7000                       		moveq	#0,d0
0001A97E 7201                       		moveq	#1,d1
0001A980 2268 0034                  		movea.l	$34(a0),a1
0001A984 1029 0025                  		move.b	ob2ndRout(a1),d0
0001A988 5900                       		subq.b	#4,d0
0001A98A 6600                       		bne.s	loc_17A3E
0001A98C 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001A992 6600                       		bne.s	loc_17A46
0001A994 7204                       		moveq	#4,d1
0001A996                            
0001A996                            loc_17A3E:
0001A996 5D00                       		subq.b	#6,d0
0001A998 6B00                       		bmi.s	loc_17A46
0001A99A 720A                       		moveq	#$A,d1
0001A99C 6000                       		bra.s	loc_17A5A
0001A99E                            ; ===========================================================================
0001A99E                            
0001A99E                            loc_17A46:
0001A99E 4A29 0020                  		tst.b	obColType(a1)
0001A9A2 6600                       		bne.s	loc_17A50
0001A9A4 7205                       		moveq	#5,d1
0001A9A6 6000                       		bra.s	loc_17A5A
0001A9A8                            ; ===========================================================================
0001A9A8                            
0001A9A8                            loc_17A50:
0001A9A8 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001A9AE 6500                       		bcs.s	loc_17A5A
0001A9B0 7204                       		moveq	#4,d1
0001A9B2                            
0001A9B2                            loc_17A5A:
0001A9B2 1141 001C                  		move.b	d1,obAnim(a0)
0001A9B6 5500                       		subq.b	#2,d0
0001A9B8 6600                       		bne.s	BGHZ_FaceDisp
0001A9BA 117C 0006 001C             		move.b	#6,obAnim(a0)
0001A9C0 4A28 0001                  		tst.b	obRender(a0)
0001A9C4 6A00                       		bpl.s	BGHZ_FaceDel
0001A9C6                            
0001A9C6                            BGHZ_FaceDisp:
0001A9C6 6000                       		bra.s	BGHZ_Display
0001A9C8                            ; ===========================================================================
0001A9C8                            
0001A9C8                            BGHZ_FaceDel:
0001A9C8 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            BGHZ_FlameMain:	; Routine 6
0001A9CE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001A9D4 2268 0034                  		movea.l	$34(a0),a1
0001A9D8 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001A9DE 6600                       		bne.s	loc_17A96
0001A9E0 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001A9E6 4A28 0001                  		tst.b	obRender(a0)
0001A9EA 6A00                       		bpl.s	BGHZ_FlameDel
0001A9EC 6000                       		bra.s	BGHZ_FlameDisp
0001A9EE                            ; ===========================================================================
0001A9EE                            
0001A9EE                            loc_17A96:
0001A9EE 3029 0010                  		move.w	obVelX(a1),d0
0001A9F2 6700                       		beq.s	BGHZ_FlameDisp
0001A9F4 117C 0008 001C             		move.b	#8,obAnim(a0)
0001A9FA                            
0001A9FA                            BGHZ_FlameDisp:
0001A9FA 6000                       		bra.s	BGHZ_Display
0001A9FC                            ; ===========================================================================
0001A9FC                            
0001A9FC                            BGHZ_FlameDel:
0001A9FC 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001AA02                            ; ===========================================================================
0001AA02                            
0001AA02                            BGHZ_Display:
0001AA02 2268 0034                  		movea.l	$34(a0),a1
0001AA06 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AA0C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AA12 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AA18 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AA1E 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001AA24 1028 0022                  		move.b	obStatus(a0),d0
0001AA28 0200 0003                  		andi.b	#3,d0
0001AA2C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AA32 8128 0001                  		or.b	d0,obRender(a0)
0001AA36 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001AA36 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001AA3C                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            
0001AA3C                            BossBall:
0001AA3C 7000                       		moveq	#0,d0
0001AA3E 1028 0024                  		move.b	obRoutine(a0),d0
0001AA42 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AA46 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AA4A                            ; ===========================================================================
0001AA4A 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AA4C 0000                       		dc.w GBall_Base-GBall_Index
0001AA4E 0000                       		dc.w GBall_Display2-GBall_Index
0001AA50 0000                       		dc.w loc_17C68-GBall_Index
0001AA52 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AA54                            ; ===========================================================================
0001AA54                            
0001AA54                            GBall_Main:	; Routine 0
0001AA54 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA58 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AA5E 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AA64 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AA6C 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AA72 45E8 0028                  		lea	obSubtype(a0),a2
0001AA76 14FC 0000                  		move.b	#0,(a2)+
0001AA7A 7205                       		moveq	#5,d1
0001AA7C 2248                       		movea.l	a0,a1
0001AA7E 6000                       		bra.s	loc_17B60
0001AA80                            ; ===========================================================================
0001AA80                            
0001AA80                            GBall_MakeLinks:
0001AA80 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001AA86 6600                       		bne.s	GBall_MakeBall
0001AA88 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AA8E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AA94 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AA98 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AA9E 237C 0000 97DA 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AAA6 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AAAC 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AAB2 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AAB6                            
0001AAB6                            loc_17B60:
0001AAB6 3A09                       		move.w	a1,d5
0001AAB8 0445 D000                  		subi.w	#$D000,d5
0001AABC EC4D                       		lsr.w	#6,d5
0001AABE 0245 007F                  		andi.w	#$7F,d5
0001AAC2 14C5                       		move.b	d5,(a2)+
0001AAC4 137C 0004 0001             		move.b	#4,obRender(a1)
0001AACA 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AAD0 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AAD6 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AADC 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AAE0                            
0001AAE0                            GBall_MakeBall:
0001AAE0 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AAE6 237C 0000 9D36 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AAEE 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AAF4 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AAFA 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AB00 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AB06 4E75                       		rts	
0001AB08                            ; ===========================================================================
0001AB08                            
0001AB08 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AB0E                            
0001AB0E                            ; ===========================================================================
0001AB0E                            
0001AB0E                            GBall_Base:	; Routine 2
0001AB0E 47F9 0001 AB08             		lea	(GBall_PosData).l,a3
0001AB14 45E8 0028                  		lea	obSubtype(a0),a2
0001AB18 7C00                       		moveq	#0,d6
0001AB1A 1C1A                       		move.b	(a2)+,d6
0001AB1C                            
0001AB1C                            loc_17BC6:
0001AB1C 7800                       		moveq	#0,d4
0001AB1E 181A                       		move.b	(a2)+,d4
0001AB20 ED4C                       		lsl.w	#6,d4
0001AB22 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AB28 2244                       		movea.l	d4,a1
0001AB2A 101B                       		move.b	(a3)+,d0
0001AB2C B029 003C                  		cmp.b	$3C(a1),d0
0001AB30 6700                       		beq.s	loc_17BE0
0001AB32 5229 003C                  		addq.b	#1,$3C(a1)
0001AB36                            
0001AB36                            loc_17BE0:
0001AB36 51CE FFE4                  		dbf	d6,loc_17BC6
0001AB3A                            
0001AB3A B029 003C                  		cmp.b	$3C(a1),d0
0001AB3E 6600                       		bne.s	loc_17BFA
0001AB40 2268 0034                  		movea.l	$34(a0),a1
0001AB44 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AB4A 6600                       		bne.s	loc_17BFA
0001AB4C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB50                            
0001AB50                            loc_17BFA:
0001AB50 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AB56 6700                       		beq.s	GBall_Display
0001AB58 5268 0032                  		addq.w	#1,$32(a0)
0001AB5C                            
0001AB5C                            GBall_Display:
0001AB5C 6100 0000                  		bsr.w	sub_17C2A
0001AB60 1028 0026                  		move.b	obAngle(a0),d0
0001AB64 4EB9 0000 974C             		jsr	(Swing_Move2).l
0001AB6A 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001AB70                            ; ===========================================================================
0001AB70                            
0001AB70                            GBall_Display2:	; Routine 4
0001AB70 6100 0000                  		bsr.w	sub_17C2A
0001AB74 4EB9 0000 970C             		jsr	(Obj48_Move).l
0001AB7A 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001AB80                            
0001AB80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AB80                            
0001AB80                            
0001AB80                            sub_17C2A:
0001AB80 2268 0034                  		movea.l	$34(a0),a1
0001AB84 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AB8A 6400                       		bcc.s	loc_17C3C
0001AB8C 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AB92                            
0001AB92                            loc_17C3C:
0001AB92 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AB98 3029 000C                  		move.w	obY(a1),d0
0001AB9C D068 0032                  		add.w	$32(a0),d0
0001ABA0 3140 0038                  		move.w	d0,$38(a0)
0001ABA4 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ABAA 4A29 0022                  		tst.b	obStatus(a1)
0001ABAE 6A00                       		bpl.s	locret_17C66
0001ABB0 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001ABB4 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ABBA                            
0001ABBA                            locret_17C66:
0001ABBA 4E75                       		rts	
0001ABBC                            ; End of function sub_17C2A
0001ABBC                            
0001ABBC                            ; ===========================================================================
0001ABBC                            
0001ABBC                            loc_17C68:	; Routine 6
0001ABBC 2268 0034                  		movea.l	$34(a0),a1
0001ABC0 4A29 0022                  		tst.b	obStatus(a1)
0001ABC4 6A00                       		bpl.s	GBall_Display3
0001ABC6 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001ABCA 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ABD0                            
0001ABD0                            GBall_Display3:
0001ABD0 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001ABD6                            ; ===========================================================================
0001ABD6                            
0001ABD6                            GBall_ChkVanish:; Routine 8
0001ABD6 7000                       		moveq	#0,d0
0001ABD8 4A28 001A                  		tst.b	obFrame(a0)
0001ABDC 6600                       		bne.s	GBall_Vanish
0001ABDE 5200                       		addq.b	#1,d0
0001ABE0                            
0001ABE0                            GBall_Vanish:
0001ABE0 1140 001A                  		move.b	d0,obFrame(a0)
0001ABE4 2268 0034                  		movea.l	$34(a0),a1
0001ABE8 4A29 0022                  		tst.b	obStatus(a1)
0001ABEC 6A00                       		bpl.s	GBall_Display4
0001ABEE 117C 0000 0020             		move.b	#0,obColType(a0)
0001ABF4 6100 FBB0                  		bsr.w	BossDefeated
0001ABF8 5328 003C                  		subq.b	#1,$3C(a0)
0001ABFC 6A00                       		bpl.s	GBall_Display4
0001ABFE 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AC02 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AC08                            
0001AC08                            GBall_Display4:
0001AC08 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001AC08 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001AC0E                            		include	"_anim\Eggman.asm"
0001AC0E                            ; ---------------------------------------------------------------------------
0001AC0E                            ; Animation script - Eggman (bosses)
0001AC0E                            ; ---------------------------------------------------------------------------
0001AC0E 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AC10 0000                       		dc.w @facenormal1-Ani_Eggman
0001AC12 0000                       		dc.w @facenormal2-Ani_Eggman
0001AC14 0000                       		dc.w @facenormal3-Ani_Eggman
0001AC16 0000                       		dc.w @facelaugh-Ani_Eggman
0001AC18 0000                       		dc.w @facehit-Ani_Eggman
0001AC1A 0000                       		dc.w @facepanic-Ani_Eggman
0001AC1C 0000                       		dc.w @blank-Ani_Eggman
0001AC1E 0000                       		dc.w @flame1-Ani_Eggman
0001AC20 0000                       		dc.w @flame2-Ani_Eggman
0001AC22 0000                       		dc.w @facedefeat-Ani_Eggman
0001AC24 0000                       		dc.w @escapeflame-Ani_Eggman
0001AC26 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AC2A 00                         		even
0001AC2A 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AC2E                            		even
0001AC2E 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AC32                            		even
0001AC32 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AC36                            		even
0001AC36 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AC3A                            		even
0001AC3A 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AC3E                            		even
0001AC3E 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AC42                            		even
0001AC42 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AC46 00                         		even
0001AC46 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AC4A                            		even
0001AC4A 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AC4E                            		even
0001AC4E 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AC52 00                         		even
0001AC52 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AC5E 00                         		even
0001AC5E 00                         		even
0001AC5E                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AC5E                            ; --------------------------------------------------------------------------------
0001AC5E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AC5E                            ; --------------------------------------------------------------------------------
0001AC5E                            
0001AC5E                            SME_F_pyS:	
0001AC5E 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AC62 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AC66 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AC6A 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AC6E 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AC72 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AC76 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AC78 05                         SME_F_pyS_1A:	dc.b 5	
0001AC79 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AC7E FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AC83 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AC88 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AC8D 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AC92 03                         SME_F_pyS_34:	dc.b 3	
0001AC93 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC98 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AC9D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ACA2 03                         SME_F_pyS_44:	dc.b 3	
0001ACA3 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ACA8 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001ACAD EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ACB2 04                         SME_F_pyS_54:	dc.b 4	
0001ACB3 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001ACB8 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001ACBD EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001ACC2 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACC7 04                         SME_F_pyS_69:	dc.b 4	
0001ACC8 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001ACCD EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001ACD2 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001ACD7 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACDC 04                         SME_F_pyS_7E:	dc.b 4	
0001ACDD E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001ACE2 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001ACE7 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001ACEC EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACF1 04                         SME_F_pyS_93:	dc.b 4	
0001ACF2 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001ACF7 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ACFC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AD01 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AD06 07                         SME_F_pyS_A8:	dc.b 7	
0001AD07 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AD0C E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AD11 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AD16 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AD1B F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AD20 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AD25 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD2A 01                         SME_F_pyS_CC:	dc.b 1	
0001AD2B 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AD30 01                         SME_F_pyS_D2:	dc.b 1	
0001AD31 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AD36 00                         SME_F_pyS_D8:	dc.b 0	
0001AD37 02                         SME_F_pyS_D9:	dc.b 2	
0001AD38 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AD3D 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AD42 02                         SME_F_pyS_E4:	dc.b 2	
0001AD43 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AD48 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AD4E 00                         		even
0001AD4E 00                         		even
0001AD4E                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AD4E                            ; ---------------------------------------------------------------------------
0001AD4E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AD4E                            ; ---------------------------------------------------------------------------
0001AD4E                            Map_BossItems_internal:
0001AD4E 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AD50 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AD52 0000                       		dc.w @cross-Map_BossItems_internal
0001AD54 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AD56 0000                       		dc.w @pipe-Map_BossItems_internal
0001AD58 0000                       		dc.w @spike-Map_BossItems_internal
0001AD5A 0000                       		dc.w @legmask-Map_BossItems_internal
0001AD5C 0000                       		dc.w @legs-Map_BossItems_internal
0001AD5E 01                         @chainanchor1:	dc.b 1
0001AD5F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AD64 02                         @chainanchor2:	dc.b 2
0001AD65 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AD6A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AD70 00                         		even
0001AD70 01                         @cross:		dc.b 1
0001AD71 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AD76 01                         @widepipe:	dc.b 1
0001AD77 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AD7C 01                         @pipe:		dc.b 1
0001AD7D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AD82 04                         @spike:		dc.b 4
0001AD83 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AD88 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AD8D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AD92 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AD98 00                         		even
0001AD98 02                         @legmask:	dc.b 2
0001AD99 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AD9E 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001ADA4 00                         		even
0001ADA4 02                         @legs:		dc.b 2
0001ADA5 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001ADAA 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001ADB0 00                         		even
0001ADB0 00                         		even
0001ADB0                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001ADB0                            ; ---------------------------------------------------------------------------
0001ADB0                            ; Object 77 - Eggman (LZ)
0001ADB0                            ; ---------------------------------------------------------------------------
0001ADB0                            
0001ADB0                            BossLabyrinth:
0001ADB0 7000                       		moveq	#0,d0
0001ADB2 1028 0024                  		move.b	obRoutine(a0),d0
0001ADB6 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001ADBA 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001ADBE                            ; ===========================================================================
0001ADBE 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001ADC0 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001ADC2 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001ADC4 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001ADC6                            
0001ADC6 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001ADC8 0401                       		dc.b 4,	1
0001ADCA 0607                       		dc.b 6,	7
0001ADCC                            ; ===========================================================================
0001ADCC                            
0001ADCC                            Obj77_Main:	; Routine 0
0001ADCC 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001ADD2 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001ADD8 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001ADDE 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001ADE4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001ADEA 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001ADF0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001ADF6 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001ADFA 2248                       		movea.l	a0,a1
0001ADFC 7202                       		moveq	#2,d1
0001ADFE 6000                       		bra.s	Obj77_LoadBoss
0001AE00                            ; ===========================================================================
0001AE00                            
0001AE00                            Obj77_Loop:
0001AE00 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001AE06 6600                       		bne.s	Obj77_ShipMain
0001AE08 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AE0C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AE12 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AE18                            
0001AE18                            Obj77_LoadBoss:
0001AE18 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AE1E 4229 0025                  		clr.b	ob2ndRout(a1)
0001AE22 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AE26 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AE2A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AE30 237C 0001 AC5E 0004        		move.l	#Map_Eggman,obMap(a1)
0001AE38 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AE3E 137C 0004 0001             		move.b	#4,obRender(a1)
0001AE44 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AE4A 2348 0034                  		move.l	a0,$34(a1)
0001AE4E 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AE52                            
0001AE52                            Obj77_ShipMain:	; Routine 2
0001AE52 43F8 D000                  		lea	(v_player).w,a1
0001AE56 7000                       		moveq	#0,d0
0001AE58 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AE5C 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AE60 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AE64 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001AE6A 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001AE70 7003                       		moveq	#3,d0
0001AE72 C028 0022                  		and.b	obStatus(a0),d0
0001AE76 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AE7C 8128 0001                  		or.b	d0,obRender(a0)
0001AE80 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001AE86                            ; ===========================================================================
0001AE86 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001AE8A 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001AE8E 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001AE92 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001AE96                            ; ===========================================================================
0001AE96                            
0001AE96                            loc_17F1E:
0001AE96 3029 0008                  		move.w	obX(a1),d0
0001AE9A 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001AE9E 6500                       		bcs.s	loc_17F38
0001AEA0 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AEA6 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001AEAC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEB0                            
0001AEB0                            loc_17F38:
0001AEB0 6100 F936                  		bsr.w	BossMove
0001AEB4 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AEBA 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001AEC0                            
0001AEC0                            loc_17F48:
0001AEC0 4A28 003D                  		tst.b	$3D(a0)
0001AEC4 6600                       		bne.s	loc_17F8E
0001AEC6 4A28 0022                  		tst.b	obStatus(a0)
0001AECA 6B00                       		bmi.s	loc_17F92
0001AECC 4A28 0020                  		tst.b	obColType(a0)
0001AED0 6600                       		bne.s	locret_17F8C
0001AED2 4A28 003E                  		tst.b	$3E(a0)
0001AED6 6600                       		bne.s	loc_17F70
0001AED8 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AEE8                            
0001AEE8                            loc_17F70:
0001AEE8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AEEC 7000                       		moveq	#0,d0
0001AEEE 4A51                       		tst.w	(a1)
0001AEF0 6600                       		bne.s	loc_17F7E
0001AEF2 303C 0EEE                  		move.w	#cWhite,d0
0001AEF6                            
0001AEF6                            loc_17F7E:
0001AEF6 3280                       		move.w	d0,(a1)
0001AEF8 5328 003E                  		subq.b	#1,$3E(a0)
0001AEFC 6600                       		bne.s	locret_17F8C
0001AEFE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AF04                            
0001AF04                            locret_17F8C:
0001AF04 4E75                       		rts	
0001AF06                            ; ===========================================================================
0001AF06                            
0001AF06                            loc_17F8E:
0001AF06 6000 F89E                  		bra.w	BossDefeated
0001AF0A                            ; ===========================================================================
0001AF0A                            
0001AF0A                            loc_17F92:
0001AF0A 7064                       		moveq	#100,d0
0001AF0C 6100 0000                  		bsr.w	AddPoints
0001AF10 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AF16 4E75                       		rts	
0001AF18                            ; ===========================================================================
0001AF18                            
0001AF18                            loc_17FA0:
0001AF18 70FE                       		moveq	#-2,d0
0001AF1A 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AF20 6500                       		bcs.s	loc_17FB6
0001AF22 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AF28 4268 0010                  		clr.w	obVelX(a0)
0001AF2C 5240                       		addq.w	#1,d0
0001AF2E                            
0001AF2E                            loc_17FB6:
0001AF2E 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AF34 6E00                       		bgt.s	loc_17FCA
0001AF36 317C 0500 0038             		move.w	#$500,$38(a0)
0001AF3C 4268 0012                  		clr.w	obVelY(a0)
0001AF40 5240                       		addq.w	#1,d0
0001AF42                            
0001AF42                            loc_17FCA:
0001AF42 6600                       		bne.s	loc_17FDC
0001AF44 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AF4A 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AF50 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF54                            
0001AF54                            loc_17FDC:
0001AF54 6000 FF5A                  		bra.w	loc_17F38
0001AF58                            ; ===========================================================================
0001AF58                            
0001AF58                            loc_17FE0:
0001AF58 70FE                       		moveq	#-2,d0
0001AF5A 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AF60 6500                       		bcs.s	loc_17FF6
0001AF62 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AF68 4268 0010                  		clr.w	obVelX(a0)
0001AF6C 5240                       		addq.w	#1,d0
0001AF6E                            
0001AF6E                            loc_17FF6:
0001AF6E 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001AF74 6E00                       		bgt.s	loc_1800A
0001AF76 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001AF7C 4268 0012                  		clr.w	obVelY(a0)
0001AF80 5240                       		addq.w	#1,d0
0001AF82                            
0001AF82                            loc_1800A:
0001AF82 6600                       		bne.s	loc_1801A
0001AF84 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AF8A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF8E 4228 003F                  		clr.b	$3F(a0)
0001AF92                            
0001AF92                            loc_1801A:
0001AF92 6000 FF1C                  		bra.w	loc_17F38
0001AF96                            ; ===========================================================================
0001AF96                            
0001AF96                            loc_1801E:
0001AF96 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001AF9C 6E00                       		bgt.s	loc_1804E
0001AF9E 317C 0100 0038             		move.w	#$100,$38(a0)
0001AFA4 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AFAA 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001AFB0 4A28 003D                  		tst.b	$3D(a0)
0001AFB4 6700                       		beq.s	loc_18046
0001AFB6 E1E8 0010                  		asl	obVelX(a0)
0001AFBA E1E8 0012                  		asl	obVelY(a0)
0001AFBE                            
0001AFBE                            loc_18046:
0001AFBE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AFC2 6000 FEEC                  		bra.w	loc_17F38
0001AFC6                            ; ===========================================================================
0001AFC6                            
0001AFC6                            loc_1804E:
0001AFC6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AFCC 5428 003F                  		addq.b	#2,$3F(a0)
0001AFD0 1028 003F                  		move.b	$3F(a0),d0
0001AFD4 4EB9 0000 3A32             		jsr	(CalcSine).l
0001AFDA 4A41                       		tst.w	d1
0001AFDC 6A00                       		bpl.s	loc_1806C
0001AFDE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AFE4                            
0001AFE4                            loc_1806C:
0001AFE4 E840                       		asr.w	#4,d0
0001AFE6 4840                       		swap	d0
0001AFE8 4240                       		clr.w	d0
0001AFEA D0A8 0030                  		add.l	$30(a0),d0
0001AFEE 4840                       		swap	d0
0001AFF0 3140 0008                  		move.w	d0,obX(a0)
0001AFF4 3028 0012                  		move.w	obVelY(a0),d0
0001AFF8 3238 D00C                  		move.w	(v_player+obY).w,d1
0001AFFC 9268 000C                  		sub.w	obY(a0),d1
0001B000 6500                       		bcs.s	loc_180A2
0001B002 0441 0048                  		subi.w	#$48,d1
0001B006 6500                       		bcs.s	loc_180A2
0001B008 E240                       		asr.w	#1,d0
0001B00A 0441 0028                  		subi.w	#$28,d1
0001B00E 6500                       		bcs.s	loc_180A2
0001B010 E240                       		asr.w	#1,d0
0001B012 0441 0028                  		subi.w	#$28,d1
0001B016 6500                       		bcs.s	loc_180A2
0001B018 7000                       		moveq	#0,d0
0001B01A                            
0001B01A                            loc_180A2:
0001B01A 48C0                       		ext.l	d0
0001B01C E180                       		asl.l	#8,d0
0001B01E 4A28 003D                  		tst.b	$3D(a0)
0001B022 6700                       		beq.s	loc_180AE
0001B024 D080                       		add.l	d0,d0
0001B026                            
0001B026                            loc_180AE:
0001B026 D1A8 0038                  		add.l	d0,$38(a0)
0001B02A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B030 6000 FE8E                  		bra.w	loc_17F48
0001B034                            ; ===========================================================================
0001B034                            
0001B034                            loc_180BC:
0001B034 70FE                       		moveq	#-2,d0
0001B036 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B03C 6500                       		bcs.s	loc_180D2
0001B03E 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B044 4268 0010                  		clr.w	obVelX(a0)
0001B048 5240                       		addq.w	#1,d0
0001B04A                            
0001B04A                            loc_180D2:
0001B04A 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B050 6E00                       		bgt.s	loc_180E6
0001B052 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B058 4268 0012                  		clr.w	obVelY(a0)
0001B05C 5240                       		addq.w	#1,d0
0001B05E                            
0001B05E                            loc_180E6:
0001B05E 6600                       		bne.s	loc_180F2
0001B060 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B064 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B06A                            
0001B06A                            loc_180F2:
0001B06A 6000 FE44                  		bra.w	loc_17F38
0001B06E                            ; ===========================================================================
0001B06E                            
0001B06E                            loc_180F6:
0001B06E 4A28 003D                  		tst.b	$3D(a0)
0001B072 6600                       		bne.s	loc_18112
0001B074 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B07A 6D00                       		blt.s	loc_18126
0001B07C 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B082 6E00                       		bgt.s	loc_18126
0001B084 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B08A                            
0001B08A                            loc_18112:
0001B08A 4A38 FE2D                          tst.b     (v_invinc).w
0001B08E 6600                               bne.s   @boss_invinc
0001B090                            
0001B090 1038 F5C6                          move.b   (v_Saved_music),d0
0001B094 6000 0000                          bra.w      @boss_play
0001B098                            
0001B098                            @boss_invinc:
0001B098 103C 0000                          move.b #bgm_Invincible,d0
0001B09C                            
0001B09C                            @boss_play:
0001B09C 4EB8 124A                          jsr PlaySound
0001B0A0 4238 F7AA                          clr.b    (f_lockscreen).w
0001B0A4 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B0AA 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B0AE                            
0001B0AE                            loc_18126:
0001B0AE 6000 FE00                  		bra.w	loc_17F38
0001B0B2                            ; ===========================================================================
0001B0B2                            
0001B0B2                            loc_1812A:
0001B0B2 4A28 003D                  		tst.b	$3D(a0)
0001B0B6 6600                       		bne.s	loc_18136
0001B0B8 5328 003C                  		subq.b	#1,$3C(a0)
0001B0BC 6600                       		bne.s	loc_1814E
0001B0BE                            
0001B0BE                            loc_18136:
0001B0BE 4228 003C                  		clr.b	$3C(a0)
0001B0C2 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B0C8 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B0CE 4228 003D                  		clr.b	$3D(a0)
0001B0D2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B0D6                            
0001B0D6                            loc_1814E:
0001B0D6 6000 FDD8                  		bra.w	loc_17F38
0001B0DA                            ; ===========================================================================
0001B0DA                            
0001B0DA                            loc_18152:
0001B0DA 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B0E0 6400                       		bcc.s	loc_18160
0001B0E2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B0E6 6000                       		bra.s	loc_18166
0001B0E8                            ; ===========================================================================
0001B0E8                            
0001B0E8                            loc_18160:
0001B0E8 4A28 0001                  		tst.b	obRender(a0)
0001B0EC 6A00                       		bpl.s	Obj77_ShipDel
0001B0EE                            
0001B0EE                            loc_18166:
0001B0EE 6000 FDC0                  		bra.w	loc_17F38
0001B0F2                            ; ===========================================================================
0001B0F2                            
0001B0F2                            Obj77_ShipDel:
0001B0F2 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B0F8                            ; ===========================================================================
0001B0F8                            
0001B0F8                            Obj77_FaceMain:	; Routine 4
0001B0F8 2268 0034                  		movea.l	$34(a0),a1
0001B0FC 1011                       		move.b	(a1),d0
0001B0FE B010                       		cmp.b	(a0),d0
0001B100 6600                       		bne.s	Obj77_FaceDel
0001B102 7000                       		moveq	#0,d0
0001B104 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B108 7201                       		moveq	#1,d1
0001B10A 4A28 003D                  		tst.b	$3D(a0)
0001B10E 6700                       		beq.s	loc_1818C
0001B110 720A                       		moveq	#$A,d1
0001B112 6000                       		bra.s	loc_181A0
0001B114                            ; ===========================================================================
0001B114                            
0001B114                            loc_1818C:
0001B114 4A29 0020                  		tst.b	obColType(a1)
0001B118 6600                       		bne.s	loc_18196
0001B11A 7205                       		moveq	#5,d1
0001B11C 6000                       		bra.s	loc_181A0
0001B11E                            ; ===========================================================================
0001B11E                            
0001B11E                            loc_18196:
0001B11E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B124 6500                       		bcs.s	loc_181A0
0001B126 7204                       		moveq	#4,d1
0001B128                            
0001B128                            loc_181A0:
0001B128 1141 001C                  		move.b	d1,obAnim(a0)
0001B12C 0C00 000E                  		cmpi.b	#$E,d0
0001B130 6600                       		bne.s	loc_181B6
0001B132 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B138 4A28 0001                  		tst.b	obRender(a0)
0001B13C 6A00                       		bpl.s	Obj77_FaceDel
0001B13E                            
0001B13E                            loc_181B6:
0001B13E 6000                       		bra.s	Obj77_Display
0001B140                            ; ===========================================================================
0001B140                            
0001B140                            Obj77_FaceDel:
0001B140 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B146                            ; ===========================================================================
0001B146                            
0001B146                            Obj77_FlameMain:; Routine 6
0001B146 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B14C 2268 0034                  		movea.l	$34(a0),a1
0001B150 1011                       		move.b	(a1),d0
0001B152 B010                       		cmp.b	(a0),d0
0001B154 6600                       		bne.s	Obj77_FlameDel
0001B156 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B15C 6600                       		bne.s	loc_181F0
0001B15E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B164 4A28 0001                  		tst.b	1(a0)
0001B168 6A00                       		bpl.s	Obj77_FlameDel
0001B16A 6000                       		bra.s	loc_181F0
0001B16C                            ; ===========================================================================
0001B16C 4A69 0010                  		tst.w	obVelX(a1)
0001B170 6700                       		beq.s	loc_181F0
0001B172 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B178                            
0001B178                            loc_181F0:
0001B178 6000                       		bra.s	Obj77_Display
0001B17A                            ; ===========================================================================
0001B17A                            
0001B17A                            Obj77_FlameDel:
0001B17A 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B180                            ; ===========================================================================
0001B180                            
0001B180                            Obj77_Display:
0001B180 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001B186 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001B18C 2268 0034                  		movea.l	$34(a0),a1
0001B190 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B196 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B19C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B1A2 7003                       		moveq	#3,d0
0001B1A4 C028 0022                  		and.b	obStatus(a0),d0
0001B1A8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B1AE 8128 0001                  		or.b	d0,obRender(a0)
0001B1B2 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001B1B2 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001B1B8                            		include	"_incObj\73 Boss - Marble.asm"
0001B1B8                            ; ---------------------------------------------------------------------------
0001B1B8                            ; Object 73 - Eggman (MZ)
0001B1B8                            ; ---------------------------------------------------------------------------
0001B1B8                            
0001B1B8                            BossMarble:
0001B1B8 7000                       		moveq	#0,d0
0001B1BA 1028 0024                  		move.b	obRoutine(a0),d0
0001B1BE 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B1C2 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B1C6                            ; ===========================================================================
0001B1C6 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B1C8 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B1CA 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B1CC 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B1CE 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B1D0                            
0001B1D0 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B1D4 0401 0200                  		dc.b 4,	1, $02, $00
0001B1D8 0607 0200                  		dc.b 6,	7, $02, $00
0001B1DC 0800 0180                  		dc.b 8,	0, $01, $80
0001B1E0                            ; ===========================================================================
0001B1E0                            
0001B1E0                            Obj73_Main:	; Routine 0
0001B1E0 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B1E6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B1EC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B1F2 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B1F8 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B1FC 2248                       		movea.l	a0,a1
0001B1FE 7203                       		moveq	#3,d1
0001B200 6000                       		bra.s	Obj73_LoadBoss
0001B202                            ; ===========================================================================
0001B202                            
0001B202                            Obj73_Loop:
0001B202 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001B208 6600                       		bne.s	Obj73_ShipMain
0001B20A 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B20E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B214 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B21A                            
0001B21A                            Obj73_LoadBoss:
0001B21A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B220 4229 0025                  		clr.b	ob2ndRout(a1)
0001B224 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B228 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B22C 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B230 237C 0001 AC5E 0004        		move.l	#Map_Eggman,obMap(a1)
0001B238 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B23E 137C 0004 0001             		move.b	#4,obRender(a1)
0001B244 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B24A 2348 0034                  		move.l	a0,$34(a1)
0001B24E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B252                            
0001B252                            Obj73_ShipMain:	; Routine 2
0001B252 7000                       		moveq	#0,d0
0001B254 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B258 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B25C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B260 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001B266 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001B26C 7003                       		moveq	#3,d0
0001B26E C028 0022                  		and.b	obStatus(a0),d0
0001B272 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B278 8128 0001                  		or.b	d0,obRender(a0)
0001B27C 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001B282                            ; ===========================================================================
0001B282 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B284 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B286 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B288 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B28A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B28C                            ; ===========================================================================
0001B28C                            
0001B28C                            loc_18302:
0001B28C 1028 003F                  		move.b	$3F(a0),d0
0001B290 5428 003F                  		addq.b	#2,$3F(a0)
0001B294 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B29A E440                       		asr.w	#2,d0
0001B29C 3140 0012                  		move.w	d0,obVelY(a0)
0001B2A0 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B2A6 6100 F540                  		bsr.w	BossMove
0001B2AA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B2B0 6600                       		bne.s	loc_18334
0001B2B2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2B6 4228 0028                  		clr.b	obSubtype(a0)
0001B2BA 42A8 0010                  		clr.l	obVelX(a0)
0001B2BE                            
0001B2BE                            loc_18334:
0001B2BE 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B2C4 1140 0034                  		move.b	d0,$34(a0)
0001B2C8                            
0001B2C8                            loc_1833E:
0001B2C8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B2CE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B2D4 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B2DA 6400                       		bcc.s	locret_18390
0001B2DC 4A28 0022                  		tst.b	obStatus(a0)
0001B2E0 6B00                       		bmi.s	loc_18392
0001B2E2 4A28 0020                  		tst.b	obColType(a0)
0001B2E6 6600                       		bne.s	locret_18390
0001B2E8 4A28 003E                  		tst.b	$3E(a0)
0001B2EC 6600                       		bne.s	loc_18374
0001B2EE 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B2FE                            
0001B2FE                            loc_18374:
0001B2FE 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B302 7000                       		moveq	#0,d0
0001B304 4A51                       		tst.w	(a1)
0001B306 6600                       		bne.s	loc_18382
0001B308 303C 0EEE                  		move.w	#cWhite,d0
0001B30C                            
0001B30C                            loc_18382:
0001B30C 3280                       		move.w	d0,(a1)
0001B30E 5328 003E                  		subq.b	#1,$3E(a0)
0001B312 6600                       		bne.s	locret_18390
0001B314 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B31A                            
0001B31A                            locret_18390:
0001B31A 4E75                       		rts	
0001B31C                            ; ===========================================================================
0001B31C                            
0001B31C                            loc_18392:
0001B31C 7064                       		moveq	#100,d0
0001B31E 6100 0000                  		bsr.w	AddPoints
0001B322 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B328 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B32E 4268 0010                  		clr.w	obVelX(a0)
0001B332 4E75                       		rts	
0001B334                            ; ===========================================================================
0001B334                            
0001B334                            loc_183AA:
0001B334 7000                       		moveq	#0,d0
0001B336 1028 0028                  		move.b	obSubtype(a0),d0
0001B33A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B33E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B342 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B348 6000 FF7E                  		bra.w	loc_1833E
0001B34C                            ; ===========================================================================
0001B34C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B34E 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B350 0000                       		dc.w loc_183CA-off_183C2
0001B352 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B354                            ; ===========================================================================
0001B354                            
0001B354                            loc_183CA:
0001B354 4A68 0010                  		tst.w	obVelX(a0)
0001B358 6600                       		bne.s	loc_183FE
0001B35A 7040                       		moveq	#$40,d0
0001B35C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B362 6700                       		beq.s	loc_183E6
0001B364 6500                       		bcs.s	loc_183DE
0001B366 4440                       		neg.w	d0
0001B368                            
0001B368                            loc_183DE:
0001B368 3140 0012                  		move.w	d0,obVelY(a0)
0001B36C 6000 F47A                  		bra.w	BossMove
0001B370                            ; ===========================================================================
0001B370                            
0001B370                            loc_183E6:
0001B370 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B376 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B37C 0828 0000 0022             		btst	#0,obStatus(a0)
0001B382 6600                       		bne.s	loc_183FE
0001B384 4468 0010                  		neg.w	obVelX(a0)
0001B388                            
0001B388                            loc_183FE:
0001B388 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B38E 6400                       		bcc.s	Obj73_MakeLava
0001B390 6100 F456                  		bsr.w	BossMove
0001B394 5968 0012                  		subq.w	#4,obVelY(a0)
0001B398                            
0001B398                            Obj73_MakeLava:
0001B398 5328 0034                  		subq.b	#1,$34(a0)
0001B39C 6400                       		bcc.s	loc_1845C
0001B39E 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001B3A4 6600                       		bne.s	loc_1844A
0001B3A6 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B3AA 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B3B0 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B3B6 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B3BC 80FC 0050                  		divu.w	#$50,d0
0001B3C0 4840                       		swap	d0
0001B3C2 0640 1878                  		addi.w	#$1878,d0
0001B3C6 3340 0008                  		move.w	d0,obX(a1)
0001B3CA EE09                       		lsr.b	#7,d1
0001B3CC 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B3D2                            
0001B3D2                            loc_1844A:
0001B3D2 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B3D8 0200 001F                  		andi.b	#$1F,d0
0001B3DC 0600 0040                  		addi.b	#$40,d0
0001B3E0 1140 0034                  		move.b	d0,$34(a0)
0001B3E4                            
0001B3E4                            loc_1845C:
0001B3E4 0828 0000 0022             		btst	#0,obStatus(a0)
0001B3EA 6700                       		beq.s	loc_18474
0001B3EC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B3F2 6D00                       		blt.s	locret_1849C
0001B3F4 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B3FA 6000                       		bra.s	loc_18482
0001B3FC                            ; ===========================================================================
0001B3FC                            
0001B3FC                            loc_18474:
0001B3FC 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B402 6E00                       		bgt.s	locret_1849C
0001B404 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B40A                            
0001B40A                            loc_18482:
0001B40A 4268 0010                  		clr.w	obVelX(a0)
0001B40E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B414 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B41A 6400                       		bcc.s	loc_18498
0001B41C 4468 0012                  		neg.w	obVelY(a0)
0001B420                            
0001B420                            loc_18498:
0001B420 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B424                            
0001B424                            locret_1849C:
0001B424 4E75                       		rts	
0001B426                            ; ===========================================================================
0001B426                            
0001B426                            Obj73_MakeLava2:
0001B426 6100 F3C0                  		bsr.w	BossMove
0001B42A 3028 0038                  		move.w	$38(a0),d0
0001B42E 0440 022C                  		subi.w	#$22C,d0
0001B432 6E00                       		bgt.s	locret_184F4
0001B434 303C 022C                  		move.w	#$22C,d0
0001B438 4A68 0012                  		tst.w	obVelY(a0)
0001B43C 6700                       		beq.s	loc_184EA
0001B43E 4268 0012                  		clr.w	obVelY(a0)
0001B442 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B448 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B44E 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001B454 6600                       		bne.s	loc_184EA
0001B456 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B45C 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B462 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B468 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B46C 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B472                            
0001B472                            loc_184EA:
0001B472 5368 003C                  		subq.w	#1,$3C(a0)
0001B476 6600                       		bne.s	locret_184F4
0001B478 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B47C                            
0001B47C                            locret_184F4:
0001B47C 4E75                       		rts	
0001B47E                            ; ===========================================================================
0001B47E                            
0001B47E                            loc_184F6:
0001B47E 5368 003C                  		subq.w	#1,$3C(a0)
0001B482 6B00                       		bmi.s	loc_18500
0001B484 6000 F320                  		bra.w	BossDefeated
0001B488                            ; ===========================================================================
0001B488                            
0001B488                            loc_18500:
0001B488 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B48E 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B494 4268 0010                  		clr.w	obVelX(a0)
0001B498 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B49C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B4A2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B4A6 6600                       		bne.s	locret_1852A
0001B4A8 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B4AE 4268 0012                  		clr.w	obVelY(a0)
0001B4B2                            
0001B4B2                            locret_1852A:
0001B4B2 4E75                       		rts	
0001B4B4                            ; ===========================================================================
0001B4B4                            
0001B4B4                            loc_1852C:
0001B4B4 5268 003C                  		addq.w	#1,$3C(a0)
0001B4B8 6700                       		beq.s	loc_18544
0001B4BA 6A00                       		bpl.s	loc_1854E
0001B4BC 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B4C2 6400                       		bcc.s	loc_18544
0001B4C4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B4CA 6000                       		bra.s	loc_1857A
0001B4CC                            ; ===========================================================================
0001B4CC                            
0001B4CC                            loc_18544:
0001B4CC 4268 0012                  		clr.w	obVelY(a0)
0001B4D0 4268 003C                  		clr.w	$3C(a0)
0001B4D4 6000                       		bra.s	loc_1857A
0001B4D6                            ; ===========================================================================
0001B4D6                            
0001B4D6                            loc_1854E:
0001B4D6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B4DC 6500                       		bcs.s	loc_18566
0001B4DE 6700                       		beq.s	loc_1856C
0001B4E0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B4E6 6500                       		bcs.s	loc_1857A
0001B4E8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B4EC 6000                       		bra.s	loc_1857A
0001B4EE                            ; ===========================================================================
0001B4EE                            
0001B4EE                            loc_18566:
0001B4EE 5168 0012                  		subq.w	#8,obVelY(a0)
0001B4F2 6000                       		bra.s	loc_1857A
0001B4F4                            ; ===========================================================================
0001B4F4                            
0001B4F4                            loc_1856C:
0001B4F4 4268 0012                  		clr.w	obVelY(a0)
0001B502                            
0001B502                            loc_1857A:
0001B502 6100 F2E4                  		bsr.w	BossMove
0001B506 6000 FDC0                  		bra.w	loc_1833E
0001B50A                            ; ===========================================================================
0001B50A                            
0001B50A                            loc_18582:
0001B50A 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B510 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B516 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B51C 6400                       		bcc.s	loc_1859C
0001B51E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B522 6000                       		bra.s	loc_185A2
0001B524                            ; ===========================================================================
0001B524                            
0001B524                            loc_1859C:
0001B524 4A28 0001                  		tst.b	obRender(a0)
0001B528 6A00                       		bpl.s	Obj73_ShipDel
0001B52A                            
0001B52A                            loc_185A2:
0001B52A 6100 F2BC                  		bsr.w	BossMove
0001B52E 6000 FD98                  		bra.w	loc_1833E
0001B532                            ; ===========================================================================
0001B532                            
0001B532                            Obj73_ShipDel:
0001B532 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B538                            ; ===========================================================================
0001B538                            
0001B538                            Obj73_FaceMain:	; Routine 4
0001B538 7000                       		moveq	#0,d0
0001B53A 7201                       		moveq	#1,d1
0001B53C 2268 0034                  		movea.l	$34(a0),a1
0001B540 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B544 5540                       		subq.w	#2,d0
0001B546 6600                       		bne.s	loc_185D2
0001B548 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B54E 6700                       		beq.s	loc_185DA
0001B550 4A69 0012                  		tst.w	obVelY(a1)
0001B554 6600                       		bne.s	loc_185DA
0001B556 7204                       		moveq	#4,d1
0001B558 6000                       		bra.s	loc_185EE
0001B55A                            ; ===========================================================================
0001B55A                            
0001B55A                            loc_185D2:
0001B55A 5500                       		subq.b	#2,d0
0001B55C 6B00                       		bmi.s	loc_185DA
0001B55E 720A                       		moveq	#$A,d1
0001B560 6000                       		bra.s	loc_185EE
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            loc_185DA:
0001B562 4A29 0020                  		tst.b	obColType(a1)
0001B566 6600                       		bne.s	loc_185E4
0001B568 7205                       		moveq	#5,d1
0001B56A 6000                       		bra.s	loc_185EE
0001B56C                            ; ===========================================================================
0001B56C                            
0001B56C                            loc_185E4:
0001B56C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B572 6500                       		bcs.s	loc_185EE
0001B574 7204                       		moveq	#4,d1
0001B576                            
0001B576                            loc_185EE:
0001B576 1141 001C                  		move.b	d1,obAnim(a0)
0001B57A 5900                       		subq.b	#4,d0
0001B57C 6600                       		bne.s	loc_18602
0001B57E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B584 4A28 0001                  		tst.b	obRender(a0)
0001B588 6A00                       		bpl.s	Obj73_FaceDel
0001B58A                            
0001B58A                            loc_18602:
0001B58A 6000                       		bra.s	Obj73_Display
0001B58C                            ; ===========================================================================
0001B58C                            
0001B58C                            Obj73_FaceDel:
0001B58C 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B592                            ; ===========================================================================
0001B592                            
0001B592                            Obj73_FlameMain:; Routine 6
0001B592 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B598 2268 0034                  		movea.l	$34(a0),a1
0001B59C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B5A2 6D00                       		blt.s	loc_1862A
0001B5A4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B5AA 4A28 0001                  		tst.b	obRender(a0)
0001B5AE 6A00                       		bpl.s	Obj73_FlameDel
0001B5B0 6000                       		bra.s	loc_18636
0001B5B2                            ; ===========================================================================
0001B5B2                            
0001B5B2                            loc_1862A:
0001B5B2 4A69 0010                  		tst.w	obVelX(a1)
0001B5B6 6700                       		beq.s	loc_18636
0001B5B8 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B5BE                            
0001B5BE                            loc_18636:
0001B5BE 6000                       		bra.s	Obj73_Display
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            Obj73_FlameDel:
0001B5C0 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B5C6                            ; ===========================================================================
0001B5C6                            
0001B5C6                            Obj73_Display:
0001B5C6 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001B5CC 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001B5D2                            
0001B5D2                            loc_1864A:
0001B5D2 2268 0034                  		movea.l	$34(a0),a1
0001B5D6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B5DC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B5E2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B5E8 7003                       		moveq	#3,d0
0001B5EA C028 0022                  		and.b	obStatus(a0),d0
0001B5EE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B5F4 8128 0001                  		or.b	d0,obRender(a0)
0001B5F8 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001B5FE                            ; ===========================================================================
0001B5FE                            
0001B5FE                            Obj73_TubeMain:	; Routine 8
0001B5FE 2268 0034                  		movea.l	$34(a0),a1
0001B602 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B608 6600                       		bne.s	loc_18688
0001B60A 4A28 0001                  		tst.b	obRender(a0)
0001B60E 6A00                       		bpl.s	Obj73_TubeDel
0001B610                            
0001B610                            loc_18688:
0001B610 217C 0001 AD4E 0004        		move.l	#Map_BossItems,obMap(a0)
0001B618 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B61E 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B624 60AC                       		bra.s	loc_1864A
0001B626                            ; ===========================================================================
0001B626                            
0001B626                            Obj73_TubeDel:
0001B626 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B626 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B62C                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            ; Object 74 - lava that	Eggman drops (MZ)
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            
0001B62C                            BossFire:
0001B62C 7000                       		moveq	#0,d0
0001B62E 1028 0024                  		move.b	obRoutine(a0),d0
0001B632 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B636 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B63A 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001B640                            ; ===========================================================================
0001B640 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B642 0000                       		dc.w Obj74_Action-Obj74_Index
0001B644 0000                       		dc.w loc_18886-Obj74_Index
0001B646 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B648                            ; ===========================================================================
0001B648                            
0001B648                            Obj74_Main:	; Routine 0
0001B648 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B64E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B654 217C 0000 D446 0004        		move.l	#Map_Fire,obMap(a0)
0001B65C 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B662 117C 0004 0001             		move.b	#4,obRender(a0)
0001B668 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B66E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B674 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B67A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B67E 4A28 0028                  		tst.b	obSubtype(a0)
0001B682 6600                       		bne.s	loc_1870A
0001B684 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B68A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B68E 6000 0000                  		bra.w	loc_18886
0001B692                            ; ===========================================================================
0001B692                            
0001B692                            loc_1870A:
0001B692 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B6A2                            
0001B6A2                            Obj74_Action:	; Routine 2
0001B6A2 7000                       		moveq	#0,d0
0001B6A4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B6A8 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B6AC 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B6B0 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001B6B6 43F9 0001 05CC             		lea	(Ani_Fire).l,a1
0001B6BC 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001B6C2 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B6C8 6200                       		bhi.s	Obj74_Delete
0001B6CA 4E75                       		rts	
0001B6CC                            ; ===========================================================================
0001B6CC                            
0001B6CC                            Obj74_Delete:
0001B6CC 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B6D2                            ; ===========================================================================
0001B6D2 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B6D4 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B6D6 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B6D8 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B6DA                            ; ===========================================================================
0001B6DA                            
0001B6DA                            Obj74_Drop:
0001B6DA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B6E0 5328 0029                  		subq.b	#1,$29(a0)
0001B6E4 6A00                       		bpl.s	locret_18780
0001B6E6 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B6EC 4228 0028                  		clr.b	obSubtype(a0)
0001B6F0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B6F6 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B6FC 6100 C622                  		bsr.w	ObjFloorDist
0001B700 4A41                       		tst.w	d1
0001B702 6A00                       		bpl.s	locret_18780
0001B704 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B708                            
0001B708                            locret_18780:
0001B708 4E75                       		rts	
0001B70A                            ; ===========================================================================
0001B70A                            
0001B70A                            Obj74_MakeFlame:
0001B70A 5568 000C                  		subq.w	#2,obY(a0)
0001B70E 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B714 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B71A 4268 0012                  		clr.w	obVelY(a0)
0001B71E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B724 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B72A 117C 0003 0029             		move.b	#3,$29(a0)
0001B730 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001B736 6600                       		bne.s	loc_187CA
0001B738 47D1                       		lea	(a1),a3
0001B73A 45D0                       		lea	(a0),a2
0001B73C 7003                       		moveq	#3,d0
0001B73E                            
0001B73E                            Obj74_Loop:
0001B73E 26DA                       		move.l	(a2)+,(a3)+
0001B740 26DA                       		move.l	(a2)+,(a3)+
0001B742 26DA                       		move.l	(a2)+,(a3)+
0001B744 26DA                       		move.l	(a2)+,(a3)+
0001B746 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B74A                            
0001B74A 4469 0010                  		neg.w	obVelX(a1)
0001B74E 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B752                            
0001B752                            loc_187CA:
0001B752 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B756 4E75                       		rts	
0001B758                            
0001B758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B758                            
0001B758                            
0001B758                            Obj74_Duplicate2:
0001B758 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001B75E 6600                       		bne.s	locret_187EE
0001B760 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B766 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B76C 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B770 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B776                            
0001B776                            locret_187EE:
0001B776 4E75                       		rts	
0001B778                            ; End of function Obj74_Duplicate2
0001B778                            
0001B778                            ; ===========================================================================
0001B778                            
0001B778                            Obj74_Duplicate:
0001B778 6100 C5A6                  		bsr.w	ObjFloorDist
0001B77C 4A41                       		tst.w	d1
0001B77E 6A00                       		bpl.s	loc_18826
0001B780 3028 0008                  		move.w	obX(a0),d0
0001B784 0C40 1940                  		cmpi.w	#$1940,d0
0001B788 6E00                       		bgt.s	loc_1882C
0001B78A 3228 0030                  		move.w	$30(a0),d1
0001B78E B240                       		cmp.w	d0,d1
0001B790 6700                       		beq.s	loc_1881E
0001B792 0240 0010                  		andi.w	#$10,d0
0001B796 0241 0010                  		andi.w	#$10,d1
0001B79A B240                       		cmp.w	d0,d1
0001B79C 6700                       		beq.s	loc_1881E
0001B79E 61B8                       		bsr.s	Obj74_Duplicate2
0001B7A0 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B7A6                            
0001B7A6                            loc_1881E:
0001B7A6 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B7AC 4E75                       		rts	
0001B7AE                            ; ===========================================================================
0001B7AE                            
0001B7AE                            loc_18826:
0001B7AE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B7B2 4E75                       		rts	
0001B7B4                            ; ===========================================================================
0001B7B4                            
0001B7B4                            loc_1882C:
0001B7B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B7B8 4E75                       		rts	
0001B7BA                            ; ===========================================================================
0001B7BA                            
0001B7BA                            Obj74_FallEdge:
0001B7BA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B7C0 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B7C6 3028 0008                  		move.w	obX(a0),d0
0001B7CA 9068 0032                  		sub.w	$32(a0),d0
0001B7CE 6A00                       		bpl.s	loc_1884A
0001B7D0 4440                       		neg.w	d0
0001B7D2                            
0001B7D2                            loc_1884A:
0001B7D2 0C40 0012                  		cmpi.w	#$12,d0
0001B7D6 6600                       		bne.s	loc_18856
0001B7D8 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B7DE                            
0001B7DE                            loc_18856:
0001B7DE 6100 C540                  		bsr.w	ObjFloorDist
0001B7E2 4A41                       		tst.w	d1
0001B7E4 6A00                       		bpl.s	locret_1887E
0001B7E6 5328 0029                  		subq.b	#1,$29(a0)
0001B7EA 6700                       		beq.s	Obj74_Delete2
0001B7EC 4268 0012                  		clr.w	obVelY(a0)
0001B7F0 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B7F6 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B7FC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B802 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B806                            
0001B806                            locret_1887E:
0001B806 4E75                       		rts	
0001B808                            ; ===========================================================================
0001B808                            
0001B808                            Obj74_Delete2:
0001B808 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            loc_18886:	; Routine 4
0001B80E 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B814 5328 0029                  		subq.b	#1,$29(a0)
0001B818 6600                       		bne.s	Obj74_Animate
0001B81A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B820 5968 000C                  		subq.w	#4,obY(a0)
0001B824 4228 0020                  		clr.b	obColType(a0)
0001B828                            
0001B828                            Obj74_Animate:
0001B828 43F9 0001 05CC             		lea	(Ani_Fire).l,a1
0001B82E 4EF9 0000 C7F4             		jmp	(AnimateSprite).l
0001B834                            ; ===========================================================================
0001B834                            
0001B834                            Obj74_Delete3:	; Routine 6
0001B834 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B834 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B83A                            
0001B83A                            	Obj7A_Delete:
0001B83A 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001B840                            
0001B840                            		include	"_incObj\7A Boss - Star Light.asm"
0001B840                            ; ---------------------------------------------------------------------------
0001B840                            ; Object 7A - Eggman (SLZ)
0001B840                            ; ---------------------------------------------------------------------------
0001B840                            
0001B840                            BossStarLight:
0001B840 7000                       		moveq	#0,d0
0001B842 1028 0024                  		move.b	obRoutine(a0),d0
0001B846 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B84A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B84E                            ; ===========================================================================
0001B84E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B850 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B852 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B854 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B856 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B858                            
0001B858 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B85C 0401 0200                  		dc.b 4,	1, $02, $00
0001B860 0607 0200                  		dc.b 6,	7, $02, $00
0001B864 0800 0180                  		dc.b 8,	0, $01, $80
0001B868                            ; ===========================================================================
0001B868                            
0001B868                            Obj7A_Main:
0001B868 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B86E 317C 0228 000C             		move.w	#$228,obY(a0)
0001B874 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B87A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B880 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B886 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B88C 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B890 2248                       		movea.l	a0,a1
0001B892 7203                       		moveq	#3,d1
0001B894 6000                       		bra.s	Obj7A_LoadBoss
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            Obj7A_Loop:
0001B896 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001B89C 6600                       		bne.s	loc_1895C
0001B89E 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B8A2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B8A8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B8AE                            
0001B8AE                            Obj7A_LoadBoss:
0001B8AE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B8B4 4229 0025                  		clr.b	ob2ndRout(a1)
0001B8B8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B8BC 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B8C0 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B8C4 237C 0001 AC5E 0004        		move.l	#Map_Eggman,obMap(a1)
0001B8CC 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B8D2 137C 0004 0001             		move.b	#4,obRender(a1)
0001B8D8 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B8DE 2348 0034                  		move.l	a0,$34(a1)
0001B8E2 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B8E6                            
0001B8E6                            loc_1895C:
0001B8E6 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B8EA 45E8 002A                  		lea	$2A(a0),a2
0001B8EE 705E                       		moveq	#$5E,d0
0001B8F0 723E                       		moveq	#$3E,d1
0001B8F2                            
0001B8F2                            loc_18968:
0001B8F2 B011                       		cmp.b	(a1),d0
0001B8F4 6600                       		bne.s	loc_18974
0001B8F6 4A29 0028                  		tst.b	obSubtype(a1)
0001B8FA 6700                       		beq.s	loc_18974
0001B8FC 34C9                       		move.w	a1,(a2)+
0001B8FE                            
0001B8FE                            loc_18974:
0001B8FE D2FC 0040                  		adda.w	#$40,a1
0001B902 51C9 FFEE                  		dbf	d1,loc_18968
0001B906                            
0001B906                            Obj7A_ShipMain:	; Routine 2
0001B906 7000                       		moveq	#0,d0
0001B908 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B90C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B910 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B914 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001B91A 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001B920 7003                       		moveq	#3,d0
0001B922 C028 0022                  		and.b	obStatus(a0),d0
0001B926 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B92C 8128 0001                  		or.b	d0,obRender(a0)
0001B930 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001B936                            ; ===========================================================================
0001B936 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B938 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B93A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B93C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B93E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B940 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B942                            ; ===========================================================================
0001B942                            
0001B942                            loc_189B8:
0001B942 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B948 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B94E 6400                       		bcc.s	loc_189CA
0001B950 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B954                            
0001B954                            loc_189CA:
0001B954 6100 EE92                  		bsr.w	BossMove
0001B958 1028 003F                  		move.b	$3F(a0),d0
0001B95C 5428 003F                  		addq.b	#2,$3F(a0)
0001B960 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B966 EC40                       		asr.w	#6,d0
0001B968 D068 0038                  		add.w	$38(a0),d0
0001B96C 3140 000C                  		move.w	d0,obY(a0)
0001B970 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B976 6000                       		bra.s	loc_189FE
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            loc_189EE:
0001B978 6100 EE6E                  		bsr.w	BossMove
0001B97C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B982 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B988                            
0001B988                            loc_189FE:
0001B988 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001B98E 6400                       		bcc.s	locret_18A44
0001B990 4A28 0022                  		tst.b	obStatus(a0)
0001B994 6B00                       		bmi.s	loc_18A46
0001B996 4A28 0020                  		tst.b	obColType(a0)
0001B99A 6600                       		bne.s	locret_18A44
0001B99C 4A28 003E                  		tst.b	$3E(a0)
0001B9A0 6600                       		bne.s	loc_18A28
0001B9A2 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B9B2                            
0001B9B2                            loc_18A28:
0001B9B2 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B9B6 7000                       		moveq	#0,d0
0001B9B8 4A51                       		tst.w	(a1)
0001B9BA 6600                       		bne.s	loc_18A36
0001B9BC 303C 0EEE                  		move.w	#cWhite,d0
0001B9C0                            
0001B9C0                            loc_18A36:
0001B9C0 3280                       		move.w	d0,(a1)
0001B9C2 5328 003E                  		subq.b	#1,$3E(a0)
0001B9C6 6600                       		bne.s	locret_18A44
0001B9C8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B9CE                            
0001B9CE                            locret_18A44:
0001B9CE 4E75                       		rts	
0001B9D0                            ; ===========================================================================
0001B9D0                            
0001B9D0                            loc_18A46:
0001B9D0 7064                       		moveq	#100,d0
0001B9D2 6100 0000                  		bsr.w	AddPoints
0001B9D6 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001B9DC 117C 0078 003C             		move.b	#$78,$3C(a0)
0001B9E2 4268 0010                  		clr.w	obVelX(a0)
0001B9E6 4E75                       		rts	
0001B9E8                            ; ===========================================================================
0001B9E8                            
0001B9E8                            loc_18A5E:
0001B9E8 3028 0030                  		move.w	$30(a0),d0
0001B9EC 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B9F2 0828 0000 0022             		btst	#0,obStatus(a0)
0001B9F8 6600                       		bne.s	loc_18A7C
0001B9FA 4468 0010                  		neg.w	obVelX(a0)
0001B9FE 0C40 2008                  		cmpi.w	#$2008,d0
0001BA02 6E00                       		bgt.s	loc_18A88
0001BA04 6000                       		bra.s	loc_18A82
0001BA06                            ; ===========================================================================
0001BA06                            
0001BA06                            loc_18A7C:
0001BA06 0C40 2138                  		cmpi.w	#$2138,d0
0001BA0A 6D00                       		blt.s	loc_18A88
0001BA0C                            
0001BA0C                            loc_18A82:
0001BA0C 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BA12                            
0001BA12                            loc_18A88:
0001BA12 3028 0008                  		move.w	8(a0),d0
0001BA16 72FF                       		moveq	#-1,d1
0001BA18 7402                       		moveq	#2,d2
0001BA1A 45E8 002A                  		lea	$2A(a0),a2
0001BA1E 7828                       		moveq	#$28,d4
0001BA20 4A68 0010                  		tst.w	obVelX(a0)
0001BA24 6A00                       		bpl.s	loc_18A9E
0001BA26 4444                       		neg.w	d4
0001BA28                            
0001BA28                            loc_18A9E:
0001BA28 321A                       		move.w	(a2)+,d1
0001BA2A 2641                       		movea.l	d1,a3
0001BA2C 082B 0003 0022             		btst	#3,obStatus(a3)
0001BA32 6600                       		bne.s	loc_18AB4
0001BA34 362B 0008                  		move.w	8(a3),d3
0001BA38 D644                       		add.w	d4,d3
0001BA3A 9640                       		sub.w	d0,d3
0001BA3C 6700                       		beq.s	loc_18AC0
0001BA3E                            
0001BA3E                            loc_18AB4:
0001BA3E 51CA FFE8                  		dbf	d2,loc_18A9E
0001BA42                            
0001BA42 1142 0028                  		move.b	d2,obSubtype(a0)
0001BA46 6000 FF0C                  		bra.w	loc_189CA
0001BA4A                            ; ===========================================================================
0001BA4A                            
0001BA4A                            loc_18AC0:
0001BA4A 1142 0028                  		move.b	d2,obSubtype(a0)
0001BA4E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA52 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BA58 6000 FEFA                  		bra.w	loc_189CA
0001BA5C                            ; ===========================================================================
0001BA5C                            
0001BA5C                            Obj7A_MakeBall:
0001BA5C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BA62 6600                       		bne.s	loc_18B36
0001BA64 70FF                       		moveq	#-1,d0
0001BA66 1028 0028                  		move.b	obSubtype(a0),d0
0001BA6A 4880                       		ext.w	d0
0001BA6C 6B00                       		bmi.s	loc_18B40
0001BA6E 5540                       		subq.w	#2,d0
0001BA70 4440                       		neg.w	d0
0001BA72 D040                       		add.w	d0,d0
0001BA74 43E8 002A                  		lea	$2A(a0),a1
0001BA78 3031 0000                  		move.w	(a1,d0.w),d0
0001BA7C 2440                       		movea.l	d0,a2
0001BA7E 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BA82 723E                       		moveq	#$3E,d1
0001BA84                            
0001BA84                            loc_18AFA:
0001BA84 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BA88 6700                       		beq.s	loc_18B40
0001BA8A D2FC 0040                  		adda.w	#$40,a1
0001BA8E 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BA92                            
0001BA92 2F08                       		move.l	a0,-(sp)
0001BA94 41D2                       		lea	(a2),a0
0001BA96 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001BA9C 205F                       		movea.l	(sp)+,a0
0001BA9E 6600                       		bne.s	loc_18B40
0001BAA0 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BAA4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BAAA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BAB0 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BAB6 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BABC 234A 003C                  		move.l	a2,$3C(a1)
0001BAC0                            
0001BAC0                            loc_18B36:
0001BAC0 5328 003C                  		subq.b	#1,$3C(a0)
0001BAC4 6700                       		beq.s	loc_18B40
0001BAC6 6000 FEC0                  		bra.w	loc_189FE
0001BACA                            ; ===========================================================================
0001BACA                            
0001BACA                            loc_18B40:
0001BACA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BACE 6000 FE84                  		bra.w	loc_189CA
0001BAD2                            ; ===========================================================================
0001BAD2                            
0001BAD2                            loc_18B48:
0001BAD2 5328 003C                  		subq.b	#1,$3C(a0)
0001BAD6 6B00                       		bmi.s	loc_18B52
0001BAD8 6000 ECCC                  		bra.w	BossDefeated
0001BADC                            ; ===========================================================================
0001BADC                            
0001BADC                            loc_18B52:
0001BADC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BAE0 4268 0012                  		clr.w	obVelY(a0)
0001BAE4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BAEA 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BAF0 4268 0010                  		clr.w	obVelX(a0)
0001BAF4 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BAFA 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BAFE 6600                       		bne.s	loc_18B7C
0001BB00 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BB06                            
0001BB06                            loc_18B7C:
0001BB06 6000 FE80                  		bra.w	loc_189FE
0001BB0A                            ; ===========================================================================
0001BB0A                            
0001BB0A                            loc_18B80:
0001BB0A 5228 003C                  		addq.b	#1,$3C(a0)
0001BB0E 6700                       		beq.s	loc_18B90
0001BB10 6A00                       		bpl.s	loc_18B96
0001BB12 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BB18 6000                       		bra.s	loc_18BC2
0001BB1A                            ; ===========================================================================
0001BB1A                            
0001BB1A                            loc_18B90:
0001BB1A 4268 0012                  		clr.w	obVelY(a0)
0001BB1E 6000                       		bra.s	loc_18BC2
0001BB20                            ; ===========================================================================
0001BB20                            
0001BB20                            loc_18B96:
0001BB20 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BB26 6500                       		bcs.s	loc_18BAE
0001BB28 6700                       		beq.s	loc_18BB4
0001BB2A 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BB30 6500                       		bcs.s	loc_18BC2
0001BB32 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB36 6000                       		bra.s	loc_18BC2
0001BB38                            ; ===========================================================================
0001BB38                            
0001BB38                            loc_18BAE:
0001BB38 5168 0012                  		subq.w	#8,obVelY(a0)
0001BB3C 6000                       		bra.s	loc_18BC2
0001BB3E                            ; ===========================================================================
0001BB3E                            
0001BB3E                            loc_18BB4:
0001BB3E 4268 0012                          	clr.w    obVelY(a0)
0001BB42 4A38 FE2D                          	tst.b     (v_invinc).w
0001BB46 6600                               	bne.s   @boss_invinc
0001BB48                            
0001BB48 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BB4C 6000 0000                          	bra.w      @boss_play
0001BB50                            
0001BB50                            	@boss_invinc:
0001BB50 103C 0000                          	move.b #bgm_Invincible,d0
0001BB54                            
0001BB54                            	@boss_play:
0001BB54 4EB8 124A                          	jsr PlaySound
0001BB58                            
0001BB58                            loc_18BC2:
0001BB58 6000 FE1E                  		bra.w	loc_189EE
0001BB5C                            ; ===========================================================================
0001BB5C                            
0001BB5C                            loc_18BC6:
0001BB5C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BB62 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BB68 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BB6E 6400                       		bcc.s	loc_18BE0
0001BB70 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BB74 6000                       		bra.s	loc_18BE8
0001BB76                            ; ===========================================================================
0001BB76                            
0001BB76                            loc_18BE0:
0001BB76 4A28 0001                  		tst.b	obRender(a0)
0001BB7A 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BB7E                            
0001BB7E                            loc_18BE8:
0001BB7E 6100 EC68                  		bsr.w	BossMove
0001BB82 6000 FDD0                  		bra.w	loc_189CA
0001BB86                            ; ===========================================================================
0001BB86                            
0001BB86                            Obj7A_FaceMain:	; Routine 4
0001BB86 7000                       		moveq	#0,d0
0001BB88 7201                       		moveq	#1,d1
0001BB8A 2268 0034                  		movea.l	$34(a0),a1
0001BB8E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BB92 0C00 0006                  		cmpi.b	#6,d0
0001BB96 6B00                       		bmi.s	loc_18C06
0001BB98 720A                       		moveq	#$A,d1
0001BB9A 6000                       		bra.s	loc_18C1A
0001BB9C                            ; ===========================================================================
0001BB9C                            
0001BB9C                            loc_18C06:
0001BB9C 4A29 0020                  		tst.b	obColType(a1)
0001BBA0 6600                       		bne.s	loc_18C10
0001BBA2 7205                       		moveq	#5,d1
0001BBA4 6000                       		bra.s	loc_18C1A
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_18C10:
0001BBA6 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BBAC 6500                       		bcs.s	loc_18C1A
0001BBAE 7204                       		moveq	#4,d1
0001BBB0                            
0001BBB0                            loc_18C1A:
0001BBB0 1141 001C                  		move.b	d1,obAnim(a0)
0001BBB4 0C00 000A                  		cmpi.b	#$A,d0
0001BBB8 6600                       		bne.s	loc_18C32
0001BBBA 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BBC0 4A28 0001                  		tst.b	obRender(a0)
0001BBC4 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BBC8                            
0001BBC8                            loc_18C32:
0001BBC8 6000                       		bra.s	loc_18C6C
0001BBCA                            ; ===========================================================================
0001BBCA                            
0001BBCA                            Obj7A_FlameMain:; Routine 6
0001BBCA 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BBD0 2268 0034                  		movea.l	$34(a0),a1
0001BBD4 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BBDA 6600                       		bne.s	loc_18C56
0001BBDC 4A28 0001                  		tst.b	obRender(a0)
0001BBE0 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BBE4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BBEA 6000                       		bra.s	loc_18C6C
0001BBEC                            ; ===========================================================================
0001BBEC                            
0001BBEC                            loc_18C56:
0001BBEC 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BBF2 6E00                       		bgt.s	loc_18C6C
0001BBF4 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BBFA 6D00                       		blt.s	loc_18C6C
0001BBFC 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BC02                            
0001BC02                            loc_18C6C:
0001BC02 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001BC08 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001BC0E                            
0001BC0E                            loc_18C78:
0001BC0E 2268 0034                  		movea.l	$34(a0),a1
0001BC12 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BC18 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BC1E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BC24 7003                       		moveq	#3,d0
0001BC26 C028 0022                  		and.b	obStatus(a0),d0
0001BC2A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BC30 8128 0001                  		or.b	d0,obRender(a0)
0001BC34 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001BC3A                            ; ===========================================================================
0001BC3A                            
0001BC3A                            Obj7A_TubeMain:	; Routine 8
0001BC3A 2268 0034                  		movea.l	$34(a0),a1
0001BC3E 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BC44 6600                       		bne.s	loc_18CB8
0001BC46 4A28 0001                  		tst.b	obRender(a0)
0001BC4A 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BC4E                            
0001BC4E                            loc_18CB8:
0001BC4E 217C 0001 AD4E 0004        		move.l	#Map_BossItems,obMap(a0)
0001BC56 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BC5C 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BC62 60AA                       		bra.s	loc_18C78
0001BC62 60AA                       		bra.s	loc_18C78
0001BC64                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BC64                            ; ---------------------------------------------------------------------------
0001BC64                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BC64                            ; ---------------------------------------------------------------------------
0001BC64                            
0001BC64                            BossSpikeball:
0001BC64 7000                       		moveq	#0,d0
0001BC66 1028 0024                  		move.b	obRoutine(a0),d0
0001BC6A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BC6E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BC72 3028 0030                  		move.w	$30(a0),d0
0001BC76 0240 FF80                  		andi.w	#$FF80,d0
0001BC7A 3238 F700                  		move.w	(v_screenposx).w,d1
0001BC7E 0441 0080                  		subi.w	#$80,d1
0001BC82 0241 FF80                  		andi.w	#$FF80,d1
0001BC86 9041                       		sub.w	d1,d0
0001BC88 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BC8C 0C40 0280                  		cmpi.w	#$280,d0
0001BC90 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BC94 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001BC9A                            ; ===========================================================================
0001BC9A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BC9C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BC9E 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BCA0 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BCA2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BCA4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BCA6                            ; ===========================================================================
0001BCA6                            
0001BCA6                            Obj7B_Main:	; Routine 0
0001BCA6 217C 0001 3DC8 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BCAE 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BCB4 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BCBA 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BCC0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BCC6 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BCCC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BCD2 2268 003C                  		movea.l	$3C(a0),a1
0001BCD6 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BCDC 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BCE2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BCE8 3028 0008                  		move.w	obX(a0),d0
0001BCEC B069 0008                  		cmp.w	obX(a1),d0
0001BCF0 6E00                       		bgt.s	loc_18D68
0001BCF2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BCF8 117C 0002 003A             		move.b	#2,$3A(a0)
0001BCFE                            
0001BCFE                            loc_18D68:
0001BCFE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BD02                            
0001BD02                            Obj7B_Fall:	; Routine 2
0001BD02 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001BD08 2268 003C                  		movea.l	$3C(a0),a1
0001BD0C 45F9 0000 0000             		lea	(word_19018).l,a2
0001BD12 7000                       		moveq	#0,d0
0001BD14 1029 001A                  		move.b	obFrame(a1),d0
0001BD18 3228 0008                  		move.w	8(a0),d1
0001BD1C 9268 0030                  		sub.w	$30(a0),d1
0001BD20 6400                       		bcc.s	loc_18D8E
0001BD22 5440                       		addq.w	#2,d0
0001BD24                            
0001BD24                            loc_18D8E:
0001BD24 D040                       		add.w	d0,d0
0001BD26 3228 0034                  		move.w	$34(a0),d1
0001BD2A D272 0000                  		add.w	(a2,d0.w),d1
0001BD2E B268 000C                  		cmp.w	obY(a0),d1
0001BD32 6E00                       		bgt.s	locret_18DC4
0001BD34 2268 003C                  		movea.l	$3C(a0),a1
0001BD38 7202                       		moveq	#2,d1
0001BD3A 0828 0000 0022             		btst	#0,obStatus(a0)
0001BD40 6700                       		beq.s	loc_18DAE
0001BD42 7200                       		moveq	#0,d1
0001BD44                            
0001BD44                            loc_18DAE:
0001BD44 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BD4A 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BD50 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BD56 6000 0000                  		bra.w	loc_18FA2
0001BD5A                            ; ===========================================================================
0001BD5A                            
0001BD5A                            locret_18DC4:
0001BD5A 4E75                       		rts	
0001BD5C                            ; ===========================================================================
0001BD5C                            
0001BD5C                            loc_18DC6:	; Routine 4
0001BD5C 2268 003C                  		movea.l	$3C(a0),a1
0001BD60 7000                       		moveq	#0,d0
0001BD62 1028 003A                  		move.b	$3A(a0),d0
0001BD66 9029 003A                  		sub.b	$3A(a1),d0
0001BD6A 6700                       		beq.s	loc_18E2A
0001BD6C 6400                       		bcc.s	loc_18DDA
0001BD6E 4400                       		neg.b	d0
0001BD70                            
0001BD70                            loc_18DDA:
0001BD70 323C F7E8                  		move.w	#-$818,d1
0001BD74 343C FEEC                  		move.w	#-$114,d2
0001BD78 0C00 0001                  		cmpi.b	#1,d0
0001BD7C 6700                       		beq.s	loc_18E00
0001BD7E 323C F6A0                  		move.w	#-$960,d1
0001BD82 343C FF0C                  		move.w	#-$F4,d2
0001BD86 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BD8C 6D00                       		blt.s	loc_18E00
0001BD8E 323C F5E0                  		move.w	#-$A20,d1
0001BD92 343C FF80                  		move.w	#-$80,d2
0001BD96                            
0001BD96                            loc_18E00:
0001BD96 3141 0012                  		move.w	d1,obVelY(a0)
0001BD9A 3142 0010                  		move.w	d2,obVelX(a0)
0001BD9E 3028 0008                  		move.w	obX(a0),d0
0001BDA2 9068 0030                  		sub.w	$30(a0),d0
0001BDA6 6400                       		bcc.s	loc_18E16
0001BDA8 4468 0010                  		neg.w	obVelX(a0)
0001BDAC                            
0001BDAC                            loc_18E16:
0001BDAC 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BDB2 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BDB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BDBC 6000 0000                  		bra.w	loc_18EAA
0001BDC0                            ; ===========================================================================
0001BDC0                            
0001BDC0                            loc_18E2A:
0001BDC0 45F9 0000 0000             		lea	(word_19018).l,a2
0001BDC6 7000                       		moveq	#0,d0
0001BDC8 1029 001A                  		move.b	obFrame(a1),d0
0001BDCC 343C 0028                  		move.w	#$28,d2
0001BDD0 3228 0008                  		move.w	obX(a0),d1
0001BDD4 9268 0030                  		sub.w	$30(a0),d1
0001BDD8 6400                       		bcc.s	loc_18E48
0001BDDA 4442                       		neg.w	d2
0001BDDC 5440                       		addq.w	#2,d0
0001BDDE                            
0001BDDE                            loc_18E48:
0001BDDE D040                       		add.w	d0,d0
0001BDE0 3228 0034                  		move.w	$34(a0),d1
0001BDE4 D272 0000                  		add.w	(a2,d0.w),d1
0001BDE8 3141 000C                  		move.w	d1,obY(a0)
0001BDEC D468 0030                  		add.w	$30(a0),d2
0001BDF0 3142 0008                  		move.w	d2,obX(a0)
0001BDF4 4268 000E                  		clr.w	obY+2(a0)
0001BDF8 4268 000A                  		clr.w	obX+2(a0)
0001BDFC 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BE00 6600                       		bne.s	loc_18E7A
0001BE02 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BE08 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BE0E 4E75                       		rts	
0001BE10                            ; ===========================================================================
0001BE10                            
0001BE10                            loc_18E7A:
0001BE10 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BE16 6600                       		bne.s	loc_18E88
0001BE18 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BE1E                            
0001BE1E                            loc_18E88:
0001BE1E 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BE24 6600                       		bne.s	loc_18E96
0001BE26 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BE2C                            
0001BE2C                            loc_18E96:
0001BE2C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BE30 6E00                       		bgt.s	locret_18EA8
0001BE32 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BE38 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BE3E                            
0001BE3E                            locret_18EA8:
0001BE3E 4E75                       		rts	
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            loc_18EAA:	; Routine 6
0001BE40 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BE44 707A                       		moveq	#id_BossStarLight,d0
0001BE46 7240                       		moveq	#$40,d1
0001BE48 743E                       		moveq	#$3E,d2
0001BE4A                            
0001BE4A                            loc_18EB4:
0001BE4A B011                       		cmp.b	(a1),d0
0001BE4C 6700                       		beq.s	loc_18EC0
0001BE4E D2C1                       		adda.w	d1,a1
0001BE50 51CA FFF8                  		dbf	d2,loc_18EB4
0001BE54                            
0001BE54 6000                       		bra.s	loc_18F38
0001BE56                            ; ===========================================================================
0001BE56                            
0001BE56                            loc_18EC0:
0001BE56 3029 0008                  		move.w	obX(a1),d0
0001BE5A 3229 000C                  		move.w	obY(a1),d1
0001BE5E 3428 0008                  		move.w	obX(a0),d2
0001BE62 3628 000C                  		move.w	obY(a0),d3
0001BE66 45FA 0000                  		lea	byte_19022(pc),a2
0001BE6A 47FA 0000                  		lea	byte_19026(pc),a3
0001BE6E 181A                       		move.b	(a2)+,d4
0001BE70 4884                       		ext.w	d4
0001BE72 D044                       		add.w	d4,d0
0001BE74 181B                       		move.b	(a3)+,d4
0001BE76 4884                       		ext.w	d4
0001BE78 D444                       		add.w	d4,d2
0001BE7A B440                       		cmp.w	d0,d2
0001BE7C 6500                       		bcs.s	loc_18F38
0001BE7E 181A                       		move.b	(a2)+,d4
0001BE80 4884                       		ext.w	d4
0001BE82 D044                       		add.w	d4,d0
0001BE84 181B                       		move.b	(a3)+,d4
0001BE86 4884                       		ext.w	d4
0001BE88 D444                       		add.w	d4,d2
0001BE8A B042                       		cmp.w	d2,d0
0001BE8C 6500                       		bcs.s	loc_18F38
0001BE8E 181A                       		move.b	(a2)+,d4
0001BE90 4884                       		ext.w	d4
0001BE92 D244                       		add.w	d4,d1
0001BE94 181B                       		move.b	(a3)+,d4
0001BE96 4884                       		ext.w	d4
0001BE98 D644                       		add.w	d4,d3
0001BE9A B641                       		cmp.w	d1,d3
0001BE9C 6500                       		bcs.s	loc_18F38
0001BE9E 181A                       		move.b	(a2)+,d4
0001BEA0 4884                       		ext.w	d4
0001BEA2 D244                       		add.w	d4,d1
0001BEA4 181B                       		move.b	(a3)+,d4
0001BEA6 4884                       		ext.w	d4
0001BEA8 D644                       		add.w	d4,d3
0001BEAA B243                       		cmp.w	d3,d1
0001BEAC 6500                       		bcs.s	loc_18F38
0001BEAE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEB2 4268 0028                  		clr.w	obSubtype(a0)
0001BEB6 4229 0020                  		clr.b	obColType(a1)
0001BEBA 5329 0021                  		subq.b	#1,obColProp(a1)
0001BEBE 6600                       		bne.s	loc_18F38
0001BEC0 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BEC6 4268 0010                  		clr.w	obVelX(a0)
0001BECA 4268 0012                  		clr.w	obVelY(a0)
0001BECE                            
0001BECE                            loc_18F38:
0001BECE 4A68 0012                  		tst.w	obVelY(a0)
0001BED2 6A00                       		bpl.s	loc_18F5C
0001BED4 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001BEDA 3028 0034                  		move.w	$34(a0),d0
0001BEDE 0440 002F                  		subi.w	#$2F,d0
0001BEE2 B068 000C                  		cmp.w	obY(a0),d0
0001BEE6 6E00                       		bgt.s	loc_18F58
0001BEE8 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001BEEE                            
0001BEEE                            loc_18F58:
0001BEEE 6000 FF20                  		bra.w	loc_18E7A
0001BEF2                            ; ===========================================================================
0001BEF2                            
0001BEF2                            loc_18F5C:
0001BEF2 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001BEF8 2268 003C                  		movea.l	$3C(a0),a1
0001BEFC 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF02 7000                       		moveq	#0,d0
0001BF04 1029 001A                  		move.b	obFrame(a1),d0
0001BF08 3228 0008                  		move.w	obX(a0),d1
0001BF0C 9268 0030                  		sub.w	$30(a0),d1
0001BF10 6400                       		bcc.s	loc_18F7E
0001BF12 5440                       		addq.w	#2,d0
0001BF14                            
0001BF14                            loc_18F7E:
0001BF14 D040                       		add.w	d0,d0
0001BF16 3228 0034                  		move.w	$34(a0),d1
0001BF1A D272 0000                  		add.w	(a2,d0.w),d1
0001BF1E B268 000C                  		cmp.w	obY(a0),d1
0001BF22 6ECA                       		bgt.s	loc_18F58
0001BF24 2268 003C                  		movea.l	$3C(a0),a1
0001BF28 7202                       		moveq	#2,d1
0001BF2A 4A68 0010                  		tst.w	obVelX(a0)
0001BF2E 6B00                       		bmi.s	loc_18F9C
0001BF30 7200                       		moveq	#0,d1
0001BF32                            
0001BF32                            loc_18F9C:
0001BF32 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BF38                            
0001BF38                            loc_18FA2:
0001BF38 1341 003A                  		move.b	d1,$3A(a1)
0001BF3C 1141 003A                  		move.b	d1,$3A(a0)
0001BF40 B229 001A                  		cmp.b	obFrame(a1),d1
0001BF44 6700                       		beq.s	loc_19008
0001BF46 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BF4C 6700                       		beq.s	loc_19008
0001BF4E 4229 0025                  		clr.b	ob2ndRout(a1)
0001BF52 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BF58 45F8 D000                  		lea	(v_objspace).w,a2
0001BF5C 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BF62 446A 0012                  		neg.w	obVelY(a2)
0001BF66 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BF6C 6600                       		bne.s	loc_18FDC
0001BF6E E0EA 0012                  		asr	obVelY(a2)
0001BF72                            
0001BF72                            loc_18FDC:
0001BF72 08EA 0001 0022             		bset	#1,obStatus(a2)
0001BF78 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001BF7E 422A 003C                  		clr.b	$3C(a2)
0001BF82 2F08                       		move.l	a0,-(sp)
0001BF84 41D2                       		lea	(a2),a0
0001BF86 4EB9 0001 5F38             		jsr	(Sonic_ChkRoll).l
0001BF8C 205F                       		movea.l	(sp)+,a0
0001BF8E 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001BF9E                            
0001BF9E                            loc_19008:
0001BF9E 4268 0010                  		clr.w	obVelX(a0)
0001BFA2 4268 0012                  		clr.w	obVelY(a0)
0001BFA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BFAA 6000 FE64                  		bra.w	loc_18E7A
0001BFAE                            ; ===========================================================================
0001BFAE FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001BFB8                            		even
0001BFB8 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001BFBC                            		even
0001BFBC 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001BFC0                            		even
0001BFC0                            ; ===========================================================================
0001BFC0                            
0001BFC0                            Obj7B_Explode:	; Routine 8
0001BFC0 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001BFC4 4228 0024                  		clr.b	obRoutine(a0)
0001BFC8 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001BFCE 6700                       		beq.s	Obj7B_MakeFrag
0001BFD0 4E75                       		rts	
0001BFD2                            ; ===========================================================================
0001BFD2                            
0001BFD2                            Obj7B_MakeFrag:
0001BFD2 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001BFD8 7203                       		moveq	#3,d1
0001BFDA 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001BFDE                            
0001BFDE                            Obj7B_Loop:
0001BFDE 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001BFE4 6600                       		bne.s	loc_1909A
0001BFE6 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001BFEA 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001BFF0 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001BFF8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001BFFE 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C004 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C00A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C010 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C014 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C018 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C01E 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C024 08E9 0007 0001             		bset	#7,obRender(a1)
0001C02A 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C030                            
0001C030                            loc_1909A:
0001C030 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C034                            
0001C034 4E75                       		rts	
0001C036                            ; ===========================================================================
0001C036 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C03A FF60 FDC0                  		dc.w -$A0, -$240
0001C03E 0100 FCC0                  		dc.w $100, -$340
0001C042 00A0 FDC0                  		dc.w $A0, -$240
0001C046                            ; ===========================================================================
0001C046                            
0001C046                            Obj7B_MoveFrag:	; Routine $A
0001C046 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001C04C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C052 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C058 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C05E 7004                       		moveq	#4,d0
0001C060 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C064 E448                       		lsr.w	#2,d0
0001C066 1140 001A                  		move.b	d0,obFrame(a0)
0001C06A 4A28 0001                  		tst.b	1(a0)
0001C06E 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C072 4E75                       		rts	
0001C072 4E75                       		rts	
0001C074                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C074                            ; ---------------------------------------------------------------------------
0001C074                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C074                            ; ---------------------------------------------------------------------------
0001C074                            Map_BSBall_internal:
0001C074 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C076 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C078 01                         @fireball1:	dc.b 1
0001C079 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C07E 01                         @fireball2:	dc.b 1
0001C07F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C084                            		even
0001C084                            		even
0001C084                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C084                            ; ---------------------------------------------------------------------------
0001C084                            ; Object 75 - Eggman (SYZ)
0001C084                            ; ---------------------------------------------------------------------------
0001C084                            
0001C084                            BossSpringYard:
0001C084 7000                       		moveq	#0,d0
0001C086 1028 0024                  		move.b	obRoutine(a0),d0
0001C08A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C08E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C092                            ; ===========================================================================
0001C092 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C094 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C096 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C098 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C09A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C09C                            
0001C09C 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001C09F 0401 05                    		dc.b 4,	1, 5
0001C0A2 0607 05                    		dc.b 6,	7, 5
0001C0A5 0800 05                    		dc.b 8,	0, 5
0001C0A8                            ; ===========================================================================
0001C0A8                            
0001C0A8                            Obj75_Main:	; Routine 0
0001C0A8 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C0AE 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C0B4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C0BA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C0C0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C0C6 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C0CC 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001C0D0 2248                       		movea.l	a0,a1
0001C0D2 7203                       		moveq	#3,d1
0001C0D4 6000                       		bra.s	Obj75_LoadBoss
0001C0D6                            ; ===========================================================================
0001C0D6                            
0001C0D6                            Obj75_Loop:
0001C0D6 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001C0DC 6600                       		bne.s	Obj75_ShipMain
0001C0DE 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C0E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C0E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C0EE                            
0001C0EE                            Obj75_LoadBoss:
0001C0EE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C0F4 4229 0025                  		clr.b	ob2ndRout(a1)
0001C0F8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C0FC 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C100 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C104 237C 0001 AC5E 0004        		move.l	#Map_Eggman,obMap(a1)
0001C10C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C112 137C 0004 0001             		move.b	#4,obRender(a1)
0001C118 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C11E 2348 0034                  		move.l	a0,$34(a1)
0001C122 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C126                            
0001C126                            Obj75_ShipMain:	; Routine 2
0001C126 7000                       		moveq	#0,d0
0001C128 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C12C 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C130 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C134 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001C13A 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001C140 7003                       		moveq	#3,d0
0001C142 C028 0022                  		and.b	obStatus(a0),d0
0001C146 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C14C 8128 0001                  		or.b	d0,obRender(a0)
0001C150 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001C156                            ; ===========================================================================
0001C156 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C15A 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C15E 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C162                            ; ===========================================================================
0001C162                            
0001C162                            loc_191CC:
0001C162 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C168 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C16E 6400                       		bcc.s	loc_191DE
0001C170 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C174                            
0001C174                            loc_191DE:
0001C174 1028 003F                  		move.b	$3F(a0),d0
0001C178 5428 003F                  		addq.b	#2,$3F(a0)
0001C17C 4EB9 0000 3A32             		jsr	(CalcSine).l
0001C182 E440                       		asr.w	#2,d0
0001C184 3140 0012                  		move.w	d0,obVelY(a0)
0001C188                            
0001C188                            loc_191F2:
0001C188 6100 E65E                  		bsr.w	BossMove
0001C18C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C192 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C198                            
0001C198                            loc_19202:
0001C198 3028 0008                  		move.w	8(a0),d0
0001C19C 0440 2C00                  		subi.w	#$2C00,d0
0001C1A0 EA48                       		lsr.w	#5,d0
0001C1A2 1140 0034                  		move.b	d0,$34(a0)
0001C1A6 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C1AC 6400                       		bcc.s	locret_19256
0001C1AE 4A28 0022                  		tst.b	obStatus(a0)
0001C1B2 6B00                       		bmi.s	loc_19258
0001C1B4 4A28 0020                  		tst.b	obColType(a0)
0001C1B8 6600                       		bne.s	locret_19256
0001C1BA 4A28 003E                  		tst.b	$3E(a0)
0001C1BE 6600                       		bne.s	loc_1923A
0001C1C0 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C1D0                            
0001C1D0                            loc_1923A:
0001C1D0 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C1D4 7000                       		moveq	#0,d0
0001C1D6 4A51                       		tst.w	(a1)
0001C1D8 6600                       		bne.s	loc_19248
0001C1DA 303C 0EEE                  		move.w	#cWhite,d0
0001C1DE                            
0001C1DE                            loc_19248:
0001C1DE 3280                       		move.w	d0,(a1)
0001C1E0 5328 003E                  		subq.b	#1,$3E(a0)
0001C1E4 6600                       		bne.s	locret_19256
0001C1E6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C1EC                            
0001C1EC                            locret_19256:
0001C1EC 4E75                       		rts	
0001C1EE                            ; ===========================================================================
0001C1EE                            
0001C1EE                            loc_19258:
0001C1EE 7064                       		moveq	#100,d0
0001C1F0 6100 0000                  		bsr.w	AddPoints
0001C1F4 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C1FA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C200 4268 0010                  		clr.w	obVelX(a0)
0001C204 4E75                       		rts	
0001C206                            ; ===========================================================================
0001C206                            
0001C206                            loc_19270:
0001C206 3028 0030                  		move.w	$30(a0),d0
0001C20A 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C210 0828 0000 0022             		btst	#0,obStatus(a0)
0001C216 6600                       		bne.s	loc_1928E
0001C218 4468 0010                  		neg.w	obVelX(a0)
0001C21C 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C220 6E00                       		bgt.s	loc_1929E
0001C222 6000                       		bra.s	loc_19294
0001C224                            ; ===========================================================================
0001C224                            
0001C224                            loc_1928E:
0001C224 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C228 6D00                       		blt.s	loc_1929E
0001C22A                            
0001C22A                            loc_19294:
0001C22A 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C230 4228 003D                  		clr.b	$3D(a0)
0001C234                            
0001C234                            loc_1929E:
0001C234 0440 2C10                  		subi.w	#$2C10,d0
0001C238 0240 001F                  		andi.w	#$1F,d0
0001C23C 0440 001F                  		subi.w	#$1F,d0
0001C240 6A00                       		bpl.s	loc_192AE
0001C242 4440                       		neg.w	d0
0001C244                            
0001C244                            loc_192AE:
0001C244 5340                       		subq.w	#1,d0
0001C246 6E00                       		bgt.s	loc_192E8
0001C248 4A28 003D                  		tst.b	$3D(a0)
0001C24C 6600                       		bne.s	loc_192E8
0001C24E 3238 D008                  		move.w	(v_player+obX).w,d1
0001C252 0441 2C00                  		subi.w	#$2C00,d1
0001C256 EA41                       		asr.w	#5,d1
0001C258 B228 0034                  		cmp.b	$34(a0),d1
0001C25C 6600                       		bne.s	loc_192E8
0001C25E 7000                       		moveq	#0,d0
0001C260 1028 0034                  		move.b	$34(a0),d0
0001C264 EB40                       		asl.w	#5,d0
0001C266 0640 2C10                  		addi.w	#$2C10,d0
0001C26A 3140 0030                  		move.w	d0,$30(a0)
0001C26E 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C272 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C276 4268 0028                  		clr.w	obSubtype(a0)
0001C27A 4268 0010                  		clr.w	obVelX(a0)
0001C27E                            
0001C27E                            loc_192E8:
0001C27E 6000 FEF4                  		bra.w	loc_191DE
0001C282                            ; ===========================================================================
0001C282                            
0001C282                            loc_192EC:
0001C282 7000                       		moveq	#0,d0
0001C284 1028 0028                  		move.b	obSubtype(a0),d0
0001C288 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C28C 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C290                            ; ===========================================================================
0001C290 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C292 0000                       		dc.w loc_19348-off_192FA
0001C294 0000                       		dc.w loc_1938E-off_192FA
0001C296 0000                       		dc.w loc_193D0-off_192FA
0001C298                            ; ===========================================================================
0001C298                            
0001C298                            loc_19302:
0001C298 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C29E 3028 0038                  		move.w	$38(a0),d0
0001C2A2 0C40 0556                  		cmpi.w	#$556,d0
0001C2A6 6500                       		bcs.s	loc_19344
0001C2A8 317C 0556 0038             		move.w	#$556,$38(a0)
0001C2AE 4268 003C                  		clr.w	$3C(a0)
0001C2B2 70FF                       		moveq	#-1,d0
0001C2B4 3028 0036                  		move.w	$36(a0),d0
0001C2B8 6700                       		beq.s	loc_1933C
0001C2BA 2240                       		movea.l	d0,a1
0001C2BC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C2C2 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C2C8 2348 0034                  		move.l	a0,$34(a1)
0001C2CC 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C2D2                            
0001C2D2                            loc_1933C:
0001C2D2 4268 0012                  		clr.w	obVelY(a0)
0001C2D6 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C2DA                            
0001C2DA                            loc_19344:
0001C2DA 6000 FEAC                  		bra.w	loc_191F2
0001C2DE                            ; ===========================================================================
0001C2DE                            
0001C2DE                            loc_19348:
0001C2DE 5368 003C                  		subq.w	#1,$3C(a0)
0001C2E2 6A00                       		bpl.s	loc_19366
0001C2E4 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C2E8 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C2EE 4A68 0036                  		tst.w	$36(a0)
0001C2F2 6600                       		bne.s	loc_19362
0001C2F4 E0E8 0012                  		asr	obVelY(a0)
0001C2F8                            
0001C2F8                            loc_19362:
0001C2F8 7000                       		moveq	#0,d0
0001C2FA 6000                       		bra.s	loc_1937C
0001C2FC                            ; ===========================================================================
0001C2FC                            
0001C2FC                            loc_19366:
0001C2FC 7000                       		moveq	#0,d0
0001C2FE 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C304 6E00                       		bgt.s	loc_1937C
0001C306 7002                       		moveq	#2,d0
0001C308 0828 0001 003D             		btst	#1,$3D(a0)
0001C30E 6700                       		beq.s	loc_1937C
0001C310 4440                       		neg.w	d0
0001C312                            
0001C312                            loc_1937C:
0001C312 D068 0038                  		add.w	$38(a0),d0
0001C316 3140 000C                  		move.w	d0,obY(a0)
0001C31A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C320 6000 FE76                  		bra.w	loc_19202
0001C324                            ; ===========================================================================
0001C324                            
0001C324                            loc_1938E:
0001C324 303C 04DA                  		move.w	#$4DA,d0
0001C328 4A68 0036                  		tst.w	$36(a0)
0001C32C 6700                       		beq.s	loc_1939C
0001C32E 0440 0018                  		subi.w	#$18,d0
0001C332                            
0001C332                            loc_1939C:
0001C332 B068 0038                  		cmp.w	$38(a0),d0
0001C336 6D00                       		blt.s	loc_193BE
0001C338 317C 0008 003C             		move.w	#8,$3C(a0)
0001C33E 4A68 0036                  		tst.w	$36(a0)
0001C342 6700                       		beq.s	loc_193B4
0001C344 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C34A                            
0001C34A                            loc_193B4:
0001C34A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C34E 4268 0012                  		clr.w	obVelY(a0)
0001C352 6000                       		bra.s	loc_193CC
0001C354                            ; ===========================================================================
0001C354                            
0001C354                            loc_193BE:
0001C354 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C35A 6C00                       		bge.s	loc_193CC
0001C35C 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C362                            
0001C362                            loc_193CC:
0001C362 6000 FE24                  		bra.w	loc_191F2
0001C366                            ; ===========================================================================
0001C366                            
0001C366                            loc_193D0:
0001C366 5368 003C                  		subq.w	#1,$3C(a0)
0001C36A 6E00                       		bgt.s	loc_19406
0001C36C 6B00                       		bmi.s	loc_193EE
0001C36E 70FF                       		moveq	#-1,d0
0001C370 3028 0036                  		move.w	$36(a0),d0
0001C374 6700                       		beq.s	loc_193E8
0001C376 2240                       		movea.l	d0,a1
0001C378 137C 000A 0029             		move.b	#$A,$29(a1)
0001C37E                            
0001C37E                            loc_193E8:
0001C37E 4268 0036                  		clr.w	$36(a0)
0001C382 6000                       		bra.s	loc_19406
0001C384                            ; ===========================================================================
0001C384                            
0001C384                            loc_193EE:
0001C384 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C38A 6600                       		bne.s	loc_19406
0001C38C 4228 0029                  		clr.b	$29(a0)
0001C390 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C394 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C39A 6000                       		bra.s	loc_19446
0001C39C                            ; ===========================================================================
0001C39C                            
0001C39C                            loc_19406:
0001C39C 7001                       		moveq	#1,d0
0001C39E 4A68 0036                  		tst.w	$36(a0)
0001C3A2 6700                       		beq.s	loc_19410
0001C3A4 7002                       		moveq	#2,d0
0001C3A6                            
0001C3A6                            loc_19410:
0001C3A6 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C3AC 6700                       		beq.s	loc_19424
0001C3AE 6D00                       		blt.s	loc_1941C
0001C3B0 4440                       		neg.w	d0
0001C3B2                            
0001C3B2                            loc_1941C:
0001C3B2 4A68 0036                  		tst.w	$36(a0)
0001C3B6 D168 0038                  		add.w	d0,$38(a0)
0001C3BA                            
0001C3BA                            loc_19424:
0001C3BA 7000                       		moveq	#0,d0
0001C3BC 4A68 0036                  		tst.w	$36(a0)
0001C3C0 6700                       		beq.s	loc_19438
0001C3C2 7002                       		moveq	#2,d0
0001C3C4 0828 0000 003D             		btst	#0,$3D(a0)
0001C3CA 6700                       		beq.s	loc_19438
0001C3CC 4440                       		neg.w	d0
0001C3CE                            
0001C3CE                            loc_19438:
0001C3CE D068 0038                  		add.w	$38(a0),d0
0001C3D2 3140 000C                  		move.w	d0,obY(a0)
0001C3D6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C3DC                            
0001C3DC                            loc_19446:
0001C3DC 6000 FDBA                  		bra.w	loc_19202
0001C3E0                            
0001C3E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3E0                            
0001C3E0                            
0001C3E0                            Obj75_FindBlocks:
0001C3E0 4268 0036                  		clr.w	$36(a0)
0001C3E4 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C3E8 703E                       		moveq	#$3E,d0
0001C3EA 7276                       		moveq	#$76,d1
0001C3EC 1428 0034                  		move.b	$34(a0),d2
0001C3F0                            
0001C3F0                            Obj75_FindLoop:
0001C3F0 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C3F2 6600                       		bne.s	loc_1946A	; if not, branch
0001C3F4 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C3F8 6600                       		bne.s	loc_1946A
0001C3FA 3149 0036                  		move.w	a1,$36(a0)
0001C3FE 6000                       		bra.s	locret_19472
0001C400                            ; ===========================================================================
0001C400                            
0001C400                            loc_1946A:
0001C400 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C404 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C408                            
0001C408                            locret_19472:
0001C408 4E75                       		rts	
0001C40A                            ; End of function Obj75_FindBlocks
0001C40A                            
0001C40A                            ; ===========================================================================
0001C40A                            
0001C40A                            loc_19474:
0001C40A 5368 003C                  		subq.w	#1,$3C(a0)
0001C40E 6B00                       		bmi.s	loc_1947E
0001C410 6000 E394                  		bra.w	BossDefeated
0001C414                            ; ===========================================================================
0001C414                            
0001C414                            loc_1947E:
0001C414 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C418 4268 0012                  		clr.w	obVelY(a0)
0001C41C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C422 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C428 4268 0010                  		clr.w	obVelX(a0)
0001C42C 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C432 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C436 6600                       		bne.s	loc_194A8
0001C438 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C43E                            
0001C43E                            loc_194A8:
0001C43E 6000 FD58                  		bra.w	loc_19202
0001C442                            ; ===========================================================================
0001C442                            
0001C442                            loc_194AC:
0001C442 5268 003C                  		addq.w	#1,$3C(a0)
0001C446 6700                       		beq.s	loc_194BC
0001C448 6A00                       		bpl.s	loc_194C2
0001C44A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C450 6000                       		bra.s	loc_194EE
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            loc_194BC:
0001C452 4268 0012                  		clr.w	obVelY(a0)
0001C456 6000                       		bra.s	loc_194EE
0001C458                            ; ===========================================================================
0001C458                            
0001C458                            loc_194C2:
0001C458 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C45E 6500                       		bcs.s	loc_194DA
0001C460 6700                       		beq.s	loc_194E0
0001C462 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C468 6500                       		bcs.s	loc_194EE
0001C46A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C46E 6000                       		bra.s	loc_194EE
0001C470                            ; ===========================================================================
0001C470                            
0001C470                            loc_194DA:
0001C470 5168 0012                  		subq.w	#8,obVelY(a0)
0001C474 6000                       		bra.s	loc_194EE
0001C476                            ; ===========================================================================
0001C476                            
0001C476                            loc_194E0:
0001C476 4268 0012                  		clr.w    obVelY(a0)
0001C47A 4A38 FE2D                          	tst.b     (v_invinc).w
0001C47E 6600                               	bne.s   @boss_invinc
0001C480                            
0001C480 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C484 6000 0000                          	bra.w      @boss_play
0001C488                            
0001C488                            @boss_invinc:
0001C488 103C 0000                          	move.b #bgm_Invincible,d0
0001C48C                            
0001C48C                            @boss_play:
0001C48C 4EB8 124A                          	jsr PlaySound
0001C490                            
0001C490                            loc_194EE:
0001C490 6000 FCF6                  		bra.w	loc_191F2
0001C494                            ; ===========================================================================
0001C494                            
0001C494                            loc_194F2:
0001C494 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C49A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C4A0 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C4A6 6400                       		bcc.s	loc_1950C
0001C4A8 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C4AC 6000                       		bra.s	loc_19512
0001C4AE                            ; ===========================================================================
0001C4AE                            
0001C4AE                            loc_1950C:
0001C4AE 4A28 0001                  		tst.b	obRender(a0)
0001C4B2 6A00                       		bpl.s	Obj75_ShipDelete
0001C4B4                            
0001C4B4                            loc_19512:
0001C4B4 6100 E332                  		bsr.w	BossMove
0001C4B8 6000 FCBA                  		bra.w	loc_191DE
0001C4BC                            ; ===========================================================================
0001C4BC                            
0001C4BC                            Obj75_ShipDelete:
0001C4BC 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001C4C2                            ; ===========================================================================
0001C4C2                            
0001C4C2                            Obj75_FaceMain:	; Routine 4
0001C4C2 7201                       		moveq	#1,d1
0001C4C4 2268 0034                  		movea.l	$34(a0),a1
0001C4C8 7000                       		moveq	#0,d0
0001C4CA 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C4CE 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C4D2 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C4D6 1141 001C                  		move.b	d1,obAnim(a0)
0001C4DA 1010                       		move.b	(a0),d0
0001C4DC B011                       		cmp.b	(a1),d0
0001C4DE 6600                       		bne.s	Obj75_FaceDelete
0001C4E0 6000                       		bra.s	loc_195BE
0001C4E2                            ; ===========================================================================
0001C4E2                            
0001C4E2                            Obj75_FaceDelete:
0001C4E2 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001C4E8                            ; ===========================================================================
0001C4E8 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C4EC 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C4F0 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C4F4                            ; ===========================================================================
0001C4F4                            
0001C4F4                            loc_19552:
0001C4F4 720A                       		moveq	#$A,d1
0001C4F6 4E75                       		rts	
0001C4F8                            ; ===========================================================================
0001C4F8                            
0001C4F8                            loc_19556:
0001C4F8 7206                       		moveq	#6,d1
0001C4FA 4E75                       		rts	
0001C4FC                            ; ===========================================================================
0001C4FC                            
0001C4FC                            loc_1955A:
0001C4FC 7000                       		moveq	#0,d0
0001C4FE 1029 0028                  		move.b	obSubtype(a1),d0
0001C502 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C506 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C50A                            ; ===========================================================================
0001C50A 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C50E 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C512                            ; ===========================================================================
0001C512                            
0001C512                            loc_19570:
0001C512 6000                       		bra.s	loc_19574
0001C514                            ; ===========================================================================
0001C514                            
0001C514                            loc_19572:
0001C514 7206                       		moveq	#6,d1
0001C516                            
0001C516                            loc_19574:
0001C516 4A29 0020                  		tst.b	obColType(a1)
0001C51A 6600                       		bne.s	loc_1957E
0001C51C 7205                       		moveq	#5,d1
0001C51E 4E75                       		rts	
0001C520                            ; ===========================================================================
0001C520                            
0001C520                            loc_1957E:
0001C520 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C526 6500                       		bcs.s	locret_19588
0001C528 7204                       		moveq	#4,d1
0001C52A                            
0001C52A                            locret_19588:
0001C52A 4E75                       		rts	
0001C52C                            ; ===========================================================================
0001C52C                            
0001C52C                            Obj75_FlameMain:; Routine 6
0001C52C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C532 2268 0034                  		movea.l	$34(a0),a1
0001C536 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C53C 6600                       		bne.s	loc_195AA
0001C53E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C544 4A28 0001                  		tst.b	1(a0)
0001C548 6A00                       		bpl.s	Obj75_FlameDelete
0001C54A 6000                       		bra.s	loc_195B6
0001C54C                            ; ===========================================================================
0001C54C                            
0001C54C                            loc_195AA:
0001C54C 4A69 0010                  		tst.w	obVelX(a1)
0001C550 6700                       		beq.s	loc_195B6
0001C552 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C558                            
0001C558                            loc_195B6:
0001C558 6000                       		bra.s	loc_195BE
0001C55A                            ; ===========================================================================
0001C55A                            
0001C55A                            Obj75_FlameDelete:
0001C55A 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001C560                            ; ===========================================================================
0001C560                            
0001C560                            loc_195BE:
0001C560 43F9 0001 AC0E             		lea	(Ani_Eggman).l,a1
0001C566 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001C56C 2268 0034                  		movea.l	$34(a0),a1
0001C570 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C576 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C57C                            
0001C57C                            loc_195DA:
0001C57C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C582 7003                       		moveq	#3,d0
0001C584 C028 0022                  		and.b	obStatus(a0),d0
0001C588 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C58E 8128 0001                  		or.b	d0,obRender(a0)
0001C592 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001C598                            ; ===========================================================================
0001C598                            
0001C598                            Obj75_SpikeMain:; Routine 8
0001C598 217C 0001 AD4E 0004        		move.l	#Map_BossItems,obMap(a0)
0001C5A0 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C5A6 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C5AC 2268 0034                  		movea.l	$34(a0),a1
0001C5B0 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C5B6 6600                       		bne.s	loc_1961C
0001C5B8 4A28 0001                  		tst.b	obRender(a0)
0001C5BC 6A00                       		bpl.s	Obj75_SpikeDelete
0001C5BE                            
0001C5BE                            loc_1961C:
0001C5BE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C5C4 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C5CA 3028 003C                  		move.w	$3C(a0),d0
0001C5CE 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C5D4 6600                       		bne.s	loc_19652
0001C5D6 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C5DC 6700                       		beq.s	loc_1964C
0001C5DE 4A29 0028                  		tst.b	obSubtype(a1)
0001C5E2 6600                       		bne.s	loc_19658
0001C5E4 0C40 0094                  		cmpi.w	#$94,d0
0001C5E8 6C00                       		bge.s	loc_19658
0001C5EA 5E40                       		addq.w	#7,d0
0001C5EC 6000                       		bra.s	loc_19658
0001C5EE                            ; ===========================================================================
0001C5EE                            
0001C5EE                            loc_1964C:
0001C5EE 4A69 003C                  		tst.w	$3C(a1)
0001C5F2 6A00                       		bpl.s	loc_19658
0001C5F4                            
0001C5F4                            loc_19652:
0001C5F4 4A40                       		tst.w	d0
0001C5F6 6F00                       		ble.s	loc_19658
0001C5F8 5B40                       		subq.w	#5,d0
0001C5FA                            
0001C5FA                            loc_19658:
0001C5FA 3140 003C                  		move.w	d0,$3C(a0)
0001C5FE E440                       		asr.w	#2,d0
0001C600 D168 000C                  		add.w	d0,obY(a0)
0001C604 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C60A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C610 4228 0020                  		clr.b	obColType(a0)
0001C614 2268 0034                  		movea.l	$34(a0),a1
0001C618 4A29 0020                  		tst.b	obColType(a1)
0001C61C 6700                       		beq.s	loc_19688
0001C61E 4A29 0029                  		tst.b	$29(a1)
0001C622 6600                       		bne.s	loc_19688
0001C624 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C62A                            
0001C62A                            loc_19688:
0001C62A 6000 FF50                  		bra.w	loc_195DA
0001C62E                            ; ===========================================================================
0001C62E                            
0001C62E                            Obj75_SpikeDelete:
0001C62E 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001C62E 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001C634                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C634                            ; ---------------------------------------------------------------------------
0001C634                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C634                            ; ---------------------------------------------------------------------------
0001C634                            
0001C634                            BossBlock:
0001C634 7000                       		moveq	#0,d0
0001C636 1028 0024                  		move.b	obRoutine(a0),d0
0001C63A 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C63E 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C642                            ; ===========================================================================
0001C642 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C644 0000                       		dc.w Obj76_Action-Obj76_Index
0001C646 0000                       		dc.w loc_19762-Obj76_Index
0001C648                            ; ===========================================================================
0001C648                            
0001C648                            Obj76_Main:	; Routine 0
0001C648 7800                       		moveq	#0,d4
0001C64A 3A3C 2C10                  		move.w	#$2C10,d5
0001C64E 7C09                       		moveq	#9,d6
0001C650 43D0                       		lea	(a0),a1
0001C652 6000                       		bra.s	Obj76_MakeBlock
0001C654                            ; ===========================================================================
0001C654                            
0001C654                            Obj76_Loop:
0001C654 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001C65A 6600                       		bne.s	Obj76_ExitLoop
0001C65C                            
0001C65C                            Obj76_MakeBlock:
0001C65C 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C660 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C668 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C66E 137C 0004 0001             		move.b	#4,obRender(a1)
0001C674 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C67A 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C680 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C686 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C68A 337C 0582 000C             		move.w	#$582,obY(a1)
0001C690 3344 0028                  		move.w	d4,obSubtype(a1)
0001C694 0644 0101                  		addi.w	#$101,d4
0001C698 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C69C 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C6A0 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C6A4                            
0001C6A4                            Obj76_ExitLoop:
0001C6A4 4E75                       		rts	
0001C6A6                            ; ===========================================================================
0001C6A6                            
0001C6A6                            Obj76_Action:	; Routine 2
0001C6A6 1028 0029                  		move.b	$29(a0),d0
0001C6AA B028 0028                  		cmp.b	obSubtype(a0),d0
0001C6AE 6700                       		beq.s	Obj76_Solid
0001C6B0 4A00                       		tst.b	d0
0001C6B2 6B00                       		bmi.s	loc_19718
0001C6B4                            
0001C6B4                            loc_19712:
0001C6B4 6100 0000                  		bsr.w	Obj76_Break
0001C6B8 6000                       		bra.s	Obj76_Display
0001C6BA                            ; ===========================================================================
0001C6BA                            
0001C6BA                            loc_19718:
0001C6BA 2268 0034                  		movea.l	$34(a0),a1
0001C6BE 4A29 0021                  		tst.b	obColProp(a1)
0001C6C2 67F0                       		beq.s	loc_19712
0001C6C4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C6CA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C6D0 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C6D6 B2C8                       		cmpa.w	a0,a1
0001C6D8 6500                       		bcs.s	Obj76_Display
0001C6DA 3029 0012                  		move.w	obVelY(a1),d0
0001C6DE 48C0                       		ext.l	d0
0001C6E0 E080                       		asr.l	#8,d0
0001C6E2 D168 000C                  		add.w	d0,obY(a0)
0001C6E6 6000                       		bra.s	Obj76_Display
0001C6E8                            ; ===========================================================================
0001C6E8                            
0001C6E8                            Obj76_Solid:
0001C6E8 323C 001B                  		move.w	#$1B,d1
0001C6EC 343C 0010                  		move.w	#$10,d2
0001C6F0 363C 0011                  		move.w	#$11,d3
0001C6F4 3828 0008                  		move.w	obX(a0),d4
0001C6F8 4EB9 0001 1D62             		jsr	(SolidObject).l
0001C6FE                            
0001C6FE                            Obj76_Display:
0001C6FE 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001C704                            ; ===========================================================================
0001C704                            
0001C704                            loc_19762:	; Routine 4
0001C704 4A28 0001                  		tst.b	obRender(a0)
0001C708 6A00                       		bpl.s	Obj76_Delete
0001C70A 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001C710 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001C716                            ; ===========================================================================
0001C716                            
0001C716                            Obj76_Delete:
0001C716 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001C71C                            
0001C71C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C71C                            
0001C71C                            
0001C71C                            Obj76_Break:
0001C71C 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C720 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C724 7801                       		moveq	#1,d4
0001C726 7203                       		moveq	#3,d1
0001C728 7438                       		moveq	#$38,d2
0001C72A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C72E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C734 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C73A 43D0                       		lea	(a0),a1
0001C73C 6000                       		bra.s	Obj76_MakeFrag
0001C73E                            ; ===========================================================================
0001C73E                            
0001C73E                            Obj76_LoopFrag:
0001C73E 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001C744 6600                       		bne.s	loc_197D4
0001C746                            
0001C746                            Obj76_MakeFrag:
0001C746 45D0                       		lea	(a0),a2
0001C748 47D1                       		lea	(a1),a3
0001C74A 7603                       		moveq	#3,d3
0001C74C                            
0001C74C                            loc_197AA:
0001C74C 26DA                       		move.l	(a2)+,(a3)+
0001C74E 26DA                       		move.l	(a2)+,(a3)+
0001C750 26DA                       		move.l	(a2)+,(a3)+
0001C752 26DA                       		move.l	(a2)+,(a3)+
0001C754 51CB FFF6                  		dbf	d3,loc_197AA
0001C758                            
0001C758 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C75C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C760 361D                       		move.w	(a5)+,d3
0001C762 D769 0008                  		add.w	d3,obX(a1)
0001C766 361D                       		move.w	(a5)+,d3
0001C768 D769 000C                  		add.w	d3,obY(a1)
0001C76C 1344 001A                  		move.b	d4,obFrame(a1)
0001C770 5244                       		addq.w	#1,d4
0001C772 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C776                            
0001C776                            loc_197D4:
0001C780                            ; End of function Obj76_Break
0001C780                            
0001C780                            ; ===========================================================================
0001C780 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C784 0180 FE00                  		dc.w $180, -$200
0001C788 FF00 FF00                  		dc.w -$100, -$100
0001C78C 0100 FF00                  		dc.w $100, -$100
0001C790 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C794 0010 0000                  		dc.w $10, 0
0001C798 0000 0010                  		dc.w 0,	$10
0001C79C 0010 0010                  		dc.w $10, $10
0001C79C 0010 0010                  		dc.w $10, $10
0001C7A0                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C7A0                            ; ---------------------------------------------------------------------------
0001C7A0                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C7A0                            ; ---------------------------------------------------------------------------
0001C7A0                            Map_BossBlock_internal:
0001C7A0 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C7A2 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C7A4 0000                       		dc.w @topright-Map_BossBlock_internal
0001C7A6 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C7A8 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C7AA 02                         @wholeblock:	dc.b 2
0001C7AB F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C7B0 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C7B5 00                         		dc.b 0
0001C7B6 01                         @topleft:	dc.b 1
0001C7B7 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C7BC 01                         @topright:	dc.b 1
0001C7BD F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C7C2 01                         @bottomleft:	dc.b 1
0001C7C3 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C7C8 01                         @bottomright:	dc.b 1
0001C7C9 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C7CE                            		even
0001C7CE                            		even
0001C7CE                            
0001C7CE                            loc_1982C:
0001C7CE 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001C7D4                            
0001C7D4                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C7D4                            ; ---------------------------------------------------------------------------
0001C7D4                            ; Object 82 - Eggman (SBZ2)
0001C7D4                            ; ---------------------------------------------------------------------------
0001C7D4                            
0001C7D4                            ScrapEggman:
0001C7D4 7000                       		moveq	#0,d0
0001C7D6 1028 0024                  		move.b	obRoutine(a0),d0
0001C7DA 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C7DE 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C7E2                            ; ===========================================================================
0001C7E2 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C7E4 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C7E6 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C7E8                            
0001C7E8 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C7EB 0400 03                    		dc.b 4,	0, 3
0001C7EE                            ; ===========================================================================
0001C7EE                            
0001C7EE                            SEgg_Main:	; Routine 0
0001C7EE 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C7F2 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C7F8 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C7FE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C804 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C80A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C810 4228 0025                  		clr.b	ob2ndRout(a0)
0001C814 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C818 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C81C 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C820 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C828 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C82E 117C 0004 0001             		move.b	#4,obRender(a0)
0001C834 08E8 0007 0001             		bset	#7,obRender(a0)
0001C83A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C840 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001C846 6600                       		bne.s	SEgg_Eggman
0001C848 2348 0034                  		move.l	a0,$34(a1)
0001C84C 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C850 337C 2130 0008             		move.w	#$2130,obX(a1)
0001C856 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001C85C 4228 0025                  		clr.b	ob2ndRout(a0)
0001C860 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C864 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C868 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C86C 237C 0000 DF76 0004        		move.l	#Map_But,obMap(a1)
0001C874 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C87A 137C 0004 0001             		move.b	#4,obRender(a1)
0001C880 08E9 0007 0001             		bset	#7,obRender(a1)
0001C886 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C88C 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C892                            
0001C892                            SEgg_Eggman:	; Routine 2
0001C892 7000                       		moveq	#0,d0
0001C894 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C898 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C89C 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C8A0 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C8A4 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001C8AA 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001C8B0                            ; ===========================================================================
0001C8B0 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C8B2 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C8B4 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C8B6 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C8B8                            ; ===========================================================================
0001C8B8                            
0001C8B8                            SEgg_ChkSonic:
0001C8B8 3028 0008                  		move.w	obX(a0),d0
0001C8BC 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C8C0 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C8C4 6400                       		bcc.s	loc_19934	; if not, branch
0001C8C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8CA 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C8D0 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C8D6                            
0001C8D6                            loc_19934:
0001C8D6 4EF9 0000 F6F8             		jmp	(SpeedToPos).l
0001C8DC                            ; ===========================================================================
0001C8DC                            
0001C8DC                            SEgg_PreLeap:
0001C8DC 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C8E0 6600                       		bne.s	loc_19954	; if time remains, branch
0001C8E2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8E6 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C8EC 5868 000C                  		addq.w	#4,obY(a0)
0001C8F0 317C 000F 003C             		move.w	#15,$3C(a0)
0001C8F6                            
0001C8F6                            loc_19954:
0001C8F6 60DE                       		bra.s	loc_19934
0001C8F8                            ; ===========================================================================
0001C8F8                            
0001C8F8                            SEgg_Leap:
0001C8F8 5368 003C                  		subq.w	#1,$3C(a0)
0001C8FC 6E00                       		bgt.s	loc_199D0
0001C8FE 6600                       		bne.s	loc_1996A
0001C900 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C906 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C90C                            
0001C90C                            loc_1996A:
0001C90C 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001C912 6E00                       		bgt.s	loc_19976
0001C914 4268 0010                  		clr.w	obVelX(a0)
0001C918                            
0001C918                            loc_19976:
0001C918 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C91E 4A68 0012                  		tst.w	obVelY(a0)
0001C922 6B00                       		bmi.s	SEgg_FindBlocks
0001C924 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001C92A 6500                       		bcs.s	SEgg_FindBlocks
0001C92C 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C932 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001C938 6500                       		bcs.s	SEgg_FindBlocks
0001C93A 317C 059B 000C             		move.w	#$59B,obY(a0)
0001C940 4268 0012                  		clr.w	obVelY(a0)
0001C944                            
0001C944                            SEgg_FindBlocks:
0001C944 3028 0010                  		move.w	obVelX(a0),d0
0001C948 8068 0012                  		or.w	obVelY(a0),d0
0001C94C 6600                       		bne.s	loc_199D0
0001C94E 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C952 703E                       		moveq	#$3E,d0
0001C954 7240                       		moveq	#$40,d1
0001C956                            
0001C956                            SEgg_FindLoop:	
0001C956 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C958 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C95C 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C960                            
0001C960 6600                       		bne.s	loc_199D0
0001C962 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C968 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C96C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C972                            
0001C972                            loc_199D0:
0001C972 6000 FF62                  		bra.w	loc_19934
0001C976                            ; ===========================================================================
0001C976                            
0001C976                            SEgg_Switch:	; Routine 4
0001C976 7000                       		moveq	#0,d0
0001C978 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C97C 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001C980 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001C984                            ; ===========================================================================
0001C984 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001C986 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001C988                            ; ===========================================================================
0001C988                            
0001C988                            loc_199E6:
0001C988 2268 0034                  		movea.l	$34(a0),a1
0001C98C 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001C992 6600                       		bne.s	SEgg_SwDisplay
0001C994 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C99A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C99E                            
0001C99E                            SEgg_SwDisplay:
0001C99E 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001C99E 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001C9A4                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001C9A4                            ; ---------------------------------------------------------------------------
0001C9A4                            ; Animation script - Eggman (SBZ2)
0001C9A4                            ; ---------------------------------------------------------------------------
0001C9A4 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001C9A6 0000                       		dc.w @laugh-Ani_SEgg
0001C9A8 0000                       		dc.w @jump1-Ani_SEgg
0001C9AA 0000                       		dc.w @intube-Ani_SEgg
0001C9AC 0000                       		dc.w @running-Ani_SEgg
0001C9AE 0000                       		dc.w @jump2-Ani_SEgg
0001C9B0 0000                       		dc.w @starjump-Ani_SEgg
0001C9B2 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001C9B6 00                         		even
0001C9B6 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001C9BA 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001C9C2 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001C9C6 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001C9CC 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001C9D2 00                         		even
0001C9D2 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001C9D6 00                         		even
0001C9D6 00                         		even
0001C9D6                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001C9D6                            ; ---------------------------------------------------------------------------
0001C9D6                            ; Sprite mappings - Eggman (SBZ2)
0001C9D6                            ; ---------------------------------------------------------------------------
0001C9D6                            Map_SEgg_internal:
0001C9D6 0000                       		dc.w @stand-Map_SEgg_internal
0001C9D8 0000                       		dc.w @laugh1-Map_SEgg_internal
0001C9DA 0000                       		dc.w @laugh2-Map_SEgg_internal
0001C9DC 0000                       		dc.w @jump1-Map_SEgg_internal
0001C9DE 0000                       		dc.w @jump2-Map_SEgg_internal
0001C9E0 0000                       		dc.w @surprise-Map_SEgg_internal
0001C9E2 0000                       		dc.w @starjump-Map_SEgg_internal
0001C9E4 0000                       		dc.w @running1-Map_SEgg_internal
0001C9E6 0000                       		dc.w @running2-Map_SEgg_internal
0001C9E8 0000                       		dc.w @intube-Map_SEgg_internal
0001C9EA 0000                       		dc.w @cockpit-Map_SEgg_internal
0001C9EC 03                         @stand:		dc.b 3
0001C9ED FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001C9F2 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C9F7 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C9FC 04                         @laugh1:	dc.b 4
0001C9FD E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001CA02 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CA07 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CA0C FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CA11 00                         		dc.b 0
0001CA12 04                         @laugh2:	dc.b 4
0001CA13 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001CA18 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001CA1D 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001CA22 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001CA27 00                         		dc.b 0
0001CA28 04                         @jump1:		dc.b 4
0001CA29 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001CA2E F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001CA33 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001CA38 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001CA3D 00                         		dc.b 0
0001CA3E 04                         @jump2:		dc.b 4
0001CA3F F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CA44 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CA49 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001CA4E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CA53 00                         		dc.b 0
0001CA54 04                         @surprise:	dc.b 4
0001CA55 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CA5A E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CA5F E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CA64 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CA69 00                         		dc.b 0
0001CA6A 07                         @starjump:	dc.b 7
0001CA6B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CA70 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CA75 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CA7A 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CA7F F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CA84 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001CA89 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001CA8E 05                         @running1:	dc.b 5
0001CA8F F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CA94 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CA99 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CA9E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CAA3 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CAA8 06                         @running2:	dc.b 6
0001CAA9 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001CAAE EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001CAB3 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001CAB8 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001CABD 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001CAC2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CAC7 00                         		dc.b 0
0001CAC8 08                         @intube:	dc.b 8
0001CAC9 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CACE E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CAD3 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CAD8 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CADD E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CAE2 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CAE7 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CAEC 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CAF1 03                         @cockpit:	dc.b 3
0001CAF2 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CAF7 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CAFC EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CB02 00                         		even
0001CB02 00                         		even
0001CB02                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CB02                            ; ---------------------------------------------------------------------------
0001CB02                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CB02                            ; ---------------------------------------------------------------------------
0001CB02                            
0001CB02                            FalseFloor:
0001CB02 7000                       		moveq	#0,d0
0001CB04 1028 0024                  		move.b	obRoutine(a0),d0
0001CB08 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CB0C 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CB10                            ; ===========================================================================
0001CB10 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CB12 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CB14 0000                       		dc.w loc_19C36-FFloor_Index
0001CB16 0000                       		dc.w loc_19C62-FFloor_Index
0001CB18 0000                       		dc.w loc_19C72-FFloor_Index
0001CB1A 0000                       		dc.w loc_19C80-FFloor_Index
0001CB1C                            ; ===========================================================================
0001CB1C                            
0001CB1C                            FFloor_Main:	; Routine 0
0001CB1C 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CB22 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CB28 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CB2E 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CB34 117C 0004 0001             		move.b	#4,obRender(a0)
0001CB3A 08E8 0007 0001             		bset	#7,obRender(a0)
0001CB40 7800                       		moveq	#0,d4
0001CB42 3A3C 2010                  		move.w	#$2010,d5
0001CB46 7C07                       		moveq	#7,d6
0001CB48 45E8 0030                  		lea	$30(a0),a2
0001CB4C                            
0001CB4C                            FFloor_MakeBlock:
0001CB4C 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001CB52 6600                       		bne.s	FFloor_ExitMake
0001CB54 34C9                       		move.w	a1,(a2)+
0001CB56 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CB5A 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CB62 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CB68 137C 0004 0001             		move.b	#4,obRender(a1)
0001CB6E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CB74 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CB7A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CB80 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CB84 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CB8A 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CB8E 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CB94 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CB98                            
0001CB98                            FFloor_ExitMake:
0001CB98 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB9C 4E75                       		rts	
0001CB9E                            ; ===========================================================================
0001CB9E                            
0001CB9E                            FFloor_ChkBreak:; Routine 2
0001CB9E 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CBA4 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CBA6 4228 001A                  		clr.b	obFrame(a0)
0001CBAA 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CBAE                            
0001CBAE                            FFloor_Solid:
0001CBAE 7000                       		moveq	#0,d0
0001CBB0 1028 001A                  		move.b	obFrame(a0),d0
0001CBB4 4400                       		neg.b	d0
0001CBB6 4880                       		ext.w	d0
0001CBB8 5040                       		addq.w	#8,d0
0001CBBA E940                       		asl.w	#4,d0
0001CBBC 383C 2100                  		move.w	#$2100,d4
0001CBC0 9840                       		sub.w	d0,d4
0001CBC2 1140 0014                  		move.b	d0,obActWid(a0)
0001CBC6 3144 0008                  		move.w	d4,obX(a0)
0001CBCA 720B                       		moveq	#$B,d1
0001CBCC D240                       		add.w	d0,d1
0001CBCE 7410                       		moveq	#$10,d2
0001CBD0 7611                       		moveq	#$11,d3
0001CBD2 4EF9 0001 1D62             		jmp	(SolidObject).l
0001CBD8                            ; ===========================================================================
0001CBD8                            
0001CBD8                            loc_19C36:	; Routine 4
0001CBD8 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CBDE 6400                       		bcc.s	FFloor_Solid2
0001CBE0 70FF                       		moveq	#-1,d0
0001CBE2 1028 001A                  		move.b	obFrame(a0),d0
0001CBE6 4880                       		ext.w	d0
0001CBE8 D040                       		add.w	d0,d0
0001CBEA 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CBEE 2240                       		movea.l	d0,a1
0001CBF0 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CBF6 5228 001A                  		addq.b	#1,obFrame(a0)
0001CBFA 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CC00 6700                       		beq.s	loc_19C62
0001CC02                            
0001CC02                            FFloor_Solid2:
0001CC02 60AA                       		bra.s	FFloor_Solid
0001CC04                            ; ===========================================================================
0001CC04                            
0001CC04                            loc_19C62:	; Routine 6
0001CC04 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CC0A 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CC10 6000 FBBC                  		bra.w	loc_1982C
0001CC14                            ; ===========================================================================
0001CC14                            
0001CC14                            loc_19C72:	; Routine 8
0001CC14 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CC1A 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CC1C 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001CC22                            ; ===========================================================================
0001CC22                            
0001CC22                            loc_19C80:	; Routine $A
0001CC22 4A28 0001                  		tst.b	obRender(a0)
0001CC26 6A00 FBA6                  		bpl.w	loc_1982C
0001CC2A 4EB9 0000 F6C0             		jsr	(ObjectFall).l
0001CC30 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001CC36                            ; ===========================================================================
0001CC36                            
0001CC36                            FFloor_Break:
0001CC36 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CC3A 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CC3E 7801                       		moveq	#1,d4
0001CC40 7203                       		moveq	#3,d1
0001CC42 7438                       		moveq	#$38,d2
0001CC44 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC48 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CC4E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CC54 43D0                       		lea	(a0),a1
0001CC56 6000                       		bra.s	FFloor_MakeFrag
0001CC58                            ; ===========================================================================
0001CC58                            
0001CC58                            FFloor_LoopFrag:
0001CC58 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001CC5E 6600                       		bne.s	FFloor_BreakSnd
0001CC60                            
0001CC60                            FFloor_MakeFrag:
0001CC60 45D0                       		lea	(a0),a2
0001CC62 47D1                       		lea	(a1),a3
0001CC64 7603                       		moveq	#3,d3
0001CC66                            
0001CC66                            loc_19CC4:
0001CC66 26DA                       		move.l	(a2)+,(a3)+
0001CC68 26DA                       		move.l	(a2)+,(a3)+
0001CC6A 26DA                       		move.l	(a2)+,(a3)+
0001CC6C 26DA                       		move.l	(a2)+,(a3)+
0001CC6E 51CB FFF6                  		dbf	d3,loc_19CC4
0001CC72                            
0001CC72 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CC76 361D                       		move.w	(a5)+,d3
0001CC78 D769 0008                  		add.w	d3,obX(a1)
0001CC7C 361D                       		move.w	(a5)+,d3
0001CC7E D769 000C                  		add.w	d3,obY(a1)
0001CC82 1344 001A                  		move.b	d4,obFrame(a1)
0001CC86 5244                       		addq.w	#1,d4
0001CC88 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CC8C                            
0001CC8C                            FFloor_BreakSnd:
0001CC96 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001CC9C                            ; ===========================================================================
0001CC9C 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CCA0 0120 00C0                  		dc.w $120, $C0
0001CCA4 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CCA8 0010 0000                  		dc.w $10, 0
0001CCAC 0000 0010                  		dc.w 0,	$10
0001CCB0 0010 0010                  		dc.w $10, $10
0001CCB0 0010 0010                  		dc.w $10, $10
0001CCB4                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CCB4                            ; ---------------------------------------------------------------------------
0001CCB4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CCB4                            ; ---------------------------------------------------------------------------
0001CCB4                            Map_FFloor_internal:
0001CCB4 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CCB6 0000                       		dc.w @topleft-Map_FFloor_internal
0001CCB8 0000                       		dc.w @topright-Map_FFloor_internal
0001CCBA 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CCBC 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CCBE 01                         @wholeblock:	dc.b 1
0001CCBF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CCC4 02                         @topleft:	dc.b 2
0001CCC5 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CCCA F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CCCF 00                         		dc.b 0
0001CCD0 02                         @topright:	dc.b 2
0001CCD1 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CCD6 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CCDB 00                         		dc.b 0
0001CCDC 02                         @bottomleft:	dc.b 2
0001CCDD F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CCE2 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CCE7 00                         		dc.b 0
0001CCE8 02                         @bottomright:	dc.b 2
0001CCE9 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CCEE F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CCF4 00                         		even
0001CCF4 00                         		even
0001CCF4                            		include	"_incObj\85 Boss - Final.asm"
0001CCF4                            ; ---------------------------------------------------------------------------
0001CCF4                            ; Object 85 - Eggman (FZ)
0001CCF4                            ; ---------------------------------------------------------------------------
0001CCF4                            
0001CCF4                            Obj85_Delete:
0001CCF4 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001CCFA                            ; ===========================================================================
0001CCFA                            
0001CCFA                            BossFinal:
0001CCFA 7000                       		moveq	#0,d0
0001CCFC 1028 0024                  		move.b	obRoutine(a0),d0
0001CD00 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CD04 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CD08                            ; ===========================================================================
0001CD08 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CD0A 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CD0C 0000                       		dc.w loc_1A38E-Obj85_Index
0001CD0E 0000                       		dc.w loc_1A346-Obj85_Index
0001CD10 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CD12 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CD14 0000                       		dc.w loc_1A264-Obj85_Index
0001CD16                            
0001CD16 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CD1C 0001 C9D6                  		dc.l Map_SEgg		; mappings pointer
0001CD20 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CD26 0000 0000                  		dc.l Map_EggCyl
0001CD2A 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CD30 0000 0000                  		dc.l Map_FZLegs
0001CD34 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CD3A 0001 C9D6                  		dc.l Map_SEgg
0001CD3E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CD44 0001 AC5E                  		dc.l Map_Eggman
0001CD48 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CD4E 0001 AC5E                  		dc.l Map_Eggman
0001CD52                            
0001CD52 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001CD57 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001CD5C 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001CD61 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001CD66 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001CD6B 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            Obj85_Main:	; Routine 0
0001CD70 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001CD74 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001CD78 2248                       		movea.l	a0,a1
0001CD7A 7205                       		moveq	#5,d1
0001CD7C 6000                       		bra.s	Obj85_LoadBoss
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            Obj85_Loop:
0001CD7E 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001CD84 6600                       		bne.s	loc_19E20
0001CD86                            
0001CD86                            Obj85_LoadBoss:
0001CD86 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CD8A 335A 0008                  		move.w	(a2)+,obX(a1)
0001CD8E 335A 000C                  		move.w	(a2)+,obY(a1)
0001CD92 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CD96 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CD9A 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CD9E 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CDA2 135B 0018                  		move.b	(a3)+,obPriority(a1)
0001CDA6 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CDAA 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CDAE 137C 0004 0001             		move.b	#4,obRender(a1)
0001CDB4 08E8 0007 0001             		bset	#7,obRender(a0)
0001CDBA 2348 0034                  		move.l	a0,$34(a1)
0001CDBE 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CDC2                            
0001CDC2                            loc_19E20:
0001CDC2 45E8 0036                  		lea	$36(a0),a2
0001CDC6 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001CDCC 6600                       		bne.s	loc_19E5A
0001CDCE 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CDD2 3489                       		move.w	a1,(a2)
0001CDD4 2348 0034                  		move.l	a0,$34(a1)
0001CDD8 45E8 0038                  		lea	$38(a0),a2
0001CDDC 7400                       		moveq	#0,d2
0001CDDE 7203                       		moveq	#3,d1
0001CDE0                            
0001CDE0                            loc_19E3E:
0001CDE0 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001CDE6 6600                       		bne.s	loc_19E5A
0001CDE8 34C9                       		move.w	a1,(a2)+
0001CDEA 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CDEE 2348 0034                  		move.l	a0,$34(a1)
0001CDF2 1342 0028                  		move.b	d2,obSubtype(a1)
0001CDF6 5442                       		addq.w	#2,d2
0001CDF8 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CDFC                            
0001CDFC                            loc_19E5A:
0001CDFC 317C 0000 0034             		move.w	#0,$34(a0)
0001CE02 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CE08 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CE0E                            
0001CE0E                            Obj85_Eggman:	; Routine 2
0001CE0E 7000                       		moveq	#0,d0
0001CE10 1028 0034                  		move.b	$34(a0),d0
0001CE14 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CE18 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CE1C 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001CE22                            ; ===========================================================================
0001CE22 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CE26 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CE2A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CE2E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CE32                            ; ===========================================================================
0001CE32                            
0001CE32                            loc_19E90:
0001CE32 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CE36 6600                       		bne.s	loc_19EA2
0001CE38 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CE3E 6500                       		bcs.s	loc_19EA2
0001CE40 5428 0034                  		addq.b	#2,$34(a0)
0001CE44                            
0001CE44                            loc_19EA2:
0001CE44 52B8 F636                  		addq.l	#1,(v_random).w
0001CE48 4E75                       		rts	
0001CE4A                            ; ===========================================================================
0001CE4A                            
0001CE4A                            loc_19EA8:
0001CE4A 4A68 0030                  		tst.w	$30(a0)
0001CE4E 6A00                       		bpl.s	loc_19F10
0001CE50 4268 0030                  		clr.w	$30(a0)
0001CE54 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001CE5A 0240 000C                  		andi.w	#$C,d0
0001CE5E 3200                       		move.w	d0,d1
0001CE60 5441                       		addq.w	#2,d1
0001CE62 4A80                       		tst.l	d0
0001CE64 6A00                       		bpl.s	loc_19EC6
0001CE66 C340                       		exg	d1,d0
0001CE68                            
0001CE68                            loc_19EC6:
0001CE68 43FA 0000                  		lea	word_19FD6(pc),a1
0001CE6C 3031 0000                  		move.w	(a1,d0.w),d0
0001CE70 3231 1000                  		move.w	(a1,d1.w),d1
0001CE74 3140 0030                  		move.w	d0,$30(a0)
0001CE78 74FF                       		moveq	#-1,d2
0001CE7A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CE7E 2242                       		movea.l	d2,a1
0001CE80 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CE86 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CE8C 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CE90 2242                       		movea.l	d2,a1
0001CE92 137C 0001 0029             		move.b	#1,$29(a1)
0001CE98 337C 0000 0030             		move.w	#0,$30(a1)
0001CE9E 317C 0001 0032             		move.w	#1,$32(a0)
0001CEA4 4228 0035                  		clr.b	$35(a0)
0001CEB2                            
0001CEB2                            loc_19F10:
0001CEB2 4A68 0032                  		tst.w	$32(a0)
0001CEB6 6B00 0000                  		bmi.w	loc_19FA6
0001CEBA 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CEC0 3038 D008                  		move.w	(v_player+obX).w,d0
0001CEC4 9068 0008                  		sub.w	obX(a0),d0
0001CEC8 6500                       		bcs.s	loc_19F2E
0001CECA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CED0                            
0001CED0                            loc_19F2E:
0001CED0 323C 002B                  		move.w	#$2B,d1
0001CED4 343C 0014                  		move.w	#$14,d2
0001CED8 363C 0014                  		move.w	#$14,d3
0001CEDC 3828 0008                  		move.w	obX(a0),d4
0001CEE0 4EB9 0001 1D62             		jsr	(SolidObject).l
0001CEE6 4A44                       		tst.w	d4
0001CEE8 6E00                       		bgt.s	loc_19F50
0001CEEA                            
0001CEEA                            loc_19F48:
0001CEEA 4A28 0035                  		tst.b	$35(a0)
0001CEEE 6600                       		bne.s	loc_19F88
0001CEF0 6000                       		bra.s	loc_19F96
0001CEF2                            ; ===========================================================================
0001CEF2                            
0001CEF2                            loc_19F50:
0001CEF2 5E78 F636                  		addq.w	#7,(v_random).w
0001CEF6 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CEFC 66EC                       		bne.s	loc_19F48
0001CEFE 303C 0300                  		move.w	#$300,d0
0001CF02 0828 0000 0022             		btst	#0,obStatus(a0)
0001CF08 6600                       		bne.s	loc_19F6A
0001CF0A 4440                       		neg.w	d0
0001CF0C                            
0001CF0C                            loc_19F6A:
0001CF0C 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CF10 4A28 0035                  		tst.b	$35(a0)
0001CF14 6600                       		bne.s	loc_19F88
0001CF16 5328 0021                  		subq.b	#1,obColProp(a0)
0001CF1A 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CF20 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CF26                            
0001CF26                            loc_19F88:
0001CF26 5328 0035                  		subq.b	#1,$35(a0)
0001CF2A 6700                       		beq.s	loc_19F96
0001CF2C 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CF32 6000                       		bra.s	loc_19F9C
0001CF34                            ; ===========================================================================
0001CF34                            
0001CF34                            loc_19F96:
0001CF34 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CF3A                            
0001CF3A                            loc_19F9C:
0001CF3A 43FA FA68                  		lea	Ani_SEgg(pc),a1
0001CF3E 4EF9 0000 C7F4             		jmp	(AnimateSprite).l
0001CF44                            ; ===========================================================================
0001CF44                            
0001CF44                            loc_19FA6:
0001CF44 4A28 0021                  		tst.b	obColProp(a0)
0001CF48 6700                       		beq.s	loc_19FBC
0001CF4A 5428 0034                  		addq.b	#2,$34(a0)
0001CF4E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CF54 4268 0032                  		clr.w	$32(a0)
0001CF58 4E75                       		rts	
0001CF5A                            ; ===========================================================================
0001CF5A                            
0001CF5A                            loc_19FBC:
0001CF5A 7064                       			moveq	#100,d0
0001CF5C 6100 0000                  			bsr.w	AddPoints
0001CF60 117C 0006 0034             		move.b	#6,$34(a0)
0001CF66 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001CF6C 317C 053C 000C             		move.w	#$53C,obY(a0)
0001CF72 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001CF78 4E75                       		rts	
0001CF7A                            ; ===========================================================================
0001CF7A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001CF8A                            ; ===========================================================================
0001CF8A                            
0001CF8A                            loc_19FE6:
0001CF8A 70FF                       		moveq	#-1,d0
0001CF8C 3028 0036                  		move.w	$36(a0),d0
0001CF90 2240                       		movea.l	d0,a1
0001CF92 4A68 0030                  		tst.w	$30(a0)
0001CF96 6A00                       		bpl.s	loc_1A000
0001CF98 4268 0030                  		clr.w	$30(a0)
0001CF9C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CFA2 6100                       		bsr.s	loc_1A020
0001CFA4                            
0001CFA4                            loc_1A000:
0001CFA4 700F                       		moveq	#$F,d0
0001CFA6 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CFAA 6600                       		bne.s	loc_1A00A
0001CFAC 6100                       		bsr.s	loc_1A020
0001CFAE                            
0001CFAE                            loc_1A00A:
0001CFAE 4A68 0032                  		tst.w	$32(a0)
0001CFB2 6700                       		beq.s	locret_1A01E
0001CFB4 5528 0034                  		subq.b	#2,$34(a0)
0001CFB8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFBE 4268 0032                  		clr.w	$32(a0)
0001CFC2                            
0001CFC2                            locret_1A01E:
0001CFC2 4E75                       		rts	
0001CFC4                            ; ===========================================================================
0001CFC4                            
0001CFC4                            loc_1A020:
0001CFCE                            ; ===========================================================================
0001CFCE                            
0001CFCE                            loc_1A02A:
0001CFCE 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001CFD4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CFDA 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001CFE0 117C 0006 001A             		move.b	#6,obFrame(a0)
0001CFE6 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CFEC 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001CFF2 6500                       		bcs.s	loc_1A070
0001CFF4 317C 059C 000C             		move.w	#$59C,obY(a0)
0001CFFA 5428 0034                  		addq.b	#2,$34(a0)
0001CFFE 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D004 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D00A 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D010 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D014                            
0001D014                            loc_1A070:
0001D014 6000 0000                  		bra.w	loc_1A166
0001D018                            ; ===========================================================================
0001D018                            
0001D018                            loc_1A074:
0001D018 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D01E 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D024 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001D02A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D030 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D036 6500                       		bcs.s	loc_1A09A
0001D038 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D03E                            
0001D03E                            loc_1A09A:
0001D03E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D044 3028 0008                  		move.w	obX(a0),d0
0001D048 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D04C 6A00                       		bpl.s	loc_1A0B4
0001D04E 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D054 6000 0000                  		bra.w	loc_1A0F2
0001D058                            ; ===========================================================================
0001D058                            
0001D058                            loc_1A0B4:
0001D058 0440 0070                  		subi.w	#$70,d0
0001D05C 6500                       		bcs.s	loc_1A0F2
0001D05E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D064 5140                       		subq.w	#8,d0
0001D066 6500                       		bcs.s	loc_1A0F2
0001D068 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D06E 5140                       		subq.w	#8,d0
0001D070 6500                       		bcs.s	loc_1A0F2
0001D072 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D078 5140                       		subq.w	#8,d0
0001D07A 6500                       		bcs.s	loc_1A0F2
0001D07C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D082 5140                       		subq.w	#8,d0
0001D084 6500                       		bcs.s	loc_1A0F2
0001D086 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D08C 0440 0038                  		subi.w	#$38,d0
0001D090 6500                       		bcs.s	loc_1A0F2
0001D092 4268 0010                  		clr.w	obVelX(a0)
0001D096                            
0001D096                            loc_1A0F2:
0001D096 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D09C 6500                       		bcs.s	loc_1A110
0001D09E 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D0A4 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D0AA 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D0B0 5428 0034                  		addq.b	#2,$34(a0)
0001D0B4                            
0001D0B4                            loc_1A110:
0001D0B4 6000                       		bra.s	loc_1A15C
0001D0B6                            ; ===========================================================================
0001D0B6                            
0001D0B6                            loc_1A112:
0001D0B6 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001D0BC 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D0C2 6500                       		bcs.s	loc_1A124
0001D0C4 4268 0010                  		clr.w	obVelX(a0)
0001D0C8                            
0001D0C8                            loc_1A124:
0001D0C8 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D0CE 4A68 0012                  		tst.w	obVelY(a0)
0001D0D2 6B00                       		bmi.s	loc_1A142
0001D0D4 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D0DA 6500                       		bcs.s	loc_1A142
0001D0DC 317C 0592 000C             		move.w	#$592,obY(a0)
0001D0E2 4268 0012                  		clr.w	obVelY(a0)
0001D0E6                            
0001D0E6                            loc_1A142:
0001D0E6 3028 0010                  		move.w	obVelX(a0),d0
0001D0EA 8068 0012                  		or.w	obVelY(a0),d0
0001D0EE 6600                       		bne.s	loc_1A15C
0001D0F0 5428 0034                  		addq.b	#2,$34(a0)
0001D0F4 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D0FA 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D100                            
0001D100                            loc_1A15C:
0001D100 43FA F8A2                  		lea	Ani_SEgg(pc),a1
0001D104 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001D10A                            
0001D10A                            loc_1A166:
0001D10A 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D110 6C00                       		bge.s	loc_1A172
0001D112 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D116                            
0001D116                            loc_1A172:
0001D116 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D11C 6C00                       		bge.s	locret_1A190
0001D11E 323C 001B                  		move.w	#$1B,d1
0001D122 343C 0070                  		move.w	#$70,d2
0001D126 363C 0071                  		move.w	#$71,d3
0001D12A 3828 0008                  		move.w	obX(a0),d4
0001D12E 4EF9 0001 1D62             		jmp	(SolidObject).l
0001D134                            ; ===========================================================================
0001D134                            
0001D134                            locret_1A190:
0001D134 4E75                       		rts	
0001D136                            ; ===========================================================================
0001D136                            
0001D136                            loc_1A192:
0001D136 217C 0001 AC5E 0004        		move.l	#Map_Eggman,obMap(a0)
0001D13E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D144 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D14A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D150 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001D156 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D15C 6400                       		bcc.s	loc_1A1D0
0001D15E 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D164 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D16A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D170 5428 0034                  		addq.b	#2,$34(a0)
0001D174                            
0001D174                            loc_1A1D0:
0001D174 6000 FF8A                  		bra.w	loc_1A15C
0001D178                            ; ===========================================================================
0001D178                            
0001D178                            loc_1A1D4:
0001D178 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D17E 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001D184 4A68 0030                  		tst.w	$30(a0)
0001D188 6600                       		bne.s	loc_1A1FC
0001D18A 4A28 0020                  		tst.b	obColType(a0)
0001D18E 6600                       		bne.s	loc_1A216
0001D190 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D196 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D19C                            
0001D19C                            loc_1A1FC:
0001D19C 5368 0030                  		subq.w	#1,$30(a0)
0001D1A0 6600                       		bne.s	loc_1A216
0001D1A2 4A28 0022                  		tst.b	obStatus(a0)
0001D1A6 6A00                       		bpl.s	loc_1A210
0001D1A8 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D1AE 6000                       		bra.s	loc_1A216
0001D1B0                            ; ===========================================================================
0001D1B0                            
0001D1B0                            loc_1A210:
0001D1B0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D1B6                            
0001D1B6                            loc_1A216:
0001D1B6 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D1BC 6D00                       		blt.s	loc_1A23A
0001D1BE 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D1C4 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D1CA 4278 D020                  		clr.w	(v_player+obInertia).w
0001D1CE 4A68 0012                  		tst.w	obVelY(a0)
0001D1D2 6A00                       		bpl.s	loc_1A248
0001D1D4 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D1DA                            
0001D1DA                            loc_1A23A:
0001D1DA 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D1E0 6D00                       		blt.s	loc_1A248
0001D1E2 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D1E8                            
0001D1E8                            loc_1A248:
0001D1E8 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D1EE 6500                       		bcs.s	loc_1A260
0001D1F0 4A28 0001                  		tst.b	obRender(a0)
0001D1F4 6B00                       		bmi.s	loc_1A260
0001D1F6 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D1FC 6000 FAF6                  		bra.w	Obj85_Delete
0001D200                            ; ===========================================================================
0001D200                            
0001D200                            loc_1A260:
0001D200 6000 FEFE                  		bra.w	loc_1A15C
0001D204                            ; ===========================================================================
0001D204                            
0001D204                            loc_1A264:	; Routine 4
0001D204 2268 0034                  		movea.l	$34(a0),a1
0001D208 1011                       		move.b	(a1),d0
0001D20A B010                       		cmp.b	(a0),d0
0001D20C 6600 FAE6                  		bne.w	Obj85_Delete
0001D210 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D216 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D21C 6C00                       		bge.s	loc_1A280
0001D21E 6000                       		bra.s	loc_1A2A6
0001D220                            ; ===========================================================================
0001D220                            
0001D220                            loc_1A280:
0001D220 4A69 0010                  		tst.w	obVelX(a1)
0001D224 6700                       		beq.s	loc_1A28C
0001D226 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D22C                            
0001D22C                            loc_1A28C:
0001D22C 43FA D9E0                  		lea	Ani_Eggman(pc),a1
0001D230 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001D236                            
0001D236                            loc_1A296:
0001D236 2268 0034                  		movea.l	$34(a0),a1
0001D23A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D240 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D246                            
0001D246                            loc_1A2A6:
0001D246 2268 0034                  		movea.l	$34(a0),a1
0001D24A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D250 7003                       		moveq	#3,d0
0001D252 C028 0022                  		and.b	obStatus(a0),d0
0001D256 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D25C 8128 0001                  		or.b	d0,obRender(a0)
0001D260 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001D266                            ; ===========================================================================
0001D266                            
0001D266                            loc_1A2C6:	; Routine 6
0001D266 2268 0034                  		movea.l	$34(a0),a1
0001D26A 1011                       		move.b	(a1),d0
0001D26C B010                       		cmp.b	(a0),d0
0001D26E 6600 FA84                  		bne.w	Obj85_Delete
0001D272 0CA9 0001 AC5E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D27A 6700                       		beq.s	loc_1A2E4
0001D27C 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D282 60C2                       		bra.s	loc_1A2A6
0001D284                            ; ===========================================================================
0001D284                            
0001D284                            loc_1A2E4:
0001D284 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D28A 4A29 0021                  		tst.b	obColProp(a1)
0001D28E 6F00                       		ble.s	loc_1A312
0001D290 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D296 217C 0001 AC5E 0004        		move.l	#Map_Eggman,obMap(a0)
0001D29E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D2A4 43FA D968                  		lea	Ani_Eggman(pc),a1
0001D2A8 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001D2AE 6000 FF86                  		bra.w	loc_1A296
0001D2B2                            ; ===========================================================================
0001D2B2                            
0001D2B2                            loc_1A312:
0001D2B2 4A28 0001                  		tst.b	1(a0)
0001D2B6 6A00 FA3C                  		bpl.w	Obj85_Delete
0001D2BA 6100 D4EA                  		bsr.w	BossDefeated
0001D2BE 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D2C4 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D2CA 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D2D2 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D2D8 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D2DC 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001D2E2 6000 FF52                  		bra.w	loc_1A296
0001D2E6                            ; ===========================================================================
0001D2E6                            
0001D2E6                            loc_1A346:	; Routine 8
0001D2E6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D2EC 2268 0034                  		movea.l	$34(a0),a1
0001D2F0 0CA9 0001 AC5E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D2F8 6700                       		beq.s	loc_1A35E
0001D2FA 6000 FF4A                  		bra.w	loc_1A2A6
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            loc_1A35E:
0001D2FE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D304 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D30A 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D30E 6600                       		bne.s	loc_1A376
0001D310 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D316                            
0001D316                            loc_1A376:
0001D316 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D31A 6E00                       		bgt.s	loc_1A38A
0001D31C 5228 001A                  		addq.b	#1,obFrame(a0)
0001D320 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D326 6E00 F9CC                  		bgt.w	Obj85_Delete
0001D32A                            
0001D32A                            loc_1A38A:
0001D32A 6000 FF0A                  		bra.w	loc_1A296
0001D32E                            ; ===========================================================================
0001D32E                            
0001D32E                            loc_1A38E:	; Routine $A
0001D32E 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D334 3038 D008                  		move.w	(v_player+obX).w,d0
0001D338 9068 0008                  		sub.w	obX(a0),d0
0001D33C 6500                       		bcs.s	loc_1A3A6
0001D33E 4A28 0001                  		tst.b	obRender(a0)
0001D342 6A00 F9B0                  		bpl.w	Obj85_Delete
0001D346                            
0001D346                            loc_1A3A6:
0001D346 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001D34C                            ; ===========================================================================
0001D34C                            
0001D34C                            loc_1A3AC:	; Routine $C
0001D34C 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D352 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D358 2268 0034                  		movea.l	$34(a0),a1
0001D35C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D362 6600                       		bne.s	loc_1A3D0
0001D364 0CA9 0001 AC5E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D36C 6700 F986                  		beq.w	Obj85_Delete
0001D370                            
0001D370                            loc_1A3D0:
0001D370 6000 FED4                  		bra.w	loc_1A2A6
0001D374                            		
0001D374                            BossModeMusic:
0001D374 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D37A 6600 0000                  		bne.w	NormalMode
0001D37E 4EF9 0000 0000             		jmp	PinchMode
0001D384                            
0001D384                            NormalMode:
0001D384 303C 00AC                  		move.w	#$AC,d0
0001D388 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D38E 4E75                       		rts
0001D390                            
0001D390                            PinchMode:
0001D390 303C 0094                  		move.w	#$94,d0
0001D394 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D39A 303C 00E2                  		move.w	#$E2,d0
0001D39E 4EB9 0000 124A             		jsr	(PlaySound).l
0001D3A4 4E75                       		rts		
0001D3A4 4E75                       		rts		
0001D3A6                            		include	"_anim\FZ Eggman in Ship.asm"
0001D3A6                            ; ---------------------------------------------------------------------------
0001D3A6                            ; Animation script - Eggman (FZ)
0001D3A6                            ; ---------------------------------------------------------------------------
0001D3A6 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D3A8 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D3AC                            		even
0001D3AC                            		even
0001D3AC                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D3AC                            ; ---------------------------------------------------------------------------
0001D3AC                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D3AC                            ; ---------------------------------------------------------------------------
0001D3AC                            Map_FZDamaged_internal:
0001D3AC 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D3AE 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D3B0 06                         @damage1:	dc.b 6
0001D3B1 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D3B6 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D3BB EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D3C0 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D3C5 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D3CA 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D3CF 06                         @damage2:	dc.b 6
0001D3D0 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D3D5 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D3DA EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D3DF FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D3E4 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D3E9 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D3EE                            		even
0001D3EE                            		even
0001D3EE                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D3EE                            ; ---------------------------------------------------------------------------
0001D3EE                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D3EE                            ; ---------------------------------------------------------------------------
0001D3EE                            Map_FZLegs_internal:
0001D3EE 0000                       		dc.w @extended-Map_FZLegs_internal
0001D3F0 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D3F2 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D3F4 02                         @extended:	dc.b 2
0001D3F5 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D3FA 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D3FF 03                         @halfway:	dc.b 3
0001D400 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D405 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D40A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D40F 02                         @retracted:	dc.b 2
0001D410 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D415 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D41A                            		even
0001D41A                            		even
0001D41A                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D41A                            ; ---------------------------------------------------------------------------
0001D41A                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D41A                            ; ---------------------------------------------------------------------------
0001D41A                            
0001D41A                            Obj84_Delete:
0001D41A 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001D420                            ; ===========================================================================
0001D420                            
0001D420                            EggmanCylinder:
0001D420 7000                       		moveq	#0,d0
0001D422 1028 0024                  		move.b	obRoutine(a0),d0
0001D426 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D42A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D42E                            ; ===========================================================================
0001D42E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D430 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D432 0000                       		dc.w loc_1A57E-Obj84_Index
0001D434                            
0001D434 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D438 2550 0620                  		dc.w $2550, $620
0001D43C 2490 04C0                  		dc.w $2490, $4C0
0001D440 2510 04C0                  		dc.w $2510, $4C0
0001D444                            ; ===========================================================================
0001D444                            
0001D444                            Obj84_Main:	; Routine
0001D444 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D448 7000                       		moveq	#0,d0
0001D44A 1028 0028                  		move.b	obSubtype(a0),d0
0001D44E D040                       		add.w	d0,d0
0001D450 D2C0                       		adda.w	d0,a1
0001D452 117C 0004 0001             		move.b	#4,obRender(a0)
0001D458 08E8 0007 0001             		bset	#7,obRender(a0)
0001D45E 08E8 0004 0001             		bset	#4,obRender(a0)
0001D464 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D46A 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D472 3159 0008                  		move.w	(a1)+,obX(a0)
0001D476 3151 000C                  		move.w	(a1),obY(a0)
0001D47A 3159 0038                  		move.w	(a1)+,$38(a0)
0001D47E 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D484 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D48A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D490 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D496 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D49C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D4A0                            
0001D4A0                            loc_1A4CE:	; Routine 2
0001D4A0 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D4A6 6F00                       		ble.s	loc_1A4DC
0001D4A8 08E8 0001 0001             		bset	#1,obRender(a0)
0001D4AE                            
0001D4AE                            loc_1A4DC:
0001D4AE 42A8 003C                  		clr.l	$3C(a0)
0001D4B2 4A28 0029                  		tst.b	$29(a0)
0001D4B6 6700                       		beq.s	loc_1A4EA
0001D4B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D4BC                            
0001D4BC                            loc_1A4EA:
0001D4BC 2028 003C                  		move.l	$3C(a0),d0
0001D4C0 2228 0038                  		move.l	$38(a0),d1
0001D4C4 D280                       		add.l	d0,d1
0001D4C6 4841                       		swap	d1
0001D4C8 3141 000C                  		move.w	d1,obY(a0)
0001D4CC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D4D2 6600                       		bne.s	loc_1A524
0001D4D4 4A68 0030                  		tst.w	$30(a0)
0001D4D8 6A00                       		bpl.s	loc_1A524
0001D4DA 70F6                       		moveq	#-$A,d0
0001D4DC 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D4E2 6F00                       		ble.s	loc_1A514
0001D4E4 700E                       		moveq	#$E,d0
0001D4E6                            
0001D4E6                            loc_1A514:
0001D4E6 D240                       		add.w	d0,d1
0001D4E8 2268 0034                  		movea.l	$34(a0),a1
0001D4EC 3341 000C                  		move.w	d1,obY(a1)
0001D4F0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D4F6                            
0001D4F6                            loc_1A524:
0001D4F6 323C 002B                  		move.w	#$2B,d1
0001D4FA 343C 0060                  		move.w	#$60,d2
0001D4FE 363C 0061                  		move.w	#$61,d3
0001D502 3828 0008                  		move.w	obX(a0),d4
0001D506 4EB9 0001 1D62             		jsr	(SolidObject).l
0001D50C 7000                       		moveq	#0,d0
0001D50E 3228 003C                  		move.w	$3C(a0),d1
0001D512 6A00                       		bpl.s	loc_1A550
0001D514 4441                       		neg.w	d1
0001D516 5141                       		subq.w	#8,d1
0001D518 6500                       		bcs.s	loc_1A55C
0001D51A 5200                       		addq.b	#1,d0
0001D51C E841                       		asr.w	#4,d1
0001D51E D041                       		add.w	d1,d0
0001D520 6000                       		bra.s	loc_1A55C
0001D522                            ; ===========================================================================
0001D522                            
0001D522                            loc_1A550:
0001D522 0441 0027                  		subi.w	#$27,d1
0001D526 6500                       		bcs.s	loc_1A55C
0001D528 5200                       		addq.b	#1,d0
0001D52A E841                       		asr.w	#4,d1
0001D52C D041                       		add.w	d1,d0
0001D52E                            
0001D52E                            loc_1A55C:
0001D52E 1140 001A                  		move.b	d0,obFrame(a0)
0001D532 3038 D008                  		move.w	(v_player+obX).w,d0
0001D536 9068 0008                  		sub.w	obX(a0),d0
0001D53A 6B00                       		bmi.s	loc_1A578
0001D53C 0440 0140                  		subi.w	#$140,d0
0001D540 6B00                       		bmi.s	loc_1A578
0001D542 4A28 0001                  		tst.b	obRender(a0)
0001D546 6A00 FED2                  		bpl.w	Obj84_Delete
0001D54A                            
0001D54A                            loc_1A578:
0001D54A 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001D550                            ; ===========================================================================
0001D550                            
0001D550                            loc_1A57E:	; Routine 4
0001D550 7000                       		moveq	#0,d0
0001D552 1028 0028                  		move.b	obSubtype(a0),d0
0001D556 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D55A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D55E 6000 FF5C                  		bra.w	loc_1A4EA
0001D562                            ; ===========================================================================
0001D562 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D564 0000                       		dc.w loc_1A598-off_1A590
0001D566 0000                       		dc.w loc_1A604-off_1A590
0001D568 0000                       		dc.w loc_1A604-off_1A590
0001D56A                            ; ===========================================================================
0001D56A                            
0001D56A                            loc_1A598:
0001D56A 4A28 0029                  		tst.b	$29(a0)
0001D56E 6600                       		bne.s	loc_1A5D4
0001D570 2268 0034                  		movea.l	$34(a0),a1
0001D574 4A29 0021                  		tst.b	obColProp(a1)
0001D578 6600                       		bne.s	loc_1A5B4
0001D57A 6100 D22A                  		bsr.w	BossDefeated
0001D57E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D586                            
0001D586                            loc_1A5B4:
0001D586 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D58E 6400                       		bcc.s	locret_1A602
0001D590 42A8 003C                  		clr.l	$3C(a0)
0001D594 2268 0034                  		movea.l	$34(a0),a1
0001D598 5369 0032                  		subq.w	#1,$32(a1)
0001D59C 4269 0030                  		clr.w	$30(a1)
0001D5A0 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D5A4 4E75                       		rts	
0001D5A6                            ; ===========================================================================
0001D5A6                            
0001D5A6                            loc_1A5D4:
0001D5A6 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D5AC 6C00                       		bge.s	loc_1A5E4
0001D5AE 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D5B6                            
0001D5B6                            loc_1A5E4:
0001D5B6 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D5BE 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D5C4 6E00                       		bgt.s	locret_1A602
0001D5C6 4268 003E                  		clr.w	$3E(a0)
0001D5CA 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D5D0 4228 0029                  		clr.b	$29(a0)
0001D5D4                            
0001D5D4                            locret_1A602:
0001D5D4 4E75                       		rts	
0001D5D6                            ; ===========================================================================
0001D5D6                            
0001D5D6                            loc_1A604:
0001D5D6 08E8 0001 0001             		bset	#1,obRender(a0)
0001D5DC 4A28 0029                  		tst.b	$29(a0)
0001D5E0 6600                       		bne.s	loc_1A646
0001D5E2 2268 0034                  		movea.l	$34(a0),a1
0001D5E6 4A29 0021                  		tst.b	obColProp(a1)
0001D5EA 6600                       		bne.s	loc_1A626
0001D5EC 6100 D1B8                  		bsr.w	BossDefeated
0001D5F0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D5F8                            
0001D5F8                            loc_1A626:
0001D5F8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D600 6400                       		bcc.s	locret_1A674
0001D602 42A8 003C                  		clr.l	$3C(a0)
0001D606 2268 0034                  		movea.l	$34(a0),a1
0001D60A 5369 0032                  		subq.w	#1,$32(a1)
0001D60E 4269 0030                  		clr.w	$30(a1)
0001D612 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D616 4E75                       		rts	
0001D618                            ; ===========================================================================
0001D618                            
0001D618                            loc_1A646:
0001D618 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D61E 6D00                       		blt.s	loc_1A656
0001D620 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D628                            
0001D628                            loc_1A656:
0001D628 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D630 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D636 6D00                       		blt.s	locret_1A674
0001D638 4268 003E                  		clr.w	$3E(a0)
0001D63C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D642 4228 0029                  		clr.b	$29(a0)
0001D646                            
0001D646                            locret_1A674:
0001D646 4E75                       		rts	
0001D646 4E75                       		rts	
0001D648                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D648                            ; --------------------------------------------------------------------------------
0001D648                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D648                            ; --------------------------------------------------------------------------------
0001D648                            
0001D648                            SME_SCUpI:	
0001D648 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D64C 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D650 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D654 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D658 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D65C 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D660 06                         SME_SCUpI_18:	dc.b 6	
0001D661 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D666 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D66B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D670 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D675 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D67A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D67F 08                         SME_SCUpI_37:	dc.b 8	
0001D680 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D685 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D68A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D68F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D694 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D699 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D69E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6A3 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6A8 0A                         SME_SCUpI_60:	dc.b $A	
0001D6A9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6AE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6B3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6B8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6BD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6C2 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6C7 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6CC F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D6D1 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6D6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6DB 0C                         SME_SCUpI_93:	dc.b $C	
0001D6DC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6E1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6E6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6EB B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6F0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6F5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6FA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6FF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D704 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D709 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D70E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D713 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D718 0D                         SME_SCUpI_D0:	dc.b $D	
0001D719 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D71E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D723 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D728 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D72D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D732 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D737 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D73C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D741 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D746 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D74B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D750 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D755 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D75A 0E                         SME_SCUpI_112:	dc.b $E	
0001D75B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D760 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D765 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D76A B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D76F B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D774 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D779 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D77E F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D783 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D788 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D78D 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D792 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D797 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D79C A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7A1 0E                         SME_SCUpI_159:	dc.b $E	
0001D7A2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7A7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7AC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7B1 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7B6 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7BB D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7C0 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7C5 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7CA F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7CF 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7D4 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7D9 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7DE 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7E3 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7E8 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D7E9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7EE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7F3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7F8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7FD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D802 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D807 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D80C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D811 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D816 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D81B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D820 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D825 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D82A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D82F 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D830 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D835 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D83A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D83F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D844 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D849 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D84E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D853 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D858 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D85D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D862 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D867 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D86C 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D871 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D876 0E                         SME_SCUpI_22E:	dc.b $E	
0001D877 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D87C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D881 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D886 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D88B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D890 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D895 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D89A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D89F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8A4 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8A9 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8AE 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D8B3 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D8B8 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8BD 0E                         SME_SCUpI_275:	dc.b $E	
0001D8BE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8C3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8C8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8CD B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8D2 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8D7 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8DC D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8E1 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8E6 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8EB 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8F0 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8F5 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D8FA 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D8FF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D904 02                         SME_SCUpI_2BC:	dc.b 2	
0001D905 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D90A 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D910 00                         		even
0001D910 00                         		even
0001D910                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D910                            ; ---------------------------------------------------------------------------
0001D910                            ; Object 86 - energy balls (FZ)
0001D910                            ; ---------------------------------------------------------------------------
0001D910                            
0001D910                            BossPlasma:
0001D910 7000                       		moveq	#0,d0
0001D912 1028 0024                  		move.b	obRoutine(a0),d0
0001D916 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D91A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D91E                            ; ===========================================================================
0001D91E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D920 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D922 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D924 0000                       		dc.w loc_1A962-Obj86_Index
0001D926 0000                       		dc.w loc_1A982-Obj86_Index
0001D928                            ; ===========================================================================
0001D928                            
0001D928                            Obj86_Main:	; Routine 0
0001D928 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D92E 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D934 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D93A 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D942 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D948 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D94E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D954 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D95A 117C 0004 0001             		move.b	#4,obRender(a0)
0001D960 08E8 0007 0001             		bset	#7,obRender(a0)
0001D966 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D96A                            
0001D96A                            Obj86_Generator:; Routine 2
0001D96A 2268 0034                  		movea.l	$34(a0),a1
0001D96E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001D974 6600                       		bne.s	loc_1A850
0001D976 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001D97A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001D980 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001D986                            ; ===========================================================================
0001D986                            
0001D986                            loc_1A850:
0001D986 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D98C 4A28 0029                  		tst.b	$29(a0)
0001D990 6700                       		beq.s	loc_1A86C
0001D992 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D996 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D99C 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001D9A2                            
0001D9A2                            loc_1A86C:
0001D9A2 323C 0013                  		move.w	#$13,d1
0001D9A6 343C 0008                  		move.w	#8,d2
0001D9AA 363C 0011                  		move.w	#$11,d3
0001D9AE 3828 0008                  		move.w	obX(a0),d4
0001D9B2 4EB9 0001 1D62             		jsr	(SolidObject).l
0001D9B8 3038 D008                  		move.w	(v_player+obX).w,d0
0001D9BC 9068 0008                  		sub.w	obX(a0),d0
0001D9C0 6B00                       		bmi.s	loc_1A89A
0001D9C2 0440 0140                  		subi.w	#$140,d0
0001D9C6 6B00                       		bmi.s	loc_1A89A
0001D9C8 4A28 0001                  		tst.b	obRender(a0)
0001D9CC 6A00 FA4C                  		bpl.w	Obj84_Delete
0001D9D0                            
0001D9D0                            loc_1A89A:
0001D9D0 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001D9D4 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001D9DA 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001D9E0                            ; ===========================================================================
0001D9E0                            
0001D9E0                            Obj86_MakeBalls:; Routine 4
0001D9E0 4A28 0029                  		tst.b	$29(a0)
0001D9E4 6700 0000                  		beq.w	loc_1A954
0001D9E8 4228 0029                  		clr.b	$29(a0)
0001D9EC D068 0030                  		add.w	$30(a0),d0
0001D9F0 0240 001E                  		andi.w	#$1E,d0
0001D9F4 D4C0                       		adda.w	d0,a2
0001D9F6 5868 0030                  		addq.w	#4,$30(a0)
0001D9FA 4268 0032                  		clr.w	$32(a0)
0001D9FE 7403                       		moveq	#3,d2
0001DA00                            
0001DA00                            Obj86_Loop:
0001DA00 4EB9 0000 FBAE             		jsr	(FindNextFreeObj).l
0001DA06 6600 0000                  		bne.w	loc_1A954
0001DA0A 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DA0E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DA14 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DA1A 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DA20 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DA26 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DA2E 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DA34 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DA3A 137C 0000 0020             		move.b	#0,obColType(a1)
0001DA40 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DA46 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DA4C 137C 0004 0001             		move.b	#4,obRender(a1)
0001DA52 08E9 0007 0001             		bset	#7,obRender(a1)
0001DA58 2348 0034                  		move.l	a0,$34(a1)
0001DA5C 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DA62 3228 0032                  		move.w	$32(a0),d1
0001DA66 C3FC FFB1                  		muls.w	#-$4F,d1
0001DA6A 0641 2578                  		addi.w	#$2578,d1
0001DA6E 0240 001F                  		andi.w	#$1F,d0
0001DA72 0440 0010                  		subi.w	#$10,d0
0001DA76 D041                       		add.w	d1,d0
0001DA78 3340 0030                  		move.w	d0,$30(a1)
0001DA7C 5268 0032                  		addq.w	#1,$32(a0)
0001DA80 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DA86 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DA8A                            
0001DA8A                            loc_1A954:
0001DA8A 4A68 0032                  		tst.w	$32(a0)
0001DA8E 6600                       		bne.s	loc_1A95E
0001DA90 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DA94                            
0001DA94                            loc_1A95E:
0001DA94 6000 FF0C                  		bra.w	loc_1A86C
0001DA98                            ; ===========================================================================
0001DA98                            
0001DA98                            loc_1A962:	; Routine 6
0001DA98 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DA9E 4A68 0038                  		tst.w	$38(a0)
0001DAA2 6600                       		bne.s	loc_1A97E
0001DAA4 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DAAA 2268 0034                  		movea.l	$34(a0),a1
0001DAAE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DAB4                            
0001DAB4                            loc_1A97E:
0001DAB4 6000 FEEC                  		bra.w	loc_1A86C
0001DAB8                            ; ===========================================================================
0001DAB8                            
0001DAB8                            loc_1A982:	; Routine 8
0001DAB8 7000                       		moveq	#0,d0
0001DABA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DABE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DAC2 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DAC6 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DACA 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001DAD0 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001DAD6                            ; ===========================================================================
0001DAD6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DAD8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DADA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DADC                            ; ===========================================================================
0001DADC                            
0001DADC                            loc_1A9A6:
0001DADC 3028 0030                  		move.w	$30(a0),d0
0001DAE0 9068 0008                  		sub.w	obX(a0),d0
0001DAE4 E940                       		asl.w	#4,d0
0001DAE6 3140 0010                  		move.w	d0,obVelX(a0)
0001DAEA 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DAF0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DAF4 4E75                       		rts	
0001DAF6                            ; ===========================================================================
0001DAF6                            
0001DAF6                            loc_1A9C0:
0001DAF6 4A68 0010                  		tst.w	obVelX(a0)
0001DAFA 6700                       		beq.s	loc_1A9E6
0001DAFC 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001DB02 3028 0008                  		move.w	obX(a0),d0
0001DB06 9068 0030                  		sub.w	$30(a0),d0
0001DB0A 6400                       		bcc.s	loc_1A9E6
0001DB0C 4268 0010                  		clr.w	obVelX(a0)
0001DB10 D168 0008                  		add.w	d0,obX(a0)
0001DB14 2268 0034                  		movea.l	$34(a0),a1
0001DB18 5369 0032                  		subq.w	#1,$32(a1)
0001DB1C                            
0001DB1C                            loc_1A9E6:
0001DB1C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB22 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DB26 6600                       		bne.s	locret_1AA1C
0001DB28 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DB2C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DB32 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DB38 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DB3E 7000                       		moveq	#0,d0
0001DB40 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB44 9068 0008                  		sub.w	obX(a0),d0
0001DB48 3140 0010                  		move.w	d0,obVelX(a0)
0001DB4C 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DB52                            
0001DB52                            locret_1AA1C:
0001DB52 4E75                       		rts	
0001DB54                            ; ===========================================================================
0001DB54                            
0001DB54                            loc_1AA1E:
0001DB54 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001DB5A 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DB60 6400                       		bcc.s	loc_1AA34
0001DB62 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DB66 6700                       		beq.s	loc_1AA34
0001DB68 4E75                       		rts	
0001DB6A                            ; ===========================================================================
0001DB6A                            
0001DB6A                            loc_1AA34:
0001DB6A 2268 0034                  		movea.l	$34(a0),a1
0001DB6E 5369 0038                  		subq.w	#1,$38(a1)
0001DB72 6000 F8A6                  		bra.w	Obj84_Delete
0001DB72 6000 F8A6                  		bra.w	Obj84_Delete
0001DB76                            		include	"_anim\Plasma Ball Launcher.asm"
0001DB76                            ; ---------------------------------------------------------------------------
0001DB76                            ; Animation script - energy ball launcher (FZ)
0001DB76                            ; ---------------------------------------------------------------------------
0001DB76 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DB78 0000                       		dc.w @redsparking-Ani_PLaunch
0001DB7A 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DB7C 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DB80 00                         		even
0001DB80 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DB86                            		even
0001DB86 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DB8C                            		even
0001DB8C                            		even
0001DB8C                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DB8C                            ; ---------------------------------------------------------------------------
0001DB8C                            ; Sprite mappings - energy ball	launcher (FZ)
0001DB8C                            ; ---------------------------------------------------------------------------
0001DB8C                            Map_PLaunch_internal:
0001DB8C 0000                       		dc.w @red-Map_PLaunch_internal
0001DB8E 0000                       		dc.w @white-Map_PLaunch_internal
0001DB90 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DB92 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DB94 01                         @red:		dc.b 1
0001DB95 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DB9A 01                         @white:		dc.b 1
0001DB9B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DBA0 01                         @sparking1:	dc.b 1
0001DBA1 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DBA6 01                         @sparking2:	dc.b 1
0001DBA7 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DBAC                            		even
0001DBAC                            		even
0001DBAC                            		include	"_anim\Plasma Balls.asm"
0001DBAC                            ; ---------------------------------------------------------------------------
0001DBAC                            ; Animation script - energy balls (FZ)
0001DBAC                            ; ---------------------------------------------------------------------------
0001DBAC 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DBAE 0000                       		dc.w @short-Ani_Plasma
0001DBB0 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DBBF 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DBCE 0A05 FF                    		dc.b $A, 5, afEnd
0001DBD2 00                         		even
0001DBD2 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DBDC                            		even
0001DBDC                            		even
0001DBDC                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DBDC                            ; ---------------------------------------------------------------------------
0001DBDC                            ; Sprite mappings - energy balls (FZ)
0001DBDC                            ; ---------------------------------------------------------------------------
0001DBDC                            Map_Plasma_internal:
0001DBDC 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DBDE 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DBE0 0000                       		dc.w @white1-Map_Plasma_internal
0001DBE2 0000                       		dc.w @white2-Map_Plasma_internal
0001DBE4 0000                       		dc.w @white3-Map_Plasma_internal
0001DBE6 0000                       		dc.w @white4-Map_Plasma_internal
0001DBE8 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DBEA 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DBEC 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DBEE 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DBF0 0000                       		dc.w @blank-Map_Plasma_internal
0001DBF2 02                         @fuzzy1:	dc.b 2
0001DBF3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DBF8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DBFD 02                         @fuzzy2:	dc.b 2
0001DBFE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DC03 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DC08 02                         @white1:	dc.b 2
0001DC09 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DC0E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DC13 02                         @white2:	dc.b 2
0001DC14 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DC19 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DC1E 02                         @white3:	dc.b 2
0001DC1F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DC24 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DC29 02                         @white4:	dc.b 2
0001DC2A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DC2F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DC34 01                         @fuzzy3:	dc.b 1
0001DC35 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DC3A 01                         @fuzzy4:	dc.b 1
0001DC3B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DC40 02                         @fuzzy5:	dc.b 2
0001DC41 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DC46 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DC4B 02                         @fuzzy6:	dc.b 2
0001DC4C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DC51 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DC56 00                         @blank:		dc.b 0
0001DC58 00                         		even
0001DC58 00                         		even
0001DC58                            
0001DC58                            		include	"_incObj\3E Prison Capsule.asm"
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            ; Object 3E - prison capsule
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            
0001DC58                            Prison:
0001DC58 7000                       		moveq	#0,d0
0001DC5A 1028 0024                  		move.b	obRoutine(a0),d0
0001DC5E 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DC62 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DC82 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001DC88                            
0001DC88                            	@delete:
0001DC88 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001DC8E                            ; ===========================================================================
0001DC8E 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DC90 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DC92 0000                       		dc.w Pri_Switched-Pri_Index
0001DC94 0000                       		dc.w Pri_Explosion-Pri_Index
0001DC96 0000                       		dc.w Pri_Explosion-Pri_Index
0001DC98 0000                       		dc.w Pri_Explosion-Pri_Index
0001DC9A 0000                       		dc.w Pri_Animals-Pri_Index
0001DC9C 0000                       		dc.w Pri_EndAct-Pri_Index
0001DC9E                            
0001DC9E =00000030                  pri_origY:	equ $30		; original y-axis position
0001DC9E                            
0001DC9E 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DCA2 040C 0501                  		dc.b 4,	$C, 5, 1
0001DCA6 0610 0403                  		dc.b 6,	$10, 4,	3
0001DCAA 0810 0305                  		dc.b 8,	$10, 3,	5
0001DCAE                            ; ===========================================================================
0001DCAE                            
0001DCAE                            Pri_Main:	; Routine 0
0001DCAE 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DCB6 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DCBC 117C 0004 0001             		move.b	#4,obRender(a0)
0001DCC2 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DCC8 7000                       		moveq	#0,d0
0001DCCA 1028 0028                  		move.b	obSubtype(a0),d0
0001DCCE E548                       		lsl.w	#2,d0
0001DCD0 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DCD4 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DCD8 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DCDC 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DCE0 3028 0018                  		move.w obPriority(a0),d0 
0001DCE4 E248                       		lsr.w #1,d0 
0001DCE6 0240 0380                  		andi.w #$380,d0 
0001DCEA 3140 0018                  		move.w d0,obPriority(a0)		
0001DCEE 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DCF2 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DCF6 6600                       		bne.s	@not02		; if not, branch
0001DCF8                            
0001DCF8 117C 0006 0020             		move.b	#6,obColType(a0)
0001DCFE 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DD04                            
0001DD04                            	@not02:
0001DD04 4E75                       		rts	
0001DD06                            ; ===========================================================================
0001DD06                            
0001DD06                            Pri_BodyMain:	; Routine 2
0001DD06 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DD0C 6700                       		beq.s	@chkopened
0001DD0E 323C 002B                  		move.w	#$2B,d1
0001DD12 343C 0018                  		move.w	#$18,d2
0001DD16 363C 0018                  		move.w	#$18,d3
0001DD1A 3828 0008                  		move.w	obX(a0),d4
0001DD1E 4EF9 0001 1D62             		jmp	(SolidObject).l
0001DD24                            ; ===========================================================================
0001DD24                            
0001DD24                            @chkopened:
0001DD24 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DD28 6700                       		beq.s	@open		; if yes, branch
0001DD2A 4228 0025                  		clr.b	ob2ndRout(a0)
0001DD2E 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DD34 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DD3A                            
0001DD3A                            	@open:
0001DD3A 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DD40 4E75                       		rts	
0001DD42                            ; ===========================================================================
0001DD42                            
0001DD42                            Pri_Switched:	; Routine 4
0001DD42 323C 0017                  		move.w	#$17,d1
0001DD46 343C 0008                  		move.w	#8,d2
0001DD4A 363C 0008                  		move.w	#8,d3
0001DD4E 3828 0008                  		move.w	obX(a0),d4
0001DD52 4EB9 0001 1D62             		jsr	(SolidObject).l
0001DD58 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DD5E 4EB9 0000 C7F4             		jsr	(AnimateSprite).l
0001DD64 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DD6A 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DD6E 6700                       		beq.s	@open2		; if yes, branch
0001DD70                            
0001DD70 5068 000C                  		addq.w	#8,obY(a0)
0001DD74 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DD7A 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DD80 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DD84 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DD88 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DD8E 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DD94 4228 0025                  		clr.b	ob2ndRout(a0)
0001DD98 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DD9E 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DDA4                            
0001DDA4                            	@open2:
0001DDA4 4E75                       		rts	
0001DDA6                            ; ===========================================================================
0001DDA6                            
0001DDA6                            Pri_Explosion:	; Routine 6, 8, $A
0001DDA6 7007                       		moveq	#7,d0
0001DDA8 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DDAC 6600                       		bne.s	@noexplosion
0001DDAE 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001DDB4 6600                       		bne.s	@noexplosion
0001DDB6 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DDBA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DDC0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DDC6 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DDCC 7200                       		moveq	#0,d1
0001DDCE 1200                       		move.b	d0,d1
0001DDD0 E409                       		lsr.b	#2,d1
0001DDD2 0441 0020                  		subi.w	#$20,d1
0001DDD6 D369 0008                  		add.w	d1,obX(a1)
0001DDDA E048                       		lsr.w	#8,d0
0001DDDC E608                       		lsr.b	#3,d0
0001DDDE D169 000C                  		add.w	d0,obY(a1)
0001DDE2                            
0001DDE2                            	@noexplosion:
0001DDE2 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DDE6 6700                       		beq.s	@makeanimal
0001DDE8 4E75                       		rts	
0001DDEA                            ; ===========================================================================
0001DDEA                            
0001DDEA                            @makeanimal:
0001DDEA 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DDF0 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DDF6 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DDFC 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DE02 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DE08 7C07                       		moveq	#7,d6
0001DE0A 3A3C 009A                  		move.w	#$9A,d5
0001DE0E 78E4                       		moveq	#-$1C,d4
0001DE10                            
0001DE10                            	@loop:
0001DE10 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001DE16 6600                       		bne.s	@fail
0001DE18 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DE1C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE22 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE28 D969 0008                  		add.w	d4,obX(a1)
0001DE2C 5E44                       		addq.w	#7,d4
0001DE2E 3345 0036                  		move.w	d5,$36(a1)
0001DE32 5145                       		subq.w	#8,d5
0001DE34 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DE38                            
0001DE38                            	@fail:
0001DE38 4E75                       		rts	
0001DE3A                            ; ===========================================================================
0001DE3A                            
0001DE3A                            Pri_Animals:	; Routine $C
0001DE3A 7007                       		moveq	#7,d0
0001DE3C C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DE40 6600                       		bne.s	@noanimal
0001DE42 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001DE48 6600                       		bne.s	@noanimal
0001DE4A 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DE4E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE54 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE5A 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DE60 0240 001F                  		andi.w	#$1F,d0
0001DE64 5D40                       		subq.w	#6,d0
0001DE66 4A41                       		tst.w	d1
0001DE68 6A00                       		bpl.s	@ispositive
0001DE6A 4440                       		neg.w	d0
0001DE6C                            
0001DE6C                            	@ispositive:
0001DE6C D169 0008                  		add.w	d0,obX(a1)
0001DE70 337C 000C 0036             		move.w	#$C,$36(a1)
0001DE76                            
0001DE76                            	@noanimal:
0001DE76 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DE7A 6600                       		bne.s	@wait
0001DE7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DE80 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DE86                            
0001DE86                            	@wait:
0001DE86 4E75                       		rts	
0001DE88                            ; ===========================================================================
0001DE88                            
0001DE88                            Pri_EndAct:	; Routine $E
0001DE88 703E                       		moveq	#$3E,d0
0001DE8A 7228                       		moveq	#id_Animals,d1
0001DE8C 7440                       		moveq	#$40,d2
0001DE8E 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DE92                            
0001DE92                            	@findanimal:
0001DE92 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DE94 6700                       		beq.s	@found		; if yes, branch
0001DE96 D2C2                       		adda.w	d2,a1		; next object RAM
0001DE98 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DE9C                            
0001DE9C 4EB9 0001 0E38             		jsr	(GotThroughAct1).l
0001DEA2 4EF9 0000 F74C             		jmp	(DeleteObject).l
0001DEA8                            
0001DEA8                            	@found:
0001DEA8 4E75                       		rts	
0001DEA8 4E75                       		rts	
0001DEAA                            		include	"_anim\Prison Capsule.asm"
0001DEAA                            ; ---------------------------------------------------------------------------
0001DEAA                            ; Animation script - prison capsule
0001DEAA                            ; ---------------------------------------------------------------------------
0001DEAA 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DEAC 0000                       		dc.w @switchflash-Ani_Pri
0001DEAE 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DEB2                            		even
0001DEB2                            		even
0001DEB2                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DEB2                            ; ---------------------------------------------------------------------------
0001DEB2                            ; Sprite mappings - prison capsule
0001DEB2                            ; ---------------------------------------------------------------------------
0001DEB2                            Map_Pri_internal:
0001DEB2 0000                       		dc.w @capsule-Map_Pri_internal
0001DEB4 0000                       		dc.w @switch1-Map_Pri_internal
0001DEB6 0000                       		dc.w @broken-Map_Pri_internal
0001DEB8 0000                       		dc.w @switch2-Map_Pri_internal
0001DEBA 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DEBC 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DEBE 0000                       		dc.w @blank-Map_Pri_internal
0001DEC0 07                         @capsule:	dc.b 7
0001DEC1 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DEC6 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DECB E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DED0 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DED5 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DEDA 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DEDF 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DEE4 01                         @switch1:	dc.b 1
0001DEE5 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DEEA 06                         @broken:	dc.b 6
0001DEEB 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DEF0 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DEF5 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DEFA 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DEFF 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DF04 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DF09 01                         @switch2:	dc.b 1
0001DF0A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DF0F 02                         @unusedthing1:	dc.b 2
0001DF10 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DF15 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DF1A 01                         @unusedthing2:	dc.b 1
0001DF1B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DF20 00                         @blank:		dc.b 0
0001DF22 00                         		even
0001DF22 00                         		even
0001DF22                            
0001DF22                            		include	"_incObj\sub ReactToItem.asm"
0001DF22                            ; ---------------------------------------------------------------------------
0001DF22                            ; Subroutine to react to obColType(a0)
0001DF22                            ; ---------------------------------------------------------------------------
0001DF22                            
0001DF22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF22                            
0001DF22                            
0001DF22                            ReactToItem:
0001DF22 4E71                       		nop	
0001DF24 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DF28 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DF2C 5142                       		subq.w	#8,d2
0001DF2E 7A00                       		moveq	#0,d5
0001DF30 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DF34 5705                       		subq.b	#3,d5
0001DF36 9645                       		sub.w	d5,d3
0001DF38 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DF3E 6600                       		bne.s	@notducking	; if not, branch
0001DF40 0643 000C                  		addi.w	#$C,d3
0001DF44 7A0A                       		moveq	#$A,d5
0001DF46                            
0001DF46                            	@notducking:
0001DF46 383C 0010                  		move.w	#$10,d4
0001DF4A DA45                       		add.w	d5,d5
0001DF4C 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DF50 3C3C 005F                  		move.w	#$5F,d6
0001DF54                            
0001DF54                            @loop:
0001DF54 4A29 0001                  		tst.b	obRender(a1)
0001DF58 6A00                       		bpl.s	@next
0001DF5A 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DF5E 6600                       		bne.s	@proximity	; if nonzero, branch
0001DF60                            
0001DF60                            	@next:
0001DF60 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DF64 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001DF68                            
0001DF68 7000                       		moveq	#0,d0
0001DF6A 4E75                       		rts	
0001DF6C                            ; ===========================================================================
0001DF6C                            @sizes:		;   width, height
0001DF6C 1414                       		dc.b  $14, $14		; $01
0001DF6E 0C14                       		dc.b   $C, $14		; $02
0001DF70 140C                       		dc.b  $14,  $C		; $03
0001DF72 0410                       		dc.b	4, $10		; $04
0001DF74 0C12                       		dc.b   $C, $12		; $05
0001DF76 1010                       		dc.b  $10, $10		; $06
0001DF78 0606                       		dc.b	6,   6		; $07
0001DF7A 180C                       		dc.b  $18,  $C		; $08
0001DF7C 0C10                       		dc.b   $C, $10		; $09
0001DF7E 100C                       		dc.b  $10,  $C		; $0A
0001DF80 0808                       		dc.b	8,   8		; $0B
0001DF82 1410                       		dc.b  $14, $10		; $0C
0001DF84 1408                       		dc.b  $14,   8		; $0D
0001DF86 0E0E                       		dc.b   $E,  $E		; $0E
0001DF88 1818                       		dc.b  $18, $18		; $0F
0001DF8A 2810                       		dc.b  $28, $10		; $10
0001DF8C 1018                       		dc.b  $10, $18		; $11
0001DF8E 0810                       		dc.b	8, $10		; $12
0001DF90 2070                       		dc.b  $20, $70		; $13
0001DF92 4020                       		dc.b  $40, $20		; $14
0001DF94 8020                       		dc.b  $80, $20		; $15
0001DF96 2020                       		dc.b  $20, $20		; $16
0001DF98 0808                       		dc.b	8,   8		; $17
0001DF9A 0404                       		dc.b	4,   4		; $18
0001DF9C 2008                       		dc.b  $20,   8		; $19
0001DF9E 0C0C                       		dc.b   $C,  $C		; $1A
0001DFA0 0804                       		dc.b	8,   4		; $1B
0001DFA2 1804                       		dc.b  $18,   4		; $1C
0001DFA4 2804                       		dc.b  $28,   4		; $1D
0001DFA6 0408                       		dc.b	4,   8		; $1E
0001DFA8 0418                       		dc.b	4, $18		; $1F
0001DFAA 0428                       		dc.b	4, $28		; $20
0001DFAC 0420                       		dc.b	4, $20		; $21
0001DFAE 1818                       		dc.b  $18, $18		; $22
0001DFB0 0C18                       		dc.b   $C, $18		; $23
0001DFB2 4808                       		dc.b  $48,   8		; $24
0001DFB4                            ; ===========================================================================
0001DFB4                            
0001DFB4                            @proximity:
0001DFB4 0240 003F                  		andi.w	#$3F,d0
0001DFB8 D040                       		add.w	d0,d0
0001DFBA 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001DFBE 7200                       		moveq	#0,d1
0001DFC0 121A                       		move.b	(a2)+,d1
0001DFC2 3029 0008                  		move.w	obX(a1),d0
0001DFC6 9041                       		sub.w	d1,d0
0001DFC8 9042                       		sub.w	d2,d0
0001DFCA 6400                       		bcc.s	@outsidex	; branch if not touching
0001DFCC D241                       		add.w	d1,d1
0001DFCE D041                       		add.w	d1,d0
0001DFD0 6500                       		bcs.s	@withinx	; branch if touching
0001DFD2 6000 FF8C                  		bra.w	@next
0001DFD6                            ; ===========================================================================
0001DFD6                            
0001DFD6                            @outsidex:
0001DFD6 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DFDA B044                       		cmp.w	d4,d0
0001DFDC 6200 FF82                  		bhi.w	@next
0001DFE0                            
0001DFE0                            @withinx:
0001DFE0 7200                       		moveq	#0,d1
0001DFE2 121A                       		move.b	(a2)+,d1
0001DFE4 3029 000C                  		move.w	obY(a1),d0
0001DFE8 9041                       		sub.w	d1,d0
0001DFEA 9043                       		sub.w	d3,d0
0001DFEC 6400                       		bcc.s	@outsidey	; branch if not touching
0001DFEE D241                       		add.w	d1,d1
0001DFF0 D240                       		add.w	d0,d1
0001DFF2 6500                       		bcs.s	@withiny	; branch if touching
0001DFF4 6000 FF6A                  		bra.w	@next
0001DFF8                            
0001DFF8                            ; ===========================================================================
0001DFF8                            
0001DFF8                            @outsidey:
0001DFF8 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DFFC B045                       		cmp.w	d5,d0
0001DFFE 6200 FF60                  		bhi.w	@next
0001E002                            
0001E002                            @withiny:
0001E002                            	@chktype:
0001E002 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E008 6600 0000                          	bne	NotGHZReact  ;TIS
0001E00C 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E010 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E014 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E018 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E01C 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E020 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E024 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E028                            NotGHZReact:                      ;TIS
0001E028 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E02C 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E030 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E034 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E038 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E03C 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E03E 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E042                            
0001E042                            ; obColType is $40-$7F (powerups)
0001E042                            
0001E042 1029 0020                  		move.b	obColType(a1),d0
0001E046 0200 003F                  		andi.b	#$3F,d0
0001E04A 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E04E 6700                       		beq.s	React_Monitor	; if yes, branch
0001E050 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E056 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E05A 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E05E                            
0001E05E                            	@invincible:
0001E05E 4E75                       		rts	
0001E060                            ; ===========================================================================
0001E060                            
0001E060                            React_Monitor:
0001E060 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E064 6A00                       		bpl.s	@movingdown	; if not, branch
0001E066                            
0001E066 3028 000C                  		move.w	obY(a0),d0
0001E06A 0440 0010                  		subi.w	#$10,d0
0001E06E B069 000C                  		cmp.w	obY(a1),d0
0001E072 6500                       		bcs.s	@donothing
0001E074 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E078 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E07E 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E082 6600                       		bne.s	@donothing
0001E084 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E088 4E75                       		rts	
0001E08A                            ; ===========================================================================
0001E08A                            
0001E08A                            @movingdown:
0001E08A 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E090 6600                       		bne.s	@donothing
0001E092 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E096 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E09A                            
0001E09A                            	@donothing:
0001E09A 4E75                       		rts	
0001E09C                            ; ===========================================================================
0001E09C                            
0001E09C                            React_Enemy:
0001E09C 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E0A0 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E0A2 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E0A8 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E0AC 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E0B2 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E0B6                            
0001E0B6                            	@donthurtsonic:
0001E0B6 4A29 0021                  		tst.b	obColProp(a1)
0001E0BA 6700                       		beq.s	breakenemy
0001E0BC                            
0001E0BC 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E0C0 4468 0012                  		neg.w	obVelY(a0)
0001E0C4 E0E8 0010                  		asr	obVelX(a0)
0001E0C8 E0E8 0012                  		asr	obVelY(a0)
0001E0CC 137C 0000 0020             		move.b	#0,obColType(a1)
0001E0D2 5329 0021                  		subq.b	#1,obColProp(a1)
0001E0D6 6600                       		bne.s	@flagnotclear
0001E0D8 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E0DE                            
0001E0DE                            	@flagnotclear:
0001E0DE 4E75                       		rts	
0001E0E0                            ; ===========================================================================
0001E0E0                            
0001E0E0                            breakenemy:
0001E0E0 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E0E6 7000                       		moveq	#0,d0
0001E0E8 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E0EC 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E0F0 0C40 0006                  		cmpi.w	#6,d0
0001E0F4 6500                       		bcs.s	@bonusokay
0001E0F6 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E0F8                            
0001E0F8                            	@bonusokay:
0001E0F8 3340 003E                  		move.w	d0,$3E(a1)
0001E0FC 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E100 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E106 6500                       		bcs.s	@lessthan16	; if not, branch
0001E108 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E10C 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E112                            
0001E112                            	@lessthan16:
0001E112 6100 0000                  		bsr.w	AddPoints
0001E116 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E11A 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E120 4A68 0012                  		tst.w	obVelY(a0)
0001E124 6B00                       		bmi.s	@bouncedown
0001E126 3028 000C                  		move.w	obY(a0),d0
0001E12A B069 000C                  		cmp.w	obY(a1),d0
0001E12E 6400                       		bcc.s	@bounceup
0001E130 4468 0012                  		neg.w	obVelY(a0)
0001E134 4E75                       		rts	
0001E136                            ; ===========================================================================
0001E136                            
0001E136                            	@bouncedown:
0001E136 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E13C 4E75                       		rts	
0001E13E                            
0001E13E                            	@bounceup:
0001E13E 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E144 4E75                       		rts	
0001E146                            
0001E146 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E14E                            
0001E14E                            ; ===========================================================================
0001E14E                            
0001E14E                            React_Caterkiller:
0001E14E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E154                            
0001E154                            React_ChkHurt:
0001E154 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E158 6700                       		beq.s	notinvincible	; if not, branch
0001E15A                            
0001E15A                            	isflashing:
0001E15A 70FF                       		moveq	#-1,d0
0001E15C 4E75                       		rts	
0001E15E                            ; ===========================================================================
0001E15E                            
0001E15E                            	notinvincible:
0001E15E 4E71                       		nop	
0001E160 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E164 66F4                       		bne.s	isflashing	; if yes, branch
0001E166 2449                       		movea.l	a1,a2
0001E168                            
0001E168                            ; End of function ReactToItem
0001E168                            ; continue straight to HurtSonic
0001E168                            
0001E168                            ; ---------------------------------------------------------------------------
0001E168                            ; Hurting Sonic	subroutine
0001E168                            ; ---------------------------------------------------------------------------
0001E168                            
0001E168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E168                            
0001E168                            
0001E168                            HurtSonic:
0001E168 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E16C 6600                       		bne.s	@hasshield	; if yes, branch
0001E16E 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E172 6600                       		bne.s	@hasshield	; if yes, branch
0001E174 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E178 6600                       		bne.s	@hasshield	; if yes, branch
0001E17A 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E17E 6700 0000                  		beq.w	@norings	; if not, branch
0001E182                            
0001E182 4EB9 0000 FB98             		jsr	(FindFreeObj).l
0001E188 6600                       		bne.s	@hasshield
0001E18A 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E18E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E194 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E19A                            
0001E19A                            	@hasshield:
0001E19A 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E1A0 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E1A2 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E1A6 6700 FFB2                  		beq.w	isflashing
0001E1AA 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E1AE 6700 FFAA                  		beq.w	isflashing
0001E1B2                            
0001E1B2                            	@hasrshield:
0001E1B2 0C38 0001 F5C8             		cmpi.b	#1,(v_rshield).w     ; does sonic have a Red Shield?
0001E1B8 6600                       		bne.s	@hasgshield          ; if no, check for gray shield
0001E1BA 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E1BE 6700 FF9A                  		beq.w 	isflashing
0001E1C2 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E1C6 6700 FF92                  		beq.w 	isflashing
0001E1CA 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E1CE 6700 FF8A                  		beq.w 	isflashing
0001E1D2 0C12 004E                  		cmpi.b	#$4E,(a2)	; was damage caused by wall of lava?
0001E1D6 6700 FF82                  		beq.w 	isflashing
0001E1DA 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E1DE 6700 FF7A                  		beq.w 	isflashing
0001E1E2 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E1E6 6700 FF72                  		beq.w 	isflashing
0001E1EA 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E1EE 6700 FF6A                  		beq.w 	isflashing
0001E1F2 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E1F6 6700 FF62                  		beq.w 	isflashing
0001E1FA 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E1FE 6700 FF5A                  		beq.w 	isflashing
0001E202                            		
0001E202                            	@hasgshield:
0001E202 0C38 0001 F5C9             		cmpi.b	#1,(v_gshield).w     ; does sonic have a Gray Shield?
0001E208 6600                       		bne.s	@hurtcont             ; if yes, make him invulnerable to metal objects
0001E20A 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E20E 6700 FF4A                  		beq.w 	isflashing
0001E212 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E216 6700 FF42                  		beq.w 	isflashing
0001E21A 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E21E 6700 FF3A                  		beq.w 	isflashing
0001E222 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E226 6700 FF32                  		beq.w 	isflashing
0001E22A 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E22E 6700 FF2A                  		beq.w 	isflashing
0001E232 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E236 6700 FF22                  		beq.w 	isflashing
0001E23A 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E23E 6700 FF1A                  		beq.w 	isflashing
0001E242 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E246 6700 FF12                  		beq.w 	isflashing
0001E24A 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E24E 6700 FF0A                  		beq.w 	isflashing
0001E252 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E256 6700 FE88                  		beq.w 	breakenemy
0001E25A 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E25E 6700 FE80                  		beq.w 	breakenemy
0001E262 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E266 6700 FE78                  		beq.w 	breakenemy
0001E26A 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E26E 6700 FE70                  		beq.w 	breakenemy
0001E272 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E276 6700 FE68                  		beq.w 	breakenemy
0001E27A                            
0001E27A                            
0001E27A                            	@hurtcont:
0001E27A 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E280 11FC 0000 F5C8             		move.b	#0,(v_rshield).w	; remove red shield
0001E286 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove gold shield
0001E28C 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E292 6100 8096                  		bsr.w	Sonic_ResetOnFloor
0001E296 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E29C 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E2A2 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E2A8 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E2AE 6700                       		beq.s	@isdry		; if not, branch
0001E2B0                            
0001E2B0 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E2B6 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E2BC                            
0001E2BC                            	@isdry:
0001E2BC 3028 0008                  		move.w	obX(a0),d0
0001E2C0 B06A 0008                  		cmp.w	obX(a2),d0
0001E2C4 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E2C6 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E2CA                            
0001E2CA                            	@isleft:
0001E2CA 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E2D0 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E2D6 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E2DC 317C 0120 0030             		move.w	#$120,$30(a0)
0001E2E2 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E2E6 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E2E8 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E2EC 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E2EE 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E2F4 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E2FA 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E300 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E304 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E308 6600                       		bne.s	@sound		; if not, branch
0001E30A 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E30E 6600                       		bne.s	@sound		; if not, branch
0001E310 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E314                            
0001E314                            	@sound:
0001E314 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E31A 70FF                       		moveq	#-1,d0
0001E31C 4E75                       		rts	
0001E31E                            	@hurtelec:
0001E31E 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E324 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E32A 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E32E 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E332 66E0                       		bne.s	@sound		; if not, branch
0001E334 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E338 66DA                       		bne.s	@sound		; if not, branch
0001E33A 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E33E                            ; ===========================================================================
0001E33E                            
0001E33E                            @norings:
0001E33E 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E342 6600 FE56                  		bne.w	@hasshield	; if yes, branch
0001E346                            
0001E346                            ; ---------------------------------------------------------------------------
0001E346                            ; Subroutine to	kill Sonic
0001E346                            ; ---------------------------------------------------------------------------
0001E346                            
0001E346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E346                            
0001E346                            
0001E346                            KillSonic:
0001E346 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E34A 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E34E 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E354 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E35A 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E360 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E366 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E36C 4EB9 0001 632A             		jsr		Sonic_ResetOnFloor
0001E372 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E378 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E37E 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E384 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E38A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E390 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E394 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E396 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E39A 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E39C 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E3A2 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E3A8 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E3AC 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E3B0 6600                       		bne.s	@sound
0001E3B2 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E3B6                            
0001E3B6                            	@sound:
0001E3B6 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E3BC                            
0001E3BC                            	@dontdie:
0001E3BC 70FF                       		moveq	#-1,d0
0001E3BE 4E75                       		rts	
0001E3C0                            ; End of function KillSonic
0001E3C0                            Kill_Lava:	
0001E3C0                            	;bset	#7,obGfx(a0)
0001E3C0 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E3C6 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E3CA 4EB9 0000 1250                 jsr		(PlaySound_Special).l
0001E3D0                            
0001E3D0                            
0001E3D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3D0                            
0001E3D0                            
0001E3D0                            React_Special:
0001E3D0 1229 0020                  		move.b	obColType(a1),d1
0001E3D4 0201 003F                  		andi.b	#$3F,d1
0001E3D8 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E3DC 6700                       		beq.s	@caterkiller	; if yes, branch
0001E3DE 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E3E2 6700                       		beq.s	@yadrin		; if yes, branch
0001E3E4 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E3E8 6700                       		beq.s	@D7orE1		; if yes, branch
0001E3EA 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E3EE 6700                       		beq.s	@D7orE1		; if yes, branch
0001E3F0 4E75                       		rts	
0001E3F2                            ; ===========================================================================
0001E3F2                            
0001E3F2                            @caterkiller:
0001E3F2 6000 FD5A                  		bra.w	React_Caterkiller
0001E3F6                            ; ===========================================================================
0001E3F6                            
0001E3F6                            @yadrin:
0001E3F6 9A40                       		sub.w	d0,d5
0001E3F8 0C45 0008                  		cmpi.w	#8,d5
0001E3FC 6400                       		bcc.s	@normalenemy
0001E3FE 3029 0008                  		move.w	obX(a1),d0
0001E402 5940                       		subq.w	#4,d0
0001E404 0829 0000 0022             		btst	#0,obStatus(a1)
0001E40A 6700                       		beq.s	@noflip
0001E40C 0440 0010                  		subi.w	#$10,d0
0001E410                            
0001E410                            	@noflip:
0001E410 9042                       		sub.w	d2,d0
0001E412 6400                       		bcc.s	@loc_1B13C
0001E414 0640 0018                  		addi.w	#$18,d0
0001E418 6500                       		bcs.s	@loc_1B140
0001E41A 6000                       		bra.s	@normalenemy
0001E41C                            ; ===========================================================================
0001E41C                            
0001E41C                            	@loc_1B13C:
0001E41C B044                       		cmp.w	d4,d0
0001E41E 6200                       		bhi.s	@normalenemy
0001E420                            
0001E420                            	@loc_1B140:
0001E420 6000 FD32                  		bra.w	React_ChkHurt
0001E424                            ; ===========================================================================
0001E424                            
0001E424                            	@normalenemy:
0001E424 6000 FC76                  		bra.w	React_Enemy
0001E428                            ; ===========================================================================
0001E428                            
0001E428                            @D7orE1:
0001E428 5229 0021                  		addq.b	#1,obColProp(a1)
0001E42C 4E75                       		rts	
0001E42E                            ; End of function React_Special
0001E42E                            
0001E42E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E42E                            
0001E42E                            React_ChkWaterTag:
0001E42E 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E434 6600 0000                  		bne	NotWaterTag
0001E438 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E43E                            	NotWaterTag:
0001E43E 4E75                       		rts
0001E440                            
0001E440                            React_WaterTag:
0001E440 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E446 6700 0000                  		beq	SkipWaterTag
0001E44A 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E450                            	SkipWaterTag:
0001E450 4E75                       		rts
0001E450 4E75                       		rts
0001E452                            
0001E452                            ; ---------------------------------------------------------------------------
0001E452                            ; Subroutine to	show the special stage layout
0001E452                            ; ---------------------------------------------------------------------------
0001E452                            
0001E452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E452                            
0001E452                            
0001E452                            SS_ShowLayout:
0001E452 6100 0000                  		bsr.w	SS_AniWallsRings
0001E456 6100 0000                  		bsr.w	SS_AniItems
0001E45A 3F05                       		move.w	d5,-(sp)
0001E45C 43F8 8000                  		lea	($FFFF8000).w,a1
0001E460 1038 F780                  		move.b	(v_ssangle).w,d0
0001E464 0200 00FC                  		andi.b	#$FC,d0
0001E468 4EB9 0000 3A32             		jsr	(CalcSine).l
0001E46E 3800                       		move.w	d0,d4
0001E470 3A01                       		move.w	d1,d5
0001E472 C9FC 0018                  		muls.w	#$18,d4
0001E476 CBFC 0018                  		muls.w	#$18,d5
0001E47A 7400                       		moveq	#0,d2
0001E47C 3438 F700                  		move.w	(v_screenposx).w,d2
0001E480 84FC 0018                  		divu.w	#$18,d2
0001E484 4842                       		swap	d2
0001E486 4442                       		neg.w	d2
0001E488 0642 FF4C                  		addi.w	#-$B4,d2
0001E48C 7600                       		moveq	#0,d3
0001E48E 3638 F704                  		move.w	(v_screenposy).w,d3
0001E492 86FC 0018                  		divu.w	#$18,d3
0001E496 4843                       		swap	d3
0001E498 4443                       		neg.w	d3
0001E49A 0643 FF4C                  		addi.w	#-$B4,d3
0001E49E 3E3C 000F                  		move.w	#$F,d7
0001E4A2                            
0001E4A2                            loc_1B19E:
0001E4A2 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E4A6 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E4AA 4440                       		neg.w	d0
0001E4AC C3C2                       		muls.w	d2,d1
0001E4AE C1C3                       		muls.w	d3,d0
0001E4B0 2C00                       		move.l	d0,d6
0001E4B2 DC81                       		add.l	d1,d6
0001E4B4 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E4B8 C1C2                       		muls.w	d2,d0
0001E4BA C3C3                       		muls.w	d3,d1
0001E4BC D280                       		add.l	d0,d1
0001E4BE 2406                       		move.l	d6,d2
0001E4C0 3C3C 000F                  		move.w	#$F,d6
0001E4C4                            
0001E4C4                            loc_1B1C0:
0001E4C4 2002                       		move.l	d2,d0
0001E4C6 E080                       		asr.l	#8,d0
0001E4C8 32C0                       		move.w	d0,(a1)+
0001E4CA 2001                       		move.l	d1,d0
0001E4CC E080                       		asr.l	#8,d0
0001E4CE 32C0                       		move.w	d0,(a1)+
0001E4D0 D485                       		add.l	d5,d2
0001E4D2 D284                       		add.l	d4,d1
0001E4D4 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E4D8                            
0001E4D8 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E4DC 0643 0018                  		addi.w	#$18,d3
0001E4E0 51CF FFC0                  		dbf	d7,loc_1B19E
0001E4E4                            
0001E4E4 3A1F                       		move.w	(sp)+,d5
0001E4E6 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E4EC 7000                       		moveq	#0,d0
0001E4EE 3038 F704                  		move.w	(v_screenposy).w,d0
0001E4F2 80FC 0018                  		divu.w	#$18,d0
0001E4F6 C0FC 0080                  		mulu.w	#$80,d0
0001E4FA D1C0                       		adda.l	d0,a0
0001E4FC 7000                       		moveq	#0,d0
0001E4FE 3038 F700                  		move.w	(v_screenposx).w,d0
0001E502 80FC 0018                  		divu.w	#$18,d0
0001E506 D0C0                       		adda.w	d0,a0
0001E508 49F8 8000                  		lea	($FFFF8000).w,a4
0001E50C 3E3C 000F                  		move.w	#$F,d7
0001E510                            
0001E510                            loc_1B20C:
0001E510 3C3C 000F                  		move.w	#$F,d6
0001E514                            
0001E514                            loc_1B210:
0001E514 7000                       		moveq	#0,d0
0001E516 1018                       		move.b	(a0)+,d0
0001E518 6700                       		beq.s	loc_1B268
0001E51A 0C00 004E                  		cmpi.b	#$4E,d0
0001E51E 6200                       		bhi.s	loc_1B268
0001E520 3614                       		move.w	(a4),d3
0001E522 0643 0120                  		addi.w	#$120,d3
0001E526 0C43 0070                  		cmpi.w	#$70,d3
0001E52A 6500                       		blo.s	loc_1B268
0001E52C 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E530 6400                       		bhs.s	loc_1B268
0001E532 342C 0002                  		move.w	2(a4),d2
0001E536 0642 00F0                  		addi.w	#$F0,d2
0001E53A 0C42 0070                  		cmpi.w	#$70,d2
0001E53E 6500                       		blo.s	loc_1B268
0001E540 0C42 0170                  		cmpi.w	#$170,d2
0001E544 6400                       		bhs.s	loc_1B268
0001E546 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E54C E748                       		lsl.w	#3,d0
0001E54E 4BF5 0000                  		lea	(a5,d0.w),a5
0001E552 225D                       		movea.l	(a5)+,a1
0001E554 321D                       		move.w	(a5)+,d1
0001E556 D241                       		add.w	d1,d1
0001E558 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E55C 365D                       		movea.w	(a5)+,a3
0001E55E 7200                       		moveq	#0,d1
0001E560 1219                       		move.b	(a1)+,d1
0001E562 5301                       		subq.b	#1,d1
0001E564 6B00                       		bmi.s	loc_1B268
0001E566 4EB9 0000 F870             		jsr	(BuildSpr_Normal).l
0001E56C                            
0001E56C                            loc_1B268:
0001E56C 584C                       		addq.w	#4,a4
0001E56E 51CE FFA4                  		dbf	d6,loc_1B210
0001E572                            
0001E572 41E8 0070                  		lea	$70(a0),a0
0001E576 51CF FF98                  		dbf	d7,loc_1B20C
0001E57A                            
0001E57A 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E57E 0C05 0050                  		cmpi.b	#$50,d5
0001E582 6700                       		beq.s	loc_1B288
0001E584 24BC 0000 0000             		move.l	#0,(a2)
0001E58A 4E75                       		rts	
0001E58C                            ; ===========================================================================
0001E58C                            
0001E58C                            loc_1B288:
0001E58C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E592 4E75                       		rts	
0001E594                            ; End of function SS_ShowLayout
0001E594                            
0001E594                            ; ---------------------------------------------------------------------------
0001E594                            ; Subroutine to	animate	walls and rings	in the special stage
0001E594                            ; ---------------------------------------------------------------------------
0001E594                            
0001E594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E594                            
0001E594                            
0001E594                            SS_AniWallsRings:
0001E594 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E59A 7000                       		moveq	#0,d0
0001E59C 1038 F780                  		move.b	(v_ssangle).w,d0
0001E5A0 E408                       		lsr.b	#2,d0
0001E5A2 0240 000F                  		andi.w	#$F,d0
0001E5A6 7223                       		moveq	#$23,d1
0001E5A8                            
0001E5A8                            loc_1B2A4:
0001E5A8 3280                       		move.w	d0,(a1)
0001E5AA 5049                       		addq.w	#8,a1
0001E5AC 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E5B0                            
0001E5B0 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E5B6 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E5BA 6A00                       		bpl.s	loc_1B2C8
0001E5BC 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E5C2 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E5C6 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E5CC                            
0001E5CC                            loc_1B2C8:
0001E5CC 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E5D2 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E5D6 6A00                       		bpl.s	loc_1B2E4
0001E5D8 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E5DE 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E5E2 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E5E8                            
0001E5E8                            loc_1B2E4:
0001E5E8 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E5EC 1340 0138                  		move.b	d0,$138(a1)
0001E5F0 1340 0160                  		move.b	d0,$160(a1)
0001E5F4 1340 0148                  		move.b	d0,$148(a1)
0001E5F8 1340 0150                  		move.b	d0,$150(a1)
0001E5FC 1340 01D8                  		move.b	d0,$1D8(a1)
0001E600 1340 01E0                  		move.b	d0,$1E0(a1)
0001E604 1340 01E8                  		move.b	d0,$1E8(a1)
0001E608 1340 01F0                  		move.b	d0,$1F0(a1)
0001E60C 1340 01F8                  		move.b	d0,$1F8(a1)
0001E610 1340 0200                  		move.b	d0,$200(a1)
0001E614 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E618 6A00                       		bpl.s	loc_1B326
0001E61A 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E620 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E624 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E62A                            
0001E62A                            loc_1B326:
0001E62A 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E62E 1340 0168                  		move.b	d0,$168(a1)
0001E632 1340 0170                  		move.b	d0,$170(a1)
0001E636 1340 0178                  		move.b	d0,$178(a1)
0001E63A 1340 0180                  		move.b	d0,$180(a1)
0001E63E 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E642 6A00                       		bpl.s	loc_1B350
0001E644 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E64A 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E64E 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E654                            
0001E654                            loc_1B350:
0001E654 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E65A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E660 7000                       		moveq	#0,d0
0001E662 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E666 D040                       		add.w	d0,d0
0001E668 41F0 0000                  		lea	(a0,d0.w),a0
0001E66C 3290                       		move.w	(a0),(a1)
0001E66E 3368 0002 0008             		move.w	2(a0),8(a1)
0001E674 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E67A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E680 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E686 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E68C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E692 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E698 D0FC 0020                  		adda.w	#$20,a0
0001E69C D2FC 0048                  		adda.w	#$48,a1
0001E6A0 3290                       		move.w	(a0),(a1)
0001E6A2 3368 0002 0008             		move.w	2(a0),8(a1)
0001E6A8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E6AE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E6B4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E6BA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E6C0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E6C6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E6CC D0FC 0020                  		adda.w	#$20,a0
0001E6D0 D2FC 0048                  		adda.w	#$48,a1
0001E6D4 3290                       		move.w	(a0),(a1)
0001E6D6 3368 0002 0008             		move.w	2(a0),8(a1)
0001E6DC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E6E2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E6E8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E6EE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E6F4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E6FA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E700 D0FC 0020                  		adda.w	#$20,a0
0001E704 D2FC 0048                  		adda.w	#$48,a1
0001E708 3290                       		move.w	(a0),(a1)
0001E70A 3368 0002 0008             		move.w	2(a0),8(a1)
0001E710 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E716 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E71C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E722 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E728 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E72E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E734 D0FC 0020                  		adda.w	#$20,a0
0001E738 D2FC 0048                  		adda.w	#$48,a1
0001E73C 4E75                       		rts	
0001E73E                            ; End of function SS_AniWallsRings
0001E73E                            
0001E73E                            ; ===========================================================================
0001E73E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E74E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E75E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E76E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E77E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E78E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E79E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E7AE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E7BE                            ; ---------------------------------------------------------------------------
0001E7BE                            ; Subroutine to	remove items when you collect them in the special stage
0001E7BE                            ; ---------------------------------------------------------------------------
0001E7BE                            
0001E7BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7BE                            
0001E7BE                            
0001E7BE                            SS_RemoveCollectedItem:
0001E7BE 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E7C4 303C 001F                  		move.w	#$1F,d0
0001E7C8                            
0001E7C8                            loc_1B4C4:
0001E7C8 4A12                       		tst.b	(a2)
0001E7CA 6700                       		beq.s	locret_1B4CE
0001E7CC 504A                       		addq.w	#8,a2
0001E7CE 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E7D2                            
0001E7D2                            locret_1B4CE:
0001E7D2 4E75                       		rts	
0001E7D4                            ; End of function SS_RemoveCollectedItem
0001E7D4                            
0001E7D4                            ; ---------------------------------------------------------------------------
0001E7D4                            ; Subroutine to	animate	special	stage items when you touch them
0001E7D4                            ; ---------------------------------------------------------------------------
0001E7D4                            
0001E7D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7D4                            
0001E7D4                            
0001E7D4                            SS_AniItems:
0001E7D4 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E7DA 3E3C 001F                  		move.w	#$1F,d7
0001E7DE                            
0001E7DE                            loc_1B4DA:
0001E7DE 7000                       		moveq	#0,d0
0001E7E0 1010                       		move.b	(a0),d0
0001E7E2 6700                       		beq.s	loc_1B4E8
0001E7E4 E548                       		lsl.w	#2,d0
0001E7E6 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E7EA 4E91                       		jsr	(a1)
0001E7EC                            
0001E7EC                            loc_1B4E8:
0001E7EC 5048                       		addq.w	#8,a0
0001E7EE                            
0001E7EE                            loc_1B4EA:
0001E7EE 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E7F2                            
0001E7F2 4E75                       		rts	
0001E7F4                            ; End of function SS_AniItems
0001E7F4                            
0001E7F4                            ; ===========================================================================
0001E7F4 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E7F8 0000 0000                  		dc.l SS_AniBumper
0001E7FC 0000 0000                  		dc.l SS_Ani1Up
0001E800 0000 0000                  		dc.l SS_AniReverse
0001E804 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E808 0000 0000                  		dc.l SS_AniGlassBlock
0001E80C                            ; ===========================================================================
0001E80C                            
0001E80C                            SS_AniRingSparks:
0001E80C 5328 0002                  		subq.b	#1,2(a0)
0001E810 6A00                       		bpl.s	locret_1B530
0001E812 117C 0005 0002             		move.b	#5,2(a0)
0001E818 7000                       		moveq	#0,d0
0001E81A 1028 0003                  		move.b	3(a0),d0
0001E81E 5228 0003                  		addq.b	#1,3(a0)
0001E822 2268 0004                  		movea.l	4(a0),a1
0001E826 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E82A 1280                       		move.b	d0,(a1)
0001E82C 6600                       		bne.s	locret_1B530
0001E82E 4290                       		clr.l	(a0)
0001E830 42A8 0004                  		clr.l	4(a0)
0001E834                            
0001E834                            locret_1B530:
0001E834 4E75                       		rts	
0001E836                            ; ===========================================================================
0001E836 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E83C                            ; ===========================================================================
0001E83C                            
0001E83C                            SS_AniBumper:
0001E83C 5328 0002                  		subq.b	#1,2(a0)
0001E840 6A00                       		bpl.s	locret_1B566
0001E842 117C 0007 0002             		move.b	#7,2(a0)
0001E848 7000                       		moveq	#0,d0
0001E84A 1028 0003                  		move.b	3(a0),d0
0001E84E 5228 0003                  		addq.b	#1,3(a0)
0001E852 2268 0004                  		movea.l	4(a0),a1
0001E856 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E85A 6600                       		bne.s	loc_1B564
0001E85C 4290                       		clr.l	(a0)
0001E85E 42A8 0004                  		clr.l	4(a0)
0001E862 12BC 0025                  		move.b	#$25,(a1)
0001E866 4E75                       		rts	
0001E868                            ; ===========================================================================
0001E868                            
0001E868                            loc_1B564:
0001E868 1280                       		move.b	d0,(a1)
0001E86A                            
0001E86A                            locret_1B566:
0001E86A 4E75                       		rts	
0001E86C                            ; ===========================================================================
0001E86C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E872                            ; ===========================================================================
0001E872                            
0001E872                            SS_Ani1Up:
0001E872 5328 0002                  		subq.b	#1,2(a0)
0001E876 6A00                       		bpl.s	locret_1B596
0001E878 117C 0005 0002             		move.b	#5,2(a0)
0001E87E 7000                       		moveq	#0,d0
0001E880 1028 0003                  		move.b	3(a0),d0
0001E884 5228 0003                  		addq.b	#1,3(a0)
0001E888 2268 0004                  		movea.l	4(a0),a1
0001E88C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E890 1280                       		move.b	d0,(a1)
0001E892 6600                       		bne.s	locret_1B596
0001E894 4290                       		clr.l	(a0)
0001E896 42A8 0004                  		clr.l	4(a0)
0001E89A                            
0001E89A                            locret_1B596:
0001E89A 4E75                       		rts	
0001E89C                            ; ===========================================================================
0001E89C 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E8A2                            ; ===========================================================================
0001E8A2                            
0001E8A2                            SS_AniReverse:
0001E8A2 5328 0002                  		subq.b	#1,2(a0)
0001E8A6 6A00                       		bpl.s	locret_1B5CC
0001E8A8 117C 0007 0002             		move.b	#7,2(a0)
0001E8AE 7000                       		moveq	#0,d0
0001E8B0 1028 0003                  		move.b	3(a0),d0
0001E8B4 5228 0003                  		addq.b	#1,3(a0)
0001E8B8 2268 0004                  		movea.l	4(a0),a1
0001E8BC 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E8C0 6600                       		bne.s	loc_1B5CA
0001E8C2 4290                       		clr.l	(a0)
0001E8C4 42A8 0004                  		clr.l	4(a0)
0001E8C8 12BC 002B                  		move.b	#$2B,(a1)
0001E8CC 4E75                       		rts	
0001E8CE                            ; ===========================================================================
0001E8CE                            
0001E8CE                            loc_1B5CA:
0001E8CE 1280                       		move.b	d0,(a1)
0001E8D0                            
0001E8D0                            locret_1B5CC:
0001E8D0 4E75                       		rts	
0001E8D2                            ; ===========================================================================
0001E8D2 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E8D8                            ; ===========================================================================
0001E8D8                            
0001E8D8                            SS_AniEmeraldSparks:
0001E8D8 5328 0002                  		subq.b	#1,2(a0)
0001E8DC 6A00                       		bpl.s	locret_1B60C
0001E8DE 117C 0005 0002             		move.b	#5,2(a0)
0001E8E4 7000                       		moveq	#0,d0
0001E8E6 1028 0003                  		move.b	3(a0),d0
0001E8EA 5228 0003                  		addq.b	#1,3(a0)
0001E8EE 2268 0004                  		movea.l	4(a0),a1
0001E8F2 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E8F6 1280                       		move.b	d0,(a1)
0001E8F8 6600                       		bne.s	locret_1B60C
0001E8FA 4290                       		clr.l	(a0)
0001E8FC 42A8 0004                  		clr.l	4(a0)
0001E900 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E910                            
0001E910                            locret_1B60C:
0001E910 4E75                       		rts	
0001E912                            ; ===========================================================================
0001E912 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E918                            ; ===========================================================================
0001E918                            
0001E918                            SS_AniGlassBlock:
0001E918 5328 0002                  		subq.b	#1,2(a0)
0001E91C 6A00                       		bpl.s	locret_1B640
0001E91E 117C 0001 0002             		move.b	#1,2(a0)
0001E924 7000                       		moveq	#0,d0
0001E926 1028 0003                  		move.b	3(a0),d0
0001E92A 5228 0003                  		addq.b	#1,3(a0)
0001E92E 2268 0004                  		movea.l	4(a0),a1
0001E932 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E936 1280                       		move.b	d0,(a1)
0001E938 6600                       		bne.s	locret_1B640
0001E93A 12A8 0004                  		move.b	4(a0),(a1)
0001E93E 4290                       		clr.l	(a0)
0001E940 42A8 0004                  		clr.l	4(a0)
0001E944                            
0001E944                            locret_1B640:
0001E944 4E75                       		rts	
0001E946                            ; ===========================================================================
0001E946 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E950                            
0001E950                            ; ---------------------------------------------------------------------------
0001E950                            ; Special stage	layout pointers
0001E950                            ; ---------------------------------------------------------------------------
0001E950                            SS_LayoutIndex:
0001E950 0000 0000                  		dc.l SS_1
0001E954 0000 0000                  		dc.l SS_2
0001E958 0000 0000                  		dc.l SS_3
0001E95C 0000 0000                  		dc.l SS_4
0001E960 0000 0000                  		dc.l SS_5
0001E964 0000 0000                  		dc.l SS_6
0001E968                            		even
0001E968                            
0001E968                            ; ---------------------------------------------------------------------------
0001E968                            ; Special stage start locations
0001E968                            ; ---------------------------------------------------------------------------
0001E968                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001E968                            ; ---------------------------------------------------------------------------
0001E968                            ; Special stage start locations
0001E968                            ; ---------------------------------------------------------------------------
0001E968                            
0001E968                            		incbin	"startpos\ss1.bin"
0001E96C                            		incbin	"startpos\ss2.bin"
0001E970                            		incbin	"startpos\ss3.bin"
0001E974                            		incbin	"startpos\ss4.bin"
0001E978                            		incbin	"startpos\ss5.bin"
0001E97C                            		incbin	"startpos\ss6.bin"
0001E980                            		even
0001E980                            		even
0001E980                            
0001E980                            ; ---------------------------------------------------------------------------
0001E980                            ; Subroutine to	load special stage layout
0001E980                            ; ---------------------------------------------------------------------------
0001E980                            
0001E980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E980                            
0001E980                            
0001E980                            SS_Load:
0001E980 7000                       		moveq	#0,d0
0001E982 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001E986 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001E98A 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001E990 6500                       		blo.s	SS_ChkEmldNum
0001E992 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001E998                            
0001E998                            SS_ChkEmldNum:
0001E998 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001E99E 6700                       		beq.s	SS_LoadData	; if yes, branch
0001E9A0 7200                       		moveq	#0,d1
0001E9A2 1238 FE57                  		move.b	(v_emeralds).w,d1
0001E9A6 5301                       		subq.b	#1,d1
0001E9A8 6500                       		blo.s	SS_LoadData
0001E9AA 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001E9AE                            
0001E9AE                            SS_ChkEmldLoop:	
0001E9AE B033 1000                  		cmp.b	(a3,d1.w),d0
0001E9B2 6600                       		bne.s	SS_ChkEmldRepeat
0001E9B4 60CA                       		bra.s	SS_Load
0001E9B6                            ; ===========================================================================
0001E9B6                            
0001E9B6                            SS_ChkEmldRepeat:
0001E9B6 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001E9BA                            
0001E9BA                            SS_LoadData:
0001E9BA E548                       		lsl.w	#2,d0
0001E9BC 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001E9C0 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001E9C4 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001E9C8 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001E9CC 43F9 00FF 4000             		lea	($FF4000).l,a1
0001E9D2 303C 0000                  		move.w	#0,d0
0001E9D6 4EB9 0000 1888             		jsr	(EniDec).l
0001E9DC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E9E2 303C 0FFF                  		move.w	#$FFF,d0
0001E9E6                            
0001E9E6                            SS_ClrRAM3:
0001E9E6 4299                       		clr.l	(a1)+
0001E9E8 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001E9EC                            
0001E9EC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E9F2 41F9 00FF 4000             		lea	($FF4000).l,a0
0001E9F8 723F                       		moveq	#$3F,d1
0001E9FA                            
0001E9FA                            loc_1B6F6:
0001E9FA 743F                       		moveq	#$3F,d2
0001E9FC                            
0001E9FC                            loc_1B6F8:
0001E9FC 12D8                       		move.b	(a0)+,(a1)+
0001E9FE 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EA02                            
0001EA02 43E9 0040                  		lea	$40(a1),a1
0001EA06 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EA0A                            
0001EA0A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EA10 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EA16 724D                       		moveq	#$4D,d1
0001EA18                            
0001EA18                            loc_1B714:
0001EA18 22D8                       		move.l	(a0)+,(a1)+
0001EA1A 32FC 0000                  		move.w	#0,(a1)+
0001EA1E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EA24 32D8                       		move.w	(a0)+,(a1)+
0001EA26 51C9 FFF0                  		dbf	d1,loc_1B714
0001EA2A                            
0001EA2A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EA30 323C 003F                  		move.w	#$3F,d1
0001EA34                            
0001EA34                            loc_1B730:
0001EA34                            
0001EA34 4299                       		clr.l	(a1)+
0001EA36 51C9 FFFC                  		dbf	d1,loc_1B730
0001EA3A                            
0001EA3A 4E75                       		rts	
0001EA3C                            ; End of function SS_Load
0001EA3C                            
0001EA3C                            ; ===========================================================================
0001EA3C                            
0001EA3C                            SS_MapIndex:
0001EA3C                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EA3C                            ; ---------------------------------------------------------------------------
0001EA3C                            ; Special stage	mappings and VRAM pointers
0001EA3C                            ; ---------------------------------------------------------------------------
0001EA3C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EA40 0142                       	dc.w $142		; VRAM setting
0001EA42 0000 0000                  	dc.l Map_SSWalls
0001EA46 0142                       	dc.w $142
0001EA48 0000 0000                  	dc.l Map_SSWalls
0001EA4C 0142                       	dc.w $142
0001EA4E 0000 0000                  	dc.l Map_SSWalls
0001EA52 0142                       	dc.w $142
0001EA54 0000 0000                  	dc.l Map_SSWalls
0001EA58 0142                       	dc.w $142
0001EA5A 0000 0000                  	dc.l Map_SSWalls
0001EA5E 0142                       	dc.w $142
0001EA60 0000 0000                  	dc.l Map_SSWalls
0001EA64 0142                       	dc.w $142
0001EA66 0000 0000                  	dc.l Map_SSWalls
0001EA6A 0142                       	dc.w $142
0001EA6C 0000 0000                  	dc.l Map_SSWalls
0001EA70 0142                       	dc.w $142
0001EA72 0000 0000                  	dc.l Map_SSWalls
0001EA76 2142                       	dc.w $2142
0001EA78 0000 0000                  	dc.l Map_SSWalls
0001EA7C 2142                       	dc.w $2142
0001EA7E 0000 0000                  	dc.l Map_SSWalls
0001EA82 2142                       	dc.w $2142
0001EA84 0000 0000                  	dc.l Map_SSWalls
0001EA88 2142                       	dc.w $2142
0001EA8A 0000 0000                  	dc.l Map_SSWalls
0001EA8E 2142                       	dc.w $2142
0001EA90 0000 0000                  	dc.l Map_SSWalls
0001EA94 2142                       	dc.w $2142
0001EA96 0000 0000                  	dc.l Map_SSWalls
0001EA9A 2142                       	dc.w $2142
0001EA9C 0000 0000                  	dc.l Map_SSWalls
0001EAA0 2142                       	dc.w $2142
0001EAA2 0000 0000                  	dc.l Map_SSWalls
0001EAA6 2142                       	dc.w $2142
0001EAA8 0000 0000                  	dc.l Map_SSWalls
0001EAAC 4142                       	dc.w $4142
0001EAAE 0000 0000                  	dc.l Map_SSWalls
0001EAB2 4142                       	dc.w $4142
0001EAB4 0000 0000                  	dc.l Map_SSWalls
0001EAB8 4142                       	dc.w $4142
0001EABA 0000 0000                  	dc.l Map_SSWalls
0001EABE 4142                       	dc.w $4142
0001EAC0 0000 0000                  	dc.l Map_SSWalls
0001EAC4 4142                       	dc.w $4142
0001EAC6 0000 0000                  	dc.l Map_SSWalls
0001EACA 4142                       	dc.w $4142
0001EACC 0000 0000                  	dc.l Map_SSWalls
0001EAD0 4142                       	dc.w $4142
0001EAD2 0000 0000                  	dc.l Map_SSWalls
0001EAD6 4142                       	dc.w $4142
0001EAD8 0000 0000                  	dc.l Map_SSWalls
0001EADC 4142                       	dc.w $4142
0001EADE 0000 0000                  	dc.l Map_SSWalls
0001EAE2 6142                       	dc.w $6142
0001EAE4 0000 0000                  	dc.l Map_SSWalls
0001EAE8 6142                       	dc.w $6142
0001EAEA 0000 0000                  	dc.l Map_SSWalls
0001EAEE 6142                       	dc.w $6142
0001EAF0 0000 0000                  	dc.l Map_SSWalls
0001EAF4 6142                       	dc.w $6142
0001EAF6 0000 0000                  	dc.l Map_SSWalls
0001EAFA 6142                       	dc.w $6142
0001EAFC 0000 0000                  	dc.l Map_SSWalls
0001EB00 6142                       	dc.w $6142
0001EB02 0000 0000                  	dc.l Map_SSWalls
0001EB06 6142                       	dc.w $6142
0001EB08 0000 0000                  	dc.l Map_SSWalls
0001EB0C 6142                       	dc.w $6142
0001EB0E 0000 0000                  	dc.l Map_SSWalls
0001EB12 6142                       	dc.w $6142
0001EB14 0001 0C2C                  	dc.l Map_Bump
0001EB18 023B                       	dc.w $23B
0001EB1A 0000 0000                  	dc.l Map_SS_R
0001EB1E 0570                       	dc.w $570
0001EB20 0000 0000                  	dc.l Map_SS_R
0001EB24 0251                       	dc.w $251
0001EB26 0000 0000                  	dc.l Map_SS_R
0001EB2A 0370                       	dc.w $370
0001EB2C 0000 0000                  	dc.l Map_SS_Up
0001EB30 0263                       	dc.w $263
0001EB32 0000 0000                  	dc.l Map_SS_Down
0001EB36 0263                       	dc.w $263
0001EB38 0000 0000                  	dc.l Map_SS_R
0001EB3C 22F0                       	dc.w $22F0
0001EB3E 0000 0000                  	dc.l Map_SS_Glass
0001EB42 0470                       	dc.w $470
0001EB44 0000 0000                  	dc.l Map_SS_Glass
0001EB48 05F0                       	dc.w $5F0
0001EB4A 0000 0000                  	dc.l Map_SS_Glass
0001EB4E 65F0                       	dc.w $65F0
0001EB50 0000 0000                  	dc.l Map_SS_Glass
0001EB54 25F0                       	dc.w $25F0
0001EB56 0000 0000                  	dc.l Map_SS_Glass
0001EB5A 45F0                       	dc.w $45F0
0001EB5C 0000 0000                  	dc.l Map_SS_R
0001EB60 02F0                       	dc.w $2F0
0001EB62 0101 0C2C                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EB66 023B                       	dc.w $23B
0001EB68 0201 0C2C                  	dc.l Map_Bump+$2000000
0001EB6C 023B                       	dc.w $23B
0001EB6E 0000 0000                  	dc.l Map_SS_R
0001EB72 0797                       	dc.w $797
0001EB74 0000 0000                  	dc.l Map_SS_R
0001EB78 07A0                       	dc.w $7A0
0001EB7A 0000 0000                  	dc.l Map_SS_R
0001EB7E 07A9                       	dc.w $7A9
0001EB80 0000 0000                  	dc.l Map_SS_R
0001EB84 0797                       	dc.w $797
0001EB86 0000 0000                  	dc.l Map_SS_R
0001EB8A 07A0                       	dc.w $7A0
0001EB8C 0000 0000                  	dc.l Map_SS_R
0001EB90 07A9                       	dc.w $7A9
0001EB92 0000 BEF2                  	dc.l Map_Ring
0001EB96 2798                       	dc.w $2798
0001EB98 0000 0000                  	dc.l Map_SS_Chaos3
0001EB9C 0770                       	dc.w $770
0001EB9E 0000 0000                  	dc.l Map_SS_Chaos3
0001EBA2 2770                       	dc.w $2770
0001EBA4 0000 0000                  	dc.l Map_SS_Chaos3
0001EBA8 4770                       	dc.w $4770
0001EBAA 0000 0000                  	dc.l Map_SS_Chaos3
0001EBAE 6770                       	dc.w $6770
0001EBB0 0000 0000                  	dc.l Map_SS_Chaos1
0001EBB4 0770                       	dc.w $770
0001EBB6 0000 0000                  	dc.l Map_SS_Chaos2
0001EBBA 0770                       	dc.w $770
0001EBBC 0000 0000                  	dc.l Map_SS_R
0001EBC0 04F0                       	dc.w $4F0
0001EBC2 0400 BEF2                  	dc.l Map_Ring+$4000000
0001EBC6 2798                       	dc.w $2798
0001EBC8 0500 BEF2                  	dc.l Map_Ring+$5000000
0001EBCC 2798                       	dc.w $2798
0001EBCE 0600 BEF2                  	dc.l Map_Ring+$6000000
0001EBD2 2798                       	dc.w $2798
0001EBD4 0700 BEF2                  	dc.l Map_Ring+$7000000
0001EBD8 2798                       	dc.w $2798
0001EBDA 0000 0000                  	dc.l Map_SS_Glass
0001EBDE 23F0                       	dc.w $23F0
0001EBE0 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EBE4 23F0                       	dc.w $23F0
0001EBE6 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EBEA 23F0                       	dc.w $23F0
0001EBEC 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EBF0 23F0                       	dc.w $23F0
0001EBF2 0000 0000                  	dc.l Map_SS_R+$2000000
0001EBF6 04F0                       	dc.w $4F0
0001EBF8 0000 0000                  	dc.l Map_SS_Glass
0001EBFC 05F0                       	dc.w $5F0
0001EBFE 0000 0000                  	dc.l Map_SS_Glass
0001EC02 65F0                       	dc.w $65F0
0001EC04 0000 0000                  	dc.l Map_SS_Glass
0001EC08 25F0                       	dc.w $25F0
0001EC0A 0000 0000                  	dc.l Map_SS_Glass
0001EC0E 45F0                       	dc.w $45F0
0001EC0E 45F0                       	dc.w $45F0
0001EC10                            
0001EC10                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EC10                            ; ---------------------------------------------------------------------------
0001EC10                            ; Sprite mappings - special stage "R" block
0001EC10                            ; ---------------------------------------------------------------------------
0001EC10                            Map_SS_R_internal:
0001EC10 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EC12 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EC14 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EC16 01                         byte_1B912:	dc.b 1
0001EC17 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC1C 01                         byte_1B918:	dc.b 1
0001EC1D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EC22 00                         byte_1B91E:	dc.b 0
0001EC24 00                         		even
0001EC24 00                         		even
0001EC24                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            Map_SS_Glass_internal:
0001EC24 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EC26 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EC28 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EC2A 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EC2C 01                         byte_1B928:	dc.b 1
0001EC2D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC32 01                         byte_1B92E:	dc.b 1
0001EC33 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EC38 01                         byte_1B934:	dc.b 1
0001EC39 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EC3E 01                         byte_1B93A:	dc.b 1
0001EC3F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EC44                            		even
0001EC44                            		even
0001EC44                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EC44                            ; ---------------------------------------------------------------------------
0001EC44                            ; Sprite mappings - special stage "UP" block
0001EC44                            ; ---------------------------------------------------------------------------
0001EC44                            Map_SS_Up_internal:
0001EC44 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EC46 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EC48 01                         byte_1B944:	dc.b 1
0001EC49 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC4E 01                         byte_1B94A:	dc.b 1
0001EC4F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EC54                            		even
0001EC54                            		even
0001EC54                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EC54                            ; ---------------------------------------------------------------------------
0001EC54                            ; Sprite mappings - special stage "DOWN" block
0001EC54                            ; ---------------------------------------------------------------------------
0001EC54                            Map_SS_Down_internal:
0001EC54 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EC56 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EC58 01                         byte_1B954:	dc.b 1
0001EC59 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EC5E 01                         byte_1B95A:	dc.b 1
0001EC5F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EC64                            		even
0001EC64                            		even
0001EC64                            		include	"_maps\SS Chaos Emeralds.asm"
0001EC64                            ; ---------------------------------------------------------------------------
0001EC64                            ; Sprite mappings - special stage chaos	emeralds
0001EC64                            ; ---------------------------------------------------------------------------
0001EC64 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EC66 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EC68 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EC6A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EC6C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EC6E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EC70 01                         byte_1B96C:	dc.b 1
0001EC71 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EC76 01                         byte_1B972:	dc.b 1
0001EC77 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EC7C 01                         byte_1B978:	dc.b 1
0001EC7D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EC82 01                         byte_1B97E:	dc.b 1
0001EC83 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EC88                            		even
0001EC88                            		even
0001EC88                            
0001EC88                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EC88                            ; ---------------------------------------------------------------------------
0001EC88                            ; Object 09 - Sonic (special stage)
0001EC88                            ; ---------------------------------------------------------------------------
0001EC88                            
0001EC88                            SonicSpecial:
0001EC88 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EC8C 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EC8E 6100 0000                  		bsr.w	SS_FixCamera
0001EC92 6000 0000                  		bra.w	DebugMode
0001EC96                            ; ===========================================================================
0001EC96                            
0001EC96                            Obj09_Normal:
0001EC96 7000                       		moveq	#0,d0
0001EC98 1028 0024                  		move.b	obRoutine(a0),d0
0001EC9C 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001ECA0 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001ECA4                            ; ===========================================================================
0001ECA4 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001ECA6 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001ECA8 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001ECAA 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001ECAC                            ; ===========================================================================
0001ECAC                            
0001ECAC                            Obj09_Main:	; Routine 0
0001ECAC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ECB0 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001ECB6 117C 0007 0017             		move.b	#7,obWidth(a0)
0001ECBC 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001ECC4 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001ECCA 117C 0004 0001             		move.b	#4,obRender(a0)
0001ECD0 317C 0000 0018             		move.w	#0,obPriority(a0)
0001ECD6 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001ECDC 08E8 0002 0022             		bset	#2,obStatus(a0)
0001ECE2 08E8 0001 0022             		bset	#1,obStatus(a0)
0001ECE8                            
0001ECE8                            Obj09_ChkDebug:	; Routine 2
0001ECE8 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001ECEC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ECEE 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001ECF4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ECF6 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001ECFC                            
0001ECFC                            Obj09_NoDebug:
0001ECFC 117C 0000 0030             		move.b	#0,$30(a0)
0001ED02 7000                       		moveq	#0,d0
0001ED04 1028 0022                  		move.b	obStatus(a0),d0
0001ED08 0240 0002                  		andi.w	#2,d0
0001ED0C 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001ED10 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001ED14 4EB9 0001 68E4             		jsr	(Sonic_LoadGfx).l
0001ED1A 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001ED20                            ; ===========================================================================
0001ED20 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001ED22 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001ED24                            ; ===========================================================================
0001ED24                            
0001ED24                            Obj09_OnWall:
0001ED24 6100 0000                  		bsr.w	Obj09_Jump
0001ED28 6100 0000                  		bsr.w	Obj09_Move
0001ED2C 6100 0000                  		bsr.w	Obj09_Fall
0001ED30 6000                       		bra.s	Obj09_Display
0001ED32                            ; ===========================================================================
0001ED32                            
0001ED32                            Obj09_InAir:
0001ED32 6100 0000                  		bsr.w	nullsub_2
0001ED36 6100 0000                  		bsr.w	Obj09_Move
0001ED3A 6100 0000                  		bsr.w	Obj09_Fall
0001ED3E                            
0001ED3E                            Obj09_Display:
0001ED3E 6100 0000                  		bsr.w	Obj09_ChkItems
0001ED42 6100 0000                  		bsr.w	Obj09_ChkItems2
0001ED46 4EB9 0000 F6F8             		jsr	(SpeedToPos).l
0001ED4C 6100 0000                  		bsr.w	SS_FixCamera
0001ED50 3038 F780                  		move.w	(v_ssangle).w,d0
0001ED54 D078 F782                  		add.w	(v_ssrotate).w,d0
0001ED58 31C0 F780                  		move.w	d0,(v_ssangle).w
0001ED5C 4EB9 0001 654C             		jsr	(Sonic_Animate).l
0001ED62 4E75                       		rts	
0001ED64                            
0001ED64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED64                            
0001ED64                            
0001ED64                            Obj09_Move:
0001ED64 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001ED6A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001ED6C 6100 0000                  		bsr.w	Obj09_MoveLeft
0001ED70                            
0001ED70                            Obj09_ChkRight:
0001ED70 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001ED76 6700                       		beq.s	loc_1BA78	; if not, branch
0001ED78 6100 0000                  		bsr.w	Obj09_MoveRight
0001ED7C                            
0001ED7C                            loc_1BA78:
0001ED7C 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001ED80 0200 000C                  		andi.b	#btnL+btnR,d0
0001ED84 6600                       		bne.s	loc_1BAA8
0001ED86 3028 0020                  		move.w	obInertia(a0),d0
0001ED8A 6700                       		beq.s	loc_1BAA8
0001ED8C 6B00                       		bmi.s	loc_1BA9A
0001ED8E 0440 000C                  		subi.w	#$C,d0
0001ED92 6400                       		bcc.s	loc_1BA94
0001ED94 303C 0000                  		move.w	#0,d0
0001ED98                            
0001ED98                            loc_1BA94:
0001ED98 3140 0020                  		move.w	d0,obInertia(a0)
0001ED9C 6000                       		bra.s	loc_1BAA8
0001ED9E                            ; ===========================================================================
0001ED9E                            
0001ED9E                            loc_1BA9A:
0001ED9E 0640 000C                  		addi.w	#$C,d0
0001EDA2 6400                       		bcc.s	loc_1BAA4
0001EDA4 303C 0000                  		move.w	#0,d0
0001EDA8                            
0001EDA8                            loc_1BAA4:
0001EDA8 3140 0020                  		move.w	d0,obInertia(a0)
0001EDAC                            
0001EDAC                            loc_1BAA8:
0001EDAC 1038 F780                  		move.b	(v_ssangle).w,d0
0001EDB0 0600 0020                  		addi.b	#$20,d0
0001EDB4 0200 00C0                  		andi.b	#$C0,d0
0001EDB8 4400                       		neg.b	d0
0001EDBA 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EDC0 C3E8 0020                  		muls.w	obInertia(a0),d1
0001EDC4 D3A8 0008                  		add.l	d1,obX(a0)
0001EDC8 C1E8 0020                  		muls.w	obInertia(a0),d0
0001EDCC D1A8 000C                  		add.l	d0,obY(a0)
0001EDD0 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EDD4 2428 000C                  		move.l	obY(a0),d2
0001EDD8 2628 0008                  		move.l	obX(a0),d3
0001EDDC 6100 0000                  		bsr.w	sub_1BCE8
0001EDE0 6700                       		beq.s	loc_1BAF2
0001EDE2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EDE6 93A8 0008                  		sub.l	d1,obX(a0)
0001EDEA 91A8 000C                  		sub.l	d0,obY(a0)
0001EDEE 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EDF4 4E75                       		rts	
0001EDF6                            ; ===========================================================================
0001EDF6                            
0001EDF6                            loc_1BAF2:
0001EDF6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EDFA 4E75                       		rts	
0001EDFC                            ; End of function Obj09_Move
0001EDFC                            
0001EDFC                            
0001EDFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDFC                            
0001EDFC                            
0001EDFC                            Obj09_MoveLeft:
0001EDFC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EE02 3028 0020                  		move.w	obInertia(a0),d0
0001EE06 6700                       		beq.s	loc_1BB06
0001EE08 6A00                       		bpl.s	loc_1BB1A
0001EE0A                            
0001EE0A                            loc_1BB06:
0001EE0A 0440 000C                  		subi.w	#$C,d0
0001EE0E 0C40 F800                  		cmpi.w	#-$800,d0
0001EE12 6E00                       		bgt.s	loc_1BB14
0001EE14 303C F800                  		move.w	#-$800,d0
0001EE18                            
0001EE18                            loc_1BB14:
0001EE18 3140 0020                  		move.w	d0,obInertia(a0)
0001EE1C 4E75                       		rts	
0001EE1E                            ; ===========================================================================
0001EE1E                            
0001EE1E                            loc_1BB1A:
0001EE1E 0440 0040                  		subi.w	#$40,d0
0001EE22 6400                       		bcc.s	loc_1BB22
0001EE24 4E71                       		nop	
0001EE26                            
0001EE26                            loc_1BB22:
0001EE26 3140 0020                  		move.w	d0,obInertia(a0)
0001EE2A 4E75                       		rts	
0001EE2C                            ; End of function Obj09_MoveLeft
0001EE2C                            
0001EE2C                            
0001EE2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE2C                            
0001EE2C                            
0001EE2C                            Obj09_MoveRight:
0001EE2C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001EE32 3028 0020                  		move.w	obInertia(a0),d0
0001EE36 6B00                       		bmi.s	loc_1BB48
0001EE38 0640 000C                  		addi.w	#$C,d0
0001EE3C 0C40 0800                  		cmpi.w	#$800,d0
0001EE40 6D00                       		blt.s	loc_1BB42
0001EE42 303C 0800                  		move.w	#$800,d0
0001EE46                            
0001EE46                            loc_1BB42:
0001EE46 3140 0020                  		move.w	d0,obInertia(a0)
0001EE4A 6000                       		bra.s	locret_1BB54
0001EE4C                            ; ===========================================================================
0001EE4C                            
0001EE4C                            loc_1BB48:
0001EE4C 0640 0040                  		addi.w	#$40,d0
0001EE50 6400                       		bcc.s	loc_1BB50
0001EE52 4E71                       		nop	
0001EE54                            
0001EE54                            loc_1BB50:
0001EE54 3140 0020                  		move.w	d0,obInertia(a0)
0001EE58                            
0001EE58                            locret_1BB54:
0001EE58 4E75                       		rts	
0001EE5A                            ; End of function Obj09_MoveRight
0001EE5A                            
0001EE5A                            
0001EE5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE5A                            
0001EE5A                            
0001EE5A                            Obj09_Jump:
0001EE5A 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EE5E 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EE62 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EE64 1038 F780                  		move.b	(v_ssangle).w,d0
0001EE68 0200 00FC                  		andi.b	#$FC,d0
0001EE6C 4400                       		neg.b	d0
0001EE6E 0400 0040                  		subi.b	#$40,d0
0001EE72 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EE78 C3FC 0680                  		muls.w	#$680,d1
0001EE7C E081                       		asr.l	#8,d1
0001EE7E 3141 0010                  		move.w	d1,obVelX(a0)
0001EE82 C1FC 0680                  		muls.w	#$680,d0
0001EE86 E080                       		asr.l	#8,d0
0001EE88 3140 0012                  		move.w	d0,obVelY(a0)
0001EE8C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EE9C                            
0001EE9C                            Obj09_NoJump:
0001EE9C 4E75                       		rts	
0001EE9E                            ; End of function Obj09_Jump
0001EE9E                            
0001EE9E                            
0001EE9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE9E                            
0001EE9E                            
0001EE9E                            nullsub_2:
0001EE9E 4E75                       		rts	
0001EEA0                            ; End of function nullsub_2
0001EEA0                            
0001EEA0                            ; ===========================================================================
0001EEA0                            ; ---------------------------------------------------------------------------
0001EEA0                            ; unused subroutine to limit Sonic's upward vertical speed
0001EEA0                            ; ---------------------------------------------------------------------------
0001EEA0 323C FC00                  		move.w	#-$400,d1
0001EEA4 B268 0012                  		cmp.w	obVelY(a0),d1
0001EEA8 6F00                       		ble.s	locret_1BBB4
0001EEAA 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EEAE 0200 0070                  		andi.b	#btnABC,d0
0001EEB2 6600                       		bne.s	locret_1BBB4
0001EEB4 3141 0012                  		move.w	d1,obVelY(a0)
0001EEB8                            
0001EEB8                            locret_1BBB4:
0001EEB8 4E75                       		rts	
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EEBA                            ; ---------------------------------------------------------------------------
0001EEBA                            
0001EEBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEBA                            
0001EEBA                            
0001EEBA                            SS_FixCamera:
0001EEBA 3428 000C                  		move.w	obY(a0),d2
0001EEBE 3628 0008                  		move.w	obX(a0),d3
0001EEC2 3038 F700                  		move.w	(v_screenposx).w,d0
0001EEC6 0443 00A0                  		subi.w	#$A0,d3
0001EECA 6500                       		bcs.s	loc_1BBCE
0001EECC 9043                       		sub.w	d3,d0
0001EECE 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EED2                            
0001EED2                            loc_1BBCE:
0001EED2 3038 F704                  		move.w	(v_screenposy).w,d0
0001EED6 0442 0070                  		subi.w	#$70,d2
0001EEDA 6500                       		bcs.s	locret_1BBDE
0001EEDC 9042                       		sub.w	d2,d0
0001EEDE 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EEE2                            
0001EEE2                            locret_1BBDE:
0001EEE2 4E75                       		rts	
0001EEE4                            ; End of function SS_FixCamera
0001EEE4                            
0001EEE4                            ; ===========================================================================
0001EEE4                            
0001EEE4                            Obj09_ExitStage:
0001EEE4 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EEEA 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EEF0 6600                       		bne.s	loc_1BBF4
0001EEF2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EEF8                            
0001EEF8                            loc_1BBF4:
0001EEF8 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EEFE 6D00                       		blt.s	loc_1BC12
0001EF00 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EF06 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EF0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EF10 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EF16                            
0001EF16                            loc_1BC12:
0001EF16 3038 F780                  		move.w	(v_ssangle).w,d0
0001EF1A D078 F782                  		add.w	(v_ssrotate).w,d0
0001EF1E 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EF22 4EB9 0001 654C             		jsr	(Sonic_Animate).l
0001EF28 4EB9 0001 68E4             		jsr	(Sonic_LoadGfx).l
0001EF2E 6100 FF8A                  		bsr.w	SS_FixCamera
0001EF32 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001EF38                            ; ===========================================================================
0001EF38                            
0001EF38                            Obj09_Exit2:
0001EF38 5368 0038                  		subq.w	#1,$38(a0)
0001EF3C 6600                       		bne.s	loc_1BC40
0001EF3E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EF44                            
0001EF44                            loc_1BC40:
0001EF44 4EB9 0001 654C             		jsr	(Sonic_Animate).l
0001EF4A 4EB9 0001 68E4             		jsr	(Sonic_LoadGfx).l
0001EF50 6100 FF68                  		bsr.w	SS_FixCamera
0001EF54 4EF9 0000 F70C             		jmp	(DisplaySprite).l
0001EF5A                            
0001EF5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF5A                            
0001EF5A                            
0001EF5A                            Obj09_Fall:
0001EF5A 2428 000C                  		move.l	obY(a0),d2
0001EF5E 2628 0008                  		move.l	obX(a0),d3
0001EF62 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF66 0200 00FC                  		andi.b	#$FC,d0
0001EF6A 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EF70 3828 0010                  		move.w	obVelX(a0),d4
0001EF74 48C4                       		ext.l	d4
0001EF76 E184                       		asl.l	#8,d4
0001EF78 C1FC 002A                  		muls.w	#$2A,d0
0001EF7C D084                       		add.l	d4,d0
0001EF7E 3828 0012                  		move.w	obVelY(a0),d4
0001EF82 48C4                       		ext.l	d4
0001EF84 E184                       		asl.l	#8,d4
0001EF86 C3FC 002A                  		muls.w	#$2A,d1
0001EF8A D284                       		add.l	d4,d1
0001EF8C D680                       		add.l	d0,d3
0001EF8E 6100 0000                  		bsr.w	sub_1BCE8
0001EF92 6700                       		beq.s	loc_1BCB0
0001EF94 9680                       		sub.l	d0,d3
0001EF96 7000                       		moveq	#0,d0
0001EF98 3140 0010                  		move.w	d0,obVelX(a0)
0001EF9C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EFA2 D481                       		add.l	d1,d2
0001EFA4 6100 0000                  		bsr.w	sub_1BCE8
0001EFA8 6700                       		beq.s	loc_1BCC6
0001EFAA 9481                       		sub.l	d1,d2
0001EFAC 7200                       		moveq	#0,d1
0001EFAE 3141 0012                  		move.w	d1,obVelY(a0)
0001EFB2 4E75                       		rts	
0001EFB4                            ; ===========================================================================
0001EFB4                            
0001EFB4                            loc_1BCB0:
0001EFB4 D481                       		add.l	d1,d2
0001EFB6 6100 0000                  		bsr.w	sub_1BCE8
0001EFBA 6700                       		beq.s	loc_1BCD4
0001EFBC 9481                       		sub.l	d1,d2
0001EFBE 7200                       		moveq	#0,d1
0001EFC0 3141 0012                  		move.w	d1,obVelY(a0)
0001EFC4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EFCA                            
0001EFCA                            loc_1BCC6:
0001EFCA E080                       		asr.l	#8,d0
0001EFCC E081                       		asr.l	#8,d1
0001EFCE 3140 0010                  		move.w	d0,obVelX(a0)
0001EFD2 3141 0012                  		move.w	d1,obVelY(a0)
0001EFD6 4E75                       		rts	
0001EFD8                            ; ===========================================================================
0001EFD8                            
0001EFD8                            loc_1BCD4:
0001EFD8 E080                       		asr.l	#8,d0
0001EFDA E081                       		asr.l	#8,d1
0001EFDC 3140 0010                  		move.w	d0,obVelX(a0)
0001EFE0 3141 0012                  		move.w	d1,obVelY(a0)
0001EFE4 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EFEA 4E75                       		rts	
0001EFEC                            ; End of function Obj09_Fall
0001EFEC                            
0001EFEC                            
0001EFEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFEC                            
0001EFEC                            
0001EFEC                            sub_1BCE8:
0001EFEC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EFF2 7800                       		moveq	#0,d4
0001EFF4 4842                       		swap	d2
0001EFF6 3802                       		move.w	d2,d4
0001EFF8 4842                       		swap	d2
0001EFFA 0644 0044                  		addi.w	#$44,d4
0001EFFE 88FC 0018                  		divu.w	#$18,d4
0001F002 C8FC 0080                  		mulu.w	#$80,d4
0001F006 D3C4                       		adda.l	d4,a1
0001F008 7800                       		moveq	#0,d4
0001F00A 4843                       		swap	d3
0001F00C 3803                       		move.w	d3,d4
0001F00E 4843                       		swap	d3
0001F010 0644 0014                  		addi.w	#$14,d4
0001F014 88FC 0018                  		divu.w	#$18,d4
0001F018 D2C4                       		adda.w	d4,a1
0001F01A 7A00                       		moveq	#0,d5
0001F01C 1819                       		move.b	(a1)+,d4
0001F01E 6100                       		bsr.s	sub_1BD30
0001F020 1819                       		move.b	(a1)+,d4
0001F022 6100                       		bsr.s	sub_1BD30
0001F024 D2FC 007E                  		adda.w	#$7E,a1
0001F028 1819                       		move.b	(a1)+,d4
0001F02A 6100                       		bsr.s	sub_1BD30
0001F02C 1819                       		move.b	(a1)+,d4
0001F02E 6100                       		bsr.s	sub_1BD30
0001F030 4A05                       		tst.b	d5
0001F032 4E75                       		rts	
0001F034                            ; End of function sub_1BCE8
0001F034                            
0001F034                            
0001F034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F034                            
0001F034                            
0001F034                            sub_1BD30:
0001F034 6700                       		beq.s	locret_1BD44
0001F036 0C04 0028                  		cmpi.b	#$28,d4
0001F03A 6700                       		beq.s	locret_1BD44
0001F03C 0C04 003A                  		cmpi.b	#$3A,d4
0001F040 6500                       		bcs.s	loc_1BD46
0001F042 0C04 004B                  		cmpi.b	#$4B,d4
0001F046 6400                       		bcc.s	loc_1BD46
0001F048                            
0001F048                            locret_1BD44:
0001F048 4E75                       		rts	
0001F04A                            ; ===========================================================================
0001F04A                            
0001F04A                            loc_1BD46:
0001F04A 1144 0030                  		move.b	d4,$30(a0)
0001F04E 2149 0032                  		move.l	a1,$32(a0)
0001F052 7AFF                       		moveq	#-1,d5
0001F054 4E75                       		rts	
0001F056                            ; End of function sub_1BD30
0001F056                            
0001F056                            
0001F056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F056                            
0001F056                            
0001F056                            Obj09_ChkItems:
0001F056 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F05C 7800                       		moveq	#0,d4
0001F05E 3828 000C                  		move.w	obY(a0),d4
0001F062 0644 0050                  		addi.w	#$50,d4
0001F066 88FC 0018                  		divu.w	#$18,d4
0001F06A C8FC 0080                  		mulu.w	#$80,d4
0001F06E D3C4                       		adda.l	d4,a1
0001F070 7800                       		moveq	#0,d4
0001F072 3828 0008                  		move.w	obX(a0),d4
0001F076 0644 0020                  		addi.w	#$20,d4
0001F07A 88FC 0018                  		divu.w	#$18,d4
0001F07E D2C4                       		adda.w	d4,a1
0001F080 1811                       		move.b	(a1),d4
0001F082 6600                       		bne.s	Obj09_ChkCont
0001F084 4A28 003A                  		tst.b	$3A(a0)
0001F088 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F08C 7800                       		moveq	#0,d4
0001F08E 4E75                       		rts	
0001F090                            ; ===========================================================================
0001F090                            
0001F090                            Obj09_ChkCont:
0001F090 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F094 6600                       		bne.s	Obj09_Chk1Up
0001F096 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F09A 6600                       		bne.s	Obj09_GetCont
0001F09C 14BC 0001                  		move.b	#1,(a2)
0001F0A0 2549 0004                  		move.l	a1,4(a2)
0001F0A4                            
0001F0A4                            Obj09_GetCont:
0001F0A4 4EB9 0000 BA5A             		jsr	(CollectRing).l
0001F0AA 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F0B0 6500                       		bcs.s	Obj09_NoCont
0001F0B2 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F0B8 6600                       		bne.s	Obj09_NoCont
0001F0BA 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F0C8                            
0001F0C8                            Obj09_NoCont:
0001F0C8 7800                       		moveq	#0,d4
0001F0CA 4E75                       		rts	
0001F0CC                            ; ===========================================================================
0001F0CC                            
0001F0CC                            Obj09_Chk1Up:
0001F0CC 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F0D0 6600                       		bne.s	Obj09_ChkEmer
0001F0D2 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F0D6 6600                       		bne.s	Obj09_Get1Up
0001F0D8 14BC 0003                  		move.b	#3,(a2)
0001F0DC 2549 0004                  		move.l	a1,4(a2)
0001F0E0                            
0001F0E0                            Obj09_Get1Up:
0001F0E0 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F0E4 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F0F2 7800                       		moveq	#0,d4
0001F0F4 4E75                       		rts	
0001F0F6                            ; ===========================================================================
0001F0F6                            
0001F0F6                            Obj09_ChkEmer:
0001F0F6 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F0FA 6500                       		bcs.s	Obj09_ChkGhost
0001F0FC 0C04 0040                  		cmpi.b	#$40,d4
0001F100 6200                       		bhi.s	Obj09_ChkGhost
0001F102 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F106 6600                       		bne.s	Obj09_GetEmer
0001F108 14BC 0005                  		move.b	#5,(a2)
0001F10C 2549 0004                  		move.l	a1,4(a2)
0001F110                            
0001F110                            Obj09_GetEmer:
0001F110 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F116 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F118 0404 003B                  		subi.b	#$3B,d4
0001F11C 7000                       		moveq	#0,d0
0001F11E 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F122 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F126 1584 0000                  		move.b	d4,(a2,d0.w)
0001F12A 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F12E                            
0001F12E                            Obj09_NoEmer:
0001F138 7800                       		moveq	#0,d4
0001F13A 4E75                       		rts	
0001F13C                            ; ===========================================================================
0001F13C                            
0001F13C                            Obj09_ChkGhost:
0001F13C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F140 6600                       		bne.s	Obj09_ChkGhostTag
0001F142 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F148                            
0001F148                            Obj09_ChkGhostTag:
0001F148 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F14C 6600                       		bne.s	Obj09_NoGhost
0001F14E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F154 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F156 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F15C                            
0001F15C                            Obj09_NoGhost:
0001F15C 78FF                       		moveq	#-1,d4
0001F15E 4E75                       		rts	
0001F160                            ; ===========================================================================
0001F160                            
0001F160                            Obj09_MakeGhostSolid:
0001F160 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F166 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F168 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F16E 723F                       		moveq	#$3F,d1
0001F170                            
0001F170                            Obj09_GhostLoop2:
0001F170 743F                       		moveq	#$3F,d2
0001F172                            
0001F172                            Obj09_GhostLoop:
0001F172 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F176 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F178 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F17C                            
0001F17C                            Obj09_NoReplace:
0001F17C 5249                       		addq.w	#1,a1
0001F17E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F182 43E9 0040                  		lea	$40(a1),a1
0001F186 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F18A                            
0001F18A                            Obj09_GhostNotSolid:
0001F18A 4228 003A                  		clr.b	$3A(a0)
0001F18E 7800                       		moveq	#0,d4
0001F190 4E75                       		rts	
0001F192                            ; End of function Obj09_ChkItems
0001F192                            
0001F192                            
0001F192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F192                            
0001F192                            
0001F192                            Obj09_ChkItems2:
0001F192 1028 0030                  		move.b	$30(a0),d0
0001F196 6600                       		bne.s	Obj09_ChkBumper
0001F198 5328 0036                  		subq.b	#1,$36(a0)
0001F19C 6A00                       		bpl.s	loc_1BEA0
0001F19E 117C 0000 0036             		move.b	#0,$36(a0)
0001F1A4                            
0001F1A4                            loc_1BEA0:
0001F1A4 5328 0037                  		subq.b	#1,$37(a0)
0001F1A8 6A00                       		bpl.s	locret_1BEAC
0001F1AA 117C 0000 0037             		move.b	#0,$37(a0)
0001F1B0                            
0001F1B0                            locret_1BEAC:
0001F1B0 4E75                       		rts	
0001F1B2                            ; ===========================================================================
0001F1B2                            
0001F1B2                            Obj09_ChkBumper:
0001F1B2 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F1B6 6600                       		bne.s	Obj09_GOAL
0001F1B8 2228 0032                  		move.l	$32(a0),d1
0001F1BC 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F1C2 3401                       		move.w	d1,d2
0001F1C4 0241 007F                  		andi.w	#$7F,d1
0001F1C8 C2FC 0018                  		mulu.w	#$18,d1
0001F1CC 0441 0014                  		subi.w	#$14,d1
0001F1D0 EE4A                       		lsr.w	#7,d2
0001F1D2 0242 007F                  		andi.w	#$7F,d2
0001F1D6 C4FC 0018                  		mulu.w	#$18,d2
0001F1DA 0442 0044                  		subi.w	#$44,d2
0001F1DE 9268 0008                  		sub.w	obX(a0),d1
0001F1E2 9468 000C                  		sub.w	obY(a0),d2
0001F1E6 4EB9 0000 3CC4             		jsr	(CalcAngle).l
0001F1EC 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F1F2 C3FC F900                  		muls.w	#-$700,d1
0001F1F6 E081                       		asr.l	#8,d1
0001F1F8 3141 0010                  		move.w	d1,obVelX(a0)
0001F1FC C1FC F900                  		muls.w	#-$700,d0
0001F200 E080                       		asr.l	#8,d0
0001F202 3140 0012                  		move.w	d0,obVelY(a0)
0001F206 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F20C 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F210 6600                       		bne.s	Obj09_BumpSnd
0001F212 14BC 0002                  		move.b	#2,(a2)
0001F216 2028 0032                  		move.l	$32(a0),d0
0001F21A 5380                       		subq.l	#1,d0
0001F21C 2540 0004                  		move.l	d0,4(a2)
0001F220                            
0001F220                            Obj09_BumpSnd:
0001F22A                            ; ===========================================================================
0001F22A                            
0001F22A                            Obj09_GOAL:
0001F22A 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F22E 6600                       		bne.s	Obj09_UPblock
0001F230 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F23E 4E75                       		rts	
0001F240                            ; ===========================================================================
0001F240                            
0001F240                            Obj09_UPblock:
0001F240 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F244 6600                       		bne.s	Obj09_DOWNblock
0001F246 4A28 0036                  		tst.b	$36(a0)
0001F24A 6600 0000                  		bne.w	Obj09_NoGlass
0001F24E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F254 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F25A 6700                       		beq.s	Obj09_UPsnd
0001F25C E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F260 2268 0032                  		movea.l	$32(a0),a1
0001F264 5389                       		subq.l	#1,a1
0001F266 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F26A                            
0001F26A                            Obj09_UPsnd:
0001F274                            ; ===========================================================================
0001F274                            
0001F274                            Obj09_DOWNblock:
0001F274 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F278 6600                       		bne.s	Obj09_Rblock
0001F27A 4A28 0036                  		tst.b	$36(a0)
0001F27E 6600 0000                  		bne.w	Obj09_NoGlass
0001F282 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F288 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F28E 6600                       		bne.s	Obj09_DOWNsnd
0001F290 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F294 2268 0032                  		movea.l	$32(a0),a1
0001F298 5389                       		subq.l	#1,a1
0001F29A 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F29E                            
0001F29E                            Obj09_DOWNsnd:
0001F2A8                            ; ===========================================================================
0001F2A8                            
0001F2A8                            Obj09_Rblock:
0001F2A8 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F2AC 6600                       		bne.s	Obj09_ChkGlass
0001F2AE 4A28 0037                  		tst.b	$37(a0)
0001F2B2 6600 0000                  		bne.w	Obj09_NoGlass
0001F2B6 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F2BC 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F2C0 6600                       		bne.s	Obj09_RevStage
0001F2C2 14BC 0004                  		move.b	#4,(a2)
0001F2C6 2028 0032                  		move.l	$32(a0),d0
0001F2CA 5380                       		subq.l	#1,d0
0001F2CC 2540 0004                  		move.l	d0,4(a2)
0001F2D0                            
0001F2D0                            Obj09_RevStage:
0001F2D0 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F2DE                            ; ===========================================================================
0001F2DE                            
0001F2DE                            Obj09_ChkGlass:
0001F2DE 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F2E2 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F2E4 0C00 002E                  		cmpi.b	#$2E,d0
0001F2E8 6700                       		beq.s	Obj09_Glass
0001F2EA 0C00 002F                  		cmpi.b	#$2F,d0
0001F2EE 6700                       		beq.s	Obj09_Glass
0001F2F0 0C00 0030                  		cmpi.b	#$30,d0
0001F2F4 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F2F6                            
0001F2F6                            Obj09_Glass:
0001F2F6 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F2FA 6600                       		bne.s	Obj09_GlassSnd
0001F2FC 14BC 0006                  		move.b	#6,(a2)
0001F300 2268 0032                  		movea.l	$32(a0),a1
0001F304 5389                       		subq.l	#1,a1
0001F306 2549 0004                  		move.l	a1,4(a2)
0001F30A 1011                       		move.b	(a1),d0
0001F30C 5200                       		addq.b	#1,d0		; change glass type when touched
0001F30E 0C00 0030                  		cmpi.b	#$30,d0
0001F312 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F314 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F316                            
0001F316                            Obj09_GlassUpdate:
0001F316 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F31A                            
0001F31A                            Obj09_GlassSnd:
0001F324                            ; ===========================================================================
0001F324                            
0001F324                            Obj09_NoGlass:
0001F324 4E75                       		rts	
0001F326                            ; End of function Obj09_ChkItems2
0001F326                            ; End of function Obj09_ChkItems2
0001F326                            
0001F326                            		include	"_incObj\10.asm"
0001F326                            ; ---------------------------------------------------------------------------
0001F326                            ; Object 10 - After-Image
0001F326                            ; ---------------------------------------------------------------------------
0001F326                            
0001F326                            Obj10:
0001F326 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F32C 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F330                            
0001F330 7000                             moveq   #0,d0
0001F332 1028 0024                        move.b   obRoutine(a0),d0
0001F336 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F33A 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F33E                            
0001F33E                            ; ===========================================================================
0001F33E                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F33E                            ; ===========================================================================
0001F33E                            Afterimage_Index:
0001F33E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F340 0000                             dc.w NoAfterImage-Afterimage_Index
0001F342 0000                             dc.w NoAfterImage-Afterimage_Index
0001F344 0000                             dc.w AfterimageStart-Afterimage_Index
0001F346 0000                             dc.w NoAfterImage-Afterimage_Index
0001F348 0000                             dc.w NoAfterImage-Afterimage_Index
0001F34A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F34C 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F34E 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F350                            ; ===========================================================================
0001F350                            NoAfterImage:
0001F350 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F354 4E75                             rts
0001F356                            ; ===========================================================================
0001F356                            AfterimageStart:
0001F356 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F35C 6000                             bra.s   Afterimage_Show
0001F35E                            ; ===========================================================================
0001F35E                            AfterimageLPrio:
0001F35E 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F362                            ; ===========================================================================
0001F362                            Afterimage_Show:
0001F362 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F366 4EB9 0000 3A0C                   jsr   (RandomNumber).l         ; get a random number
0001F36C 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F370 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F372 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F374                            
0001F374                            AfterimageException:
0001F374 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F37A 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F380 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F386 4EF9 0000 F70C                   jmp   DisplaySprite
0001F38C                            ; ===========================================================================
0001F38C                            AfterimageEnd:
0001F38C 4EF9 0000 F74C                   jmp   DeleteObject
0001F38C 4EF9 0000 F74C                   jmp   DeleteObject
0001F392                            
0001F392                            		include	"_inc\AnimateLevelGfx.asm"
0001F392                            ; ---------------------------------------------------------------------------
0001F392                            ; Subroutine to	animate	level graphics
0001F392                            ; ---------------------------------------------------------------------------
0001F392                            
0001F392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F392                            
0001F392                            
0001F392                            AnimateLevelGfx:
0001F392                            		;tst.w	(f_pause).w	; is the game paused?
0001F392                            		;bne.s	@ispaused	; if yes, branch
0001F392 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F398 6100 0000                  		bsr.w	AniArt_GiantRing
0001F39C 7000                       		moveq	#0,d0
0001F39E 1038 FE10                  		move.b	(v_zone).w,d0
0001F3A2 D040                       		add.w	d0,d0
0001F3A4 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F3A8 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F3AC                            
0001F3AC                            	@ispaused:
0001F3AC 4E75                       		rts	
0001F3AE                            
0001F3AE                            ; ===========================================================================
0001F3AE 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F3B2 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F3B6 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F3BA 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F3BC                            ; ===========================================================================
0001F3BC                            ; ---------------------------------------------------------------------------
0001F3BC                            ; Animated pattern routine - Green Hill
0001F3BC                            ; ---------------------------------------------------------------------------
0001F3BC                            
0001F3BC                            AniArt_GHZ:
0001F3BC                            
0001F3BC                            AniArt_GHZ_Waterfall:
0001F3BC                            
0001F3BC =00000008                  @size:		equ 8	; number of tiles per frame
0001F3BC                            
0001F3BC 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F3C0 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F3C2                            
0001F3C2 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F3C8 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F3CE 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F3D2 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F3D6 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F3DA 6700                       		beq.s	@isframe0	; branch if frame 0
0001F3DC 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F3E0                            
0001F3E0                            	@isframe0:
0001F3EA 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F3EE 6000 0000                  		bra.w	LoadTiles
0001F3F2                            ; ===========================================================================
0001F3F2                            
0001F3F2                            AniArt_GHZ_Bigflower:
0001F3F2                            
0001F3F2 =00000010                  @size:		equ 16	; number of tiles per frame
0001F3F2                            
0001F3F2 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F3F6 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F3F8                            
0001F3F8 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F3FE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F404 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F408 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F40C 0240 0001                  		andi.w	#1,d0
0001F410 6700                       		beq.s	@isframe0
0001F412 43E9 0200                  		lea	@size*$20(a1),a1
0001F416                            
0001F416                            	@isframe0:
0001F420 323C 000F                  		move.w	#@size-1,d1
0001F424 6000 0000                  		bra.w	LoadTiles
0001F428                            ; ===========================================================================
0001F428                            
0001F428                            AniArt_GHZ_Smallflower:
0001F428                            
0001F428 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F428                            
0001F428 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F42C 6A00                       		bpl.s	@end
0001F42E                            
0001F42E 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F434 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F438 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F43C 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F440 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F444 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F448 6600                       		bne.s	@isframe1	; if not, branch
0001F44A 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F450                            
0001F450                            	@isframe1:
0001F450 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F452 3200                       		move.w	d0,d1
0001F454 D040                       		add.w	d0,d0
0001F456 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F462 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F468 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F46C 323C 000B                  		move.w	#@size-1,d1
0001F470 6100 0000                  		bsr.w	LoadTiles
0001F474                            
0001F474                            @end:
0001F474 4E75                       		rts	
0001F476                            
0001F476 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F47A                            ; ===========================================================================
0001F47A                            ; ---------------------------------------------------------------------------
0001F47A                            ; Animated pattern routine - Marble
0001F47A                            ; ---------------------------------------------------------------------------
0001F47A                            
0001F47A                            AniArt_MZ:
0001F47A                            
0001F47A                            AniArt_MZ_Lava:
0001F47A                            
0001F47A =00000008                  @size:		equ 8	; number of tiles per frame
0001F47A                            
0001F47A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F47E 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F480                            
0001F480 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F486 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F48C 7000                       		moveq	#0,d0
0001F48E 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F492 5200                       		addq.b	#1,d0		; increment frame counter
0001F494 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F498 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F49A 7000                       		moveq	#0,d0
0001F49C                            
0001F49C                            	@frame01or2:
0001F49C 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F4A0 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F4A4 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F4B0 323C 0007                  		move.w	#@size-1,d1
0001F4B4 6100 0000                  		bsr.w	LoadTiles
0001F4B8                            
0001F4B8                            AniArt_MZ_Magma:
0001F4B8 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F4BC 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F4BE                            		
0001F4BE 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F4C4 7000                       		moveq	#0,d0
0001F4C6 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F4CA 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F4D0 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F4D2 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F4DE 7600                       		moveq	#0,d3
0001F4E0 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F4E4 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F4E8 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F4EC 343C 0003                  		move.w	#3,d2
0001F4F0                            
0001F4F0                            	@loop:
0001F4F0 3003                       		move.w	d3,d0
0001F4F2 D040                       		add.w	d0,d0
0001F4F4 0240 001E                  		andi.w	#$1E,d0
0001F4F8 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F4FE 3033 0000                  		move.w	(a3,d0.w),d0
0001F502 47F3 0000                  		lea	(a3,d0.w),a3
0001F506 224C                       		movea.l	a4,a1
0001F508 323C 001F                  		move.w	#$1F,d1
0001F50C 4E93                       		jsr	(a3)
0001F50E 5843                       		addq.w	#4,d3
0001F510 51CA FFDE                  		dbf	d2,@loop
0001F514 4E75                       		rts	
0001F516                            ; ===========================================================================
0001F516                            
0001F516                            AniArt_MZ_Torch:
0001F516                            
0001F516 =00000006                  @size:		equ 6	; number of tiles per frame
0001F516                            
0001F516 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F51A 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F51E                            		
0001F51E 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F524 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F52A 7000                       		moveq	#0,d0
0001F52C 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F530 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F534 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F53A C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F53E D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F54A 323C 0005                  		move.w	#@size-1,d1
0001F54E 6000 0000                  		bra.w	LoadTiles
0001F552                            
0001F552                            @end:
0001F552 4E75                       		rts	
0001F554                            ; ===========================================================================
0001F554                            ; ---------------------------------------------------------------------------
0001F554                            ; Animated pattern routine - Scrap Brain
0001F554                            ; ---------------------------------------------------------------------------
0001F554                            
0001F554                            AniArt_SBZ:
0001F554                            
0001F554 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F554                            
0001F554 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F558 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F55A                            		
0001F55A 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F55E 6000                       		bra.s	@chk_smokepuff2
0001F560                            ; ===========================================================================
0001F560                            
0001F560                            @smokepuff:
0001F560 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F564 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F566                            		
0001F566 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F56C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F57C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F580 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F584 0240 0007                  		andi.w	#7,d0
0001F588 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F58A 5340                       		subq.w	#1,d0
0001F58C C0FC 0180                  		mulu.w	#@size*$20,d0
0001F590 43F1 0000                  		lea	(a1,d0.w),a1
0001F594 323C 000B                  		move.w	#@size-1,d1
0001F598 6000 0000                  		bra.w	LoadTiles
0001F59C                            ; ===========================================================================
0001F59C                            
0001F59C                            @untilnextpuff:
0001F59C 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F5A2                            
0001F5A2                            @clearsky:
0001F5A2 323C 0005                  		move.w	#(@size/2)-1,d1
0001F5A6 6100 0000                  		bsr.w	LoadTiles
0001F5AA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F5B0 323C 0005                  		move.w	#(@size/2)-1,d1
0001F5B4 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F5B8                            ; ===========================================================================
0001F5B8                            
0001F5B8                            @chk_smokepuff2:
0001F5B8 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F5BC 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F5BE                            		
0001F5BE 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F5C2 6000                       		bra.s	@end
0001F5C4                            ; ===========================================================================
0001F5C4                            
0001F5C4                            @smokepuff2:
0001F5C4 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F5C8 6A00                       		bpl.s	@end		; branch if not 0
0001F5CA                            		
0001F5CA 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F5D0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F5E0 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F5E4 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F5E8 0240 0007                  		andi.w	#7,d0
0001F5EC 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F5EE 5340                       		subq.w	#1,d0
0001F5F0 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F5F4 43F1 0000                  		lea	(a1,d0.w),a1
0001F5F8 323C 000B                  		move.w	#@size-1,d1
0001F5FC 6000 0000                  		bra.w	LoadTiles
0001F600                            ; ===========================================================================
0001F600                            
0001F600                            @untilnextpuff2:
0001F600 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F606 609A                       		bra.s	@clearsky
0001F608                            ; ===========================================================================
0001F608                            
0001F608                            @end:
0001F608 4E75                       		rts	
0001F60A                            ; ===========================================================================
0001F60A                            ; ---------------------------------------------------------------------------
0001F60A                            ; Animated pattern routine - ending sequence
0001F60A                            ; ---------------------------------------------------------------------------
0001F60A                            
0001F60A                            AniArt_Ending:
0001F60A                            
0001F60A                            AniArt_Ending_BigFlower:
0001F60A                            
0001F60A =00000010                  @size:		equ 16	; number of tiles per frame
0001F60A                            
0001F60A 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F60E 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F610                            		
0001F610 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F616 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F61C 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F620 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F624 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F628 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F62C 6700                       		beq.s	@isframe0	; branch if frame 0
0001F62E 43E9 0200                  		lea	@size*$20(a1),a1
0001F632 45EA 0200                  		lea	@size*$20(a2),a2
0001F636                            
0001F636                            	@isframe0:
0001F640 323C 000F                  		move.w	#@size-1,d1
0001F644 6100 0000                  		bsr.w	LoadTiles
0001F648 224A                       		movea.l	a2,a1
0001F654 323C 000F                  		move.w	#@size-1,d1
0001F658 6000 0000                  		bra.w	LoadTiles
0001F65C                            ; ===========================================================================
0001F65C                            
0001F65C                            AniArt_Ending_SmallFlower:
0001F65C                            
0001F65C =0000000C                  @size:		equ 12	; number of tiles per frame
0001F65C                            
0001F65C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F660 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F662                            		
0001F662 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F668 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F66C 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F670 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F674 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F678 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F67A 3200                       		move.w	d0,d1
0001F67C D040                       		add.w	d0,d0
0001F67E D041                       		add.w	d1,d0		; multiply by 3
0001F68A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F690 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F694 323C 000B                  		move.w	#@size-1,d1
0001F698 6000 0000                  		bra.w	LoadTiles
0001F69C                            ; ===========================================================================
0001F69C 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F6A4                            ; ===========================================================================
0001F6A4                            
0001F6A4                            AniArt_Ending_Flower3:
0001F6A4                            
0001F6A4 =00000010                  @size:		equ 16	; number of tiles per frame
0001F6A4                            
0001F6A4 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F6A8 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F6AA                            		
0001F6AA 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F6B0 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F6B4 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F6B8 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F6BC 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F6C0 E148                       		lsl.w	#8,d0		; multiply by $100
0001F6C2 D040                       		add.w	d0,d0		; multiply by 2
0001F6CE 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F6D2 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F6D6 323C 000F                  		move.w	#@size-1,d1
0001F6DA 6000 0000                  		bra.w	LoadTiles
0001F6DE                            ; ===========================================================================
0001F6DE 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F6E2                            ; ===========================================================================
0001F6E2                            
0001F6E2                            AniArt_Ending_Flower4:
0001F6E2                            
0001F6E2 =00000010                  @size:		equ 16	; number of tiles per frame
0001F6E2                            
0001F6E2 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F6E6 6A00                       		bpl.s	@end		; branch if not 0
0001F6E8                            		
0001F6E8 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F6EE 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F6F2 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F6F6 0240 0003                  		andi.w	#3,d0
0001F6FA 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F6FE E148                       		lsl.w	#8,d0		; multiply by $100
0001F700 D040                       		add.w	d0,d0		; multiply by 2
0001F70C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F710 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F714 323C 000F                  		move.w	#@size-1,d1
0001F718 6000 0000                  		bra.w	LoadTiles
0001F71C                            ; ===========================================================================
0001F71C                            
0001F71C                            @end:
0001F71C 4E75                       		rts	
0001F71E                            ; ===========================================================================
0001F71E                            
0001F71E                            AniArt_none:
0001F71E 4E75                       		rts	
0001F720                            
0001F720                            ; ---------------------------------------------------------------------------
0001F720                            ; Subroutine to	transfer graphics to VRAM
0001F720                            
0001F720                            ; input:
0001F720                            ;	a1 = source address
0001F720                            ;	a6 = vdp_data_port ($C00000)
0001F720                            ;	d1 = number of tiles to load (minus one)
0001F720                            ; ---------------------------------------------------------------------------
0001F720                            
0001F720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F720                            
0001F720                            
0001F720                            LoadTiles:
0001F720 2C99                       		move.l	(a1)+,(a6)
0001F722 2C99                       		move.l	(a1)+,(a6)
0001F724 2C99                       		move.l	(a1)+,(a6)
0001F726 2C99                       		move.l	(a1)+,(a6)
0001F728 2C99                       		move.l	(a1)+,(a6)
0001F72A 2C99                       		move.l	(a1)+,(a6)
0001F72C 2C99                       		move.l	(a1)+,(a6)
0001F72E 2C99                       		move.l	(a1)+,(a6)
0001F730 51C9 FFEE                  		dbf	d1,LoadTiles
0001F734 4E75                       		rts	
0001F736                            ; End of function LoadTiles
0001F736                            
0001F736                            ; ===========================================================================
0001F736                            ; ---------------------------------------------------------------------------
0001F736                            ; Animated pattern routine - more Marble Zone
0001F736                            ; ---------------------------------------------------------------------------
0001F736 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F73A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F73E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F742 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F746 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F74A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F74E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F752 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F756                            ; ===========================================================================
0001F756                            
0001F756                            loc_1C3EE:
0001F756 2C91                       		move.l	(a1),(a6)
0001F758 43E9 0010                  		lea	$10(a1),a1
0001F75C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F760 4E75                       		rts	
0001F762                            ; ===========================================================================
0001F762                            
0001F762                            loc_1C3FA:
0001F762 2029 0002                  		move.l	2(a1),d0
0001F766 1029 0001                  		move.b	1(a1),d0
0001F76A E098                       		ror.l	#8,d0
0001F76C 2C80                       		move.l	d0,(a6)
0001F76E 43E9 0010                  		lea	$10(a1),a1
0001F772 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F776 4E75                       		rts	
0001F778                            ; ===========================================================================
0001F778                            
0001F778                            loc_1C410:
0001F778 2CA9 0002                  		move.l	2(a1),(a6)
0001F77C 43E9 0010                  		lea	$10(a1),a1
0001F780 51C9 FFF6                  		dbf	d1,loc_1C410
0001F784 4E75                       		rts	
0001F786                            ; ===========================================================================
0001F786                            
0001F786                            loc_1C41E:
0001F786 2029 0004                  		move.l	4(a1),d0
0001F78A 1029 0003                  		move.b	3(a1),d0
0001F78E E098                       		ror.l	#8,d0
0001F790 2C80                       		move.l	d0,(a6)
0001F792 43E9 0010                  		lea	$10(a1),a1
0001F796 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F79A 4E75                       		rts	
0001F79C                            ; ===========================================================================
0001F79C                            
0001F79C                            loc_1C434:
0001F79C 2CA9 0004                  		move.l	4(a1),(a6)
0001F7A0 43E9 0010                  		lea	$10(a1),a1
0001F7A4 51C9 FFF6                  		dbf	d1,loc_1C434
0001F7A8 4E75                       		rts	
0001F7AA                            ; ===========================================================================
0001F7AA                            
0001F7AA                            loc_1C442:
0001F7AA 2029 0006                  		move.l	6(a1),d0
0001F7AE 1029 0005                  		move.b	5(a1),d0
0001F7B2 E098                       		ror.l	#8,d0
0001F7B4 2C80                       		move.l	d0,(a6)
0001F7B6 43E9 0010                  		lea	$10(a1),a1
0001F7BA 51C9 FFEE                  		dbf	d1,loc_1C442
0001F7BE 4E75                       		rts	
0001F7C0                            ; ===========================================================================
0001F7C0                            
0001F7C0                            loc_1C458:
0001F7C0 2CA9 0006                  		move.l	6(a1),(a6)
0001F7C4 43E9 0010                  		lea	$10(a1),a1
0001F7C8 51C9 FFF6                  		dbf	d1,loc_1C458
0001F7CC 4E75                       		rts	
0001F7CE                            ; ===========================================================================
0001F7CE                            
0001F7CE                            loc_1C466:
0001F7CE 2029 0008                  		move.l	8(a1),d0
0001F7D2 1029 0007                  		move.b	7(a1),d0
0001F7D6 E098                       		ror.l	#8,d0
0001F7D8 2C80                       		move.l	d0,(a6)
0001F7DA 43E9 0010                  		lea	$10(a1),a1
0001F7DE 51C9 FFEE                  		dbf	d1,loc_1C466
0001F7E2 4E75                       		rts	
0001F7E4                            ; ===========================================================================
0001F7E4                            
0001F7E4                            loc_1C47C:
0001F7E4 2CA9 0008                  		move.l	8(a1),(a6)
0001F7E8 43E9 0010                  		lea	$10(a1),a1
0001F7EC 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F7F0 4E75                       		rts	
0001F7F2                            ; ===========================================================================
0001F7F2                            
0001F7F2                            loc_1C48A:
0001F7F2 2029 000A                  		move.l	$A(a1),d0
0001F7F6 1029 0009                  		move.b	9(a1),d0
0001F7FA E098                       		ror.l	#8,d0
0001F7FC 2C80                       		move.l	d0,(a6)
0001F7FE 43E9 0010                  		lea	$10(a1),a1
0001F802 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F806 4E75                       		rts	
0001F808                            ; ===========================================================================
0001F808                            
0001F808                            loc_1C4A0:
0001F808 2CA9 000A                  		move.l	$A(a1),(a6)
0001F80C 43E9 0010                  		lea	$10(a1),a1
0001F810 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F814 4E75                       		rts	
0001F816                            ; ===========================================================================
0001F816                            
0001F816                            loc_1C4AE:
0001F816 2029 000C                  		move.l	$C(a1),d0
0001F81A 1029 000B                  		move.b	$B(a1),d0
0001F81E E098                       		ror.l	#8,d0
0001F820 2C80                       		move.l	d0,(a6)
0001F822 43E9 0010                  		lea	$10(a1),a1
0001F826 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F82A 4E75                       		rts	
0001F82C                            ; ===========================================================================
0001F82C                            
0001F82C                            loc_1C4C4:
0001F82C 2CA9 000C                  		move.l	$C(a1),(a6)
0001F830 43E9 0010                  		lea	$10(a1),a1
0001F834 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F838 4E75                       		rts	
0001F83A                            ; ===========================================================================
0001F83A                            
0001F83A                            loc_1C4D2:
0001F83A 2029 000C                  		move.l	$C(a1),d0
0001F83E E198                       		rol.l	#8,d0
0001F840 1011                       		move.b	0(a1),d0
0001F842 2C80                       		move.l	d0,(a6)
0001F844 43E9 0010                  		lea	$10(a1),a1
0001F848 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F84C 4E75                       		rts	
0001F84E                            ; ===========================================================================
0001F84E                            
0001F84E                            loc_1C4E8:
0001F84E 3CA9 000E                  		move.w	$E(a1),(a6)
0001F852 3C91                       		move.w	0(a1),(a6)
0001F854 43E9 0010                  		lea	$10(a1),a1
0001F858 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F85C 4E75                       		rts	
0001F85E                            ; ===========================================================================
0001F85E                            
0001F85E                            loc_1C4FA:
0001F85E 2011                       		move.l	0(a1),d0
0001F860 1029 000F                  		move.b	$F(a1),d0
0001F864 E098                       		ror.l	#8,d0
0001F866 2C80                       		move.l	d0,(a6)
0001F868 43E9 0010                  		lea	$10(a1),a1
0001F86C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F870 4E75                       		rts	
0001F872                            
0001F872                            ; ---------------------------------------------------------------------------
0001F872                            ; Animated pattern routine - giant ring
0001F872                            ; ---------------------------------------------------------------------------
0001F872                            
0001F872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F872                            
0001F872                            
0001F872                            AniArt_GiantRing:
0001F872                            
0001F872 =0000000E                  @size:		equ 14
0001F872                            
0001F872 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F876 6600                       		bne.s	@loadTiles		; If so, get to work
0001F878 4E75                       		rts	
0001F87A                            ; ===========================================================================
0001F87A                            ; loc_1C518:
0001F87A                            @loadTiles:
0001F87A 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F880 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F886 7000                       		moveq	#0,d0
0001F888 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F88C 43F1 0000                  		lea	(a1,d0.w),a1
0001F890                            		; Turn VRAM address into VDP command
0001F890 0640 8000                  		addi.w	#$8000,d0
0001F894 E588                       		lsl.l	#2,d0
0001F896 E448                       		lsr.w	#2,d0
0001F898 0040 4000                  		ori.w	#$4000,d0
0001F89C 4840                       		swap	d0
0001F89E                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F89E 2D40 0004                  		move.l	d0,4(a6)
0001F8A2                            
0001F8A2 323C 000D                  		move.w	#@size-1,d1
0001F8A6 6000 FE78                  		bra.w	LoadTiles
0001F8AA                            
0001F8AA                            ; End of function AniArt_GiantRing
0001F8AA                            ; End of function AniArt_GiantRing
0001F8AA                            
0001F8AA                            		include	"_incObj\21 HUD.asm"
0001F8AA                            ; ---------------------------------------------------------------------------
0001F8AA                            ; Object 21 - SCORE, TIME, RINGS
0001F8AA                            ; ---------------------------------------------------------------------------
0001F8AA                            
0001F8AA                            HUD:
0001F8AA 7000                       		moveq	#0,d0
0001F8AC 1028 0024                  		move.b	obRoutine(a0),d0
0001F8B0 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F8B4 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F8B8                            ; ===========================================================================
0001F8B8 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F8BA 0000                       		dc.w HUD_Flash-HUD_Index
0001F8BC                            ; ===========================================================================
0001F8BC                            
0001F8BC                            HUD_Main:	; Routine 0
0001F8BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F8C0 317C 0090 0008             		move.w	#$90,obX(a0)
0001F8C6 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F8CC 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F8D4 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F8DA 117C 0000 0001             		move.b	#0,obRender(a0)
0001F8E0 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F8E6                            
0001F8E6                            HUD_Flash:	; Routine 2
0001F8E6 7000                       		moveq	#0,d0
0001F8E8 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F8EE 6600                       		bne.s	@display
0001F8F0 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F8F4 6600                       		bne.s	@norings	; if so, branch
0001F8F6 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F8F8                            ; ===========================================================================
0001F8F8                            
0001F8F8                            @norings:
0001F8F8 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F8FE 6600                       		bne.s	@display	; if not, branch
0001F900 5440                       		addq.w	#2,d0		; make time counter flash red
0001F902                            
0001F902                            	@display:
0001F902 1140 001A                  		move.b	d0,obFrame(a0)
0001F906 4EF9 0000 F70C             		jmp	DisplaySprite
0001F906 4EF9 0000 F70C             		jmp	DisplaySprite
0001F90C                            Map_HUD:	include	"_maps\HUD.asm"
0001F90C                            ; ---------------------------------------------------------------------------
0001F90C                            ; Sprite mappings - SCORE, TIME, RINGS
0001F90C                            ; ---------------------------------------------------------------------------
0001F90C                            Map_HUD_internal:
0001F90C 0000 0000                  		dc.w @allyellow-Map_HUD, @ringred-Map_HUD
0001F910 0000 0000                  		dc.w @timered-Map_HUD, @allred-Map_HUD
0001F914 0A                         @allyellow:	dc.b $A
0001F915 800D 8000 00               		dc.b $80, $D, $80, 0, 0		; SCOR
0001F91A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20	; E nnn
0001F91F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40	; nnnn
0001F924 900D 8010 00               		dc.b $90, $D, $80, $10,	0	; TIME
0001F929 900D 8028 28               		dc.b $90, $D, $80, $28,	$28	; n:nn
0001F92E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0		; RING
0001F933 A001 8000 20               		dc.b $A0, 1, $80, 0, $20	; S
0001F938 A009 8030 30               		dc.b $A0, 9, $80, $30, $30	; rings
0001F93D 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; icon
0001F942 400D 810E 10               		dc.b $40, $D, $81, $E, $10	; SONIC x nn
0001F947 00                         		dc.b 0
0001F948 08                         @ringred:	dc.b $8
0001F949 800D 8000 00               		dc.b $80, $D, $80, 0, 0		; SCOR
0001F94E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20	; E nnn
0001F953 800D 8020 40               		dc.b $80, $D, $80, $20,	$40	; nnnn
0001F958 900D 8010 00               		dc.b $90, $D, $80, $10,	0	; TIME
0001F95D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28	; n:nn
0001F962 A009 8030 30               		dc.b $A0, 9, $80, $30, $30	; rings
0001F967 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; icon
0001F96C 400D 810E 10               		dc.b $40, $D, $81, $E, $10	; SONIC x nn
0001F971 00                         		dc.b 0
0001F972 09                         @timered:	dc.b $9
0001F973 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F978 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F97D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F982 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F987 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F98C A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F991 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F996 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F99B 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F9A0 00                         		dc.b 0
0001F9A1 07                         @allred:	dc.b $7
0001F9A2 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F9A7 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F9AC 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F9B1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F9B6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F9BB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F9C0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F9C6 00                         		even
0001F9C6 00                         		even
0001F9C6                            
0001F9C6                            ; ---------------------------------------------------------------------------
0001F9C6                            ; Add points subroutine
0001F9C6                            ; ---------------------------------------------------------------------------
0001F9C6                            
0001F9C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F9C6                            
0001F9C6                            
0001F9C6                            AddPoints:
0001F9C6 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001F9CC                            
0001F9CC                            
0001F9CC 47F8 FE26                  			lea     (v_score).w,a3
0001F9D0 D193                       			add.l   d0,(a3)
0001F9D2 223C 000F 423F             			move.l  #999999,d1
0001F9D8 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001F9DA 6200                       			bhi.s   @belowmax ; if yes, branch
0001F9DC 2681                       			move.l  d1,(a3) ; reset score to 999999
0001F9DE                            		@belowmax:
0001F9DE 2013                       			move.l  (a3),d0
0001F9E0 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001F9E4 6500                       			blo.s   @noextralife ; if not, branch
0001F9E6                            
0001F9E6 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001F9EE 4A38 FFF8                  			tst.b   (v_megadrive).w
0001F9F2 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001F9F4 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001F9F8 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FA06                            
0001FA06                            @locret_1C6B6:
0001FA06                            @noextralife:
0001FA06 4E75                       		rts	
0001FA08                            ; End of function AddPoints
0001FA08                            
0001FA08                            		include	"_inc\HUD_Update.asm"
0001FA08                            ; ---------------------------------------------------------------------------
0001FA08                            ; Subroutine to	update the HUD
0001FA08                            ; ---------------------------------------------------------------------------
0001FA08                            
0001FA08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA08                            
0001FA08                            hudVRAM:	macro loc
0001FA08                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FA08                            		endm
0001FA08                            
0001FA08                            
0001FA08                            HUD_Update:
0001FA08 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FA0C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FA10 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FA14 6700                       		beq.s	@chkrings	; if not, branch
0001FA16                            
0001FA16 4238 FE1F                  		clr.b	(f_scorecount).w
0001FA1A 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FA20 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FA24 6100 0000                  		bsr.w	Hud_Score
0001FA28                            
0001FA28                            	@chkrings:
0001FA28 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FA2C 6700                       		beq.s	@chktime	; if not, branch
0001FA2E 6A00                       		bpl.s	@notzero
0001FA30 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FA34                            
0001FA34                            	@notzero:
0001FA34 4238 FE1D                  		clr.b	(f_ringcount).w
0001FA38 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FA3E 7200                       		moveq	#0,d1
0001FA40 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FA44 6100 0000                  		bsr.w	Hud_Rings
0001FA48                            
0001FA48                            	@chktime:
0001FA48 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FA4C 6700                       		beq.s	@chklives	; if not, branch
0001FA4E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FA52 6600                       		bne.s	@chklives	; if yes, branch
0001FA54 43F8 FE22                  		lea	(v_time).w,a1
0001FA58 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FA5E 6700                       		beq.s	TimeOver	; if yes, branch
0001FA60                            
0001FA60 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FA62 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FA66 6500                       		bcs.s	@chklives
0001FA68 12BC 0000                  		move.b	#0,(a1)
0001FA6C 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FA6E 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FA72 6500                       		bcs.s	@updatetime
0001FA74 12BC 0000                  		move.b	#0,(a1)
0001FA78 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FA7A 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FA7E 6500                       		bcs.s	@updatetime
0001FA80 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FA84                            
0001FA84                            	@updatetime:
0001FA84 203C 5E40 0003             		hudVRAM	$DE40
0001FA8A 7200                       		moveq	#0,d1
0001FA8C 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FA90 6100 0000                  		bsr.w	Hud_Mins
0001FA94 203C 5EC0 0003             		hudVRAM	$DEC0
0001FA9A 7200                       		moveq	#0,d1
0001FA9C 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FAA0 6100 0000                  		bsr.w	Hud_Secs
0001FAA4                            
0001FAA4                            	@chklives:
0001FAA4 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FAA8 6700                       		beq.s	@chkbonus	; if not, branch
0001FAAA 4238 FE1C                  		clr.b	(f_lifecount).w
0001FAAE 6100 0000                  		bsr.w	Hud_Lives
0001FAB2                            
0001FAB2                            	@chkbonus:
0001FAB2 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FAB6 6700                       		beq.s	@finish		; if not, branch
0001FAB8 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FAC6 7200                       		moveq	#0,d1
0001FAC8 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FACC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FAD0 7200                       		moveq	#0,d1
0001FAD2 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FAD6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FADA                            
0001FADA                            	@finish:
0001FADA 4E75                       		rts	
0001FADC                            ; ===========================================================================
0001FADC                            
0001FADC                            TimeOver:
0001FADC 4238 FE1E                  		clr.b	(f_timecount).w
0001FAE0 41F8 D000                  		lea	(v_player).w,a0
0001FAE4 2448                       		movea.l	a0,a2
0001FAE6 6100 E85E                  		bsr.w	KillSonic
0001FAEA 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FAF0 4E75                       		rts	
0001FAF2                            ; ===========================================================================
0001FAF2                            
0001FAF2                            HudDebug:
0001FAF2 6100 0000                  		bsr.w	HudDb_XY
0001FAF6 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FAFA 6700                       		beq.s	@objcounter	; if not, branch
0001FAFC 6A00                       		bpl.s	@notzero
0001FAFE 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FB02                            
0001FB02                            	@notzero:
0001FB02 4238 FE1D                  		clr.b	(f_ringcount).w
0001FB06 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FB0C 7200                       		moveq	#0,d1
0001FB0E 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FB12 6100 0000                  		bsr.w	Hud_Rings
0001FB16                            
0001FB16                            	@objcounter:
0001FB16 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FB1C 7200                       		moveq	#0,d1
0001FB1E 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FB22 6100 0000                  		bsr.w	Hud_Secs
0001FB26 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FB2A 6700                       		beq.s	@chkbonus	; if not, branch
0001FB2C 4238 FE1C                  		clr.b	(f_lifecount).w
0001FB30 6100 0000                  		bsr.w	Hud_Lives
0001FB34                            
0001FB34                            	@chkbonus:
0001FB34 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FB38 6700                       		beq.s	@finish		; if not, branch
0001FB3A 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FB48 7200                       		moveq	#0,d1
0001FB4A 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FB4E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB52 7200                       		moveq	#0,d1
0001FB54 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FB58 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB5C                            
0001FB5C                            	@finish:
0001FB5C 4E75                       		rts	
0001FB5E                            ; End of function HUD_Update
0001FB5E                            
0001FB5E                            ; ---------------------------------------------------------------------------
0001FB5E                            ; Subroutine to	load "0" on the	HUD
0001FB5E                            ; ---------------------------------------------------------------------------
0001FB5E                            
0001FB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB5E                            
0001FB5E                            
0001FB5E                            Hud_LoadZero:
0001FB68 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FB6C 343C 0002                  		move.w	#2,d2
0001FB70 6000                       		bra.s	loc_1C83E
0001FB72                            ; End of function Hud_LoadZero
0001FB72                            
0001FB72                            ; ---------------------------------------------------------------------------
0001FB72                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FB72                            ; ---------------------------------------------------------------------------
0001FB72                            
0001FB72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB72                            
0001FB72                            
0001FB72                            Hud_Base:
0001FB72 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FB78 6100 0000                  		bsr.w	Hud_Lives
0001FB86 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FB8A 343C 000E                  		move.w	#$E,d2
0001FB8E                            
0001FB8E                            loc_1C83E:
0001FB8E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FB92                            
0001FB92                            loc_1C842:
0001FB92 323C 000F                  		move.w	#$F,d1
0001FB96 101A                       		move.b	(a2)+,d0
0001FB98 6B00                       		bmi.s	loc_1C85E
0001FB9A 4880                       		ext.w	d0
0001FB9C EB48                       		lsl.w	#5,d0
0001FB9E 47F1 0000                  		lea	(a1,d0.w),a3
0001FBA2                            
0001FBA2                            loc_1C852:
0001FBA2 2C9B                       		move.l	(a3)+,(a6)
0001FBA4 51C9 FFFC                  		dbf	d1,loc_1C852
0001FBA8                            
0001FBA8                            loc_1C858:
0001FBA8 51CA FFE8                  		dbf	d2,loc_1C842
0001FBAC                            
0001FBAC 4E75                       		rts	
0001FBAE                            ; ===========================================================================
0001FBAE                            
0001FBAE                            loc_1C85E:
0001FBAE 2CBC 0000 0000             		move.l	#0,(a6)
0001FBB4 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FBB8                            
0001FBB8 60EE                       		bra.s	loc_1C858
0001FBBA                            ; End of function Hud_Base
0001FBBA                            
0001FBBA                            ; ===========================================================================
0001FBBA 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FBC6 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FBCA                            ; ---------------------------------------------------------------------------
0001FBCA                            ; Subroutine to	load debug mode	numbers	patterns
0001FBCA                            ; ---------------------------------------------------------------------------
0001FBCA                            
0001FBCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBCA                            
0001FBCA                            
0001FBCA                            HudDb_XY:
0001FBD4 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FBD8 4841                       		swap	d1
0001FBDA 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FBDE 6100                       		bsr.s	HudDb_XY2
0001FBE0 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FBE4 4841                       		swap	d1
0001FBE6 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FBEA                            ; End of function HudDb_XY
0001FBEA                            
0001FBEA                            
0001FBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBEA                            
0001FBEA                            
0001FBEA                            HudDb_XY2:
0001FBEA 7C07                       		moveq	#7,d6
0001FBEC 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FBF2                            
0001FBF2                            HudDb_XYLoop:
0001FBF2 E959                       		rol.w	#4,d1
0001FBF4 3401                       		move.w	d1,d2
0001FBF6 0242 000F                  		andi.w	#$F,d2
0001FBFA 0C42 000A                  		cmpi.w	#$A,d2
0001FBFE 6500                       		bcs.s	loc_1C8B2
0001FC00 5E42                       		addq.w	#7,d2
0001FC02                            
0001FC02                            loc_1C8B2:
0001FC02 EB4A                       		lsl.w	#5,d2
0001FC04 47F1 2000                  		lea	(a1,d2.w),a3
0001FC08 2C9B                       		move.l	(a3)+,(a6)
0001FC0A 2C9B                       		move.l	(a3)+,(a6)
0001FC0C 2C9B                       		move.l	(a3)+,(a6)
0001FC0E 2C9B                       		move.l	(a3)+,(a6)
0001FC10 2C9B                       		move.l	(a3)+,(a6)
0001FC12 2C9B                       		move.l	(a3)+,(a6)
0001FC14 2C9B                       		move.l	(a3)+,(a6)
0001FC16 2C9B                       		move.l	(a3)+,(a6)
0001FC18 4841                       		swap	d1
0001FC1A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FC1E                            
0001FC1E 4E75                       		rts	
0001FC20                            ; End of function HudDb_XY2
0001FC20                            
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            ; Subroutine to	load rings numbers patterns
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            
0001FC20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC20                            
0001FC20                            
0001FC20                            Hud_Rings:
0001FC20 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FC26 7C02                       		moveq	#2,d6
0001FC28 6000                       		bra.s	Hud_LoadArt
0001FC2A                            ; End of function Hud_Rings
0001FC2A                            
0001FC2A                            ; ---------------------------------------------------------------------------
0001FC2A                            ; Subroutine to	load score numbers patterns
0001FC2A                            ; ---------------------------------------------------------------------------
0001FC2A                            
0001FC2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC2A                            
0001FC2A                            
0001FC2A                            Hud_Score:
0001FC2A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FC30 7C05                       		moveq	#5,d6
0001FC32                            
0001FC32                            Hud_LoadArt:
0001FC32 7800                       		moveq	#0,d4
0001FC34 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC38                            
0001FC38                            Hud_ScoreLoop:
0001FC38 7400                       		moveq	#0,d2
0001FC3A 261A                       		move.l	(a2)+,d3
0001FC3C                            
0001FC3C                            loc_1C8EC:
0001FC3C 9283                       		sub.l	d3,d1
0001FC3E 6500                       		bcs.s	loc_1C8F4
0001FC40 5242                       		addq.w	#1,d2
0001FC42 60F8                       		bra.s	loc_1C8EC
0001FC44                            ; ===========================================================================
0001FC44                            
0001FC44                            loc_1C8F4:
0001FC44 D283                       		add.l	d3,d1
0001FC46 4A42                       		tst.w	d2
0001FC48 6700                       		beq.s	loc_1C8FE
0001FC4A 383C 0001                  		move.w	#1,d4
0001FC4E                            
0001FC4E                            loc_1C8FE:
0001FC4E 4A44                       		tst.w	d4
0001FC50 6700                       		beq.s	loc_1C92C
0001FC52 ED4A                       		lsl.w	#6,d2
0001FC54 2D40 0004                  		move.l	d0,4(a6)
0001FC58 47F1 2000                  		lea	(a1,d2.w),a3
0001FC5C 2C9B                       		move.l	(a3)+,(a6)
0001FC5E 2C9B                       		move.l	(a3)+,(a6)
0001FC60 2C9B                       		move.l	(a3)+,(a6)
0001FC62 2C9B                       		move.l	(a3)+,(a6)
0001FC64 2C9B                       		move.l	(a3)+,(a6)
0001FC66 2C9B                       		move.l	(a3)+,(a6)
0001FC68 2C9B                       		move.l	(a3)+,(a6)
0001FC6A 2C9B                       		move.l	(a3)+,(a6)
0001FC6C 2C9B                       		move.l	(a3)+,(a6)
0001FC6E 2C9B                       		move.l	(a3)+,(a6)
0001FC70 2C9B                       		move.l	(a3)+,(a6)
0001FC72 2C9B                       		move.l	(a3)+,(a6)
0001FC74 2C9B                       		move.l	(a3)+,(a6)
0001FC76 2C9B                       		move.l	(a3)+,(a6)
0001FC78 2C9B                       		move.l	(a3)+,(a6)
0001FC7A 2C9B                       		move.l	(a3)+,(a6)
0001FC7C                            
0001FC7C                            loc_1C92C:
0001FC7C 0680 0040 0000             		addi.l	#$400000,d0
0001FC82 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FC86                            
0001FC86 4E75                       		rts	
0001FC88                            
0001FC88                            ; End of function Hud_Score
0001FC88                            ; End of function Hud_Score
0001FC88                            
0001FC88                            ; ---------------------------------------------------------------------------
0001FC88                            ; Subroutine to	load countdown numbers on the continue screen
0001FC88                            ; ---------------------------------------------------------------------------
0001FC88                            
0001FC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC88                            
0001FC88                            
0001FC88                            ContScrCounter:
0001FC92 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FC98 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FC9E 7C01                       		moveq	#1,d6
0001FCA0 7800                       		moveq	#0,d4
0001FCA2 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FCA6                            
0001FCA6                            ContScr_Loop:
0001FCA6 7400                       		moveq	#0,d2
0001FCA8 261A                       		move.l	(a2)+,d3
0001FCAA                            
0001FCAA                            loc_1C95A:
0001FCAA 9283                       		sub.l	d3,d1
0001FCAC 6500                       		blo.s	loc_1C962
0001FCAE 5242                       		addq.w	#1,d2
0001FCB0 60F8                       		bra.s	loc_1C95A
0001FCB2                            ; ===========================================================================
0001FCB2                            
0001FCB2                            loc_1C962:
0001FCB2 D283                       		add.l	d3,d1
0001FCB4 ED4A                       		lsl.w	#6,d2
0001FCB6 47F1 2000                  		lea	(a1,d2.w),a3
0001FCBA 2C9B                       		move.l	(a3)+,(a6)
0001FCBC 2C9B                       		move.l	(a3)+,(a6)
0001FCBE 2C9B                       		move.l	(a3)+,(a6)
0001FCC0 2C9B                       		move.l	(a3)+,(a6)
0001FCC2 2C9B                       		move.l	(a3)+,(a6)
0001FCC4 2C9B                       		move.l	(a3)+,(a6)
0001FCC6 2C9B                       		move.l	(a3)+,(a6)
0001FCC8 2C9B                       		move.l	(a3)+,(a6)
0001FCCA 2C9B                       		move.l	(a3)+,(a6)
0001FCCC 2C9B                       		move.l	(a3)+,(a6)
0001FCCE 2C9B                       		move.l	(a3)+,(a6)
0001FCD0 2C9B                       		move.l	(a3)+,(a6)
0001FCD2 2C9B                       		move.l	(a3)+,(a6)
0001FCD4 2C9B                       		move.l	(a3)+,(a6)
0001FCD6 2C9B                       		move.l	(a3)+,(a6)
0001FCD8 2C9B                       		move.l	(a3)+,(a6)
0001FCDA 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FCDE                            
0001FCDE 4E75                       		rts	
0001FCE0                            ; End of function ContScrCounter
0001FCE0                            
0001FCE0                            ; ===========================================================================
0001FCE0                            
0001FCE0                            		include	"_inc\HUD (part 2).asm"
0001FCE0                            ; ---------------------------------------------------------------------------
0001FCE0                            ; HUD counter sizes
0001FCE0                            ; ---------------------------------------------------------------------------
0001FCE0 0001 86A0                  Hud_100000:	dc.l 100000
0001FCE4 0000 2710                  Hud_10000:	dc.l 10000
0001FCE8 0000 03E8                  Hud_1000:	dc.l 1000
0001FCEC 0000 0064                  Hud_100:	dc.l 100
0001FCF0 0000 000A                  Hud_10:		dc.l 10
0001FCF4 0000 0001                  Hud_1:		dc.l 1
0001FCF8                            
0001FCF8                            ; ---------------------------------------------------------------------------
0001FCF8                            ; Subroutine to	load time numbers patterns
0001FCF8                            ; ---------------------------------------------------------------------------
0001FCF8                            
0001FCF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCF8                            
0001FCF8                            
0001FCF8                            Hud_Mins:
0001FCF8 45F9 0001 FCF4             		lea	(Hud_1).l,a2
0001FCFE 7C00                       		moveq	#0,d6
0001FD00 6000                       		bra.s	loc_1C9BA
0001FD02                            ; End of function Hud_Mins
0001FD02                            
0001FD02                            
0001FD02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD02                            
0001FD02                            
0001FD02                            Hud_Secs:
0001FD02 45F9 0001 FCF0             		lea	(Hud_10).l,a2
0001FD08 7C01                       		moveq	#1,d6
0001FD0A                            
0001FD0A                            loc_1C9BA:
0001FD0A 7800                       		moveq	#0,d4
0001FD0C 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD10                            
0001FD10                            Hud_TimeLoop:
0001FD10 7400                       		moveq	#0,d2
0001FD12 261A                       		move.l	(a2)+,d3
0001FD14                            
0001FD14                            loc_1C9C4:
0001FD14 9283                       		sub.l	d3,d1
0001FD16 6500                       		bcs.s	loc_1C9CC
0001FD18 5242                       		addq.w	#1,d2
0001FD1A 60F8                       		bra.s	loc_1C9C4
0001FD1C                            ; ===========================================================================
0001FD1C                            
0001FD1C                            loc_1C9CC:
0001FD1C D283                       		add.l	d3,d1
0001FD1E 4A42                       		tst.w	d2
0001FD20 6700                       		beq.s	loc_1C9D6
0001FD22 383C 0001                  		move.w	#1,d4
0001FD26                            
0001FD26                            loc_1C9D6:
0001FD26 ED4A                       		lsl.w	#6,d2
0001FD28 2D40 0004                  		move.l	d0,4(a6)
0001FD2C 47F1 2000                  		lea	(a1,d2.w),a3
0001FD30 2C9B                       		move.l	(a3)+,(a6)
0001FD32 2C9B                       		move.l	(a3)+,(a6)
0001FD34 2C9B                       		move.l	(a3)+,(a6)
0001FD36 2C9B                       		move.l	(a3)+,(a6)
0001FD38 2C9B                       		move.l	(a3)+,(a6)
0001FD3A 2C9B                       		move.l	(a3)+,(a6)
0001FD3C 2C9B                       		move.l	(a3)+,(a6)
0001FD3E 2C9B                       		move.l	(a3)+,(a6)
0001FD40 2C9B                       		move.l	(a3)+,(a6)
0001FD42 2C9B                       		move.l	(a3)+,(a6)
0001FD44 2C9B                       		move.l	(a3)+,(a6)
0001FD46 2C9B                       		move.l	(a3)+,(a6)
0001FD48 2C9B                       		move.l	(a3)+,(a6)
0001FD4A 2C9B                       		move.l	(a3)+,(a6)
0001FD4C 2C9B                       		move.l	(a3)+,(a6)
0001FD4E 2C9B                       		move.l	(a3)+,(a6)
0001FD50 0680 0040 0000             		addi.l	#$400000,d0
0001FD56 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FD5A                            
0001FD5A 4E75                       		rts	
0001FD5C                            ; End of function Hud_Secs
0001FD5C                            
0001FD5C                            ; ---------------------------------------------------------------------------
0001FD5C                            ; Subroutine to	load time/ring bonus numbers patterns
0001FD5C                            ; ---------------------------------------------------------------------------
0001FD5C                            
0001FD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD5C                            
0001FD5C                            
0001FD5C                            Hud_TimeRingBonus:
0001FD5C 45F9 0001 FCE8             		lea	(Hud_1000).l,a2
0001FD62 7C03                       		moveq	#3,d6
0001FD64 7800                       		moveq	#0,d4
0001FD66 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD6A                            
0001FD6A                            Hud_BonusLoop:
0001FD6A 7400                       		moveq	#0,d2
0001FD6C 261A                       		move.l	(a2)+,d3
0001FD6E                            
0001FD6E                            loc_1CA1E:
0001FD6E 9283                       		sub.l	d3,d1
0001FD70 6500                       		bcs.s	loc_1CA26
0001FD72 5242                       		addq.w	#1,d2
0001FD74 60F8                       		bra.s	loc_1CA1E
0001FD76                            ; ===========================================================================
0001FD76                            
0001FD76                            loc_1CA26:
0001FD76 D283                       		add.l	d3,d1
0001FD78 4A42                       		tst.w	d2
0001FD7A 6700                       		beq.s	loc_1CA30
0001FD7C 383C 0001                  		move.w	#1,d4
0001FD80                            
0001FD80                            loc_1CA30:
0001FD80 4A44                       		tst.w	d4
0001FD82 6700                       		beq.s	Hud_ClrBonus
0001FD84 ED4A                       		lsl.w	#6,d2
0001FD86 47F1 2000                  		lea	(a1,d2.w),a3
0001FD8A 2C9B                       		move.l	(a3)+,(a6)
0001FD8C 2C9B                       		move.l	(a3)+,(a6)
0001FD8E 2C9B                       		move.l	(a3)+,(a6)
0001FD90 2C9B                       		move.l	(a3)+,(a6)
0001FD92 2C9B                       		move.l	(a3)+,(a6)
0001FD94 2C9B                       		move.l	(a3)+,(a6)
0001FD96 2C9B                       		move.l	(a3)+,(a6)
0001FD98 2C9B                       		move.l	(a3)+,(a6)
0001FD9A 2C9B                       		move.l	(a3)+,(a6)
0001FD9C 2C9B                       		move.l	(a3)+,(a6)
0001FD9E 2C9B                       		move.l	(a3)+,(a6)
0001FDA0 2C9B                       		move.l	(a3)+,(a6)
0001FDA2 2C9B                       		move.l	(a3)+,(a6)
0001FDA4 2C9B                       		move.l	(a3)+,(a6)
0001FDA6 2C9B                       		move.l	(a3)+,(a6)
0001FDA8 2C9B                       		move.l	(a3)+,(a6)
0001FDAA                            
0001FDAA                            loc_1CA5A:
0001FDAA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FDAE                            
0001FDAE 4E75                       		rts	
0001FDB0                            ; ===========================================================================
0001FDB0                            
0001FDB0                            Hud_ClrBonus:
0001FDB0 7A0F                       		moveq	#$F,d5
0001FDB2                            
0001FDB2                            Hud_ClrBonusLoop:
0001FDB2 2CBC 0000 0000             		move.l	#0,(a6)
0001FDB8 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FDBC                            
0001FDBC 60EC                       		bra.s	loc_1CA5A
0001FDBE                            ; End of function Hud_TimeRingBonus
0001FDBE                            
0001FDBE                            ; ---------------------------------------------------------------------------
0001FDBE                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FDBE                            ; ---------------------------------------------------------------------------
0001FDBE                            
0001FDBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDBE                            
0001FDBE                            
0001FDBE                            Hud_Lives:
0001FDBE 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FDC4 7200                       		moveq	#0,d1
0001FDC6 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FDCA 45F9 0001 FCF0             		lea	(Hud_10).l,a2
0001FDD0 7C01                       		moveq	#1,d6
0001FDD2 7800                       		moveq	#0,d4
0001FDD4 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FDD8                            
0001FDD8                            Hud_LivesLoop:
0001FDD8 2D40 0004                  		move.l	d0,4(a6)
0001FDDC 7400                       		moveq	#0,d2
0001FDDE 261A                       		move.l	(a2)+,d3
0001FDE0                            
0001FDE0                            loc_1CA90:
0001FDE0 9283                       		sub.l	d3,d1
0001FDE2 6500                       		bcs.s	loc_1CA98
0001FDE4 5242                       		addq.w	#1,d2
0001FDE6 60F8                       		bra.s	loc_1CA90
0001FDE8                            ; ===========================================================================
0001FDE8                            
0001FDE8                            loc_1CA98:
0001FDE8 D283                       		add.l	d3,d1
0001FDEA 4A42                       		tst.w	d2
0001FDEC 6700                       		beq.s	loc_1CAA2
0001FDEE 383C 0001                  		move.w	#1,d4
0001FDF2                            
0001FDF2                            loc_1CAA2:
0001FDF2 4A44                       		tst.w	d4
0001FDF4 6700                       		beq.s	Hud_ClrLives
0001FDF6                            
0001FDF6                            loc_1CAA6:
0001FDF6 EB4A                       		lsl.w	#5,d2
0001FDF8 47F1 2000                  		lea	(a1,d2.w),a3
0001FDFC 2C9B                       		move.l	(a3)+,(a6)
0001FDFE 2C9B                       		move.l	(a3)+,(a6)
0001FE00 2C9B                       		move.l	(a3)+,(a6)
0001FE02 2C9B                       		move.l	(a3)+,(a6)
0001FE04 2C9B                       		move.l	(a3)+,(a6)
0001FE06 2C9B                       		move.l	(a3)+,(a6)
0001FE08 2C9B                       		move.l	(a3)+,(a6)
0001FE0A 2C9B                       		move.l	(a3)+,(a6)
0001FE0C                            
0001FE0C                            loc_1CABC:
0001FE0C 0680 0040 0000             		addi.l	#$400000,d0
0001FE12 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FE16                            
0001FE16 4E75                       		rts	
0001FE18                            ; ===========================================================================
0001FE18                            
0001FE18                            Hud_ClrLives:
0001FE18 4A46                       		tst.w	d6
0001FE1A 67DA                       		beq.s	loc_1CAA6
0001FE1C 7A07                       		moveq	#7,d5
0001FE1E                            
0001FE1E                            Hud_ClrLivesLoop:
0001FE1E 2CBC 0000 0000             		move.l	#0,(a6)
0001FE24 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FE28 60E2                       		bra.s	loc_1CABC
0001FE2A                            ; End of function Hud_Lives
0001FE2A                            ; End of function Hud_Lives
0001FE2A                            
0001FE2A                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
0002012A                            		even
0002012A                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0002026A                            		even
0002026A                            
0002026A                            		include	"_incObj\DebugMode.asm"
0002026A                            ; ---------------------------------------------------------------------------
0002026A                            ; When debug mode is currently in use
0002026A                            ; ---------------------------------------------------------------------------
0002026A                            
0002026A                            DebugMode:
0002026A 7000                       		moveq	#0,d0
0002026C 1038 FE08                  		move.b	(v_debuguse).w,d0
00020270 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020274 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020278                            ; ===========================================================================
00020278 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002027A 0000                       		dc.w Debug_Action-Debug_Index
0002027C                            ; ===========================================================================
0002027C                            
0002027C                            Debug_Main:	; Routine 0
0002027C 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020280 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020286 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0002028C 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020292 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020298 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0002029E 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000202A4 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000202AA 117C 0000 001A             		move.b	#0,obFrame(a0)
000202B0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000202B6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000202BC 6600                       		bne.s	@islevel	; if not, branch
000202BE                            
000202BE 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000202C4 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000202CA 7006                       		moveq	#6,d0		; use 6th debug	item list
000202CC 6000                       		bra.s	@selectlist
000202CE                            ; ===========================================================================
000202CE                            
000202CE                            @islevel:
000202CE 7000                       		moveq	#0,d0
000202D0 1038 FE10                  		move.b	(v_zone).w,d0
000202D4                            
000202D4                            @selectlist:
000202D4 45F9 0000 0000             		lea	(DebugList).l,a2
000202DA D040                       		add.w	d0,d0
000202DC D4F2 0000                  		adda.w	(a2,d0.w),a2
000202E0 3C1A                       		move.w	(a2)+,d6
000202E2 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000202E6 6200                       		bhi.s	@noreset	; if not, branch
000202E8 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000202EE                            
000202EE                            	@noreset:
000202EE 6100 0000                  		bsr.w	Debug_ShowItem
000202F2 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000202F8 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000202FE                            
000202FE                            Debug_Action:	; Routine 2
000202FE 7006                       		moveq	#6,d0
00020300 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020306 6700                       		beq.s	@isntlevel
00020308                            
00020308 7000                       		moveq	#0,d0
0002030A 1038 FE10                  		move.b	(v_zone).w,d0
0002030E                            
0002030E                            	@isntlevel:
0002030E 45F9 0000 0000             		lea	(DebugList).l,a2
00020314 D040                       		add.w	d0,d0
00020316 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002031A 3C1A                       		move.w	(a2)+,d6
0002031C 6100 0000                  		bsr.w	Debug_Control
00020320 4EF9 0000 F70C             		jmp	(DisplaySprite).l
00020326                            
00020326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020326                            
00020326                            
00020326                            Debug_Control:
00020326 7800                       		moveq	#0,d4
00020328 323C 0001                  		move.w	#1,d1
0002032C 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020330 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020334 6600                       		bne.s	@dirpressed	; if yes, branch
00020336                            
00020336 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002033A 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0002033E 6600                       		bne.s	@dirheld	; if yes, branch
00020340                            
00020340 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020346 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0002034C 6000 0000                  		bra.w	Debug_ChgItem
00020350                            ; ===========================================================================
00020350                            
00020350                            @dirheld:
00020350 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020354 6600                       		bne.s	loc_1D01C
00020356 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0002035C 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020360 6600                       		bne.s	@dirpressed
00020362 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020368                            
00020368                            @dirpressed:
00020368 1838 F604                  		move.b	(v_jpadhold1).w,d4
0002036C                            
0002036C                            loc_1D01C:
0002036C 7200                       		moveq	#0,d1
0002036E 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020372 5241                       		addq.w	#1,d1
00020374 4841                       		swap	d1
00020376 E881                       		asr.l	#4,d1
00020378 2428 000C                  		move.l	obY(a0),d2
0002037C 2628 0008                  		move.l	obX(a0),d3
00020380 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020384 6700                       		beq.s	loc_1D03C	; if not, branch
00020386 9481                       		sub.l	d1,d2
00020388 6400                       		bcc.s	loc_1D03C
0002038A 7400                       		moveq	#0,d2
0002038C                            
0002038C                            loc_1D03C:
0002038C 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020390 6700                       		beq.s	loc_1D052	; if not, branch
00020392 D481                       		add.l	d1,d2
00020394 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002039A 6500                       		bcs.s	loc_1D052
0002039C 243C 07FF 0000             		move.l	#$7FF0000,d2
000203A2                            
000203A2                            loc_1D052:
000203A2 0804 0002                  		btst	#bitL,d4
000203A6 6700                       		beq.s	loc_1D05E
000203A8 9681                       		sub.l	d1,d3
000203AA 6400                       		bcc.s	loc_1D05E
000203AC 7600                       		moveq	#0,d3
000203AE                            
000203AE                            loc_1D05E:
000203AE 0804 0003                  		btst	#bitR,d4
000203B2 6700                       		beq.s	loc_1D066
000203B4 D681                       		add.l	d1,d3
000203B6                            
000203B6                            loc_1D066:
000203B6 2142 000C                  		move.l	d2,obY(a0)
000203BA 2143 0008                  		move.l	d3,obX(a0)
000203BE                            
000203BE                            Debug_ChgItem:
000203BE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000203C4 6700                       		beq.s	@createitem	; if not, branch
000203C6 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000203CC 6700                       		beq.s	@nextitem	; if not, branch
000203CE 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000203D2 6400                       		bcc.s	@display
000203D4 DD38 FE06                  		add.b	d6,(v_debugitem).w
000203D8 6000                       		bra.s	@display
000203DA                            ; ===========================================================================
000203DA                            
000203DA                            @nextitem:
000203DA 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000203E0 6700                       		beq.s	@createitem	; if not, branch
000203E2 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000203E6 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000203EA 6200                       		bhi.s	@display
000203EC 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000203F2                            
000203F2                            	@display:
000203F2 6000 0000                  		bra.w	Debug_ShowItem
000203F6                            ; ===========================================================================
000203F6                            
000203F6                            @createitem:
000203F6 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000203FC 6700                       		beq.s	@backtonormal	; if not, branch
000203FE 4EB9 0000 FB98             		jsr	(FindFreeObj).l
00020404 6600                       		bne.s	@backtonormal
00020406 3368 0008 0008             		move.w	obX(a0),obX(a1)
0002040C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020412 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020416 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002041C 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020422 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020428 7000                       		moveq	#0,d0
0002042A 1038 FE06                  		move.b	(v_debugitem).w,d0
0002042E E748                       		lsl.w	#3,d0
00020430 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020436 4E75                       		rts	
00020438                            ; ===========================================================================
00020438                            
00020438                            @backtonormal:
00020438 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0002043E 6700                       		beq.s	@stayindebug	; if not, branch
00020440 7000                       		moveq	#0,d0
00020442 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020446 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002044E 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020454 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020458 3140 000A                  		move.w	d0,obX+2(a0)
0002045C 3140 000E                  		move.w	d0,obY+2(a0)
00020460 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020466 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0002046C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020472 6600                       		bne.s	@stayindebug	; if not, branch
00020474                            
00020474 4278 F780                  		clr.w	(v_ssangle).w
00020478 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
0002047E 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020486 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002048C 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020492 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020498 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0002049E                            
0002049E                            	@stayindebug:
0002049E 4E75                       		rts	
000204A0                            ; End of function Debug_Control
000204A0                            
000204A0                            
000204A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000204A0                            
000204A0                            
000204A0                            Debug_ShowItem:
000204A0 7000                       		moveq	#0,d0
000204A2 1038 FE06                  		move.b	(v_debugitem).w,d0
000204A6 E748                       		lsl.w	#3,d0
000204A8 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000204AE 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000204B4 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000204BA 4E75                       		rts	
000204BC                            ; End of function Debug_ShowItem
000204BC                            ; End of function Debug_ShowItem
000204BC                            		include	"_inc\DebugList.asm"
000204BC                            ; ---------------------------------------------------------------------------
000204BC                            ; Debug	mode item lists
000204BC                            ; ---------------------------------------------------------------------------
000204BC                            DebugList:
000204BC 0000                       	dc.w @GHZ-DebugList
000204BE 0000                       	dc.w @LZ-DebugList
000204C0 0000                       	dc.w @MZ-DebugList
000204C2 0000                       	dc.w @SLZ-DebugList
000204C4 0000                       	dc.w @SYZ-DebugList
000204C6 0000                       	dc.w @SBZ-DebugList
000204C8 0000                       	dc.w @Ending-DebugList
000204CA                            
000204CA                            dbug:	macro map,object,subtype,frame,vram
000204CA                            	dc.l map+(object<<24)
000204CA                            	dc.b subtype,frame
000204CA                            	dc.w vram
000204CA                            	endm
000204CA                            
000204CA                            @GHZ:
000204CA 0000                       	dc.w (@GHZend-@GHZ-2)/8
000204CC                            
000204CC                            ;		mappings	object		subtype	frame	VRAM setting
000204CC 2500 BEF2 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000204D4 2600 C638 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000204DC 1F00 B2D2 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000204E4 2200 B75C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000204EC 2B00 CCA6 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000204F4 3600 F0EA 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000204FC 1800 9CCA 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020504 3B00 F210 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0002050C 4001 19BC 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020514 4100 FE26 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002051C 4201 004C 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020524 4401 035A 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0002052C 7901 A04C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020534 4B00 BF42 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0002053C 7D01 A20E 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020544                            	@GHZend:
00020544                            
00020544                            @LZ:
00020544 0000                       	dc.w (@LZend-@LZ-2)/8
00020546                            
00020546                            ;		mappings	object		subtype	frame	VRAM setting
00020546 2500 BEF2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002054E 2600 C638 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020556 4100 FE26 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002055E 2C00 CD4C 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00020566 2D00 CF38 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002056E 1601 4370 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
00020576 1601 4370 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
0002057E 3300 E3B6 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00020586 3200 DF76 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002058E 3600 F0EA 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020596 5201 2446 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0002059E 6101 4598 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000205A6 6101 4598 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000205AE 6101 4598 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000205B6 6201 46EC 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000205BE 6101 4598 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000205C6 6101 4598 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000205CE 6301 4A4E 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000205D6 6001 42BA 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000205DE 6401 4D9C 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000205E6 6501 4F24 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000205EE 6501 4F24 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000205F6 0B01 3706 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000205FE 0C01 37D6 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020606 7901 A04C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002060E                            	@LZend:
0002060E                            
0002060E                            @MZ:
0002060E 0000                       	dc.w (@MZend-@MZ-2)/8
00020610                            
00020610                            ;		mappings	object		subtype	frame	VRAM setting
00020610 2500 BEF2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020618 2600 C638 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020620 2200 B75C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020628 3600 F0EA 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020630 4100 FE26 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020638 1300 D446 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020640 4601 0A0A 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00020648 6E01 90E8 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020650 6A01 8AA0 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020658 3300 E3B6 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020660 1E00 A9EA 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020668 5101 217A 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020670 5201 23F0 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00020678 5300 A2CE 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020680 5401 142E 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00020688 5501 25E4 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020690 7801 9CB8 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020698 7901 A04C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000206A0                            	@MZend:
000206A0                            
000206A0                            @SLZ:
000206A0 0000                       	dc.w (@SLZend-@SLZ-2)/8
000206A2                            
000206A2                            ;		mappings	object		subtype	frame	VRAM setting
000206A2 2500 BEF2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000206AA 2600 C638 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206B2 5901 312E 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000206BA 5300 A2CE 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000206C2 1800 9D28 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000206CA 5A01 3268 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000206D2 5B01 3420 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000206DA 5D01 39F4 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000206E2 5E01 3D86 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000206EA 4100 FE26 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000206F2 1300 D446 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000206FA 1C00 A3EC 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020702 5F01 4004 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002070A 6001 42BA 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020712 7901 A04C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002071A                            	@SLZend:
0002071A                            
0002071A                            @SYZ:
0002071A 0000                       	dc.w (@SYZend-@SYZ-2)/8
0002071C                            
0002071C                            ;		mappings	object		subtype	frame	VRAM setting
0002071C 2500 BEF2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020724 2600 C638 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002072C 3600 F0EA 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020734 4100 FE26 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002073C 4301 02AC 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020744 1201 0A88 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
0002074C 4701 0C2C 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020754 1F00 B2D2 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002075C 2200 B75C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020764 5001 1C4C 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
0002076C 1800 9D16 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020774 5601 2AEE 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
0002077C 3200 DF76 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020784 7801 9CB8 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002078C 7901 A04C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020794                            	@SYZend:
00020794                            
00020794                            @SBZ:
00020794 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020796                            
00020796                            ;		mappings	object		subtype	frame	VRAM setting
00020796 2500 BEF2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002079E 2600 C638 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000207A6 5F01 4004 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000207AE 6001 42BA 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000207B6 7801 9CB8 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000207BE 1501 2E8A 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000207C6 6701 858E E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000207CE 5201 23F0 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000207D6 3200 DF76 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000207DE 6901 87E8 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000207E6 6901 8842 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000207EE 6A01 8AA0 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000207F6 5300 A2CE 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000207FE 5201 23F0 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020806 6B01 8E70 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
0002080E 2A00 A57C 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020816 6B01 8E70 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
0002081E 6A01 8AA0 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020826 6B01 8E70 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
0002082E 6A01 8AA0 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020836 6B01 8E70 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
0002083E 6C01 9032 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020846 6D01 06FC 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
0002084E 6D01 06FC 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020856 6E01 90E8 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002085E 7001 952E 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020866 7101 389A 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
0002086E 1E00 A9EA 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020876 7901 A04C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002087E                            	@SBZend:
0002087E                            
0002087E                            @Ending:
0002087E 0000                       	dc.w (@Endingend-@Ending-2)/8
00020880                            
00020880                            ;		mappings	object		subtype	frame	VRAM setting
00020880 2500 BEF2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020888 2500 BEF2 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020890                            	@Endingend:
00020890                            
00020890                            	even
00020890                            	even
00020890                            		include	"_inc\LevelHeaders.asm"
00020890                            ; ---------------------------------------------------------------------------
00020890                            ; Level Headers
00020890                            ; ---------------------------------------------------------------------------
00020890                            
00020890                            LevelHeaders:
00020890                            
00020890                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020890                            	dc.l (plc1<<24)+lvlgfx
00020890                            	dc.l (plc2<<24)+sixteen
00020890                            	dc.l twofivesix
00020890                            	dc.b 0, music, pal, pal
00020890                            	endm
00020890                            
00020890                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020890                            ; music (unused), palette (unused), palette
00020890                            
00020890                            ;		1st PLC				2nd PLC				256x256 data			palette
00020890                            ;				level gfx*			16x16 data			music*
00020890                            
00020890 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000208A0 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
000208B0 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
000208C0 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
000208D0 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
000208E0 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
000208F0 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020900                            	even
00020900                            
00020900                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020900                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020900                            		include	"_inc\Pattern Load Cues.asm"
00020900                            ; ---------------------------------------------------------------------------
00020900                            ; Pattern load cues
00020900                            ; ---------------------------------------------------------------------------
00020900                            ArtLoadCues:
00020900                            
00020900 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020902 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020904 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020906 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020908                            PLC_Levels:
00020908 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0002090A 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
0002090C 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
0002090E 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020910 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020912 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020914 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020916 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020918 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0002091A 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
0002091C 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
0002091E 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020920 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020922 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020924 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020926 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020928 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
0002092A                            PLC_Animals:
0002092A 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
0002092C 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
0002092E 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020930 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020932 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020934 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020936 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020938 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
0002093A 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
0002093C 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
0002093E 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020940 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020942                            
00020942                            plcm:	macro gfx,vram
00020942                            	dc.l gfx
00020942                            	dc.w vram
00020942                            	endm
00020942                            
00020942                            ; ---------------------------------------------------------------------------
00020942                            ; Pattern load cues - standard block 1
00020942                            ; ---------------------------------------------------------------------------
00020942 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020944 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
0002094A 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020950 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020956 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
0002095C 0000 0000 F640             		plcm	Nem_Points, $F640 	; points from enemy
00020962                            	PLC_Mainend:
00020962                            ; ---------------------------------------------------------------------------
00020962                            ; Pattern load cues - standard block 2
00020962                            ; ---------------------------------------------------------------------------
00020962 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020964 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
0002096A                            	PLC_Main2end:
0002096A                            ; ---------------------------------------------------------------------------
0002096A                            ; Pattern load cues - explosion
0002096A                            ; ---------------------------------------------------------------------------
0002096A 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
0002096C 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020972                            	PLC_Explodeend:
00020972                            ; ---------------------------------------------------------------------------
00020972                            ; Pattern load cues - game/time	over
00020972                            ; ---------------------------------------------------------------------------
00020972 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020974 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
0002097A                            	PLC_GameOverend:
0002097A                            ; ---------------------------------------------------------------------------
0002097A                            ; Pattern load cues - Green Hill
0002097A                            ; ---------------------------------------------------------------------------
0002097A 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
0002097C 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020982 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020988 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
0002098E 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020994 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
0002099A 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000209A0 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000209A6 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
000209AC 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
000209B2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000209B8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000209BE 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000209C4                            
000209C4 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
000209C6 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000209CC 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
000209D2 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
000209D8 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
000209DE 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
000209E4 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
000209EA                            	PLC_GHZ2end:
000209EA                            ; ---------------------------------------------------------------------------
000209EA                            ; Pattern load cues - Labyrinth
000209EA                            ; ---------------------------------------------------------------------------
000209EA 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
000209EC 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
000209F2                            		;plcm	Nem_LzBlock1, $3C00	; block
000209F2                            		;plcm	Nem_LzBlock2, $3E00	; blocks
000209F2                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
000209F2 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
000209F8 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
000209FE 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020A04 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020A0A 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020A10 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020A16 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020A1C 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020A22                            
00020A22 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020A24 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020A2A 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020A30 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020A36 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020A3C 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020A42 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020A48 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020A4E 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020A54 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020A5A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A60 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A66 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A6C                            	PLC_LZ2end:
00020A6C                            ; ---------------------------------------------------------------------------
00020A6C                            ; Pattern load cues - Marble
00020A6C                            ; ---------------------------------------------------------------------------
00020A6C 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020A6E 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020A74 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020A7A 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020A80 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020A86 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020A8C 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020A92 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020A98 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020A9E 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020AA4 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020AAA                            
00020AAA 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020AAC 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020AB2 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020AB8                            		;plcm	Nem_MzSwitch, $A260	; switch
00020AB8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020ABE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020AC4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020ACA 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020AD0 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020AD6                            	PLC_MZ2end:
00020AD6                            ; ---------------------------------------------------------------------------
00020AD6                            ; Pattern load cues - Star Light
00020AD6                            ; ---------------------------------------------------------------------------
00020AD6 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020AD8 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020ADE 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020AE4 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020AEA 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020AF0 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020AF6 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020AFC 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020B02 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B08 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B0E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B14                            
00020B14 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020B16 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020B1C 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020B22 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020B28 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020B2E 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020B34 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020B3A                            	PLC_SLZ2end:
00020B3A                            ; ---------------------------------------------------------------------------
00020B3A                            ; Pattern load cues - Spring Yard
00020B3A                            ; ---------------------------------------------------------------------------
00020B3A 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020B3C 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020B42                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020B42                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020B42 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020B48 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020B4E 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020B54 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020B5A 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020B60                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020B60                            
00020B60 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020B62                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020B62 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020B68 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020B6E 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020B74                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020B74 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020B7A                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020B7A 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020B80 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B86 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B8C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B92                            	PLC_SYZ2end:
00020B92                            ; ---------------------------------------------------------------------------
00020B92                            ; Pattern load cues - Scrap Brain
00020B92                            ; ---------------------------------------------------------------------------
00020B92 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020B94 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020B9A 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020BA0                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020BA0                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020BA0                            		;plcm	Nem_Girder, $5E00	; girder
00020BA0 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020BA6 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020BAC                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020BAC 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020BB2 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020BB8 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020BBE 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020BC4                            
00020BC4 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020BC6                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020BC6 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020BCC 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020BD2                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020BD2 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020BD8 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020BDE 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020BE4 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020BEA 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020BF0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BF6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BFC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C02                            	PLC_SBZ2end:
00020C02                            ; ---------------------------------------------------------------------------
00020C02                            ; Pattern load cues - title card
00020C02                            ; ---------------------------------------------------------------------------
00020C02 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020C04 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020C0A                            	PLC_TitleCardend:
00020C0A                            ; ---------------------------------------------------------------------------
00020C0A                            ; Pattern load cues - act 3 boss
00020C0A                            ; ---------------------------------------------------------------------------
00020C0A 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020C0C 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020C12 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020C18 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020C1E 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020C24 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020C2A 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020C30                            	PLC_Bossend:
00020C30                            ; ---------------------------------------------------------------------------
00020C30                            ; Pattern load cues - act 1/2 signpost
00020C30                            ; ---------------------------------------------------------------------------
00020C30 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020C32 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020C38 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020C3E 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020C44                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020C44                            	PLC_Signpostend:
00020C44                            ; ---------------------------------------------------------------------------
00020C44                            ; Pattern load cues - beta special stage warp effect
00020C44                            ; ---------------------------------------------------------------------------
00020C44                            PLC_Warp:
00020C44                            	PLC_Warpend:
00020C44                            ; ---------------------------------------------------------------------------
00020C44                            ; Pattern load cues - special stage
00020C44                            ; ---------------------------------------------------------------------------
00020C44 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020C46 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020C4C 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020C52 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020C58 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020C5E 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020C64 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020C6A 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020C70 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020C76 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020C7C 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020C82 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020C88 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020C8E 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020C94 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020C9A                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020C9A                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020C9A                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020C9A                            	PLC_SpeStageend:
00020C9A                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020C9A                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020C9A                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020C9A                            ; ---------------------------------------------------------------------------
00020C9A                            ; Pattern load cues - GHZ animals
00020C9A                            ; ---------------------------------------------------------------------------
00020C9A 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020C9C 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020CA2 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020CA8                            	PLC_GHZAnimalsend:
00020CA8                            ; ---------------------------------------------------------------------------
00020CA8                            ; Pattern load cues - LZ animals
00020CA8                            ; ---------------------------------------------------------------------------
00020CA8 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020CAA 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020CB0 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020CB6                            	PLC_LZAnimalsend:
00020CB6                            ; ---------------------------------------------------------------------------
00020CB6                            ; Pattern load cues - MZ animals
00020CB6                            ; ---------------------------------------------------------------------------
00020CB6 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020CB8 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020CBE 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020CC4                            	PLC_MZAnimalsend:
00020CC4                            ; ---------------------------------------------------------------------------
00020CC4                            ; Pattern load cues - SLZ animals
00020CC4                            ; ---------------------------------------------------------------------------
00020CC4 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020CC6 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020CCC 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020CD2                            	PLC_SLZAnimalsend:
00020CD2                            ; ---------------------------------------------------------------------------
00020CD2                            ; Pattern load cues - SYZ animals
00020CD2                            ; ---------------------------------------------------------------------------
00020CD2 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020CD4 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020CDA 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020CE0                            	PLC_SYZAnimalsend:
00020CE0                            ; ---------------------------------------------------------------------------
00020CE0                            ; Pattern load cues - SBZ animals
00020CE0                            ; ---------------------------------------------------------------------------
00020CE0 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020CE2 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020CE8 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020CEE                            	PLC_SBZAnimalsend:
00020CEE                            ; ---------------------------------------------------------------------------
00020CEE                            ; Pattern load cues - special stage results screen
00020CEE                            ; ---------------------------------------------------------------------------
00020CEE 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020CF0 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020CF6 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020CFC                            	PLC_SpeStResultend:
00020CFC                            ; ---------------------------------------------------------------------------
00020CFC                            ; Pattern load cues - ending sequence
00020CFC                            ; ---------------------------------------------------------------------------
00020CFC 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020CFE 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020D04 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020D0A 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020D10                            		;plcm	Nem_EndFlower, $7400	; flowers
00020D10 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020D16 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020D1C 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020D22 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020D28 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020D2E 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020D34 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020D3A 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020D40 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020D46 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020D4C                            	PLC_Endingend:
00020D4C                            ; ---------------------------------------------------------------------------
00020D4C                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020D4C                            ; ---------------------------------------------------------------------------
00020D4C 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020D4E 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020D54 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020D5A 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020D60                            	PLC_TryAgainend:
00020D60                            ; ---------------------------------------------------------------------------
00020D60                            ; Pattern load cues - Eggman on SBZ 2
00020D60                            ; ---------------------------------------------------------------------------
00020D60 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020D62 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020D68 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020D6E 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020D74                            	PLC_EggmanSBZ2end:
00020D74                            ; ---------------------------------------------------------------------------
00020D74                            ; Pattern load cues - final boss
00020D74                            ; ---------------------------------------------------------------------------
00020D74 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020D76 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020D7C 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020D82 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020D88 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020D8E 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D94                            	PLC_FZBossend:
00020D94                            ; ---------------------------------------------------------------------------
00020D94                            ; Pattern load cues - Eggman
00020D94                            ; ---------------------------------------------------------------------------
00020D94 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020D96 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020D9C 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020DA2 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020DA8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DAE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DB4 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020DBA                            	PLC_Eggend:
00020DBA                            		even
00020DBA                            ; ---------------------------------------------------------------------------
00020DBA                            ; Pattern load cue IDs
00020DBA                            ; ---------------------------------------------------------------------------
00020DBA =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020DBA =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020DBA =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020DBA =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020DBA =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020DBA =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020DBA =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020DBA =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020DBA =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020DBA =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020DBA =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020DBA =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020DBA =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020DBA =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020DBA =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020DBA =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020DBA =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020DBA =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020DBA =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020DBA =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020DBA =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020DBA =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020DBA =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020DBA =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020DBA =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020DBA =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020DBA =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020DBA =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020DBA =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020DBA =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020DBA =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020DBA =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020DBA =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020DBA =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020DBA                            
00020E00                            			dcb.b	$300,$FF
00021100                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021570                            			even
00021570                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002166C                            			even
0002166C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002174C                            		even
0002174C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022BB8                            		even
00022BB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024652                            		even
00024652                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024686                            		even
00024686                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024744                            		even
00024744                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00024BEC                            		even
00024BEC                            
00024BEC                            Map_Sonic:	include	"_maps\Sonic.asm"
00024BEC                            ; --------------------------------------------------------------------------------
00024BEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00024BEC                            ; --------------------------------------------------------------------------------
00024BEC                            
00024BEC                            SME_Lx_Kl:	
00024BEC 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00024BF0 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00024BF4 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00024BF8 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
00024BFC 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00024C00 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00024C04 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00024C08 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
00024C0C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00024C10 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00024C14 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00024C18 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
00024C1C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00024C20 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00024C24 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00024C28 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
00024C2C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00024C30 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00024C34 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00024C38 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
00024C3C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00024C40 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00024C44 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00024C48 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
00024C4C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00024C50 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00024C54 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00024C58 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
00024C5C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00024C60 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00024C64 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00024C68 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
00024C6C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
00024C70 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
00024C74 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
00024C78 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
00024C7C 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
00024C80 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
00024C84 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
00024C88 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
00024C8C 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
00024C90 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
00024C94 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
00024C98 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
00024C9C 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
00024CA0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
00024CA4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
00024CA8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
00024CAC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
00024CB0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
00024CB4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
00024CB8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
00024CBC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
00024CC0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
00024CC4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
00024CC8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
00024CCC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00024CD0 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00024CD4 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00024CD8 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
00024CDC 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00024CE0 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00024CE4 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00024CE8 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
00024CEC 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00024CF0 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00024CF4 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00024CF8 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
00024CFC 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00024D00 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00024D04 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00024D08 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
00024D0C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00024D10 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00024D14 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00024D18 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
00024D1C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00024D20 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00024D24 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00024D28 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
00024D2C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
00024D2E 00                         SME_Lx_Kl_142:	dc.b 0	
00024D2F 04                         SME_Lx_Kl_143:	dc.b 4	
00024D30 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024D35 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00024D3A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00024D3F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024D44 09                         SME_Lx_Kl_158:	dc.b 9	
00024D45 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024D4A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024D4F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024D54 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024D59 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024D5E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024D63 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00024D68 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00024D6D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00024D72 0A                         SME_Lx_Kl_186:	dc.b $A	
00024D73 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024D78 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024D7D 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024D82 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024D87 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024D8C F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024D91 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00024D96 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00024D9B F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00024DA0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00024DA5 04                         SME_Lx_Kl_1B9:	dc.b 4	
00024DA6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00024DAB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024DB0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00024DB5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024DBA 03                         SME_Lx_Kl_1CE:	dc.b 3	
00024DBB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024DC0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024DC5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024DCA 03                         SME_Lx_Kl_1DE:	dc.b 3	
00024DCB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024DD0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024DD5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024DDA 04                         SME_Lx_Kl_1EE:	dc.b 4	
00024DDB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024DE0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024DE5 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00024DEA 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00024DEF 02                         SME_Lx_Kl_203:	dc.b 2	
00024DF0 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00024DF5 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00024DFA 03                         SME_Lx_Kl_20E:	dc.b 3	
00024DFB FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00024E00 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00024E05 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00024E0A 03                         SME_Lx_Kl_21E:	dc.b 3	
00024E0B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00024E10 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00024E15 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00024E1A 03                         SME_Lx_Kl_22E:	dc.b 3	
00024E1B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00024E20 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00024E25 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00024E2A 04                         SME_Lx_Kl_23E:	dc.b 4	
00024E2B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00024E30 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00024E35 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00024E3A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00024E3F 03                         SME_Lx_Kl_253:	dc.b 3	
00024E40 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00024E45 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00024E4A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024E4F 07                         SME_Lx_Kl_263:	dc.b 7	
00024E50 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00024E55 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00024E5A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00024E5F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00024E64 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00024E69 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00024E6E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00024E73 05                         SME_Lx_Kl_287:	dc.b 5	
00024E74 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00024E79 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00024E7E EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00024E83 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00024E88 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00024E8D 02                         SME_Lx_Kl_2A1:	dc.b 2	
00024E8E FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00024E93 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00024E98 03                         SME_Lx_Kl_2AC:	dc.b 3	
00024E99 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00024E9E EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00024EA3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00024EA8 04                         SME_Lx_Kl_2BC:	dc.b 4	
00024EA9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00024EAE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00024EB3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00024EB8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00024EBD 02                         SME_Lx_Kl_2D1:	dc.b 2	
00024EBE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00024EC3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00024EC8 03                         SME_Lx_Kl_2DC:	dc.b 3	
00024EC9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00024ECE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00024ED3 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00024ED8 05                         SME_Lx_Kl_2EC:	dc.b 5	
00024ED9 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00024EDE 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00024EE3 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00024EE8 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00024EED ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00024EF2 05                         SME_Lx_Kl_306:	dc.b 5	
00024EF3 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00024EF8 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00024EFD FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00024F02 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00024F07 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00024F0C 06                         SME_Lx_Kl_320:	dc.b 6	
00024F0D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00024F12 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00024F17 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00024F1C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00024F21 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00024F26 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00024F2B 04                         SME_Lx_Kl_33F:	dc.b 4	
00024F2C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00024F31 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00024F36 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00024F3B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00024F40 03                         SME_Lx_Kl_354:	dc.b 3	
00024F41 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00024F46 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00024F4B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00024F50 05                         SME_Lx_Kl_364:	dc.b 5	
00024F51 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00024F56 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00024F5B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00024F60 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00024F65 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00024F6A 04                         SME_Lx_Kl_37E:	dc.b 4	
00024F6B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00024F70 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00024F75 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00024F7A 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00024F7F 03                         SME_Lx_Kl_393:	dc.b 3	
00024F80 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00024F85 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00024F8A 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00024F8F 05                         SME_Lx_Kl_3A3:	dc.b 5	
00024F90 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00024F95 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00024F9A FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00024F9F FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00024FA4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00024FA9 04                         SME_Lx_Kl_3BD:	dc.b 4	
00024FAA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00024FAF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
00024FB4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
00024FB9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
00024FBE 02                         SME_Lx_Kl_3D2:	dc.b 2	
00024FBF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00024FC4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
00024FC9 02                         SME_Lx_Kl_3DD:	dc.b 2	
00024FCA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00024FCF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00024FD4 05                         SME_Lx_Kl_3E8:	dc.b 5	
00024FD5 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00024FDA F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00024FDF F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00024FE4 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00024FE9 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00024FEE 04                         SME_Lx_Kl_402:	dc.b 4	
00024FEF F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00024FF4 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00024FF9 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00024FFE 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025003 02                         SME_Lx_Kl_417:	dc.b 2	
00025004 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025009 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002500E 03                         SME_Lx_Kl_422:	dc.b 3	
0002500F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025014 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025019 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002501E 03                         SME_Lx_Kl_432:	dc.b 3	
0002501F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025024 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025029 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002502E 06                         SME_Lx_Kl_442:	dc.b 6	
0002502F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025034 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025039 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002503E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025043 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025048 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002504D 06                         SME_Lx_Kl_461:	dc.b 6	
0002504E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025053 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025058 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002505D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025062 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025067 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002506C 04                         SME_Lx_Kl_480:	dc.b 4	
0002506D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025072 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00025077 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
0002507C 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025081 03                         SME_Lx_Kl_495:	dc.b 3	
00025082 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00025087 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
0002508C 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00025091 05                         SME_Lx_Kl_4A5:	dc.b 5	
00025092 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025097 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
0002509C F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000250A1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000250A6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000250AB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000250AC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000250B1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000250B6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000250BB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000250C0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000250C1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000250C6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000250CB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000250D0 05                         SME_Lx_Kl_4E4:	dc.b 5	
000250D1 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000250D6 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000250DB F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
000250E0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000250E5 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
000250EA 02                         SME_Lx_Kl_4FE:	dc.b 2	
000250EB EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000250F0 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000250F5 02                         SME_Lx_Kl_509:	dc.b 2	
000250F6 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
000250FB EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025100 02                         SME_Lx_Kl_514:	dc.b 2	
00025101 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025106 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002510B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002510C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025111 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025116 02                         SME_Lx_Kl_52A:	dc.b 2	
00025117 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002511C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025121 02                         SME_Lx_Kl_535:	dc.b 2	
00025122 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025127 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002512C 02                         SME_Lx_Kl_540:	dc.b 2	
0002512D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025132 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025137 02                         SME_Lx_Kl_54B:	dc.b 2	
00025138 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002513D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025142 04                         SME_Lx_Kl_556:	dc.b 4	
00025143 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025148 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002514D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025152 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025157 03                         SME_Lx_Kl_56B:	dc.b 3	
00025158 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002515D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025162 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025167 03                         SME_Lx_Kl_57B:	dc.b 3	
00025168 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002516D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025172 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025177 03                         SME_Lx_Kl_58B:	dc.b 3	
00025178 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
0002517D EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
00025182 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025187 04                         SME_Lx_Kl_59B:	dc.b 4	
00025188 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002518D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025192 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025197 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002519C 03                         SME_Lx_Kl_5B0:	dc.b 3	
0002519D FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000251A2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000251A7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000251AC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000251AD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000251B2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000251B7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000251BC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000251BD EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000251C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000251C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000251CC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000251CD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251D2 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251D7 02                         SME_Lx_Kl_5EB:	dc.b 2	
000251D8 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251DD F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251E2 02                         SME_Lx_Kl_5F6:	dc.b 2	
000251E3 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251E8 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251ED 02                         SME_Lx_Kl_601:	dc.b 2	
000251EE F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251F3 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000251F8 02                         SME_Lx_Kl_60C:	dc.b 2	
000251F9 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000251FE F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025203 02                         SME_Lx_Kl_617:	dc.b 2	
00025204 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025209 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002520E 02                         SME_Lx_Kl_622:	dc.b 2	
0002520F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025214 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025219 02                         SME_Lx_Kl_62D:	dc.b 2	
0002521A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002521F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025224 04                         SME_Lx_Kl_638:	dc.b 4	
00025225 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002522A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002522F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025234 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025239 03                         SME_Lx_Kl_64D:	dc.b 3	
0002523A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002523F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025244 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025249 02                         SME_Lx_Kl_65D:	dc.b 2	
0002524A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002524F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025254 03                         SME_Lx_Kl_668:	dc.b 3	
00025255 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002525A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002525F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025264 04                         SME_Lx_Kl_678:	dc.b 4	
00025265 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002526A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002526F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025274 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025279 03                         SME_Lx_Kl_68D:	dc.b 3	
0002527A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002527F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025284 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025289 02                         SME_Lx_Kl_69D:	dc.b 2	
0002528A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002528F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025294 03                         SME_Lx_Kl_6A8:	dc.b 3	
00025295 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002529A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002529F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000252A4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000252A5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000252AA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000252AF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000252B4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000252B5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000252BA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000252BF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000252C4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000252C5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000252CA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000252CF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000252D4 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000252D9 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
000252DE 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
000252E3 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
000252E8 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
000252ED F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
000252F2 09                         SME_Lx_Kl_706:	dc.b 9	
000252F3 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000252F8 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000252FD 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025302 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025307 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002530C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025311 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025316 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002531B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025320 03                         SME_Lx_Kl_734:	dc.b 3	
00025321 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025326 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002532B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025330 03                         SME_Lx_Kl_744:	dc.b 3	
00025331 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025336 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002533B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025340 03                         SME_Lx_Kl_754:	dc.b 3	
00025341 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025346 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002534B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025350 05                         SME_Lx_Kl_764:	dc.b 5	
00025351 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025356 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002535B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025360 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025365 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002536A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002536B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025370 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025375 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002537A 03                         SME_Lx_Kl_78E:	dc.b 3	
0002537B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025380 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025385 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002538A 05                         SME_Lx_Kl_79E:	dc.b 5	
0002538B 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
00025390 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
00025395 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
0002539A ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
0002539F ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000253A4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000253A5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000253AA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000253AF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000253B4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000253B9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000253BE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000253BF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000253C4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000253C9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000253CE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000253D3 04                         SME_Lx_Kl_7E7:	dc.b 4	
000253D4 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000253D9 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
000253DE F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
000253E3 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
000253E8 04                         SME_Lx_Kl_7FC:	dc.b 4	
000253E9 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
000253EE F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
000253F3 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
000253F8 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
000253FD 04                         SME_Lx_Kl_811:	dc.b 4	
000253FE E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025403 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025408 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002540D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025412 01                         SME_Lx_Kl_826:	dc.b 1	
00025413 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025418 01                         SME_Lx_Kl_82C:	dc.b 1	
00025419 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002541E 01                         SME_Lx_Kl_832:	dc.b 1	
0002541F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025424 01                         SME_Lx_Kl_838:	dc.b 1	
00025425 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002542A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002542B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025430 01                         SME_Lx_Kl_844:	dc.b 1	
00025431 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025436 01                         SME_Lx_Kl_84A:	dc.b 1	
00025437 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002543C 03                         SME_Lx_Kl_850:	dc.b 3	
0002543D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025442 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025447 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002544C 01                         SME_Lx_Kl_860:	dc.b 1	
0002544D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025452 02                         SME_Lx_Kl_866:	dc.b 2	
00025453 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025458 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002545D 01                         SME_Lx_Kl_871:	dc.b 1	
0002545E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025463 02                         SME_Lx_Kl_877:	dc.b 2	
00025464 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025469 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002546E 01                         SME_Lx_Kl_882:	dc.b 1	
0002546F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025474 04                         SME_Lx_Kl_888:	dc.b 4	
00025475 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002547A FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
0002547F F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025484 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025489 07                         SME_Lx_Kl_89D:	dc.b 7	
0002548A ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002548F FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025494 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025499 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
0002549E F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000254A3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000254A8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000254AD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000254AE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000254B3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000254B8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000254BD F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000254C2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000254C7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000254C8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000254CD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000254D2 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000254D7 02                         SME_Lx_Kl_8EB:	dc.b 2	
000254D8 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
000254DD EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
000254E2 04                         SME_Lx_Kl_8F6:	dc.b 4	
000254E3 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
000254E8 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
000254ED F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
000254F2 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
000254F7 04                         SME_Lx_Kl_90B:	dc.b 4	
000254F8 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
000254FD FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025502 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025507 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002550C 04                         SME_Lx_Kl_920:	dc.b 4	
0002550D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025512 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025517 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002551C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025521 09                         SME_Lx_Kl_935:	dc.b 9	
00025522 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025527 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002552C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025531 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025536 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002553B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025540 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025545 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002554A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002554F 03                         SME_Lx_Kl_963:	dc.b 3	
00025550 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025555 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002555A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002555F 03                         SME_Lx_Kl_973:	dc.b 3	
00025560 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025565 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002556A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002556F 02                         SME_Lx_Kl_983:	dc.b 2	
00025570 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025575 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
0002557A 00                         SME_Lx_Kl_98E:	dc.b 0	
0002557B 08                         SME_Lx_Kl_98F:	dc.b 8	
0002557C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025581 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025586 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
0002558B F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025590 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025595 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
0002559A 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
0002559F 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000255A4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000255A5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000255AA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000255AF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000255B4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000255B9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000255BE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000255C3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000255C8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000255C9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000255CE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
000255D3 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
000255D8 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
000255DD 03                         SME_Lx_Kl_9F1:	dc.b 3	
000255DE F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000255E3 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000255E8 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000255ED 03                         SME_Lx_Kl_A01:	dc.b 3	
000255EE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000255F3 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
000255F8 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
000255FD 03                         SME_Lx_Kl_A11:	dc.b 3	
000255FE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025603 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025608 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
0002560D 02                         SME_Lx_Kl_A21:	dc.b 2	
0002560E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025613 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025618 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025619 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002561E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025623 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025628 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025629 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002562E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025633 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025638 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025639 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
0002563E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025643 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025648 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025649 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002564E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025653 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025658 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025659 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
0002565E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025663 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025668 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
0002566D 08                         SME_Lx_Kl_A81:	dc.b 8	
0002566E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025673 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025678 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
0002567D 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025682 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025687 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
0002568C 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025691 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025696 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025697 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
0002569C 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000256A1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000256A6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000256AB 04                         SME_Lx_Kl_ABF:	dc.b 4	
000256AC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000256B1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000256B6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000256BB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000256C0 05                         SME_Lx_Kl_AD4:	dc.b 5	
000256C1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000256C6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000256CB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000256D0 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000256D5 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000256DA 05                         SME_Lx_Kl_AEE:	dc.b 5	
000256DB E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000256E0 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000256E5 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000256EA 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000256EF 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000256F4 02                         SME_Lx_Kl_B08:	dc.b 2	
000256F5 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
000256FA 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
000256FF 05                         SME_Lx_Kl_B13:	dc.b 5	
00025700 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025705 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
0002570A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002570F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025714 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025719 03                         SME_Lx_Kl_B2D:	dc.b 3	
0002571A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002571F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025724 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025729 05                         SME_Lx_Kl_B3D:	dc.b 5	
0002572A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002572F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025734 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025739 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
0002573E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025743 02                         SME_Lx_Kl_B57:	dc.b 2	
00025744 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025749 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002574E 03                         SME_Lx_Kl_B62:	dc.b 3	
0002574F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025754 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025759 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002575E 03                         SME_Lx_Kl_B72:	dc.b 3	
0002575F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025764 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025769 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002576E 03                         SME_Lx_Kl_B82:	dc.b 3	
0002576F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025774 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025779 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002577E 02                         SME_Lx_Kl_B92:	dc.b 2	
0002577F EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025784 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025789 03                         SME_Lx_Kl_B9D:	dc.b 3	
0002578A E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
0002578F E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025794 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025799 0B                         SME_Lx_Kl_BAD:	dc.b $B	
0002579A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002579F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000257A4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000257A9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000257AE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000257B3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000257B8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000257BD F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000257C2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000257C7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000257CC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
000257D1 06                         SME_Lx_Kl_BE5:	dc.b 6	
000257D2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000257D7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000257DC F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000257E1 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
000257E6 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000257EB 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
000257F0 03                         SME_Lx_Kl_C04:	dc.b 3	
000257F1 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000257F6 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
000257FB 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025800 07                         SME_Lx_Kl_C14:	dc.b 7	
00025801 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025806 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
0002580B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025810 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025815 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
0002581A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
0002581F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025824 02                         SME_Lx_Kl_C38:	dc.b 2	
00025825 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
0002582A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
0002582F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025830 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025835 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
0002583A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002583F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025844 03                         SME_Lx_Kl_C58:	dc.b 3	
00025845 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0002584A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
0002584F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025854 03                         SME_Lx_Kl_C68:	dc.b 3	
00025855 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0002585A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
0002585F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025864 04                         SME_Lx_Kl_C78:	dc.b 4	
00025865 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
0002586A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
0002586F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025874 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025879 01                         SME_Lx_Kl_C8D:	dc.b 1	
0002587A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002587F 01                         SME_Lx_Kl_C93:	dc.b 1	
00025880 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025885 01                         SME_Lx_Kl_C99:	dc.b 1	
00025886 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002588B 01                         SME_Lx_Kl_C9F:	dc.b 1	
0002588C F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025891 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025892 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025897 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
0002589C                            		even
0002589C                            		even
0002589C                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
0002589C                            ; --------------------------------------------------------------------------------
0002589C                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
0002589C                            
0002589C                            SME_vJmm3:	
0002589C 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
000258A0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
000258A4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
000258A8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
000258AC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
000258B0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
000258B4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
000258B8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
000258BC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
000258C0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
000258C4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
000258C8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
000258CC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
000258D0 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
000258D4 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
000258D8 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
000258DC 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
000258E0 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
000258E4 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
000258E8 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
000258EC 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
000258F0 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
000258F4 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
000258F8 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
000258FC 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025900 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025904 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025908 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
0002590C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025910 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025914 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025918 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
0002591C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025920 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025924 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025928 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
0002592C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025930 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025934 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025938 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
0002593C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025940 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025944 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025948 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
0002594C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025950 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025954 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025958 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
0002595C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025960 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025964 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025968 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
0002596C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025970 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025974 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025978 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
0002597C 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025980 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025984 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025988 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
0002598C 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025990 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025994 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025998 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
0002599C 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
000259A0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
000259A4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
000259A8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
000259AC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
000259B0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
000259B4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
000259B8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
000259BC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
000259C0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
000259C4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
000259C8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
000259CC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
000259D0 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
000259D4 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
000259D8 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
000259DC 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
000259DE 00                         SME_vJmm3_142:	dc.b 0	
000259DF 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000259E8 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
000259FB 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025A10 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025A19 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025A20 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025A27 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025A30 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025A35 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025A3C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025A43 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025A4A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025A53 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025A5A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025A69 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025A74 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025A7B 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025A82 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025A8B 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025A90 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025A97 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025AA2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025AAD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025ABA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025AC3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025ACA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025AD5 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025ADE 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025AE5 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025AF0 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025AF9 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025AFE 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025B03 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025B0E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025B17 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025B1C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025B23 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025B2A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025B37 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025B44 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025B4D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025B54 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025B5F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025B68 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025B6F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025B7A 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025B7F 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025B84 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025B89 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025B8E 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025B93 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025B98 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025B9D 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025BA2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025BAB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025BB2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025BB9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025BC0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025BC9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00025BD0 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00025BD7 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00025BDE 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00025BE3 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00025BE8 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
00025BED 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00025BF2 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00025BF7 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
00025BFC 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00025C01 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00025C06 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00025C0F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00025C16 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
00025C1B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00025C22 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00025C2B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00025C32 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00025C37 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00025C3E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00025C45 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00025C4C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00025C5F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00025C72 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00025C79 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00025C80 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00025C87 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00025C92 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00025C99 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00025CA0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00025CAB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00025CB6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00025CBF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00025CC8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00025CD1 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00025CDA 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
00025CDD 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00025CE0 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00025CE3 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00025CE6 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00025CE9 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
00025CEC 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
00025CEF 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00025CF6 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00025CF9 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
00025CFE 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00025D01 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00025D06 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00025D09 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00025D12 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00025D21 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00025D2C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00025D33 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00025D38 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00025D41 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00025D4A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00025D53 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00025D66 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00025D6D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00025D74 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
00025D79 00                         SME_vJmm3_4DD:	dc.b 0	
00025D7A 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00025D8B 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00025D9A 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00025DA3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025DAA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025DB1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025DB8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
00025DBB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025DC2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025DC9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025DD0 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00025DD7 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00025DE0 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00025DF1 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00025DFA 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00025E03 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00025E0E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00025E19 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
00025E1E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00025E29 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00025E30 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00025E3B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00025E40 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00025E47 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00025E4E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00025E55 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
00025E5A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00025E61 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00025E78 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00025E85 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00025E8C 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00025E9B 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
00025EA0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
00025EA9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
00025EB0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
00025EB7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
00025EC0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
00025EC3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
00025EC6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
00025EC9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
00025ECC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00025ED0 00                         		even
00025ED0 00                         		even
00025ED0                            
00025ED0                            ; ---------------------------------------------------------------------------
00025ED0                            ; Uncompressed graphics	- Sonic
00025ED0                            ; ---------------------------------------------------------------------------
00025ED0                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C4D0                            		even
0003C4D0                            ; ---------------------------------------------------------------------------
0003C4D0                            ; Compressed graphics - various
0003C4D0                            ; ---------------------------------------------------------------------------
0003C4D0                            Unc_GShield:	incbin	"artunc\Gray Shield.bin"
0003C830                            		even
0003C830                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CB90                            		even
0003CB90                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003CEF0                            		even
0003CEF0                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003D370                            		even
0003D370                            
0003D370                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003D370                            ; ---------------------------------------------------------------------------
0003D370                            ; Sprite mappings - walls of the special stage
0003D370                            ; ---------------------------------------------------------------------------
0003D370                            Map_SSWalls_internal:
0003D370 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003D372 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003D374 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003D376 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003D378 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003D37A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003D37C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003D37E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003D380 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003D382 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003D384 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003D386 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003D388 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003D38A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003D38C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003D38E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003D390 01                         byte_2C584:	dc.b 1
0003D391 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003D396 01                         byte_2C58A:	dc.b 1
0003D397 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003D39C 01                         byte_2C590:	dc.b 1
0003D39D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003D3A2 01                         byte_2C596:	dc.b 1
0003D3A3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003D3A8 01                         byte_2C59C:	dc.b 1
0003D3A9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003D3AE 01                         byte_2C5A2:	dc.b 1
0003D3AF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003D3B4 01                         byte_2C5A8:	dc.b 1
0003D3B5 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003D3BA 01                         byte_2C5AE:	dc.b 1
0003D3BB F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003D3C0 01                         byte_2C5B4:	dc.b 1
0003D3C1 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003D3C6 01                         byte_2C5BA:	dc.b 1
0003D3C7 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003D3CC 01                         byte_2C5C0:	dc.b 1
0003D3CD F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003D3D2 01                         byte_2C5C6:	dc.b 1
0003D3D3 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003D3D8 01                         byte_2C5CC:	dc.b 1
0003D3D9 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003D3DE 01                         byte_2C5D2:	dc.b 1
0003D3DF F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003D3E4 01                         byte_2C5D8:	dc.b 1
0003D3E5 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003D3EA 01                         byte_2C5DE:	dc.b 1
0003D3EB F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003D3F0                            		even
0003D3F0                            		even
0003D3F0                            
0003D3F0                            ; ---------------------------------------------------------------------------
0003D3F0                            ; Compressed graphics - special stage
0003D3F0                            ; ---------------------------------------------------------------------------
0003D3F0                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003DD28                            		even
0003DD28                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003DE5C                            		even
0003DE5C                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003EAEC                            		even
0003EAEC                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003EDEC                            		even
0003EDEC                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003F2E0                            		even
0003F2E0                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003F3CE                            		even
0003F3CE                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003F49E                            		even
0003F49E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003F594                            		even
0003F594                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003F5F2                            		even
0003F5F2                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003F684                            		even
0003F684                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003F746                            		even
0003F746                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003F814                            		even
0003F814                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0003F8E0                            		even
0003F8E0                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0003F9A8                            		even
0003F9A8                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
0003FA72                            		even
0003FA72                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
0003FB42                            		even
0003FB42                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
0003FD36                            		even
0003FD36                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0003FE9E                            		even
0003FE9E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
0003FF4E                            		even
0003FF4E                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
00040028                            		even
00040028                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
000400AC                            		even
000400AC                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0004022A                            		even
0004022A                            ; ---------------------------------------------------------------------------
0004022A                            ; Compressed graphics - GHZ stuff
0004022A                            ; ---------------------------------------------------------------------------
0004022A                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
0004028C                            		even
0004028C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
000403A6                            		even
000403A6                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
000404C4                            		even
000404C4                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
0004050C                            		even
0004050C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
000406AA                            		even
000406AA                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040726                            		even
00040726                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
0004093A                            		even
0004093A                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00040A66                            		even
00040A66                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00040BBA                            		even
00040BBA                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00040C6A                            		even
00040C6A                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
00040CCA                            		even
00040CCA                            ; ---------------------------------------------------------------------------
00040CCA                            ; Compressed graphics - LZ stuff
00040CCA                            ; ---------------------------------------------------------------------------
00040CCA                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00040DA2                            		even
00040DA2                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041596                            		even
00041596                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041728 00                         		even
00041728                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00041892                            		even
00041892                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00041ED2 00                         		even
00041ED2                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00041F74 00                         		even
00041F74                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00041FF8                            		even
00041FF8                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00042154                            		even
00042154                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
000421DA                            		even
000421DA                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00042348                            		even
00042348                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
0004282A                            		even
0004282A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
0004299A                            		even
0004299A                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00042C52                            		even
00042C52                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00042D98                            		even
00042D98                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00042EC2                            		even
00042EC2                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
00043048 00                         		even
00043048                            ; ---------------------------------------------------------------------------
00043048                            ; Compressed graphics - MZ stuff
00043048                            ; ---------------------------------------------------------------------------
00043048                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
000432D6                            		even
000432D6                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043394                            		even
00043394                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
0004346C                            		even
0004346C                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
000434C0                            		even
000434C0                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
000437DE 00                         		even
000437DE                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
000440F4                            		even
000440F4                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
0004428A                            		even
0004428A                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044312                            		even
00044312                            ; ---------------------------------------------------------------------------
00044312                            ; Compressed graphics - SLZ stuff
00044312                            ; ---------------------------------------------------------------------------
00044312                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
0004454E                            		even
0004454E                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044694                            		even
00044694                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
000448D8                            		even
000448D8                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00044974 00                         		even
00044974                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00044A56                            		even
00044A56                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00044C38                            		even
00044C38                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00044D44                            		even
00044D44                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00044DE8                            		even
00044DE8                            ; ---------------------------------------------------------------------------
00044DE8                            ; Compressed graphics - SYZ stuff
00044DE8                            ; ---------------------------------------------------------------------------
00044DE8                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00044F78                            		even
00044F78                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
00044FDA                            		even
00044FDA                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
000450AA 00                         		even
000450AA                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045338                            		even
00045338                            ; ---------------------------------------------------------------------------
00045338                            ; Compressed graphics - SBZ stuff
00045338                            ; ---------------------------------------------------------------------------
00045338                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0004538C                            		even
0004538C                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045628                            		even
00045628                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045818                            		even
00045818                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
000459B6                            		even
000459B6                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00045CE6                            		even
00045CE6                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00045EC4                            		even
00045EC4                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
00045F1C                            		even
00045F1C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
000460BC                            		even
000460BC                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
000461BA                            		even
000461BA                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00046348                            		even
00046348                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
000463E2                            		even
000463E2                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0004643A                            		even
0004643A                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046536                            		even
00046536                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0004664C                            		even
0004664C                            ; ---------------------------------------------------------------------------
0004664C                            ; Compressed graphics - enemies
0004664C                            ; ---------------------------------------------------------------------------
0004664C                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00046A94 00                         		even
00046A94                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
00046F84 00                         		even
00046F84                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
00047268 00                         		even
00047268                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
000475DC 00                         		even
000475DC                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
000477C4                            		even
000477C4                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00047EF2 00                         		even
00047EF2                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0004817A 00                         		even
0004817A                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048416 00                         		even
00048416                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
000489EA                            		even
000489EA                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
00048C7C                            		even
00048C7C                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
000492C6 00                         		even
000492C6                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049702                            		even
00049702                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
00049A10 00                         		even
00049A10                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
00049C70                            		even
00049C70                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
00049F6E                            		even
00049F6E                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A14C                            		even
0004A14C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004A2DA                            		even
0004A2DA                            ; ---------------------------------------------------------------------------
0004A2DA                            ; Compressed graphics - various
0004A2DA                            ; ---------------------------------------------------------------------------
0004A2DA                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004A928 00                         		even
0004A928                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004AAA0 00                         		even
0004AAA0                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004ABC4                            		even
0004ABC4                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004AD18 00                         		even
0004AD18                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B1C6                            		even
0004B1C6                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004B83A                            		even
0004B83A                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004B8D4 00                         		even
0004B8D4                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004BA66                            		even
0004BA66                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004BB84 00                         		even
0004BB84                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004BC70                            		even
0004BC70                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C1E8 00                         		even
0004C1E8                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004C2D2                            		even
0004C2D2                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004C446                            		even
0004C446                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004C7CE 00                         		even
0004C7CE                            ; ---------------------------------------------------------------------------
0004C7CE                            ; Compressed graphics - continue screen
0004C7CE                            ; ---------------------------------------------------------------------------
0004C7CE                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004CA7E                            		even
0004CA7E                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004CCB8                            		even
0004CCB8                            ; ---------------------------------------------------------------------------
0004CCB8                            ; Compressed graphics - animals
0004CCB8                            ; ---------------------------------------------------------------------------
0004CCB8                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004CE10                            		even
0004CE10                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004CF6C                            		even
0004CF6C                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D0E8                            		even
0004D0E8                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D204                            		even
0004D204                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004D37E                            		even
0004D37E                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004D4B8                            		even
0004D4B8                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004D614                            		even
0004D614                            ; ---------------------------------------------------------------------------
0004D614                            ; Compressed graphics - primary patterns and block mappings
0004D614                            ; ---------------------------------------------------------------------------
0004D614                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E016                            		even
0004E016                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0004F8BE                            		even
0004F8BE                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00050E4E                            		even
00050E4E                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053238                            		even
00053238                            Blk16_TS:	incbin	"map16\TS.bin"
000534BC                            		even
000534BC                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
000545FA                            		even
000545FA                            Blk256_TS:	incbin	"map256\TS.bin"
000551A8                            		even
000551A8                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056424                            		even
00056424                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
000598F6                            		even
000598F6                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005CDB4                            		even
0005CDB4                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005D5BC                            		even
0005D5BC                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
0005FFB4                            		even
0005FFB4                            		incbin	"map256\MZ (JP1).bin"
00061E92                            		even
00061E92                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062514                            		even
00062514                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00065F7E                            		even
00065F7E                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068388                            		even
00068388                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
00068F08                            		even
00068F08                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006C2E6                            		even
0006C2E6                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006D692                            		even
0006D692                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006E28C                            		even
0006E28C                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00070ACE                            		even
00070ACE                            		incbin	"map256\SBZ (JP1).bin"
0007165A                            		even
0007165A                            ; ---------------------------------------------------------------------------
0007165A                            ; Compressed graphics - bosses and ending sequence
0007165A                            ; ---------------------------------------------------------------------------
0007165A                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00071ED6 00                         		even
00071ED6                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000721C0                            		even
000721C0                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00072A44                            		even
00072A44                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073270                            		even
00073270                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00073A3E 00                         		even
00073A3E                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00073FBE                            		even
00073FBE                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000740DE                            		even
000740DE                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000742E6 00                         		even
000742E6                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
000754C4                            		even
000754C4                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00075E08                            		even
00075E08                            		even
00075E08                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076398                            		even
00076398                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076620                            		even
00076620                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00076C1E                            		even
00076C1E                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00076EA6                            		even
00076EA6                            
00076EA6 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00076EE6                            ; ---------------------------------------------------------------------------
00076EE6                            ; Collision data
00076EE6                            ; ---------------------------------------------------------------------------
00076EE6                            AngleMap:	incbin	"collide\Angle Map.bin"
00076FE6                            		even
00076FE6                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00077FE6                            		even
00077FE6                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
00078FE6                            		even
00078FE6                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
000791A4 00                         		even
000791A4                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079462                            		even
00079462                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
000795DC 00                         		even
000795DC                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
000797D0                            		even
000797D0                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
000799BA                            		even
000799BA                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
00079B8A 00                         		even
00079B8A                            ; ---------------------------------------------------------------------------
00079B8A                            ; Special Stage layouts
00079B8A                            ; ---------------------------------------------------------------------------
00079B8A                            SS_1:		incbin	"sslayout\1.bin"
00079E04                            		even
00079E04                            SS_2:		incbin	"sslayout\2.bin"
0007A216                            		even
0007A216                            SS_3:		incbin	"sslayout\3.bin"
0007A572                            		even
0007A572                            SS_4:		incbin	"sslayout\4.bin"
0007AA4C                            		even
0007AA4C                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007AEFC                            			even
0007AEFC                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007B1EE                            		even
0007B1EE                            ; ---------------------------------------------------------------------------
0007B1EE                            ; Animated uncompressed graphics
0007B1EE                            ; ---------------------------------------------------------------------------
0007B1EE                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007B3EE                            		even
0007B3EE                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007B7EE                            		even
0007B7EE                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007BC6E                            		even
0007BC6E                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007BF6E                            		even
0007BF6E                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007C56E                            		even
0007C56E                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007C86E                            		even
0007C86E                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007D2EE                            		even
0007D2EE                            
0007D2EE                            ; ---------------------------------------------------------------------------
0007D2EE                            ; Level	layout index
0007D2EE                            ; ---------------------------------------------------------------------------
0007D2EE                            Level_Index:
0007D2EE                            		; GHZ
0007D2EE 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007D2F4 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007D2FA 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007D300 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007D306                            		; LZ
0007D306 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007D30C 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007D312 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007D318 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007D31E                            		; MZ
0007D31E 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007D324 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007D32A 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007D330 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007D336                            		; SLZ
0007D336 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D33C 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D342 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D348 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007D34E                            		; SYZ
0007D34E 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007D354 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007D35A 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007D360 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007D366                            		; SBZ
0007D366 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007D36C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007D372 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007D378 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007D37E                            		; Ending
0007D37E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007D384 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007D38A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007D390 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007D396                            
0007D396                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007D5C8                            		even
0007D5C8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007D5CC                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007D6EE                            		even
0007D6EE 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007D6F2                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007D974                            		even
0007D974                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007D9B6                            		even
0007D9B6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007D9BA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007D9BE                            
0007D9BE                            Level_LZ1:	incbin	"levels\lz1.bin"
0007DA80                            		even
0007DA80                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007DB82                            		even
0007DB82 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007DB86                            Level_LZ2:	incbin	"levels\lz2.bin"
0007DC20                            		even
0007DC20 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007DC24                            Level_LZ3:	incbin	"levels\lz3.bin"
0007DD3E                            		even
0007DD3E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007DD42                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007DDFC                            		even
0007DDFC 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007DE00                            
0007DE00                            Level_MZ1:	incbin	"levels\mz1.bin"
0007DEF2                            		even
0007DEF2                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E014                            		even
0007E014                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E106                            		even
0007E106                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007E228                            		even
0007E228 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007E22C                            Level_MZ3:	incbin	"levels\mz3.bin"
0007E29E                            		even
0007E29E                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007E3C0                            		even
0007E3C0 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007E3C4 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007E3C8                            
0007E3C8                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007E4DA                            		even
0007E4DA                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007E554                            		even
0007E554                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007E644                            		even
0007E644                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007E75E                            		even
0007E75E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007E762                            
0007E762                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007E866                            		even
0007E866                            		incbin	"levels\syzbg (JP1).bin"
0007E8A0                            		even
0007E8A0 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007E8A4                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007E9A8                            		even
0007E9A8 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007E9AC                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007EB06 00                         		even
0007EB06 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007EB0A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007EB0E                            
0007EB0E                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007EC30                            		even
0007EC30                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007EC6E                            		even
0007EC6E                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007EDB0                            		even
0007EDB0                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007EF1A                            		even
0007EF1A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007EF1E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007EF22                            Level_End:	incbin	"levels\ending.bin"
0007EF52 00                         		even
0007EF52 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007EF56                            
0007EF56                            
0007EF56                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
0007FB96                            		even
0007FB96                            
0007FC00                            
0007FC00                            ; ---------------------------------------------------------------------------
0007FC00                            ; Sprite locations index
0007FC00                            ; ---------------------------------------------------------------------------
0007FC00                            ObjPos_Index:
0007FC00                            		; GHZ
0007FC00 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC04 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC08 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC0C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC10                            		; LZ
0007FC10 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC14 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC18 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC1C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC20                            		; MZ
0007FC20 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC24 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC28 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC2C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC30                            		; SLZ
0007FC30 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC34 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC38 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC3C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC40                            		; SYZ
0007FC40 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC44 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC48 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC4C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC50                            		; SBZ
0007FC50 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC54 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC58 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC5C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC60                            		; Ending
0007FC60 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC64 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC68 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC6C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007FC70                            		; --- Put extra object data here. ---
0007FC70                            ObjPosLZPlatform_Index:
0007FC70 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007FC74 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0007FC78 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0007FC7C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007FC80                            ObjPosSBZPlatform_Index:
0007FC80 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007FC84 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0007FC88 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0007FC8C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007FC90 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007FC96                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
000802F6                            		even
000802F6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
0008074C                            		even
0008074C                            		incbin	"objpos\ghz3 (JP1).bin"
0008095C                            		even
0008095C                            		incbin	"objpos\lz1 (JP1).bin"
00080992                            		even
00080992                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
00080CD4                            		even
00080CD4                            		incbin	"objpos\lz3 (JP1).bin"
00081298                            		even
00081298                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
0008192E                            		even
0008192E                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00081960                            		even
00081960                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00081992                            		even
00081992                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000819C4                            		even
000819C4                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000819F6                            		even
000819F6                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00081A40                            		even
00081A40                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00081A7E                            		even
00081A7E                            		incbin	"objpos\mz1 (JP1).bin"
0008204E                            		even
0008204E                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
0008235A                            		even
0008235A                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082540                            		even
00082540                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00082A74                            		even
00082A74                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00082EE2                            		even
00082EE2                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
000834C4                            		even
000834C4                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
0008350C                            		even
0008350C                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083518                            		even
00083518                            		incbin	"objpos\syz3 (JP1).bin"
00083530                            		even
00083530                            		incbin	"objpos\sbz1 (JP1).bin"
00083578                            		even
00083578                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
000835A2                            		even
000835A2                            ObjPos_FZ:	incbin	"objpos\fz.bin"
000835C6                            		even
000835C6                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
000835F8                            		even
000835F8                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
0008362A                            		even
0008362A                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
0008365C                            		even
0008365C                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
0008368E                            		even
0008368E                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
000836C0                            		even
000836C0                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
000836F8                            		even
000836F8                            ObjPos_End:	incbin	"objpos\ending.bin"
00083854                            		even
00083854 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008385A                            
0008385A                            		dcb.b $63C,$FF
00083E96                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00083E96                            
00083E96                            SoundDriver:	include "s1.sounddriver.asm"
00083E96                            ; ---------------------------------------------------------------------------
00083E96                            ; Modified (early?) SMPS 68k Type 1b
00083E96                            ; ---------------------------------------------------------------------------
00083E96                            ; Go_SoundTypes:
00083E96 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00083E9A                            ; Go_SoundD0:
00083E9A 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00083E9E 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00083EA2 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00083EA6                            ; off_719A0:
00083EA6 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00083EAA 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00083EAE                            ; ---------------------------------------------------------------------------
00083EAE                            ; PSG instruments used in music
00083EAE                            ; ---------------------------------------------------------------------------
00083EAE                            PSG_Index:
00083EAE 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00083EBA 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00083EC6 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00083ED2                            PSG1:		incbin	"sound/psg/psg1.bin"
00083EE9                            PSG2:		incbin	"sound/psg/psg2.bin"
00083EF0                            PSG3:		incbin	"sound/psg/psg3.bin"
00083F01                            PSG4:		incbin	"sound/psg/psg4.bin"
00083F0C                            PSG6:		incbin	"sound/psg/psg6.bin"
00083F1B                            PSG5:		incbin	"sound/psg/psg5.bin"
00083F45                            PSG7:		incbin	"sound/psg/psg7.bin"
00083F61                            PSG8:		incbin	"sound/psg/psg8.bin"
00083F89                            PSG9:		incbin	"sound/psg/psg9.bin"
00083F9A                            ; ---------------------------------------------------------------------------
00083F9A                            ; New tempos for songs during speed shoes
00083F9A                            ; ---------------------------------------------------------------------------
00083F9A                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00083F9A                            ; tempos while speed shoes are active. If you don't want that, you should add
00083F9A                            ; their "correct" sped-up main tempos to the list.
00083F9A                            ; byte_71A94:
00083F9A                            SpeedUpIndex:
00083F9A 07                         		dc.b 7		; GHZ
00083F9B 72                         		dc.b $72	; LZ
00083F9C 73                         		dc.b $73	; MZ
00083F9D 26                         		dc.b $26	; SLZ
00083F9E 15                         		dc.b $15	; SYZ
00083F9F 08                         		dc.b 8		; SBZ
00083FA0 FF                         		dc.b $FF	; Invincibility
00083FA1 05                         		dc.b 5		; Extra Life
00083FA2                            		;dc.b ?		; Special Stage
00083FA2                            		;dc.b ?		; Title Screen
00083FA2                            		;dc.b ?		; Ending
00083FA2                            		;dc.b ?		; Boss
00083FA2                            		;dc.b ?		; FZ
00083FA2                            		;dc.b ?		; Sonic Got Through
00083FA2                            		;dc.b ?		; Game Over
00083FA2                            		;dc.b ?		; Continue Screen
00083FA2                            		;dc.b ?		; Credits
00083FA2                            		;dc.b ?		; Drowning
00083FA2                            		;dc.b ?		; Get Emerald
00083FA2                            
00083FA2                            ; ---------------------------------------------------------------------------
00083FA2                            ; Music	Pointers
00083FA2                            ; ---------------------------------------------------------------------------
00083FA2                            MusicIndex:
00083FA2 0000 0000                  ptr_mus81:	dc.l Music81
00083FA6 0000 0000                  ptr_mus82:	dc.l Music82
00083FAA 0000 0000                  ptr_mus83:	dc.l Music83
00083FAE 0000 0000                  ptr_mus84:	dc.l Music84
00083FB2 0000 0000                  ptr_mus85:	dc.l Music85
00083FB6 0000 0000                  ptr_mus86:	dc.l Music86
00083FBA 0000 0000                  ptr_mus87:	dc.l Music87
00083FBE 0000 0000                  ptr_mus88:	dc.l Music88
00083FC2 0000 0000                  ptr_mus89:	dc.l Music89
00083FC6 0000 0000                  ptr_mus8A:	dc.l Music8A
00083FCA 0000 0000                  ptr_mus8B:	dc.l Music8B
00083FCE 0000 0000                  ptr_mus8C:	dc.l Music8C
00083FD2 0000 0000                  ptr_mus8D:	dc.l Music8D
00083FD6 0000 0000                  ptr_mus8E:	dc.l Music8E
00083FDA 0000 0000                  ptr_mus8F:	dc.l Music8F
00083FDE 0000 0000                  ptr_mus90:	dc.l Music90
00083FE2 0000 0000                  ptr_mus91:	dc.l Music91
00083FE6 0000 0000                  ptr_mus92:	dc.l Music92
00083FEA 0000 0000                  ptr_mus93:	dc.l Music93
00083FEE 0000 0000                  ptr_mus94:	dc.l Music94
00083FF2 0000 0000                  ptr_mus95:	dc.l Music95
00083FF6 0000 0000                  ptr_mus96:	dc.l Music96
00083FFA 0000 0000                  ptr_mus97:	dc.l Music97
00083FFE 0000 0000                  ptr_mus98:	dc.l Music98
00084002                            ptr_musend
00084002                            ; ---------------------------------------------------------------------------
00084002                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084002                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084002                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084002                            ; any music or SFX can override it (as long as it can override whatever was
00084002                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084002                            ; will only override special SFX and music will only override music.
00084002                            ; ---------------------------------------------------------------------------
00084002                            ; SoundTypes:
00084002                            SoundPriorities:
00084002 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084011 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084021 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084031 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084041 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084051 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084061 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00084066                            
00084066                            ; ---------------------------------------------------------------------------
00084066                            ; Subroutine to update music more than once per frame
00084066                            ; (Called by horizontal & vert. interrupts)
00084066                            ; ---------------------------------------------------------------------------
00084066                            
00084066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084066                            
00084066                            ; sub_71B4C:
00084066                            UpdateMusic:
00084066 33FC 0100 00A1 1100        		stopZ80
0008406E 4E71                       		nop	
00084070 4E71                       		nop	
00084072 4E71                       		nop	
00084074                            ; loc_71B5A:
00084074                            @updateloop:
00084074 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
0008407C 66F6                       		bne.s	@updateloop			; If so, wait
0008407E                            
0008407E 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00084086 6700                       		beq.s	@driverinput			; Branch if yes
00084088 33FC 0000 00A1 1100        		startZ80
00084090 4E71                       		nop	
00084092 4E71                       		nop	
00084094 4E71                       		nop	
00084096 4E71                       		nop	
00084098 4E71                       		nop	
0008409A 60CA                       		bra.s	UpdateMusic
0008409C                            ; ===========================================================================
0008409C                            ; loc_71B82:
0008409C                            @driverinput:
0008409C 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000840A2 422E 000E                  		clr.b	f_voice_selector(a6)
000840A6 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000840AA 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000840AE 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
000840B2 6600                       		bne.s	@skipdelay
000840B4 4EBA 0000                  		jsr	TempoWait(pc)
000840B8                            ; loc_71B9E:
000840B8                            @skipdelay:
000840B8 102E 0004                  		move.b	v_fadeout_counter(a6),d0
000840BC 6700                       		beq.s	@skipfadeout
000840BE 4EBA 0000                  		jsr	DoFadeOut(pc)
000840C2                            ; loc_71BA8:
000840C2                            @skipfadeout:
000840C2 4A2E 0024                  		tst.b	f_fadein_flag(a6)
000840C6 6700                       		beq.s	@skipfadein
000840C8 4EBA 0000                  		jsr	DoFadeIn(pc)
000840CC                            ; loc_71BB2:
000840CC                            @skipfadein:
000840CC                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
000840CC 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
000840D0 6700                       		beq.s	@nosndinput		; if not, branch
000840D2 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000840D6                            ; loc_71BBC:
000840D6                            @nosndinput:
000840D6 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000840DC 6700                       		beq.s	@nonewsound		; If yes, branch
000840DE 4EBA 0000                  		jsr	PlaySoundID(pc)
000840E2                            ; loc_71BC8:
000840E2                            @nonewsound:
000840E2 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000840E6 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000840E8 6A00                       		bpl.s	@dacdone		; Branch if not
000840EA 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000840EE                            ; loc_71BD4:
000840EE                            @dacdone:
000840EE 422E 0008                  		clr.b	f_updating_dac(a6)
000840F2 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000840F4                            ; loc_71BDA:
000840F4                            @bgmfmloop:
000840F4 DAFC 0030                  		adda.w	#TrackSz,a5
000840F8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000840FA 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000840FC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084100                            ; loc_71BE6:
00084100                            @bgmfmnext:
00084100 51CF FFF2                  		dbf	d7,@bgmfmloop
00084104                            
00084104 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084106                            ; loc_71BEC:
00084106                            @bgmpsgloop:
00084106 DAFC 0030                  		adda.w	#TrackSz,a5
0008410A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008410C 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
0008410E 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084112                            ; loc_71BF8:
00084112                            @bgmpsgnext:
00084112 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084116                            
00084116 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
0008411C 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
0008411E                            ; loc_71C04:
0008411E                            @sfxfmloop:
0008411E DAFC 0030                  		adda.w	#TrackSz,a5
00084122 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084124 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084126 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0008412A                            ; loc_71C10:
0008412A                            @sfxfmnext:
0008412A 51CF FFF2                  		dbf	d7,@sfxfmloop
0008412E                            
0008412E 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084130                            ; loc_71C16:
00084130                            @sfxpsgloop:
00084130 DAFC 0030                  		adda.w	#TrackSz,a5
00084134 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084136 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084138 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0008413C                            ; loc_71C22:
0008413C                            @sfxpsgnext:
0008413C 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084140                            		
00084140 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084146 DAFC 0030                  		adda.w	#TrackSz,a5
0008414A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008414C 6A00                       		bpl.s	@specfmdone		; Branch if not
0008414E 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084152                            ; loc_71C38:
00084152                            @specfmdone:
00084152 DAFC 0030                  		adda.w	#TrackSz,a5
00084156 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084158 6A00                       		bpl.s	DoStartZ80		; Branch if not
0008415A 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0008415E                            ; loc_71C44:
0008415E                            DoStartZ80:
0008415E 33FC 0000 00A1 1100        		startZ80
00084166 4E75                       		rts	
00084168                            ; End of function UpdateMusic
00084168                            
00084168                            
00084168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084168                            
00084168                            ; sub_71C4E: UpdateDAC:
00084168                            DACUpdateTrack:
00084168 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
0008416C 6600                       		bne.s	@locret				; Return if not
0008416E 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084174                            ;DACDoNext:
00084174 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084178                            ; loc_71C5E:
00084178                            @sampleloop:
00084178 7A00                       		moveq	#0,d5
0008417A 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
0008417C 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084180 6500                       		blo.s	@notcoord	; Branch if not
00084182 4EBA 0000                  		jsr	CoordFlag(pc)
00084186 60F0                       		bra.s	@sampleloop
00084188                            ; ===========================================================================
00084188                            ; loc_71C6E:
00084188                            @notcoord:
00084188 4A05                       		tst.b	d5			; Is it a sample?
0008418A 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
0008418C 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084190 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084192 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084194 534C                       		subq.w	#1,a4			; Put byte back
00084196 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
0008419C 6000                       		bra.s	@gotsampleduration
0008419E                            ; ===========================================================================
0008419E                            ; loc_71C84:
0008419E                            @gotduration:
0008419E 4EBA 0000                  		jsr	SetDuration(pc)
000841A2                            ; loc_71C88:
000841A2                            @gotsampleduration:
000841A2 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
000841A6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000841AA 6600                       		bne.s	@locret			; Return if yes
000841AC 7000                       		moveq	#0,d0
000841AE 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
000841B2 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
000841B6 6700                       		beq.s	@locret			; Return if yes
000841B8 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
000841BC 6600                       		bne.s	@timpani		; Various timpani
000841BE 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
000841C4                            ; locret_71CAA:
000841C4                            @locret:
000841C4 4E75                       		rts	
000841C6                            ; ===========================================================================
000841C6                            ; loc_71CAC:
000841C6                            @timpani:
000841C6 0400 0088                  		subi.b	#$88,d0		; Convert into an index
000841CA 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
000841CE                            		; Warning: this affects the raw pitch of sample $83, meaning it will
000841CE                            		; use this value from then on.
000841CE 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
000841D4 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
000841DC 4E75                       		rts	
000841DE                            ; End of function DACUpdateTrack
000841DE                            
000841DE                            ; ===========================================================================
000841DE                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
000841DE                            ; Also, $8C-$8D are so slow you may want to skip them.
000841DE                            ; byte_71CC4:
000841DE 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
000841E4                            
000841E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000841E4                            
000841E4                            ; sub_71CCA:
000841E4                            FMUpdateTrack:
000841E4 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
000841E8 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
000841EA 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000841EE 4EBA 0000                  		jsr	FMDoNext(pc)
000841F2 4EBA 0000                  		jsr	FMPrepareNote(pc)
000841F6 6000 0000                  		bra.w	FMNoteOn
000841FA                            ; ===========================================================================
000841FA                            ; loc_71CE0:
000841FA                            @notegoing:
000841FA 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
000841FE 4EBA 0000                  		jsr	DoModulation(pc)
00084202 6000 0000                  		bra.w	FMUpdateFreq
00084206                            ; End of function FMUpdateTrack
00084206                            
00084206                            
00084206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084206                            
00084206                            ; sub_71CEC:
00084206                            FMDoNext:
00084206 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
0008420A 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
0008420E                            ; loc_71CF4:
0008420E                            @noteloop:
0008420E 7A00                       		moveq	#0,d5
00084210 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084212 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084216 6500                       		blo.s	@gotnote	; Branch if not
00084218 4EBA 0000                  		jsr	CoordFlag(pc)
0008421C 60F0                       		bra.s	@noteloop
0008421E                            ; ===========================================================================
0008421E                            ; loc_71D04:
0008421E                            @gotnote:
0008421E 4EBA 0000                  		jsr	FMNoteOff(pc)
00084222 4A05                       		tst.b	d5		; Is this a note?
00084224 6A00                       		bpl.s	@gotduration	; Branch if not
00084226 4EBA 0000                  		jsr	FMSetFreq(pc)
0008422A 1A1C                       		move.b	(a4)+,d5	; Get another byte
0008422C 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
0008422E 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084230 6000 0000                  		bra.w	FinishTrackUpdate
00084234                            ; ===========================================================================
00084234                            ; loc_71D1A:
00084234                            @gotduration:
00084234 4EBA 0000                  		jsr	SetDuration(pc)
00084238 6000 0000                  		bra.w	FinishTrackUpdate
0008423C                            ; End of function FMDoNext
0008423C                            
0008423C                            
0008423C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008423C                            
0008423C                            ; sub_71D22:
0008423C                            FMSetFreq:
0008423C 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084240 6700                       		beq.s	TrackSetRest
00084242 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084246 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
0008424A E34D                       		lsl.w	#1,d5
0008424C 41FA 0000                  		lea	FMFrequencies(pc),a0
00084250 3C30 5000                  		move.w	(a0,d5.w),d6
00084254 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084258 4E75                       		rts	
0008425A                            ; End of function FMSetFreq
0008425A                            
0008425A                            
0008425A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008425A                            
0008425A                            ; sub_71D40:
0008425A                            SetDuration:
0008425A 1005                       		move.b	d5,d0
0008425C 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084260                            ; loc_71D46:
00084260                            @multloop:
00084260 5301                       		subq.b	#1,d1
00084262 6700                       		beq.s	@donemult
00084264 D005                       		add.b	d5,d0
00084266 60F8                       		bra.s	@multloop
00084268                            ; ===========================================================================
00084268                            ; loc_71D4E:
00084268                            @donemult:
00084268 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
0008426C 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084270 4E75                       		rts	
00084272                            ; End of function SetDuration
00084272                            
00084272                            ; ===========================================================================
00084272                            ; loc_71D58:
00084272                            TrackSetRest:
00084272 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084276 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
0008427A                            
0008427A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008427A                            
0008427A                            ; sub_71D60:
0008427A                            FinishTrackUpdate:
0008427A 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
0008427E 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084284 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084288 6600                       		bne.s	@locret				; If so, branch
0008428A 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084290 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084294 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084298 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
0008429A 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
0008429E 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
000842A2 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
000842A6 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
000842AA 1018                       		move.b	(a0)+,d0			; Get steps
000842AC E208                       		lsr.b	#1,d0				; Halve them
000842AE 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
000842B2 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
000842B6                            ; locret_71D9C:
000842B6                            @locret:
000842B6 4E75                       		rts	
000842B8                            ; End of function FinishTrackUpdate
000842B8                            
000842B8                            
000842B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000842B8                            
000842B8                            ; sub_71D9E: NoteFillUpdate
000842B8                            NoteTimeoutUpdate:
000842B8 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
000842BC 6700                       		beq.s	@locret
000842BE 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
000842C2 6600                       		bne.s	@locret				; Return if it hasn't expired
000842C4 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
000842C8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
000842CC 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
000842D0 4EBA 0000                  		jsr	FMNoteOff(pc)
000842D4 584F                       		addq.w	#4,sp				; Do not return to caller
000842D6 4E75                       		rts	
000842D8                            ; ===========================================================================
000842D8                            ; loc_71DBE:
000842D8                            @psgnoteoff:
000842D8 4EBA 0000                  		jsr	PSGNoteOff(pc)
000842DC 584F                       		addq.w	#4,sp		; Do not return to caller
000842DE                            ; locret_71DC4:
000842DE                            @locret:
000842DE 4E75                       		rts	
000842E0                            ; End of function NoteTimeoutUpdate
000842E0                            
000842E0                            
000842E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000842E0                            
000842E0                            ; sub_71DC6:
000842E0                            DoModulation:
000842E0 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
000842E2 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
000842E6 6700                       		beq.s	@locret				; Return if not
000842E8 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
000842EC 6700                       		beq.s	@waitdone			; If yes, branch
000842EE 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
000842F2 4E75                       		rts	
000842F4                            ; ===========================================================================
000842F4                            ; loc_71DDA:
000842F4                            @waitdone:
000842F4 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
000842F8 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
000842FA 4E75                       		rts	
000842FC                            ; ===========================================================================
000842FC                            ; loc_71DE2:
000842FC                            @updatemodulation:
000842FC 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084300 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084306 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
0008430A 6600                       		bne.s	@calcfreq			; If nonzero, branch
0008430C 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084312 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084316 4E75                       		rts	
00084318                            ; ===========================================================================
00084318                            ; loc_71DFE:
00084318                            @calcfreq:
00084318 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
0008431C 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084320 4886                       		ext.w	d6
00084322 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084326 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
0008432A DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
0008432E 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084330                            ; locret_71E16:
00084330                            @locret:
00084330 4E75                       		rts	
00084332                            ; End of function DoModulation
00084332                            
00084332                            
00084332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084332                            
00084332                            ; sub_71E18:
00084332                            FMPrepareNote:
00084332 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084336 6600                       		bne.s	locret_71E48		; Return if so
00084338 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
0008433C 6700                       		beq.s	FMSetRest		; Branch if zero
0008433E                            ; loc_71E24:
0008433E                            FMUpdateFreq:
0008433E 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084342 4880                       		ext.w	d0
00084344 DC40                       		add.w	d0,d6			; Add note frequency
00084346 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0008434A 6600                       		bne.s	locret_71E48		; Return if so
0008434C 3206                       		move.w	d6,d1
0008434E E049                       		lsr.w	#8,d1
00084350 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084354 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084358 1206                       		move.b	d6,d1
0008435A 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
0008435E 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084362                            ; locret_71E48:
00084362                            locret_71E48:
00084362 4E75                       		rts	
00084364                            ; ===========================================================================
00084364                            ; loc_71E4A:
00084364                            FMSetRest:
00084364 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084368 4E75                       		rts	
0008436A                            ; End of function FMPrepareNote
0008436A                            
0008436A                            ; ===========================================================================
0008436A                            ; loc_71E50:
0008436A                            PauseMusic:
0008436A 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
0008436C 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084372 6700 0000                  		beq.w	@unpausedallfm
00084376 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
0008437C 7602                       		moveq	#2,d3
0008437E 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084382 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084384                            ; loc_71E6A:
00084384                            @killpanloop:
00084384 4EBA 0000                  		jsr	WriteFMI(pc)
00084388 4EBA 0000                  		jsr	WriteFMII(pc)
0008438C 5200                       		addq.b	#1,d0
0008438E 51CB FFF4                  		dbf	d3,@killpanloop
00084392                            
00084392 7602                       		moveq	#2,d3
00084394 7028                       		moveq	#$28,d0		; Key on/off register
00084396                            ; loc_71E7C:
00084396                            @noteoffloop:
00084396 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084398 4EBA 0000                  		jsr	WriteFMI(pc)
0008439C 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
0008439E 4EBA 0000                  		jsr	WriteFMI(pc)
000843A2 51CB FFF2                  		dbf	d3,@noteoffloop
000843A6                            
000843A6 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000843AA 6000 FDB2                  		bra.w	DoStartZ80
000843AE                            ; ===========================================================================
000843AE                            ; loc_71E94:
000843AE                            @unpausemusic:
000843AE 422E 0003                  		clr.b	f_pausemusic(a6)
000843B2 7630                       		moveq	#TrackSz,d3
000843B4 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000843B8 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000843BA                            ; loc_71EA0:
000843BA                            @bgmfmloop:
000843BA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000843BE 6700                       		beq.s	@bgmfmnext		; Branch if not
000843C0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000843C4 6600                       		bne.s	@bgmfmnext		; Branch if yes
000843C6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000843CA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000843CE 4EBA 0000                  		jsr	WriteFMIorII(pc)
000843D2                            ; loc_71EB8:
000843D2                            @bgmfmnext:
000843D2 DAC3                       		adda.w	d3,a5
000843D4 51CC FFE4                  		dbf	d4,@bgmfmloop
000843D8                            
000843D8 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
000843DC 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
000843DE                            ; loc_71EC4:
000843DE                            @sfxfmloop:
000843DE 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000843E2 6700                       		beq.s	@sfxfmnext		; Branch if not
000843E4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000843E8 6600                       		bne.s	@sfxfmnext		; Branch if yes
000843EA 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000843EE 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000843F2 4EBA 0000                  		jsr	WriteFMIorII(pc)
000843F6                            ; loc_71EDC:
000843F6                            @sfxfmnext:
000843F6 DAC3                       		adda.w	d3,a5
000843F8 51CC FFE4                  		dbf	d4,@sfxfmloop
000843FC                            
000843FC 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084400 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084404 6700                       		beq.s	@unpausedallfm		; Branch if not
00084406 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0008440A 6600                       		bne.s	@unpausedallfm		; Branch if yes
0008440C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084410 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084414 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084418                            ; loc_71EFE:
00084418                            @unpausedallfm:
00084418 6000 FD44                  		bra.w	DoStartZ80
0008441C                            
0008441C                            ; ---------------------------------------------------------------------------
0008441C                            ; Subroutine to	play a sound or	music track
0008441C                            ; ---------------------------------------------------------------------------
0008441C                            
0008441C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008441C                            
0008441C                            ; Sound_Play:
0008441C                            CycleSoundQueue:
0008441C 2079 0008 3E96             		movea.l	(Go_SoundPriorities).l,a0
00084422 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084426 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084428 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
0008442A                            ; loc_71F12:
0008442A                            @inputloop:
0008442A 1011                       		move.b	(a1),d0			; move track number to d0
0008442C 1200                       		move.b	d0,d1
0008442E 4219                       		clr.b	(a1)+			; Clear entry
00084430 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084434 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084436 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
0008443C 6700                       		beq.s	@havesound		; If yes, branch
0008443E 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084442 6000                       		bra.s	@nextinput
00084444                            ; ===========================================================================
00084444                            ; loc_71F2C:
00084444                            @havesound:
00084444 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084448 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
0008444C B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
0008444E 6500                       		blo.s	@nextinput		; Branch if yes
00084450 1602                       		move.b	d2,d3			; Store new priority
00084452 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084456                            ; loc_71F3E:
00084456                            @nextinput:
00084456 51CC FFD2                  		dbf	d4,@inputloop
0008445A                            
0008445A 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
0008445C 6B00                       		bmi.s	@locret
0008445E 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084460                            ; locret_71F4A:
00084460                            @locret:
00084460 4E75                       		rts	
00084462                            ; End of function CycleSoundQueue
00084462                            
00084462                            
00084462                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084462                            
00084462                            ; Sound_ChkValue:
00084462                            PlaySoundID:
00084462 7E00                       		moveq	#0,d7
00084464 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084468 6700 0000                  		beq.w	StopAllSound
0008446C 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
0008446E 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084474                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084474                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084474                            		; See LevSel_NoCheat for more.
00084474 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084478 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
0008447C 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084480 6500 0000                  		blo.w	@locret			; Return if yes
00084484 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084488 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
0008448C 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084490 6500 0000                  		blo.w	@locret			; Return if yes
00084494 0C07 00D1                  		cmpi.b	#$D1,d7
00084498 6500 0000                  		bcs.w	Sound_PlaySpecial
0008449C 0C07 00DF                  		cmp.b	#$DF,d7
000844A0 6F00 0000                  		ble.w	Sound_D1toDF
000844A4 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000844A8 6500 0000                  		blo.w	@locret			; Return if yes
000844AC 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000844B0 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000844B2                            ; locret_71F8C:
000844B2                            @locret:
000844B2 4E75                       		rts	
000844B4                            ; ===========================================================================
000844B4                            
000844B4                            Sound_E0toE4:
000844B4 0407 00E0                  		subi.b	#flg__First,d7
000844B8 E54F                       		lsl.w	#2,d7
000844BA 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000844BE                            ; ===========================================================================
000844BE                            
000844BE                            Sound_ExIndex:
000844BE 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000844C2 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000844C6 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
000844CA 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
000844CE 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
000844D2                            ptr_flgend
000844D2                            ; ===========================================================================
000844D2                            ; ---------------------------------------------------------------------------
000844D2                            ; Play "Say-gaa" PCM sound
000844D2                            ; ---------------------------------------------------------------------------
000844D2                            ; Sound_E1: PlaySega:
000844D2                            PlaySegaSound:
000844D2 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
000844DA 33FC 0000 00A1 1100        		startZ80
000844E2 323C 0011                  		move.w	#$11,d1
000844E6                            ; loc_71FC0:
000844E6                            @busyloop_outer:
000844E6 303C FFFF                  		move.w	#-1,d0
000844EA                            ; loc_71FC4:
000844EA                            @busyloop:
000844EA 4E71                       		nop	
000844EC 51C8 FFFC                  		dbf	d0,@busyloop
000844F0                            
000844F0 51C9 FFF4                  		dbf	d1,@busyloop_outer
000844F4                            
000844F4 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000844F6 4E75                       		rts	
000844F8                            ; ===========================================================================
000844F8                            ; ---------------------------------------------------------------------------
000844F8                            ; Play music track $81-$9F
000844F8                            ; ---------------------------------------------------------------------------
000844F8                            ; Sound_81to9F:
000844F8                            Sound_PlayBGM:
000844F8 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
000844FC 6600                       		bne.s	@bgmnot1up		; if not, branch
000844FE 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084502 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084506 4BEE 0040                  		lea	v_music_track_ram(a6),a5
0008450A 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
0008450C                            ; loc_71FE6:
0008450C                            @clearsfxloop:
0008450C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084510 DAFC 0030                  		adda.w	#TrackSz,a5
00084514 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084518                            
00084518 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0008451C 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
0008451E                            ; loc_71FF8:
0008451E                            @cleartrackplayloop:
0008451E 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084522 DAFC 0030                  		adda.w	#TrackSz,a5
00084526 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
0008452A                            
0008452A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008452C 204E                       		movea.l	a6,a0
0008452E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084532 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084536                            ; loc_72012:
00084536                            @backupramloop:
00084536 22D8                       		move.l	(a0)+,(a1)+
00084538 51C8 FFFC                  		dbf	d0,@backupramloop
0008453C                            
0008453C 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084542 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084544 6000                       		bra.s	@bgm_loadMusic
00084546                            ; ===========================================================================
00084546                            ; loc_72024:
00084546                            @bgmnot1up:
00084546 422E 0027                  		clr.b	f_1up_playing(a6)
0008454A 422E 0026                  		clr.b	v_fadein_counter(a6)
0008454E                            ; loc_7202C:
0008454E                            @bgm_loadMusic:
0008454E 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084552 2879 0008 3EA6             		movea.l	(Go_SpeedUpIndex).l,a4
00084558 0407 0081                  		subi.b	#bgm__First,d7
0008455C 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00084562 2879 0008 3E9E             		movea.l	(Go_MusicIndex).l,a4
00084568 E54F                       		lsl.w	#2,d7
0008456A 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
0008456E 7000                       		moveq	#0,d0
00084570 3014                       		move.w	(a4),d0			; load voice pointer
00084572 D08C                       		add.l	a4,d0			; It is a relative pointer
00084574 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00084578 102C 0005                  		move.b	5(a4),d0		; load tempo
0008457C 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00084580                            		;tst.b	f_speedup(a6)
00084580                            		;beq.s	@nospeedshoes
00084580                            		;move.b	v_speeduptempo(a6),d0
00084580                            ; loc_72068:
00084580                            ;@nospeedshoes:
00084580 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00084584 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00084588 7200                       		moveq	#0,d1
0008458A 264C                       		movea.l	a4,a3
0008458C 5C4C                       		addq.w	#6,a4			; Point past header
0008458E 7E00                       		moveq	#0,d7
00084590 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00084594 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00084598 5307                       		subq.b	#1,d7
0008459A 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
0008459E 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
000845A2 7C30                       		moveq	#TrackSz,d6
000845A4 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
000845A8 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
000845AC 45FA 0000                  		lea	FMDACInitBytes(pc),a2
000845B0                            ; loc_72098:
000845B0                            @bmg_fmloadloop:
000845B0 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000845B4 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000845B8 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000845BC 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000845C0 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
000845C4 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000845C8 7000                       		moveq	#0,d0
000845CA 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
000845CC D08B                       		add.l	a3,d0				; Relative pointer
000845CE 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
000845D2 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
000845D6 D2C6                       		adda.w	d6,a1
000845D8 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
000845DC                            		
000845DC 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000845E2 6600                       		bne.s	@silencefm6
000845E4 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000845E6 7200                       		moveq	#0,d1		; Disable DAC
000845E8 4EBA 0000                  		jsr	WriteFMI(pc)
000845EC 6000 0000                  		bra.w	@bgm_fmdone
000845F0                            ; ===========================================================================
000845F0                            ; loc_720D8:
000845F0                            @silencefm6:
000845F0 7028                       		moveq	#$28,d0		; Key on/off register
000845F2 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000845F4 4EBA 0000                  		jsr	WriteFMI(pc)
000845F8 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000845FC 727F                       		moveq	#$7F,d1		; Total silence
000845FE 4EBA 0000                  		jsr	WriteFMII(pc)
00084602 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00084606 727F                       		moveq	#$7F,d1		; Total silence
00084608 4EBA 0000                  		jsr	WriteFMII(pc)
0008460C 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00084610 727F                       		moveq	#$7F,d1		; Total silence
00084612 4EBA 0000                  		jsr	WriteFMII(pc)
00084616 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
0008461A 727F                       		moveq	#$7F,d1		; Total silence
0008461C 4EBA 0000                  		jsr	WriteFMII(pc)
00084620 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00084624 123C 00C0                  		move.b	#$C0,d1		; Stereo
00084628 4EBA 0000                  		jsr	WriteFMII(pc)
0008462C                            ; loc_72114:
0008462C                            @bgm_fmdone:
0008462C 7E00                       		moveq	#0,d7
0008462E 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00084632 6700                       		beq.s	@bgm_psgdone	; branch if zero
00084634 5307                       		subq.b	#1,d7
00084636 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
0008463A 45FA 0000                  		lea	PSGInitBytes(pc),a2
0008463E                            ; loc_72126:
0008463E                            @bgm_psgloadloop:
0008463E 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084642 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084646 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
0008464A 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008464E 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084652 7000                       		moveq	#0,d0
00084654 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00084656 D08B                       		add.l	a3,d0				; Relative pointer
00084658 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0008465C 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00084660 101C                       		move.b	(a4)+,d0			; load redundant byte
00084662 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00084666 D2C6                       		adda.w	d6,a1
00084668 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
0008466C                            ; loc_72154:
0008466C                            @bgm_psgdone:
0008466C 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00084670 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00084672                            ; loc_7215A:
00084672                            @sfxstoploop:
00084672 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00084674 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00084678 7000                       		moveq	#0,d0
0008467A 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
0008467E 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00084680 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00084682 E508                       		lsl.b	#2,d0			; Convert to index
00084684 6000                       		bra.s	@gotchannelindex
00084686                            ; ===========================================================================
00084686                            ; loc_7216E:
00084686                            @sfxpsgchannel:
00084686 E608                       		lsr.b	#3,d0		; Convert to index
00084688                            ; loc_72170:
00084688                            @gotchannelindex:
00084688 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
0008468C 2070 0000                  		movea.l	(a0,d0.w),a0
00084690 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00084694                            ; loc_7217C:
00084694                            @sfxnext:
00084694 D2C6                       		adda.w	d6,a1
00084696 51CF FFDA                  		dbf	d7,@sfxstoploop
0008469A                            
0008469A 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0008469E 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
000846A0 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000846A6                            ; loc_7218E:
000846A6                            @checkspecialpsg:
000846A6 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000846AA 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
000846AC 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000846B2                            ; loc_7219A:
000846B2                            @sendfmnoteoff:
000846B2 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000846B6 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000846B8                            ; loc_721A0:
000846B8                            @fmnoteoffloop:
000846B8 4EBA 0000                  		jsr	FMNoteOff(pc)
000846BC DAC6                       		adda.w	d6,a5
000846BE 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000846C2 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000846C4                            ; loc_721AC:
000846C4                            @psgnoteoffloop:
000846C4 4EBA 0000                  		jsr	PSGNoteOff(pc)
000846C8 DAC6                       		adda.w	d6,a5
000846CA 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
000846CE                            ; loc_721B6:
000846CE                            @locdblret:
000846CE 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
000846D0 4E75                       		rts	
000846D2                            ; ===========================================================================
000846D2                            ; byte_721BA:
000846D2 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000846DA 00                         		even
000846DA                            ; byte_721C2:
000846DA 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000846DE 00                         		even
000846DE                            ; ===========================================================================
000846DE                            ; ---------------------------------------------------------------------------
000846DE                            ; Play Spin Dash sound effect
000846DE                            ; ---------------------------------------------------------------------------
000846DE                            Sound_D1toDF:
000846DE 4A2E 0027                  	tst.b	$27(a6)
000846E2 6600 0000                  	bne.w	loc_722C6
000846E6 4A2E 0004                  	tst.b	4(a6)
000846EA 6600 0000                  	bne.w	loc_722C6
000846EE 4A2E 0024                  	tst.b	$24(a6)
000846F2 6600 0000                  	bne.w	loc_722C6
000846F6 2079 0008 3EA2             	movea.l	(Go_SoundIndex).l,a0
000846FC 0407 00A0                  	sub.b	#$A0,d7
00084700 6000                       	bra.s	SoundEffects_Common
00084702                            ; ---------------------------------------------------------------------------
00084702                            ; Play normal sound effect
00084702                            ; ---------------------------------------------------------------------------
00084702                            ; Sound_A0toCF:
00084702                            Sound_PlaySFX:
00084702 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00084706 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0008470A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008470E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084712 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00084716 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008471A 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
0008471E 6600                       		bne.s	Sound_notB5		; if not, branch
00084720 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00084724 6600                       		bne.s	loc_721EE		; Branch if not
00084726 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
0008472A                            
0008472A                            loc_721EE:
0008472A 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00084730                            
00084730                            Sound_notB5:
00084730 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00084734 6600                       		bne.s	Sound_notA7		; if not, branch
00084736 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
0008473A 6600 0000                  		bne.w	locret_722C4			; Return if not
0008473E 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00084744                            		
00084744                            Sound_notA7:
00084744 2079 0008 3EA2             		movea.l	(Go_SoundIndex).l,a0
0008474A 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
0008474E                            
0008474E                            SoundEffects_Common:		
0008474E E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00084750 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00084754 224B                       		movea.l	a3,a1
00084756 7200                       		moveq	#0,d1
00084758 3219                       		move.w	(a1)+,d1		; Voice pointer
0008475A D28B                       		add.l	a3,d1			; Relative pointer
0008475C 1A19                       		move.b	(a1)+,d5		; Dividing timing	
0008475E                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
0008475E                            		; index entry is above $3F will cause a crash. This is actually the same way that
0008475E                            		; this bug is fixed in Ristar's driver.
0008475E 7E00                       		moveq	#0,d7	
00084760 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00084762 5307                       		subq.b	#1,d7
00084764 7C30                       		moveq	#TrackSz,d6
00084766                            
00084766                            loc_72228:
00084766 7600                       		moveq	#0,d3
00084768 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
0008476C 1803                       		move.b	d3,d4
0008476E 6B00                       		bmi.s	loc_72244	; Branch if PSG
00084770 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00084772 E54B                       		lsl.w	#2,d3
00084774 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084778 2A75 3000                  		movea.l	(a5,d3.w),a5
0008477C 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00084780 6000                       		bra.s	loc_7226E
00084782                            ; ===========================================================================
00084782                            
00084782                            loc_72244:
00084782 E64B                       		lsr.w	#3,d3
00084784 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084788 2A75 3000                  		movea.l	(a5,d3.w),a5
0008478C 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00084790 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00084794 6600                       		bne.s	loc_7226E	; Branch if not
00084796 1004                       		move.b	d4,d0
00084798 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0008479C 13C0 00C0 0011             		move.b	d0,(psg_input).l
000847A2 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000847A6 13C0 00C0 0011             		move.b	d0,(psg_input).l
000847AC                            
000847AC                            loc_7226E:
000847AC 2A7B 3000                  		movea.l	SFX_SFXChannelRAM(pc,d3.w),a5
000847B0 244D                       		movea.l	a5,a2
000847B2 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000847B4                            
000847B4                            loc_72276:
000847B4 429A                       		clr.l	(a2)+
000847B6 51C8 FFFC                  		dbf	d0,loc_72276
000847BA                            
000847BA 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000847BC 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000847C0 7000                       		moveq	#0,d0
000847C2 3019                       		move.w	(a1)+,d0			; Track data pointer
000847C4 D08B                       		add.l	a3,d0				; Relative pointer
000847C6 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000847CA 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000847CE 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000847D4 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000847D8 4A04                       		tst.b	d4				; Is this a PSG channel?
000847DA 6B00                       		bmi.s	loc_722A8		; Branch if yes
000847DC 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000847E2 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
000847E6                            
000847E6                            loc_722A8:
000847E6 51CF FF7E                  		dbf	d7,loc_72228
000847EA                            
000847EA 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000847EE 6A00                       		bpl.s	loc_722B8				; Branch if not
000847F0 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000847F6                            
000847F6                            loc_722B8:
000847F6 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
000847FA 6A00                       		bpl.s	locret_722C4						; Branch if not
000847FC 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084802                            
00084802                            locret_722C4:
00084802 4E75                       		rts	
00084804                            ; ===========================================================================
00084804                            
00084804                            loc_722C6:
00084804 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00084806 4E75                       		rts	
00084808                            ; ===========================================================================
00084808                            ; ---------------------------------------------------------------------------
00084808                            ; RAM addresses for FM and PSG channel variables used by the SFX
00084808                            ; ---------------------------------------------------------------------------
00084808                            ; dword_722CC: BGMChannelRAM:
00084808                            SFX_BGMChannelRAM:
00084808 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
0008480C 0000 0000                  		dc.l 0
00084810 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00084814 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00084818 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
0008481C 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00084820 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00084824 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00084828                            ; dword_722EC: SFXChannelRAM:
00084828                            SFX_SFXChannelRAM:
00084828 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
0008482C 0000 0000                  		dc.l 0
00084830 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00084834 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00084838 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
0008483C 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00084840 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00084844 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00084848                            ; ===========================================================================
00084848                            ; ---------------------------------------------------------------------------
00084848                            ; Play GHZ waterfall sound
00084848                            ; ---------------------------------------------------------------------------
00084848                            ; Sound_D0toDF:
00084848                            Sound_PlaySpecial:
00084848 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0008484C 6600 0000                  		bne.w	@locret			; Return if so
00084850 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00084854 6600 0000                  		bne.w	@locret			; Exit if it is
00084858 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0008485C 6600 0000                  		bne.w	@locret			; Exit if it is
00084860 2079 0008 3E9A             		movea.l	(Go_SpecSoundIndex).l,a0
00084866 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
0008486A E54F                       		lsl.w	#2,d7
0008486C 2670 7000                  		movea.l	(a0,d7.w),a3
00084870 224B                       		movea.l	a3,a1
00084872 7000                       		moveq	#0,d0
00084874 3019                       		move.w	(a1)+,d0			; Voice pointer
00084876 D08B                       		add.l	a3,d0				; Relative pointer
00084878 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
0008487C 1A19                       		move.b	(a1)+,d5			; Dividing timing
0008487E                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
0008487E                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
0008487E 7E00                       		moveq	#0,d7	
00084880 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00084882 5307                       		subq.b	#1,d7
00084884 7C30                       		moveq	#TrackSz,d6
00084886                            ; loc_72348:
00084886                            @sfxloadloop:
00084886 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0008488A 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
0008488C 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084892 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00084896 6000                       		bra.s	@sfxinitpsg
00084898                            ; ===========================================================================
00084898                            ; loc_7235A:
00084898                            @sfxoverridepsg:
00084898 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008489E 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000848A2                            ; loc_72364:
000848A2                            @sfxinitpsg:
000848A2 244D                       		movea.l	a5,a2
000848A4 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000848A6                            ; loc_72368:
000848A6                            @clearsfxtrackram:
000848A6 429A                       		clr.l	(a2)+
000848A8 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000848AC                            
000848AC 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000848AE 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000848B2 7000                       		moveq	#0,d0
000848B4 3019                       		move.w	(a1)+,d0			; Track data pointer
000848B6 D08B                       		add.l	a3,d0				; Relative pointer
000848B8 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000848BC 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000848C0 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000848C6 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000848CA 4A04                       		tst.b	d4				; Is this a PSG channel?
000848CC 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
000848CE 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000848D4                            ; loc_72396:
000848D4                            @sfxpsginitdone:
000848D4 51CF FFB0                  		dbf	d7,@sfxloadloop
000848D8                            
000848D8 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
000848DC 6A00                       		bpl.s	@doneoverride					; Branch if not
000848DE 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000848E4                            ; loc_723A6:
000848E4                            @doneoverride:
000848E4 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
000848E8 6A00                       		bpl.s	@locret						; Branch if not
000848EA 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000848F0 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
000848F4 13C4 00C0 0011             		move.b	d4,(psg_input).l
000848FA 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
000848FE 13C4 00C0 0011             		move.b	d4,(psg_input).l
00084904                            ; locret_723C6:
00084904                            @locret:
00084904 4E75                       		rts	
00084906                            ; End of function PlaySoundID
00084906                            
00084906                            ; ===========================================================================
00084906                            ; ---------------------------------------------------------------------------
00084906                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00084906                            ; ---------------------------------------------------------------------------
00084906                            ; The first block would have been used for overriding the music tracks
00084906                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00084906                            ; The third block would be used to set up the Special SFX
00084906                            ; The second block, however, is for the SFX tracks, which have a higher priority
00084906                            ; and would be checked for if they're currently playing
00084906                            ; If they are, then the third block would be used again, this time to mark
00084906                            ; the new tracks as 'currently playing'
00084906                            
00084906                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00084906                            
00084906                            ; BGMFM4PSG3RAM:
00084906                            ;SpecSFX_BGMChannelRAM:
00084906 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0008490A 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
0008490E                            ; SFXFM4PSG3RAM:
0008490E                            ;SpecSFX_SFXChannelRAM:
0008490E 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00084912 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00084916                            ; SpecialSFXFM4PSG3RAM:
00084916                            ;SpecSFX_SpecSFXChannelRAM:
00084916 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
0008491A 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
0008491E                            
0008491E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008491E                            
0008491E                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
0008491E                            StopSFX:
0008491E 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084920 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084924 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00084926                            ; loc_723EA:
00084926                            @trackloop:
00084926 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00084928 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
0008492C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00084930 7600                       		moveq	#0,d3
00084932 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00084936 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00084938 4EBA 0000                  		jsr	FMNoteOff(pc)
0008493C 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00084940 6600                       		bne.s	@getfmpointer					; Branch if not
00084942 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00084946 6A00                       		bpl.s	@getfmpointer					; Branch if not
00084948                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00084948                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00084948                            		; is playing its sound!
00084948 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008494C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00084950 6000                       		bra.s	@gotfmpointer
00084952                            ; ===========================================================================
00084952                            ; loc_72416:
00084952                            @getfmpointer:
00084952 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00084954 E50B                       		lsl.b	#2,d3
00084956 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
0008495A 264D                       		movea.l	a5,a3
0008495C 2A70 3000                  		movea.l	(a0,d3.w),a5
00084960 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00084964                            ; loc_72428:
00084964                            @gotfmpointer:
00084964 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084968 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0008496C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00084970 4EBA 0000                  		jsr	SetVoice(pc)
00084974 2A4B                       		movea.l	a3,a5
00084976 6000                       		bra.s	@nexttrack
00084978                            ; ===========================================================================
00084978                            ; loc_7243C:
00084978                            @trackpsg:
00084978 4EBA 0000                  		jsr	PSGNoteOff(pc)
0008497C 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00084980 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00084984 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00084986 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
0008498A 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0008498C E60B                       		lsr.b	#3,d3
0008498E 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00084992 2070 3000                  		movea.l	(a0,d3.w),a0
00084996                            ; loc_7245A:
00084996                            @gotpsgpointer:
00084996 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008499A 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
0008499E 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
000849A4 6600                       		bne.s	@nexttrack			; Branch if not
000849A6 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
000849AE                            ; loc_72472:
000849AE                            @nexttrack:
000849AE DAFC 0030                  		adda.w	#TrackSz,a5
000849B2 51CF FF72                  		dbf	d7,@trackloop
000849B6                            
000849B6 4E75                       		rts	
000849B8                            ; End of function StopSFX
000849B8                            
000849B8                            
000849B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000849B8                            
000849B8                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
000849B8                            StopSpecialSFX:
000849B8 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000849BC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849BE 6A00                       		bpl.s	@fadedfm		; Branch if not
000849C0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000849C4 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000849C8 6600                       		bne.s	@fadedfm		; Branch if not
000849CA 4EBA 0000                  		jsr	SendFMNoteOff(pc)
000849CE 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000849D2 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000849D6 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000849DA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849DC 6A00                       		bpl.s	@fadedfm		; Branch if not
000849DE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000849E2 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000849E6 4EBA 0000                  		jsr	SetVoice(pc)
000849EA                            ; loc_724AE:
000849EA                            @fadedfm:
000849EA 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000849EE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849F0 6A00                       		bpl.s	@fadedpsg		; Branch if not
000849F2 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000849F6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000849FA 6600                       		bne.s	@fadedpsg		; Return if not
000849FC 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00084A00 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00084A04 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084A08 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00084A0C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084A0E 6A00                       		bpl.s	@fadedpsg		; Return if not
00084A10 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00084A16 6600                       		bne.s	@fadedpsg			; Return if not
00084A18 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00084A20                            ; locret_724E4:
00084A20                            @fadedpsg:
00084A20 4E75                       		rts	
00084A22                            ; End of function StopSpecialSFX
00084A22                            
00084A22                            ; ===========================================================================
00084A22                            ; ---------------------------------------------------------------------------
00084A22                            ; Fade out music
00084A22                            ; ---------------------------------------------------------------------------
00084A22                            ; Sound_E0:
00084A22                            FadeOutMusic:
00084A22 4EBA FEFA                  		jsr	StopSFX(pc)
00084A26 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00084A2A 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00084A30 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00084A36 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00084A3A 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00084A3E 4E75                       		rts	
00084A40                            
00084A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A40                            
00084A40                            ; sub_72504:
00084A40                            DoFadeOut:
00084A40 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00084A44 6700                       		beq.s	@continuefade		; Branch if yes
00084A46 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00084A4A 4E75                       		rts	
00084A4C                            ; ===========================================================================
00084A4C                            ; loc_72510:
00084A4C                            @continuefade:
00084A4C 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00084A50 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00084A54 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00084A5A 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084A5E 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084A60                            ; loc_72524:
00084A60                            @fmloop:
00084A60 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084A62 6A00                       		bpl.s	@nextfm			; Branch if not
00084A64 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00084A68 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00084A6A 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00084A6E 6000                       		bra.s	@nextfm
00084A70                            ; ===========================================================================
00084A70                            ; loc_72534:
00084A70                            @sendfmtl:
00084A70 4EBA 0000                  		jsr	SendVoiceTL(pc)
00084A74                            ; loc_72538:
00084A74                            @nextfm:
00084A74 DAFC 0030                  		adda.w	#TrackSz,a5
00084A78 51CF FFE6                  		dbf	d7,@fmloop
00084A7C                            
00084A7C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00084A7E                            ; loc_72542:
00084A7E                            @psgloop:
00084A7E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084A80 6A00                       		bpl.s	@nextpsg		; branch if not
00084A82 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00084A86 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00084A8C 6500                       		blo.s	@sendpsgvol		; Branch if not
00084A8E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00084A92 6000                       		bra.s	@nextpsg
00084A94                            ; ===========================================================================
00084A94                            ; loc_72558:
00084A94                            @sendpsgvol:
00084A94 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00084A98 4EBA 0000                  		jsr	SetPSGVolume(pc)
00084A9C                            ; loc_72560:
00084A9C                            @nextpsg:
00084A9C DAFC 0030                  		adda.w	#TrackSz,a5
00084AA0 51CF FFDC                  		dbf	d7,@psgloop
00084AA4                            
00084AA4 4E75                       		rts	
00084AA6                            ; End of function DoFadeOut
00084AA6                            
00084AA6                            
00084AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084AA6                            
00084AA6                            ; sub_7256A:
00084AA6                            FMSilenceAll:
00084AA6 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00084AA8 7028                       		moveq	#$28,d0		; FM key on/off register
00084AAA                            ; loc_7256E:
00084AAA                            @noteoffloop:
00084AAA 1203                       		move.b	d3,d1
00084AAC 4EBA 0000                  		jsr	WriteFMI(pc)
00084AB0 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00084AB2 4EBA 0000                  		jsr	WriteFMI(pc)
00084AB6 51CB FFF2                  		dbf	d3,@noteoffloop
00084ABA                            
00084ABA 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00084ABC 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00084ABE 7802                       		moveq	#2,d4		; ... for all 3 channels...
00084AC0                            ; loc_72584:
00084AC0                            @channelloop:
00084AC0 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00084AC2                            ; loc_72586:
00084AC2                            @channeltlloop:
00084AC2 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00084AC6 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00084ACA 5840                       		addq.w	#4,d0		; Next TL operator
00084ACC 51CB FFF4                  		dbf	d3,@channeltlloop
00084AD0                            
00084AD0 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00084AD4 51CC FFEA                  		dbf	d4,@channelloop
00084AD8                            
00084AD8 4E75                       		rts	
00084ADA                            ; End of function FMSilenceAll
00084ADA                            
00084ADA                            ; ===========================================================================
00084ADA                            ; ---------------------------------------------------------------------------
00084ADA                            ; Stop music
00084ADA                            ; ---------------------------------------------------------------------------
00084ADA                            ; Sound_E4: StopSoundAndMusic:
00084ADA                            StopAllSound:
00084ADA 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00084ADC 123C 0080                  		move.b	#$80,d1		; Enable DAC
00084AE0 4EBA 0000                  		jsr	WriteFMI(pc)
00084AE4 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00084AE6 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00084AE8 4EBA 0000                  		jsr	WriteFMI(pc)
00084AEC 204E                       		movea.l	a6,a0
00084AEE                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00084AEE                            		; Remove the '-$10' to fix this.
00084AEE 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00084AF2                            ; loc_725B6:
00084AF2                            @clearramloop:
00084AF2 4298                       		clr.l	(a0)+
00084AF4 51C8 FFFC                  		dbf	d0,@clearramloop
00084AF8                            
00084AF8 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00084AFE 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00084B02 6000 0000                  		bra.w	PSGSilenceAll
00084B06                            
00084B06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B06                            
00084B06                            ; sub_725CA:
00084B06                            InitMusicPlayback:
00084B06 204E                       		movea.l	a6,a0
00084B08                            		; Save several values
00084B08 1216                       		move.b	v_sndprio(a6),d1
00084B0A 142E 0027                  		move.b	f_1up_playing(a6),d2
00084B0E 162E 002A                  		move.b	f_speedup(a6),d3
00084B12 182E 0026                  		move.b	v_fadein_counter(a6),d4
00084B16                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00084B16 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00084B1A 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00084B1E                            ; loc_725E4:
00084B1E                            @clearramloop:
00084B1E 4298                       		clr.l	(a0)+
00084B20 51C8 FFFC                  		dbf	d0,@clearramloop
00084B24                            
00084B24                            		; Restore the values saved above
00084B24 1C81                       		move.b	d1,v_sndprio(a6)
00084B26 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00084B2A 1D43 002A                  		move.b	d3,f_speedup(a6)
00084B2E 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00084B32 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00084B36 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00084B3C                            		; DANGER! This silences ALL channels, even the ones being used
00084B3C                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00084B3C                            		; doesn't affect SFX channels, either.
00084B3C                            		; This should be replaced with an 'rts'.
00084B3C 4EBA FF68                  		jsr	FMSilenceAll(pc)
00084B40 6000 0000                  		bra.w	PSGSilenceAll
00084B44                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00084B44                            		; don't do a very good job of setting up the music tracks.
00084B44                            		; Tracks that aren't defined in a music file's header don't have
00084B44                            		; their channels defined, meaning @sendfmnoteoff won't silence
00084B44                            		; hardware properly. In combination with removing the above
00084B44                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00084B44                            		; notes.
00084B44                            		; To fix this, I suggest using this code, instead of an 'rts':
00084B44                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00084B44                            		;lea	FMDACInitBytes(pc),a2
00084B44                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00084B44                            		;bsr.s	@writeloop
00084B44                            		;lea	PSGInitBytes(pc),a2
00084B44                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00084B44                            
00084B44                            ;@writeloop:
00084B44                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00084B44                            		;lea	TrackSz(a1),a1		; Next track
00084B44                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00084B44                            
00084B44                            		;rts
00084B44                            	
00084B44                            ; End of function InitMusicPlayback
00084B44                            
00084B44                            
00084B44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B44                            
00084B44                            ; sub_7260C:
00084B44                            TempoWait:
00084B44 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00084B4A 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00084B4E 7030                       		moveq	#TrackSz,d0
00084B50 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00084B52                            ; loc_7261A:
00084B52                            @tempoloop:
00084B52 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00084B54 D0C0                       		adda.w	d0,a0	; Advance to next track
00084B56 51C9 FFFA                  		dbf	d1,@tempoloop
00084B5A                            
00084B5A 4E75                       		rts	
00084B5C                            ; End of function TempoWait
00084B5C                            
00084B5C                            ; ===========================================================================
00084B5C                            ; ---------------------------------------------------------------------------
00084B5C                            ; Speed	up music
00084B5C                            ; ---------------------------------------------------------------------------
00084B5C                            ; Sound_E2:
00084B5C                            SpeedUpMusic:
00084B5C 4A2E 0027                  		tst.b	f_1up_playing(a6)
00084B60 6600                       		bne.s	@speedup_1up
00084B62 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00084B68 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00084B6E 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00084B74 4E75                       		rts	
00084B76                            ; ===========================================================================
00084B76                            ; loc_7263E:
00084B76                            @speedup_1up:
00084B76 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00084B7C 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00084B82 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00084B88 4E75                       		rts	
00084B8A                            ; ===========================================================================
00084B8A                            ; ---------------------------------------------------------------------------
00084B8A                            ; Change music back to normal speed
00084B8A                            ; ---------------------------------------------------------------------------
00084B8A                            ; Sound_E3:
00084B8A                            SlowDownMusic:
00084B8A 4A2E 0027                  		tst.b	f_1up_playing(a6)
00084B8E 6600                       		bne.s	@slowdown_1up
00084B90 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00084B96 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00084B9C 422E 002A                  		clr.b	f_speedup(a6)
00084BA0 4E75                       		rts	
00084BA2                            ; ===========================================================================
00084BA2                            ; loc_7266A:
00084BA2                            @slowdown_1up:
00084BA2 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00084BA8 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00084BAE 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00084BB2 4E75                       		rts	
00084BB4                            
00084BB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BB4                            
00084BB4                            ; sub_7267C:
00084BB4                            DoFadeIn:
00084BB4 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00084BB8 6700                       		beq.s	@continuefade		; Branch if yes
00084BBA 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00084BBE 4E75                       		rts	
00084BC0                            ; ===========================================================================
00084BC0                            ; loc_72688:
00084BC0                            @continuefade:
00084BC0 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00084BC4 6700                       		beq.s	@fadedone		; Branch if yes
00084BC6 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00084BCA 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00084BD0 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084BD4 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084BD6                            ; loc_7269E:
00084BD6                            @fmloop:
00084BD6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BD8 6A00                       		bpl.s	@nextfm			; Branch if not
00084BDA 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00084BDE 4EBA 0000                  		jsr	SendVoiceTL(pc)
00084BE2                            ; loc_726AA:
00084BE2                            @nextfm:
00084BE2 DAFC 0030                  		adda.w	#TrackSz,a5
00084BE6 51CF FFEE                  		dbf	d7,@fmloop
00084BEA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00084BEC                            ; loc_726B4:
00084BEC                            @psgloop:
00084BEC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BEE 6A00                       		bpl.s	@nextpsg		; Branch if not
00084BF0 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00084BF4 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00084BF8 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00084BFC 6500                       		blo.s	@sendpsgvol		; Branch if yes
00084BFE 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00084C00                            ; loc_726C8:
00084C00                            @sendpsgvol:
00084C00 4EBA 0000                  		jsr	SetPSGVolume(pc)
00084C04                            ; loc_726CC:
00084C04                            @nextpsg:
00084C04 DAFC 0030                  		adda.w	#TrackSz,a5
00084C08 51CF FFE2                  		dbf	d7,@psgloop
00084C0C 4E75                       		rts	
00084C0E                            ; ===========================================================================
00084C0E                            ; loc_726D6:
00084C0E                            @fadedone:
00084C0E 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00084C14 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00084C18 4E75                       		rts	
00084C1A                            ; End of function DoFadeIn
00084C1A                            
00084C1A                            ; ===========================================================================
00084C1A                            ; loc_726E2:
00084C1A                            FMNoteOn:
00084C1A 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00084C1E 6600                       		bne.s	@locret		; Return if so
00084C20 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00084C24 6600                       		bne.s	@locret		; Return if so
00084C26 7028                       		moveq	#$28,d0		; Note on/off register
00084C28 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00084C2C 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00084C30 6000 0000                  		bra.w	WriteFMI
00084C34                            ; ===========================================================================
00084C34                            ; locret_726FC:
00084C34                            @locret:
00084C34 4E75                       		rts	
00084C36                            
00084C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C36                            
00084C36                            ; sub_726FE:
00084C36                            FMNoteOff:
00084C36 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00084C3A 6600                       		bne.s	locret_72714	; Return if yes
00084C3C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00084C40 6600                       		bne.s	locret_72714	; Return if yes
00084C42                            ; loc_7270A:
00084C42                            SendFMNoteOff:
00084C42 7028                       		moveq	#$28,d0		; Note on/off register
00084C44 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00084C48 6000 0000                  		bra.w	WriteFMI
00084C4C                            ; ===========================================================================
00084C4C                            
00084C4C                            locret_72714:
00084C4C 4E75                       		rts	
00084C4E                            ; End of function FMNoteOff
00084C4E                            
00084C4E                            ; ===========================================================================
00084C4E                            ; loc_72716:
00084C4E                            WriteFMIorIIMain:
00084C4E 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00084C52 6600                       		bne.s	@locret		; Return if yes
00084C54 6000 0000                  		bra.w	WriteFMIorII
00084C58                            ; ===========================================================================
00084C58                            ; locret_72720:
00084C58                            @locret:
00084C58 4E75                       		rts	
00084C5A                            
00084C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C5A                            
00084C5A                            ; sub_72722:
00084C5A                            WriteFMIorII:
00084C5A 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00084C60 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00084C62 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00084C66                            ; End of function WriteFMIorII
00084C66                            
00084C66                            
00084C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C66                            
00084C66                            ; The reason I think this is an *early* SMPS 68k Type 1b
00084C66                            ; is because this subroutine is the one from Type 1a:
00084C66                            ; other Type 1b drivers have a newer, optimised version.
00084C66                            ; The driver itself is Type 1b, with this odd exception.
00084C66                            
00084C66                            ; sub_7272E:
00084C66                            WriteFMI:
00084C66 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00084C6C 0802 0007                  		btst	#7,d2		; Is FM busy?
00084C70 66F4                       		bne.s	WriteFMI	; Loop if so
00084C72 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00084C78 4E71                       		nop	
00084C7A 4E71                       		nop	
00084C7C 4E71                       		nop	
00084C7E                            ; loc_72746:
00084C7E                            @waitloop:
00084C7E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00084C84 0802 0007                  		btst	#7,d2		; Is FM busy?
00084C88 66F4                       		bne.s	@waitloop	; Loop if so
00084C8A                            
00084C8A 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00084C90 4E75                       		rts	
00084C92                            ; End of function WriteFMI
00084C92                            
00084C92                            ; ===========================================================================
00084C92                            ; loc_7275A:
00084C92                            WriteFMIIPart:
00084C92 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00084C96 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00084C9A D002                       		add.b	d2,d0			; Add in to destination register
00084C9C                            
00084C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C9C                            
00084C9C                            ; sub_72764:
00084C9C                            WriteFMII:
00084C9C 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00084CA2 0802 0007                  		btst	#7,d2		; Is FM busy?
00084CA6 66F4                       		bne.s	WriteFMII	; Loop if so
00084CA8 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00084CAE 4E71                       		nop	
00084CB0 4E71                       		nop	
00084CB2 4E71                       		nop	
00084CB4                            ; loc_7277C:
00084CB4                            @waitloop:
00084CB4 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00084CBA 0802 0007                  		btst	#7,d2		; Is FM busy?
00084CBE 66F4                       		bne.s	@waitloop	; Loop if so
00084CC0                            
00084CC0 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00084CC6 4E75                       		rts	
00084CC8                            ; End of function WriteFMII
00084CC8                            
00084CC8                            ; ===========================================================================
00084CC8                            ; ---------------------------------------------------------------------------
00084CC8                            ; FM Note Values: b-0 to a#8
00084CC8                            ; ---------------------------------------------------------------------------
00084CC8                            ; word_72790: FM_Notes:
00084CC8                            FMFrequencies:
00084CC8 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00084CE0 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00084CF8 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00084D10 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00084D28 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00084D40 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00084D58 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00084D70 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00084D88                            
00084D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D88                            
00084D88                            ; sub_72850:
00084D88                            PSGUpdateTrack:
00084D88 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00084D8C 6600                       		bne.s	@notegoing
00084D8E 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00084D92 4EBA 0000                  		jsr	PSGDoNext(pc)
00084D96 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00084D9A 6000 0000                  		bra.w	PSGDoVolFX
00084D9E                            ; ===========================================================================
00084D9E                            ; loc_72866:
00084D9E                            @notegoing:
00084D9E 4EBA F518                  		jsr	NoteTimeoutUpdate(pc)
00084DA2 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00084DA6 4EBA F538                  		jsr	DoModulation(pc)
00084DAA 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00084DAE 4E75                       		rts
00084DB0                            ; End of function PSGUpdateTrack
00084DB0                            
00084DB0                            
00084DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DB0                            
00084DB0                            ; sub_72878:
00084DB0                            PSGDoNext:
00084DB0 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00084DB4 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00084DB8                            ; loc_72880:
00084DB8                            @noteloop:
00084DB8 7A00                       		moveq	#0,d5
00084DBA 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084DBC 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084DC0 6500                       		blo.s	@gotnote	; Branch if not
00084DC2 4EBA 0000                  		jsr	CoordFlag(pc)
00084DC6 60F0                       		bra.s	@noteloop
00084DC8                            ; ===========================================================================
00084DC8                            ; loc_72890:
00084DC8                            @gotnote:
00084DC8 4A05                       		tst.b	d5		; Is it a note?
00084DCA 6A00                       		bpl.s	@gotduration	; Branch if not
00084DCC 4EBA 0000                  		jsr	PSGSetFreq(pc)
00084DD0 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084DD2 4A05                       		tst.b	d5		; Is it a duration?
00084DD4 6A00                       		bpl.s	@gotduration	; Branch if yes
00084DD6 534C                       		subq.w	#1,a4		; Put byte back
00084DD8 6000 F4A0                  		bra.w	FinishTrackUpdate
00084DDC                            ; ===========================================================================
00084DDC                            ; loc_728A4:
00084DDC                            @gotduration:
00084DDC 4EBA F47C                  		jsr	SetDuration(pc)
00084DE0 6000 F498                  		bra.w	FinishTrackUpdate
00084DE4                            ; End of function PSGDoNext
00084DE4                            
00084DE4                            
00084DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DE4                            
00084DE4                            ; sub_728AC:
00084DE4                            PSGSetFreq:
00084DE4 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00084DE8 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00084DEA DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00084DEE 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00084DF2 E34D                       		lsl.w	#1,d5
00084DF4 41FA 0000                  		lea	PSGFrequencies(pc),a0
00084DF8 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00084DFE 6000 F47A                  		bra.w	FinishTrackUpdate
00084E02                            ; ===========================================================================
00084E02                            ; loc_728CA:
00084E02                            @restpsg:
00084E02 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00084E06 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00084E0C 4EBA F46C                  		jsr	FinishTrackUpdate(pc)
00084E10 6000 0000                  		bra.w	PSGNoteOff
00084E14                            ; End of function PSGSetFreq
00084E14                            
00084E14                            
00084E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E14                            
00084E14                            ; sub_728DC:
00084E14                            PSGDoNoteOn:
00084E14 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00084E18 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00084E1A                            ; End of function PSGDoNoteOn
00084E1A                            
00084E1A                            
00084E1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E1A                            
00084E1A                            ; sub_728E2:
00084E1A                            PSGUpdateFreq:
00084E1A 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00084E1E 4880                       		ext.w	d0
00084E20 DC40                       		add.w	d0,d6		; Add to frequency
00084E22 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00084E26 6600                       		bne.s	@locret		; Return if yes
00084E28 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00084E2C 6600                       		bne.s	@locret		; Return if yes
00084E2E 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00084E32 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00084E36 6600                       		bne.s	@notnoise	; Branch if not
00084E38 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00084E3C                            ; loc_72904:
00084E3C                            @notnoise:
00084E3C 3206                       		move.w	d6,d1
00084E3E 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00084E42 8001                       		or.b	d1,d0		; Latch tone data to channel
00084E44 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00084E46 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00084E4A 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084E50 13C6 00C0 0011             		move.b	d6,(psg_input).l
00084E56                            ; locret_7291E:
00084E56                            @locret:
00084E56 4E75                       		rts	
00084E58                            ; End of function PSGUpdateFreq
00084E58                            
00084E58                            ; ===========================================================================
00084E58                            ; loc_72920:
00084E58                            PSGSetRest:
00084E58 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00084E5C 4E75                       		rts	
00084E5E                            
00084E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E5E                            
00084E5E                            ; sub_72926:
00084E5E                            PSGUpdateVolFX:
00084E5E 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00084E62 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00084E66                            ; loc_7292E:
00084E66                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00084E66 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00084E6A 7000                       		moveq	#0,d0
00084E6C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00084E70 6700                       		beq.s	SetPSGVolume
00084E72 2079 0008 3EAA             		movea.l	(Go_PSGIndex).l,a0
00084E78 5340                       		subq.w	#1,d0
00084E7A E548                       		lsl.w	#2,d0
00084E7C 2070 0000                  		movea.l	(a0,d0.w),a0
00084E80 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00084E84 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00084E88 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00084E8C 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00084E90 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00084E92 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00084E96 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00084E98                            ; loc_72960:
00084E98                            @gotflutter:
00084E98 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00084E9A 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00084E9E 6500                       		blo.s	SetPSGVolume	; Branch if not
00084EA0 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00084EA2                            ; End of function PSGUpdateVolFX
00084EA2                            
00084EA2                            
00084EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084EA2                            
00084EA2                            ; sub_7296A:
00084EA2                            SetPSGVolume:
00084EA2 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00084EA6 6600                       		bne.s	locret_7298A	; Return if so
00084EA8 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00084EAC 6600                       		bne.s	locret_7298A	; Return if so
00084EAE 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00084EB2 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00084EB4                            ; loc_7297C:
00084EB4                            PSGSendVolume:
00084EB4 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00084EB8 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00084EBC 13C6 00C0 0011             		move.b	d6,(psg_input).l
00084EC2                            
00084EC2                            locret_7298A:
00084EC2 4E75                       		rts	
00084EC4                            ; ===========================================================================
00084EC4                            ; loc_7298C: PSGCheckNoteFill:
00084EC4                            PSGCheckNoteTimeout:
00084EC4 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00084EC8 67EA                       		beq.s	PSGSendVolume			; Branch if not
00084ECA 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00084ECE 66E4                       		bne.s	PSGSendVolume			; Branch if not
00084ED0 4E75                       		rts	
00084ED2                            ; End of function SetPSGVolume
00084ED2                            
00084ED2                            ; ===========================================================================
00084ED2                            ; loc_7299A: FlutterDone:
00084ED2                            VolEnvHold:
00084ED2 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00084ED6 4E75                       		rts	
00084ED8                            
00084ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084ED8                            
00084ED8                            ; sub_729A0:
00084ED8                            PSGNoteOff:
00084ED8 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00084EDC 6600                       		bne.s	locret_729B4	; Return if so
00084EDE                            ; loc_729A6:
00084EDE                            SendPSGNoteOff:
00084EDE 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00084EE2 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00084EE6 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084EEC                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00084EEC                            		; risk of music accidentally playing noise because it can't detect if
00084EEC                            		; the PSG4/noise channel needs muting on track initialisation.
00084EEC                            		; S&K's driver fixes it by doing this:
00084EEC 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00084EF0 6600                       		bne.s	locret_729B4
00084EF2 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00084EFA                            
00084EFA                            locret_729B4:
00084EFA 4E75                       		rts	
00084EFC                            ; End of function PSGNoteOff
00084EFC                            
00084EFC                            
00084EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084EFC                            
00084EFC                            ; sub_729B6:
00084EFC                            PSGSilenceAll:
00084EFC 41F9 00C0 0011             		lea	(psg_input).l,a0
00084F02 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00084F06 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00084F0A 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00084F0E 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00084F12 4E75                       		rts	
00084F14                            ; End of function PSGSilenceAll
00084F14                            
00084F14                            ; ===========================================================================
00084F14                            ; word_729CE:
00084F14                            PSGFrequencies:
00084F14 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00084F24 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00084F34 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00084F44 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00084F54 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00084F64 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00084F74 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00084F84 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00084F94 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00084FA0                            
00084FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FA0                            
00084FA0                            ; sub_72A5A:
00084FA0                            CoordFlag:
00084FA0 0445 00E0                  		subi.w	#$E0,d5
00084FA4 E54D                       		lsl.w	#2,d5
00084FA6 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00084FAA                            ; End of function CoordFlag
00084FAA                            
00084FAA                            ; ===========================================================================
00084FAA                            ; loc_72A64:
00084FAA                            coordflagLookup:
00084FAA 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00084FAE                            ; ===========================================================================
00084FAE 6000 0000                  		bra.w	cfDetune		; $E1
00084FB2                            ; ===========================================================================
00084FB2 6000 0000                  		bra.w	cfSetCommunication	; $E2
00084FB6                            ; ===========================================================================
00084FB6 6000 0000                  		bra.w	cfJumpReturn		; $E3
00084FBA                            ; ===========================================================================
00084FBA 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00084FBE                            ; ===========================================================================
00084FBE 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00084FC2                            ; ===========================================================================
00084FC2 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00084FC6                            ; ===========================================================================
00084FC6 6000 0000                  		bra.w	cfHoldNote		; $E7
00084FCA                            ; ===========================================================================
00084FCA 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00084FCE                            ; ===========================================================================
00084FCE 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00084FD2                            ; ===========================================================================
00084FD2 6000 0000                  		bra.w	cfSetTempo		; $EA
00084FD6                            ; ===========================================================================
00084FD6 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00084FDA                            ; ===========================================================================
00084FDA 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00084FDE                            ; ===========================================================================
00084FDE 6000 0000                  		bra.w	cfClearPush		; $ED
00084FE2                            ; ===========================================================================
00084FE2 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00084FE6                            ; ===========================================================================
00084FE6 6000 0000                  		bra.w	cfSetVoice		; $EF
00084FEA                            ; ===========================================================================
00084FEA 6000 0000                  		bra.w	cfModulation		; $F0
00084FEE                            ; ===========================================================================
00084FEE 6000 0000                  		bra.w	cfEnableModulation	; $F1
00084FF2                            ; ===========================================================================
00084FF2 6000 0000                  		bra.w	cfStopTrack		; $F2
00084FF6                            ; ===========================================================================
00084FF6 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00084FFA                            ; ===========================================================================
00084FFA 6000 0000                  		bra.w	cfDisableModulation	; $F4
00084FFE                            ; ===========================================================================
00084FFE 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085002                            ; ===========================================================================
00085002 6000 0000                  		bra.w	cfJumpTo		; $F6
00085006                            ; ===========================================================================
00085006 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
0008500A                            ; ===========================================================================
0008500A 6000 0000                  		bra.w	cfJumpToGosub		; $F8
0008500E                            ; ===========================================================================
0008500E 6000 0000                  		bra.w	cfOpF9			; $F9
00085012                            ; ===========================================================================
00085012                            ; loc_72ACC:
00085012                            cfPanningAMSFMS:
00085012 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085014 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085018 6B00                       		bmi.s	locret_72AEA		; Return if yes
0008501A 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
0008501E 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085022 8200                       		or.b	d0,d1			; Mask in new value
00085024 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085028 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0008502C 6000 FC20                  		bra.w	WriteFMIorIIMain
00085030                            ; ===========================================================================
00085030                            
00085030                            locret_72AEA:
00085030 4E75                       		rts	
00085032                            ; ===========================================================================
00085032                            ; loc_72AEC: cfAlterNotes:
00085032                            cfDetune:
00085032 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085036 4E75                       		rts	
00085038                            ; ===========================================================================
00085038                            ; loc_72AF2: cfUnknown1:
00085038                            cfSetCommunication:
00085038 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0008503C 4E75                       		rts	
0008503E                            ; ===========================================================================
0008503E                            ; loc_72AF8:
0008503E                            cfJumpReturn:
0008503E 7000                       		moveq	#0,d0
00085040 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085044 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085048 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085050 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085052 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085054 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085058 4E75                       		rts	
0008505A                            ; ===========================================================================
0008505A                            ; loc_72B14:
0008505A                            cfFadeInToPrevious:
0008505A 204E                       		movea.l	a6,a0
0008505C 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085060 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085064                            ; loc_72B1E:
00085064                            @restoreramloop:
00085064 20D9                       		move.l	(a1)+,(a0)+
00085066 51C8 FFFC                  		dbf	d0,@restoreramloop
0008506A                            
0008506A 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085070 264D                       		movea.l	a5,a3
00085072 1C3C 0028                  		move.b	#$28,d6
00085076 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
0008507A 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008507C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085080                            ; loc_72B3A:
00085080                            @fmloop:
00085080 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085084 6700                       		beq.s	@nextfm		; Branch if not
00085086 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0008508A DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
0008508E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085092 6600                       		bne.s	@nextfm		; Branch if yes
00085094 7000                       		moveq	#0,d0
00085096 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
0008509A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0008509E 4EBA 0000                  		jsr	SetVoice(pc)
000850A2                            ; loc_72B5C:
000850A2                            @nextfm:
000850A2 DAFC 0030                  		adda.w	#TrackSz,a5
000850A6 51CF FFD8                  		dbf	d7,@fmloop
000850AA                            
000850AA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000850AC                            ; loc_72B66:
000850AC                            @psgloop:
000850AC 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000850B0 6700                       		beq.s	@nextpsg	; Branch if not
000850B2 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000850B6 4EBA FE20                  		jsr	PSGNoteOff(pc)
000850BA DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000850BE                            ; loc_72B78:
000850BE                            @nextpsg:
000850BE DAFC 0030                  		adda.w	#TrackSz,a5
000850C2 51CF FFE8                  		dbf	d7,@psgloop
000850C6                            		
000850C6 2A4B                       		movea.l	a3,a5
000850C8 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000850CE 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000850D4 422E 0027                  		clr.b	f_1up_playing(a6)
000850D8 33FC 0000 00A1 1100        		startZ80
000850E0 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000850E2 4E75                       		rts	
000850E4                            ; ===========================================================================
000850E4                            ; loc_72B9E:
000850E4                            cfSetTempoDivider:
000850E4 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
000850E8 4E75                       		rts	
000850EA                            ; ===========================================================================
000850EA                            ; loc_72BA4: cfSetVolume:
000850EA                            cfChangeFMVolume:
000850EA 101C                       		move.b	(a4)+,d0		; Get parameter
000850EC D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
000850F0 6000 0000                  		bra.w	SendVoiceTL
000850F4                            ; ===========================================================================
000850F4                            ; loc_72BAE: cfPreventAttack:
000850F4                            cfHoldNote:
000850F4 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
000850F8 4E75                       		rts	
000850FA                            ; ===========================================================================
000850FA                            ; loc_72BB4: cfNoteFill
000850FA                            cfNoteTimeout:
000850FA 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
000850FE 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085102 4E75                       		rts	
00085104                            ; ===========================================================================
00085104                            ; loc_72BBE: cfAddKey:
00085104                            cfChangeTransposition:
00085104 101C                       		move.b	(a4)+,d0		; Get parameter
00085106 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
0008510A 4E75                       		rts	
0008510C                            ; ===========================================================================
0008510C                            ; loc_72BC6:
0008510C                            cfSetTempo:
0008510C 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085110 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085114 4E75                       		rts	
00085116                            ; ===========================================================================
00085116                            ; loc_72BD0: cfSetTempoMod:
00085116                            cfSetTempoDividerAll:
00085116 41EE 0040                  		lea	v_music_track_ram(a6),a0
0008511A 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0008511C 7230                       		moveq	#TrackSz,d1
0008511E 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085120                            ; loc_72BDA:
00085120                            @trackloop:
00085120 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085124 D0C1                       		adda.w	d1,a0
00085126 51CA FFF8                  		dbf	d2,@trackloop
0008512A                            
0008512A 4E75                       		rts	
0008512C                            ; ===========================================================================
0008512C                            ; loc_72BE6: cfChangeVolume:
0008512C                            cfChangePSGVolume:
0008512C 101C                       		move.b	(a4)+,d0		; Get volume change
0008512E D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085132 4E75                       		rts	
00085134                            ; ===========================================================================
00085134                            ; loc_72BEE:
00085134                            cfClearPush:
00085134 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085138 4E75                       		rts	
0008513A                            ; ===========================================================================
0008513A                            ; loc_72BF4:
0008513A                            cfStopSpecialFM4:
0008513A 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0008513E 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085142 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085146 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0008514A 6B00                       		bmi.s	@locexit					; Branch if yes
0008514C 264D                       		movea.l	a5,a3
0008514E 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085152 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085156 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008515A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0008515E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085162 4EBA 0000                  		jsr	SetVoice(pc)
00085166 2A4B                       		movea.l	a3,a5
00085168                            ; loc_72C22:
00085168                            @locexit:
00085168 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
0008516A 4E75                       		rts	
0008516C                            ; ===========================================================================
0008516C                            ; loc_72C26:
0008516C                            cfSetVoice:
0008516C 7000                       		moveq	#0,d0
0008516E 101C                       		move.b	(a4)+,d0		; Get new voice
00085170 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085174 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085178 6600 0000                  		bne.w	locret_72CAA		; Return if yes
0008517C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085180 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085184 6700                       		beq.s	SetVoice		; If yes, branch
00085186 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
0008518A 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
0008518E 6B00                       		bmi.s	SetVoice		; If yes, branch
00085190 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085194                            
00085194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085194                            
00085194                            ; sub_72C4E:
00085194                            SetVoice:
00085194 5340                       		subq.w	#1,d0
00085196 6B00                       		bmi.s	@havevoiceptr
00085198 323C 0019                  		move.w	#25,d1
0008519C                            ; loc_72C56:
0008519C                            @voicemultiply:
0008519C D2C1                       		adda.w	d1,a1
0008519E 51C8 FFFC                  		dbf	d0,@voicemultiply
000851A2                            ; loc_72C5C:
000851A2                            @havevoiceptr:
000851A2 1219                       		move.b	(a1)+,d1		; feedback/algorithm
000851A4 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
000851A8 1801                       		move.b	d1,d4
000851AA 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
000851AE 4EBA FAAA                  		jsr	WriteFMIorII(pc)
000851B2 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000851B6 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000851B8                            ; loc_72C72:
000851B8                            @sendvoiceloop:
000851B8 101A                       		move.b	(a2)+,d0
000851BA 1219                       		move.b	(a1)+,d1
000851BC 4EBA FA9C                  		jsr	WriteFMIorII(pc)
000851C0 51CB FFF6                  		dbf	d3,@sendvoiceloop
000851C4                            
000851C4 7A03                       		moveq	#3,d5
000851C6 0244 0007                  		andi.w	#7,d4			; Get algorithm
000851CA 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
000851CE 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
000851D2                            ; loc_72C8C:
000851D2                            @sendtlloop:
000851D2 101A                       		move.b	(a2)+,d0
000851D4 1219                       		move.b	(a1)+,d1
000851D6 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000851D8 6400                       		bcc.s	@sendtl		; Branch if not
000851DA D203                       		add.b	d3,d1		; Include additional attenuation
000851DC                            ; loc_72C96:
000851DC                            @sendtl:
000851DC 4EBA FA7C                  		jsr	WriteFMIorII(pc)
000851E0 51CD FFF0                  		dbf	d5,@sendtlloop
000851E4                            		
000851E4 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
000851E8 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
000851EC 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
000851F0                            
000851F0                            locret_72CAA:
000851F0 4E75                       		rts	
000851F2                            ; End of function SetVoice
000851F2                            
000851F2                            ; ===========================================================================
000851F2                            ; byte_72CAC:
000851F2 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000851FA                            
000851FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000851FA                            
000851FA                            ; sub_72CB4:
000851FA                            SendVoiceTL:
000851FA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000851FE 6600                       		bne.s	@locret		; Return if so
00085200 7000                       		moveq	#0,d0
00085202 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085206 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0008520A 4A2E 000E                  		tst.b	f_voice_selector(a6)
0008520E 6700                       		beq.s	@gotvoiceptr
00085210                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085210                            		; of a6!
00085210 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085214 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085218 6B00                       		bmi.s	@gotvoiceptr
0008521A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
0008521E                            ; loc_72CD8:
0008521E                            @gotvoiceptr:
0008521E 5340                       		subq.w	#1,d0
00085220 6B00                       		bmi.s	@gotvoice
00085222 323C 0019                  		move.w	#25,d1
00085226                            ; loc_72CE0:
00085226                            @voicemultiply:
00085226 D2C1                       		adda.w	d1,a1
00085228 51C8 FFFC                  		dbf	d0,@voicemultiply
0008522C                            ; loc_72CE6:
0008522C                            @gotvoice:
0008522C D2FC 0015                  		adda.w	#21,a1				; Want TL
00085230 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085234 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085238 0240 0007                  		andi.w	#7,d0				; Want only algorithm
0008523C 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085240 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085244 6B00                       		bmi.s	@locret				; If negative, stop
00085246 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085248                            ; loc_72D02:
00085248                            @sendtlloop:
00085248 101A                       		move.b	(a2)+,d0
0008524A 1219                       		move.b	(a1)+,d1
0008524C E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0008524E 6400                       		bcc.s	@senttl		; Branch if not
00085250 D203                       		add.b	d3,d1		; Include additional attenuation
00085252 6500                       		bcs.s	@senttl		; Branch on overflow
00085254 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085258                            ; loc_72D12:
00085258                            @senttl:
00085258 51CD FFEE                  		dbf	d5,@sendtlloop
0008525C                            ; locret_72D16:
0008525C                            @locret:
0008525C 4E75                       		rts	
0008525E                            ; End of function SendVoiceTL
0008525E                            
0008525E                            ; ===========================================================================
0008525E                            ; byte_72D18:
0008525E                            FMInstrumentOperatorTable:
0008525E 30                         		dc.b  $30		; Detune/multiple operator 1
0008525F 38                         		dc.b  $38		; Detune/multiple operator 3
00085260 34                         		dc.b  $34		; Detune/multiple operator 2
00085261 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085262 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085263 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085264 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085265 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085266 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085267 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085268 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085269 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
0008526A 70                         		dc.b  $70		; Secondary decay rate operator 1
0008526B 78                         		dc.b  $78		; Secondary decay rate operator 3
0008526C 74                         		dc.b  $74		; Secondary decay rate operator 2
0008526D 7C                         		dc.b  $7C		; Secondary decay rate operator 4
0008526E 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
0008526F 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085270 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085271 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085272                            FMInstrumentOperatorTable_End
00085272                            ; byte_72D2C:
00085272                            FMInstrumentTLTable:
00085272 40                         		dc.b  $40		; Total level operator 1
00085273 48                         		dc.b  $48		; Total level operator 3
00085274 44                         		dc.b  $44		; Total level operator 2
00085275 4C                         		dc.b  $4C		; Total level operator 4
00085276                            FMInstrumentTLTable_End
00085276                            ; ===========================================================================
00085276                            ; loc_72D30:
00085276                            cfModulation:
00085276 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
0008527A 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
0008527E 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085282 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085286 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
0008528A 101C                       		move.b	(a4)+,d0			; Modulation steps...
0008528C E208                       		lsr.b	#1,d0				; ... divided by 2...
0008528E 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085292 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085296 4E75                       		rts	
00085298                            ; ===========================================================================
00085298                            ; loc_72D52:
00085298                            cfEnableModulation:
00085298 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
0008529C 4E75                       		rts	
0008529E                            ; ===========================================================================
0008529E                            ; loc_72D58:
0008529E                            cfStopTrack:
0008529E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000852A2 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000852A6 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000852AA 6B00                       		bmi.s	@stoppsg		; Branch if yes
000852AC 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
000852B0 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000852B4 4EBA F980                  		jsr	FMNoteOff(pc)
000852B8 6000                       		bra.s	@stoppedchannel
000852BA                            ; ===========================================================================
000852BA                            ; loc_72D74:
000852BA                            @stoppsg:
000852BA 4EBA FC1C                  		jsr	PSGNoteOff(pc)
000852BE                            ; loc_72D78:
000852BE                            @stoppedchannel:
000852BE 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
000852C2 6A00 0000                  		bpl.w	@locexit		; Exit if not
000852C6 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000852C8 7000                       		moveq	#0,d0
000852CA 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
000852CE 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
000852D0 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
000852D4 264D                       		movea.l	a5,a3
000852D6 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
000852DA 6600                       		bne.s	@getpointer		; Branch if not
000852DC 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000852E0 6A00                       		bpl.s	@getpointer		; Branch if not
000852E2 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000852E6 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
000852EA 6000                       		bra.s	@gotpointer
000852EC                            ; ===========================================================================
000852EC                            ; loc_72DA8:
000852EC                            @getpointer:
000852EC 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
000852EE E508                       		lsl.b	#2,d0
000852F0 2A70 0000                  		movea.l	(a0,d0.w),a5
000852F4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000852F6 6A00                       		bpl.s	@novoiceupd		; Branch if not
000852F8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
000852FC                            ; loc_72DB8:
000852FC                            @gotpointer:
000852FC 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085300 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085304 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085308 4EBA FE8A                  		jsr	SetVoice(pc)
0008530C                            ; loc_72DC8:
0008530C                            @novoiceupd:
0008530C 2A4B                       		movea.l	a3,a5
0008530E 6000                       		bra.s	@locexit
00085310                            ; ===========================================================================
00085310                            ; loc_72DCC:
00085310                            @getpsgptr:
00085310 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085314 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085316 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085318 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0008531C 6700                       		beq.s	@gotchannelptr	; Branch if yes
0008531E 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085322 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085324                            ; loc_72DE0:
00085324                            @getchannelptr:
00085324 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085328 E608                       		lsr.b	#3,d0
0008532A 2070 0000                  		movea.l	(a0,d0.w),a0
0008532E                            ; loc_72DEA:
0008532E                            @gotchannelptr:
0008532E 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085332 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085336 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
0008533C 6600                       		bne.s	@locexit			; Branch if not
0008533E 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085346                            ; loc_72E02:
00085346                            @locexit:
00085346 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085348 4E75                       		rts	
0008534A                            ; ===========================================================================
0008534A                            ; loc_72E06:
0008534A                            cfSetPSGNoise:
0008534A 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085350 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085354 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085358 6600                       		bne.s	@locret				; Return if yes
0008535A 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085362                            ; locret_72E1E:
00085362                            @locret:
00085362 4E75                       		rts	
00085364                            ; ===========================================================================
00085364                            ; loc_72E20:
00085364                            cfDisableModulation:
00085364 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085368 4E75                       		rts	
0008536A                            ; ===========================================================================
0008536A                            ; loc_72E26:
0008536A                            cfSetPSGTone:
0008536A 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
0008536E 4E75                       		rts	
00085370                            ; ===========================================================================
00085370                            ; loc_72E2C:
00085370                            cfJumpTo:
00085370 101C                       		move.b	(a4)+,d0	; High byte of offset
00085372 E148                       		lsl.w	#8,d0		; Shift it into place
00085374 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085376 D8C0                       		adda.w	d0,a4		; Add to current position
00085378 534C                       		subq.w	#1,a4		; Put back one byte
0008537A 4E75                       		rts	
0008537C                            ; ===========================================================================
0008537C                            ; loc_72E38:
0008537C                            cfRepeatAtPos:
0008537C 7000                       		moveq	#0,d0
0008537E 101C                       		move.b	(a4)+,d0			; Loop index
00085380 121C                       		move.b	(a4)+,d1			; Repeat count
00085382 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085386 6600                       		bne.s	@loopexists			; Branch if yes
00085388 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
0008538C                            ; loc_72E48:
0008538C                            @loopexists:
0008538C 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085390 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085392 544C                       		addq.w	#2,a4				; Skip target address
00085394 4E75                       		rts	
00085396                            ; ===========================================================================
00085396                            ; loc_72E52:
00085396                            cfJumpToGosub:
00085396 7000                       		moveq	#0,d0
00085398 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
0008539C 5900                       		subq.b	#4,d0				; Add space for another target
0008539E 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
000853A2 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
000853A6 60C8                       		bra.s	cfJumpTo
000853A8                            ; ===========================================================================
000853A8                            ; loc_72E64:
000853A8                            cfOpF9:
000853A8 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
000853AC 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000853B0 4EBA F8B4                  		jsr	WriteFMI(pc)
000853B4 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000853B8 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000853BC 6000 F8A8                  		bra.w	WriteFMI
000853C0                            ; ===========================================================================
000853C0                            
000853C0                            Kos_Z80:
000853C0                            		incbin	"sound\z80.bin", 0, $15
000853D5 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
000853D6                            		incbin	"sound\z80.bin", $16, 6
000853DC 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
000853DD                            		incbin	"sound\z80.bin", $1D, $93
00085470 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085472                            		incbin	"sound\z80.bin", $B2, 1
00085473 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085475                            		incbin	"sound\z80.bin", $B5, $16AB
00086B16                            		even
00086B16                            
00086B16                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00087E3A 00                         		even
00087E3A                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
000896C2                            		even
000896C2                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091042 00                         		even
00091042                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00092856 00                         		even
00092856                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000935FC                            		even
000935FC                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000949B4                            		even
000949B4                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000952AC 00                         		even
000952AC                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000952AC                            extralifejingle_Header:
000952AC                            	smpsHeaderStartSong 1
000952AE 0703                       	smpsHeaderChan      $07, $03
000952B0 0100                       	smpsHeaderTempo     $01, $00
000952B2                            
000952B6 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000952BA 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000952BE 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000952C2 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000952C6 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000952CA 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000952E0                            
000952E0                            ; DAC Data
000952E0                            extralifejingle_DAC:
000952E0 807F 55                    	dc.b	nRst, $7F, $55
000952E3 E4                         	smpsFade
000952E4                            ; PSG1 Data
000952E4                            extralifejingle_PSG1:
000952E4                            ; PSG2 Data
000952E4                            extralifejingle_PSG2:
000952E4                            ; PSG3 Data
000952E4                            extralifejingle_PSG3:
000952E4 F2                         	smpsStop
000952E5                            
000952E5                            ; FM1 Data
000952E5                            extralifejingle_FM1:
000952E5 EF00                       	smpsSetvoice        $00
000952E7 E616                       	smpsAlterVol        $16
000952E9 E0C0                       	smpsPan             panCenter, $00
000952EB A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000952F7 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000952FB F2                         	smpsStop
000952FC                            
000952FC                            ; FM2 Data
000952FC                            extralifejingle_FM2:
000952FC EF01                       	smpsSetvoice        $01
000952FE E616                       	smpsAlterVol        $16
00095300 E0C0                       	smpsPan             panCenter, $00
00095302 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
0009530E A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095312 F2                         	smpsStop
00095313                            
00095313                            ; FM3 Data
00095313                            extralifejingle_FM3:
00095313 EF01                       	smpsSetvoice        $01
00095315 E616                       	smpsAlterVol        $16
00095317 E0C0                       	smpsPan             panCenter, $00
00095319 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095325 B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095329 F2                         	smpsStop
0009532A                            
0009532A                            ; FM4 Data
0009532A                            extralifejingle_FM4:
0009532A EF02                       	smpsSetvoice        $02
0009532C E0C0                       	smpsPan             panCenter, $00
0009532E 8001                       	dc.b	nRst, $01
00095330 E616                       	smpsAlterVol        $16
00095332 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
0009533E C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095342 F2                         	smpsStop
00095343                            
00095343                            ; FM5 Data
00095343                            extralifejingle_FM5:
00095343 EF03                       	smpsSetvoice        $03
00095345 E602                       	smpsAlterVol        $02
00095347 E0C0                       	smpsPan             panCenter, $00
00095349 8001                       	dc.b	nRst, $01
0009534B EF05                       	smpsSetvoice        $05
0009534D E60A                       	smpsAlterVol        $0A
0009534F E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
0009535B B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095367 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095373 C1C4 80                    	dc.b	nE5, nG5, nRst
00095376 F2                         	smpsStop
00095377                            
00095377                            ; FM6 Data
00095377                            extralifejingle_FM6:
00095377 EF04                       	smpsSetvoice        $04
00095379 E607                       	smpsAlterVol        $07
0009537B E0C0                       	smpsPan             panCenter, $00
0009537D 8001                       	dc.b	nRst, $01
0009537F EF06                       	smpsSetvoice        $06
00095381 E6F9                       	smpsAlterVol        $F9
00095383 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
0009538A F2                         	smpsStop
0009538B                            
0009538B                            extralifejingle_Voices:
0009538B                            ;	Voice $00
0009538B                            ;	$3A
0009538B                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
0009538B                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
0009538B                            	smpsVcAlgorithm     $02
0009538B                            	smpsVcFeedback      $07
0009538B                            	smpsVcUnusedBits    $00
0009538B                            	smpsVcDetune        $03, $07, $07, $03
0009538B                            	smpsVcCoarseFreq    $01, $04, $03, $04
0009538B                            	smpsVcRateScale     $00, $00, $00, $00
0009538B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009538B                            	smpsVcAmpMod        $00, $00, $00, $00
0009538B                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
0009538B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009538B                            	smpsVcDecayLevel    $00, $00, $00, $00
0009538B                            	smpsVcReleaseRate   $05, $03, $03, $03
000953A4                            
000953A4                            ;	Voice $01
000953A4                            ;	$3A
000953A4                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000953A4                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000953A4                            	smpsVcAlgorithm     $02
000953A4                            	smpsVcFeedback      $07
000953A4                            	smpsVcUnusedBits    $00
000953A4                            	smpsVcDetune        $03, $07, $07, $03
000953A4                            	smpsVcCoarseFreq    $01, $04, $03, $04
000953A4                            	smpsVcRateScale     $00, $00, $00, $00
000953A4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000953A4                            	smpsVcAmpMod        $00, $00, $00, $00
000953A4                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000953A4                            	smpsVcDecayRate2    $00, $00, $00, $00
000953A4                            	smpsVcDecayLevel    $00, $00, $00, $00
000953A4                            	smpsVcReleaseRate   $05, $03, $03, $03
000953BD                            
000953BD                            ;	Voice $02
000953BD                            ;	$3A
000953BD                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000953BD                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000953BD                            	smpsVcAlgorithm     $02
000953BD                            	smpsVcFeedback      $07
000953BD                            	smpsVcUnusedBits    $00
000953BD                            	smpsVcDetune        $03, $07, $07, $03
000953BD                            	smpsVcCoarseFreq    $01, $04, $03, $04
000953BD                            	smpsVcRateScale     $00, $00, $00, $00
000953BD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000953BD                            	smpsVcAmpMod        $00, $00, $00, $00
000953BD                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000953BD                            	smpsVcDecayRate2    $00, $00, $00, $00
000953BD                            	smpsVcDecayLevel    $00, $00, $00, $00
000953BD                            	smpsVcReleaseRate   $05, $03, $03, $03
000953D6                            
000953D6                            ;	Voice $03
000953D6                            ;	$00
000953D6                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000953D6                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000953D6                            	smpsVcAlgorithm     $00
000953D6                            	smpsVcFeedback      $00
000953D6                            	smpsVcUnusedBits    $00
000953D6                            	smpsVcDetune        $00, $00, $00, $00
000953D6                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000953D6                            	smpsVcRateScale     $00, $00, $00, $00
000953D6                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000953D6                            	smpsVcAmpMod        $00, $00, $00, $00
000953D6                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000953D6                            	smpsVcDecayRate2    $00, $00, $00, $00
000953D6                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000953D6                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000953EF                            
000953EF                            ;	Voice $04
000953EF                            ;	$03
000953EF                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000953EF                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000953EF                            	smpsVcAlgorithm     $03
000953EF                            	smpsVcFeedback      $00
000953EF                            	smpsVcUnusedBits    $00
000953EF                            	smpsVcDetune        $03, $04, $04, $06
000953EF                            	smpsVcCoarseFreq    $01, $00, $00, $06
000953EF                            	smpsVcRateScale     $00, $00, $00, $00
000953EF                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000953EF                            	smpsVcAmpMod        $00, $00, $00, $00
000953EF                            	smpsVcDecayRate1    $01, $02, $05, $0E
000953EF                            	smpsVcDecayRate2    $06, $04, $00, $01
000953EF                            	smpsVcDecayLevel    $01, $01, $06, $0A
000953EF                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095408                            
00095408                            ;	Voice $05
00095408                            ;	$34
00095408                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095408                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095408                            	smpsVcAlgorithm     $04
00095408                            	smpsVcFeedback      $06
00095408                            	smpsVcUnusedBits    $00
00095408                            	smpsVcDetune        $07, $00, $07, $03
00095408                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095408                            	smpsVcRateScale     $00, $01, $00, $02
00095408                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095408                            	smpsVcAmpMod        $00, $00, $00, $00
00095408                            	smpsVcDecayRate1    $08, $07, $07, $14
00095408                            	smpsVcDecayRate2    $00, $00, $00, $00
00095408                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095408                            	smpsVcReleaseRate   $07, $07, $04, $06
00095421                            
00095421                            ;	Voice $06
00095421                            ;	$30
00095421                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095421                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095421                            	smpsVcAlgorithm     $00
00095421                            	smpsVcFeedback      $06
00095421                            	smpsVcUnusedBits    $00
00095421                            	smpsVcDetune        $00, $00, $00, $00
00095421                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095421                            	smpsVcRateScale     $01, $00, $00, $02
00095421                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095421                            	smpsVcAmpMod        $00, $00, $00, $00
00095421                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095421                            	smpsVcDecayRate2    $08, $05, $18, $08
00095421                            	smpsVcDecayLevel    $01, $00, $00, $06
00095421                            	smpsVcReleaseRate   $08, $0F, $00, $0F
0009543A                            
0009543A                            
0009543A                            		even
0009543A                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
00095C92 00                         		even
00095C92                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000961B2                            		even
000961B2                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096474 00                         		even
00096474                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000972CC                            		even
000972CC                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00097518 00                         		even
00097518                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
0009784E 00                         		even
0009784E                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000979FA 00                         		even
000979FA                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00097C08 00                         		even
00097C08                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00097EEC 00                         		even
00097EEC                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
0009861C 00                         		even
0009861C                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000986EA                            		even
000986EA                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00098B58 00                         		even
00098B58                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
0009964E                            		even
0009964E                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009A230                            		even
0009A230                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009B536 00                         		even
0009B536                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009B536                            PasswordEntry_Header:
0009B536                            	smpsHeaderStartSong 3
0009B538 0603                       	smpsHeaderChan      $06, $03
0009B53A 0105                       	smpsHeaderTempo     $01, $05
0009B53C                            
0009B540 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009B544 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009B548 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009B54C 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009B550 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009B566                            
0009B566                            ; FM1 Data
0009B566                            PasswordEntry_FM1:
0009B566 EF00                       	smpsSetvoice        $00
0009B56D                            
0009B56D                            PasswordEntry_Jump00:
0009B56D CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009B579 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009B585 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009B591 C918 CB                    	dc.b	nC6, $18, nD6
0009B594 F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009B597                            
0009B597                            ; FM2 Data
0009B597                            PasswordEntry_FM2:
0009B597 EF01                       	smpsSetvoice        $01
0009B599                            
0009B599                            PasswordEntry_Jump03:
0009B599 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009B5A5 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009B5B1 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009B5BD AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009B5C7 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009B5CA                            
0009B5CA                            ; FM3 Data
0009B5CA                            PasswordEntry_FM3:
0009B5CA E080                       	smpsPan             panLeft, $00
0009B5CC EF02                       	smpsSetvoice        $02
0009B5CE                            
0009B5CE                            PasswordEntry_Jump02:
0009B5CE C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009B5DA C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009B5E6 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009B5F2 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009B5FE C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009B60A C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009B616 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009B622 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009B62E BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009B63A BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009B646 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009B64E F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009B651                            
0009B651                            ; FM4 Data
0009B651                            PasswordEntry_FM4:
0009B651 E040                       	smpsPan             panRight, $00
0009B653 EF02                       	smpsSetvoice        $02
0009B655                            
0009B655                            PasswordEntry_Jump01:
0009B655 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009B661 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009B66D BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009B679 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009B685 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009B691 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009B69D C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009B6A9 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009B6B5 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009B6C1 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009B6CD BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009B6D5 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009B6D8                            
0009B6D8                            ; FM5 Data
0009B6D8                            PasswordEntry_FM5:
0009B6D8 EF00                       	smpsSetvoice        $00
0009B6DA E1FB                       	smpsAlterNote       $FB
0009B6DC 800C                       	dc.b	nRst, $0C
0009B6DE F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009B6E1                            
0009B6E1                            ; PSG1 Data
0009B6E1                            PasswordEntry_PSG1:
0009B6E1 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009B6ED CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009B6F9 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009B705 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009B711 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009B71D C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009B729 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009B72D F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009B730                            
0009B730                            ; PSG2 Data
0009B730                            PasswordEntry_PSG2:
0009B730 E1FF                       	smpsAlterNote       $FF
0009B732 800C                       	dc.b	nRst, $0C
0009B734 F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009B737                            
0009B737                            ; PSG3 Data
0009B737                            PasswordEntry_PSG3:
0009B737 F502                       	smpsPSGvoice        fTone_02
0009B739 F3E7                       	smpsPSGform         $E7
0009B73B C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009B747 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009B753 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009B75A F503                       	smpsPSGvoice        fTone_03
0009B75C C5                         	dc.b	nAb5
0009B75D F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009B760                            
0009B760                            ; DAC Data
0009B760                            PasswordEntry_DAC:
0009B760 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009B76C 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009B774 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009B779 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009B785 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009B78D                            
0009B78D                            PasswordEntry_Loop00:
0009B78D 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009B799 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009B7A1 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009B7A6 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009B7B2 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009B7BC F6FF A2                    	smpsJump            PasswordEntry_DAC
0009B7BF                            
0009B7BF                            PasswordEntry_Voices:
0009B7BF                            ;	Voice $00
0009B7BF                            ;	$04
0009B7BF                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009B7BF                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009B7BF                            	smpsVcAlgorithm     $04
0009B7BF                            	smpsVcFeedback      $00
0009B7BF                            	smpsVcUnusedBits    $00
0009B7BF                            	smpsVcDetune        $00, $00, $00, $00
0009B7BF                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009B7BF                            	smpsVcRateScale     $00, $00, $00, $00
0009B7BF                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009B7BF                            	smpsVcAmpMod        $00, $00, $00, $00
0009B7BF                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009B7BF                            	smpsVcDecayRate2    $05, $00, $00, $03
0009B7BF                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009B7BF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009B7D8                            
0009B7D8                            ;	Voice $01
0009B7D8                            ;	$39
0009B7D8                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009B7D8                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009B7D8                            	smpsVcAlgorithm     $01
0009B7D8                            	smpsVcFeedback      $07
0009B7D8                            	smpsVcUnusedBits    $00
0009B7D8                            	smpsVcDetune        $00, $04, $06, $00
0009B7D8                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009B7D8                            	smpsVcRateScale     $01, $01, $01, $00
0009B7D8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009B7D8                            	smpsVcAmpMod        $00, $00, $00, $00
0009B7D8                            	smpsVcDecayRate1    $09, $09, $11, $10
0009B7D8                            	smpsVcDecayRate2    $00, $00, $00, $06
0009B7D8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009B7D8                            	smpsVcReleaseRate   $08, $08, $08, $08
0009B7F1                            
0009B7F1                            ;	Voice $02
0009B7F1                            ;	$2C
0009B7F1                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009B7F1                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009B7F1                            	smpsVcAlgorithm     $04
0009B7F1                            	smpsVcFeedback      $05
0009B7F1                            	smpsVcUnusedBits    $00
0009B7F1                            	smpsVcDetune        $00, $02, $00, $04
0009B7F1                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009B7F1                            	smpsVcRateScale     $00, $00, $00, $00
0009B7F1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009B7F1                            	smpsVcAmpMod        $00, $00, $00, $00
0009B7F1                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009B7F1                            	smpsVcDecayRate2    $05, $00, $05, $04
0009B7F1                            	smpsVcDecayLevel    $08, $08, $05, $04
0009B7F1                            	smpsVcReleaseRate   $06, $05, $06, $05
0009B80A                            
0009B80A                            
0009B80A                            		even		
0009B80A                            ; ---------------------------------------------------------------------------
0009B80A                            ; Sound	effect pointers
0009B80A                            ; ---------------------------------------------------------------------------
0009B80A                            SoundIndex:
0009B80A 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009B80E 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009B812 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009B816 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009B81A 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009B81E 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009B822 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009B826 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009B82A 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009B82E 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009B832 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009B836 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009B83A 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009B83E 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009B842 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009B846 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009B84A 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009B84E 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009B852 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009B856 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009B85A 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009B85E 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009B862 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009B866 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009B86A 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009B86E 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009B872 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009B876 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009B87A 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009B87E 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009B882 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009B886 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009B88A 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009B88E 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009B892 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009B896 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009B89A 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009B89E 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009B8A2 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009B8A6 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009B8AA 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009B8AE 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009B8B2 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009B8B6 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009B8BA 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009B8BE 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009B8C2 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009B8C6 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009B8CA                            ptr_sndend
0009B8CA                            ; ---------------------------------------------------------------------------
0009B8CA                            ; Special sound effect pointers
0009B8CA                            ; ---------------------------------------------------------------------------
0009B8CA                            SpecSoundIndex:
0009B8CA 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009B8CE 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009B8D2                            ptr_specend
0009B8D2                            SoundA0:	include	"sound/sfx/Jump.asm"
0009B8D2                            SndA0_Jump_Header:
0009B8D2                            	smpsHeaderStartSong 1
0009B8D4 01                         	smpsHeaderTempoSFX  $01
0009B8D5 01                         	smpsHeaderChanSFX   $01
0009B8D6                            
0009B8DC                            
0009B8DC                            ; PSG2 Data
0009B8DC                            SndA0_Jump_PSG2:
0009B8DC F500                       	smpsPSGvoice        $00
0009B8DE 9E05                       	dc.b	nF2, $05
0009B8E5 A315                       	dc.b	nBb2, $15
0009B8E7 F2                         	smpsStop
0009B8E8                            
0009B8E8                            ; Song seems to not use any FM voices
0009B8E8                            SndA0_Jump_Voices:
0009B8E8                            SndA0_Jump_Voices:
0009B8E8                            		even
0009B8E8                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009B912                            		even
0009B912                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009B912                            SndDF_Header:
0009B912                            	smpsHeaderStartSong 3
0009B914 01                         	smpsHeaderTempoSFX  $01
0009B915 01                         	smpsHeaderChanSFX   $01
0009B916                            
0009B91C                            
0009B91C                            ; FM5 Data
0009B91C                            SndDF_FM5:
0009B91C EF00                       	smpsSetvoice        $00
0009B91E                            
0009B91E                            SndDF_Loop00:
0009B91E F800 00                    	smpsCall            SndDF_Call00
0009B921 E905                       	smpsAlterPitch $05
0009B923 E608                       	smpsFMAlterVol      $08
0009B925 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009B92A E9EC                       	smpsAlterPitch $EC
0009B92C E6E0                       	smpsFMAlterVol      $E0
0009B92E F2                         	smpsStop
0009B92F                            
0009B92F                            SndDF_Call00:
0009B92F 9902                       	dc.b	nC2, $02
0009B931 E901                       	smpsAlterPitch $01
0009B933 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009B938 E9F6                       	smpsAlterPitch $F6
0009B93A E3                         	smpsReturn
0009B93B                            
0009B93B                            SndDF_Voices:
0009B93B                            ;	Voice $00
0009B93B                            ;	$07
0009B93B                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009B93B                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009B93B                            	smpsVcAlgorithm     $07
0009B93B                            	smpsVcFeedback      $00
0009B93B                            	smpsVcUnusedBits    $00
0009B93B                            	smpsVcDetune        $00, $00, $00, $00
0009B93B                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009B93B                            	smpsVcRateScale     $00, $00, $00, $00
0009B93B                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009B93B                            	smpsVcAmpMod        $00, $00, $00, $00
0009B93B                            	smpsVcDecayRate1    $00, $00, $00, $00
0009B93B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009B93B                            	smpsVcDecayLevel    $01, $01, $01, $01
0009B93B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009B954                            		even
0009B954                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009B986                            		even
0009B986                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009B9CA 00                         		even
0009B9CA                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009B9CA                            SndD2_Header:
0009B9CA                            	smpsHeaderStartSong 3
0009B9CC 01                         	smpsHeaderTempoSFX  $01
0009B9CD 01                         	smpsHeaderChanSFX   $01
0009B9CE                            
0009B9D4                            
0009B9D4                            ; FM4 Data
0009B9D4                            SndD2_FM4:
0009B9D4 EF00                       	smpsSetvoice        $00
0009B9DB C645                       	dc.b	nA5, $45
0009B9DD F2                         	smpsStop
0009B9DE                            
0009B9DE                            SndD2_Voices:
0009B9DE                            ;	Voice $00
0009B9DE                            ;	$04
0009B9DE                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009B9DE                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009B9DE                            	smpsVcAlgorithm     $04
0009B9DE                            	smpsVcFeedback      $00
0009B9DE                            	smpsVcUnusedBits    $00
0009B9DE                            	smpsVcDetune        $04, $00, $00, $02
0009B9DE                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009B9DE                            	smpsVcRateScale     $00, $00, $00, $00
0009B9DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009B9DE                            	smpsVcAmpMod        $00, $00, $00, $00
0009B9DE                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009B9DE                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009B9DE                            	smpsVcDecayLevel    $00, $01, $00, $01
0009B9DE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009B9F8 00                         		even
0009B9F8                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009BA28                            		even
0009BA28                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009BA58                            		even
0009BA58                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009BA8C                            		even
0009BA8C                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009BA9E                            		even
0009BA9E                            SoundAA:	include	"sound/sfx/Splash.asm"
0009BA9E                            SndA2_Header:
0009BA9E                            	smpsHeaderStartSong 3
0009BAA0 01                         	smpsHeaderTempoSFX  $01
0009BAA1 02                         	smpsHeaderChanSFX   $02
0009BAA2                            
0009BAAE                            
0009BAAE                            ; FM3 Data
0009BAAE                            SndA2_FM3:
0009BAAE EF00                       	smpsSetvoice        $00
0009BAB5 8106                       	dc.b	nC0, $06
0009BAB7                            
0009BAB7                            SndA2_Loop00:
0009BAB7 810E                       	dc.b	nC0, $0E
0009BAB9 E60E                       	smpsAlterVol      $0E
0009BABB F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009BAC0 F2                         	smpsStop
0009BAC1                            
0009BAC1                            ; FM4 Data
0009BAC1                            SndA2_FM4:
0009BAC1 EF01                       	smpsSetvoice        $01
0009BAC3 A606 14                    	dc.b	nCs3, $06, $14
0009BAC6 F2                         	smpsStop
0009BAC7                            
0009BAC7                            SndA2_Voices:
0009BAC7                            ;	Voice $00
0009BAC7                            ;	$F9
0009BAC7                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009BAC7                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009BAC7                            	smpsVcAlgorithm     $01
0009BAC7                            	smpsVcFeedback      $07
0009BAC7                            	smpsVcUnusedBits    $03
0009BAC7                            	smpsVcDetune        $03, $01, $03, $02
0009BAC7                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009BAC7                            	smpsVcRateScale     $00, $00, $00, $00
0009BAC7                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009BAC7                            	smpsVcAmpMod        $00, $00, $00, $00
0009BAC7                            	smpsVcDecayRate1    $02, $09, $18, $05
0009BAC7                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009BAC7                            	smpsVcDecayLevel    $02, $04, $02, $01
0009BAC7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BAE0                            
0009BAE0                            ;	Voice $01
0009BAE0                            ;	$00
0009BAE0                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009BAE0                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009BAE0                            	smpsVcAlgorithm     $00
0009BAE0                            	smpsVcFeedback      $00
0009BAE0                            	smpsVcUnusedBits    $00
0009BAE0                            	smpsVcDetune        $00, $00, $00, $00
0009BAE0                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009BAE0                            	smpsVcRateScale     $00, $00, $03, $03
0009BAE0                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009BAE0                            	smpsVcAmpMod        $00, $00, $00, $00
0009BAE0                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009BAE0                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009BAE0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009BAE0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BAFA 00                         		even
0009BAFA                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009BAFA                            Sound_3E_Header:
0009BAFA                            	smpsHeaderStartSong 3
0009BAFC 01                         	smpsHeaderTempoSFX  $01
0009BAFD 01                         	smpsHeaderChanSFX   $01
0009BAFE                            
0009BB04                            
0009BB04                            ; FM5 Data
0009BB04                            Sound_3E_3F_40_41_FM5:
0009BB04 EF00                       	smpsSetvoice        $00
0009BB06 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009BB0B F2                         	smpsStop
0009BB0C                            
0009BB0C                            Sound_3E_Voices:
0009BB0C                            ;	Voice $00
0009BB0C                            ;	$0C
0009BB0C                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009BB0C                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009BB0C                            	smpsVcAlgorithm     $04
0009BB0C                            	smpsVcFeedback      $01
0009BB0C                            	smpsVcUnusedBits    $00
0009BB0C                            	smpsVcDetune        $03, $03, $02, $00
0009BB0C                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009BB0C                            	smpsVcRateScale     $00, $00, $00, $00
0009BB0C                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009BB0C                            	smpsVcAmpMod        $00, $00, $00, $00
0009BB0C                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009BB0C                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009BB0C                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009BB0C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BB25                            
0009BB25                            
0009BB26 00                         		even
0009BB26                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009BB5A                            		even
0009BB5A                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009BB90                            		even
0009BB90                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009BB90                            Sound_70_Header:
0009BB90                            	smpsHeaderStartSong 3
0009BB92 01                         	smpsHeaderTempoSFX  $01
0009BB93 02                         	smpsHeaderChanSFX   $02
0009BB94                            
0009BBA0                            
0009BBA0                            ; FM5 Data
0009BBA0                            Sound_70_FM5:
0009BBA0 EF00                       	smpsSetvoice        $00
0009BBA2 8001                       	dc.b	nRst, $01
0009BBA9 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009BBAD F2                         	smpsStop
0009BBAE                            
0009BBAE                            ; PSG3 Data
0009BBAE                            Sound_70_PSG3:
0009BBAE F500                       	smpsPSGvoice        sTone_0D
0009BBB0 800B                       	dc.b	nRst, $0B
0009BBB2 F3E7                       	smpsPSGform         $E7
0009BBB4 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009BBB7                            
0009BBB7                            Sound_70_Loop00:
0009BBB7 02                         	dc.b	$02
0009BBB8 EC01                       	smpsPSGAlterVol     $01
0009BBBA E7                         	dc.b	smpsNoAttack
0009BBBB F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009BBC0 F2                         	smpsStop
0009BBC1                            
0009BBC1                            Sound_70_Voices:
0009BBC1                            ;	Voice $00
0009BBC1                            ;	$FA
0009BBC1                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009BBC1                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009BBC1                            	smpsVcAlgorithm     $02
0009BBC1                            	smpsVcFeedback      $07
0009BBC1                            	smpsVcUnusedBits    $03
0009BBC1                            	smpsVcDetune        $00, $00, $00, $00
0009BBC1                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009BBC1                            	smpsVcRateScale     $00, $00, $00, $00
0009BBC1                            	smpsVcAttackRate    $13, $0F, $11, $12
0009BBC1                            	smpsVcAmpMod        $00, $00, $00, $00
0009BBC1                            	smpsVcDecayRate1    $02, $09, $18, $05
0009BBC1                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009BBC1                            	smpsVcDecayLevel    $02, $04, $02, $01
0009BBC1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BBDA                            
0009BBDA                            
0009BBDA                            		even
0009BBDA                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009BC08                            		even
0009BC08                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009BC3A                            		even
0009BC3A                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009BC66                            		even
0009BC66                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009BCB6                            		even
0009BCB6                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009BD00                            		even
0009BD00                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009BD5C                            		even
0009BD5C                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009BD8A                            		even
0009BD8A                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009BD8A                            SpikesSFX_Header:
0009BD8A                            	smpsHeaderStartSong 3
0009BD8C 01                         	smpsHeaderTempoSFX  $01
0009BD8D 02                         	smpsHeaderChanSFX   $02
0009BD8E                            
0009BD9A                            
0009BD9A                            ; FM6 Data
0009BD9A                            SndB7_FM4:
0009BD9A EF01                       	smpsSetvoice        $01
0009BDA1 B105                       	dc.b	nC4, $05
0009BDA3 F1                         	smpsModOn
0009BDA4 E10A                       	smpsAlterNote       $0A
0009BDA6 E601                       	smpsAlterVol        $01
0009BDA8 F2                         	smpsStop
0009BDA9                            
0009BDA9                            ; FM5 Data
0009BDA9                            SndB7_FM5:
0009BDA9 8005                       	dc.b	nRst, $05			 
0009BDAB EF00                       	smpsSetvoice        $00
0009BDAD DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009BDB3 F2                         	smpsStop
0009BDB4                            
0009BDB4                            SndB7_Voices:
0009BDB4                            ;	Voice $00
0009BDB4                            ;	$34
0009BDB4                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009BDB4                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009BDB4                            	smpsVcAlgorithm     $04
0009BDB4                            	smpsVcFeedback      $06
0009BDB4                            	smpsVcUnusedBits    $00
0009BDB4                            	smpsVcDetune        $0D, $00, $00, $00
0009BDB4                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009BDB4                            	smpsVcRateScale     $00, $00, $00, $00
0009BDB4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BDB4                            	smpsVcAmpMod        $00, $00, $00, $00
0009BDB4                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009BDB4                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009BDB4                            	smpsVcDecayLevel    $03, $05, $01, $03
0009BDB4                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009BDCD                            
0009BDCD                            ;	Voice $01
0009BDCD                            ;	$FA
0009BDCD                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009BDCD                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009BDCD                            	smpsVcAlgorithm     $02
0009BDCD                            	smpsVcFeedback      $07
0009BDCD                            	smpsVcUnusedBits    $03
0009BDCD                            	smpsVcDetune        $03, $01, $03, $02
0009BDCD                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009BDCD                            	smpsVcRateScale     $00, $00, $00, $00
0009BDCD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BDCD                            	smpsVcAmpMod        $00, $00, $00, $00
0009BDCD                            	smpsVcDecayRate1    $02, $09, $18, $05
0009BDCD                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009BDCD                            	smpsVcDecayLevel    $02, $04, $02, $01
0009BDCD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BDE6                            		even
0009BDE6                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009BE22                            		even
0009BE22                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009BE22                            SndBD_Header:
0009BE22                            	smpsHeaderStartSong 3
0009BE24 01                         	smpsHeaderTempoSFX  $01
0009BE25 01                         	smpsHeaderChanSFX   $01
0009BE26                            
0009BE2C                            
0009BE2C                            ; FM6 Data
0009BE2C                            SndBD_FM3:
0009BE2C EF00                       	smpsSetvoice        $00
0009BE2E                            
0009BE2E                            SndBD_Loop00:
0009BE2E C009                       	dc.b	nEb5, $09
0009BE30 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009BE35 F2                         	smpsStop
0009BE36                            
0009BE36                            SndBD_Voices:
0009BE36                            ;	Voice $00
0009BE36                            ;	$02
0009BE36                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009BE36                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009BE36                            	smpsVcAlgorithm     $02
0009BE36                            	smpsVcFeedback      $00
0009BE36                            	smpsVcUnusedBits    $00
0009BE36                            	smpsVcDetune        $00, $02, $05, $00
0009BE36                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009BE36                            	smpsVcRateScale     $00, $00, $00, $00
0009BE36                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009BE36                            	smpsVcAmpMod        $00, $00, $00, $00
0009BE36                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009BE36                            	smpsVcDecayRate2    $00, $00, $00, $01
0009BE36                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009BE36                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BE50 00                         		even
0009BE50                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009BE50                            Sound_59_Header:
0009BE50                            	smpsHeaderStartSong 3
0009BE52 01                         	smpsHeaderTempoSFX  $01
0009BE53 04                         	smpsHeaderChanSFX   $04
0009BE54                            
0009BE6C                            
0009BE6C                            ; FM3 Data
0009BE6C                            Sound_59_FM3:
0009BE6C E040                       	smpsPan             panRight, $00
0009BE6E 8002                       	dc.b	nRst, $02
0009BE70 F600 00                    	smpsJump            Sound_59_FM4
0009BE73                            
0009BE73                            ; FM5 Data
0009BE73                            Sound_59_FM5:
0009BE73 E080                       	smpsPan             panLeft, $00
0009BE75 8001                       	dc.b	nRst, $01
0009BE77                            
0009BE77                            ; FM4 Data
0009BE77                            Sound_59_FM4:
0009BE77 EF00                       	smpsSetvoice        $00
0009BE7E 8110                       	dc.b	nC0, $10
0009BE80 F2                         	smpsStop
0009BE81                            
0009BE81                            ; PSG3 Data
0009BE81                            Sound_59_PSG3:
0009BE86 F3E7                       	smpsPSGform         $E7
0009BE88                            
0009BE88                            Sound_59_Loop00:
0009BE88 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009BE8B EC03                       	smpsPSGAlterVol     $03
0009BE8D F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009BE92 F2                         	smpsStop
0009BE93                            
0009BE93                            Sound_59_Voices:
0009BE93                            ;	Voice $00
0009BE93                            ;	$F9
0009BE93                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009BE93                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009BE93                            	smpsVcAlgorithm     $01
0009BE93                            	smpsVcFeedback      $07
0009BE93                            	smpsVcUnusedBits    $03
0009BE93                            	smpsVcDetune        $03, $01, $03, $02
0009BE93                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009BE93                            	smpsVcRateScale     $00, $00, $00, $00
0009BE93                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BE93                            	smpsVcAmpMod        $00, $00, $00, $00
0009BE93                            	smpsVcDecayRate1    $02, $09, $18, $05
0009BE93                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009BE93                            	smpsVcDecayLevel    $02, $04, $02, $01
0009BE93                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BEAC                            
0009BEAC                            
0009BEAC                            		even
0009BEAC                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009BED4                            		even
0009BED4                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009BF00                            		even
0009BF00                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009BF00                            Sound_B6_Header:
0009BF00                            	smpsHeaderStartSong 3
0009BF02 01                         	smpsHeaderTempoSFX  $01
0009BF03 02                         	smpsHeaderChanSFX   $02
0009BF04                            
0009BF10                            
0009BF10                            ; FM5 Data
0009BF10                            Sound_B6_FM5:
0009BF10 EF00                       	smpsSetvoice        $00
0009BF17 CD0F                       	dc.b	nE6, $0F
0009BF19 F2                         	smpsStop
0009BF1A                            
0009BF1A                            ; PSG3 Data
0009BF1A                            Sound_B6_PSG3:
0009BF1A F507                       	smpsPSGvoice        sTone_1D
0009BF1C 8006                       	dc.b	nRst, $06
0009BF23 F3E7                       	smpsPSGform         $E7
0009BF25 CD4F                       	dc.b	nE6, $4F
0009BF27 F2                         	smpsStop
0009BF28                            
0009BF28                            Sound_B6_Voices:
0009BF28                            ;	Voice $00
0009BF28                            ;	$3D
0009BF28                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009BF28                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009BF28                            	smpsVcAlgorithm     $05
0009BF28                            	smpsVcFeedback      $07
0009BF28                            	smpsVcUnusedBits    $00
0009BF28                            	smpsVcDetune        $00, $00, $00, $00
0009BF28                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009BF28                            	smpsVcRateScale     $00, $00, $00, $00
0009BF28                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BF28                            	smpsVcAmpMod        $00, $00, $00, $00
0009BF28                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009BF28                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009BF28                            	smpsVcDecayLevel    $02, $04, $02, $01
0009BF28                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BF41                            
0009BF41                            
0009BF42 00                         		even
0009BF42                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009BF96                            		even
0009BF96                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009BFD0                            		even
0009BFD0                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009C042                            		even
0009C042                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009C070                            		even
0009C070                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009C0AA                            		even
0009C0AA                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009C0AA                            SndC1_Header:
0009C0AA                            	smpsHeaderStartSong 3
0009C0AC 01                         	smpsHeaderTempoSFX  $01
0009C0AD 01                         	smpsHeaderChanSFX   $01
0009C0AE                            
0009C0B4                            
0009C0B4                            ; FM4 Data
0009C0B4                            SndC1_FM4:
0009C0B4 EF00                       	smpsSetvoice        $00
0009C0B6 D506 40                    	dc.b	nC7, $06, $40
0009C0B9 F2                         	smpsStop
0009C0BA                            
0009C0BA                            SndC1_Voices:
0009C0BA                            ;	Voice $00
0009C0BA                            ;	$38
0009C0BA                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009C0BA                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009C0BA                            	smpsVcAlgorithm     $00
0009C0BA                            	smpsVcFeedback      $07
0009C0BA                            	smpsVcUnusedBits    $00
0009C0BA                            	smpsVcDetune        $00, $00, $00, $00
0009C0BA                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009C0BA                            	smpsVcRateScale     $00, $00, $00, $00
0009C0BA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C0BA                            	smpsVcAmpMod        $00, $00, $00, $00
0009C0BA                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009C0BA                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C0BA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C0BA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C0D4 00                         		even
0009C0D4                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009C14E                            		even
0009C14E                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009C176                            		even
0009C176                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009C176                            Sound_B0_Header:
0009C176                            	smpsHeaderStartSong 3
0009C178 01                         	smpsHeaderTempoSFX  $01
0009C179 03                         	smpsHeaderChanSFX   $03
0009C17A                            
0009C18C                            
0009C18C                            ; FM5 Data
0009C18C                            Sound_B0_FM5:
0009C18C EF00                       	smpsSetvoice        $00
0009C18E 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009C194 F2                         	smpsStop
0009C195                            
0009C195                            ; FM4 Data
0009C195                            Sound_B0_FM4:
0009C195 EF01                       	smpsSetvoice        $01
0009C197 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009C19B F2                         	smpsStop
0009C19C                            
0009C19C                            ; FM3 Data
0009C19C                            Sound_B0_FM3:
0009C19C EF02                       	smpsSetvoice        $02
0009C19E 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009C1A5 F2                         	smpsStop
0009C1A6                            
0009C1A6                            Sound_B0_Voices:
0009C1A6                            ;	Voice $00
0009C1A6                            ;	$3B
0009C1A6                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009C1A6                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009C1A6                            	smpsVcAlgorithm     $03
0009C1A6                            	smpsVcFeedback      $07
0009C1A6                            	smpsVcUnusedBits    $00
0009C1A6                            	smpsVcDetune        $00, $00, $00, $00
0009C1A6                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009C1A6                            	smpsVcRateScale     $02, $00, $00, $00
0009C1A6                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009C1A6                            	smpsVcAmpMod        $00, $00, $00, $00
0009C1A6                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009C1A6                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C1A6                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C1A6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C1BF                            
0009C1BF                            ;	Voice $01
0009C1BF                            ;	$04
0009C1BF                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C1BF                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009C1BF                            	smpsVcAlgorithm     $04
0009C1BF                            	smpsVcFeedback      $00
0009C1BF                            	smpsVcUnusedBits    $00
0009C1BF                            	smpsVcDetune        $04, $07, $07, $03
0009C1BF                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009C1BF                            	smpsVcRateScale     $00, $00, $00, $00
0009C1BF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C1BF                            	smpsVcAmpMod        $00, $00, $00, $00
0009C1BF                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C1BF                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C1BF                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C1BF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C1D8                            
0009C1D8                            ;	Voice $02
0009C1D8                            ;	$3C
0009C1D8                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009C1D8                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009C1D8                            	smpsVcAlgorithm     $04
0009C1D8                            	smpsVcFeedback      $07
0009C1D8                            	smpsVcUnusedBits    $00
0009C1D8                            	smpsVcDetune        $00, $00, $00, $00
0009C1D8                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009C1D8                            	smpsVcRateScale     $00, $00, $00, $00
0009C1D8                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009C1D8                            	smpsVcAmpMod        $00, $00, $00, $00
0009C1D8                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009C1D8                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009C1D8                            	smpsVcDecayLevel    $02, $09, $09, $01
0009C1D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C1F1                            
0009C1F1                            
0009C1F2 00                         		even
0009C1F2                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009C234                            		even
0009C234                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009C262                            		even
0009C262                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009C274                            		even
0009C274                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009C2A2                            		even
0009C2A2                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009C2D0                            		even
0009C2D0                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009C31C                            		even
0009C31C                            SoundCC:	include	"sound/sfx/Spring.asm"
0009C31C                            Spring_Header:
0009C31C                            	smpsHeaderStartSong 1
0009C31E 01                         	smpsHeaderTempoSFX  $01
0009C31F 01                         	smpsHeaderChanSFX   $01
0009C320                            
0009C326                            
0009C326                            ; FM6 Data
0009C326                            Spring_FM6:
0009C326 EF00                       	smpsSetvoice        $00
0009C328 8001                       	dc.b	nRst, $01
0009C32F B006                       	dc.b	nB3, $06
0009C331 F4                         	smpsModOff
0009C332 EF01                       	smpsSetvoice        $01
0009C334                            
0009C334                            Spring_Loop00:
0009C334 BD02                       	dc.b	nC5, $02
0009C336 E601                       	smpsAlterVol      $01
0009C338 E7                         	dc.b	smpsNoAttack
0009C339 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009C33E F2                         	smpsStop
0009C33F                            
0009C33F                            Spring_Voices:
0009C33F                            ;	Voice $00
0009C33F                            ;	$20
0009C33F                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009C33F                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009C33F                            	smpsVcAlgorithm     $00
0009C33F                            	smpsVcFeedback      $04
0009C33F                            	smpsVcUnusedBits    $00
0009C33F                            	smpsVcDetune        $03, $03, $03, $03
0009C33F                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009C33F                            	smpsVcRateScale     $02, $02, $03, $03
0009C33F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C33F                            	smpsVcAmpMod        $00, $00, $00, $00
0009C33F                            	smpsVcDecayRate1    $06, $09, $06, $07
0009C33F                            	smpsVcDecayRate2    $08, $06, $06, $07
0009C33F                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009C33F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C358                            
0009C358                            ;	Voice $01
0009C358                            ;	$20
0009C358                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009C358                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009C358                            	smpsVcAlgorithm     $00
0009C358                            	smpsVcFeedback      $04
0009C358                            	smpsVcUnusedBits    $00
0009C358                            	smpsVcDetune        $03, $03, $03, $03
0009C358                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009C358                            	smpsVcRateScale     $02, $02, $02, $02
0009C358                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C358                            	smpsVcAmpMod        $00, $00, $00, $00
0009C358                            	smpsVcDecayRate1    $06, $09, $06, $07
0009C358                            	smpsVcDecayRate2    $08, $06, $06, $07
0009C358                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009C358                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C372 00                         		even
0009C372                            SoundCD:	include	"sound/sfx/Beep.asm"
0009C372                            Snd99_Header:
0009C372                            	smpsHeaderStartSong 3
0009C374 01                         	smpsHeaderTempoSFX  $01
0009C375 01                         	smpsHeaderChanSFX   $01
0009C376                            
0009C37C                            
0009C37C                            ; FM4 Data
0009C37C                            Snd99_FM4:
0009C37C EF00                       	smpsSetvoice        $00
0009C37E B502                       	dc.b	nE4, $02
0009C380 F2                         	smpsStop
0009C381                            
0009C381                            Snd99_Voices:
0009C381                            ;	Voice $00
0009C381                            ;	$07
0009C381                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009C381                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009C381                            	smpsVcAlgorithm     $07
0009C381                            	smpsVcFeedback      $00
0009C381                            	smpsVcUnusedBits    $00
0009C381                            	smpsVcDetune        $00, $00, $00, $00
0009C381                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009C381                            	smpsVcRateScale     $00, $00, $00, $00
0009C381                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C381                            	smpsVcAmpMod        $00, $00, $00, $00
0009C381                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C381                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C381                            	smpsVcDecayLevel    $00, $00, $00, $00
0009C381                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C39A                            		even
0009C39A                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009C3C8                            		even
0009C3C8                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009C3C8                            SignpostCD_Header:
0009C3C8                            	smpsHeaderStartSong 3
0009C3CA 01                         	smpsHeaderTempoSFX  $01
0009C3CB 02                         	smpsHeaderChanSFX   $02
0009C3CC                            
0009C3D8                            
0009C3D8                            ; FM5 Data
0009C3D8                            Snd9D_FM5:
0009C3D8 8004                       	dc.b	nRst, $04
0009C3DA                            
0009C3DA                            ; FM4 Data
0009C3DA                            Snd9D_FM4:
0009C3DA EF00                       	smpsSetvoice        $00
0009C3DC                            
0009C3DC                            Snd9D_Loop00:
0009C3DC B405                       	dc.b	nEb4, $05
0009C3DE E604                       	smpsFMAlterVol      $04
0009C3E0 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009C3E5 F2                         	smpsStop
0009C3E6                            
0009C3E6                            Snd9D_Voices:
0009C3E6                            ;	Voice $00
0009C3E6                            ;	$F4
0009C3E6                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009C3E6                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009C3E6                            	smpsVcAlgorithm     $04
0009C3E6                            	smpsVcFeedback      $06
0009C3E6                            	smpsVcUnusedBits    $03
0009C3E6                            	smpsVcDetune        $00, $00, $00, $00
0009C3E6                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009C3E6                            	smpsVcRateScale     $00, $00, $00, $00
0009C3E6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C3E6                            	smpsVcAmpMod        $00, $00, $00, $00
0009C3E6                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009C3E6                            	smpsVcDecayRate2    $08, $05, $00, $00
0009C3E6                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009C3E6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C400 00                         		even
0009C400                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009C43A                            		even
0009C43A                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009C43A                            Sound_41_Header:
0009C43A                            	smpsHeaderStartSong 3
0009C43C 01                         	smpsHeaderTempoSFX  $01
0009C43D 01                         	smpsHeaderChanSFX   $01
0009C43E                            
0009C444                            	
0009C444                            Sound41_FM5:
0009C444 EF00                       	smpsSetvoice        $00
0009C446 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C44B F2                         	smpsStop
0009C44C                            
0009C44C                            Sound_41_Voices:
0009C44C                            ;	Voice $00
0009C44C                            ;	$36
0009C44C                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009C44C                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009C44C                            	smpsVcAlgorithm     $06
0009C44C                            	smpsVcFeedback      $06
0009C44C                            	smpsVcUnusedBits    $00
0009C44C                            	smpsVcDetune        $00, $00, $01, $00
0009C44C                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009C44C                            	smpsVcRateScale     $00, $00, $00, $00
0009C44C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C44C                            	smpsVcAmpMod        $00, $00, $00, $00
0009C44C                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C44C                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009C44C                            	smpsVcDecayLevel    $00, $00, $00, $00
0009C44C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C465                            
0009C465                            
0009C466 00                         		even
0009C466                            		; Don't let Sega sample cross $8000-byte boundary
0009C466                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1250                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2182                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1180                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 12FE                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 12FE                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1888                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1888                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1888                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 242C                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1250                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A00                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20DC                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A00                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A2                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; green_hill_zone_act_1
000A6B04 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000A6B08 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000A6B0C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000A6B10 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000A6B16 21FC 0000 1388 FFC0        		move.l	#$1388,(v_scorelife).w ; extra life is awarded at 50000 points
000A6B1E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; => Level (Zone play mode)
000A6B24 4E75                       		rts
000A6B26                            ; ===========================================================================
000A6B26                            ; loc_90B6:
000A6B26                            OptionScreen_Select_Not1P:
000A6B26 5300                       		subq.b	#1,d0
000A6B28 6600                       		bne.s	OptionScreen_Select_Other
000A6B2A 6094                       		bra.s	OptionScreen_Main
000A6B2C                            ; ===========================================================================
000A6B2C                            ; loc_90D8:
000A6B2C                            OptionScreen_Select_Other:
000A6B2C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B32 4E75                       		rts
000A6B34                            
000A6B34                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B34                            
000A6B34                            ;sub_90E0:
000A6B34                            OptionScreen_Controls:
000A6B34 7400                       		moveq	#0,d2
000A6B36 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B3A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B3E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B42 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B44 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B46 6400                       		bcc.s	Option_Controls_Down
000A6B48 143C 0002                  		move.b	#2,d2
000A6B4C                            
000A6B4C                            Option_Controls_Down:
000A6B4C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B50 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B52 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B54 0C02 0003                  		cmpi.b	#3,d2
000A6B58 6500                       		blo.s	Option_Controls_Refresh
000A6B5A 7400                       		moveq	#0,d2
000A6B5C                            
000A6B5C                            Option_Controls_Refresh:
000A6B5C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B60 E54A                       		lsl.w	#2,d2
000A6B62 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B66 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B6A 3411                       		move.w	(a1),d2
000A6B6C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B70 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B72 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B74 6400                       		bcc.s	Option_Controls_Right
000A6B76 1403                       		move.b	d3,d2
000A6B78                            
000A6B78                            Option_Controls_Right:
000A6B78 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B7C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B7E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B80 B403                       		cmp.b	d3,d2
000A6B82 6300                       		bls.s	Option_Controls_Button_A
000A6B84 7400                       		moveq	#0,d2
000A6B86                            
000A6B86                            Option_Controls_Button_A:
000A6B86 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B8A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B8C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B90 B403                       		cmp.b	d3,d2
000A6B92 6300                       		bls.s	Option_Controls_Refresh2
000A6B94 7400                       		moveq	#0,d2
000A6B96                            
000A6B96                            Option_Controls_Refresh2:
000A6B96 3282                       		move.w	d2,(a1)
000A6B98                            
000A6B98                            Option_Controls_NoMove:
000A6B98 4E75                       		rts
000A6B9A                            ; End of function OptionScreen_Controls
000A6B9A                            
000A6B9A                            ; ===========================================================================
000A6B9A                            ; word_917A:
000A6B9A                            OptionScreen_Choices:
000A6B9A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B9E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6BA2 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6BA6                            		even
000A6BA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6BA6                            
000A6BA6                            
000A6BA6                            OptionScreen_DrawSelected:
000A6BA6 6100 0000                  		bsr.w	loc_9268
000A6BAA 7200                       		moveq	#0,d1
000A6BAC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BB0 E749                       		lsl.w	#3,d1
000A6BB2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BB8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BBC 303C 6000                  		move.w	#$6000,d0
000A6BC0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BC6 225B                       		movea.l	(a3)+,a1
000A6BC8 6100 FE5C                  		bsr.w	MenuScreenTextToRAM
000A6BCC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BD2 7200                       		moveq	#0,d1
000A6BD4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BDA 6700                       		beq.s	loc_9186
000A6BDC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BE0 E549                       		lsl.w	#2,d1
000A6BE2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BE6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BEA 3211                       		move.w	(a1),d1
000A6BEC E549                       		lsl.w	#2,d1
000A6BEE                            
000A6BEE                            loc_9186:		
000A6BEE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BF2 6100 FE32                  		bsr.w	MenuScreenTextToRAM
000A6BF6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BF6                            		;bne.s	loc2_9186
000A6BF6                            		;lea	($FFFF00C2).l,a2
000A6BF6                            		;bsr.w	loc_9296
000A6BF6                            
000A6BF6                            loc2_9186:		
000A6BF6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BFC 201B                       		move.l	(a3)+,d0
000A6BFE 7215                       		moveq	#$15,d1
000A6C00 7407                       		moveq	#7,d2
000A6C02 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C06                            ; ===========================================================================
000A6C06                            
000A6C06                            OptionScreen_DrawUnselected:
000A6C06 6100 0000                  		bsr.w	loc_9268
000A6C0A 7200                       		moveq	#0,d1
000A6C0C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C10 E749                       		lsl.w	#3,d1
000A6C12 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6C18 47F3 1000                  		lea	(a3,d1.w),a3
000A6C1C 7000                       		moveq	#0,d0
000A6C1E 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C24 225B                       		movea.l	(a3)+,a1
000A6C26 6100 FDFE                  		bsr.w	MenuScreenTextToRAM
000A6C2A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C30 7200                       		moveq	#0,d1
000A6C32 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C38 6700                       		beq.s	loc2_91F8
000A6C3A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C3E E549                       		lsl.w	#2,d1
000A6C40 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C44 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C48 3211                       		move.w	(a1),d1
000A6C4A E549                       		lsl.w	#2,d1
000A6C4C                            
000A6C4C                            loc2_91F8		
000A6C4C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C50 6100 FDD4                  		bsr.w	MenuScreenTextToRAM
000A6C54                            		;cmpi.b	#2,(Options_menu_box).w
000A6C54                            		;bne.s	loc3_91F8
000A6C54                            		;lea	($FFFF0222).l,a2
000A6C54                            		;bsr.w	loc_9296
000A6C54                            
000A6C54                            loc3_91F8		
000A6C54 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C5A 201B                       		move.l	(a3)+,d0
000A6C5C 7215                       		moveq	#$15,d1
000A6C5E 7407                       		moveq	#7,d2
000A6C60 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C64                            ; ===========================================================================
000A6C64                            
000A6C64                            loc_9268:
000A6C64 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C6A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C6E 6A00                       		bpl.s	loc2_9268
000A6C70 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C76                            
000A6C76                            loc2_9268:
000A6C76 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C7A 6700                       		beq.s	loc3_9268
000A6C7C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C82                            
000A6C82                            loc3_9268:
000A6C82 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C88 6600                       		bne.s	loc4_9268		; rts
000A6C8A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C90                            
000A6C90                            loc4_9268:
000A6C90 4E75                       		rts
000A6C92                            ; ===========================================================================
000A6C92                            
000A6C92                            loc_9296:
000A6C92 4E75                       		rts
000A6C94                            
000A6C94                            Dynamic_Menu:
000A6C94 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C98                            
000A6C98                            loc_3FF30:
000A6C98 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C9A                            
000A6C9A                            loc_3FF32:
000A6C9A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C9C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C9E 7000                       	moveq	#0,d0
000A6CA0 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6CA4 B02A 0006                  	cmp.b	6(a2),d0
000A6CA8 6500                       	blo.s	loc_3FF48
000A6CAA 7000                       	moveq	#0,d0
000A6CAC 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6CB0                            
000A6CB0                            loc_3FF48:
000A6CB0 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6CB4 1692                       	move.b	(a2),(a3)	; set timer
000A6CB6 6A00                       	bpl.s	loc_3FF56
000A6CB8 D040                       	add.w	d0,d0
000A6CBA 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6CBE                            
000A6CBE                            loc_3FF56:
000A6CBE 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CC2 EB48                       	lsl.w	#5,d0
000A6CC4 342A 0004                  	move.w	4(a2),d2
000A6CC8 2212                       	move.l	(a2),d1
000A6CCA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CD0 D280                       	add.l	d0,d1
000A6CD2 7600                       	moveq	#0,d3
000A6CD4 162A 0007                  	move.b	7(a2),d3
000A6CD8 E94B                       	lsl.w	#4,d3
000A6CDA 4EB9 0000 1426             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CE0                            
000A6CE0                            loc_3FF78:
000A6CE0 102A 0006                  	move.b	6(a2),d0
000A6CE4 4A12                       	tst.b	(a2)
000A6CE6 6A00                       	bpl.s	loc_3FF82
000A6CE8 D000                       	add.b	d0,d0
000A6CEA                            
000A6CEA                            loc_3FF82:
000A6CEA 5200                       	addq.b	#1,d0
000A6CEC 0240 00FE                  	andi.w	#$FE,d0
000A6CF0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CF4 544B                       	addq.w	#2,a3
000A6CF6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CFA 4E75                       	rts
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ; MENU ANIMATION SCRIPT
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ;word_87C6:
000A6CFC                            Anim_SonicMilesBG:
000A6CFC 0000                       	dc.w   0
000A6CFE                            ; Sonic/Miles animated background
000A6CFE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6D02 0020                       	dc.w $20
000A6D04 06                         	dc.b 6
000A6D05 0A                         	dc.b $A
000A6D06 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6D08 0A05                       	dc.b  $A,  5	; 2
000A6D0A 1405                       	dc.b $14,  5	; 4
000A6D0C 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6D0E 1405                       	dc.b $14,  5	; 8
000A6D10 0A05                       	dc.b  $A,  5	; 10	
000A6D12                            ; ===========================================================================
000A6D12                            ; off_92BA:
000A6D12                            OptScrBoxData:
000A6D12                            
000A6D12 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6D16 4192                       		dc.w $4192
000A6D18 0003                       		dc.w 3
000A6D1A 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6D1E 4592                       		dc.w $4592
000A6D20 0003                       		dc.w 3
000A6D22 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D26 4992                       		dc.w $4992
000A6D28 0003                       		dc.w 3
000A6D2A                            
000A6D2A                            off_92D2:
000A6D2A 0000 0000                  		dc.l TextOptScr_Default
000A6D2E 0000 0000                  		dc.l TextOptScr_Original
000A6D32 0000 0000                  		dc.l TextOptScr_Beta
000A6D36 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3A 0000 0000                  		dc.l TextOptScr_C2
000A6D3E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D42 0000 0000                  		dc.l TextOptScr_RHS
000A6D46 0000 0000                  		dc.l TextOptScr_Socket
000A6D4A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D4E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D52                            off_92DE:
000A6D52 0000 0000                  		dc.l TextOptScr_Default
000A6D56 0000 0000                  		dc.l TextOptScr_Original
000A6D5A 0000 0000                  		dc.l TextOptScr_Beta
000A6D5E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D62 0000 0000                  		dc.l TextOptScr_C2
000A6D66 0000 0000                  		dc.l TextOptScr_Clackers
000A6D6A 0000 0000                  		dc.l TextOptScr_RHS
000A6D6E 0000 0000                  		dc.l TextOptScr_Socket
000A6D72 0000 0000                  		dc.l TextOptScr_Cringe
000A6D76 0000 0000                  		dc.l TextOptScr_Dark	
000A6D7A                            off_92EA:
000A6D7A 0000 0000                  		dc.l TextOptScr_On
000A6D7E 0000 0000                  		dc.l TextOptScr_Off
000A6D82                            off_92F2:
000A6D82 0000 0000                  		dc.l TextOptScr_Null
000A6D86 0000 0000                  		dc.l TextOptScr_Null2
000A6D8A                            ; ===========================================================================
000A6D8A                            
000A6EA9                            ; ============================================================================
000A6EA9                            
000A6EA9                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A73AA 00                         		even
000A73AA                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7556                            		even
000A7556                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AC0                            		even
000A7AC0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B40                            		even
000A7B40                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B6C                            		even
000A7B6C                            		even
000A7B6C                            
000A7B6C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253F0                                        even
001253F0                            
001253F0                            Art_Dust	incbin	artunc\spindust.bin
00126D30                            
00126D30                            ; ===============================================================
00126D30                            ; ---------------------------------------------------------------
00126D30                            ; Error handling module
00126D30                            ; ---------------------------------------------------------------
00126D30                             
00126D30 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D34 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D3E 01                                 dc.b    1               ; extended stack frame
00126D40 00                                 even
00126D40                             
00126D40 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D44 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D52 01                                 dc.b    1               ; extended stack frame
00126D54 00                                 even
00126D54                             
00126D54 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D58 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D6C 00                                 dc.b    0               ; extended stack frame
00126D6E 00                                 even
00126D6E                             
00126D6E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D72 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D7E 00                                 dc.b    0               ; extended stack frame
00126D80 00                                 even
00126D80                             
00126D80 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D84 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D94 00                                 dc.b    0               ; extended stack frame
00126D96 00                                 even
00126D96                             
00126D96 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D9A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126DAC 00                                 dc.b    0               ; extended stack frame
00126DAE 00                                 even
00126DAE                             
00126DAE 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126DB2 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DC6 00                                 dc.b    0               ; extended stack frame
00126DC8 00                                 even
00126DC8                             
00126DC8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DCC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DD2 00                                 dc.b    0               ; extended stack frame
00126DD4 00                                 even
00126DD4                             
00126DD4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DD8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DEB 00                                 dc.b    0               ; extended stack frame
00126DEC                                    even
00126DEC                             
00126DEC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DF0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126E03 00                                 dc.b    0               ; extended stack frame
00126E04                                    even
00126E04                             
00126E04 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126E08 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126E18 00                                 dc.b    0               ; extended stack frame
00126E1A 00                                 even
00126E1A                             
00126E1A                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275FE                            
001275FE                            ; end of 'ROM'
001275FE                            		even
001275FE                            EndOfRom:
001275FE                            
001275FE                            
